unint64_t WebCore::jsFetchRequestPrototypeFunction_formData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF90F4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::formData(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "formData", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchRequestPrototypeFunction_json(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF92E8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::json(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "json", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchRequestPrototypeFunction_text(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AF94DCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchRequest *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::text(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Request", "text", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_DWORD *WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>>::releaseReturnValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _DWORD **v4;
  _QWORD *v5;

  if (!*(_DWORD *)(a1 + 32))
    return (_DWORD *)std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::optional[abi:sn180100](a2, a1 + 8);
  v3 = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(v3, v4, v5);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(uint64_t *a1, _QWORD **a2, _QWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(*a1, a2, a3);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 3;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WebCore::URLSearchParams *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(WebCore::URLSearchParams *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 4)
  {
    result = (WebCore::URLSearchParams *)((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 4;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WebCore::URLSearchParams **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::URLSearchParams::~URLSearchParams(result, a2);
      return (WebCore::URLSearchParams *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 5;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (v9[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[4];
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS13_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS17_1EJSG_SL_SP_ST_SX_S11_S12_EEEOS1H_EEEDcS19_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 6)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 6;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  _QWORD *v13;
  char v14;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_17;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3275418[v5])(&v14, result);
LABEL_17:
    v13 = (_QWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v13;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = (_QWORD *)*a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(_DWORD *)v7 == 2;
    *(_DWORD *)v7 -= 2;
    if (v8)
    {
      v9 = v7[10];
      if (v9)
      {
        *(_QWORD *)(v9 + 8) = 3;
        v7[10] = 0;
      }
      if ((v7[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v7 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v7 + 2));
      v11 = (WTF *)v7[1];
      if ((v11 & 1) == 0 && v11)
      {
        v12 = *(WTF **)v11;
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          WTF::fastFree(v12, v10);
        }
        WTF::fastFree(v11, v10);
      }
      return WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN7WebCore4BlobENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_IN3JSC15ArrayBufferViewENSE_ISK_EENSG_ISK_EEEENSB_INSJ_11ArrayBufferENSE_ISO_EENSG_ISO_EEEENSB_INSC_11DOMFormDataENSE_ISS_EENSG_ISS_EEEENSB_INSC_15URLSearchParamsENSE_ISW_EENSG_ISW_EEEENSB_INSC_14ReadableStreamENSE_IS10_EENSG_IS10_EEEENSA_6StringEEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E3275418[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSE_SH_EEEOSW_EEEDcSO_DpT0_(WTF *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32751F0[v5])(&v16, v4);
LABEL_18:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v14 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_QWORD *)(v4 + 12) = v14;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  v8 = *(WTF **)a2;
  if ((_DWORD)v7)
  {
    v9 = (WTF *)((char *)v8 + 16 * v7);
    do
    {
      v10 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v10)
      {
        v11 = *(WTF::StringImpl ***)v8;
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      result = *(WTF **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)v8 = 0;
        *((_DWORD *)v8 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v8 = (WTF *)((char *)v8 + 16);
    }
    while (v8 != v9);
    v8 = *(WTF **)a2;
  }
  if (v8)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (WTF *)WTF::fastFree(v8, a2);
  }
  v15 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v15;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EENS9_INS8_12KeyValuePairISA_SA_EELm0ESB_Lm16ESC_EEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJSE_SH_EEEOSW_EEEDcSO_DpT0_(WTF *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_16;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32751F0[v5])(&v14, v4);
LABEL_16:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v12;
    LODWORD(v12) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v12;
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v8 = 16 * v7;
    v9 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *(v9 - 1);
      *(v9 - 1) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v13;
  LODWORD(v13) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v13;
  LODWORD(v13) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v13;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorINSA_INS9_6StringELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEELm0ESC_Lm16ESD_EENSA_INS9_12KeyValuePairISB_SB_EELm0ESC_Lm16ESD_EEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSJ_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32751F0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore13FetchResponseENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13FetchResponse4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E32751F0[v3])(&v5, a2 + 16);
    *(_DWORD *)(a2 + 32) = -1;
  }
  result = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsFetchResponseConstructorFunction_error(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::FetchResponse *v4;
  _QWORD *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v9;

  v4 = (WebCore::FetchResponse *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v4)
    return 10;
  v5 = WebCore::FetchResponse::error(v4, (uint64_t *)&v9);
  v6 = WebCore::toJSNewlyCreated((uint64_t)v5, (uint64_t)this, (WebCore::JSDOMGlobalObject *)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  return v6;
}

unint64_t WebCore::jsFetchResponseConstructorFunction_redirect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v6;
  WebCore::FetchResponse *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  JSC::VM *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  long double v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  unint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;
  double v26;
  char hasExceptionsAfterHandlingTraps;
  WebCore *v28;
  JSC::JSGlobalObject *v29;
  JSC::CallFrame *v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  int v37;
  JSC::VM *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v6)
    return 10;
  v7 = (WebCore::FetchResponse *)v6;
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v36);
  v8 = v37;
  if (v37)
  {
    v22 = 0;
LABEL_34:
    if (v8 != -1)
      ((void (*)(unint64_t *, WTF::StringImpl **))off_1E3272138[v8])(&v33, &v36);
    return v22;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL || (v9 = *((_QWORD *)a2 + 7), v9 == 10))
  {
    v10 = 302;
  }
  else
  {
    v33 = v9;
    v11 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v9 < 0xFFFE000000000000 || (v9 & 0x80000000) != 0)
    {
      if (v9 >= 0xFFFE000000000000)
      {
        v13 = (double)(int)v9;
      }
      else if (v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v31 = (JSC::VM *)*((_QWORD *)this + 7);
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v33, this);
        v11 = v31;
      }
      else
      {
        *(_QWORD *)&v13 = v9 - 0x2000000000000;
      }
      if (*((_DWORD *)v11 + 20))
      {
        v26 = v13;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
        v13 = v26;
        if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        {
          v22 = 0;
LABEL_33:
          v8 = v37;
          goto LABEL_34;
        }
      }
      LOWORD(v12) = 0;
      if (fabs(v13) != INFINITY && v13 != 0.0)
      {
        v14 = -floor(-v13);
        v15 = floor(v13);
        if (v13 >= 0.0)
          v16 = v15;
        else
          v16 = v14;
        v17 = fmod(v16, 65536.0);
        if (v17 < 0.0)
          v17 = v17 + 65536.0;
        v12 = (int)v17;
      }
    }
    else
    {
      LOWORD(v12) = v9;
    }
    if (v37)
      goto LABEL_54;
    v10 = (unsigned __int16)v12;
  }
  v18 = v36;
  v36 = 0;
  v32 = v18;
  v19 = WebCore::FetchResponse::redirect(v7, (const WTF::String *)v10, (uint64_t)&v33);
  if (!v35)
  {
    v21 = (_DWORD *)v33;
    v33 = 0;
    v39 = v21;
    v22 = WebCore::toJSNewlyCreated((uint64_t)v19, (uint64_t)this, (WebCore::JSDOMGlobalObject *)&v39);
    if (v39)
    {
      if (v39[6] == 1)
        (*(void (**)(void))(*(_QWORD *)v39 + 16))();
      else
        --v39[6];
    }
LABEL_28:
    if (v35 != -1)
      ((void (*)(_DWORD **, unint64_t *))off_1E32758B8[v35])(&v39, &v33);
    v35 = -1;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v20);
      else
        *(_DWORD *)v32 -= 2;
    }
    goto LABEL_33;
  }
  if (v35 == 1)
  {
    LOBYTE(v39) = v33;
    v25 = v34;
    v34 = 0;
    v40 = v25;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v38, (unsigned __int8 *)&v39);
      v25 = v40;
    }
    v40 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v20);
      else
        *(_DWORD *)v25 -= 2;
    }
    v22 = 0;
    goto LABEL_28;
  }
LABEL_54:
  v28 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsFetchResponseConstructorFunction_json(v28, v29, v30);
}

unint64_t WebCore::jsFetchResponseConstructorFunction_json(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  JSValue v18;
  WTF::StringImpl *v19;
  WebCore *v20;
  JSC::JSGlobalObject *v21;
  JSC::CallFrame *v22;
  unsigned __int16 v23;
  WTF::StringImpl *v24;
  _BYTE v25[16];
  int v26;
  char v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  int v30;
  unsigned __int16 v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  JSC::VM *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v18);
  }
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v6)
    return 10;
  v7 = (WebCore::ScriptExecutionContext *)v6;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v8 = 10;
  else
    v8 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::FetchResponse::Init>((uint64_t)&v31, this, (JSC::JSCell *)v8);
  v9 = v36;
  if (v36)
  {
    v15 = 0;
LABEL_25:
    if (v9 != -1)
      ((void (*)(unsigned __int16 *, unsigned __int16 *))off_1E32758C8[v9])(&v23, &v31);
    return v15;
  }
  v23 = v31;
  v10 = v32;
  v32 = 0;
  v24 = v10;
  v25[0] = 0;
  v27 = 0;
  if (v35)
  {
    v26 = -1;
    v11 = v34;
    if (v34 != -1)
    {
      ((void (*)(_DWORD **, _BYTE *, uint64_t *))off_1E3275200[v34])(&v28, v25, &v33);
      v26 = v11;
    }
    v27 = 1;
  }
  v12 = WebCore::FetchResponse::jsonForBindings(v7, &v23, (uint64_t)&v28);
  if (!v30)
  {
    v14 = v28;
    v28 = 0;
    v38 = v14;
    v15 = WebCore::toJSNewlyCreated((uint64_t)v12, (uint64_t)this, (WebCore::JSDOMGlobalObject *)&v38);
    if (v38)
    {
      if (v38[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
      else
        --v38[6];
    }
LABEL_15:
    if (v30 != -1)
      ((void (*)(_DWORD **, _DWORD **))off_1E32758B8[v30])(&v38, &v28);
    v30 = -1;
    if (v27)
    {
      if (v26 != -1)
        ((void (*)(_DWORD **, _BYTE *))off_1E32751F0[v26])(&v38, v25);
      v26 = -1;
    }
    v16 = v24;
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v9 = v36;
    goto LABEL_25;
  }
  if (v30 == 1)
  {
    LOBYTE(v38) = (_BYTE)v28;
    v19 = v29;
    v29 = 0;
    v39 = v19;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v37, (unsigned __int8 *)&v38);
      v19 = v39;
    }
    v39 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    v15 = 0;
    goto LABEL_15;
  }
  v20 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsFetchResponsePrototypeFunction_clone(v20, v21, v22);
}

_BYTE *WebCore::jsFetchResponsePrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  int v6;
  WebCore::FetchResponse *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v14;
  WebCore *v15;
  JSC::JSGlobalObject *v16;
  JSC::CallFrame *v17;
  JSC::VM *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  int v21;
  JSC::VM *v22;
  _DWORD *v23;
  WTF::StringImpl *v24;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = JSC::jsDynamicCast<WebCore::JSFetchResponse *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Response", "clone");
  v6 = *(_DWORD *)v5;
  v7 = *(WebCore::FetchResponse **)(v5 + 24);
  v22 = v4;
  v8 = *(_QWORD *)(16 * (v6 & 0xFFFFFFFE) + 0x28);
  v9 = WebCore::FetchResponse::clone(v7, (uint64_t)&v19);
  if (!v21)
  {
    v11 = v19;
    v19 = 0;
    v23 = v11;
    v12 = WebCore::toJSNewlyCreated(v9, v8, (WebCore::JSDOMGlobalObject *)&v23);
    if (v23)
    {
      if (v23[6] == 1)
        (*(void (**)(void))(*(_QWORD *)v23 + 16))();
      else
        --v23[6];
    }
LABEL_6:
    if (v21 != -1)
      ((void (*)(_DWORD **, _DWORD **))off_1E32758B8[v21])(&v23, &v19);
    return (_BYTE *)v12;
  }
  if (v21 == 1)
  {
    LOBYTE(v23) = (_BYTE)v19;
    v14 = v20;
    v20 = 0;
    v24 = v14;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v22, (unsigned __int8 *)&v23);
      v14 = v24;
    }
    v24 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v10);
      else
        *(_DWORD *)v14 -= 2;
    }
    v12 = 0;
    goto LABEL_6;
  }
  v15 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsFetchResponsePrototypeFunction_arrayBuffer(v15, v16, v17);
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_arrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  objc_class *v20;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFA7A8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v22 = v15;
  v16 = JSC::jsDynamicCast<WebCore::JSFetchResponse *>(*((_QWORD *)a2 + 5));
  if (v16)
  {
    WebCore::FetchBodyOwner::arrayBuffer(*(_QWORD *)(v16 + 24), (uint64_t *)&v22);
    v14 = v22;
    v22 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Response", "arrayBuffer", v17);
    v22 = 0;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_18:
  v18 = *(_QWORD *)(v10 + 16);
  if (v18)
  {
    if (*(_QWORD *)(v10 + 24) != v18)
    {
      v20 = *(objc_class **)(v18 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v22);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v22, v20, 0);
      v21 = v22;
      v22 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v21 + 16))(v21);
        else
          --*((_DWORD *)v21 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_blob(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  WebCore::DOMGuardedObject *v13;
  WebCore::DOMGuardedObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v21;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFAA18);
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *((_DWORD *)this + 291);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v12 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v11, a3);
  v13 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v14 = WebCore::DOMGuardedObject::DOMGuardedObject(v13, (unint64_t)this, v12);
  *(_QWORD *)v14 = &off_1E3226868;
  *((_DWORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 44) = 0;
  v27 = v14;
  v16 = *((_QWORD *)a2 + 5);
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSFetchResponse::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSFetchResponse::s_info && v19 != 0);
  }
  if (!v18)
  {
LABEL_31:
    WebCore::rejectPromiseWithThisTypeError(v13, (WebCore::DeferredPromise *)"Response", "blob", v15);
    v27 = 0;
  }
  else
  {
    WebCore::FetchBodyOwner::blob(*(_QWORD *)(v16 + 24), (uint64_t *)&v27);
    v13 = v27;
    v27 = 0;
    if (!v13)
      goto LABEL_18;
  }
  if (*((_DWORD *)v13 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v13 + 16))(v13);
  else
    --*((_DWORD *)v13 + 4);
LABEL_18:
  v21 = *(_QWORD *)(v9 + 16);
  if (v21)
  {
    if (*(_QWORD *)(v9 + 24) != v21)
    {
      v25 = *(objc_class **)(v21 + 8);
      JSC::VM::clearException((JSC::VM *)v9);
      WebCore::DeferredPromise::create((unint64_t)this, v12, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 10;
  return v12;
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_bytes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFAC60);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSFetchResponse::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSFetchResponse::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Response", "bytes", v16);
    v27 = 0;
  }
  else
  {
    WebCore::FetchBodyOwner::bytes(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_formData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFAEA8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSFetchResponse::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSFetchResponse::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Response", "formData", v16);
    v27 = 0;
  }
  else
  {
    WebCore::FetchBodyOwner::formData(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_json(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFB0F0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSFetchResponse::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSFetchResponse::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"Response", "json", v16);
    v27 = 0;
  }
  else
  {
    WebCore::FetchBodyOwner::json(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFetchResponsePrototypeFunction_text(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  WebCore::DOMGuardedObject *v13;
  WebCore::DOMGuardedObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char **v19;
  BOOL v20;
  uint64_t v21;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFB340);
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *((_DWORD *)this + 291);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v12 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v11, a3);
  v13 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v14 = WebCore::DOMGuardedObject::DOMGuardedObject(v13, (unint64_t)this, v12);
  *(_QWORD *)v14 = &off_1E3226868;
  *((_DWORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 44) = 0;
  v27 = v14;
  v16 = *((_QWORD *)a2 + 5);
  if ((v16 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSFetchResponse::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSFetchResponse::s_info && v19 != 0);
  }
  if (!v18)
  {
LABEL_31:
    WebCore::rejectPromiseWithThisTypeError(v13, (WebCore::DeferredPromise *)"Response", "text", v15);
    v27 = 0;
  }
  else
  {
    WebCore::FetchBodyOwner::text(*(_QWORD *)(v16 + 24), (uint64_t *)&v27);
    v13 = v27;
    v27 = 0;
    if (!v13)
      goto LABEL_18;
  }
  if (*((_DWORD *)v13 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v13 + 16))(v13);
  else
    --*((_DWORD *)v13 + 4);
LABEL_18:
  v21 = *(_QWORD *)(v9 + 16);
  if (v21)
  {
    if (*(_QWORD *)(v9 + 24) != v21)
    {
      v25 = *(objc_class **)(v21 + 8);
      JSC::VM::clearException((JSC::VM *)v9);
      WebCore::DeferredPromise::create((unint64_t)this, v12, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 10;
  return v12;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSDocumentFragment>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSDocumentTimeline::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDocumentTimeline::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDocumentTimeline *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDocumentTimeline *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDocumentTimeline::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDocumentType::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDocumentType::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDocumentType *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDocumentType *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDocumentType::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDynamicsCompressorNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDynamicsCompressorNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSDynamicsCompressorNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSDynamicsCompressorNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSDynamicsCompressorNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

_DWORD *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  JSC::VM *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t *v18;

  if (JSC::JSArrayBuffer::toWrapped(a1[7], a2))
    goto LABEL_2;
  JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)a2, &v17);
  if (!v17)
  {
    JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)a2, &v17);
    if (!v17)
    {
      if ((a2 & 0xFFFE000000000002) != 0)
      {
        v18 = (uint64_t *)a2;
        v7 = (JSC::VM *)a1[7];
LABEL_14:
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v18, (JSC::JSGlobalObject *)a1);
        goto LABEL_22;
      }
      v8 = *(unsigned __int8 *)(a2 + 5);
      if (v8 >= 0x17)
      {
LABEL_2:
        WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, a2, (uint64_t)&v15);
        v18 = &v15;
        result = (_DWORD *)WebCore::Detail::ConversionResultStorage<std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v18, a3);
        if (v16 != -1)
          return (_DWORD *)((uint64_t (*)(uint64_t **, uint64_t *))off_1E3273AB8[v16])(&v18, &v15);
        return result;
      }
      v18 = (uint64_t *)a2;
      v7 = (JSC::VM *)a1[7];
      if (v8 != 2)
        goto LABEL_14;
      v9 = *(WTF::StringImpl **)(a2 + 8);
      if ((v9 & 1) != 0)
      {
        v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a2, (JSC::JSGlobalObject *)a1);
        if (!v9)
          goto LABEL_21;
      }
      else if (!v9)
      {
LABEL_21:
        v17 = v9;
LABEL_22:
        if (*((_DWORD *)v7 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
          v10 = v17;
          if (hasExceptionsAfterHandlingTraps)
          {
            v16 = 1;
            v17 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, v13);
              else
                *(_DWORD *)v10 -= 2;
            }
            v11 = 1;
            v12 = 1;
            goto LABEL_25;
          }
        }
        else
        {
          v10 = v17;
        }
        v11 = 0;
        v12 = 0;
        v16 = 0;
        v15 = 0;
        *(_QWORD *)(a3 + 8) = v10;
        *(_DWORD *)(a3 + 16) = 1;
LABEL_25:
        *(_DWORD *)(a3 + 24) = v11;
        return (_DWORD *)((uint64_t (*)(uint64_t **, uint64_t *))off_1E3272138[v12])(&v18, &v15);
      }
      *(_DWORD *)v9 += 2;
      goto LABEL_21;
    }
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, a2, (uint64_t)&v15);
  v18 = &v15;
  WebCore::Detail::ConversionResultStorage<std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v18, a3);
  if (v16 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E3273AB8[v16])(&v18, &v15);
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::variant<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::String>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  JSC::HandleSet *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  JSC::HandleSet *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  JSC::HandleSet *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  JSC::HandleSet *v34;
  JSC::HandleSet *v35;
  uint64_t **v36;
  _QWORD *v37;
  _QWORD *v38;
  JSC::HandleSet *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(uint64_t ***)result;
  if (*(_DWORD *)(*(_QWORD *)result + 8))
  {
    *(_DWORD *)(a2 + 24) = 1;
  }
  else if (*v2)
  {
    v3 = *(JSC::HandleSet **)(((unint64_t)(*v2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v4 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (!v4)
    {
      v39 = *(JSC::HandleSet **)(((unint64_t)(*v2 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v42 = a2;
      v36 = *(uint64_t ***)result;
      result = JSC::HandleSet::grow(v3);
      v2 = v36;
      v3 = v39;
      a2 = v42;
      v4 = (_QWORD *)*((_QWORD *)v39 + 5);
    }
    *((_QWORD *)v3 + 5) = *v4;
    v4[2] = 0;
    v5 = v4 + 2;
    *v4 = 0;
    v4[1] = 0;
    v6 = *v2;
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v28 = *(_QWORD **)(((unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v29 = v28[3];
        v28 += 3;
        *(v5 - 2) = v29;
        *(v5 - 1) = v28;
        *v28 = v5 - 2;
        *(_QWORD *)(v29 + 8) = v5 - 2;
      }
    }
    else
    {
      v7 = 0;
    }
    *v5 = v7;
    v8 = v5 - 2;
    v9 = (unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000;
    v10 = *(JSC::HandleSet **)(v9 + 0x10);
    v11 = *((_QWORD *)v10 + 5);
    if (!v11)
    {
      v34 = *(JSC::HandleSet **)(((unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v40 = (unint64_t)(v5 - 2) & 0xFFFFFFFFFFFFF000;
      v43 = a2;
      v37 = v5 - 2;
      v32 = v5;
      result = JSC::HandleSet::grow(v10);
      v5 = v32;
      v10 = v34;
      v8 = v37;
      v9 = v40;
      a2 = v43;
      v11 = *((_QWORD *)v34 + 5);
    }
    *((_QWORD *)v10 + 5) = *(_QWORD *)v11;
    *(_QWORD *)(v11 + 16) = 0;
    v12 = (uint64_t *)(v11 + 16);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    v13 = *v5;
    v14 = v11 & 0xFFFFFFFFFFFFF000;
    if (v13)
    {
      v15 = *(unint64_t **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = v15[3];
      v15 += 3;
      *(_QWORD *)v11 = v16;
      *(_QWORD *)(v11 + 8) = v15;
      *v15 = v11;
      *(_QWORD *)(v16 + 8) = v11;
    }
    *v12 = v13;
    v17 = *(JSC::HandleSet **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
    v18 = *((_QWORD *)v17 + 5);
    if (!v18)
    {
      v35 = *(JSC::HandleSet **)((v11 & 0xFFFFFFFFFFFFF000) + 0x10);
      v41 = v9;
      v44 = a2;
      v38 = v8;
      v31 = (_QWORD *)v11;
      v33 = v11 & 0xFFFFFFFFFFFFF000;
      v30 = (uint64_t *)(v11 + 16);
      result = JSC::HandleSet::grow(v17);
      v12 = v30;
      v11 = (unint64_t)v31;
      v14 = v33;
      v17 = v35;
      v8 = v38;
      v9 = v41;
      a2 = v44;
      v18 = *((_QWORD *)v35 + 5);
    }
    *((_QWORD *)v17 + 5) = *(_QWORD *)v18;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(a2 + 8) = v18 + 16;
    v19 = *v12;
    if (v19)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    *(_QWORD *)(v18 + 16) = v19;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    v22 = *(_QWORD *)(v14 + 16);
    v23 = *(_QWORD **)(v11 + 8);
    if (v23)
    {
      v24 = *(_QWORD *)v11;
      *v23 = *(_QWORD *)v11;
      *(_QWORD *)(v24 + 8) = v23;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    *(_QWORD *)v11 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v11;
    v25 = *(_QWORD *)(v9 + 16);
    v26 = (_QWORD *)v8[1];
    if (v26)
    {
      v27 = *v8;
      *v26 = *v8;
      *(_QWORD *)(v27 + 8) = v26;
      *v8 = 0;
      v8[1] = 0;
    }
    *v8 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v8;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::FetchHeaders,WTF::RawPtrTraits<WebCore::FetchHeaders>,WTF::DefaultRefDerefTraits<WebCore::FetchHeaders>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 52);
      if ((_DWORD)v5)
      {
        v8 = *(WTF::StringImpl ***)(v3 + 40);
        v9 = 8 * v5;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              v11 = v9;
              v12 = v8;
              WTF::StringImpl::destroy(v10, a2);
              v9 = v11;
              v8 = v12;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v6 = *(WTF **)(v3 + 40);
      if (v6)
      {
        *(_QWORD *)(v3 + 40) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        WTF::fastFree(v6, a2);
      }
      WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v3 + 8), a2);
      WTF::fastFree((WTF *)v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF **v13;

  v11 = 0;
  v12 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v13 = &v11;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v13);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v12);
    result = (uint64_t)v11;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(_QWORD *)result;
        *(_QWORD *)result = 0;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            {
              v10 = result;
              WebCore::Node::removedLastRef((WebCore::Node *)v9, v6);
              result = v10;
            }
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        result += 8;
        v8 -= 8;
      }
      while (v8);
      result = (uint64_t)v11;
    }
    if (result)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      return WTF::fastFree((WTF *)result, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::Element>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  uint64_t IndexQuickly;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Element>>::convert((uint64_t)&v16, (uint64_t)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Element>>::convert((uint64_t)&v16, (uint64_t)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

unsigned int *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::Element>>::convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  WebCore::Node *v5;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Node *v13;

  result = (unsigned int *)a2;
  v13 = *(WebCore::Node **)(a2 + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
    return (unsigned int *)JSC::throwTypeError();
  if (*(unsigned __int8 *)(a3 + 5) != 241)
    return (unsigned int *)JSC::throwTypeError();
  v5 = *(WebCore::Node **)(a3 + 24);
  if (!v5)
    return (unsigned int *)JSC::throwTypeError();
  *((_DWORD *)v5 + 6) += 2;
  v13 = v5;
  v7 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v7 == *(_DWORD *)(a4 + 8))
  {
    v8 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v7 + 1, (unint64_t)&v13);
    v10 = *(unsigned int *)(a4 + 12);
    v11 = *(_QWORD *)a4;
    v12 = *v8;
    *v8 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    result = (unsigned int *)v13;
    *(_DWORD *)(a4 + 12) = v10 + 1;
    v13 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v9);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v7) = v5;
    *(_DWORD *)(a4 + 12) = v7 + 1;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore7ElementENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v5 = *(uint64_t **)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF6VectorINS9_3RefIN7WebCore7ElementENS9_12RawPtrTraitsISD_EENS9_21DefaultRefDerefTraitsISD_EEEELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEENSC_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v3)
    {
      v5 = *(uint64_t **)a2;
      v6 = 8 * v3;
      do
      {
        v7 = *v5;
        *v5 = 0;
        if (v7)
        {
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v7, (void *)a2);
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    v4 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }
}

uint64_t WebCore::toJS<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>,WTF::String>(uint64_t a1, uint64_t a2, uint64_t *a3, WebCore::TrustedHTML *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WebCore::TrustedHTML *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE v12[40];
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[5];

  v4 = *a3;
  *a3 = 0;
  v10 = v4;
  v11 = 1;
  v15 = 1;
  LOBYTE(v13) = 0;
  v14 = 0;
  v16[0] = &v15;
  v16[1] = &v13;
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = &v10;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11TrustedHTMLEEENS_33IDLLegacyNullToEmptyStringAdaptorINS_12IDLDOMStringEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSJ_12RawPtrTraitsIS5_EENSJ_21DefaultRefDerefTraitsIS5_EEEENSJ_6StringEEEEEUlTyvE_JNSH_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)v16, a4, (uint64_t)v12);
  if (v14)
  {
    v5 = v13;
    if (v11 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E3273B28[v11])(v16, &v10);
    return v5;
  }
  else
  {
    v7 = std::__throw_bad_optional_access[abi:sn180100]();
    return _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11TrustedHTMLEEENS_33IDLLegacyNullToEmptyStringAdaptorINS_12IDLDOMStringEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSJ_12RawPtrTraitsIS5_EENSJ_21DefaultRefDerefTraitsIS5_EEEENSJ_6StringEEEEEUlTyvE_JNSH_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_(v7, v8, v9);
  }
}

uint64_t _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11TrustedHTMLEEENS_33IDLLegacyNullToEmptyStringAdaptorINS_12IDLDOMStringEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSJ_12RawPtrTraitsIS5_EENSJ_21DefaultRefDerefTraitsIS5_EEEENSJ_6StringEEEEEUlTyvE_JNSH_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_@<X0>(uint64_t result@<X0>, WebCore::TrustedHTML *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  unint64_t v18;
  uint64_t v19;

  v3 = result;
  v5 = **(_QWORD **)result;
  if (!v5)
  {
    v15 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v15 + 8))
      goto LABEL_27;
    if (*(_QWORD *)v15)
      result = WebCore::toJS(*(WebCore **)(result + 16), *(JSC::JSGlobalObject **)(result + 24), *(WebCore::JSDOMGlobalObject **)v15, a2);
    else
      result = 2;
    v16 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v16 + 8))
      *(_BYTE *)(v16 + 8) = 1;
    *(_QWORD *)v16 = result;
    v5 = **(_QWORD **)v3;
  }
  if (v5 != 1)
  {
LABEL_13:
    v11 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v3 + 32);
    return result;
  }
  v6 = *(uint64_t **)(v3 + 32);
  if (*((_DWORD *)v6 + 2) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 56);
    v7 = *v6;
    if (*v6 && (v8 = *(_DWORD *)(v7 + 4)) != 0)
    {
      if (v8 != 1)
      {
LABEL_7:
        v9 = *(_QWORD *)(result + 64760);
        if (!v9 || v7 != *(_QWORD *)(v9 + 8))
        {
          result = JSC::jsStringWithCacheSlowCase();
          v9 = result;
        }
        goto LABEL_10;
      }
      v12 = *(unsigned __int8 **)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        v13 = *v12;
      }
      else
      {
        v14 = *(unsigned __int16 *)v12;
        if (v14 > 0xFF)
          goto LABEL_7;
        v13 = v14;
      }
      v9 = *(_QWORD *)(result + 8 * v13 + 42216);
    }
    else
    {
      v9 = *(_QWORD *)(result + 41968);
    }
LABEL_10:
    v10 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v10 + 8))
      *(_BYTE *)(v10 + 8) = 1;
    *(_QWORD *)v10 = v9;
    goto LABEL_13;
  }
LABEL_27:
  v17 = (JSC::JSGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return (uint64_t)WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::convert(v17, v18, v19);
}

JSC::JSGlobalObject *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::convert@<X0>(JSC::JSGlobalObject *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  char v22;

  LOBYTE(v17) = 0;
  v19 = 0;
  if ((a2 & 0xFFFE000000000002) != 0)
    goto LABEL_8;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSTrustedHTML::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSTrustedHTML::s_info && v6 != 0);
  }
  if (!v5)
    goto LABEL_8;
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
    goto LABEL_8;
  v15 = a2;
  v16 = result;
  ++*(_DWORD *)(v12 + 8);
  v20 = v12;
  v21 = 0;
  std::optional<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::TrustedHTML,WTF::RawPtrTraits<WebCore::TrustedHTML>,WTF::DefaultRefDerefTraits<WebCore::TrustedHTML>>,WTF::String>,void>((uint64_t)&v17, (uint64_t)&v20);
  if (v21 != -1)
    ((void (*)(char *, uint64_t *))off_1E3273B28[v21])(&v22, &v20);
  a2 = v15;
  result = v16;
  if (!v19)
  {
LABEL_8:
    result = WebCore::Converter<WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>::convert(result, a2, (uint64_t)&v17);
    v8 = v18;
    if (v18)
    {
      *(_DWORD *)(a3 + 24) = 1;
      if ((_DWORD)v8 == -1)
        return result;
    }
    else
    {
      v9 = v17;
      v17 = 0;
      *(_QWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 16) = 1;
      *(_DWORD *)(a3 + 24) = 0;
    }
    v10 = off_1E3272138;
    return (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *, uint64_t *))v10[v8])(&v20, &v17);
  }
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = -1;
  v13 = v18;
  if (v18 == -1)
  {
    *(_DWORD *)(a3 + 24) = 0;
    return result;
  }
  result = (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *))off_1E3273B38[v18])(&v20);
  *(_DWORD *)(a3 + 16) = v13;
  v14 = v19;
  *(_DWORD *)(a3 + 24) = 0;
  if (v14)
  {
    v8 = v18;
    if (v18 != -1)
    {
      v10 = off_1E3273B28;
      return (JSC::JSGlobalObject *)((uint64_t (*)(uint64_t *, uint64_t *))v10[v8])(&v20, &v17);
    }
  }
  return result;
}

uint64_t WebCore::ConversionResult<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::TrustedHTML>,WebCore::IDLLegacyNullToEmptyStringAdaptor<WebCore::IDLDOMString>>>::releaseReturnValue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  JSC::JSCell *v6;
  char v7;

  if (*(_DWORD *)(a2 + 24))
  {
    v4 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSElementInternals::createStructure(v4, v5, v6);
  }
  else
  {
    v2 = result;
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3273B38[v3])(&v7, result, a2 + 8);
      *(_DWORD *)(v2 + 8) = v3;
    }
  }
  return result;
}

uint64_t WebCore::JSElementInternals::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15HTMLFormElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15HTMLFormElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13ValidityStateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore13ValidityStateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore8NodeListENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSEventSource::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSEventTarget>(uint64_t *a1, JSC::JSCell **a2)
{
  uint64_t result;
  unint64_t Structure;
  JSC::Structure *v6;
  JSC::JSCell *v7;
  uint64_t v8;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSEventTarget::s_info);
  if (!result)
  {
    Structure = WebCore::JSEventTargetPrototype::createStructure(a1, (uint64_t)a2, a2[82]);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v7 = (JSC::JSCell *)WebCore::JSEventTargetPrototype::create((WebCore::JSEventTargetPrototype *)a1, (JSC::VM *)a2, Structure, v6);
    v8 = WebCore::JSEventTarget::createStructure(a1, (uint64_t)a2, v7);
    return WebCore::cacheDOMStructure((JSCell *)a2, v8, (uint64_t)&WebCore::JSEventTarget::s_info);
  }
  return result;
}

uint64_t WebCore::JSEventTarget::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3680);
  *(_QWORD *)(a1 + 3680) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::MessagePort *v8;
  BOOL v9;
  int v10;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 48);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v14 = *(_QWORD *)(v4 + 16);
    v8 = *(WebCore::MessagePort **)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v14 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
    {
      WebCore::MessagePort::~MessagePort(v8, a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
    if (!v9)
      WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MessagePort>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    result = (uint64_t)v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = &v10;
    result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MessagePort>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v12);
    if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
    {
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      *(_DWORD *)(a3 + 16) = 0;
      return result;
    }
    v8 = HIDWORD(v11);
    result = (uint64_t)v10;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      do
      {
        result = (uint64_t)(WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)result, v7)+ 1);
        v9 -= 8;
      }
      while (v9);
      result = (uint64_t)v10;
      if (v10)
        goto LABEL_14;
    }
    else if (result)
    {
LABEL_14:
      v10 = 0;
      LODWORD(v11) = 0;
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MessagePort>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MessagePort>>::convert((uint64_t)&v16, (uint64_t)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MessagePort>>::convert((uint64_t)&v16, (uint64_t)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MessagePort>>::convert(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  WebCore::MessagePort *v21;
  BOOL v22;
  int v23;
  bmalloc::api *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *(_QWORD *)(a2 + 56);
  result = (uint64_t *)JSC::jsDynamicCast<WebCore::JSMessagePort *>(a3);
  if (!result)
    return (uint64_t *)JSC::throwTypeError();
  v6 = result[3];
  v7 = *(_QWORD *)(v6 + 24);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_7;
  }
  result = (uint64_t *)MEMORY[0x19AEA534C](v7);
LABEL_7:
  v9 = v6 - 24;
  ++*(_QWORD *)(v7 + 8);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_11:
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  v27 = v9;
  v11 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v11 != *(_DWORD *)(a4 + 8))
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = v9;
    *(_DWORD *)(a4 + 12) = v11 + 1;
    return result;
  }
  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v11 + 1, (unint64_t)&v27);
  v13 = *(unsigned int *)(a4 + 12);
  v14 = *(char **)a4;
  v15 = *result;
  *result = 0;
  *(_QWORD *)&v14[8 * v13] = v15;
  v16 = v27;
  *(_DWORD *)(a4 + 12) = v13 + 1;
  v27 = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 48);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_19;
    }
    result = (uint64_t *)MEMORY[0x19AEA534C](v17);
LABEL_19:
    v19 = *(_QWORD *)(v17 + 8);
    v20 = v19 - 1;
    *(_QWORD *)(v17 + 8) = v19 - 1;
    if (v19 == 1)
    {
      v26 = *(_QWORD *)(v17 + 16);
      v21 = *(WebCore::MessagePort **)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v22 = v26 != 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
    }
    v23 = __ldxr((unsigned __int8 *)v17);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v20)
          return result;
LABEL_27:
        if (v21)
        {
          WebCore::MessagePort::~MessagePort(v21, v12);
          result = (uint64_t *)bmalloc::api::isoDeallocate(v24, v25);
        }
        if (!v22)
          return (uint64_t *)WTF::fastFree((WTF *)v17, v12);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v20)
      return result;
    goto LABEL_27;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_13ServiceWorkerENSD_ISI_EENSF_ISI_EEEENSA_INSB_11MessagePortENSD_ISM_EENSF_ISM_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSQ_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3274E60[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore19ServiceWorkerClientENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_13ServiceWorkerENSC_ISH_EENSE_ISH_EEEENS9_INSA_11MessagePortENSC_ISL_EENSE_ISL_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSY_OT0_E_JRNS0_6__baseILST_1EJSG_SK_SO_EEERKS16_EEEDcSY_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;

  v4 = *a3;
  if (!*a3)
    goto LABEL_11;
  v5 = *(_QWORD *)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v5);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_5;
LABEL_6:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_11:
  *a2 = v4;
  return result;
}

uint64_t WebCore::JSFaceDetector::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::Converter<WebCore::IDLPromise<WebCore::IDLUndefined>>::convert<WebCore::DefaultExceptionThrower>@<X0>(JSC::JSPromise *this@<X0>, JSC::JSGlobalObject *a2@<X1>, JSValue a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  int v16;
  unint64_t v17;
  WebCore::DOMGuardedObject *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  int v24;
  uint64_t v25;

  v6 = *((_QWORD *)this + 7);
  v7 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSDOMGlobalObject::s_info && v9 != 0);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x194AFD588);
  }
  v12 = JSC::JSPromise::resolvedPromise(this, a2, a3);
  if (!*(_QWORD *)(v6 + 16))
  {
    v17 = v12;
    v18 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
    result = WebCore::DOMGuardedObject::DOMGuardedObject(v18, (unint64_t)this, v17);
    v16 = 0;
    *result = &off_1E3251870;
    *(_QWORD *)a4 = result;
    goto LABEL_16;
  }
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v13)
  {
    v14 = v13;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 64))(v13);
    if ((_DWORD)result)
    {
      v19 = *(_QWORD *)(v14 + 344);
      if (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v6 + 16))
        goto LABEL_30;
      if (!v19)
        goto LABEL_14;
      v20 = *(_QWORD *)(v14 + 344);
      v21 = (unsigned __int8 *)(v19 + 40);
      if (__ldaxr((unsigned __int8 *)(v19 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v21))
      {
        goto LABEL_24;
      }
      result = (_QWORD *)MEMORY[0x19AEA534C](v21);
LABEL_24:
      v23 = *(unsigned __int8 *)(v20 + 41);
      v24 = __ldxr(v21);
      if (v24 == 1)
      {
        if (!__stlxr(0, v21))
        {
LABEL_29:
          v19 = v20;
          if (!v23)
            goto LABEL_14;
LABEL_30:
          v25 = *(_QWORD *)(v19 + 8);
          v16 = 1;
          *(_BYTE *)(v25 + 93442) = 1;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
      goto LABEL_29;
    }
  }
LABEL_14:
  result = (_QWORD *)JSC::throwTypeError();
  v16 = 1;
LABEL_16:
  *(_DWORD *)(a4 + 8) = v16;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore15DOMPromiseProxyINS2_6IDLAnyEE7promiseERN3JSC14JSGlobalObjectERNS2_17JSDOMGlobalObjectEEUlRT_E_vJRNS2_15DeferredPromiseEEE4callESF_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  objc_class *v3;
  uint64_t v4;
  objc_class **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  WebCore::JSFetchHeaders *v9;
  JSC::JSCell **v10;
  _BYTE v11[8];

  v4 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v4 + 24))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(_DWORD *)(v4 + 16))
  {
    v9 = (WebCore::JSFetchHeaders *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::getDOMStructure<WebCore::JSFetchHeaders>(v9, v10);
  }
  v2 = a2;
  v5 = *(objc_class ***)v4;
  if (v5)
    v3 = *v5;
  else
    v3 = 0;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
    {
      v8 = *(uint64_t **)v7;
LABEL_12:
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v2, v8, 0, v3);
      return MEMORY[0x19AEA32A0](v11);
    }
LABEL_15:
    v8 = 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFetchHeaders>(WebCore::JSFetchHeaders *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSFetchHeaders::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSFetchHeaders::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSFetchHeaders::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSFetchHeaders>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSFetchRequest::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::toJS<WebCore::IDLNullable<WebCore::IDLInterface<WebCore::ReadableStream>>,WebCore::ExceptionOr<WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>>>(JSC *a1, WTF::StringImpl *a2, JSC::VM **a3, uint64_t a4)
{
  int v4;
  WTF *v5;
  void *v6;
  unint64_t v7;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned __int8 v12[8];
  WTF::StringImpl *v13;

  v4 = *(_DWORD *)(a4 + 16);
  if (!v4)
  {
    v5 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    if (!v5)
      return 2;
    v7 = WebCore::wrap<WebCore::ReadableStream>((uint64_t)a1, (uint64_t)a2, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v9)
      {
        if (v9[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[4];
      }
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v5;
    }
    return v7;
  }
  if (v4 == 1)
  {
    v12[0] = *(_BYTE *)a4;
    v10 = *(WTF::StringImpl **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    v13 = v10;
    if (!*((_QWORD *)*a3 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, a3, v12);
      v10 = v13;
    }
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    return 0;
  }
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(v11);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
        else
          --v3[4];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, JSC::JSArrayBufferView *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _BYTE *v5;
  _BYTE v6[8];
  int v7;
  char v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6[0] = 0;
    v8 = 0;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::ConversionResult(a3, (uint64_t)v6);
    if (v8 && v7 != -1)
      return ((uint64_t (*)(_BYTE **, _BYTE *))off_1E3275418[v7])(&v5, v6);
  }
  else
  {
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>::convert(a1, a2, (uint64_t)v6);
    v5 = v6;
    result = WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>> &&)::{lambda(void)#1}::operator()((uint64_t *)&v5, a3);
    if (v9 != -1)
      return ((uint64_t (*)(_BYTE **, int *))off_1E3275CA8[v9])(&v5, &v7);
  }
  return result;
}

uint64_t WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::ConversionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 16) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      ((void (*)(char *))off_1E3275450[v3])(&v5);
      *(_DWORD *)(a1 + 16) = v3;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>::convert(JSC::JSGlobalObject *a1@<X0>, JSC::JSArrayBufferView *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  __n128 v12;
  _BYTE v13[8];
  int v14;
  unsigned __int8 v15;
  JSC::JSArrayBufferView *v16;
  __n128 v17;
  JSC::JSArrayBufferView **v18;

  v5 = *((_QWORD *)a1 + 7);
  v13[0] = 0;
  v15 = 0;
  v16 = a2;
  v17.n128_u64[0] = (unint64_t)v13;
  v17.n128_u64[1] = (unint64_t)a1;
  v18 = &v16;
  v6 = _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS4_INS_11DOMFormDataEEENS4_INS_15URLSearchParamsEEENS4_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSI_7JSValueEEUlTyvE_JS6_SA_SC_SE_EEET_SN_(&v17, &v12);
  if (v15)
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
    v10 = v14;
    if (v14 != -1)
    {
      ((void (*)(__n128 *, __n128))off_1E3275450[v14])(&v17, v6);
      *(_DWORD *)(a3 + 16) = v10;
      v11 = v15;
      *(_DWORD *)(a3 + 24) = 0;
      if (v11)
      {
        if (v14 != -1)
          ((void (*)(__n128 *, _BYTE *))off_1E3275418[v14])(&v17, v13);
      }
      return;
    }
LABEL_14:
    *(_DWORD *)(a3 + 24) = 0;
    return;
  }
  v7 = (_DWORD *)JSC::JSArrayBuffer::toWrapped(v5, (uint64_t)v16);
  if (v7)
  {
    *v7 += 2;
    v17.n128_u32[2] = 2;
    v17.n128_u64[0] = 0;
    *(_QWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore4BlobENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_IN3JSC15ArrayBufferViewENSC_ISI_EENSE_ISI_EEEENS9_INSH_11ArrayBufferENSC_ISM_EENSE_ISM_EEEENS9_INSA_11DOMFormDataENSC_ISQ_EENSE_ISQ_EEEENS9_INSA_15URLSearchParamsENSC_ISU_EENSE_ISU_EEEENS9_INSA_14ReadableStreamENSC_ISY_EENSE_ISY_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS14_1EJSG_SL_SP_ST_SX_S11_S12_EEEEEEDcS16_DpT0_((uint64_t)v13, &v17);
    return;
  }
  JSC::JSArrayBufferView::toWrapped(v16, (JSC::ArrayBufferView **)&v17);
  if (v17.n128_u64[0])
  {
    *(_QWORD *)(a3 + 8) = v17.n128_u64[0];
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_14;
  }
  WebCore::valueToUSVString(a1, (uint64_t)v16, (uint64_t)&v17);
  v8 = v17.n128_u32[2];
  if (v17.n128_u32[2])
  {
    *(_DWORD *)(a3 + 24) = 1;
    if ((_DWORD)v8 == -1)
      return;
  }
  else
  {
    v9 = v17.n128_u64[0];
    v17.n128_u64[0] = 0;
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = 6;
    *(_DWORD *)(a3 + 24) = 0;
  }
  ((void (*)(_BYTE *, __n128 *))off_1E3272138[v8])(v13, &v17);
}

__n128 _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS4_INS_11DOMFormDataEEENS4_INS_15URLSearchParamsEEENS4_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSI_7JSValueEEUlTyvE_JS6_SA_SC_SE_EEET_SN_@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS4_EEDav((uint64_t)a1);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS8_EEDav((uint64_t)a1);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISA_EEDav((uint64_t)a1);
  _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISC_EEDav((uint64_t)a1);
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS4_EEDav(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;

  v1 = *(_QWORD *)result;
  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    result = WebCore::JSBlob::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)(result + 16);
      v2 = result;
      v3 = 0;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>,void>(v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3275418[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clIS8_EEDav(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    v1 = (uint64_t *)result;
    result = WebCore::JSDOMFormData::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)(result + 16);
      v2 = result;
      v3 = 3;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>,void>(*v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3275418[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISA_EEDav(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    v1 = (uint64_t *)result;
    result = WebCore::JSURLSearchParams::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)result;
      v2 = result;
      v3 = 4;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>,void>(*v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3275418[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_4BlobEEENS_18IDLArrayBufferViewENS_14IDLArrayBufferENS2_INS_11DOMFormDataEEENS2_INS_15URLSearchParamsEEENS2_INS_14ReadableStreamEEENS_12IDLUSVStringEEEEE7convertERN3JSC14JSGlobalObjectENSG_7JSValueEENKUlTyvE_clISC_EEDav(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  char v4;

  if (!*(_BYTE *)(*(_QWORD *)result + 16))
  {
    v1 = (uint64_t *)result;
    result = WebCore::JSReadableStream::toWrapped(*(_QWORD *)(*(_QWORD *)(result + 8) + 56), **(_QWORD **)(result + 16));
    if (result)
    {
      ++*(_DWORD *)result;
      v2 = result;
      v3 = 5;
      result = std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>,void>(*v1, (uint64_t)&v2);
      if (v3 != -1)
        return ((uint64_t (*)(char *, uint64_t *))off_1E3275418[v3])(&v4, &v2);
    }
  }
  return result;
}

uint64_t std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::operator=[abi:sn180100]<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(unsigned int *)(a1 + 8);
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 == -1)
    {
      if ((_DWORD)v4 == -1)
        return a1;
    }
    else if ((_DWORD)v4 == -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E3275418[v3])(&v8, a1, a2);
      *(_DWORD *)(a1 + 8) = -1;
      return a1;
    }
    v7 = a1;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E3275850[v4])(&v7, a1, a2);
    return a1;
  }
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3275450[v5])(&v9, a1, a2);
    *(_DWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = 1;
  return a1;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>(WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>> &&)::{lambda(void)#1}::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  char v7[8];
  int v8;
  char v9;
  char v10;

  result = *a1;
  if (*(_DWORD *)(result + 24))
  {
    *(_DWORD *)(a2 + 32) = 1;
  }
  else
  {
    WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::releaseReturnValue(result, (uint64_t)&v5);
    v7[0] = 0;
    v8 = -1;
    v4 = v6;
    if (v6 != -1)
    {
      ((void (*)(char *, char *, uint64_t *))off_1E3275450[v6])(&v10, v7, &v5);
      v8 = v4;
    }
    v9 = 1;
    result = WebCore::ConversionResult<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::DOMFormData>,WebCore::IDLInterface<WebCore::URLSearchParams>,WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::IDLUSVString>>>::ConversionResult(a2, (uint64_t)v7);
    if (v9)
    {
      if (v8 != -1)
        result = ((uint64_t (*)(char *, char *))off_1E3275418[v8])(&v10, v7);
      v8 = -1;
    }
    if (v6 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E3275418[v6])(&v10, &v5);
  }
  return result;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::DOMFormData,WTF::RawPtrTraits<WebCore::DOMFormData>,WTF::DefaultRefDerefTraits<WebCore::DOMFormData>>,WTF::RefPtr<WebCore::URLSearchParams,WTF::RawPtrTraits<WebCore::URLSearchParams>,WTF::DefaultRefDerefTraits<WebCore::URLSearchParams>>,WTF::RefPtr<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>,WTF::String>>::releaseReturnValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_DWORD *)(result + 24))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore4BlobENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_IN3JSC15ArrayBufferViewENSD_ISJ_EENSF_ISJ_EEEENSA_INSI_11ArrayBufferENSD_ISN_EENSF_ISN_EEEENSA_INSB_11DOMFormDataENSD_ISR_EENSF_ISR_EEEENSA_INSB_15URLSearchParamsENSD_ISV_EENSF_ISV_EEEENSA_INSB_14ReadableStreamENSD_ISZ_EENSF_ISZ_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS17_1EJS14_S15_EEEEEEDcS19_DpT0_(v4, v5);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 8) = -1;
    v3 = *(unsigned int *)(result + 16);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3275450[v3])(&v6, a2, result + 8);
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore4BlobENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_IN3JSC15ArrayBufferViewENSD_ISJ_EENSF_ISJ_EEEENSA_INSI_11ArrayBufferENSD_ISN_EENSF_ISN_EEEENSA_INSB_11DOMFormDataENSD_ISR_EENSF_ISR_EEEENSA_INSB_15URLSearchParamsENSD_ISV_EENSF_ISV_EEEENSA_INSB_14ReadableStreamENSD_ISZ_EENSF_ISZ_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS17_1EJS14_S15_EEEEEEDcS19_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3275418[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLSequence<WebCore::IDLByteString>>,WebCore::IDLRecord<WebCore::IDLByteString,WebCore::IDLByteString>>>::convert(uint64_t a1, JSC *this, JSC::JSGlobalObject *a3)
{
  int v3;
  JSC::VM *v6;
  JSC::JSObject *v8;
  JSC::VM *v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  JSValue v14;
  int i;
  unsigned int v16;
  uint64_t IndexQuickly;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  uint64_t v54;
  unint64_t v55;
  WTF *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl **v69;
  unint64_t v70;
  int v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unsigned int v76;
  WTF::StringImpl *v77;
  _QWORD v78[2];
  unint64_t v79;
  JSC::JSGlobalObject *v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  __int16 v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::VM *v92;
  __int16 v93;
  WTF::StringImpl **v94;
  uint64_t v95;
  JSC::VM *v96;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v72 = v6;
  if (((unint64_t)a3 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)a3 + 5) < 0x17u)
  {
    result = JSC::throwTypeError();
LABEL_9:
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  v8 = (JSC::JSObject *)JSC::iteratorMethod(this, a3, a3);
  if (*((_DWORD *)v6 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_9;
  }
  if (v8 != (JSC::JSObject *)10)
  {
    v90 = 0;
    v91 = 0;
    v13 = *((_QWORD *)this + 7);
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        if ((*((_BYTE *)a3 + 4) & 0xE) != 0)
          v16 = *(_DWORD *)(*((_QWORD *)a3 + 1) - 8);
        else
          v16 = 0;
        if (i - 1 >= v16)
          goto LABEL_127;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly(a3, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get(a3, this, (i - 1));
        if (*(_DWORD *)(v13 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13) & 1) != 0)
          goto LABEL_127;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLByteString>>::convert(this, IndexQuickly, (uint64_t)&v90);
        if (*(_QWORD *)(v13 + 16))
          break;
      }
      v54 = JSC::JSArrayIterator::create();
      v55 = i | 0xFFFE000000000000;
      if (i < 0)
        v55 = COERCE__INT64((double)i) + 0x2000000000000;
      *(_QWORD *)(v54 + 16) = v55;
LABEL_126:
      JSC::iteratorClose();
    }
    else
    {
      JSC::iteratorForIterable(this, a3, v8, v14);
      if (!*(_DWORD *)(v13 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13) & 1) == 0)
      {
        while (1)
        {
          v38 = JSC::iteratorStep();
          if (*(_QWORD *)(v13 + 16) || v38 == 6)
            break;
          v40 = JSC::iteratorValue();
          if (*(_DWORD *)(v13 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13) & 1) != 0)
              break;
          }
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLByteString>>::convert(this, v40, (uint64_t)&v90);
          if (*(_QWORD *)(v13 + 16))
            goto LABEL_126;
        }
      }
    }
LABEL_127:
    if (*(_DWORD *)(v13 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13);
      v56 = (WTF *)v90;
      if (hasExceptionsAfterHandlingTraps)
      {
        LODWORD(v79) = 1;
        if (HIDWORD(v91))
        {
          v62 = (WTF *)(v90 + 16 * HIDWORD(v91));
          do
          {
            v63 = *((unsigned int *)v56 + 3);
            if ((_DWORD)v63)
            {
              v65 = *(WTF::StringImpl ***)v56;
              v66 = 8 * v63;
              do
              {
                v67 = *v65;
                *v65 = 0;
                if (v67)
                {
                  if (*(_DWORD *)v67 == 2)
                    WTF::StringImpl::destroy(v67, v61);
                  else
                    *(_DWORD *)v67 -= 2;
                }
                ++v65;
                v66 -= 8;
              }
              while (v66);
            }
            v64 = *(WTF **)v56;
            if (*(_QWORD *)v56)
            {
              *(_QWORD *)v56 = 0;
              *((_DWORD *)v56 + 2) = 0;
              WTF::fastFree(v64, v61);
            }
            v56 = (WTF *)((char *)v56 + 16);
          }
          while (v56 != v62);
          v56 = (WTF *)v90;
        }
        if (v56)
        {
          v90 = 0;
          LODWORD(v91) = 0;
          WTF::fastFree(v56, v61);
        }
        v57 = 1;
        v58 = 1;
        goto LABEL_130;
      }
    }
    else
    {
      v56 = (WTF *)v90;
    }
    v57 = 0;
    v58 = 0;
    LODWORD(v79) = 0;
    v59 = v91;
    v78[0] = 0;
    v78[1] = 0;
    *(_QWORD *)(a1 + 8) = v56;
    *(_QWORD *)(a1 + 16) = v59;
    *(_DWORD *)(a1 + 24) = 0;
LABEL_130:
    *(_DWORD *)(a1 + 32) = v57;
    return ((uint64_t (*)(uint64_t *, _QWORD *))off_1E3275CC8[v58])(&v90, v78);
  }
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v96 = v9;
  if (((unint64_t)a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
    LODWORD(v8) = 0;
    v3 = 0;
    v71 = 0;
    goto LABEL_7;
  }
  if (*((unsigned __int8 *)a3 + 5) <= 0x16u)
  {
    JSC::throwTypeError();
    v10 = 1;
    v71 = 1;
    v11 = 1;
    goto LABEL_94;
  }
  v94 = 0;
  v95 = 0;
  v18 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = v18 + 24;
  *(_QWORD *)(v18 + 16) = 20;
  v90 = v18;
  v91 = 0;
  v92 = v9;
  v93 = 259;
  (*(void (**)(JSC::JSGlobalObject *, JSC *, uint64_t *, _QWORD))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x78))(a3, this, &v90, 0);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
  {
    v41 = 0;
    v11 = 1;
    v71 = 1;
    goto LABEL_85;
  }
  v20 = *(unsigned int *)(v90 + 20);
  if (!(_DWORD)v20)
  {
LABEL_84:
    v11 = 0;
    v9 = (JSC::VM *)v94;
    v69 = v94;
    LODWORD(v8) = v95;
    v3 = HIDWORD(v95);
    v94 = 0;
    v95 = 0;
    v70 = __PAIR64__(v3, v8);
    v71 = 0;
    v41 = 1;
    goto LABEL_85;
  }
  v8 = *(JSC::JSObject **)(v90 + 8);
  v21 = 8 * v20;
  while (1)
  {
    v79 = 0xFFFFFFFF00000000;
    v80 = a3;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 2;
    v85 = 0;
    LOBYTE(v86) = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v3 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC *, _QWORD, _QWORD *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0x68))(a3, this, *(_QWORD *)v8, v78);
    if (*((_DWORD *)v9 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v9))
        break;
    }
    if (!v3 || (v79 & 4) != 0)
      goto LABEL_52;
    WebCore::identifierToByteString((uint64_t)this, (uint64_t *)v8, &v77);
    if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
      goto LABEL_70;
    if (v85)
    {
      v35 = JSC::JSObject::get(a3, this, *(_QWORD *)v8);
LABEL_68:
      v19 = (WTF::StringImpl *)v35;
      goto LABEL_34;
    }
    if (HIBYTE(v83) != 1)
    {
      if (HIBYTE(v83) == 2)
        v35 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v78, this);
      else
        v35 = JSC::PropertySlot::customGetter();
      goto LABEL_68;
    }
    v19 = (WTF::StringImpl *)v78[0];
LABEL_34:
    if (!*((_DWORD *)v9 + 20) || (v36 = v19, v37 = JSC::VM::hasExceptionsAfterHandlingTraps(v9), v19 = v36, !v37))
    {
      WebCore::valueToByteString(this, (uint64_t)v19, (uint64_t)&v75);
      v22 = v76;
      if (v76)
      {
        v3 = 1;
        v71 = 1;
      }
      else
      {
        v74 = v75;
        v75 = 0;
        v23 = v77;
        v77 = 0;
        v73 = v23;
        v24 = HIDWORD(v95);
        if (HIDWORD(v95) == (_DWORD)v95)
        {
          v25 = (WTF::StringImpl **)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v94, HIDWORD(v95) + 1, (unint64_t)&v73);
          v24 = HIDWORD(v95);
          v26 = &v94[2 * HIDWORD(v95)];
          v27 = *v25;
          *v25 = 0;
          v28 = v25 + 1;
          *v26 = v27;
          v29 = v26 + 1;
        }
        else
        {
          v30 = &v94[2 * HIDWORD(v95)];
          v73 = 0;
          *v30 = v23;
          v29 = v30 + 1;
          v28 = &v74;
        }
        v31 = *v28;
        *v28 = 0;
        *v29 = v31;
        HIDWORD(v95) = v24 + 1;
        v32 = v74;
        v74 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v19);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v73;
        v73 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v19);
          else
            *(_DWORD *)v33 -= 2;
        }
        v3 = 0;
        v22 = v76;
      }
      if (v22 != 0xFFFFFFFFLL)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v22])(&v73, &v75);
      goto LABEL_48;
    }
LABEL_70:
    v3 = 1;
    v71 = 1;
LABEL_48:
    if (!v77)
      goto LABEL_51;
    if (*(_DWORD *)v77 != 2)
    {
      *(_DWORD *)v77 -= 2;
LABEL_51:
      if (v3)
        goto LABEL_156;
      goto LABEL_52;
    }
    WTF::StringImpl::destroy(v77, v19);
    if (v3)
      goto LABEL_156;
LABEL_52:
    if (v87)
    {
      v34 = *(_DWORD *)(v86 + 4);
      if (!v34)
        goto LABEL_160;
      *(_DWORD *)(v86 + 4) = v34 - 1;
    }
    v8 = (JSC::JSObject *)((char *)v8 + 8);
    v21 -= 8;
    if (!v21)
      goto LABEL_84;
  }
  v71 = 1;
LABEL_156:
  if (v87)
  {
    v68 = *(_DWORD *)(v86 + 4);
    if (!v68)
    {
LABEL_160:
      __break(0xC471u);
      JUMPOUT(0x194AFEA34);
    }
    *(_DWORD *)(v86 + 4) = v68 - 1;
  }
  v41 = 0;
  v11 = 1;
LABEL_85:
  if (v91)
    WTF::fastFree((WTF *)(v91 - 16), v19);
  v42 = v90;
  v90 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 1)
    {
      v48 = *(unsigned int *)(v42 + 20);
      if ((_DWORD)v48)
      {
        v49 = *(WTF::StringImpl ***)(v42 + 8);
        v50 = 8 * v48;
        do
        {
          v51 = *v49;
          *v49 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v19);
            else
              *(_DWORD *)v51 -= 2;
          }
          ++v49;
          v50 -= 8;
        }
        while (v50);
      }
      v52 = *(WTF **)(v42 + 8);
      if ((WTF *)(v42 + 24) != v52 && v52 != 0)
      {
        *(_QWORD *)(v42 + 8) = 0;
        *(_DWORD *)(v42 + 16) = 0;
        WTF::fastFree(v52, v19);
      }
      WTF::fastFree((WTF *)v42, v19);
    }
    else
    {
      --*(_DWORD *)v42;
    }
  }
  v43 = (WTF *)v94;
  if (HIDWORD(v95))
  {
    v44 = 16 * HIDWORD(v95);
    v45 = v94 + 1;
    do
    {
      v46 = *v45;
      *v45 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v19);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = *(v45 - 1);
      *(v45 - 1) = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v19);
        else
          *(_DWORD *)v47 -= 2;
      }
      v45 += 2;
      v44 -= 16;
    }
    while (v44);
    v43 = (WTF *)v94;
    if (v94)
      goto LABEL_107;
LABEL_92:
    if (v41)
      goto LABEL_7;
LABEL_93:
    v10 = 1;
  }
  else
  {
    if (!v94)
      goto LABEL_92;
LABEL_107:
    v94 = 0;
    LODWORD(v95) = 0;
    WTF::fastFree(v43, v19);
    if (!v41)
      goto LABEL_93;
LABEL_7:
    v10 = 0;
    v11 = 0;
    v69 = 0;
    v70 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = (_DWORD)v8;
    *(_DWORD *)(a1 + 20) = v3;
    *(_DWORD *)(a1 + 24) = 1;
  }
LABEL_94:
  *(_DWORD *)(a1 + 32) = v10;
  return ((uint64_t (*)(_QWORD *, WTF::StringImpl ***))off_1E3275CD8[v11])(v78, &v69);
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLSequence<WebCore::IDLByteString>>::convert(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  JSValue v7;
  int i;
  unsigned int v9;
  uint64_t IndexQuickly;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v41;
  WTF::StringImpl *v42;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;

  v4 = *((_QWORD *)a1 + 7);
  v50 = v4;
  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v17 = v47;
    v47 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = 1;
    v49 = 1;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        v9 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
        if (i - 1 >= v9)
          break;
        IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
        if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
          break;
        WebCore::valueToByteString(a1, IndexQuickly, (uint64_t)&v47);
        v11 = v48;
        if (!(_DWORD)v48)
        {
          v12 = v47;
          v47 = 0;
          v53 = v12;
          v13 = HIDWORD(v52);
          if (HIDWORD(v52) == (_DWORD)v52)
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v51, (unint64_t)&v53);
            v15 = v53;
            v53 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v14);
              else
                *(_DWORD *)v15 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v51 + HIDWORD(v52)) = v12;
            HIDWORD(v52) = v13 + 1;
          }
          v11 = v48;
        }
        if (v11 != 0xFFFFFFFFLL)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v11])(&v53, &v47);
        if (*(_QWORD *)(v4 + 16))
        {
          v27 = JSC::JSArrayIterator::create();
          v28 = i | 0xFFFE000000000000;
          if (i < 0)
            v28 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v27 + 16) = v28;
          goto LABEL_54;
        }
      }
    }
    else
    {
      JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v7);
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
        while (1)
        {
          v19 = JSC::iteratorStep();
          if (*(_QWORD *)(v4 + 16) || v19 == 6)
            break;
          v21 = JSC::iteratorValue();
          if (*(_DWORD *)(v4 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
              break;
          }
          WebCore::valueToByteString(a1, v21, (uint64_t)&v47);
          v22 = v48;
          if (!(_DWORD)v48)
          {
            v23 = v47;
            v47 = 0;
            v53 = v23;
            v24 = HIDWORD(v52);
            if (HIDWORD(v52) == (_DWORD)v52)
            {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v51, (unint64_t)&v53);
              v26 = v53;
              v53 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v25);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
            else
            {
              *((_QWORD *)v51 + HIDWORD(v52)) = v23;
              HIDWORD(v52) = v24 + 1;
            }
            v22 = v48;
          }
          if (v22 != 0xFFFFFFFFLL)
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3272138[v22])(&v53, &v47);
          if (*(_QWORD *)(v4 + 16))
          {
LABEL_54:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (!*(_DWORD *)(v4 + 80))
    {
      v29 = v51;
      goto LABEL_57;
    }
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v29 = v51;
    if (!hasExceptionsAfterHandlingTraps)
    {
LABEL_57:
      v30 = v52;
      v31 = HIDWORD(v52);
      v49 = 0;
      v47 = 0;
      v48 = 0;
      v51 = v29;
      v32 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v32 != *(_DWORD *)(a3 + 8))
      {
        v39 = *(_QWORD *)a3 + 16 * v32;
        *(_QWORD *)v39 = v29;
        *(_DWORD *)(v39 + 8) = v30;
        *(_DWORD *)(v39 + 12) = v31;
        *(_DWORD *)(a3 + 12) = v32 + 1;
        goto LABEL_62;
      }
      v33 = WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v32 + 1, (unint64_t)&v51);
      v35 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
      *(_QWORD *)v35 = 0;
      *(_QWORD *)(v35 + 8) = 0;
      v36 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      *(_QWORD *)v35 = v36;
      LODWORD(v36) = *(_DWORD *)(v33 + 8);
      *(_DWORD *)(v33 + 8) = 0;
      *(_DWORD *)(v35 + 8) = v36;
      LODWORD(v36) = *(_DWORD *)(v33 + 12);
      *(_DWORD *)(v33 + 12) = 0;
      *(_DWORD *)(v35 + 12) = v36;
      v37 = HIDWORD(v52);
      v38 = v51;
      ++*(_DWORD *)(a3 + 12);
      if ((_DWORD)v37)
      {
        v41 = 8 * v37;
        do
        {
          v42 = *(WTF::StringImpl **)v38;
          *(_QWORD *)v38 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v34);
            else
              *(_DWORD *)v42 -= 2;
          }
          v38 = (WTF *)((char *)v38 + 8);
          v41 -= 8;
        }
        while (v41);
        v38 = v51;
        if (!v51)
          goto LABEL_62;
      }
      else if (!v38)
      {
LABEL_62:
        v18 = 0;
        return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3275CB8[v18])(&v51, &v47);
      }
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v38, v34);
      goto LABEL_62;
    }
    v49 = 1;
    if (HIDWORD(v52))
    {
      v45 = 8 * HIDWORD(v52);
      do
      {
        v46 = *(WTF::StringImpl **)v29;
        *(_QWORD *)v29 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v44);
          else
            *(_DWORD *)v46 -= 2;
        }
        v29 = (WTF *)((char *)v29 + 8);
        v45 -= 8;
      }
      while (v45);
      v29 = v51;
    }
    if (v29)
    {
      v51 = 0;
      LODWORD(v52) = 0;
      WTF::fastFree(v29, v44);
    }
    v18 = 1;
  }
  return ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3275CB8[v18])(&v51, &v47);
}

unint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v4 + 16 * v5);
      v10 = v4;
      do
      {
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        v11 = *(WTF::StringImpl ***)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        LODWORD(v11) = *((_DWORD *)v10 + 2);
        *((_DWORD *)v10 + 2) = 0;
        *(_DWORD *)(v8 + 8) = (_DWORD)v11;
        LODWORD(v11) = *((_DWORD *)v10 + 3);
        *((_DWORD *)v10 + 3) = 0;
        *(_DWORD *)(v8 + 12) = (_DWORD)v11;
        v12 = *((unsigned int *)v10 + 3);
        if ((_DWORD)v12)
        {
          v14 = *(WTF::StringImpl ***)v10;
          v15 = 8 * v12;
          do
          {
            v16 = *v14;
            *v14 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v7);
              else
                *(_DWORD *)v16 -= 2;
            }
            ++v14;
            v15 -= 8;
          }
          while (v15);
        }
        v13 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v13, v7);
        }
        v8 += 16;
        v10 = (WTF *)((char *)v10 + 16);
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS9_INS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEELm0ESB_Lm16ESC_EEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v3 = *((unsigned int *)a2 + 3);
  v4 = *(WTF **)a2;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      v6 = *((unsigned int *)v4 + 3);
      if ((_DWORD)v6)
      {
        v8 = *(WTF::StringImpl ***)v4;
        v9 = 8 * v6;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v7 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *(WTF **)a2;
  }
  if (v4)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

unint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _QWORD *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 28))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = (_QWORD *)v6;
      v9 = (WTF::StringImpl **)((char *)v4 + 16 * v5);
      v10 = (WTF::StringImpl **)v4;
      do
      {
        v11 = *v10;
        *v10 = 0;
        *v8 = v11;
        v12 = v10[1];
        v10[1] = 0;
        v8[1] = v12;
        v13 = v10[1];
        v10[1] = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v7);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = *v10;
        *v10 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v7);
          else
            *(_DWORD *)v14 -= 2;
        }
        v10 += 2;
        v8 += 2;
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_12KeyValuePairINS8_6StringESB_EELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    v6 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFetchResponse>(WebCore::JSFetchResponse *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  uint64_t *v14;
  unint64_t Prototype;
  unint64_t v16;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  unint64_t v19;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSFetchResponse::s_info + ~((_QWORD)&WebCore::JSFetchResponse::s_info << 32)) ^ (((unint64_t)&WebCore::JSFetchResponse::s_info + ~((_QWORD)&WebCore::JSFetchResponse::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSFetchResponse::s_info)
    {
LABEL_3:
      result = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (result)
        return result;
    }
    else
    {
      v13 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v13;
        if (v11 == &WebCore::JSFetchResponse::s_info)
          goto LABEL_3;
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 40136);
  Prototype = WebCore::JSFetchResponse::createPrototype(this, (JSC::JSCell **)a2, a3);
  v16 = Prototype;
  v20 = 23;
  if ((Prototype & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)Prototype);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  SlowCase = *v14;
  if ((unint64_t)*v14 >= *((_QWORD *)this + 5018))
  {
    SlowCase = *((_QWORD *)this + 5019);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 5019) = SlowCase + (int)v19;
  }
  *v14 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v16, &v20, &WebCore::JSFetchResponse::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return WebCore::cacheDOMStructure((JSCell *)a2, SlowCase, (uint64_t)&WebCore::JSFetchResponse::s_info);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFile>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::ScriptExecutionContext *v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  JSC::JSCell *v11;
  JSC::VM *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  JSC::VM *v29;
  double v30;
  double v31;
  int v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  double v39;
  double v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  JSCell *v46;
  JSC::JSCell *v47;
  JSC::JSGlobalObject *v48;
  JSC::JSObject *v49;
  JSC::JSGlobalObject *v50;
  WebCore::JSFile *v51;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v53;
  JSC::Structure *v54;
  unint64_t SubclassStructure;
  WTF::StringImpl *v56;
  JSValue v58;
  int hasExceptionsAfterHandlingTraps;
  char v61;
  WebCore::JSFile *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  double v65;
  JSC::VM *v66;
  WTF::StringImpl *v67;
  int v68;
  __int128 v69;
  unint64_t v70[2];
  WTF::StringImpl *v71;
  int v72;
  __int128 v73;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  JSC::VM *v80;
  _BYTE v81[7];
  JSC::VM *v82;
  WTF::StringImpl *v83;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v80 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v58.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v58);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v80, (uint64_t)"File", 5);
  v7 = (WebCore::ScriptExecutionContext *)v6;
  WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer,WebCore::IDLInterface<WebCore::Blob>,WebCore::IDLUSVString>>>::convert(this, *(_QWORD *)(a2 + 48), (uint64_t)&v77);
  v8 = v79;
  if (v79)
  {
    v46 = 0;
LABEL_93:
    if (v8 != -1)
      ((void (*)(WTF::StringImpl **, unint64_t *))off_1E327CAB0[v8])(&v71, &v77);
    return v46;
  }
  WebCore::valueToUSVString(this, *(_QWORD *)(a2 + 56), (uint64_t)&v75);
  v10 = v76;
  if (v76)
  {
    v46 = 0;
    goto LABEL_90;
  }
  v66 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v82 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_16;
  }
  v11 = *(JSC::JSCell **)(a2 + 64);
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v82 = v12;
  if (((unint64_t)v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_16:
    LODWORD(v17) = 0;
    v14 = 0;
    v18 = 1;
    goto LABEL_17;
  }
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0)
    goto LABEL_108;
  Object = JSC::JSCell::getObject(v11);
  if (!Object)
    goto LABEL_108;
  v14 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v16 = JSC::JSObject::get(v14, this, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v15);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    goto LABEL_109;
  if (v16 == 10)
  {
    LODWORD(v17) = 0;
    goto LABEL_23;
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v17 = WebCore::parseEnumeration<WebCore::EndingType>(this, v16);
  if (*((_DWORD *)v67 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) != 0)
  {
LABEL_109:
    v46 = 0;
    v32 = 1;
    v74 = 1;
LABEL_88:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E327CAA0[v32])(&v67, &v71);
LABEL_89:
    v10 = v76;
LABEL_90:
    if (v10 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v71, &v75);
    v8 = v79;
    goto LABEL_93;
  }
  if ((v17 & 0xFF00000000) == 0)
  {
LABEL_108:
    JSC::throwTypeError();
    goto LABEL_109;
  }
LABEL_23:
  WTF::AtomStringImpl::addLiteral();
  v20 = JSC::JSObject::get(v14, this, (unint64_t)v67);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v9);
    else
      *(_DWORD *)v67 -= 2;
  }
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    goto LABEL_109;
  if (v20 == 10)
  {
    v18 = 0;
LABEL_17:
    v19 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v19 += 2;
    v68 = 0;
    v67 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_43;
    goto LABEL_38;
  }
  v70[0] = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v70, this);
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v20 + 8);
  if ((v22 & 1) != 0)
  {
    v22 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, this);
    if (!v22)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (v22)
LABEL_33:
    *(_DWORD *)v22 += 2;
LABEL_34:
  v83 = (WTF::StringImpl *)v22;
LABEL_35:
  if (*((_DWORD *)v21 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
    v19 = v83;
    if (hasExceptionsAfterHandlingTraps)
    {
      v68 = 1;
      v83 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v9);
        else
          *(_DWORD *)v19 -= 2;
      }
      v19 = 0;
      goto LABEL_137;
    }
  }
  else
  {
    v19 = v83;
  }
  v68 = 0;
  v67 = 0;
LABEL_38:
  WTF::AtomStringImpl::addLiteral();
  v23 = (WTF::StringImpl *)v70[0];
  v24 = JSC::JSObject::get(v14, this, v70[0]);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v9);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
    goto LABEL_137;
  if (v24 == 10)
  {
LABEL_43:
    v25 = 0;
    v26 = 0;
    v27 = 0;
LABEL_56:
    v32 = 0;
    v71 = v19;
    v72 = v17;
    *(_QWORD *)&v73 = v27 | v26;
    BYTE8(v73) = v25;
    *(_DWORD *)((char *)&v73 + 9) = *(_DWORD *)v81;
    HIDWORD(v73) = *(_DWORD *)&v81[3];
    v19 = 0;
    goto LABEL_57;
  }
  v70[0] = v24;
  if (v24 >= 0xFFFE000000000000)
  {
    v28 = (int)v24;
LABEL_55:
    v27 = v28 & 0xFFFFFFFFFFFFFF00;
    v26 = v28;
    v25 = 1;
    goto LABEL_56;
  }
  v29 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v70, this);
  else
    *(_QWORD *)&v30 = v24 - 0x2000000000000;
  if (!*((_DWORD *)v29 + 20)
    || (v65 = v30, v61 = JSC::VM::hasExceptionsAfterHandlingTraps(v29), v30 = v65, (v61 & 1) == 0))
  {
    if (fabs(v30) == INFINITY)
    {
      v28 = 0;
    }
    else
    {
      v31 = fmod(trunc(v30), 1.84467441e19);
      if (v31 >= 0.0)
        v28 = (unint64_t)v31;
      else
        v28 = -(uint64_t)(unint64_t)-v31;
    }
    goto LABEL_55;
  }
LABEL_137:
  v32 = 1;
LABEL_57:
  v74 = v32;
  if (v68 != -1)
    ((void (*)(unint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v68])(v70, &v67);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v9);
      v32 = v74;
      if (!v74)
        goto LABEL_63;
LABEL_97:
      v46 = 0;
      if (v32 == -1)
        goto LABEL_89;
      goto LABEL_88;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (v32)
    goto LABEL_97;
LABEL_63:
  if (!v79)
  {
    v70[0] = v77;
    v33 = v78;
    v77 = 0;
    v78 = 0;
    v70[1] = v33;
    if (!v76)
    {
      v34 = v75;
      v75 = 0;
      v35 = v71;
      v71 = 0;
      v67 = v35;
      v68 = v72;
      v69 = v73;
      v36 = bmalloc::api::isoAllocate();
      v37 = (_QWORD *)WebCore::Blob::Blob(v36, v7, (uint64_t)v70, (int *)&v67);
      *v37 = off_1E33AE6D8;
      v37[3] = &unk_1E33AE718;
      v38 = v37 + 3;
      v37[16] = 0;
      v37[17] = 0;
      if (v34)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)(v36 + 144) = v34;
      WTF::WallTime::now((WTF::WallTime *)v37);
      v40 = v39 * 1000.0;
      if (BYTE8(v69))
        v41 = v69;
      else
        v41 = (uint64_t)v40;
      *(_QWORD *)(v36 + 152) = v41;
      *(_BYTE *)(v36 + 160) = 1;
      *(_BYTE *)(v36 + 168) = 0;
      *(_BYTE *)(v36 + 176) = 0;
      *(_WORD *)(v36 + 184) = 0;
      v83 = (WTF::StringImpl *)v36;
      WebCore::ActiveDOMObject::suspendIfNeeded(v38);
      v43 = v67;
      v67 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
        {
          WTF::StringImpl::destroy(v43, v42);
          if (v34)
          {
LABEL_74:
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v42);
            else
              *(_DWORD *)v34 -= 2;
          }
LABEL_76:
          WTF::Vector<std::variant<WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<WebCore::Blob,WTF::RawPtrTraits<WebCore::Blob>,WTF::DefaultRefDerefTraits<WebCore::Blob>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70, v42);
          if (*(void (***)(WebCore::File *__hidden))v36 != off_1E33AE6D8)
          {
            __break(0xC471u);
            JUMPOUT(0x194AFFF64);
          }
          v44 = *(_QWORD *)(v5 + 40);
          v45 = WebCore::getDOMStructure<WebCore::JSFile>(*(WebCore::JSFile **)(v44 + 56), (JSC::VM *)v44);
          v46 = (JSCell *)WebCore::JSFile::create(v45, (JSC::VM *)v44, (uint64_t *)&v83);
          WebCore::cacheWrapper<WebCore::File,WebCore::JSFile>(*(_QWORD *)(v44 + 3320), v36, (uint64_t)v46);
          v47 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v47 & 0xFFFE000000000002) == 0)
          {
            v48 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v47);
            if (v48)
            {
              v50 = v48;
              if (v48 != *(JSC::JSGlobalObject **)(a2 + 24))
              {
                v51 = (WebCore::JSFile *)*((_QWORD *)this + 7);
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, v48, v49);
                if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
                {
                  v53 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSFile>(v51, FunctionRealm);
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v50, v53, v54);
                  if (!*((_DWORD *)v51 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) == 0)
                    JSC::JSObject::setStructure(v46, v51, SubclassStructure);
                }
              }
            }
          }
          if (*((_DWORD *)v66 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
            v46 = 0;
          v56 = v83;
          v83 = 0;
          if (v56)
          {
            if (*((_DWORD *)v56 + 4) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v56 + 8))(v56);
            else
              --*((_DWORD *)v56 + 4);
          }
          v32 = 0;
          goto LABEL_88;
        }
        *(_DWORD *)v43 -= 2;
      }
      if (v34)
        goto LABEL_74;
      goto LABEL_76;
    }
  }
  v62 = (WebCore::JSFile *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSFile::prototype(v62, v63, v64);
}

uint64_t WebCore::JSFile::prototype(WebCore::JSFile *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSFile>(this, a2) + 48);
}

uint64_t WebCore::JSFile::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSBlob::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSBlob::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSBlob::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFile::JSFile(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSFile::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 16);
  *a2 = v2;
  return this;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFile>,(WebCore::DOMConstructorID)501>(WebCore::JSBlob *this, uint64_t a2, const JSC::JSGlobalObject *a3)
{
  unint64_t result;
  JSC::JSCell *Constructor;
  uint64_t Structure;
  JSC::Heap *v8;
  unint64_t v9;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4008);
  if (!result)
  {
    Constructor = (JSC::JSCell *)WebCore::JSBlob::getConstructor(this, (JSC::VM *)a2, a3);
    Structure = WebCore::JSDOMConstructor<WebCore::JSFile>::createStructure((uint64_t *)this, a2, Constructor);
    result = WebCore::JSDOMConstructor<WebCore::JSFile>::create((uint64_t)this, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4008) = result;
    if (result)
    {
      if (*((_DWORD *)this + 190) >= *(unsigned __int8 *)(a2 + 7))
      {
        v8 = (WebCore::JSBlob *)((char *)this + 192);
        v9 = result;
        JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
        return v9;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsFileConstructor(uint64_t a1, unint64_t a2, const JSC::JSGlobalObject *a3)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFilePrototype::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFile>,(WebCore::DOMConstructorID)501>(*(WebCore::JSBlob **)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), a3);
  }
}

uint64_t WebCore::jsFile_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsFile_lastModified(uint64_t a1, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::WallTime *v4;
  char v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)(v2 + 160))
  {
    v3 = *(_QWORD *)(v2 + 152);
  }
  else
  {
    v4 = (WTF::WallTime *)WTF::FileSystemImpl::fileModificationTime((WTF::FileSystemImpl *)(v2 + 128), a2);
    if (v5)
      v6 = *(double *)&v4;
    else
      WTF::WallTime::now(v4);
    v7 = v6 * 1000.0;
    v8 = -9.22337204e18;
    if (v7 > -9.22337204e18)
      v8 = v7;
    v9 = (double)(uint64_t)v8;
    if (v7 >= 9.22337204e18)
      v10 = 9.22337204e18;
    else
      v10 = v9;
    if (fabs(v10) > 8.64e15)
      v10 = NAN;
    v3 = (uint64_t)v10;
  }
  v11 = v3 == (int)v3;
  v12 = v3 | 0xFFFE000000000000;
  v13 = COERCE__INT64((double)v3) + 0x2000000000000;
  if (v11)
    return v12;
  else
    return v13;
}

uint64_t WebCore::jsFile_webkitRelativePath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 136);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSFile::subspaceForImpl(WebCore::JSFile *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4088);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 4088))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 4088);
    *(_QWORD *)(v8 + 4088) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 4088);
  *(_QWORD *)(v3 + 4088) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFileOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[4];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[5] || (result = (*(uint64_t (**)(_QWORD *))(v5[3] + 64))(v5 + 3), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSFileOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 16) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

uint64_t WebCore::wrap<WebCore::File>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(_QWORD *)(v11 + 16 * v16);
    if (v17 != a3)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(_QWORD *)(v11 + 16 * v16);
        ++v18;
        if (v17 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  v19 = (_DWORD *)a3;
  if (*(void (***)(WebCore::File *__hidden))a3 == off_1E33AE6D8)
  {
    v8 = WebCore::getDOMStructure<WebCore::JSFile>(*(WebCore::JSFile **)(a2 + 56), (JSC::VM *)a2);
    v7 = WebCore::JSFile::create(v8, (JSC::VM *)a2, (uint64_t *)&v19);
    WebCore::cacheWrapper<WebCore::File,WebCore::JSFile>(*(_QWORD *)(a2 + 3320), a3, v7);
    v9 = v19;
    v19 = 0;
    if (v9)
    {
      if (v9[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      else
        --v9[4];
    }
    return v7;
  }
  result = 371;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFile::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSFile::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSFile::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

void WebCore::JSFileCallback::~JSFileCallback(WebCore::JSFileCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSFileCallback::handleEvent(uint64_t **this, WebCore::File *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::File>(v5, v5, (uint64_t)a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

BOOL WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::initializeProperties(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000000, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSFileList>((WebCore::JSFileList *)a2, a3);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
}

WTF::StringImpl *WebCore::JSFileListPrototype::finishCreation(WebCore::JSFileListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t Direct;
  WTF::StringImpl *v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(a2, (uint64_t)&WebCore::JSFileList::s_info, &WebCore::JSFileListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2712);
  v5 = *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 672);
  v6 = (_DWORD *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  Direct = JSC::JSObject::getDirect(v5, a2, (unint64_t)v6);
  JSC::JSObject::putDirect((unsigned __int8 *)this, a2, v4, Direct, 4);
  if (*v6 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBF0], v8);
  else
    *v6 -= 2;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = JSC::jsNontrivialString((uint64_t)a2, &v13);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v9, v10, 6);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSFileList::destroy(uint64_t this, JSC::JSCell *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v2 = *(_DWORD **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (v2[2] == 1)
    {
      v3 = v2[7];
      if ((_DWORD)v3)
      {
        v4 = (_DWORD **)*((_QWORD *)v2 + 2);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
          {
            if (v6[4] == 1)
              (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v6 + 8))(v6, a2);
            else
              --v6[4];
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
      v7 = (WTF *)*((_QWORD *)v2 + 2);
      if (v7)
      {
        *((_QWORD *)v2 + 2) = 0;
        v2[6] = 0;
        WTF::fastFree(v7, a2);
      }
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
        *(_QWORD *)v2 = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    else
    {
      --v2[2];
    }
  }
  return this;
}

uint64_t WebCore::JSFileList::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  JSC::VM *v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t result;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  int OwnProperty;
  int v34;
  int v35;
  char hasExceptionsAfterHandlingTraps;
  _BYTE v37[16];
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v14 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v14 = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v14);
  if (v15)
  {
    v16 = v15;
    if (!*(_BYTE *)(v15 + 274))
    {
      v17 = *(_BYTE **)(v15 + 496);
      if (!v17)
        v17 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v16 - 192));
      if (*(_QWORD *)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 680);
          if (*(_BYTE *)(v19 + 243))
          {
            if (!*(_BYTE *)(v19 + 242))
              goto LABEL_23;
          }
          else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
          {
            goto LABEL_23;
          }
          if (v17[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_23:
  if (!a3)
    return JSC::JSObject::put();
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    return JSC::JSObject::put();
  v21 = *(JSC::VM **)(a2 + 56);
  v22 = *(_BYTE **)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 4);
  if ((v20 & 4) != 0)
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *v22 - 48;
    if (v24 > 9 || v23 >= 2 && *v22 == 48)
      return JSC::JSObject::put();
    v30 = v22 + 1;
    v31 = v23 - 1;
    while (v31)
    {
      if (v24 <= 0x19999999)
      {
        v32 = *v30 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v24);
          v24 = v32 + 10 * v24;
          ++v30;
          --v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v23)
      return JSC::JSObject::put();
    v24 = *(unsigned __int16 *)v22 - 48;
    if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v22 + 2);
    v27 = v23 - 1;
    while (v27)
    {
      if (v24 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v24);
          v24 = v28 + 10 * v24;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v24 == -1)
    return JSC::JSObject::put();
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 14;
  v38 = 0xFFFFFFFF00000000;
  v40 = 0;
  v41 = 0;
  v39 = v8;
  v42 = 0x20000;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  OwnProperty = WebCore::JSFileList::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v37);
  if (*((_DWORD *)v21 + 20)
    && (v35 = OwnProperty,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21),
        OwnProperty = v35,
        (hasExceptionsAfterHandlingTraps & 1) != 0)
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v21 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v45)
  {
    v34 = *(_DWORD *)(v44 + 4);
    if (!v34)
    {
      __break(0xC471u);
      JUMPOUT(0x194B012E0);
    }
    *(_DWORD *)(v44 + 4) = v34 - 1;
  }
  return result;
}

uint64_t WebCore::JSFileList::putByIndex(JSC::JSObject *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, objc_class *a5)
{
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  WebCore::JSDOMGlobalObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSValue v24;
  WTF::StringImpl *v25;

  v10 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMGlobalObject::s_info && v12 != 0);
  }
  if (v11)
    v15 = a2;
  else
    v15 = 0;
  v16 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v15);
  if (!v16)
    goto LABEL_22;
  v17 = v16;
  if (*(_BYTE *)(v16 + 274))
    goto LABEL_22;
  v18 = *(_BYTE **)(v16 + 496);
  if (!v18)
    v18 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v17 - 192));
  if (!*(_QWORD *)v18)
    goto LABEL_22;
  v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
  if (!v19)
    goto LABEL_22;
  v20 = *(_QWORD *)(v19 + 680);
  if (*(_BYTE *)(v20 + 243))
  {
    if (!*(_BYTE *)(v20 + 242))
      goto LABEL_22;
  }
  else if ((*(_QWORD *)(v20 + 688) & 0x80000) == 0)
  {
    goto LABEL_22;
  }
  if (v18[65])
  {
    v24.super.isa = a5;
    return JSC::JSObject::putByIndex(a1, a2, a3, a4, v24);
  }
LABEL_22:
  JSC::Identifier::from();
  v22 = JSC::ordinarySetSlow();
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v21);
    else
      *(_DWORD *)v25 -= 2;
  }
  return v22;
}

uint64_t WebCore::JSFileList::deleteProperty(uint64_t a1, WebCore::JSDOMGlobalObject *a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v5)
    v10 = a2;
  else
    v10 = 0;
  v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  if (v11)
  {
    v12 = v11;
    if (!*(_BYTE *)(v11 + 274))
    {
      v13 = *(_BYTE **)(v11 + 496);
      if (!v13)
        v13 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v12 - 192));
      if (*(_QWORD *)v13)
      {
        v14 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 680);
          if (*(_BYTE *)(v15 + 243))
          {
            if (*(_BYTE *)(v15 + 242))
            {
LABEL_21:
              if (v13[65])
                return JSC::JSObject::deleteProperty();
            }
          }
          else if ((*(_QWORD *)(v15 + 688) & 0x80000) != 0)
          {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if (a3)
  {
    v16 = *(_DWORD *)(a3 + 16);
    if ((v16 & 0x20) == 0)
    {
      v17 = *(_BYTE **)(a3 + 8);
      v18 = *(unsigned int *)(a3 + 4);
      if ((v16 & 4) != 0)
      {
        if (!(_DWORD)v18 || (v29 = *v17 - 48, v29 > 9) || v18 >= 2 && *v17 == 48)
        {
LABEL_46:
          v30 = 0;
          v31 = 0;
          v32 = 0;
        }
        else
        {
          v33 = v18 - 1;
          v34 = v17 + 1;
          while (v33)
          {
            if (v29 > 0x19999999)
              goto LABEL_46;
            v35 = *v34 - 48;
            if (v35 > 9)
              goto LABEL_46;
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v28 = __CFADD__(v35, 10 * v29);
            v29 = v35 + 10 * v29;
            --v33;
            ++v34;
            if (v28)
              goto LABEL_47;
          }
          v30 = 0x100000000;
          if (v29 == -1)
          {
            v30 = 0;
            v31 = 0;
          }
          else
          {
            v31 = v29;
          }
          if (v29 == -1)
            v32 = 0;
          else
            v32 = v29 & 0xFFFFFF00;
        }
LABEL_47:
        v23 = v32 | v31;
        if ((v30 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 28) <= v23;
      }
      else
      {
        if ((_DWORD)v18
          && (v19 = *(unsigned __int16 *)v17 - 48, v19 <= 9)
          && (v18 < 2 || *(_WORD *)v17 != 48))
        {
          v25 = (unsigned __int16 *)(v17 + 2);
          v26 = v18 - 1;
          while (v26)
          {
            if (v19 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v19);
                v19 = v27 + 10 * v19;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_29;
          }
          v7 = v19 == -1;
          v22 = v19 & 0xFFFFFF00;
          v21 = v19;
          v20 = 0x100000000;
          if (v7)
          {
            v20 = 0;
            v21 = 0;
            v22 = 0;
          }
        }
        else
        {
LABEL_29:
          v20 = 0;
          v21 = 0;
          v22 = 0;
        }
        v23 = v22 | v21;
        if ((v20 & 0x100000000) != 0)
          return *(_DWORD *)(v9 + 28) <= v23;
      }
    }
  }
  return JSC::JSObject::deleteProperty();
}

uint64_t WebCore::JSFileList::deletePropertyByIndex(WebCore::JSFileList *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  v11 = *((_QWORD *)this + 3);
  if (v7)
    v12 = a2;
  else
    v12 = 0;
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v12);
  if (!v13)
    return *(_DWORD *)(v11 + 28) <= a3;
  v14 = v13;
  if (*(_BYTE *)(v13 + 274))
    return *(_DWORD *)(v11 + 28) <= a3;
  v15 = *(_BYTE **)(v13 + 496);
  if (!v15)
    v15 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v14 - 192));
  if (!*(_QWORD *)v15)
    return *(_DWORD *)(v11 + 28) <= a3;
  v16 = *(_QWORD *)(*(_QWORD *)v15 + 8);
  if (!v16)
    return *(_DWORD *)(v11 + 28) <= a3;
  v17 = *(_QWORD *)(v16 + 680);
  if (*(_BYTE *)(v17 + 243))
  {
    if (!*(_BYTE *)(v17 + 242))
      return *(_DWORD *)(v11 + 28) <= a3;
  }
  else if ((*(_QWORD *)(v17 + 688) & 0x80000) == 0)
  {
    return *(_DWORD *)(v11 + 28) <= a3;
  }
  if (!v15[65])
    return *(_DWORD *)(v11 + 28) <= a3;
  return JSC::JSObject::deletePropertyByIndex(this, a2, a3);
}

uint64_t WebCore::JSFileList::getOwnPropertySlotByIndex(WebCore::JSFileList *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t result;

  if ((_DWORD)a3 == -1)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v7 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v7 + 28) <= a3)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * a3);
  if (!v8)
    return JSC::JSObject::getOwnPropertySlotByIndex();
  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v10 = WebCore::wrap<WebCore::File>((uint64_t)a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v8);
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  *(_QWORD *)a4 = v10;
  *(_DWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 32) = this;
  result = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return result;
}

uint64_t WebCore::JSFileList::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  int v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44[2];
  char v45;
  WTF::StringImpl *v46;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 28);
  if (v4)
  {
    v5 = 0;
    v6 = a3 + 1;
    while (1)
    {
      JSC::Identifier::from();
      v8 = v43;
      v46 = v43;
      v9 = *((_DWORD *)v43 + 4);
      if ((v9 & 0x20) != 0)
      {
        if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v43 + 36) & 4) != 0)
          goto LABEL_60;
      }
      else if ((a3[3] & 2) == 0)
      {
        goto LABEL_60;
      }
      v10 = *a3;
      v11 = *(unsigned int *)(*a3 + 20);
      if (v11 <= 0x13)
      {
        if ((_DWORD)v11)
        {
          v12 = *(WTF::StringImpl ***)(v10 + 8);
          while (*v12 != v43)
          {
            ++v12;
            if (!--v11)
              goto LABEL_19;
          }
          goto LABEL_60;
        }
LABEL_19:
        if ((v9 & 0x20) != 0)
        {
          v33 = *(_DWORD *)v8 + 2;
        }
        else
        {
          if ((v9 & 0x10) != 0)
          {
            *(_DWORD *)v8 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase();
            v8 = v44[0];
          }
          v33 = *(_DWORD *)v8;
          *(_DWORD *)v8 += 2;
          if (!v33)
          {
            WTF::StringImpl::destroy(v8, v7);
LABEL_54:
            v34 = (uint64_t *)(v10 + 8);
            v44[0] = v8;
            v35 = *(unsigned int *)(v10 + 20);
            if ((_DWORD)v35 == *(_DWORD *)(v10 + 16))
            {
              v36 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)v44);
              v35 = *(unsigned int *)(v10 + 20);
              v37 = *(_QWORD *)(v10 + 8);
              v38 = *v36;
              *v36 = 0;
              *(_QWORD *)(v37 + 8 * v35) = v38;
            }
            else
            {
              v39 = *v34;
              v44[0] = 0;
              *(_QWORD *)(v39 + 8 * v35) = v8;
            }
            *(_DWORD *)(v10 + 20) = v35 + 1;
            v40 = v44[0];
            v44[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v7);
              else
                *(_DWORD *)v40 -= 2;
            }
            goto LABEL_60;
          }
        }
        *(_DWORD *)v8 = v33;
        goto LABEL_54;
      }
      if (!*v6 || !*(_DWORD *)(*v6 - 12))
        break;
LABEL_17:
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, (uint64_t *)&v46, (uint64_t)v44);
      if (v45)
      {
        v8 = v46;
        v10 = *a3;
        v9 = *((_DWORD *)v46 + 4);
        goto LABEL_19;
      }
LABEL_60:
      v41 = v43;
      v43 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v7);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (++v5 == v4)
        return JSC::JSObject::getOwnPropertyNames();
    }
    v13 = *(uint64_t **)(v10 + 8);
    v14 = &v13[v11];
    while (1)
    {
      v15 = *v13;
      v16 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, 8u, 0), (v16 = *v6) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v16 + 8 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != v15)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v16 + 8 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              --*(_DWORD *)(*v6 - 16);
              v22 = v24;
            }
            goto LABEL_34;
          }
        }
        goto LABEL_47;
      }
LABEL_34:
      *v22 = v15;
      v26 = *v6;
      v27 = *v6 ? *(_DWORD *)(v26 - 12) + 1 : 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *v6;
      v29 = *v6 ? *(_DWORD *)(v28 - 12) : 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
        break;
      if (3 * v31 <= 4 * v30)
      {
        if ((_DWORD)v31)
          goto LABEL_43;
        v32 = 8;
        goto LABEL_46;
      }
LABEL_47:
      if (++v13 == v14)
        goto LABEL_17;
    }
    if (v31 > 2 * v30)
      goto LABEL_47;
LABEL_43:
    v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
LABEL_46:
    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a3 + 1, v32, v22);
    goto LABEL_47;
  }
  return JSC::JSObject::getOwnPropertyNames();
}

uint64_t WebCore::JSFileList::defineOwnProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;

  if (!a3)
    return JSC::JSObject::defineOwnProperty();
  v5 = *(_DWORD *)(a3 + 16);
  if ((v5 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty();
  v6 = *(_BYTE **)(a3 + 8);
  v7 = *(unsigned int *)(a3 + 4);
  if ((v5 & 4) != 0)
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *v6 - 48;
    if (v8 > 9 || v7 >= 2 && *v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v14 = v7 - 1;
    v15 = v6 + 1;
    while (v14)
    {
      if (v8 <= 0x19999999)
      {
        v16 = *v15 - 48;
        if (v16 <= 9)
        {
          v13 = __CFADD__(v16, 10 * v8);
          v8 = v16 + 10 * v8;
          --v14;
          ++v15;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  else
  {
    if (!(_DWORD)v7)
      return JSC::JSObject::defineOwnProperty();
    v8 = *(unsigned __int16 *)v6 - 48;
    if (v8 > 9 || v7 >= 2 && *(_WORD *)v6 == 48)
      return JSC::JSObject::defineOwnProperty();
    v10 = (unsigned __int16 *)(v6 + 2);
    v11 = v7 - 1;
    while (v11)
    {
      if (v8 <= 0x19999999)
      {
        v12 = *v10 - 48;
        if (v12 <= 9)
        {
          v13 = __CFADD__(v12, 10 * v8);
          v8 = v12 + 10 * v8;
          ++v10;
          --v11;
          if (!v13)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty();
    }
  }
  if (v8 == -1)
    return JSC::JSObject::defineOwnProperty();
  if (a5)
    JSC::throwTypeError();
  return 0;
}

uint64_t WebCore::JSFileList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFileList::createPrototype(WebCore::JSFileList *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSFileListPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSFileListPrototype::create(WebCore::JSFileListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSFileListPrototype::finishCreation((WebCore::JSFileListPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>,(WebCore::DOMConstructorID)502>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4016);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    result = WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::create(a1, Structure, (JSC::JSCell **)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4016) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = (JSC::Heap *)(a1 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)a2);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSFileList::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;

  v6 = *(JSC::VM **)(a2 + 56);
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot();
    return 0;
  }
  v8 = *(_DWORD *)(a3 + 16);
  if ((v8 & 0x20) == 0)
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((v8 & 4) != 0)
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *v9 - 48;
      if (v11 > 9 || v10 >= 2 && *v9 == 48)
        goto LABEL_8;
      v38 = v10 - 1;
      v39 = v9 + 1;
      while (v38)
      {
        if (v11 <= 0x19999999)
        {
          v40 = *v39 - 48;
          if (v40 <= 9)
          {
            v24 = __CFADD__(v40, 10 * v11);
            v11 = v40 + 10 * v11;
            --v38;
            ++v39;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!(_DWORD)v10)
        goto LABEL_8;
      v11 = *(unsigned __int16 *)v9 - 48;
      if (v11 > 9 || v10 >= 2 && *(_WORD *)v9 == 48)
        goto LABEL_8;
      v21 = (unsigned __int16 *)(v9 + 2);
      v22 = v10 - 1;
      while (v22)
      {
        if (v11 <= 0x19999999)
        {
          v23 = *v21 - 48;
          if (v23 <= 9)
          {
            v24 = __CFADD__(v23, 10 * v11);
            v11 = v23 + 10 * v11;
            ++v21;
            --v22;
            if (!v24)
              continue;
          }
        }
        goto LABEL_8;
      }
    }
    if (v11 != -1)
    {
      v41 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)(v41 + 28) > v11)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8 * v11);
        if (v42)
        {
          v43 = WebCore::wrap<WebCore::File>(a2, *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v42);
          if (!*((_DWORD *)v6 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) == 0)
          {
            *(_QWORD *)a4 = v43;
            *(_DWORD *)(a4 + 16) = 2;
            *(_QWORD *)(a4 + 32) = a1;
            result = 1;
            *(_BYTE *)(a4 + 49) = 1;
            return result;
          }
          return 0;
        }
      }
    }
  }
LABEL_8:
  if (!(a3 >> 4)
    || (v12 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((a3 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (v13 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56))) == 0|| (v49 = a3, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v49), (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return 0;
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v44 = *v16 - 48;
        if (v44 > 9 || v17 >= 2 && *v16 == 48)
        {
LABEL_80:
          v45 = 0;
        }
        else
        {
          v46 = v16 + 1;
          v47 = v17 - 1;
          while (v47)
          {
            if (v44 > 0x19999999)
              goto LABEL_80;
            v48 = *v46 - 48;
            if (v48 > 9)
              goto LABEL_80;
            v45 = 0;
            v24 = __CFADD__(v48, 10 * v44);
            v44 = v48 + 10 * v44;
            ++v46;
            --v47;
            if (v24)
              goto LABEL_81;
          }
          v45 = 0x100000000;
          if (v44 == -1)
            v45 = 0;
        }
      }
      else
      {
        v45 = 0;
      }
LABEL_81:
      if ((v45 & 0x100000000) == 0)
        return 0;
    }
    else
    {
      if ((_DWORD)v17)
      {
        v18 = *(unsigned __int16 *)v16 - 48;
        if (v18 > 9 || v17 >= 2 && *(_WORD *)v16 == 48)
        {
LABEL_19:
          v19 = 0;
        }
        else
        {
          v29 = (unsigned __int16 *)(v16 + 2);
          v30 = v17 - 1;
          while (v30)
          {
            if (v18 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v24 = __CFADD__(v31, 10 * v18);
                v18 = v31 + 10 * v18;
                ++v29;
                --v30;
                if (!v24)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v32 = v18 == -1;
          v19 = 0x100000000;
          if (v32)
            v19 = 0;
        }
      }
      else
      {
        v19 = 0;
      }
      if ((v19 & 0x100000000) == 0)
        return 0;
    }
    return JSC::JSObject::getOwnPropertySlotByIndex();
  }
  if ((int)v14 > 63)
  {
    v25 = *(_QWORD *)(a1 + 8) - 8;
    v26 = 0x3F00000000 - (v14 << 32);
  }
  else
  {
    v25 = a1 + 16;
    v26 = v14 << 32;
  }
  v27 = *(_QWORD *)(v25 + (v26 >> 29));
  if ((v27 & 0xFFFE000000000002) != 0)
  {
LABEL_36:
    *(_QWORD *)a4 = v27;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_DWORD *)(a4 + 20) = v14;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v28 = *(unsigned __int8 *)(v27 + 5);
  if (v28 != 6)
  {
    if (v28 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
    goto LABEL_36;
  }
  v33 = *(_DWORD *)(v12 + 16) & 3;
  v35 = *(_QWORD *)(v27 + 8);
  v34 = *(_QWORD *)(v27 + 16);
  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C))
  {
    v37 = *(_QWORD *)(v27 + 24);
    v36 = *(_QWORD *)(v27 + 32);
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v37;
    *(_QWORD *)(a4 + 80) = v36;
  }
  else
  {
    *(_QWORD *)a4 = v35;
    *(_QWORD *)(a4 + 8) = v34;
    *(_DWORD *)(a4 + 16) = HIDWORD(v14);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v33 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

unint64_t WebCore::jsFileListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileListPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>,(WebCore::DOMConstructorID)502>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsFileList_length(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 28);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSFileListOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSFileListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  bmalloc::api *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(bmalloc::api **)(v11 + 16 * v17);
      if (v18 != v3)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(bmalloc::api **)(v11 + 16 * v17);
          ++v19;
          if (v18 == v3)
            goto LABEL_24;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_24:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
    *(_QWORD *)v3 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    v5 = *((unsigned int *)v3 + 7);
    if ((_DWORD)v5)
    {
      v6 = (_DWORD **)*((_QWORD *)v3 + 2);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[4];
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = (WTF *)*((_QWORD *)v3 + 2);
    if (v9)
    {
      *((_QWORD *)v3 + 2) = 0;
      *((_DWORD *)v3 + 6) = 0;
      WTF::fastFree(v9, a2);
    }
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(*(_QWORD *)v3 + 8) = 3;
      *(_QWORD *)v3 = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::FileList>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  WTF *v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(WTF **)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(WTF **)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_55;
      }
      goto LABEL_5;
    }
LABEL_55:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*((_DWORD *)a3 + 2);
  v8 = WebCore::getDOMStructure<WebCore::JSFileList>(*(WebCore::JSFileList **)(a2 + 56), (JSC::JSCell **)a2);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(v9 + 41456);
  v11 = *(_QWORD *)(v10 + 23536);
  v12 = *(_QWORD **)(v11 + 4096);
  if (v12)
    goto LABEL_25;
  v13 = *(_QWORD *)(v10 + 22648);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_10;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_10:
  v15 = *(_QWORD *)(v13 + 2824);
  if (!*(_QWORD *)(v15 + 4096))
  {
    v16 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v16, &v45, v9 + 192, v9 + 1872, 32, 8, &v44);
    v18 = (uint64_t)v44;
    v44 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v45;
    v45 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
        WTF::fastFree(v19, v17);
      else
        --*(_DWORD *)v19;
    }
    v20 = *(_QWORD *)(v15 + 4096);
    *(_QWORD *)(v15 + 4096) = v16;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v22 = *(_QWORD *)(v11 + 4096);
  *(_QWORD *)(v11 + 4096) = v12;
  if (v22)
  {
    v23 = (WTF *)MEMORY[0x19AEA3528](v22, v21);
    WTF::fastFree(v23, v24);
  }
  v25 = __ldxr((unsigned __int8 *)v13);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_25:
  SlowCase = v12[3];
  if (SlowCase < v12[4])
  {
LABEL_26:
    v12[3] = SlowCase + 32;
    goto LABEL_27;
  }
  SlowCase = v12[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v12[6];
    v12[4] = SlowCase + HIDWORD(v43);
    v12[5] = SlowCase + (int)v43;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_27:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v8);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335590 & 1) == 0)
  {
    qword_1EE335588 = (uint64_t)&off_1E327C6E0;
    byte_1EE335590 = 1;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335588;
    Allocator[2] = v26;
    v30 = *(_QWORD *)a3;
    *(_QWORD *)a3 = Allocator;
    if (!v30)
      return SlowCase;
LABEL_49:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v45 = a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &qword_1EE335588;
  v34[2] = v26;
  v44 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  v30 = (uint64_t)v44;
  if (v44)
    goto LABEL_49;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFileReader>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::FileReader *v6;
  JSCell *v7;
  void *v8;
  WebCore::ActiveDOMObject *v10;
  JSC::VM *v11;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v11 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (WebCore::FileReader *)WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v11, (uint64_t)"FileReader", 11);
  WebCore::FileReader::create(v6, &v10);
  v7 = (JSCell *)WebCore::toJSNewlyCreated(*(_QWORD *)(v5 + 40), (uint64_t *)&v10);
  WebCore::setSubclassStructureIfNeeded<WebCore::FileReader>(a1, a2, v7);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v7 = 0;
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::FileReader>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  WebCore::JSFileReader *v10;
  uint64_t FunctionRealm;
  JSC::VM *v12;
  JSC::JSObject *v13;
  JSC::Structure *v14;
  unint64_t SubclassStructure;
  JSC::VM *v16;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (WebCore::JSFileReader *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v12 = (JSC::VM *)FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (v16 = (JSC::VM *)FunctionRealm,
            result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10),
            v12 = v16,
            (result & 1) == 0))
      {
        v13 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSFileReader>(v10, v12);
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v13, v14);
        if (!*((_DWORD *)v10 + 20))
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
        result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
        if ((result & 1) == 0)
          return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
      }
    }
  }
  return result;
}

WebCore::FileReader **WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(WebCore::FileReader **a1, void *a2)
{
  WebCore::FileReader *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::FileReader::~FileReader(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

uint64_t WebCore::JSFileReader::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileReader::JSFileReader(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a4;
  *a4 = 0;
  v7 = 0;
  *(_QWORD *)(WebCore::JSDOMObject::JSDOMObject(a1, a2) + 24) = v5 + 32;
  WTF::Ref<WebCore::EventTarget,WTF::RawPtrTraits<WebCore::EventTarget>,WTF::DefaultRefDerefTraits<WebCore::EventTarget>>::~Ref(&v7);
  return a1;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReader>,(WebCore::DOMConstructorID)503>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4024);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSFileReader>::createStructure((uint64_t *)a1, a2, v5);
    result = WebCore::JSDOMConstructor<WebCore::JSFileReader>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4024) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v7 = (JSC::Heap *)(a1 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)a2);
        return v8;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsFileReaderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileReaderPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReader>,(WebCore::DOMConstructorID)503>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsFileReader_readyState(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 40) | 0xFFFE000000000000;
}

uint64_t WebCore::jsFileReader_result(WebCore *a1, WebCore::JSFileReader **a2)
{
  return WebCore::jsFileReader_resultGetter(a1, (JSC::JSGlobalObject *)*(unsigned int *)a2, a2[3]);
}

uint64_t WebCore::jsFileReader_error(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMException *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 80);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsFileReader_onloadstart(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onloadstartGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onloadstart(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1160), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFileReader_onprogress(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onprogressGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onprogress(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1584), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFileReader_onload(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onloadGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onload(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1104), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFileReader_onabort(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onabortGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onabort(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 64), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFileReader_onerror(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onerrorGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFileReader_onloadend(uint64_t a1, WebCore *a2, WebCore::JSFileReader *a3)
{
  return WebCore::jsFileReader_onloadendGetter(a2, a2, a3);
}

BOOL WebCore::setJSFileReader_onloadend(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFileReader::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFileReader::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1128), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FileReader::~FileReader((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSFileReader::subspaceForImpl(WebCore::JSFileReader *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4104);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 4104);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 4104);
    *(_QWORD *)(v9 + 4104) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSFileReader::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSFileReaderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

WebCore::FileReader **WebCore::JSFileReaderOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WebCore::FileReader *v7;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (void *)(v3 - 32);
  ++*(_DWORD *)(v3 - 8);
  v7 = (WebCore::FileReader *)(v3 - 32);
  if (*(_DWORD *)(a3 + 48))
  {
    JSC::weakRemove<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,WebCore::JSBlob *>((uint64_t *)(a3 + 32), (uint64_t)v4);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  return WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v7, v4);
}

uint64_t WebCore::createWrapper<WebCore::FileReader,WebCore::FileReader>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSFileReader>(*(WebCore::JSFileReader **)(a1 + 56), (JSC::VM *)a1);
  v6 = WebCore::JSFileReader::create(v5, (JSC::VM *)a1, a2);
  WebCore::cacheWrapper<WebCore::FileReader,WebCore::JSFileReader>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::wrap<WebCore::FileReader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::FileReader *v18;

  v3 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(_QWORD *)(v10 + 16 * v15);
      if (v16 == a3)
      {
LABEL_15:
        v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(_QWORD *)(v10 + 16 * v15);
          ++v17;
          if (v16 == a3)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 40);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)(a3 + 24);
  v18 = (WebCore::FileReader *)a3;
  v5 = WebCore::toJSNewlyCreated(a2, (uint64_t *)&v18);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 1)
    {
      WebCore::FileReader::~FileReader(v18, v6);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v18 + 6);
    }
  }
  return v5;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  JSC::JSCell *v43;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v45;
  JSC::JSGlobalObject *v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t FunctionRealm;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char **v56;
  int v57;
  JSC::JSObject *v58;
  unint64_t v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::JSCell *v62;
  uint64_t v63;
  unint64_t SubclassStructure;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD *v69;
  WTF *v70;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (WTF *)WTF::fastMalloc((WTF *)4);
  *(_DWORD *)v5 = 1;
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v6 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::JSFileReaderSync::s_info + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileReaderSync::s_info + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::JSFileReaderSync::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_8;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::JSFileReaderSync::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(uint64_t **)(v6 + 56);
  Structure = WebCore::JSFileReaderSyncPrototype::createStructure(v16, v6, *(JSC::JSCell **)(v6 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSFileReaderSyncPrototype::create((WebCore::JSFileReaderSyncPrototype *)v16, Structure, v18, v19);
  v21 = WebCore::JSFileReaderSync::createStructure(v16, v6, v20);
  v15 = WebCore::cacheDOMStructure((JSCell *)v6, v21, (uint64_t)&WebCore::JSFileReaderSync::s_info);
LABEL_8:
  v22 = *(_QWORD *)(v6 + 56);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 4112);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  v27 = __ldaxr((unsigned __int8 *)v26);
  v67 = v3;
  if (v27)
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 4112))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v70, "IsoSpace T");
    v69 = 0;
    MEMORY[0x19AEA3204](v29, &v70, v22 + 192, v22 + 1872, 32, 8, &v69);
    v31 = (uint64_t)v69;
    v69 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v70;
    v70 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 4112);
    *(_QWORD *)(v28 + 4112) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 4112);
  *(_QWORD *)(v24 + 4112) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  v3 = v67;
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v66);
    v25[5] = SlowCase + (int)v66;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v15);
  *(_QWORD *)(SlowCase + 24) = v5;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v39 = *(_QWORD *)(v6 + 3320);
  if ((byte_1EE3355B0 & 1) == 0)
  {
    qword_1EE3355A8 = (uint64_t)&off_1E327C740;
    byte_1EE3355B0 = 1;
  }
  v70 = v5;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3355A8;
  Allocator[2] = v39;
  v69 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v70, (uint64_t *)&v69);
  if (v69)
    v69[1] = 3;
  v43 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v43 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v43);
    if (Object)
    {
      v46 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v47 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v45);
        if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
        {
          v50 = *(_QWORD *)(FunctionRealm + 3296);
          if (v50)
          {
            v51 = *(_DWORD *)(v50 - 8);
            v52 = ((unint64_t)&WebCore::JSFileReaderSync::s_info
                 + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileReaderSync::s_info
                                                                          + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) >> 22);
            v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
            v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
            v55 = v51 & ((v54 >> 31) ^ v54);
            v56 = *(char ***)(v50 + 16 * v55);
            if (v56 == &WebCore::JSFileReaderSync::s_info)
            {
LABEL_52:
              v58 = *(JSC::JSObject **)(v50 + 16 * v55 + 8);
              if (v58)
              {
LABEL_54:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v46, v58, v48);
                if (!*((_DWORD *)v47 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) == 0)
                  JSC::JSObject::setStructure((JSCell *)SlowCase, v47, SubclassStructure);
                goto LABEL_56;
              }
            }
            else
            {
              v57 = 1;
              while (v56)
              {
                v55 = ((_DWORD)v55 + v57) & v51;
                v56 = *(char ***)(v50 + 16 * v55);
                ++v57;
                if (v56 == &WebCore::JSFileReaderSync::s_info)
                  goto LABEL_52;
              }
            }
          }
          v59 = WebCore::JSFileReaderSyncPrototype::createStructure((uint64_t *)v47, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(v59 + 16) |= 0x80000u;
          v62 = (JSC::JSCell *)WebCore::JSFileReaderSyncPrototype::create(v47, v59, v60, v61);
          v63 = WebCore::JSFileReaderSync::createStructure((uint64_t *)v47, FunctionRealm, v62);
          v58 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v63, (uint64_t)&WebCore::JSFileReaderSync::s_info);
          goto LABEL_54;
        }
      }
    }
  }
LABEL_56:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return SlowCase;
}

WTF *WebCore::JSFileReaderSync::destroy(WebCore::JSFileReaderSync *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSFileReaderSync::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileReaderSyncPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileReaderSyncPrototype::create(WebCore::JSFileReaderSyncPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSFileReaderSync::s_info, &WebCore::JSFileReaderSyncPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>,(WebCore::DOMConstructorID)504>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4032);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFileReaderSync::s_info + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileReaderSync::s_info + ~((_QWORD)&WebCore::JSFileReaderSync::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFileReaderSync::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFileReaderSync::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFileReaderSyncPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFileReaderSyncPrototype::create((WebCore::JSFileReaderSyncPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFileReaderSync::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFileReaderSync::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4032) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileReaderSyncConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileReaderSyncPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFileReaderSync>,(WebCore::DOMConstructorID)504>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileReaderSyncOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSFileReaderSyncOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::FileSystemDirectoryEntry::Flags>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  __int16 v5;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  __int16 v15;
  _BOOL4 v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  WTF::StringImpl *v28;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_35;
    }
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v10 = JSC::JSObject::get(v8, a2, (unint64_t)v28);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v9);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_35;
    }
    if (v10 == 10)
    {
      v5 = 0;
      goto LABEL_16;
    }
    v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (v10 >= 0xFFFE000000000000)
    {
      v18 = (_DWORD)v10 == 0;
    }
    else
    {
      *(_QWORD *)&v12 = v10 - 0x2000000000000;
      if (v10 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v5 = v12 > 0.0 || v12 < 0.0;
LABEL_15:
        if (*((_DWORD *)v11 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
          if ((result & 1) != 0)
            goto LABEL_35;
        }
LABEL_16:
        WTF::AtomStringImpl::addLiteral();
        result = JSC::JSObject::get(v8, a2, (unint64_t)v28);
        v14 = result;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            result = WTF::StringImpl::destroy(v28, v13);
          else
            *(_DWORD *)v28 -= 2;
        }
        if (*((_DWORD *)v4 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
          if ((result & 1) != 0)
            goto LABEL_35;
        }
        if (v14 == 10)
          goto LABEL_21;
        result = *((_QWORD *)a2 + 7);
        if (v14 >= 0xFFFE000000000000)
        {
          v23 = (_DWORD)v14 == 0;
        }
        else
        {
          if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v16 = COERCE_DOUBLE(v14 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v14 - 0x2000000000000) < 0.0;
LABEL_26:
            if (!*(_DWORD *)(result + 80)
              || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result), (result & 1) == 0))
            {
              if (v16)
                v15 = 256;
              else
                v15 = 0;
              goto LABEL_30;
            }
LABEL_35:
            v17 = 1;
            goto LABEL_31;
          }
          if ((v14 & 0xFFFE000000000002) != 0)
          {
            v16 = v14 == 7;
            goto LABEL_26;
          }
          v24 = *(unsigned __int8 *)(v14 + 5);
          if (v24 == 3)
          {
            v27 = *(_DWORD *)(v14 + 8);
          }
          else
          {
            if (v24 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v16 = 1;
                goto LABEL_26;
              }
              v23 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
              goto LABEL_77;
            }
            v25 = *(_QWORD *)(v14 + 8);
            if ((v25 & 1) != 0)
              v26 = (int *)(v14 + 16);
            else
              v26 = (int *)(v25 + 4);
            v27 = *v26;
          }
          v23 = v27 == 0;
        }
LABEL_77:
        v16 = !v23;
        goto LABEL_26;
      }
      if ((v10 & 0xFFFE000000000002) != 0)
      {
        v5 = v10 == 7;
        goto LABEL_15;
      }
      v19 = *(unsigned __int8 *)(v10 + 5);
      if (v19 == 3)
      {
        v22 = *(_DWORD *)(v10 + 8);
      }
      else
      {
        if (v19 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v5 = 1;
            goto LABEL_15;
          }
          v18 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
          goto LABEL_73;
        }
        v20 = *(_QWORD *)(v10 + 8);
        if ((v20 & 1) != 0)
          v21 = (int *)(v10 + 16);
        else
          v21 = (int *)(v20 + 4);
        v22 = *v21;
      }
      v18 = v22 == 0;
    }
LABEL_73:
    v5 = !v18;
    goto LABEL_15;
  }
  v5 = 0;
LABEL_21:
  v15 = 0;
LABEL_30:
  v17 = 0;
  *(_WORD *)v3 = v15 | v5;
LABEL_31:
  *(_DWORD *)(v3 + 4) = v17;
  return result;
}

_DWORD *WebCore::JSFileSystemEntry::destroy(WebCore::JSFileSystemEntry *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[8] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[8];
  }
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryEntry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFileSystemDirectoryEntry::createPrototype(WebCore::JSFileSystemDirectoryEntry *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFileSystemEntry::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFileSystemEntry::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSFileSystemEntryPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSFileSystemEntryPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSFileSystemEntry::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSFileSystemEntry::s_info);
  }
  v18 = WebCore::JSFileSystemDirectoryEntryPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSFileSystemDirectoryEntryPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSFileSystemDirectoryEntryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemDirectoryEntryPrototype::create(WebCore::JSFileSystemDirectoryEntryPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info, &WebCore::JSFileSystemDirectoryEntryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryEntry>,(WebCore::DOMConstructorID)85>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 680);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemEntry>,(WebCore::DOMConstructorID)87>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryEntry>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info
         + ~((_QWORD)&WebCore::JSFileSystemDirectoryEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info
                                                                            + ~((_QWORD)&WebCore::JSFileSystemDirectoryEntry::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFileSystemDirectoryEntry::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFileSystemDirectoryEntry::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSFileSystemDirectoryEntry::createPrototype((WebCore::JSFileSystemDirectoryEntry *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFileSystemDirectoryEntry::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemDirectoryEntry::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 680) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemDirectoryEntryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemDirectoryEntryPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryEntry>,(WebCore::DOMConstructorID)85>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileSystemDirectoryEntry::subspaceForImpl(WebCore::JSFileSystemDirectoryEntry *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 688);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 688))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 688);
    *(_QWORD *)(v8 + 688) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 688);
  *(_QWORD *)(v3 + 688) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFileSystemEntry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryEntryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryEntryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v4 + 1;
  v5 = result + 24;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 32) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(result + 32) = v4;
  return result;
}

_DWORD *WebCore::JSFileSystemHandle::destroy(WebCore::JSFileSystemHandle *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryHandle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFileSystemDirectoryHandle::createPrototype(WebCore::JSFileSystemDirectoryHandle *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFileSystemHandle::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFileSystemHandle::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSFileSystemHandlePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSFileSystemHandlePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSFileSystemHandle::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSFileSystemHandle::s_info);
  }
  v18 = WebCore::JSFileSystemDirectoryHandlePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSFileSystemDirectoryHandlePrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSFileSystemDirectoryHandlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemDirectoryHandlePrototype::create(WebCore::JSFileSystemDirectoryHandlePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info, (uint64_t)&WebCore::JSFileSystemDirectoryHandlePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2704);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryHandle>,(WebCore::DOMConstructorID)92>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 736);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemHandle>,(WebCore::DOMConstructorID)94>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryHandle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info
         + ~((_QWORD)&WebCore::JSFileSystemDirectoryHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info
                                                                             + ~((_QWORD)&WebCore::JSFileSystemDirectoryHandle::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFileSystemDirectoryHandle::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFileSystemDirectoryHandle::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSFileSystemDirectoryHandle::createPrototype((WebCore::JSFileSystemDirectoryHandle *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFileSystemDirectoryHandle::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemDirectoryHandle::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 736) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemDirectoryHandleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemDirectoryHandlePrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryHandle>,(WebCore::DOMConstructorID)92>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t result;

  v3 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(result, a2);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryHandle::subspaceForImpl(WebCore::JSFileSystemDirectoryHandle *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 752);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 752))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 752);
    *(_QWORD *)(v8 + 752) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 752);
  *(_QWORD *)(v3 + 752) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFileSystemHandle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryHandleOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSFileSystemDirectoryHandleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryReader::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 32) == 1)
    {
      if (*(_BYTE *)(v2 + 64))
      {
        v3 = *(WTF::StringImpl **)(v2 + 56);
        *(_QWORD *)(v2 + 56) = 0;
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, a2);
          else
            *(_DWORD *)v3 -= 2;
        }
      }
      v4 = *(_DWORD **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v4)
      {
        if (v4[8] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v4 + 16))(v4, a2);
        else
          --v4[8];
      }
      WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v2, a2);
      v6 = *(_QWORD *)(v2 + 24);
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 3;
        *(_QWORD *)(v2 + 24) = 0;
      }
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, v5);
    }
    else
    {
      --*(_DWORD *)(v2 + 32);
    }
  }
  return this;
}

uint64_t WebCore::JSFileSystemDirectoryReader::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryReaderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemDirectoryReaderPrototype::create(WebCore::JSFileSystemDirectoryReaderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSFileSystemDirectoryReader::s_info, (uint64_t)&WebCore::JSFileSystemDirectoryReaderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryReader>,(WebCore::DOMConstructorID)86>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 688);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryReader>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFileSystemDirectoryReader::s_info
         + ~((_QWORD)&WebCore::JSFileSystemDirectoryReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryReader::s_info
                                                                             + ~((_QWORD)&WebCore::JSFileSystemDirectoryReader::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFileSystemDirectoryReader::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFileSystemDirectoryReader::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFileSystemDirectoryReaderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFileSystemDirectoryReaderPrototype::create((WebCore::JSFileSystemDirectoryReaderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFileSystemDirectoryReader::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFileSystemDirectoryReader::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 688) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemDirectoryReaderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemDirectoryReaderPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemDirectoryReader>,(WebCore::DOMConstructorID)86>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileSystemDirectoryReaderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSFileSystemDirectoryReaderOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v4 + 1;
  if (v3)
    v5 = v3 + 24;
  else
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(_QWORD *)(v11 + 16 * v17);
      if (v18 != v3)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(_QWORD *)(v11 + 16 * v17);
          ++v19;
          if (v18 == v3)
            goto LABEL_24;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_24:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
        }
      }
    }
    v4 = *(_DWORD *)(v3 + 32) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(v3 + 32) = v4;
  }
  else
  {
    if (*(_BYTE *)(v3 + 64))
    {
      v6 = *(WTF::StringImpl **)(v3 + 56);
      *(_QWORD *)(v3 + 56) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    v7 = *(_DWORD **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v7)
    {
      if (v7[8] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
      else
        --v7[8];
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)v3, a2);
    v9 = *(_QWORD *)(v3 + 24);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v3 + 24) = 0;
    }
    bmalloc::api::isoDeallocate((bmalloc::api *)v3, v8);
  }
}

void WebCore::JSFileSystemEntriesCallback::~JSFileSystemEntriesCallback(WebCore::JSFileSystemEntriesCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSFileSystemEntriesCallback::handleEvent(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  uint64_t *v14;
  uint64_t v15;
  JSC::VM *v16;
  objc_class *v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Structure *v23;
  uint64_t *v24;
  JSValue v26;
  _QWORD *v27;
  _QWORD *v28;
  char v29[8];
  uint64_t v30;
  WTF *v31;
  _OWORD v32[4];
  uint64_t v33;
  _BYTE v34[8];
  WTF *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t *v40[11];

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::VM **)v4;
  MEMORY[0x19AEA3294](v34, *((_QWORD *)v5 + 7));
  v29[0] = 0;
  v30 = 0x800000000;
  v31 = (WTF *)((char *)v32 + 8);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v6 = *((_QWORD *)v5 + 7);
  v40[9] = (uint64_t *)v6;
  LOBYTE(v37) = 0;
  v38 = 0x800000000;
  memset(v40, 0, 72);
  v39 = (WTF *)&v40[1];
  v7 = a2[3];
  if (v7 >= 9)
  {
    LOBYTE(v37) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v38) == 1;
    v7 = a2[3];
    if (v7)
    {
LABEL_7:
      v8 = *(uint64_t **)a2;
      v9 = 8 * v7;
      do
      {
        v10 = (objc_class *)WebCore::wrap<WebCore::FileSystemEntry>((uint64_t)v5, v5, *v8);
        if (*(_DWORD *)(v6 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
            goto LABEL_59;
        }
        v11 = v38;
        if ((_DWORD)v38 != HIDWORD(v38) && (v39 != (WTF *)&v40[1] ? (v12 = v39 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v39 + v38) = v10;
          LODWORD(v38) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v38, v13) == 1)
            LOBYTE(v37) = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  if ((_BYTE)v37)
  {
    JSC::throwOutOfMemoryError();
LABEL_59:
    v17 = 0;
    goto LABEL_27;
  }
  v35 = v39;
  v36 = v38;
  v16 = (JSC::VM *)*((_QWORD *)v5 + 7);
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    goto LABEL_59;
  v17 = (objc_class *)JSC::constructArray();
LABEL_27:
  v18 = v40[0];
  if (v40[0])
  {
    v35 = (WTF *)&v38;
    v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v40[0], (uint64_t *)&v35);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v27);
  }
  if (v39 != (WTF *)&v40[1] && v39)
    WTF::fastFree(v39, v14);
  v19 = v30;
  if ((_DWORD)v30 == HIDWORD(v30) || v31 != (WTF *)((char *)v32 + 8) && v31)
  {
    v26.super.isa = v17;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v30, v26) == 1)
      v29[0] = 1;
  }
  else
  {
    *((_QWORD *)v31 + v30) = v17;
    LODWORD(v30) = v19 + 1;
  }
  v37 = 0;
  v20 = *(uint64_t **)(a1 + 24);
  v21 = *v20;
  if (*v20
    && (*(_BYTE *)(v21 + 8) & 3) == 0
    && *(_QWORD *)v21
    && ((v22 = v20[2]) == 0 || (*(_BYTE *)(v22 + 8) & 3) != 0 ? (v23 = 0) : (v23 = *(JSC::Structure **)v22),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v21, v23, 10, (uint64_t)v29, 0, 0, (uint64_t *)&v37), (v14 = v37) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v37, 0, 0, 0);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  v24 = *(uint64_t **)&v32[0];
  if (*(_QWORD *)&v32[0])
  {
    v37 = &v30;
    v28 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v32[0], (uint64_t *)&v37);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v24, v28);
  }
  if (v31 != (WTF *)((char *)v32 + 8) && v31)
    WTF::fastFree(v31, v14);
  MEMORY[0x19AEA32A0](v34);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v15;
}

uint64_t WebCore::JSFileSystemEntryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemEntryPrototype::create(WebCore::JSFileSystemEntryPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSFileSystemEntry::s_info, &WebCore::JSFileSystemEntryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemEntry>,(WebCore::DOMConstructorID)87>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 696);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemEntry>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFileSystemEntry::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFileSystemEntry::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFileSystemEntryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSFileSystemEntryPrototype::create((WebCore::JSFileSystemEntryPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSFileSystemEntry::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSFileSystemEntry::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 696) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemEntryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemEntryPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemEntry>,(WebCore::DOMConstructorID)87>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFileSystemEntry_isFile(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 72))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsFileSystemEntry_isDirectory(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 80))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsFileSystemEntry_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsFileSystemEntry_fullPath(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsFileSystemEntry_filesystem(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::DOMFileSystem>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 40));
}

WebCore::JSFileSystemEntryCallback *WebCore::JSFileSystemEntryCallback::JSFileSystemEntryCallback(WebCore::JSFileSystemEntryCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E3277E00;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSFileSystemEntryCallback::~JSFileSystemEntryCallback(WebCore::JSFileSystemEntryCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSFileSystemEntryCallback::handleEvent(uint64_t **this, WebCore::FileSystemEntry *a2)
{
  uint64_t v4;
  JSC::VM *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::VM **)v4;
  MEMORY[0x19AEA3294](v20, *((_QWORD *)v5 + 7));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::FileSystemEntry>((uint64_t)v5, v5, (uint64_t)a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

uint64_t WebCore::JSFileSystemFileEntry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSFileSystemEntry::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFileSystemFileEntry::createPrototype(WebCore::JSFileSystemFileEntry *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemEntry::s_info + ~((_QWORD)&WebCore::JSFileSystemEntry::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFileSystemEntry::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFileSystemEntry::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSFileSystemEntryPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSFileSystemEntryPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSFileSystemEntry::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSFileSystemEntry::s_info);
  }
  v18 = WebCore::JSFileSystemFileEntryPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSFileSystemFileEntryPrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSFileSystemFileEntryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemFileEntryPrototype::create(WebCore::JSFileSystemFileEntryPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSFileSystemFileEntry::s_info, (uint64_t)&WebCore::JSFileSystemFileEntryPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileEntry>,(WebCore::DOMConstructorID)88>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 704);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemEntry>,(WebCore::DOMConstructorID)87>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileEntry>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFileSystemFileEntry::s_info
         + ~((_QWORD)&WebCore::JSFileSystemFileEntry::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemFileEntry::s_info
                                                                       + ~((_QWORD)&WebCore::JSFileSystemFileEntry::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFileSystemFileEntry::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFileSystemFileEntry::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSFileSystemFileEntry::createPrototype((WebCore::JSFileSystemFileEntry *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFileSystemFileEntry::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemFileEntry::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 704) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemFileEntryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemFileEntryPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileEntry>,(WebCore::DOMConstructorID)88>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileSystemFileEntry::subspaceForImpl(WebCore::JSFileSystemFileEntry *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 712);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 712))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 712);
    *(_QWORD *)(v8 + 712) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 712);
  *(_QWORD *)(v3 + 712) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFileSystemFileEntryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSFileSystemFileEntryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = v4 + 1;
  v5 = result + 24;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 32) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(result + 32) = v4;
  return result;
}

uint64_t WebCore::JSFileSystemFileHandle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSFileSystemHandle::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSFileSystemFileHandle::createPrototype(WebCore::JSFileSystemFileHandle *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::Structure *v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSFileSystemHandle::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSFileSystemHandle::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSFileSystemHandlePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSFileSystemHandlePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSFileSystemHandle::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSFileSystemHandle::s_info);
  }
  v18 = WebCore::JSFileSystemFileHandlePrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v18 + 16) |= 0x80000u;
  return WebCore::JSFileSystemFileHandlePrototype::create(this, a2, v18, v19);
}

uint64_t WebCore::JSFileSystemFileHandlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemFileHandlePrototype::create(WebCore::JSFileSystemFileHandlePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSFileSystemFileHandle::s_info, &WebCore::JSFileSystemFileHandlePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSWorkerGlobalScopeBase::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSWorkerGlobalScopeBase::s_info && v12 != 0);
  }
  if (!v11
    || (v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9),
        (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 432) & 0x100) == 0))
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v27[0];
    v17 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, v27);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v28 = 0;
  v29 = v24;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileHandle>,(WebCore::DOMConstructorID)93>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 744);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemHandle>,(WebCore::DOMConstructorID)94>(a1, a2);
  v7 = v6;
  LODWORD(v33) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileHandle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v32);
    v10[2848] = v2 + (int)v32;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v33);
  v14 = v33;
  v33 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v33);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFileSystemFileHandle::s_info
         + ~((_QWORD)&WebCore::JSFileSystemFileHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemFileHandle::s_info
                                                                        + ~((_QWORD)&WebCore::JSFileSystemFileHandle::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFileSystemFileHandle::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFileSystemFileHandle::s_info)
          goto LABEL_20;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSFileSystemFileHandle::createPrototype((WebCore::JSFileSystemFileHandle *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFileSystemFileHandle::createStructure((uint64_t *)a1, a2, Prototype);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFileSystemFileHandle::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v26 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 744) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemFileHandleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemFileHandlePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemFileHandle>,(WebCore::DOMConstructorID)93>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileSystemFileHandle::subspaceForImpl(WebCore::JSFileSystemFileHandle *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 768);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 768))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 768);
    *(_QWORD *)(v8 + 768) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 768);
  *(_QWORD *)(v3 + 768) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSFileSystemFileHandleOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSFileSystemFileHandleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

uint64_t WebCore::JSFileSystemHandlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemHandlePrototype::create(WebCore::JSFileSystemHandlePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSFileSystemHandle::s_info, &WebCore::JSFileSystemHandlePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemHandle>,(WebCore::DOMConstructorID)94>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 752);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemHandle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemHandle::s_info + ~((_QWORD)&WebCore::JSFileSystemHandle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFileSystemHandle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFileSystemHandle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFileSystemHandlePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSFileSystemHandlePrototype::create((WebCore::JSFileSystemHandlePrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSFileSystemHandle::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSFileSystemHandle::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 752) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemHandleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemHandlePrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemHandle>,(WebCore::DOMConstructorID)94>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFileSystemHandle_kind(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 28);
  if ((_MergedGlobals_530[0] & 1) == 0)
  {
    qword_1EE3356C8 = (uint64_t)&_MergedGlobals_15;
    _MergedGlobals_15 += 2;
    dword_1ECE77A00 += 2;
    qword_1EE3356D0 = (uint64_t)&dword_1ECE77A00;
    _MergedGlobals_530[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_530[8 * v4 + 328];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsFileSystemHandle_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::convertDictionary<WebCore::FileSystemSyncAccessHandle::FilesystemReadWriteOptions>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  _BYTE v15[7];
  JSC::VM *v16;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v16 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    v10 = 0;
    v11 = 0;
    v12 = 0;
LABEL_12:
    *(_QWORD *)(v3 + 8) = v12 | v11;
    *(_BYTE *)(v3 + 16) = v10;
    *(_DWORD *)(v3 + 17) = *(_DWORD *)v15;
    *(_QWORD *)(v3 + 20) = *(unsigned int *)&v15[3];
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
  }
  else
  {
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v7, a2, (unint64_t)v13);
    v9 = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        result = WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((_DWORD)result)
        goto LABEL_15;
    }
    if (v9 == 10)
      goto LABEL_9;
    result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(a2, v9, (uint64_t)&v13);
    if (!v14)
    {
      v12 = (unint64_t)v13 & 0xFFFFFFFFFFFFFF00;
      v11 = v13;
      v10 = 1;
      goto LABEL_12;
    }
  }
LABEL_15:
  *(_DWORD *)(v3 + 24) = 1;
  return result;
}

_DWORD *WebCore::JSFileSystemSyncAccessHandle::destroy(WebCore::JSFileSystemSyncAccessHandle *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSFileSystemSyncAccessHandle::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFileSystemSyncAccessHandlePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFileSystemSyncAccessHandlePrototype::create(WebCore::JSFileSystemSyncAccessHandlePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info, &WebCore::JSFileSystemSyncAccessHandlePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemSyncAccessHandle>,(WebCore::DOMConstructorID)95>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 760);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemSyncAccessHandle>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info
         + ~((_QWORD)&WebCore::JSFileSystemSyncAccessHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info
                                                                              + ~((_QWORD)&WebCore::JSFileSystemSyncAccessHandle::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFileSystemSyncAccessHandle::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFileSystemSyncAccessHandle::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFileSystemSyncAccessHandlePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFileSystemSyncAccessHandlePrototype::create((WebCore::JSFileSystemSyncAccessHandlePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFileSystemSyncAccessHandle::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 760) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFileSystemSyncAccessHandleConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFileSystemSyncAccessHandlePrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileSystemSyncAccessHandle>,(WebCore::DOMConstructorID)95>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFileSystemSyncAccessHandleOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSFileSystemSyncAccessHandleOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

unint64_t WebCore::wrap<WebCore::FileSystemSyncAccessHandle>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3356C58)
  {
    __break(0xC471u);
    JUMPOUT(0x194B0BF7CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info
         + ~((_QWORD)&WebCore::JSFileSystemSyncAccessHandle::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info
                                                                              + ~((_QWORD)&WebCore::JSFileSystemSyncAccessHandle::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSFileSystemSyncAccessHandle::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSFileSystemSyncAccessHandle::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSFileSystemSyncAccessHandlePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFileSystemSyncAccessHandlePrototype::create((WebCore::JSFileSystemSyncAccessHandlePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSFileSystemSyncAccessHandle::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFileSystemSyncAccessHandle::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 784);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 784))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 784);
    *(_QWORD *)(v36 + 784) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 784);
  *(_QWORD *)(v32 + 784) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3355D0 & 1) == 0)
  {
    qword_1EE3355C8 = (uint64_t)&off_1E327C7A0;
    byte_1EE3355D0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3355C8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::FillLightMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillLightMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4638 = &WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4640 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FillLightMode)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::FillLightMode)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::FillLightMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  int v14;
  int v15;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "auto" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 97 || *(_WORD *)(v6 + 1) != 29813 || *((_WORD *)v6 + 1) != 28532)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 97)
        goto LABEL_16;
      v14 = *(_DWORD *)(v6 + 2);
      v15 = *((_DWORD *)v6 + 1);
      if (v14 != 7602293 || v15 != 7274612)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v6 == "auto" && v7 == 4)
  {
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::FillLightMode>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 != "flash" && v7 == 5)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 102 || *(_WORD *)(v6 + 1) != 24940 || *(_WORD *)(v6 + 3) != 26739)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 102 || *(_QWORD *)(v6 + 2) != 0x6800730061006CLL)
    {
      goto LABEL_16;
    }
  }
  else if (v6 != "flash" || v7 != 5)
  {
    if (v6 == "off" || v7 != 3)
    {
      if (v7 == 3 && v6 == "off")
        goto LABEL_57;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 111 && *(_WORD *)(v6 + 1) == 26214)
      {
LABEL_57:
        v13 = &off_1E3278870;
        goto LABEL_42;
      }
    }
    else if (*(_WORD *)v6 == 111 && *(_DWORD *)(v6 + 2) == 6684774)
    {
      goto LABEL_57;
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_43;
  }
  v13 = &off_1E3278858;
LABEL_42:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::convertEnumerationToJS<WebCore::FillMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::FillMode)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillMode)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillMode)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillMode)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::FillMode)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FillMode)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4658 = &WebCore::convertEnumerationToString(WebCore::FillMode)::$_1::operator() const(void)::impl;
    qword_1EE2F4660 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FillMode)::$_2::operator() const(void)::impl;
    unk_1EE2F4668 = &WebCore::convertEnumerationToString(WebCore::FillMode)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::FillMode)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F4670 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::FillMode)::$_4::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::FillMode)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::FillMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  char **v11;
  int v14;
  int v15;
  uint16x8_t v19;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
    v4 = v21;
    if (v21)
      goto LABEL_7;
LABEL_58:
    v14 = 0;
    v15 = 0;
    return v14 | (v15 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_58;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  v8 = v6 != 4;
  if (v5 == "auto" || v6 != 4)
  {
    if (v5 == "auto" && v6 == 4)
      goto LABEL_68;
    if (v5 == "backwards" || v6 != 9)
    {
      if (v5 != "backwards")
      {
        v9 = *(_DWORD *)(v4 + 4);
        goto LABEL_14;
      }
      v9 = *(_DWORD *)(v4 + 4);
      if (v6 != 9)
        goto LABEL_14;
LABEL_41:
      v11 = &off_1E32788A0;
      goto LABEL_69;
    }
    if ((_DWORD)v7)
    {
      if (*v5 == 98 && *(_DWORD *)(v5 + 1) == 2003526497 && *(_DWORD *)(v5 + 5) == 1935962721)
        goto LABEL_41;
    }
    else if (*(_WORD *)v5 == 98)
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF890);
      v19.i16[0] = vminvq_u16(v19);
      if (v19.i32[0])
        goto LABEL_41;
    }
    v9 = 9;
    goto LABEL_14;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 != 97)
      goto LABEL_13;
    if (*(_DWORD *)(v5 + 2) != 7602293 || *((_DWORD *)v5 + 1) != 7274612)
      goto LABEL_13;
LABEL_68:
    v11 = &WebCore::parseEnumerationFromString<WebCore::FillMode>(WTF::String const&)::mappings;
    goto LABEL_69;
  }
  if (*v5 == 97 && *(_WORD *)(v5 + 1) == 29813 && *((_WORD *)v5 + 1) == 28532)
    goto LABEL_68;
LABEL_13:
  v8 = 0;
  v9 = 4;
LABEL_14:
  v10 = v7 << 32;
  if (v5 == "both" || v8)
  {
    if (v5 == "both" && v6 == 4)
      goto LABEL_54;
  }
  else
  {
    if (!v9)
      goto LABEL_54;
    if ((_DWORD)v7)
    {
      if (*v5 != 98 || *(_WORD *)(v5 + 1) != 29807 || *((_WORD *)v5 + 1) != 26740)
        goto LABEL_21;
LABEL_54:
      v11 = &off_1E32788B8;
      goto LABEL_69;
    }
    if (*(_WORD *)v5 != 98)
    {
      v10 = 0;
      goto LABEL_21;
    }
    v10 = 0;
    if (*(_DWORD *)(v5 + 2) == 7602287 && *((_DWORD *)v5 + 1) == 6815860)
      goto LABEL_54;
  }
LABEL_21:
  if (v5 == "forwards" || v9 != 8)
  {
    if (v5 == "forwards" && v9 == 8)
      goto LABEL_27;
  }
  else if (v10)
  {
    if (*v5 == 102 && *(_DWORD *)(v5 + 1) == 1635218031 && *((_DWORD *)v5 + 1) == 1935962721)
    {
LABEL_27:
      v11 = &off_1E32788D0;
LABEL_69:
      v14 = *((unsigned __int8 *)v11 + 16);
      v15 = 1;
      goto LABEL_70;
    }
    v9 = 8;
    v10 = 1;
  }
  else if (*(_WORD *)v5 == 102)
  {
    v10 = 0;
    v9 = 8;
    if (*(_QWORD *)(v5 + 2) == 0x6100770072006FLL && *((_QWORD *)v5 + 1) == 0x73006400720061)
      goto LABEL_27;
  }
  else
  {
    v10 = 0;
    v9 = 8;
  }
  if (v5 == "none")
    v8 = 1;
  if (v8)
  {
    if (v6 == 4 && v5 == "none")
      goto LABEL_51;
  }
  else
  {
    if (!v9)
    {
LABEL_51:
      v11 = &off_1E32788E8;
      goto LABEL_69;
    }
    if (v10)
    {
      if (*v5 == 110 && *(_WORD *)(v5 + 1) == 28271 && *((_WORD *)v5 + 1) == 25966)
        goto LABEL_51;
    }
    else if (*(_WORD *)v5 == 110 && *((_DWORD *)v5 + 1) == 6619246 && *(_DWORD *)(v5 + 2) == 7209071)
    {
      goto LABEL_51;
    }
  }
  v14 = 0;
  v15 = 0;
LABEL_70:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14 | (v15 << 8);
}

unint64_t WebCore::convertDictionary<WebCore::FlacEncoderConfig>@<X0>(JSC::JSCell *this@<X1>, unint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  WTF::StringImpl *v5;
  JSC::JSGlobalObject *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v6 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_24;
    }
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v10 = JSC::JSObject::get(v8, v6, v16);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v16, v9);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*((_DWORD *)v4 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      if ((result & 1) != 0)
        goto LABEL_24;
    }
    if (v10 == 10)
    {
      v5 = 0;
    }
    else
    {
      result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v6, v10, &v16);
      v5 = (WTF::StringImpl *)v16;
      if (HIDWORD(v16))
        goto LABEL_24;
    }
    WTF::AtomStringImpl::addLiteral();
    v11 = (WTF::StringImpl *)v16;
    result = JSC::JSObject::get(v8, v6, v16);
    v13 = result;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        result = WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
    {
      if (v13 == 10)
        goto LABEL_17;
      result = (unint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(v6, v13, &v16);
      v14 = v16;
      if (!HIDWORD(v16))
        goto LABEL_19;
    }
LABEL_24:
    v15 = 1;
    goto LABEL_20;
  }
  v5 = 0;
LABEL_17:
  v14 = 5;
LABEL_19:
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v14;
LABEL_20:
  *(_DWORD *)(a3 + 16) = v15;
  return result;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if ((int)*a3 < 0)
    v9 = COERCE__INT64((double)*a3) + 0x2000000000000;
  else
    v9 = *a3 | 0xFFFE000000000000;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = v17;
  v17 = 0;
  v18 = v7;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v10, v9, 0, (uint64_t)&v17);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
  v12 = a3[1];
  v13 = (int)v12 < 0
      ? COERCE__INT64((double)v12) + 0x2000000000000
      : a3[1] | 0xFFFE000000000000;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v17;
  v17 = 0;
  v18 = v7;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v14, v13, 0, (uint64_t)&v17);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v7;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if (*a3)
  {
    v9 = *(_QWORD *)(*a3 + 24);
    if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
      v10 = 0;
    else
      v10 = *(_QWORD *)v9;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v11 = v19;
    v19 = 0;
    v20 = v7;
    v21 = -1;
    v22 = 0x1000000;
    v23 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v11, v10, 0, (uint64_t)&v19);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v13 = a3[1];
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 24);
    if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
      v15 = 0;
    else
      v15 = *(_QWORD *)v14;
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v16 = v19;
    v19 = 0;
    v20 = v7;
    v21 = -1;
    v22 = 0x1000000;
    v23 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v16, v15, 0, (uint64_t)&v19);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return v7;
}

{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v6 = 8 * *(unsigned __int8 *)(v5 + 14);
  v7 = JSC::allocateCell<JSC::JSFinalObject>(v4, v6 + 16);
  v8 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)v7 = v5 >> 4;
  *(_DWORD *)(v7 + 4) = v8;
  *(_QWORD *)(v7 + 8) = 0;
  bzero((void *)(v7 + 16), v6);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  if ((int)*a3 < 0)
    v9 = COERCE__INT64((double)*a3) + 0x2000000000000;
  else
    v9 = *a3 | 0xFFFE000000000000;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = v17;
  v17 = 0;
  v18 = v7;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v10, v9, 0, (uint64_t)&v17);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v11);
    else
      *(_DWORD *)v10 -= 2;
  }
  v12 = a3[1];
  v13 = (int)v12 < 0
      ? COERCE__INT64((double)v12) + 0x2000000000000
      : a3[1] | 0xFFFE000000000000;
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v14 = v17;
  v17 = 0;
  v18 = v7;
  v19 = -1;
  v20 = 0x1000000;
  v21 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v7, (JSC::VM *)v4, (unint64_t)v14, v13, 0, (uint64_t)&v17);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v7;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFocusEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  uint64_t v6;
  int v7;
  JSC::JSCell *v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  unint64_t v13;
  WTF *v14;
  uint64_t Object;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  WTF *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  WebCore::JSDOMGlobalObject *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  JSCell *v53;
  JSC::JSCell *v54;
  JSC::JSGlobalObject *v55;
  JSC::JSObject *v56;
  JSC::JSGlobalObject *v57;
  WebCore::JSFocusEvent *v58;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v60;
  JSC::Structure *v61;
  unint64_t SubclassStructure;
  _DWORD *v63;
  uint64_t *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  JSValue v86;
  unint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  JSC::VM *v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  WTF *v108;
  int v109;
  uint64_t v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  uint64_t v114;
  unint64_t v115;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v86.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v86);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v112);
  v7 = v113;
  if (!v113)
  {
    v103 = v4;
    v104 = v6;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) < 0xFFFFFFFFFFFFFFFELL)
    {
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = *((_QWORD *)a1 + 7);
      v114 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        LODWORD(v13) = 0;
        v14 = 0;
LABEL_61:
        v9 = 0;
        goto LABEL_62;
      }
      if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_185;
      }
      v2 = Object;
      WTF::AtomStringImpl::addLiteral();
      v16 = (WTF::StringImpl *)v115;
      v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v17);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (*(_DWORD *)(v9 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
      {
LABEL_185:
        v111 = 1;
LABEL_121:
        v53 = 0;
        v38 = 1;
LABEL_96:
        ((void (*)(unint64_t *, BOOL *))off_1E327D700[v38])(&v115, &v105);
LABEL_97:
        v7 = v113;
        goto LABEL_98;
      }
      if (v13 == 10)
      {
        v12 = 0;
        goto LABEL_20;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 >= 0xFFFE000000000000)
        goto LABEL_228;
      *(_QWORD *)&v19 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v19 <= 0.0)
        {
          v12 = v19 < 0.0;
          goto LABEL_19;
        }
      }
      else
      {
        if ((v13 & 0xFFFE000000000002) != 0)
        {
          v12 = v13 == 7;
          goto LABEL_19;
        }
        v89 = *(unsigned __int8 *)(v13 + 5);
        if (v89 == 3)
        {
          v92 = *(_DWORD *)(v13 + 8);
LABEL_256:
          v88 = v92 == 0;
          goto LABEL_268;
        }
        if (v89 == 2)
        {
          v90 = *(_QWORD *)(v13 + 8);
          if ((v90 & 1) != 0)
            v91 = (int *)(v13 + 16);
          else
            v91 = (int *)(v90 + 4);
          v92 = *v91;
          goto LABEL_256;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_268;
        }
      }
      v12 = 1;
      goto LABEL_19;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    LODWORD(v13) = 0;
    v14 = 0;
    v9 = 0;
    v114 = *((_QWORD *)a1 + 7);
LABEL_62:
    v38 = 0;
    v105 = v12;
    v106 = v11;
    v107 = v10;
    v108 = v14;
    v109 = v13;
    v110 = v9;
LABEL_63:
    v111 = v38;
    if (v38)
    {
LABEL_173:
      v53 = 0;
      if (v38 != -1)
        goto LABEL_96;
      goto LABEL_97;
    }
    while (1)
    {
      if (!v113)
      {
        v39 = v112;
        v112 = 0;
        v40 = v105;
        v41 = v106;
        v42 = v107;
        v43 = v108;
        v44 = v109;
        v45 = v110;
        v108 = 0;
        v110 = 0;
        v46 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v46);
        *(_QWORD *)(v46 + 8) = 0;
        if (v40)
          v50 = 2162690;
        else
          v50 = 2162688;
        v51 = v50 | (v39 != 0) | (4 * v41) | (8 * v42) | *(_DWORD *)(v46 + 20) & 0xFFC00000;
        *(_DWORD *)(v46 + 16) = 1;
        *(_DWORD *)(v46 + 20) = v51;
        if (v39)
        {
          *(_DWORD *)v39 += 2;
          v51 = *(_DWORD *)(v46 + 20);
        }
        *(_QWORD *)(v46 + 24) = v39;
        *(_QWORD *)(v46 + 32) = 0;
        *(_QWORD *)(v46 + 40) = 0;
        *(_QWORD *)(v46 + 48) = 0;
        *(_QWORD *)(v46 + 56) = v49;
        *(_QWORD *)(v46 + 64) = 0;
        *(_DWORD *)(v46 + 20) = v51 | 0x4000;
        if (v43)
          ++*(_DWORD *)v43;
        *(_QWORD *)(v46 + 72) = v43;
        *(_DWORD *)(v46 + 80) = v44;
        *(_QWORD *)v46 = off_1E33A4D68;
        if (v45)
        {
          v52 = *(_QWORD *)(v45 + 16);
          if ((v52 & 0x2000000000000) != 0)
          {
            *(_DWORD *)(v45 + 24) += 2;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 88))(v45);
            v52 = *(_QWORD *)(v45 + 16);
          }
          *(_QWORD *)(v46 + 88) = v45;
          v115 = v46;
          if ((v52 & 0x2000000000000) != 0)
          {
            if (*(_DWORD *)(v45 + 24) == 2)
            {
              if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v45, v47);
            }
            else
            {
              *(_DWORD *)(v45 + 24) -= 2;
            }
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 96))(v45);
          }
        }
        else
        {
          *(_QWORD *)(v46 + 88) = 0;
          v115 = v46;
        }
        if (v43)
        {
          if (*(_DWORD *)v43 != 1)
          {
            --*(_DWORD *)v43;
            goto LABEL_81;
          }
          v65 = (uint64_t *)*((_QWORD *)v43 + 2);
          *((_QWORD *)v43 + 2) = 0;
          if (v65)
          {
            if (*v65)
              WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v65, (WTF::StringImpl *)v47);
            WTF::fastFree((WTF *)v65, v47);
          }
          v66 = (unsigned int *)*((_QWORD *)v43 + 1);
          *((_QWORD *)v43 + 1) = 0;
          if (v66)
          {
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
            {
              atomic_store(1u, v66);
              WTF::fastFree((WTF *)v66, v47);
            }
          }
          WTF::fastFree(v43, v47);
          if (!v39)
          {
LABEL_84:
            if (*(void (***)(WebCore::FocusEvent *__hidden))v46 != off_1E33A4D68)
            {
              __break(0xC471u);
              JUMPOUT(0x194B0D758);
            }
            v53 = (JSCell *)WebCore::createWrapper<WebCore::FocusEvent,WebCore::FocusEvent>(*(JSC::VM **)(v104 + 40), (uint64_t *)&v115, v48);
            v54 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v54 & 0xFFFE000000000002) == 0)
            {
              v55 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v54);
              if (v55)
              {
                v57 = v55;
                if (v55 != *(JSC::JSGlobalObject **)(a2 + 24))
                {
                  v58 = (WebCore::JSFocusEvent *)*((_QWORD *)a1 + 7);
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v55, v56);
                  if (!*((_DWORD *)v58 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) == 0)
                  {
                    v60 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSFocusEvent>(v58, FunctionRealm);
                    SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v57, v60, v61);
                    if (!*((_DWORD *)v58 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v58) & 1) == 0)
                      JSC::JSObject::setStructure(v53, v58, SubclassStructure);
                  }
                }
              }
            }
            if (*((_DWORD *)v103 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v103) & 1) != 0)
              v53 = 0;
            v63 = (_DWORD *)v115;
            v115 = 0;
            if (v63)
            {
              if (v63[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
              else
                --v63[4];
            }
            v38 = 0;
            goto LABEL_96;
          }
        }
        else
        {
LABEL_81:
          if (!v39)
            goto LABEL_84;
        }
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v47);
        else
          *(_DWORD *)v39 -= 2;
        goto LABEL_84;
      }
      v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_228:
      v88 = (_DWORD)v13 == 0;
LABEL_268:
      v12 = !v88;
LABEL_19:
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
        goto LABEL_185;
LABEL_20:
      WTF::AtomStringImpl::addLiteral();
      v20 = (WTF::StringImpl *)v115;
      v22 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (*(_DWORD *)(v9 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_185;
      if (v22 == 10)
      {
        v11 = 0;
        goto LABEL_31;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v22 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v24 = v22 - 0x2000000000000;
      if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v22 & 0xFFFE000000000002) != 0)
        {
          v11 = v22 == 7;
          goto LABEL_30;
        }
        v94 = *(unsigned __int8 *)(v22 + 5);
        if (v94 == 3)
        {
          v97 = *(_DWORD *)(v22 + 8);
          goto LABEL_260;
        }
        if (v94 == 2)
        {
          v95 = *(_QWORD *)(v22 + 8);
          if ((v95 & 1) != 0)
            v96 = (int *)(v22 + 16);
          else
            v96 = (int *)(v95 + 4);
          v97 = *v96;
LABEL_260:
          v93 = v97 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_262:
            v11 = 1;
            goto LABEL_30;
          }
          v93 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_272:
        v11 = !v93;
        goto LABEL_30;
      }
      if (v24 > 0.0)
        goto LABEL_262;
      v11 = v24 < 0.0;
LABEL_30:
      if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
        goto LABEL_185;
LABEL_31:
      WTF::AtomStringImpl::addLiteral();
      v25 = (WTF::StringImpl *)v115;
      v27 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v26);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (*(_DWORD *)(v9 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_185;
      if (v27 == 10)
      {
        v10 = 0;
        goto LABEL_42;
      }
      v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v27 >= 0xFFFE000000000000)
      {
        v98 = (_DWORD)v27 == 0;
        goto LABEL_276;
      }
      *(_QWORD *)&v29 = v27 - 0x2000000000000;
      if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v27 & 0xFFFE000000000002) != 0)
        {
          v10 = v27 == 7;
          goto LABEL_41;
        }
        v99 = *(unsigned __int8 *)(v27 + 5);
        if (v99 == 3)
        {
          v102 = *(_DWORD *)(v27 + 8);
        }
        else
        {
          if (v99 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_266:
              v10 = 1;
              goto LABEL_41;
            }
            v98 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_276;
          }
          v100 = *(_QWORD *)(v27 + 8);
          if ((v100 & 1) != 0)
            v101 = (int *)(v27 + 16);
          else
            v101 = (int *)(v100 + 4);
          v102 = *v101;
        }
        v98 = v102 == 0;
LABEL_276:
        v10 = !v98;
        goto LABEL_41;
      }
      if (v29 > 0.0)
        goto LABEL_266;
      v10 = v29 < 0.0;
LABEL_41:
      if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
        goto LABEL_185;
LABEL_42:
      WTF::AtomStringImpl::addLiteral();
      v30 = (WTF::StringImpl *)v115;
      v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v31);
        else
          *(_DWORD *)v30 -= 2;
      }
      if (*(_DWORD *)(v9 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
        goto LABEL_185;
      if (v13 == 10)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        v115 = v13;
        v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v13 < 0xFFFE000000000000)
        {
          v72 = v13 - 0x2000000000000;
          if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v115, a1);
            v72 = v87;
          }
          v73 = (v72 >> 52) & 0x7FF;
          if ((v73 - 1023) <= 0x53)
          {
            v75 = v72 >> (51 - (v72 >> 52));
            if (v73 > 0x433)
              LODWORD(v75) = v72 << ((v72 >> 52) - 51);
            if (v73 >= 0x41F)
              v76 = v75;
            else
              v76 = (((1 << ((v72 >> 52) + 1)) - 1) & v75) + (1 << ((v72 >> 52) + 1));
            if ((v72 & 0x8000000000000000) == 0)
              LODWORD(v13) = v76;
            else
              LODWORD(v13) = -v76;
          }
          else
          {
            LODWORD(v13) = 0;
          }
        }
        if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
          goto LABEL_105;
      }
      WTF::AtomStringImpl::addLiteral();
      v33 = (WTF::StringImpl *)v115;
      v35 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v34);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
        goto LABEL_105;
      if ((v35 | 8) == 0xA)
      {
        v14 = 0;
      }
      else
      {
        v115 = *((_QWORD *)a1 + 7);
        if ((v35 & 0xFFFE000000000002) != 0
          || *(unsigned __int8 *)(v35 + 5) < 0x17u
          || &WebCore::JSWindowProxy::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C))
          || (v74 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 3408),
              !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 104))(v74))
          || (v14 = *(WTF **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 104))(v74) + 112)) == 0)
        {
          JSC::throwTypeError();
LABEL_105:
          v38 = 1;
          goto LABEL_63;
        }
        ++*(_DWORD *)v14;
      }
      WTF::AtomStringImpl::addLiteral();
      v36 = (WTF::StringImpl *)v115;
      v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v115);
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v37);
        else
          *(_DWORD *)v36 -= 2;
      }
      if (!*(_DWORD *)(v9 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) == 0)
      {
        if ((v2 | 8) == 0xA)
          goto LABEL_61;
        v115 = *((_QWORD *)a1 + 7);
        if ((v2 & 0xFFFE000000000002) != 0)
          goto LABEL_117;
        v70 = *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C);
        v71 = 16 * v70;
        if ((char **)(16 * v70) == &WebCore::JSWindowProxy::s_info)
        {
          v77 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 3408);
        }
        else if ((_DWORD)v70 && (char **)v71 != &WebCore::JSDOMWindow::s_info)
        {
          v78 = 16 * v70;
          do
            v78 = *(_QWORD *)(v78 + 16);
          while ((char **)v78 != &WebCore::JSDOMWindow::s_info && v78 != 0);
          if (v78)
            goto LABEL_160;
          if ((char **)v71 == &WebCore::JSWorkerGlobalScope::s_info)
            goto LABEL_183;
          v83 = v71;
          do
            v83 = *(_QWORD *)(v83 + 16);
          while ((char **)v83 != &WebCore::JSWorkerGlobalScope::s_info && v83 != 0);
          if (v83)
          {
LABEL_183:
            v9 = *(_QWORD *)(v2 + 3400) + 320;
LABEL_162:
            if ((*(_BYTE *)(v9 + 22) & 2) != 0)
              *(_DWORD *)(v9 + 24) += 2;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
            goto LABEL_62;
          }
          if ((char **)v71 != &WebCore::JSEventTarget::s_info)
          {
            do
              v71 = *(_QWORD *)(v71 + 16);
            while ((char **)v71 != &WebCore::JSEventTarget::s_info && v71 != 0);
            if (!v71)
              goto LABEL_117;
          }
          v77 = (uint64_t *)(v2 + 24);
        }
        else
        {
          if (!(_DWORD)v70)
          {
LABEL_117:
            JSC::throwTypeError();
            goto LABEL_118;
          }
LABEL_160:
          v77 = (uint64_t *)(v2 + 3408);
        }
        v9 = *v77;
        if (*v77)
          goto LABEL_162;
        goto LABEL_117;
      }
LABEL_118:
      v111 = 1;
      if (!v14)
        goto LABEL_121;
      if (*(_DWORD *)v14 != 1)
      {
        --*(_DWORD *)v14;
        goto LABEL_121;
      }
      v9 = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 2) = 0;
      if (v9)
      {
        if (*(_QWORD *)v9)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*(_QWORD *)v9, v69);
        WTF::fastFree((WTF *)v9, v69);
      }
      v80 = (unsigned int *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v80)
      {
        do
        {
          v81 = __ldaxr(v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, v80));
        if (!v82)
        {
          atomic_store(1u, v80);
          WTF::fastFree((WTF *)v80, v69);
        }
      }
      WTF::fastFree(v14, v69);
      v38 = v111;
      if (v111)
        goto LABEL_173;
    }
    v93 = (_DWORD)v22 == 0;
    goto LABEL_272;
  }
  v53 = 0;
LABEL_98:
  if (v7 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E327D710[v7])(&v105, &v112);
  return v53;
}

uint64_t WebCore::JSFocusEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSUIEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSUIEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFocusEvent::createPrototype(WebCore::JSFocusEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t *v9;
  unint64_t SlowCase;
  uint64_t v11;
  int v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v5 = (unint64_t *)((char *)this + 40136);
  v6 = WebCore::JSUIEvent::prototype(this, a2, a3);
  v7 = v6;
  LODWORD(v22[0]) = 23;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v9 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v5;
  if (*v5 < v5[1])
    goto LABEL_5;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_5:
    *v5 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v7, v22, &WebCore::JSFocusEventPrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = *v9;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_9;
  v11 = *((_QWORD *)this + 4865);
  if ((v11 & 1) == 0)
  {
    v21 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v11 + HIDWORD(v21);
    *((_QWORD *)this + 4865) = v11 + (int)v21;
LABEL_9:
    *v9 = v11 + 16;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM();
  v11 = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v11 = SlowCase >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSFocusEvent::s_info, (uint64_t)&WebCore::JSFocusEventPrototypeTableValues, (JSC::JSObject *)v11);
  v13 = *(_QWORD *)(v5[227] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v22);
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
  v26 = *(_DWORD *)v11;
  v25 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v23 = 0;
  v24 = v18;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)v11;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v11, (uint64_t)this, v23, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return v11;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFocusEvent>,(WebCore::DOMConstructorID)451>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  JSC::JSCell *v8;
  uint64_t Structure;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a2 + 3312);
  v3 = *(_QWORD *)(v2 + 3608);
  if (v3)
    return v3;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = *(_QWORD *)(v2 + 3968);
  if (!v7)
  {
    v8 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::createStructure((uint64_t *)a1, a2, v8);
    v7 = WebCore::JSDOMConstructor<WebCore::JSUIEvent>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3968) = v7;
    if (v7)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
    }
  }
  LODWORD(v23) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_8;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v21);
    v6[2] = SlowCase + (int)v21;
LABEL_8:
    *v6 = SlowCase + 128;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v23, &WebCore::JSDOMConstructor<WebCore::JSFocusEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v12 = (_QWORD *)v6[165];
  v3 = v12[2846];
  if (v3 >= v12[2847])
  {
    v3 = v12[2848];
    if ((v3 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v3 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_13;
    }
    v22 = *(_QWORD *)(v3 + 8) ^ v12[2849];
    v12[2847] = v3 + HIDWORD(v22);
    v12[2848] = v3 + (int)v22;
  }
  v12[2846] = v3 + 48;
LABEL_13:
  *(_DWORD *)v3 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(v6[227] + 1768);
  v23 = 0;
  v24 = v3;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v13, 0xFFFE000000000001, 6, (uint64_t)&v23);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create(a1, &v23);
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  *(_QWORD *)(v3 + 32) = v15;
  if (v15 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v3 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v3);
  v17 = *(_QWORD *)(v6[227] + 1968);
  v23 = 0;
  v24 = v3;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v17, v15, 6, (uint64_t)&v23);
  v18 = *(_QWORD *)(v6[227] + 2160);
  v19 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSFocusEvent>((WebCore::JSFocusEvent *)a1, (JSC::VM *)a2) + 48);
  v23 = 0;
  v24 = v3;
  v25 = -1;
  v26 = 0x1000000;
  v27 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v18, v19, 14, (uint64_t)&v23);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3608) = v3;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v3;
}

unint64_t WebCore::jsFocusEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFocusEventPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFocusEvent>,(WebCore::DOMConstructorID)451>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFocusEvent_relatedTarget(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::EventTarget *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 88);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::JSFocusEvent::subspaceForImpl(WebCore::JSFocusEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3688);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v7, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_5;
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3688))
  {
    v12 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v12, JSC::JSCell::numberOfLowerTierCells, &v13);
    v11 = *(_QWORD *)(v9 + 3688);
    *(_QWORD *)(v9 + 3688) = v13;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v13 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSFocusEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v13);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v13);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::FocusOptions>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  BOOL v5;
  int v6;
  JSC::JSGlobalObject *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  WTF::StringImpl *v25;

  v4 = *(JSC::VM **)(result + 56);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    v7 = (JSC::JSGlobalObject *)result;
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_22;
    }
    v9 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v9, v7, (unint64_t)v25);
    v11 = result;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        v13 = result;
        result = WTF::StringImpl::destroy(v25, v10);
        v11 = v13;
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    if (*((_DWORD *)v4 + 20))
    {
      v14 = v4;
      v15 = v11;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
      v11 = v15;
      if ((result & 1) != 0)
        goto LABEL_22;
    }
    if (v11 == 10)
    {
      v5 = 0;
      goto LABEL_3;
    }
    result = *((_QWORD *)v7 + 7);
    if (v11 >= 0xFFFE000000000000)
    {
      v16 = (_DWORD)v11 == 0;
    }
    else
    {
      *(_QWORD *)&v12 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v17 = v12 <= 0.0;
        v18 = v12 < 0.0;
        v5 = !v17 || v18;
LABEL_17:
        if (!*(_DWORD *)(result + 80))
          goto LABEL_3;
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
        if ((result & 1) == 0)
          goto LABEL_3;
LABEL_22:
        v6 = 1;
        goto LABEL_4;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v5 = v11 == 7;
        goto LABEL_17;
      }
      v19 = (_DWORD *)v11;
      v20 = *(unsigned __int8 *)(v11 + 5);
      if (v20 == 3)
      {
        v24 = v19[2];
      }
      else
      {
        if (v20 != 2)
        {
          if ((*(_BYTE *)(16 * (*v19 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v5 = 1;
            goto LABEL_17;
          }
          v16 = *(_QWORD *)(16 * (*v19 & 0xFFFFFFFE) + 0x28) == (_QWORD)v7;
          goto LABEL_26;
        }
        v21 = *((_QWORD *)v19 + 1);
        v22 = v19 + 4;
        if ((v21 & 1) != 0)
          v23 = v22;
        else
          v23 = (int *)(v21 + 4);
        v24 = *v23;
      }
      v16 = v24 == 0;
    }
LABEL_26:
    v5 = !v16;
    goto LABEL_17;
  }
  v5 = 0;
LABEL_3:
  v6 = 0;
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 5) = v5;
LABEL_4:
  *(_DWORD *)(a3 + 8) = v6;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFontFace>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  int v19;
  JSC::JSCell *v20;
  JSC::VM *v21;
  uint64_t Object;
  JSC::Structure *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  JSC::VM *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WebCore::ScriptExecutionContext *v55;
  JSC::VM *v56;
  WTF::AtomStringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  JSC::VM *v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  JSCell *v85;
  JSC::JSCell *v86;
  JSC::JSGlobalObject *v87;
  JSC::JSObject *v88;
  JSC::JSGlobalObject *v89;
  JSC::VM *v90;
  JSC::Structure *v91;
  uint64_t FunctionRealm;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char **v99;
  int v100;
  JSC::JSObject *v101;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v103;
  JSC::Structure *v104;
  JSC::JSCell *v105;
  uint64_t v106;
  unint64_t SubclassStructure;
  WTF *v108;
  uint64_t v109;
  WTF *v111;
  void *v112;
  JSValue v113;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  WTF::StringImpl *v123;
  int v124;
  int v125;
  WTF::StringImpl *v126;
  int v127;
  WebCore::ScriptExecutionContext *v128;
  JSC::VM *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  WTF::StringImpl *v135;
  int v136;
  JSC::VM *v137;
  WTF::StringImpl *v138;
  int v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  int v145;
  WTF::AtomStringImpl *v146;
  int v147;
  uint64_t (***v148)(WebCore::ContextDestructionObserver *__hidden);
  int v149;
  WTF::StringImpl *v150;
  int v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[24];
  JSC::VM *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  int v160;
  int v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v137 = v3;
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v113.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v113);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v137, (uint64_t)"FontFace", 9);
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v130 = v8;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v10 = *(_DWORD **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      *(_QWORD *)&v152 = v10;
      goto LABEL_9;
    }
    *v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v130, this);
LABEL_9:
  v129 = v3;
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v11 = (WTF::StringImpl *)v152;
    if (hasExceptionsAfterHandlingTraps)
    {
      v136 = 1;
      *(_QWORD *)&v152 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v116);
        else
          *(_DWORD *)v11 -= 2;
      }
      v85 = 0;
      v109 = 1;
      goto LABEL_214;
    }
  }
  else
  {
    v11 = (WTF::StringImpl *)v152;
  }
  v135 = v11;
  v136 = 0;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped(*((_QWORD *)this + 7), v12);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    DWORD2(v130) = 1;
    *(_QWORD *)&v130 = 0;
    v159 = v13;
    v160 = 1;
    v161 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_((uint64_t)v13, (_QWORD **)&v130);
    goto LABEL_25;
  }
  JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)v12, (JSC::ArrayBufferView **)&v130);
  if ((_QWORD)v130)
  {
    v159 = (WTF::StringImpl *)v130;
    v160 = 2;
    v161 = 0;
    goto LABEL_25;
  }
  *(_QWORD *)&v152 = v12;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v15 = *(WTF::StringImpl **)(v12 + 8);
    if ((v15 & 1) != 0)
    {
      v15 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v15)
        goto LABEL_20;
    }
    else if (!v15)
    {
LABEL_20:
      v158 = v15;
      goto LABEL_21;
    }
    *(_DWORD *)v15 += 2;
    goto LABEL_20;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v152, this);
LABEL_21:
  if (*((_DWORD *)v14 + 20))
  {
    v127 = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
    v16 = v158;
    if (v127)
    {
      DWORD2(v130) = 1;
      v158 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v126);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = 1;
      v18 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v16 = v158;
  }
  v17 = 0;
  v18 = 0;
  DWORD2(v130) = 0;
  *(_QWORD *)&v130 = 0;
  v159 = v16;
  v160 = 0;
LABEL_24:
  v161 = v17;
  ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(&v152, &v130);
LABEL_25:
  v19 = v161;
  if (v161)
  {
    v85 = 0;
    goto LABEL_211;
  }
  v128 = (WebCore::ScriptExecutionContext *)v7;
  if ((unint64_t)(*(int *)(a2 + 32) - 4) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    v155 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_37;
  }
  v20 = *(JSC::JSCell **)(a2 + 64);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v155 = v21;
  if (((unint64_t)v20 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_37:
    v153 = 0u;
    memset(v154, 0, sizeof(v154));
    v152 = 0u;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 0;
    v151 = 0;
    v150 = 0;
    v27 = 1;
LABEL_38:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = v146;
    goto LABEL_39;
  }
  if (((unint64_t)v20 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(v20);
    if (Object)
    {
      v23 = (JSC::Structure *)Object;
      v153 = 0u;
      memset(v154, 0, sizeof(v154));
      v152 = 0u;
      WTF::AtomStringImpl::addLiteral();
      v24 = v150;
      v26 = JSC::JSObject::get(v23, this, (unint64_t)v150);
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v25);
        else
          *(_DWORD *)v24 -= 2;
      }
      if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
      {
        v68 = 1;
        v134 = 1;
        WebCore::FontFace::Descriptors::~Descriptors((WebCore::FontFace::Descriptors *)&v152, v117);
        v85 = 0;
        goto LABEL_210;
      }
      if (v26 == 10)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v151 = 0;
        v150 = 0;
        goto LABEL_125;
      }
      v148 = (uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v26;
      v56 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v148, this);
        goto LABEL_122;
      }
      v57 = *(WTF::AtomStringImpl **)(v26 + 8);
      if ((v57 & 1) != 0)
      {
        v57 = *(WTF::AtomStringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
        if (!v57)
          goto LABEL_121;
      }
      else if (!v57)
      {
LABEL_121:
        v146 = v57;
LABEL_122:
        if (*((_DWORD *)v56 + 20))
        {
          v124 = JSC::VM::hasExceptionsAfterHandlingTraps(v56);
          v58 = v146;
          if (v124)
          {
            v68 = 1;
            v151 = 1;
            v146 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2)
                WTF::StringImpl::destroy(v58, v123);
              else
                *(_DWORD *)v58 -= 2;
            }
            v134 = 1;
            v76 = 1;
            v55 = v128;
LABEL_182:
            ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v76])(&v148, &v150);
LABEL_183:
            WebCore::FontFace::Descriptors::~Descriptors((WebCore::FontFace::Descriptors *)&v152, v28);
            if (!v68)
            {
              v135 = 0;
              v146 = v11;
              if (!v161)
              {
                LOBYTE(v150) = 0;
                v151 = -1;
                v77 = v160;
                if (v160 != -1)
                {
                  off_1E327D788[v160]();
                  v151 = v77;
                }
                v78 = v130;
                v79 = v131;
                v130 = 0u;
                v131 = 0u;
                v152 = v78;
                v153 = v79;
                v80 = v132;
                v132 = 0u;
                *(_OWORD *)v154 = v80;
                v81 = v133;
                v133 = 0;
                *(_QWORD *)&v154[16] = v81;
                WebCore::FontFace::create(v55, &v146, (uint64_t)&v150, (uint64_t)&v152, (WTF::StringImpl *)&v148);
                WebCore::FontFace::Descriptors::~Descriptors((WebCore::FontFace::Descriptors *)&v152, v82);
                if (v151 != -1)
                  off_1E327D770[v151]();
                v84 = v146;
                v146 = 0;
                if (v84)
                {
                  if (*(_DWORD *)v84 == 2)
                    WTF::StringImpl::destroy(v84, v83);
                  else
                    *(_DWORD *)v84 -= 2;
                }
                if (*v148 != &off_1E3399670)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194B0F5B4);
                }
                v85 = (JSCell *)WebCore::createWrapper<WebCore::FontFace,WebCore::FontFace>(*(_QWORD *)(v5 + 40), (WTF **)&v148);
                v86 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v86 & 0xFFFE000000000002) != 0)
                  goto LABEL_206;
                v87 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v86);
                if (!v87)
                  goto LABEL_206;
                v89 = v87;
                if (v87 == *(JSC::JSGlobalObject **)(a2 + 24))
                  goto LABEL_206;
                v90 = (JSC::VM *)*((_QWORD *)this + 7);
                FunctionRealm = JSC::getFunctionRealm(this, v87, v88);
                if (*((_DWORD *)v90 + 20))
                {
                  if ((JSC::VM::hasExceptionsAfterHandlingTraps(v90) & 1) != 0)
                    goto LABEL_206;
                }
                v93 = *(_QWORD *)(FunctionRealm + 3296);
                if (v93)
                {
                  v94 = *(_DWORD *)(v93 - 8);
                  v95 = ((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) >> 22);
                  v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
                  v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
                  v98 = v94 & ((v97 >> 31) ^ v97);
                  v99 = *(char ***)(v93 + 16 * v98);
                  if (v99 == &WebCore::JSFontFace::s_info)
                  {
LABEL_202:
                    v101 = *(JSC::JSObject **)(v93 + 16 * v98 + 8);
                    if (v101)
                    {
LABEL_204:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v89, v101, v91);
                      if (!*((_DWORD *)v90 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v90) & 1) == 0)
                        JSC::JSObject::setStructure(v85, v90, SubclassStructure);
LABEL_206:
                      if (*((_DWORD *)v129 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v129) & 1) != 0)
                        v85 = 0;
                      v108 = (WTF *)v148;
                      v148 = 0;
                      if (v108)
                      {
                        if (*((_DWORD *)v108 + 6) == 1)
                        {
                          WebCore::FontFace::~FontFace(v108);
                          WTF::fastFree(v111, v112);
                        }
                        else
                        {
                          --*((_DWORD *)v108 + 6);
                        }
                      }
                      goto LABEL_210;
                    }
                  }
                  else
                  {
                    v100 = 1;
                    while (v99)
                    {
                      v98 = ((_DWORD)v98 + v100) & v94;
                      v99 = *(char ***)(v93 + 16 * v98);
                      ++v100;
                      if (v99 == &WebCore::JSFontFace::s_info)
                        goto LABEL_202;
                    }
                  }
                }
                Structure = WebCore::JSFontFacePrototype::createStructure((uint64_t *)v90, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v105 = (JSC::JSCell *)WebCore::JSFontFacePrototype::create(v90, Structure, v103, v104);
                v106 = WebCore::JSFontFace::createStructure((uint64_t *)v90, FunctionRealm, v105);
                v101 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v106, (uint64_t)&WebCore::JSFontFace::s_info);
                goto LABEL_204;
              }
              std::__throw_bad_variant_access[abi:sn180100]();
            }
            v85 = 0;
            v68 = 1;
            goto LABEL_210;
          }
        }
        else
        {
          v58 = v146;
        }
        v151 = 0;
        v150 = 0;
        *(_QWORD *)&v154[8] = v58;
LABEL_125:
        WTF::AtomStringImpl::addLiteral();
        v59 = (WTF::StringImpl *)v148;
        v60 = JSC::JSObject::get(v23, this, (unint64_t)v148);
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v28);
          else
            *(_DWORD *)v59 -= 2;
        }
        if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
        {
          v68 = 1;
          v134 = 1;
          v55 = v128;
LABEL_181:
          v76 = v151;
          if (v151 == -1)
            goto LABEL_183;
          goto LABEL_182;
        }
        if (v60 == 10)
        {
          v27 = 0;
          goto LABEL_38;
        }
        v146 = (WTF::AtomStringImpl *)v60;
        v61 = (JSC::VM *)*((_QWORD *)this + 7);
        if ((v60 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v60 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v146, this);
          goto LABEL_137;
        }
        v62 = *(WTF::StringImpl **)(v60 + 8);
        if ((v62 & 1) != 0)
        {
          v62 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v60, this);
          if (!v62)
            goto LABEL_136;
        }
        else if (!v62)
        {
LABEL_136:
          v144 = v62;
LABEL_137:
          if (*((_DWORD *)v61 + 20))
          {
            v125 = JSC::VM::hasExceptionsAfterHandlingTraps(v61);
            v29 = v144;
            if (v125)
            {
              v68 = 1;
              v149 = 1;
              v144 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v28);
                else
                  *(_DWORD *)v29 -= 2;
              }
              v134 = 1;
              v75 = 1;
              v55 = v128;
LABEL_180:
              ((void (*)(WTF::AtomStringImpl **, uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v75])(&v146, &v148);
              goto LABEL_181;
            }
          }
          else
          {
            v29 = v144;
          }
          v27 = 0;
LABEL_39:
          v149 = 0;
          v148 = 0;
          v30 = *(WTF::StringImpl **)v154;
          *(_QWORD *)v154 = v29;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::destroy(v30, v28);
              if (!v27)
              {
LABEL_43:
                WTF::AtomStringImpl::addLiteral();
                v31 = v146;
                v32 = JSC::JSObject::get(v23, this, (unint64_t)v146);
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, v28);
                  else
                    *(_DWORD *)v31 -= 2;
                }
                if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
                {
                  v68 = 1;
                  v134 = 1;
                  v55 = v128;
LABEL_179:
                  v75 = v149;
                  if (v149 == -1)
                    goto LABEL_181;
                  goto LABEL_180;
                }
                if (v32 == 10)
                  goto LABEL_48;
                v144 = (WTF::StringImpl *)v32;
                v34 = (JSC::VM *)*((_QWORD *)this + 7);
                if ((v32 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v32 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v144, this);
LABEL_55:
                  if (*((_DWORD *)v34 + 20))
                  {
                    v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v34);
                    v33 = v142;
                    if (v118)
                    {
                      v68 = 1;
                      v147 = 1;
                      v142 = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2)
                          WTF::StringImpl::destroy(v33, v28);
                        else
                          *(_DWORD *)v33 -= 2;
                      }
                      v134 = 1;
                      v74 = 1;
                      v55 = v128;
LABEL_178:
                      ((void (*)(WTF::StringImpl **, WTF::AtomStringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v74])(&v144, &v146);
                      goto LABEL_179;
                    }
                  }
                  else
                  {
                    v33 = v142;
                  }
LABEL_57:
                  v147 = 0;
                  v146 = 0;
                  v36 = *(WTF::StringImpl **)&v154[16];
                  *(_QWORD *)&v154[16] = v33;
                  if (v36)
                  {
                    if (*(_DWORD *)v36 == 2)
                    {
                      WTF::StringImpl::destroy(v36, v28);
                      if (!v27)
                      {
LABEL_61:
                        WTF::AtomStringImpl::addLiteral();
                        v37 = v144;
                        v38 = JSC::JSObject::get(v23, this, (unint64_t)v144);
                        if (v37)
                        {
                          if (*(_DWORD *)v37 == 2)
                            WTF::StringImpl::destroy(v37, v28);
                          else
                            *(_DWORD *)v37 -= 2;
                        }
                        if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
                        {
                          v68 = 1;
                          v134 = 1;
                          v55 = v128;
LABEL_177:
                          v74 = v147;
                          if (v147 == -1)
                            goto LABEL_179;
                          goto LABEL_178;
                        }
                        if (v38 == 10)
                          goto LABEL_66;
                        v142 = (WTF::StringImpl *)v38;
                        v40 = (JSC::VM *)*((_QWORD *)this + 7);
                        if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
                        {
                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v142, this);
LABEL_73:
                          if (*((_DWORD *)v40 + 20))
                          {
                            v119 = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
                            v39 = v140;
                            if (v119)
                            {
                              v68 = 1;
                              v145 = 1;
                              v140 = 0;
                              if (v39)
                              {
                                if (*(_DWORD *)v39 == 2)
                                  WTF::StringImpl::destroy(v39, v28);
                                else
                                  *(_DWORD *)v39 -= 2;
                              }
                              v134 = 1;
                              v73 = 1;
                              v55 = v128;
LABEL_176:
                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v73])(&v142, &v144);
                              goto LABEL_177;
                            }
                          }
                          else
                          {
                            v39 = v140;
                          }
LABEL_75:
                          v145 = 0;
                          v144 = 0;
                          v42 = (WTF::StringImpl *)v153;
                          *(_QWORD *)&v153 = v39;
                          if (v42)
                          {
                            if (*(_DWORD *)v42 == 2)
                            {
                              WTF::StringImpl::destroy(v42, v28);
                              if (!v27)
                              {
LABEL_79:
                                WTF::AtomStringImpl::addLiteral();
                                v43 = v142;
                                v44 = JSC::JSObject::get(v23, this, (unint64_t)v142);
                                if (v43)
                                {
                                  if (*(_DWORD *)v43 == 2)
                                    WTF::StringImpl::destroy(v43, v28);
                                  else
                                    *(_DWORD *)v43 -= 2;
                                }
                                if (*((_DWORD *)v155 + 20)
                                  && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
                                {
                                  v68 = 1;
                                  v134 = 1;
                                  v55 = v128;
LABEL_175:
                                  v73 = v145;
                                  if (v145 == -1)
                                    goto LABEL_177;
                                  goto LABEL_176;
                                }
                                if (v44 == 10)
                                  goto LABEL_84;
                                v140 = (WTF::StringImpl *)v44;
                                v46 = (JSC::VM *)*((_QWORD *)this + 7);
                                if ((v44 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v44 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v140, this);
LABEL_91:
                                  if (*((_DWORD *)v46 + 20))
                                  {
                                    v120 = JSC::VM::hasExceptionsAfterHandlingTraps(v46);
                                    v45 = v138;
                                    if (v120)
                                    {
                                      v68 = 1;
                                      v143 = 1;
                                      v138 = 0;
                                      if (v45)
                                      {
                                        if (*(_DWORD *)v45 == 2)
                                          WTF::StringImpl::destroy(v45, v28);
                                        else
                                          *(_DWORD *)v45 -= 2;
                                      }
                                      v134 = 1;
                                      v72 = 1;
                                      v55 = v128;
LABEL_174:
                                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v72])(&v140, &v142);
                                      goto LABEL_175;
                                    }
                                  }
                                  else
                                  {
                                    v45 = v138;
                                  }
LABEL_93:
                                  v143 = 0;
                                  v142 = 0;
                                  v48 = (WTF::StringImpl *)v152;
                                  *(_QWORD *)&v152 = v45;
                                  if (v48)
                                  {
                                    if (*(_DWORD *)v48 == 2)
                                    {
                                      WTF::StringImpl::destroy(v48, v28);
                                      if (!v27)
                                      {
LABEL_97:
                                        WTF::AtomStringImpl::addLiteral();
                                        v49 = v140;
                                        v50 = JSC::JSObject::get(v23, this, (unint64_t)v140);
                                        if (v49)
                                        {
                                          if (*(_DWORD *)v49 == 2)
                                            WTF::StringImpl::destroy(v49, v28);
                                          else
                                            *(_DWORD *)v49 -= 2;
                                        }
                                        if (*((_DWORD *)v155 + 20)
                                          && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
                                        {
                                          v68 = 1;
                                          v134 = 1;
                                          v55 = v128;
LABEL_173:
                                          v72 = v143;
                                          if (v143 == -1)
                                            goto LABEL_175;
                                          goto LABEL_174;
                                        }
                                        if (v50 == 10)
                                          goto LABEL_102;
                                        v138 = (WTF::StringImpl *)v50;
                                        v52 = (JSC::VM *)*((_QWORD *)this + 7);
                                        if ((v50 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v50 + 5) != 2)
                                        {
                                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v138, this);
LABEL_109:
                                          if (*((_DWORD *)v52 + 20))
                                          {
                                            v121 = JSC::VM::hasExceptionsAfterHandlingTraps(v52);
                                            v51 = v157;
                                            if (v121)
                                            {
                                              v68 = 1;
                                              v141 = 1;
                                              v157 = 0;
                                              if (v51)
                                              {
                                                if (*(_DWORD *)v51 == 2)
                                                  WTF::StringImpl::destroy(v51, v28);
                                                else
                                                  *(_DWORD *)v51 -= 2;
                                              }
                                              v134 = 1;
                                              v71 = 1;
                                              v55 = v128;
LABEL_172:
                                              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v71])(&v138, &v140);
                                              goto LABEL_173;
                                            }
                                          }
                                          else
                                          {
                                            v51 = v157;
                                          }
LABEL_111:
                                          v141 = 0;
                                          v140 = 0;
                                          v54 = (WTF::StringImpl *)*((_QWORD *)&v153 + 1);
                                          *((_QWORD *)&v153 + 1) = v51;
                                          if (v54)
                                          {
                                            if (*(_DWORD *)v54 == 2)
                                            {
                                              WTF::StringImpl::destroy(v54, v28);
                                              if (v27)
                                                goto LABEL_115;
                                              goto LABEL_151;
                                            }
                                            *(_DWORD *)v54 -= 2;
                                          }
                                          if (v27)
                                          {
LABEL_115:
                                            v55 = v128;
LABEL_156:
                                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                                            v65 = v157;
                                            v139 = 0;
                                            goto LABEL_166;
                                          }
LABEL_151:
                                          WTF::AtomStringImpl::addLiteral();
                                          v63 = v138;
                                          v64 = JSC::JSObject::get(v23, this, (unint64_t)v138);
                                          v55 = v128;
                                          if (v63)
                                          {
                                            if (*(_DWORD *)v63 == 2)
                                              WTF::StringImpl::destroy(v63, v28);
                                            else
                                              *(_DWORD *)v63 -= 2;
                                          }
                                          if (*((_DWORD *)v155 + 20)
                                            && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
                                          {
                                            v68 = 1;
                                            v134 = 1;
LABEL_171:
                                            v71 = v141;
                                            if (v141 == -1)
                                              goto LABEL_173;
                                            goto LABEL_172;
                                          }
                                          if (v64 == 10)
                                            goto LABEL_156;
                                          v157 = (WTF::StringImpl *)v64;
                                          v66 = (JSC::VM *)*((_QWORD *)this + 7);
                                          if ((v64 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v64 + 5) != 2)
                                          {
                                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v157, this);
                                            goto LABEL_163;
                                          }
                                          v67 = *(WTF::StringImpl **)(v64 + 8);
                                          if ((v67 & 1) != 0)
                                          {
                                            v67 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v64, this);
                                            if (!v67)
                                              goto LABEL_162;
                                          }
                                          else if (!v67)
                                          {
LABEL_162:
                                            v156 = v67;
LABEL_163:
                                            if (*((_DWORD *)v66 + 20))
                                            {
                                              v122 = JSC::VM::hasExceptionsAfterHandlingTraps(v66);
                                              v65 = v156;
                                              if (v122)
                                              {
                                                v139 = 1;
                                                v156 = 0;
                                                if (v65)
                                                {
                                                  if (*(_DWORD *)v65 == 2)
                                                    WTF::StringImpl::destroy(v65, v28);
                                                  else
                                                    *(_DWORD *)v65 -= 2;
                                                }
                                                v68 = 1;
                                                goto LABEL_170;
                                              }
                                            }
                                            else
                                            {
                                              v65 = v156;
                                            }
                                            v139 = 0;
LABEL_166:
                                            v138 = 0;
                                            if (*((_QWORD *)&v152 + 1))
                                            {
                                              if (**((_DWORD **)&v152 + 1) == 2)
                                                WTF::StringImpl::destroy(*((WTF::StringImpl **)&v152 + 1), v28);
                                              else
                                                **((_DWORD **)&v152 + 1) -= 2;
                                            }
                                            v68 = 0;
                                            *(_QWORD *)&v130 = v152;
                                            *((_QWORD *)&v130 + 1) = v65;
                                            v69 = v153;
                                            v70 = *(_OWORD *)v154;
                                            v152 = 0u;
                                            v153 = 0u;
                                            memset(v154, 0, sizeof(v154));
                                            v131 = v69;
                                            v132 = v70;
                                            v133 = *(_QWORD *)&v154[16];
LABEL_170:
                                            v134 = v68;
                                            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v68])(&v157, &v138);
                                            goto LABEL_171;
                                          }
                                          *(_DWORD *)v67 += 2;
                                          goto LABEL_162;
                                        }
                                        v53 = *(WTF::StringImpl **)(v50 + 8);
                                        if ((v53 & 1) != 0)
                                        {
                                          v53 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v50, this);
                                          if (!v53)
                                            goto LABEL_108;
                                        }
                                        else if (!v53)
                                        {
LABEL_108:
                                          v157 = v53;
                                          goto LABEL_109;
                                        }
                                        *(_DWORD *)v53 += 2;
                                        goto LABEL_108;
                                      }
LABEL_102:
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      v51 = v138;
                                      goto LABEL_111;
                                    }
                                    *(_DWORD *)v48 -= 2;
                                  }
                                  if (!v27)
                                    goto LABEL_97;
                                  goto LABEL_102;
                                }
                                v47 = *(WTF::StringImpl **)(v44 + 8);
                                if ((v47 & 1) != 0)
                                {
                                  v47 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v44, this);
                                  if (!v47)
                                    goto LABEL_90;
                                }
                                else if (!v47)
                                {
LABEL_90:
                                  v138 = v47;
                                  goto LABEL_91;
                                }
                                *(_DWORD *)v47 += 2;
                                goto LABEL_90;
                              }
LABEL_84:
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v45 = v140;
                              goto LABEL_93;
                            }
                            *(_DWORD *)v42 -= 2;
                          }
                          if (!v27)
                            goto LABEL_79;
                          goto LABEL_84;
                        }
                        v41 = *(WTF::StringImpl **)(v38 + 8);
                        if ((v41 & 1) != 0)
                        {
                          v41 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, this);
                          if (!v41)
                            goto LABEL_72;
                        }
                        else if (!v41)
                        {
LABEL_72:
                          v140 = v41;
                          goto LABEL_73;
                        }
                        *(_DWORD *)v41 += 2;
                        goto LABEL_72;
                      }
LABEL_66:
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v39 = v142;
                      goto LABEL_75;
                    }
                    *(_DWORD *)v36 -= 2;
                  }
                  if (!v27)
                    goto LABEL_61;
                  goto LABEL_66;
                }
                v35 = *(WTF::StringImpl **)(v32 + 8);
                if ((v35 & 1) != 0)
                {
                  v35 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v32, this);
                  if (!v35)
                    goto LABEL_54;
                }
                else if (!v35)
                {
LABEL_54:
                  v142 = v35;
                  goto LABEL_55;
                }
                *(_DWORD *)v35 += 2;
                goto LABEL_54;
              }
LABEL_48:
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v33 = v144;
              goto LABEL_57;
            }
            *(_DWORD *)v30 -= 2;
          }
          if (!v27)
            goto LABEL_43;
          goto LABEL_48;
        }
        *(_DWORD *)v62 += 2;
        goto LABEL_136;
      }
      *(_DWORD *)v57 += 2;
      goto LABEL_121;
    }
  }
  JSC::throwTypeError();
  v85 = 0;
  v68 = 1;
  v134 = 1;
LABEL_210:
  (*(&off_1E327D7A0 + v68))((int)&v152, (WebCore::FontFace::Descriptors *)&v130);
  v19 = v161;
LABEL_211:
  if (v19 != -1)
    ((void (*)(__int128 *, WTF::StringImpl **))off_1E327D7B0[v19])(&v130, &v159);
  v109 = 0;
LABEL_214:
  ((void (*)(__int128 *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v109])(&v130, &v135);
  return v85;
}

WebCore::FontFace *WebCore::JSFontFace::destroy(WebCore::JSFontFace *this, JSC::JSCell *a2)
{
  WebCore::FontFace *result;
  WTF *v4;
  void *v5;

  result = (WebCore::FontFace *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::FontFace::~FontFace(result);
      return (WebCore::FontFace *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

uint64_t WebCore::JSFontFace::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFontFacePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFontFacePrototype::create(WebCore::JSFontFacePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<12u>(this, (uint64_t)&WebCore::JSFontFace::s_info, (uint64_t)&WebCore::JSFontFacePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 440) & 0x1000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFontFace>,(WebCore::DOMConstructorID)366>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2928);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSFontFace>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000002, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFontFace::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFontFace::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFontFacePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFontFacePrototype::create((WebCore::JSFontFacePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFontFace::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFontFace::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2928) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFontFaceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFontFacePrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFontFace>,(WebCore::DOMConstructorID)366>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFontFace_family(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  ((void (*)(WTF::StringImpl **__return_ptr, _QWORD))WebCore::CSSFontFace::family)(&v10, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48));
  v3 = v10;
  if (v10)
  {
    v4 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v10 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v3 = v11;
    v10 = v11;
    v4 = *(_QWORD *)(a1 + 56);
    if (!v11)
    {
LABEL_11:
      v6 = *(_QWORD *)(v4 + 41968);
LABEL_9:
      v10 = 0;
      if (!v3)
        return v6;
      goto LABEL_18;
    }
  }
  v5 = *((_DWORD *)v3 + 1);
  if (!v5)
    goto LABEL_11;
  if (v5 == 1)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
    if ((*((_BYTE *)v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v8 = *(unsigned __int16 *)v7;
      if (v8 > 0xFF)
        goto LABEL_6;
      v8 = v8;
    }
    v6 = *(_QWORD *)(v4 + 8 * v8 + 42216);
    goto LABEL_17;
  }
LABEL_6:
  v6 = *(_QWORD *)(v4 + 64760);
  if (!v6 || v3 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v3 = v10;
    goto LABEL_9;
  }
LABEL_17:
  v10 = 0;
LABEL_18:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v6;
}

BOOL WebCore::setJSFontFace_family(WebCore::JSDOMGlobalObject *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::ScriptExecutionContext *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28[2];
  WTF::StringImpl *v29;
  char v30;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WTF::StringImpl **)(a2 + 24);
  *(_QWORD *)v28 = a3;
  if ((a3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a3 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(a3 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v26 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v28, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    v12 = v26;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    {
      v25 = 1;
      v26 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v19);
        else
          *(_DWORD *)v12 -= 2;
      }
      v17 = 0;
      v16 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v12 = v26;
  }
  v24 = v12;
  v25 = 0;
  v13 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v13)
  {
    v24 = 0;
    v26 = v12;
    WebCore::FontFace::setFamily(v10, v13, &v26, v28);
    v15 = v26;
    v26 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v30)
    {
      v20 = (WTF::StringImpl *)LOBYTE(v28[0]);
      LOBYTE(v26) = v28[0];
      v21 = v29;
      v29 = 0;
      v27 = v21;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v28[0]), (JSC::JSGlobalObject *)&v27);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v21 = v27;
      }
      v27 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (v30)
      {
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v20);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
    }
    v16 = 0;
    v17 = 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
LABEL_26:
  ((void (*)(int *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v16])(v28, &v24);
  return v17;
}

uint64_t WebCore::jsFontFace_style(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 16, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_style(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_style(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WebCore::CSSValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStyle(v13, (uint64_t **)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setStyle(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_weight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 28, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_weight(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_weight(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WebCore::CSSValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceWeight(v13, (__int128 ***)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setWeight(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_stretch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 15, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_stretch(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_stretch(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WebCore::CSSValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceStretch(v13, (__int128 ***)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setStretch(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_unicodeRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 286, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_unicodeRange(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_unicodeRange(WebCore::JSDOMGlobalObject *this, uint64_t a2, char **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  char **v15;
  char **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  char **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(char **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = (WTF::StringImpl *)v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceUnicodeRange(v13, &v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setUnicodeRange(*(_QWORD *)(v10 + 48), (uint64_t)v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(char ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_featureSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 9, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_featureSettings(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_featureSettings(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WebCore::CSSValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceFeatureSettings(v13, (int **)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setFeatureSettings(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_display(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  char v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 126, v6, v7, (WebCore *)&v20, v8);
    v9 = v20;
    if (!v20)
    {
      v9 = (WTF::StringImpl *)WebCore::autoAtomData;
      if (!WebCore::autoAtomData)
      {
        v10 = *(_QWORD *)(a1 + 56);
        goto LABEL_23;
      }
      *(_DWORD *)WebCore::autoAtomData += 2;
      v20 = v9;
    }
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v20;
          goto LABEL_10;
        }
LABEL_15:
        v20 = 0;
        goto LABEL_16;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_15;
    }
LABEL_23:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v20 = 0;
    if (!v9)
      return v12;
LABEL_16:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_display(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_display(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSPrimitiveValue *v15;
  WebCore::CSSPrimitiveValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSPrimitiveValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSPrimitiveValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceDisplay(v13, (int **)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setDisplay(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSPrimitiveValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_sizeAdjust(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  WTF::StringBuilder *v6;
  WTF::String *v7;
  __n128 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  JSC::JSRopeString *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 != -1)
  {
    v20 = (WTF::StringImpl *)&v19;
    v5 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace10propertiesEvE3__0JZNKS9_10propertiesEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v20, v2 + 16);
    WebCore::StyleProperties::serializeLonghandValue(v5, 229, v6, v7, (WebCore *)&v19, v8);
    v9 = v19;
    if (v19)
    {
      v10 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v20;
      v19 = v20;
      v10 = *(_QWORD *)(a1 + 56);
      if (!v20)
        goto LABEL_12;
    }
    v11 = *((_DWORD *)v9 + 1);
    if (v11)
    {
      if (v11 != 1)
      {
LABEL_7:
        v12 = *(_QWORD *)(v10 + 64760);
        if (!v12 || v9 != *(WTF::StringImpl **)(v12 + 8))
        {
          v12 = JSC::jsStringWithCacheSlowCase();
          v9 = v19;
          goto LABEL_10;
        }
LABEL_16:
        v19 = 0;
        goto LABEL_17;
      }
      v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if ((*((_BYTE *)v9 + 16) & 4) != 0)
      {
        v14 = *v13;
      }
      else
      {
        v14 = *(unsigned __int16 *)v13;
        if (v14 > 0xFF)
          goto LABEL_7;
        v14 = v14;
      }
      v12 = *(_QWORD *)(v10 + 8 * v14 + 42216);
      goto LABEL_16;
    }
LABEL_12:
    v12 = *(_QWORD *)(v10 + 41968);
LABEL_10:
    v19 = 0;
    if (!v9)
      return v12;
LABEL_17:
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v9);
    else
      *(_DWORD *)v9 -= 2;
    return v12;
  }
  v16 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setJSFontFace_sizeAdjust(v16, v17, v18);
}

BOOL WebCore::setJSFontFace_sizeAdjust(WebCore::JSDOMGlobalObject *this, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  WebCore::CSSValue *v15;
  WebCore::CSSValue *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WebCore::CSSValue *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)this + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v29 = (WebCore::CSSValue *)a3;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 2)
  {
    v11 = a3[1];
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)a3, this);
      if (!v11)
        goto LABEL_17;
    }
    else if (!v11)
    {
LABEL_17:
      v31 = v11;
      goto LABEL_18;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v29, this);
LABEL_18:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v12 = v31;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v31 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v26);
        else
          *(_DWORD *)v12 -= 2;
      }
      v20 = 0;
      v19 = 1;
      goto LABEL_33;
    }
  }
  else
  {
    v12 = v31;
  }
  v27 = v12;
  v28 = 0;
  v13 = (const WTF::String *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_33;
  }
  v27 = 0;
  v31 = v12;
  WebCore::CSSPropertyParserWorkerSafe::parseFontFaceSizeAdjust(v13, (__int128 ***)&v29);
  v15 = v29;
  if (v29)
  {
    WebCore::CSSFontFace::setSizeAdjust(*(WebCore::CSSFontFace **)(v10 + 48), v29);
    v16 = v29;
    v29 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = 0;
  }
  else
  {
    v17 = 9;
  }
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (v15)
        goto LABEL_32;
LABEL_38:
      LOBYTE(v29) = v17;
      v30 = 0;
      if (!*(_QWORD *)(v4 + 16))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v30);
        JSC::VM::throwException((JSC::VM *)v4, this, v22);
        v24 = v30;
        v30 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      goto LABEL_32;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v19 = 0;
  v20 = 1;
LABEL_33:
  ((void (*)(WebCore::CSSValue **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v19])(&v29, &v27);
  return v20;
}

uint64_t WebCore::jsFontFace_status(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;

  v2 = *(char *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 48) + 138);
  if (v2 > 4)
    v3 = 3;
  else
    v3 = qword_1968BFAC0[v2];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (uint64_t *)(v4 + 41968);
  if ((byte_1EE335581 & 1) == 0)
  {
    dword_1ECE77A20 += 2;
    byte_1EE335581 = 1;
    dword_1ECE77A40 += 2;
    qword_1EE335718 = (uint64_t)&dword_1ECE77A20;
    unk_1EE335720 = &dword_1ECE77A40;
    dword_1ECE77A60 += 2;
    dword_1ECE77A80 += 2;
    qword_1EE335728 = (uint64_t)&dword_1ECE77A60;
    qword_1EE335730 = (uint64_t)&dword_1ECE77A80;
  }
  v6 = *(_QWORD *)&_MergedGlobals_530[8 * v3 + 408];
  if (!v6)
    return *v5;
  v7 = *(_DWORD *)v6;
  v8 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)v6 += 2;
  if (v8)
  {
    if (v8 != 1)
    {
LABEL_9:
      v9 = *(_QWORD *)(v4 + 64760);
      if (!v9 || v6 != *(_QWORD *)(v9 + 8))
      {
        v9 = JSC::jsStringWithCacheSlowCase();
        v7 = *(_DWORD *)v6 - 2;
      }
      goto LABEL_12;
    }
    v11 = *(unsigned __int8 **)(v6 + 8);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v12 = *v11;
    }
    else
    {
      v13 = *(unsigned __int16 *)v11;
      if (v13 > 0xFF)
        goto LABEL_9;
      v12 = v13;
    }
    v9 = *(_QWORD *)(v4 + 8 * v12 + 42216);
  }
  else
  {
    v9 = *v5;
  }
LABEL_12:
  if (v7)
    *(_DWORD *)v6 = v7;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v6, a2);
  return v9;
}

uint64_t WebCore::jsFontFace_loaded(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  unint64_t v9;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFontFace::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSFontFace::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSFontFace::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFontFace::s_info, a3);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  *(_BYTE *)(v8 + 64) = 1;
  return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::promise(*(_QWORD **)(v8 + 56), v9, a3);
}

uint64_t WebCore::JSFontFaceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSFontFaceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::FontFace *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::FontFace *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::FontFace **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 6);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::FontFace **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::FontFace **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 6) == 1)
  {
    WebCore::FontFace::~FontFace(v3);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 6);
  }
}

unint64_t WebCore::createWrapper<WebCore::FontFace,WebCore::FontFace>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFace::s_info + ~((_QWORD)&WebCore::JSFontFace::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSFontFace::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSFontFace::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSFontFacePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSFontFacePrototype::create((WebCore::JSFontFacePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSFontFace::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSFontFace::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2968);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2968))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2968);
    *(_QWORD *)(v26 + 2968) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2968);
  *(_QWORD *)(v22 + 2968) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3355E0 & 1) == 0)
  {
    qword_1EE3355D8 = (uint64_t)&off_1E327C7D0;
    byte_1EE3355E0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3355D8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::FontFace>(uint64_t a1, uint64_t a2, WebCore::FontFace *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::FontFace *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;
  void *v15;
  WebCore::FontFace *v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::FontFace **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::FontFace **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  v16 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E3399670)
  {
    v12 = WebCore::createWrapper<WebCore::FontFace,WebCore::FontFace>(a2, &v16);
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 1)
      {
        WebCore::FontFace::~FontFace(v16);
        WTF::fastFree(v14, v15);
      }
      else
      {
        --*((_DWORD *)v16 + 6);
      }
    }
    return v12;
  }
  result = 781;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFontFaceSet>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;
  JSValue v10;
  int i;
  unsigned int v12;
  uint64_t IndexQuickly;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSCell *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v23;
  unint64_t v24;
  WTF *v25;
  uint64_t v26;
  void (***v27)(WebCore::FontFaceSet *__hidden);
  void *v28;
  WebCore::JSDOMGlobalObject *v29;
  uint64_t v30;
  WTF *v31;
  WebCore::FontFace *v32;
  WTF *v33;
  void *v34;
  void *v35;
  JSC::JSCell *v36;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v38;
  JSC::JSGlobalObject *v39;
  JSC::VM *v40;
  JSC::JSObject *v41;
  JSC::Structure *v42;
  JSC::VM *FunctionRealm;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  JSC::JSCell *v52;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v54;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t SubclassStructure;
  bmalloc::api *v60;
  void *v61;
  JSValue v62;
  int v64;
  void *v65;
  uint64_t v66;
  WebCore::FontFace *v67;
  WTF *v68;
  void *v69;
  WTF::StringImpl *v70[2];
  int v71;
  JSC::VM *v72;
  WebCore::FontFaceSet *v73;
  WTF *v74;
  uint64_t v75;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v72 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v62.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v62);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v72, (uint64_t)"FontFaceSet", 12);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *((_QWORD *)this + 7);
  v73 = (WebCore::FontFaceSet *)v8;
  if ((v7 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v7 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v15 = v70[0];
    v70[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = 0;
    v17 = 1;
    v71 = 1;
    goto LABEL_68;
  }
  v9 = (WebCore::ScriptExecutionContext *)v6;
  v74 = 0;
  v75 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(v7 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v7 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v7, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v7, this, (i - 1));
      if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::FontFace>>::convert(this, IndexQuickly, (uint64_t)&v74);
      if (*(_QWORD *)(v8 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        goto LABEL_36;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v7, v10);
    if (!*(_DWORD *)(v8 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) == 0)
    {
      while (1)
      {
        v18 = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || v18 == 6)
          break;
        v20 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          v21 = v20;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          v20 = v21;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::FontFace>>::convert(this, v20, (uint64_t)&v74);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_36:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v8 + 80))
  {
    v64 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
    v25 = v74;
    if (v64)
    {
      v71 = 1;
      if (HIDWORD(v75))
      {
        v66 = 8 * HIDWORD(v75);
        do
        {
          v67 = *(WebCore::FontFace **)v25;
          *(_QWORD *)v25 = 0;
          if (v67)
          {
            if (*((_DWORD *)v67 + 6) == 1)
            {
              WebCore::FontFace::~FontFace(v67);
              WTF::fastFree(v68, v69);
            }
            else
            {
              --*((_DWORD *)v67 + 6);
            }
          }
          v25 = (WTF *)((char *)v25 + 8);
          v66 -= 8;
        }
        while (v66);
        v25 = v74;
      }
      if (v25)
      {
        v74 = 0;
        LODWORD(v75) = 0;
        WTF::fastFree(v25, v65);
      }
      v16 = 0;
      v17 = 1;
      goto LABEL_68;
    }
  }
  else
  {
    v25 = v74;
  }
  v26 = HIDWORD(v75);
  v71 = 0;
  v70[0] = 0;
  v70[1] = 0;
  v74 = v25;
  v27 = (void (***)(WebCore::FontFaceSet *__hidden))bmalloc::api::isoAllocate();
  v73 = (WebCore::FontFaceSet *)WebCore::FontFaceSet::FontFaceSet((uint64_t)v27, v9, (uint64_t **)&v74);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v73 + 6);
  if ((_DWORD)v26)
  {
    v30 = 8 * v26;
    v31 = v25;
    do
    {
      v32 = *(WebCore::FontFace **)v31;
      *(_QWORD *)v31 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 6) == 1)
        {
          WebCore::FontFace::~FontFace(v32);
          WTF::fastFree(v33, v34);
        }
        else
        {
          --*((_DWORD *)v32 + 6);
        }
      }
      v31 = (WTF *)((char *)v31 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  if (v25)
    WTF::fastFree(v25, v28);
  if (*v27 != off_1E3399720)
  {
    __break(0xC471u);
    JUMPOUT(0x194B13000);
  }
  v16 = (JSCell *)WebCore::createWrapper<WebCore::FontFaceSet,WebCore::FontFaceSet>(*(JSC::VM **)(v5 + 40), &v73, v29);
  v36 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v36 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v36);
    if (Object)
    {
      v39 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v40 = (JSC::VM *)*((_QWORD *)this + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v38);
        if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
        {
          v44 = *((_QWORD *)FunctionRealm + 412);
          if (v44)
          {
            v45 = *(_DWORD *)(v44 - 8);
            v46 = ((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) >> 22);
            v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
            v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
            v49 = v45 & ((v48 >> 31) ^ v48);
            v50 = *(char ***)(v44 + 16 * v49);
            if (v50 == &WebCore::JSFontFaceSet::s_info)
            {
LABEL_59:
              v41 = *(JSC::JSObject **)(v44 + 16 * v49 + 8);
              if (v41)
              {
LABEL_61:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v39, v41, v42);
                if (!*((_DWORD *)v40 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) == 0)
                  JSC::JSObject::setStructure(v16, v40, SubclassStructure);
                goto LABEL_63;
              }
            }
            else
            {
              v51 = 1;
              while (v50)
              {
                v49 = ((_DWORD)v49 + v51) & v45;
                v50 = *(char ***)(v44 + 16 * v49);
                ++v51;
                if (v50 == &WebCore::JSFontFaceSet::s_info)
                  goto LABEL_59;
              }
            }
          }
          v52 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v40, FunctionRealm, v41);
          Structure = WebCore::JSFontFaceSetPrototype::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v52);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v56 = (JSC::JSCell *)WebCore::JSFontFaceSetPrototype::create(v40, Structure, v54, v55);
          v57 = WebCore::JSFontFaceSet::createStructure((uint64_t *)v40, (uint64_t)FunctionRealm, v56);
          v41 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v57, (uint64_t)&WebCore::JSFontFaceSet::s_info);
          goto LABEL_61;
        }
      }
    }
  }
LABEL_63:
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    v16 = 0;
  if (v73)
  {
    if (*((_DWORD *)v73 + 4) == 1)
    {
      WebCore::FontFaceSet::~FontFaceSet(v73, v35);
      bmalloc::api::isoDeallocate(v60, v61);
    }
    else
    {
      --*((_DWORD *)v73 + 4);
    }
  }
  v17 = v71;
  if (v71 != -1)
LABEL_68:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E327D9A0[v17])(&v74, v70);
  return v16;
}

uint64_t WebCore::JSFontFaceSet::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFontFaceSetPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFontFaceSetPrototype::create(WebCore::JSFontFaceSetPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(this, (uint64_t)&WebCore::JSFontFaceSet::s_info, (uint64_t)&WebCore::JSFontFaceSetPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFontFaceSet>,(WebCore::DOMConstructorID)367>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2936);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSFontFaceSet>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFontFaceSet::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFontFaceSet::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFontFaceSetPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSFontFaceSetPrototype::create((WebCore::JSFontFaceSetPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSFontFaceSet::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSFontFaceSet::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2936) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFontFaceSetConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFontFaceSetPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFontFaceSet>,(WebCore::DOMConstructorID)367>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsFontFaceSet_size(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 120);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 80);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (!*(_BYTE *)(v6 + 178))
          {
            *(_DWORD *)(v6 - 264) += 2;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v6 - 288));
            if (*(_DWORD *)(v6 - 264) == 2)
            {
              if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v7);
            }
            else
            {
              *(_DWORD *)(v6 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  return *(unsigned int *)(*(_QWORD *)(v2 + 48) + 36) | 0xFFFE000000000000;
}

uint64_t WebCore::jsFontFaceSet_onloading(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1136), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet((WebCore *)((char *)v5 - 24), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSFontFaceSet_onloading(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFontFaceSet::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFontFaceSet::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1136), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet((WebCore::EventTarget *)((char *)v11 - 24), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFontFaceSet_onloadingdone(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1144), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet((WebCore *)((char *)v5 - 24), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSFontFaceSet_onloadingdone(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFontFaceSet::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFontFaceSet::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1144), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet((WebCore::EventTarget *)((char *)v11 - 24), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFontFaceSet_onloadingerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1152), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::FontFaceSet::~FontFaceSet((WebCore *)((char *)v5 - 24), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSFontFaceSet_onloadingerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSFontFaceSet::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSFontFaceSet::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1152), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet((WebCore::EventTarget *)((char *)v11 - 24), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsFontFaceSet_ready(JSC::JSGlobalObject *a1, uint64_t a2, JSC::Structure *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  unint64_t v16;
  uint64_t v17;
  WebCore::DOMGuardedObject *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned __int8 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38[8];
  WTF::StringImpl *v39;
  objc_class *v40;

  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &WebCore::JSFontFaceSet::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &WebCore::JSFontFaceSet::s_info && v5 != 0);
    }
    if (v4)
    {
      v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
      v9 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 64);
      v10 = *((unsigned int *)v9 + 13);
      if ((_DWORD)v10)
      {
        v11 = v9[5];
        v12 = 8 * v10;
        while (1)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 + 32);
          if (v13)
          {
            if ((*(_BYTE *)(v13 + 8) & 3) == 0 && *(_QWORD *)v13 == v8)
              break;
          }
          v11 += 8;
          v12 -= 8;
          if (!v12)
            goto LABEL_18;
        }
        v26 = *(_BYTE **)(*(_QWORD *)v11 + 24);
        if (!v26)
          return 10;
        v27 = *(_QWORD *)v26;
        if (!*(_QWORD *)v26 || (v26[8] & 3) != 0)
          return 10;
        if ((v27 & 0xFFFE000000000002) != 0)
          return 0;
        if (*(_BYTE *)(v27 + 5) == 68)
          return *(_QWORD *)v26;
        return 0;
      }
LABEL_18:
      v14 = *(_DWORD *)(v8 + 1164);
      if (v14)
        v15 = (JSC::VM *)(16 * (v14 & 0xFFFFFFFE));
      else
        v15 = 0;
      v16 = JSC::JSPromise::create(*(JSC::JSPromise **)(v8 + 56), v15, a3);
      v17 = WTF::fastMalloc((WTF *)0x30);
      v18 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v17, v8, v16);
      *(_QWORD *)v18 = &off_1E3226868;
      *((_DWORD *)v18 + 10) = 1;
      *((_BYTE *)v18 + 44) = 0;
      v19 = *((unsigned int *)v9 + 13);
      if ((_DWORD)v19 == *((_DWORD *)v9 + 12))
      {
        v20 = v19 + (v19 >> 2);
        if (v20 >= 0x10)
          v21 = v20 + 1;
        else
          v21 = 16;
        if (v21 <= v19 + 1)
          v22 = v19 + 1;
        else
          v22 = v21;
        v23 = (_QWORD *)v9[5];
        if (v22 < 2)
        {
          v24 = v9 + 7;
          v9[5] = v9 + 7;
          *((_DWORD *)v9 + 12) = 1;
        }
        else
        {
          if (v22 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B14454);
          }
          v24 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
          *((_DWORD *)v9 + 12) = v22;
          v9[5] = v24;
        }
        memcpy(v24, v23, 8 * v19);
        if (v9 + 7 != v23 && v23)
        {
          if ((_QWORD *)v9[5] == v23)
          {
            v9[5] = 0;
            *((_DWORD *)v9 + 12) = 0;
          }
          WTF::fastFree((WTF *)v23, v29);
        }
        v19 = *((unsigned int *)v9 + 13);
        v25 = (uint64_t *)(v9[5] + 8 * v19);
      }
      else
      {
        v25 = (uint64_t *)(v9[5] + 8 * v19);
      }
      ++*(_DWORD *)(v17 + 16);
      *v25 = v17;
      *((_DWORD *)v9 + 13) = v19 + 1;
      if (!*((_BYTE *)v9 + 32))
        goto LABEL_50;
      if (!*((_BYTE *)v9 + 24))
      {
        v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFaceSet>>(v17, v34);
        goto LABEL_50;
      }
      v30 = *((_BYTE *)v9 + 8);
      v31 = (WTF::StringImpl *)v9[2];
      if (v31)
        *(_DWORD *)v31 += 4;
      v39 = v31;
      v40 = 0;
      v38[0] = v30;
      WebCore::DeferredPromise::reject(v17, v38, 0, &v40);
      v33 = v39;
      v39 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v32);
          if (v31)
          {
LABEL_47:
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
LABEL_50:
          v35 = *(_QWORD *)(v17 + 24);
          if (v35 && (v36 = *(_QWORD *)v35) != 0 && (*(_BYTE *)(v35 + 8) & 3) == 0)
          {
            if ((v36 & 0xFFFE000000000002) != 0)
            {
              v28 = 0;
            }
            else if (*(_BYTE *)(v36 + 5) == 68)
            {
              v28 = *(_QWORD *)v35;
            }
            else
            {
              v28 = 0;
            }
          }
          else
          {
            v28 = 10;
          }
          if (*(_DWORD *)(v17 + 16) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
          else
            --*(_DWORD *)(v17 + 16);
          return v28;
        }
        *(_DWORD *)v33 -= 2;
      }
      if (v31)
        goto LABEL_47;
      goto LABEL_50;
    }
  }
  return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSFontFaceSet::s_info, a3);
}

uint64_t WebCore::jsFontFaceSet_status(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;

  v3 = a2[3];
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 120);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 80);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          if (!*(_BYTE *)(v7 + 178))
          {
            *(_DWORD *)(v7 - 264) += 2;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v7 - 288));
            if (*(_DWORD *)(v7 - 264) == 2)
            {
              if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), a2);
            }
            else
            {
              *(_DWORD *)(v7 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  v8 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 80);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (uint64_t *)(v9 + 41968);
  if ((byte_1EE335582 & 1) == 0)
  {
    dword_1ECE77AA0 += 2;
    byte_1EE335582 = 1;
    qword_1EE3356D8 = (uint64_t)&dword_1ECE77AA0;
    dword_1ECE77AC0 += 2;
    qword_1EE3356E0 = (uint64_t)&dword_1ECE77AC0;
  }
  v11 = *(_QWORD *)&_MergedGlobals_530[8 * (v8 != 0) + 344];
  if (!v11)
    return *v10;
  v12 = *(_DWORD *)v11;
  v13 = *(_DWORD *)(v11 + 4);
  *(_DWORD *)v11 += 2;
  if (v13)
  {
    if (v13 != 1)
    {
LABEL_13:
      v14 = *(_QWORD *)(v9 + 64760);
      if (!v14 || v11 != *(_QWORD *)(v14 + 8))
      {
        v14 = JSC::jsStringWithCacheSlowCase();
        v12 = *(_DWORD *)v11 - 2;
      }
      goto LABEL_16;
    }
    v16 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v17 = *v16;
    }
    else
    {
      v18 = *(unsigned __int16 *)v16;
      if (v18 > 0xFF)
        goto LABEL_13;
      v17 = v18;
    }
    v14 = *(_QWORD *)(v9 + 8 * v17 + 42216);
  }
  else
  {
    v14 = *v10;
  }
LABEL_16:
  if (v12)
    *(_DWORD *)v11 = v12;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
  return v14;
}

uint64_t WebCore::JSDOMIteratorBase<WebCore::JSFontFaceSet,WebCore::FontFaceSetIteratorTraits>::destroy(uint64_t result, void *a2)
{
  uint64_t v2;
  bmalloc::api *v3;
  void *v4;

  if (*(_BYTE *)(result + 40))
  {
    v2 = result;
    result = *(_QWORD *)(result + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)result, a2);
        return bmalloc::api::isoDeallocate(v3, v4);
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSFontFaceSetOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[4];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[5] || (result = (*(uint64_t (**)(_QWORD *))(v5[3] + 64))(v5 + 3), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSFontFaceSetOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::FontFaceSet *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::FontFaceSet *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::FontFaceSet *)(v3 - 24);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::FontFaceSet **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::FontFaceSet **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::FontFaceSet::~FontFaceSet(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::createWrapper<WebCore::FontFaceSet,WebCore::FontFaceSet>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) ^ (((unint64_t)&WebCore::JSFontFaceSet::s_info + ~((_QWORD)&WebCore::JSFontFaceSet::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSFontFaceSet::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSFontFaceSet::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSFontFaceSetPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSFontFaceSetPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSFontFaceSet::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSFontFaceSet::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 2976);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 2976);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 2976);
    *(_QWORD *)(v28 + 2976) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 2976);
  *(_QWORD *)(v24 + 2976) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 24;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE3355F0 & 1) == 0)
  {
    qword_1EE3355E8 = (uint64_t)&off_1E327C800;
    byte_1EE3355F0 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 32);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3355E8;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE3355E8;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::FontFaceSet>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t result;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::FontFaceSet *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_5;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 32);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  v18 = (WebCore::FontFaceSet *)a3;
  if (*(void (***)(WebCore::FontFaceSet *__hidden))a3 == off_1E3399720)
  {
    v5 = WebCore::createWrapper<WebCore::FontFaceSet,WebCore::FontFaceSet>(a2, &v18, (WebCore::JSDOMGlobalObject *)a3);
    if (v18)
    {
      if (*((_DWORD *)v18 + 4) == 1)
      {
        WebCore::FontFaceSet::~FontFaceSet(v18, v6);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*((_DWORD *)v18 + 4);
      }
    }
    return v5;
  }
  result = 688;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSFormDataEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  _BOOL4 v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  _BOOL4 v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSCell *v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WebCore::JSDOMGlobalObject *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  JSC::VM *v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  int v47;
  unint64_t v48;
  WebCore::JSEvent *v49;
  JSC::JSCell *v50;
  unint64_t Structure;
  JSC::Structure *v52;
  JSC::JSCell *v53;
  uint64_t v54;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *v56;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  unint64_t SubclassStructure;
  JSC::VM *v77;
  JSValue v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  int *v82;
  int v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  int *v87;
  int v88;
  BOOL v89;
  int v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  JSC::VM *v95;
  _BOOL4 v96;
  WTF::StringImpl *v97[2];
  int v98;
  WTF::StringImpl *v99;
  int v100;
  JSC::VM *v101;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v78.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v78);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v99);
  v6 = v100;
  if (!v100)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v101 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v101, "formData", 9, "FormDataEventInit", 18, "DOMFormData", 12);
      goto LABEL_47;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_46:
      JSC::throwTypeError();
      goto LABEL_47;
    }
    v9 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get(v9, a1, (unint64_t)v97[0]);
    if (v97[0])
    {
      if (*(_DWORD *)v97[0] == 2)
        WTF::StringImpl::destroy(v97[0], v10);
      else
        *(_DWORD *)v97[0] -= 2;
    }
    if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    {
LABEL_47:
      v27 = 0;
      v28 = 1;
      v98 = 1;
LABEL_48:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E327DC78[v28])(&v101, v97);
      v6 = v100;
      goto LABEL_49;
    }
    if (v11 != 10)
    {
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
      {
        v79 = (_DWORD)v11 == 0;
        goto LABEL_168;
      }
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v13 > 0.0 || v13 < 0.0;
      }
      else if ((v11 & 0xFFFE000000000002) != 0)
      {
        v14 = v11 == 7;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v11 + 5);
        if (v80 == 3)
          goto LABEL_152;
        if (v80 == 2)
        {
          v81 = *(_QWORD *)(v11 + 8);
          if ((v81 & 1) != 0)
            v82 = (int *)(v11 + 16);
          else
            v82 = (int *)(v81 + 4);
          v83 = *v82;
          goto LABEL_153;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v79 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_168;
        }
        v14 = 1;
      }
      goto LABEL_16;
    }
    v96 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v16 = JSC::JSObject::get(v9, a1, (unint64_t)v97[0]);
      if (v97[0])
      {
        if (*(_DWORD *)v97[0] == 2)
          WTF::StringImpl::destroy(v97[0], v15);
        else
          *(_DWORD *)v97[0] -= 2;
      }
      if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
        goto LABEL_47;
      if (v16 == 10)
      {
        v17 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = v16 == 7;
          goto LABEL_27;
        }
        v85 = *(unsigned __int8 *)(v16 + 5);
        if (v85 == 3)
        {
          v88 = *(_DWORD *)(v16 + 8);
          goto LABEL_157;
        }
        if (v85 == 2)
        {
          v86 = *(_QWORD *)(v16 + 8);
          if ((v86 & 1) != 0)
            v87 = (int *)(v16 + 16);
          else
            v87 = (int *)(v86 + 4);
          v88 = *v87;
LABEL_157:
          v84 = v88 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_159:
            v17 = 1;
            goto LABEL_27;
          }
          v84 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_172:
        v17 = !v84;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_159;
      v17 = v19 < 0.0;
LABEL_27:
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_47;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get(v9, a1, (unint64_t)v97[0]);
      if (v97[0])
      {
        if (*(_DWORD *)v97[0] == 2)
          WTF::StringImpl::destroy(v97[0], v20);
        else
          *(_DWORD *)v97[0] -= 2;
      }
      if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
        goto LABEL_47;
      if (v21 == 10)
      {
        v22 = 0;
        goto LABEL_39;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v21 >= 0xFFFE000000000000)
      {
        v89 = (_DWORD)v21 == 0;
        goto LABEL_162;
      }
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          v22 = v21 == 7;
          goto LABEL_38;
        }
        v90 = *(unsigned __int8 *)(v21 + 5);
        if (v90 == 3)
        {
          v93 = *(_DWORD *)(v21 + 8);
        }
        else
        {
          if (v90 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_166:
              v22 = 1;
              goto LABEL_38;
            }
            v89 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_162;
          }
          v91 = *(_QWORD *)(v21 + 8);
          if ((v91 & 1) != 0)
            v92 = (int *)(v21 + 16);
          else
            v92 = (int *)(v91 + 4);
          v93 = *v92;
        }
        v89 = v93 == 0;
LABEL_162:
        v22 = !v89;
        goto LABEL_38;
      }
      if (v24 > 0.0)
        goto LABEL_166;
      v22 = v24 < 0.0;
LABEL_38:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_47;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      v11 = (unint64_t)v97[0];
      v9 = (JSC::Structure *)JSC::JSObject::get(v9, a1, (unint64_t)v97[0]);
      if (v97[0])
      {
        if (*(_DWORD *)v97[0] == 2)
          WTF::StringImpl::destroy(v97[0], v25);
        else
          *(_DWORD *)v97[0] -= 2;
      }
      if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
        goto LABEL_47;
      if (v9 == (JSC::Structure *)10)
        goto LABEL_44;
      v95 = v3;
      v97[0] = *((WTF::StringImpl **)a1 + 7);
      v26 = JSC::jsDynamicCast<WebCore::JSDOMFormData *>((unint64_t)v9);
      if (!v26)
        goto LABEL_46;
      v3 = *(JSC::VM **)(v26 + 24);
      if (!v3)
        goto LABEL_46;
      v94 = v5;
      ++*((_DWORD *)v3 + 4);
      v5 = v96;
      LOBYTE(v97[0]) = v96;
      BYTE1(v97[0]) = v17;
      BYTE2(v97[0]) = v22;
      v98 = 0;
      if (!v100)
      {
        v30 = v99;
        v99 = 0;
        v97[1] = 0;
        v31 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v31);
        *(_QWORD *)(v31 + 8) = 0;
        if (v17)
          v35 = 4;
        else
          v35 = 0;
        if (v22)
          v36 = 8;
        else
          v36 = 0;
        if (v96)
          v37 = 2195458;
        else
          v37 = 2195456;
        v38 = v37 | v35 | v36 | (v30 != 0) | *(_DWORD *)(v31 + 20) & 0xFFC00000;
        *(_DWORD *)(v31 + 16) = 1;
        *(_DWORD *)(v31 + 20) = v38;
        if (v30)
        {
          *(_DWORD *)v30 += 2;
          v38 = *(_DWORD *)(v31 + 20);
        }
        *(_QWORD *)(v31 + 24) = v30;
        *(_QWORD *)(v31 + 32) = 0;
        *(_QWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = v34;
        *(_DWORD *)(v31 + 20) = v38 | 0x4000;
        *(_QWORD *)v31 = off_1E33A4E58;
        *(_QWORD *)(v31 + 64) = 0;
        *(_QWORD *)(v31 + 72) = v3;
        v101 = (JSC::VM *)v31;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, v32);
            if (*(void (***)(WebCore::FormDataEvent *__hidden))v31 != off_1E33A4E58)
            {
              __break(0xC471u);
              JUMPOUT(0x194B155D8);
            }
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
        v39 = *(JSC::VM **)(v94 + 40);
        v40 = *((_QWORD *)v39 + 412);
        if (!v40)
          goto LABEL_78;
        v41 = *(_DWORD *)(v40 - 8);
        v42 = ((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) >> 22);
        v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
        v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
        v45 = v41 & ((v44 >> 31) ^ v44);
        v46 = *(char ***)(v40 + 16 * v45);
        if (v46 == &WebCore::JSFormDataEvent::s_info)
        {
LABEL_77:
          v48 = *(_QWORD *)(v40 + 16 * v45 + 8);
          if (!v48)
            goto LABEL_78;
        }
        else
        {
          v47 = 1;
          while (v46)
          {
            v45 = ((_DWORD)v45 + v47) & v41;
            v46 = *(char ***)(v40 + 16 * v45);
            ++v47;
            if (v46 == &WebCore::JSFormDataEvent::s_info)
              goto LABEL_77;
          }
LABEL_78:
          v49 = (WebCore::JSEvent *)*((_QWORD *)v39 + 7);
          v50 = (JSC::JSCell *)WebCore::JSEvent::prototype(v49, *(JSC::VM **)(v94 + 40), v33);
          Structure = WebCore::JSFormDataEventPrototype::createStructure((uint64_t *)v49, (uint64_t)v39, v50);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v53 = (JSC::JSCell *)WebCore::JSFormDataEventPrototype::create(v49, v39, Structure, v52);
          v54 = WebCore::JSFormDataEvent::createStructure((uint64_t *)v49, (uint64_t)v39, v53);
          v48 = WebCore::cacheDOMStructure((JSCell *)v39, v54, (uint64_t)&WebCore::JSFormDataEvent::s_info);
        }
        v27 = (JSCell *)WebCore::JSFormDataEvent::create(v48, v39, (uint64_t *)&v101);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v39 + 415), v31, (uint64_t)v27);
        v55 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v55 & 0xFFFE000000000002) != 0
          || (v56 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55)) == 0
          || (v58 = v56, v56 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v59 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v56, v57),
              *((_DWORD *)v59 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
        {
LABEL_92:
          if (*((_DWORD *)v95 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v95) & 1) != 0)
            v27 = 0;
          v77 = v101;
          v101 = 0;
          if (v77)
          {
            if (*((_DWORD *)v77 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v77 + 8))(v77);
            else
              --*((_DWORD *)v77 + 4);
          }
          v28 = 0;
          goto LABEL_48;
        }
        v63 = *((_QWORD *)FunctionRealm + 412);
        if (v63)
        {
          v64 = *(_DWORD *)(v63 - 8);
          v65 = ((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) >> 22);
          v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
          v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
          v68 = v64 & ((v67 >> 31) ^ v67);
          v69 = *(char ***)(v63 + 16 * v68);
          if (v69 != &WebCore::JSFormDataEvent::s_info)
          {
            v70 = 1;
            while (v69)
            {
              v68 = ((_DWORD)v68 + v70) & v64;
              v69 = *(char ***)(v63 + 16 * v68);
              ++v70;
              if (v69 == &WebCore::JSFormDataEvent::s_info)
                goto LABEL_88;
            }
            goto LABEL_89;
          }
LABEL_88:
          v60 = *(WebCore::JSDOMGlobalObject **)(v63 + 16 * v68 + 8);
          if (!v60)
            goto LABEL_89;
        }
        else
        {
LABEL_89:
          v71 = (JSC::JSCell *)WebCore::JSEvent::prototype(v59, FunctionRealm, v60);
          v72 = WebCore::JSFormDataEventPrototype::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v71);
          *(_DWORD *)(v72 + 16) |= 0x80000u;
          v74 = (JSC::JSCell *)WebCore::JSFormDataEventPrototype::create(v59, FunctionRealm, v72, v73);
          v75 = WebCore::JSFormDataEvent::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v74);
          v60 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v75, (uint64_t)&WebCore::JSFormDataEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v58, v60, v61);
        if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
          JSC::JSObject::setStructure(v27, v59, SubclassStructure);
        goto LABEL_92;
      }
      v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_152:
      v83 = *(_DWORD *)(v11 + 8);
LABEL_153:
      v79 = v83 == 0;
LABEL_168:
      v14 = !v79;
LABEL_16:
      v96 = v14;
      if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
        goto LABEL_47;
    }
    v84 = (_DWORD)v16 == 0;
    goto LABEL_172;
  }
  v27 = 0;
LABEL_49:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E327D710[v6])(v97, &v99);
  return v27;
}

uint64_t WebCore::JSFormDataEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFormDataEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFormDataEventPrototype::create(WebCore::JSFormDataEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSFormDataEvent::s_info, (uint64_t)&WebCore::JSFormDataEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFormDataEvent>,(WebCore::DOMConstructorID)452>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3616);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSFormDataEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSFormDataEvent::s_info + ~((_QWORD)&WebCore::JSFormDataEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSFormDataEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSFormDataEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSFormDataEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSFormDataEventPrototype::create((WebCore::JSFormDataEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSFormDataEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSFormDataEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3616) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFormDataEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFormDataEventPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSFormDataEvent>,(WebCore::DOMConstructorID)452>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsFormDataEvent_formData(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::DOMFormData>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::JSFormDataEvent::subspaceForImpl(WebCore::JSFormDataEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3696);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 3696))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 3696);
    *(_QWORD *)(v8 + 3696) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 3696);
  *(_QWORD *)(v3 + 3696) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD *WebCore::JSFragmentDirective::destroy(WebCore::JSFragmentDirective *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSFragmentDirective::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSFragmentDirectivePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSFragmentDirectivePrototype::create(WebCore::JSFragmentDirectivePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSFragmentDirective::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSFragmentDirectivePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFragmentDirective>,(WebCore::DOMConstructorID)714>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5712);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSFragmentDirective>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSFragmentDirective::s_info
         + ~((_QWORD)&WebCore::JSFragmentDirective::s_info << 32)) ^ (((unint64_t)&WebCore::JSFragmentDirective::s_info
                                                                     + ~((_QWORD)&WebCore::JSFragmentDirective::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSFragmentDirective::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSFragmentDirective::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSFragmentDirectivePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFragmentDirectivePrototype::create((WebCore::JSFragmentDirectivePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSFragmentDirective::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFragmentDirective::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5712) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsFragmentDirectiveConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSFragmentDirectivePrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSFragmentDirective>,(WebCore::DOMConstructorID)714>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSFragmentDirectiveOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSFragmentDirectiveOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::FragmentDirective>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::FragmentDirective *__hidden))a3 != off_1E33A3368)
  {
    __break(0xC471u);
    JUMPOUT(0x194B17150);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSFragmentDirective::s_info
         + ~((_QWORD)&WebCore::JSFragmentDirective::s_info << 32)) ^ (((unint64_t)&WebCore::JSFragmentDirective::s_info
                                                                     + ~((_QWORD)&WebCore::JSFragmentDirective::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSFragmentDirective::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSFragmentDirective::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSFragmentDirectivePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSFragmentDirectivePrototype::create((WebCore::JSFragmentDirectivePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSFragmentDirective::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSFragmentDirective::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5792);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5792))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5792);
    *(_QWORD *)(v36 + 5792) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5792);
  *(_QWORD *)(v32 + 5792) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335600 & 1) == 0)
  {
    qword_1EE3355F8 = (uint64_t)&off_1E327C830;
    byte_1EE335600 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3355F8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::FullscreenOptions>@<X0>(WebCore::JSDOMGlobalObject *this@<X0>, JSC::JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *Object;
  uint64_t v8;
  uint64_t result;
  __int16 v10;
  __int16 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  int v18;
  int v19;
  char **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v24;
  int v25;
  const char *v26;
  int v27;
  BOOL v28;
  int v29;
  char **v31;
  int v32;
  int v33;
  JSC::VM *v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v5;
  v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else
  {
    if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
      goto LABEL_107;
    Object = (JSC::Structure *)JSC::JSCell::getObject(a2);
    if (!Object)
      goto LABEL_107;
  }
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  if ((*(_QWORD *)(result + 472) & 0x100000000000000) == 0)
  {
    v10 = 0;
    v11 = 0;
    if (v6 == 2)
      goto LABEL_86;
    goto LABEL_37;
  }
  if (v6 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = JSC::JSObject::get(Object, this, (unint64_t)v40);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v12);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((result & 1) != 0)
        goto LABEL_108;
    }
    if (v13 == 10)
    {
      v10 = 0;
      goto LABEL_37;
    }
    v14 = (JSC::VM *)*((_QWORD *)this + 7);
    v40 = (WTF::StringImpl *)v13;
    if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this);
      v15 = v39;
      if (v39)
        goto LABEL_22;
      goto LABEL_106;
    }
    v15 = *(_QWORD *)(v13 + 8);
    if ((v15 & 1) != 0)
    {
      v15 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v15)
      {
LABEL_21:
        v39 = v15;
        if (v15)
        {
LABEL_22:
          v16 = *(_DWORD *)(v15 + 16);
          v17 = *(const char **)(v15 + 8);
          v18 = *(_DWORD *)(v15 + 4);
          if (v17 != "browser" && v18 == 7)
          {
            if ((v16 & 4) != 0)
            {
              if (*v17 != 98 || *(_DWORD *)(v17 + 1) != 1937207154 || *(_DWORD *)(v17 + 3) != 1919251319)
                goto LABEL_28;
              goto LABEL_31;
            }
            if (*(_WORD *)v17 == 98)
            {
              v19 = 0;
              if (*(_QWORD *)(v17 + 2) == 0x730077006F0072)
              {
                v10 = 0;
                if (*(_QWORD *)(v17 + 6) != 0x72006500730077)
                  goto LABEL_33;
LABEL_31:
                v20 = &WebCore::parseEnumerationFromString<WebCore::FullscreenOptions::KeyboardLock>(WTF::String const&)::mappings;
LABEL_32:
                v10 = *((unsigned __int8 *)v20 + 16);
                v19 = 1;
                goto LABEL_33;
              }
LABEL_139:
              v10 = 0;
              goto LABEL_33;
            }
LABEL_28:
            v19 = 0;
            v10 = 0;
            goto LABEL_33;
          }
          if (v17 == "browser" && v18 == 7)
            goto LABEL_31;
          if (v17 == "none" || v18 != 4)
          {
            if (v17 != "none" || v18 != 4)
            {
              if (v17 == "system" || v18 != 6)
              {
                if (v18 != 6 || v17 != "system")
                  goto LABEL_28;
              }
              else if ((v16 & 4) != 0)
              {
                if (*v17 != 115 || *(_DWORD *)(v17 + 1) != 1702130553 || *(_DWORD *)(v17 + 2) != 1835365491)
                  goto LABEL_28;
              }
              else
              {
                if (*(_WORD *)v17 != 115)
                  goto LABEL_28;
                if (*(_QWORD *)(v17 + 4) != 0x6D006500740073 || *(_QWORD *)(v17 + 2) != 0x65007400730079)
                  goto LABEL_28;
              }
              v20 = &off_1E3279978;
              goto LABEL_32;
            }
          }
          else if ((v16 & 4) != 0)
          {
            if (*v17 != 110 || *(_WORD *)(v17 + 1) != 28271 || *((_WORD *)v17 + 1) != 25966)
              goto LABEL_28;
          }
          else
          {
            if (*(_WORD *)v17 != 110)
              goto LABEL_28;
            v19 = 0;
            if (*(_DWORD *)(v17 + 2) != 7209071)
              goto LABEL_139;
            v10 = 0;
            if (*((_DWORD *)v17 + 1) != 6619246)
            {
LABEL_33:
              v39 = 0;
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v15, v12);
              else
                *(_DWORD *)v15 -= 2;
LABEL_35:
              if (*((_DWORD *)v14 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
                if ((result & 1) != 0)
                  goto LABEL_108;
              }
              if (!v19)
                goto LABEL_107;
LABEL_37:
              WTF::AtomStringImpl::addLiteral();
              v21 = v40;
              v23 = JSC::JSObject::get(Object, this, (unint64_t)v40);
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy(v21, v22);
                else
                  *(_DWORD *)v21 -= 2;
              }
              result = (uint64_t)v38;
              if (*((_DWORD *)v38 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
                if ((result & 1) != 0)
                  goto LABEL_108;
              }
              if (v23 == 10)
                goto LABEL_42;
              v24 = (JSC::VM *)*((_QWORD *)this + 7);
              v40 = (WTF::StringImpl *)v23;
              if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v40, this);
                result = v39;
                if (v39)
                  goto LABEL_49;
                goto LABEL_103;
              }
              result = *(_QWORD *)(v23 + 8);
              if ((result & 1) != 0)
              {
                result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, this);
                if (!result)
                {
LABEL_48:
                  if (result)
                  {
LABEL_49:
                    v25 = *(_DWORD *)(result + 16);
                    v26 = *(const char **)(result + 8);
                    v27 = *(_DWORD *)(result + 4);
                    v28 = v27 != 4;
                    if (v26 != "auto" && v27 == 4)
                    {
                      if ((v25 & 4) != 0)
                      {
                        if (*v26 != 97 || *(_WORD *)(v26 + 1) != 29813 || *((_WORD *)v26 + 1) != 28532)
                          goto LABEL_55;
                      }
                      else
                      {
                        if (*(_WORD *)v26 != 97)
                        {
LABEL_55:
                          v29 = 4;
                          goto LABEL_56;
                        }
                        v29 = 4;
                        if (*(_DWORD *)(v26 + 2) != 7602293 || *((_DWORD *)v26 + 1) != 7274612)
                          goto LABEL_56;
                      }
LABEL_76:
                      v31 = &WebCore::parseEnumerationFromString<WebCore::FullscreenOptions::NavigationUI>(WTF::String const&)::mappings;
                      goto LABEL_81;
                    }
                    if (v26 == "auto")
                    {
                      v29 = *(_DWORD *)(result + 4);
                      if (v27 == 4)
                        goto LABEL_76;
                    }
                    else
                    {
                      v29 = *(_DWORD *)(result + 4);
                    }
LABEL_56:
                    if (v26 == "hide" || v27 != 4)
                    {
                      if (v26 == "hide" && v27 == 4)
                        goto LABEL_80;
                    }
                    else
                    {
                      if (!v29)
                        goto LABEL_80;
                      if ((v25 & 4) != 0)
                      {
                        if (*v26 != 104 || *(_WORD *)(v26 + 1) != 25705 || *((_WORD *)v26 + 1) != 25956)
                          goto LABEL_65;
LABEL_80:
                        v31 = &off_1E3279918;
                        goto LABEL_81;
                      }
                      if (*(_WORD *)v26 == 104 && *(_DWORD *)(v26 + 2) == 6553705 && *((_DWORD *)v26 + 1) == 6619236)
                        goto LABEL_80;
                    }
LABEL_65:
                    if (v26 == "show")
                      v28 = 1;
                    if (v28)
                    {
                      if (v27 == 4 && v26 == "show")
                        goto LABEL_73;
                    }
                    else
                    {
                      if (!v29)
                      {
LABEL_73:
                        v31 = &off_1E3279930;
LABEL_81:
                        v11 = *((unsigned __int8 *)v31 + 16);
                        v32 = 1;
                        goto LABEL_82;
                      }
                      if ((v25 & 4) != 0)
                      {
                        if (*v26 == 115 && *(_WORD *)(v26 + 1) == 28520 && *((_WORD *)v26 + 1) == 30575)
                          goto LABEL_73;
                      }
                      else if (*(_WORD *)v26 == 115
                             && *((_DWORD *)v26 + 1) == 7798895
                             && *(_DWORD *)(v26 + 2) == 7274600)
                      {
                        goto LABEL_73;
                      }
                    }
                    v32 = 0;
                    v11 = 0;
LABEL_82:
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
                    else
                      *(_DWORD *)result -= 2;
                    goto LABEL_84;
                  }
LABEL_103:
                  v11 = 0;
                  v32 = 0;
LABEL_84:
                  if (*((_DWORD *)v24 + 20))
                  {
                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
                    if ((result & 1) != 0)
                      goto LABEL_108;
                  }
                  if (v32)
                    goto LABEL_86;
LABEL_107:
                  result = JSC::throwTypeError();
LABEL_108:
                  v33 = 1;
                  goto LABEL_87;
                }
              }
              else if (!result)
              {
                goto LABEL_48;
              }
              *(_DWORD *)result += 2;
              goto LABEL_48;
            }
          }
          v20 = &off_1E3279960;
          goto LABEL_32;
        }
LABEL_106:
        v10 = 0;
        v19 = 0;
        goto LABEL_35;
      }
    }
    else if (!v15)
    {
      goto LABEL_21;
    }
    *(_DWORD *)v15 += 2;
    goto LABEL_21;
  }
  v10 = 0;
LABEL_42:
  v11 = 0;
LABEL_86:
  v33 = 0;
  *(_WORD *)a3 = v11 | (v10 << 8);
LABEL_87:
  *(_DWORD *)(a3 + 4) = v33;
  return result;
}

WebCore::GPU *WebCore::JSGPU::destroy(WebCore::JSGPU *this, JSC::JSCell *a2)
{
  WebCore::GPU *result;
  WTF *v4;
  void *v5;

  result = (WebCore::GPU *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::GPU::~GPU(result, a2);
      return (WebCore::GPU *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSGPU::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUPrototype::create(WebCore::JSGPUPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSGPU::s_info, &WebCore::JSGPUPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPU>,(WebCore::DOMConstructorID)8>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 64);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPU>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPU::s_info + ~((_QWORD)&WebCore::JSGPU::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPU::s_info + ~((_QWORD)&WebCore::JSGPU::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPU::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPU::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUPrototype::create((WebCore::JSGPUPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPU::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPU::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 64) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUPrototype::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPU>,(WebCore::DOMConstructorID)8>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGPU_wgslLanguageFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  void *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(WTF **)(v2 + 48);
  ++*(_DWORD *)v4;
  v6 = WebCore::wrap<WebCore::WGSLLanguageFeatures>(a1, v3, v4);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, v5);
  else
    --*(_DWORD *)v4;
  return v6;
}

uint64_t WebCore::JSGPUOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::GPU *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::GPU *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::GPU **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::GPU **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::GPU **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::GPU::~GPU(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPU>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPU::s_info + ~((_QWORD)&WebCore::JSGPU::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPU::s_info + ~((_QWORD)&WebCore::JSGPU::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPU::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPU::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUPrototype::create((WebCore::JSGPUPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPU::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPU::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 64);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 64))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 64);
    *(_QWORD *)(v36 + 64) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 64);
  *(_QWORD *)(v32 + 64) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335610 & 1) == 0)
  {
    qword_1EE335608 = (uint64_t)&off_1E327C860;
    byte_1EE335610 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335608;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGPUAdapter::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUAdapter::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUAdapterPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUAdapterPrototype::create(WebCore::JSGPUAdapterPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSGPUAdapter::s_info, (uint64_t)&WebCore::JSGPUAdapterPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapter>,(WebCore::DOMConstructorID)9>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 72);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapter>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUAdapter::s_info + ~((_QWORD)&WebCore::JSGPUAdapter::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUAdapter::s_info + ~((_QWORD)&WebCore::JSGPUAdapter::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUAdapter::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUAdapter::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUAdapterPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUAdapterPrototype::create((WebCore::JSGPUAdapterPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUAdapter::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUAdapter::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 72) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUAdapterConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUAdapterPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapter>,(WebCore::DOMConstructorID)9>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUAdapter_name(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsGPUAdapter_features(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24);
  result = WTF::fastMalloc((WTF *)0x18);
  v6 = result;
  v7 = *(unsigned int *)(v4 + 20);
  if (!(_DWORD)v7)
  {
    v8 = 0;
LABEL_3:
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v8;
    *(_DWORD *)(v6 + 16) = v7;
    *(_DWORD *)(v6 + 20) = v7;
    v9 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *((_QWORD *)v9 + 1) = v6;
    v10 = WebCore::toJS(a1, v3, v9);
    WTF::RefCounted<WebCore::GPUSupportedFeatures>::deref(v9, v11);
    return v10;
  }
  if (!(v7 >> 29))
  {
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    v12 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *(_QWORD *)(v4 + 8);
      v15 = 8 * v12;
      do
      {
        v16 = *(_DWORD **)(v14 + v13);
        if (v16)
          *v16 += 2;
        *(_QWORD *)(v8 + v13) = v16;
        v13 += 8;
      }
      while (v15 != v13);
    }
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::jsGPUAdapter_limits(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  WTF *v6;
  WTF *v8;
  WTF *v9;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::GPUAdapter::limits(*(WebCore::GPUAdapter **)(a2 + 24), &v9);
  v5 = WebCore::wrap<WebCore::GPUSupportedLimits>(a1, v3, v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v8 = (WTF *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, v4);
        else
          --*(_DWORD *)v8;
      }
      WTF::fastFree(v6, v4);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v5;
}

uint64_t WebCore::jsGPUAdapter_isFallbackAdapter(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40))
    return 7;
  else
    return 6;
}

unint64_t WebCore::jsGPUAdapter_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  int v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16);
  if (v4)
  {
    *(_DWORD *)v4 += 2;
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    v7 = *(_DWORD *)v4;
    *(_DWORD *)v4 += 2;
    *((_QWORD *)v6 + 1) = v4;
    if (v7)
      *(_DWORD *)v4 = v7;
    else
      WTF::StringImpl::destroy(v4, v5);
  }
  else
  {
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = 0;
  }
  v9 = WebCore::wrap<WebCore::GPUAdapterInfo>(a1, v3, v6);
  if (*(_DWORD *)v6 == 1)
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    WTF::fastFree(v6, v8);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return v9;
}

uint64_t WebCore::JSGPUAdapterOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUAdapterOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUAdapter>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUAdapter::s_info + ~((_QWORD)&WebCore::JSGPUAdapter::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUAdapter::s_info + ~((_QWORD)&WebCore::JSGPUAdapter::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUAdapter::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUAdapter::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUAdapterPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUAdapterPrototype::create((WebCore::JSGPUAdapterPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUAdapter::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUAdapter::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 72);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 72))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 72);
    *(_QWORD *)(v36 + 72) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 72);
  *(_QWORD *)(v32 + 72) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335620 & 1) == 0)
  {
    qword_1EE335618 = (uint64_t)&off_1E327C890;
    byte_1EE335620 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335618;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGPUAdapterInfo::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUAdapterInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUAdapterInfoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUAdapterInfoPrototype::create(WebCore::JSGPUAdapterInfoPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSGPUAdapterInfo::s_info, &WebCore::JSGPUAdapterInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapterInfo>,(WebCore::DOMConstructorID)10>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 80);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapterInfo>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUAdapterInfo::s_info + ~((_QWORD)&WebCore::JSGPUAdapterInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUAdapterInfo::s_info + ~((_QWORD)&WebCore::JSGPUAdapterInfo::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUAdapterInfo::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUAdapterInfo::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUAdapterInfoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUAdapterInfoPrototype::create((WebCore::JSGPUAdapterInfoPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUAdapterInfo::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUAdapterInfo::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 80) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUAdapterInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUAdapterInfoPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUAdapterInfo>,(WebCore::DOMConstructorID)10>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUAdapterInfo_vendor(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;

  WTF::String::split();
  if (v20)
  {
    WTF::String::convertToLowercaseWithoutLocale(v18);
    v2 = v21;
    if (v21)
    {
      _ZN3WTF10StringImpl16removeCharactersIZN7WebCore14GPUAdapterInfo20normalizedIdentifierERKNS_6StringEEUlT_E_EENS_3RefIS0_NS_12RawPtrTraitsIS0_EENS_21DefaultRefDerefTraitsIS0_EEEERKS7_((WTF *)&v17, (uint64_t)v21);
      v3 = v21;
      v21 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, v2);
        else
          *(_DWORD *)v3 -= 2;
      }
    }
    else
    {
      v17 = 0;
    }
    if (v20)
    {
      v14 = v18;
      v15 = 8 * v20;
      do
      {
        v16 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v2);
          else
            *(_DWORD *)v16 -= 2;
        }
        v14 = (WTF *)((char *)v14 + 8);
        v15 -= 8;
      }
      while (v15);
    }
  }
  else
  {
    v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v17 = v4;
  }
  v5 = v18;
  if (v18)
  {
    v18 = 0;
    v19 = 0;
    WTF::fastFree(v5, v2);
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v17;
  if (!v17 || (v8 = *((_DWORD *)v17 + 1)) == 0)
  {
    v9 = *(_QWORD *)(v6 + 41968);
LABEL_17:
    v17 = 0;
    if (!v7)
      return v9;
    goto LABEL_24;
  }
  if (v8 != 1)
    goto LABEL_14;
  v10 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
  if ((*((_BYTE *)v17 + 16) & 4) != 0)
  {
    v11 = *v10;
LABEL_22:
    v9 = *(_QWORD *)(v6 + 8 * v11 + 42216);
    goto LABEL_23;
  }
  v13 = *(unsigned __int16 *)v10;
  if (v13 <= 0xFF)
  {
    v11 = v13;
    goto LABEL_22;
  }
LABEL_14:
  v9 = *(_QWORD *)(v6 + 64760);
  if (!v9 || v17 != *(WTF::StringImpl **)(v9 + 8))
  {
    v9 = JSC::jsStringWithCacheSlowCase();
    v7 = v17;
    goto LABEL_17;
  }
LABEL_23:
  v17 = 0;
LABEL_24:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v7);
  else
    *(_DWORD *)v7 -= 2;
  return v9;
}

uint64_t WebCore::jsGPUAdapterInfo_architecture(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::String::convertToLowercaseWithoutLocale((WTF::String *)(*(_QWORD *)(a2 + 24) + 8));
  v3 = v13;
  if (!v13)
  {
    v6 = *(_QWORD *)(a1 + 56);
LABEL_12:
    v8 = *(_QWORD *)(v6 + 41968);
LABEL_13:
    v12 = 0;
    if (!v3)
      return v8;
    goto LABEL_20;
  }
  _ZN3WTF10StringImpl16removeCharactersIZN7WebCore14GPUAdapterInfo20normalizedIdentifierERKNS_6StringEEUlT_E_EENS_3RefIS0_NS_12RawPtrTraitsIS0_EENS_21DefaultRefDerefTraitsIS0_EEEERKS7_((WTF *)&v12, (uint64_t)v13);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v3 = v12;
  v6 = *(_QWORD *)(a1 + 56);
  if (!v12)
    goto LABEL_12;
  v7 = *((_DWORD *)v12 + 1);
  if (!v7)
    goto LABEL_12;
  if (v7 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_8;
      v10 = v10;
    }
    v8 = *(_QWORD *)(v6 + 8 * v10 + 42216);
    goto LABEL_19;
  }
LABEL_8:
  v8 = *(_QWORD *)(v6 + 64760);
  if (!v8 || v12 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    goto LABEL_13;
  }
LABEL_19:
  v12 = 0;
LABEL_20:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v8;
}

uint64_t WebCore::jsGPUAdapterInfo_device(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::String::convertToLowercaseWithoutLocale((WTF::String *)(*(_QWORD *)(a2 + 24) + 8));
  v3 = v13;
  if (!v13)
  {
    v6 = *(_QWORD *)(a1 + 56);
LABEL_12:
    v8 = *(_QWORD *)(v6 + 41968);
LABEL_13:
    v12 = 0;
    if (!v3)
      return v8;
    goto LABEL_20;
  }
  _ZN3WTF10StringImpl16removeCharactersIZN7WebCore14GPUAdapterInfo20normalizedIdentifierERKNS_6StringEEUlT_E_EENS_3RefIS0_NS_12RawPtrTraitsIS0_EENS_21DefaultRefDerefTraitsIS0_EEEERKS7_((WTF *)&v12, (uint64_t)v13);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v3 = v12;
  v6 = *(_QWORD *)(a1 + 56);
  if (!v12)
    goto LABEL_12;
  v7 = *((_DWORD *)v12 + 1);
  if (!v7)
    goto LABEL_12;
  if (v7 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_8;
      v10 = v10;
    }
    v8 = *(_QWORD *)(v6 + 8 * v10 + 42216);
    goto LABEL_19;
  }
LABEL_8:
  v8 = *(_QWORD *)(v6 + 64760);
  if (!v8 || v12 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    goto LABEL_13;
  }
LABEL_19:
  v12 = 0;
LABEL_20:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v8;
}

uint64_t WebCore::jsGPUAdapterInfo_description(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  WTF::String::convertToLowercaseWithoutLocale((WTF::String *)(*(_QWORD *)(a2 + 24) + 8));
  v3 = v13;
  if (!v13)
  {
    v6 = *(_QWORD *)(a1 + 56);
LABEL_12:
    v8 = *(_QWORD *)(v6 + 41968);
LABEL_13:
    v12 = 0;
    if (!v3)
      return v8;
    goto LABEL_20;
  }
  _ZN3WTF10StringImpl16removeCharactersIZN7WebCore14GPUAdapterInfo20normalizedIdentifierERKNS_6StringEEUlT_E_EENS_3RefIS0_NS_12RawPtrTraitsIS0_EENS_21DefaultRefDerefTraitsIS0_EEEERKS7_((WTF *)&v12, (uint64_t)v13);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v3 = v12;
  v6 = *(_QWORD *)(a1 + 56);
  if (!v12)
    goto LABEL_12;
  v7 = *((_DWORD *)v12 + 1);
  if (!v7)
    goto LABEL_12;
  if (v7 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((*((_BYTE *)v12 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v10 = *(unsigned __int16 *)v9;
      if (v10 > 0xFF)
        goto LABEL_8;
      v10 = v10;
    }
    v8 = *(_QWORD *)(v6 + 8 * v10 + 42216);
    goto LABEL_19;
  }
LABEL_8:
  v8 = *(_QWORD *)(v6 + 64760);
  if (!v8 || v12 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v3 = v12;
    goto LABEL_13;
  }
LABEL_19:
  v12 = 0;
LABEL_20:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v3);
  else
    *(_DWORD *)v3 -= 2;
  return v8;
}

uint64_t WebCore::JSGPUAdapterInfoOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUAdapterInfoOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUAdapterInfo>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUAdapterInfo::s_info + ~((_QWORD)&WebCore::JSGPUAdapterInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUAdapterInfo::s_info + ~((_QWORD)&WebCore::JSGPUAdapterInfo::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUAdapterInfo::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUAdapterInfo::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUAdapterInfoPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUAdapterInfoPrototype::create((WebCore::JSGPUAdapterInfoPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUAdapterInfo::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUAdapterInfo::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 80);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 80))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 80);
    *(_QWORD *)(v36 + 80) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 80);
  *(_QWORD *)(v32 + 80) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335630 & 1) == 0)
  {
    qword_1EE335628 = (uint64_t)&off_1E327C8C0;
    byte_1EE335630 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335628;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUAddressMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v11;
  int v12;
  int v13;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
    v4 = v21;
    if (v21)
      goto LABEL_7;
LABEL_39:
    v12 = 0;
    v13 = 0;
    return v12 | (v13 << 8);
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    goto LABEL_39;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 13;
  if (v6 != "clamp-to-edge" && v7 == 13)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 99 || *(_QWORD *)(v6 + 1) != 0x2D6F742D706D616CLL || *(_QWORD *)(v6 + 5) != 0x656764652D6F742DLL)
      {
LABEL_13:
        v9 = 13;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 99)
        goto LABEL_13;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BF8A0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_13;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 10), (int16x8_t)xmmword_1968BF8B0);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0])
        goto LABEL_13;
    }
LABEL_48:
    v11 = &WebCore::parseEnumerationFromString<WebCore::GPUAddressMode>(WTF::String const&)::mappings;
    goto LABEL_49;
  }
  v10 = v6 == "clamp-to-edge" && v7 == 13;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_48;
LABEL_18:
  if (v6 == "mirror-repeat")
    v8 = 1;
  if (v8)
  {
    if (v6 == "mirror-repeat" && v7 == 13)
      goto LABEL_35;
  }
  else
  {
    if (!v9)
      goto LABEL_35;
    if ((v5 & 4) != 0)
    {
      if (*v6 != 109 || *(_QWORD *)(v6 + 1) != 0x65722D726F727269 || *(_QWORD *)(v6 + 5) != 0x7461657065722D72)
        goto LABEL_26;
LABEL_35:
      v11 = &off_1E327A2A8;
      goto LABEL_49;
    }
    if (*(_WORD *)v6 == 109)
    {
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968BF8C0);
      v18.i16[0] = vminvq_u16(v18);
      if (v18.i32[0])
      {
        v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 10), (int16x8_t)xmmword_1968BF8D0);
        v19.i16[0] = vminvq_u16(v19);
        if (v19.i32[0])
          goto LABEL_35;
      }
    }
  }
LABEL_26:
  if (v6 == "repeat" || v9 != 6)
  {
    if (v9 == 6 && v6 == "repeat")
      goto LABEL_32;
  }
  else if ((v5 & 4) != 0)
  {
    if (*v6 == 114 && *(_DWORD *)(v6 + 1) == 1634037861 && *(_DWORD *)(v6 + 2) == 1952540016)
    {
LABEL_32:
      v11 = &off_1E327A2C0;
LABEL_49:
      v12 = *((unsigned __int8 *)v11 + 16);
      v13 = 1;
      goto LABEL_50;
    }
  }
  else if (*(_WORD *)v6 == 114
         && *(_QWORD *)(v6 + 4) == 0x74006100650070
         && *(_QWORD *)(v6 + 2) == 0x61006500700065)
  {
    goto LABEL_32;
  }
  v13 = 0;
  v12 = 0;
LABEL_50:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v12 | (v13 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::GPUAutoLayoutMode>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;

  v3 = a1;
  v13 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v13, a1);
  v4 = v12;
  if (!v12)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  if (v5 == "auto" || v6 != 4)
  {
    if (v6 != 4 || v5 != "auto")
      goto LABEL_32;
LABEL_22:
    v9 = 256;
    goto LABEL_33;
  }
  if ((*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if (*(_WORD *)v5 != 97)
      goto LABEL_32;
    if (*((_DWORD *)v5 + 1) != 7274612 || *(_DWORD *)(v5 + 2) != 7602293)
      goto LABEL_32;
    goto LABEL_22;
  }
  if (*v5 == 97 && *(_WORD *)(v5 + 1) == 29813 && *((_WORD *)v5 + 1) == 28532)
    goto LABEL_22;
LABEL_32:
  v9 = 0;
LABEL_33:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSGPUBindGroup::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUBindGroup::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUBindGroupPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUBindGroupPrototype::create(WebCore::JSGPUBindGroupPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUBindGroup::s_info, (uint64_t)&WebCore::JSGPUBindGroupPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroup>,(WebCore::DOMConstructorID)11>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 88);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroup>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUBindGroup::s_info + ~((_QWORD)&WebCore::JSGPUBindGroup::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBindGroup::s_info + ~((_QWORD)&WebCore::JSGPUBindGroup::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUBindGroup::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUBindGroup::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUBindGroupPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBindGroupPrototype::create((WebCore::JSGPUBindGroupPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUBindGroup::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBindGroup::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 88) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUBindGroupConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUBindGroupPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroup>,(WebCore::DOMConstructorID)11>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUBindGroup_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUBindGroup_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUBindGroup::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUBindGroup::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUBindGroupOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUBindGroupOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUBindGroup>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUBindGroup::s_info + ~((_QWORD)&WebCore::JSGPUBindGroup::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBindGroup::s_info + ~((_QWORD)&WebCore::JSGPUBindGroup::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUBindGroup::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUBindGroup::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUBindGroupPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBindGroupPrototype::create((WebCore::JSGPUBindGroupPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUBindGroup::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBindGroup::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 88);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 88))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 88);
    *(_QWORD *)(v36 + 88) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 88);
  *(_QWORD *)(v32 + 88) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335640 & 1) == 0)
  {
    qword_1EE335638 = (uint64_t)&off_1E327C8F0;
    byte_1EE335640 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335638;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBindGroupDescriptor>@<X0>(JSC::JSCell *this@<X1>, WTF **a2@<X0>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  JSValue v17;
  int i;
  unsigned int v19;
  JSC::JSCell *IndexQuickly;
  unsigned int v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  char **v35;
  BOOL v36;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  int v52;
  JSC::VM *v53[2];
  WTF *v54;
  uint64_t v55;
  char v56;

  v53[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    goto LABEL_18;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_58:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v50);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v8);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (*((_DWORD *)v53[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v53[0]);
    if ((_DWORD)result)
      goto LABEL_58;
  }
  if (v9 == 10)
  {
    v5 = 0;
    goto LABEL_13;
  }
  result = WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v9, (uint64_t)&v50);
  v11 = v51;
  if (!(_DWORD)v51)
  {
    v5 = v50;
    v50 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v54, (WTF::StringImpl *)&v50);
LABEL_13:
    WTF::AtomStringImpl::addLiteral();
    v12 = v50;
    v14 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v50);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (*((_DWORD *)v53[0] + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v53[0]);
      if ((_DWORD)result)
        goto LABEL_19;
    }
    if (v14 == 10)
    {
LABEL_18:
      result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)v53, "entries", 8, "GPUBindGroupDescriptor", 23, "sequence", 9);
LABEL_19:
      *(_DWORD *)(a3 + 32) = 1;
LABEL_20:
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          return WTF::StringImpl::destroy(v5, v15);
        else
          *(_DWORD *)v5 -= 2;
      }
      return result;
    }
    v16 = a2[7];
    v53[1] = v16;
    if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      result = (uint64_t)v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v52 = 1;
      v24 = 1;
      goto LABEL_96;
    }
    v54 = 0;
    v55 = 0;
    if (JSC::getIterationMode() == 2)
    {
      for (i = 1; ; ++i)
      {
        v19 = (*(_BYTE *)(v14 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v14 + 8) - 8) : 0;
        if (i - 1 >= v19)
          break;
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v14, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v14, (JSC::JSGlobalObject *)a2, (i - 1));
        if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
          break;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::GPUBindGroupEntry>>::convert(a2, IndexQuickly, (uint64_t)&v54);
        if (*((_QWORD *)v16 + 2))
        {
          v28 = JSC::JSArrayIterator::create();
          v29 = i | 0xFFFE000000000000;
          if (i < 0)
            v29 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v28 + 16) = v29;
          goto LABEL_62;
        }
      }
    }
    else
    {
      JSC::iteratorForIterable((JSC *)a2, (JSC::JSGlobalObject *)v14, v17);
      if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
      {
        while (1)
        {
          v25 = JSC::iteratorStep();
          if (*((_QWORD *)v16 + 2) || v25 == 6)
            break;
          v27 = (JSC::JSCell *)JSC::iteratorValue();
          if (*((_DWORD *)v16 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
              break;
          }
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::GPUBindGroupEntry>>::convert(a2, v27, (uint64_t)&v54);
          if (*((_QWORD *)v16 + 2))
          {
LABEL_62:
            JSC::iteratorClose();
            break;
          }
        }
      }
    }
    if (*((_DWORD *)v16 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
      result = (uint64_t)v54;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      {
        v52 = 1;
        if (HIDWORD(v55))
        {
          v47 = 48 * HIDWORD(v55);
          v48 = (_DWORD *)((char *)v54 + 40);
          do
          {
            v49 = *v48;
            if ((_DWORD)v49 != -1)
              ((void (*)(char *, _DWORD *))off_1E327E028[v49])(&v56, v48 - 8);
            *v48 = -1;
            v48 += 12;
            v47 -= 48;
          }
          while (v47);
          result = (uint64_t)v54;
        }
        if (result)
          result = WTF::fastFree((WTF *)result, v15);
LABEL_66:
        v24 = v52;
        if (v52)
        {
          v21 = 0;
          v22 = 0;
        }
        else
        {
          v22 = v50;
          v30 = v51;
          v21 = HIDWORD(v51);
          v50 = 0;
          v51 = 0;
          WTF::AtomStringImpl::addLiteral();
          v31 = v54;
          v32 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v54);
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v15);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (!*((_DWORD *)v53[0] + 20)
            || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v53[0]), (result & 1) == 0))
          {
            if (v32 == 10)
            {
              result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)v53, "layout", 7, "GPUBindGroupDescriptor", 23, "GPUBindGroupLayout", 19);
            }
            else
            {
              v54 = a2[7];
              if ((v32 & 0xFFFE000000000002) == 0)
              {
                v33 = *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C);
                v34 = *(_DWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C) != 0;
                v35 = (char **)(16 * v33);
                if ((_DWORD)v33)
                  v36 = v35 == &WebCore::JSGPUBindGroupLayout::s_info;
                else
                  v36 = 1;
                if (!v36)
                {
                  do
                  {
                    v35 = (char **)v35[2];
                    v34 = v35 != 0;
                  }
                  while (v35 != &WebCore::JSGPUBindGroupLayout::s_info && v35 != 0);
                }
                if (v34)
                {
                  v38 = *(_QWORD *)(v32 + 24);
                  if (v38)
                  {
                    result = *(_QWORD *)(v38 + 8);
                    if (result)
                      goto LABEL_128;
                    result = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)result = 1;
                    *(_QWORD *)(result + 8) = v38;
                    v39 = *(unsigned int **)(v38 + 8);
                    *(_QWORD *)(v38 + 8) = result;
                    if (!v39)
                      goto LABEL_128;
                    do
                    {
                      v40 = __ldaxr(v39);
                      v41 = v40 - 1;
                    }
                    while (__stlxr(v41, v39));
                    if (!v41)
                    {
                      atomic_store(1u, v39);
                      WTF::fastFree((WTF *)v39, v15);
                    }
                    result = *(_QWORD *)(v38 + 8);
                    if (result)
                    {
LABEL_128:
                      do
                        v42 = __ldaxr((unsigned int *)result);
                      while (__stlxr(v42 + 1, (unsigned int *)result));
                    }
                    v23 = 0;
                    *(_QWORD *)a3 = v5;
                    *(_QWORD *)(a3 + 8) = result;
                    *(_QWORD *)(a3 + 16) = v22;
                    *(_DWORD *)(a3 + 24) = v30;
                    *(_DWORD *)(a3 + 28) = v21;
                    v24 = v52;
                    v21 = 0;
                    v22 = 0;
                    v5 = 0;
                    goto LABEL_96;
                  }
                }
              }
              result = JSC::throwTypeError();
            }
          }
          v24 = 0;
        }
        v23 = 1;
LABEL_96:
        *(_DWORD *)(a3 + 32) = v23;
        if (v24 != -1)
          result = ((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E327E018[v24])(&v54, &v50);
        if (v21)
        {
          v43 = 48 * v21;
          v44 = (_DWORD *)((char *)v22 + 40);
          do
          {
            v45 = *v44;
            if ((_DWORD)v45 != -1)
              result = ((uint64_t (*)(WTF::StringImpl **, _DWORD *))off_1E327E028[v45])(&v50, v44 - 8);
            *v44 = -1;
            v44 += 12;
            v43 -= 48;
          }
          while (v43);
        }
        if (v22)
          result = WTF::fastFree(v22, v15);
        goto LABEL_20;
      }
    }
    else
    {
      result = (uint64_t)v54;
    }
    v50 = (WTF::StringImpl *)result;
    v51 = v55;
    v52 = 0;
    goto LABEL_66;
  }
  *(_DWORD *)(a3 + 32) = 1;
  if ((_DWORD)v11 != -1)
    return ((uint64_t (*)(WTF **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v11])(&v54, &v50);
  return result;
}

uint64_t WebCore::JSGPUBindGroupLayout::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUBindGroupLayout::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUBindGroupLayoutPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUBindGroupLayoutPrototype::create(WebCore::JSGPUBindGroupLayoutPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUBindGroupLayout::s_info, (uint64_t)&WebCore::JSGPUBindGroupLayoutPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroupLayout>,(WebCore::DOMConstructorID)12>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 96);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroupLayout>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUBindGroupLayout::s_info
         + ~((_QWORD)&WebCore::JSGPUBindGroupLayout::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBindGroupLayout::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUBindGroupLayout::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUBindGroupLayout::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUBindGroupLayout::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUBindGroupLayoutPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBindGroupLayoutPrototype::create((WebCore::JSGPUBindGroupLayoutPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUBindGroupLayout::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBindGroupLayout::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 96) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUBindGroupLayoutConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUBindGroupLayoutPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBindGroupLayout>,(WebCore::DOMConstructorID)12>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUBindGroupLayout_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUBindGroupLayout_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUBindGroupLayout::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUBindGroupLayout::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUBindGroupLayoutOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUBindGroupLayoutOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = *((_QWORD *)v3 + 1);
    if (v25)
    {
      *(_QWORD *)(v25 + 8) = 0;
      v26 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUBindGroupLayout>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUBindGroupLayout::s_info
         + ~((_QWORD)&WebCore::JSGPUBindGroupLayout::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBindGroupLayout::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUBindGroupLayout::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUBindGroupLayout::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUBindGroupLayout::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUBindGroupLayoutPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBindGroupLayoutPrototype::create((WebCore::JSGPUBindGroupLayoutPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUBindGroupLayout::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBindGroupLayout::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 96);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 96))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 96);
    *(_QWORD *)(v36 + 96) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 96);
  *(_QWORD *)(v32 + 96) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335650 & 1) == 0)
  {
    qword_1EE335648 = (uint64_t)&off_1E327C920;
    byte_1EE335650 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335648;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBindGroupLayoutDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  JSValue v17;
  WTF *v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  JSC::JSCell *IndexQuickly;
  char *v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  JSC::JSCell *v35;
  char *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  JSC::VM *v48[2];
  WTF *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54[2];
  __int128 v55;
  __int128 v56;
  int v57;

  v48[0] = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    goto LABEL_18;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_65:
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v54[0]);
  if (v54[0])
  {
    if (*(_DWORD *)v54[0] == 2)
      WTF::StringImpl::destroy(v54[0], v8);
    else
      *(_DWORD *)v54[0] -= 2;
  }
  if (*((_DWORD *)v48[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v48[0]);
    if ((_DWORD)result)
      goto LABEL_65;
  }
  if (v9 == 10)
  {
    v5 = 0;
  }
  else
  {
    result = WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v9, (uint64_t)v54);
    v11 = LODWORD(v54[1]);
    if (LODWORD(v54[1]))
    {
      *(_DWORD *)(a3 + 24) = 1;
      if ((_DWORD)v11 != -1)
        return ((uint64_t (*)(__int128 *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v11])(&v51, v54);
      return result;
    }
    v5 = v54[0];
    v54[0] = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v51, (WTF::StringImpl *)v54);
  }
  WTF::AtomStringImpl::addLiteral();
  v12 = v54[0];
  v14 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v54[0]);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*((_DWORD *)v48[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v48[0]);
    if ((_DWORD)result)
    {
LABEL_19:
      *(_DWORD *)(a3 + 24) = 1;
      if (!v5)
        return result;
      goto LABEL_74;
    }
  }
  if (v14 == 10)
  {
LABEL_18:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)v48, "entries", 8, "GPUBindGroupLayoutDescriptor", 29, "sequence", 9);
    goto LABEL_19;
  }
  v16 = a2[7];
  v48[1] = v16;
  if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v31 = v54[0];
    v54[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = 1;
    LODWORD(v55) = 1;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    if (JSC::getIterationMode() == 2)
    {
      v47 = a3;
      v18 = 0;
      v19 = 0;
      for (i = 1; ; ++i)
      {
        v21 = (*(_BYTE *)(v14 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v14 + 8) - 8) : 0;
        if (i - 1 >= v21)
          break;
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v14, i - 1, 0);
        if (!IndexQuickly)
          IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v14, (JSC::JSGlobalObject *)a2, (i - 1));
        if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
          break;
        WebCore::convertDictionary<WebCore::GPUBindGroupLayoutEntry>((uint64_t)v54, a2, IndexQuickly);
        if (!v57)
        {
          v51 = *(_OWORD *)v54;
          v52 = v55;
          v53 = v56;
          if (v19 == (_DWORD)v50)
          {
            v23 = WTF::Vector<WebCore::GPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v19 + 1, (unint64_t)&v51);
            v19 = HIDWORD(v50);
            v18 = v49;
            v24 = (_OWORD *)((char *)v49 + 48 * HIDWORD(v50));
            v26 = *((_OWORD *)v23 + 1);
            v25 = *((_OWORD *)v23 + 2);
            *v24 = *(_OWORD *)v23;
            v24[1] = v26;
            v24[2] = v25;
          }
          else
          {
            v27 = (_OWORD *)((char *)v18 + 48 * v19);
            v28 = *(_OWORD *)v54;
            v29 = v56;
            v27[1] = v55;
            v27[2] = v29;
            *v27 = v28;
          }
          HIDWORD(v50) = ++v19;
        }
        if (*((_QWORD *)v16 + 2))
        {
          v43 = JSC::JSArrayIterator::create();
          v44 = i | 0xFFFE000000000000;
          if (i < 0)
            v44 = COERCE__INT64((double)i) + 0x2000000000000;
          *(_QWORD *)(v43 + 16) = v44;
          goto LABEL_69;
        }
      }
LABEL_70:
      a3 = v47;
    }
    else
    {
      JSC::iteratorForIterable((JSC *)a2, (JSC::JSGlobalObject *)v14, v17);
      if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
      {
        v19 = 0;
        v18 = 0;
      }
      else
      {
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v33 = JSC::iteratorStep();
          if (*((_QWORD *)v16 + 2) || v33 == 6)
            break;
          v35 = (JSC::JSCell *)JSC::iteratorValue();
          if (*((_DWORD *)v16 + 20))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
              break;
          }
          WebCore::convertDictionary<WebCore::GPUBindGroupLayoutEntry>((uint64_t)v54, a2, v35);
          if (!v57)
          {
            v51 = *(_OWORD *)v54;
            v52 = v55;
            v53 = v56;
            if (v19 == (_DWORD)v50)
            {
              v36 = WTF::Vector<WebCore::GPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v49, v19 + 1, (unint64_t)&v51);
              v19 = HIDWORD(v50);
              v18 = v49;
              v37 = (_OWORD *)((char *)v49 + 48 * HIDWORD(v50));
              v39 = *((_OWORD *)v36 + 1);
              v38 = *((_OWORD *)v36 + 2);
              *v37 = *(_OWORD *)v36;
              v37[1] = v39;
              v37[2] = v38;
            }
            else
            {
              v40 = (_OWORD *)((char *)v18 + 48 * v19);
              v41 = *(_OWORD *)v54;
              v42 = v56;
              v40[1] = v55;
              v40[2] = v42;
              *v40 = v41;
            }
            HIDWORD(v50) = ++v19;
          }
          if (*((_QWORD *)v16 + 2))
          {
            v47 = a3;
LABEL_69:
            JSC::iteratorClose();
            goto LABEL_70;
          }
        }
      }
    }
    if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    {
      LODWORD(v55) = 1;
      if (v18)
      {
        v49 = 0;
        LODWORD(v50) = 0;
        WTF::fastFree(v18, v46);
      }
      v32 = 1;
    }
    else
    {
      v32 = 0;
      v45 = v50;
      LODWORD(v55) = 0;
      v54[0] = 0;
      v54[1] = 0;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v18;
      *(_DWORD *)(a3 + 16) = v45;
      *(_DWORD *)(a3 + 20) = v19;
      v5 = 0;
    }
  }
  *(_DWORD *)(a3 + 24) = v32;
  result = ((uint64_t (*)(__int128 *, WTF::StringImpl **))off_1E327E0E8[v32])(&v51, v54);
  if (v5)
  {
LABEL_74:
    if (*(_DWORD *)v5 == 2)
      return WTF::StringImpl::destroy(v5, v15);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBindGroupLayoutEntry>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Structure *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  _BOOL4 v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  JSC::VM *v36;
  uint64_t v37;
  const char *v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  char **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  char v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  JSC::JSCell *v50;
  char v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSC::JSCell *v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  JSC::JSCell *v58;
  char v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  uint16x8_t v70;
  uint16x8_t v71;
  BOOL v73;
  int v74;
  uint64_t v75;
  int *v76;
  int v77;
  WTF::StringImpl *v79;
  unsigned int v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  _BYTE v86[7];
  JSC::VM *v87;
  WTF::StringImpl *v88;
  int v89;
  JSC::VM *v90;
  JSC::VM *v91;
  uint64_t v92;
  WTF::StringImpl *v93;

  v87 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    v9 = "binding";
    v10 = (int)a2;
    v11 = 8;
LABEL_10:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v10, (int)&v87, v9, v11, "GPUBindGroupLayoutEntry", 24, "unsigned long", 14);
LABEL_11:
    *(_DWORD *)(a1 + 48) = 1;
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_144;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_144;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v7);
    else
      *(_DWORD *)v88 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v8 == 10)
    goto LABEL_9;
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v8, &v88);
  v13 = v88;
  if ((unint64_t)v88 >> 32)
    goto LABEL_11;
  WTF::AtomStringImpl::addLiteral();
  v14 = v88;
  v16 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v15);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v16 == 10)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_76;
  }
  v19 = a2[7];
  v90 = v19;
  if ((v16 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if ((v16 & 0xFFFE000000000002) != 0)
      goto LABEL_144;
    v22 = JSC::JSCell::getObject((JSC::JSCell *)v16);
    if (!v22)
      goto LABEL_144;
    v23 = (JSC::Structure *)v22;
    WTF::AtomStringImpl::addLiteral();
    v24 = v88;
    v26 = JSC::JSObject::get(v23, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*((_DWORD *)v19 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
      if ((result & 1) != 0)
        goto LABEL_11;
    }
    if (v26 == 10)
    {
      v27 = 0;
      goto LABEL_36;
    }
    v28 = a2[7];
    if (v26 >= 0xFFFE000000000000)
    {
      v73 = (_DWORD)v26 == 0;
      goto LABEL_202;
    }
    *(_QWORD *)&v29 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v29 <= 0.0)
      {
        v27 = v29 < 0.0;
        goto LABEL_35;
      }
    }
    else
    {
      if ((v26 & 0xFFFE000000000002) != 0)
      {
        v27 = v26 == 7;
        goto LABEL_35;
      }
      v74 = *(unsigned __int8 *)(v26 + 5);
      if (v74 == 3)
      {
        v77 = *(_DWORD *)(v26 + 8);
LABEL_201:
        v73 = v77 == 0;
        goto LABEL_202;
      }
      if (v74 == 2)
      {
        v75 = *(_QWORD *)(v26 + 8);
        if ((v75 & 1) != 0)
          v76 = (int *)(v26 + 16);
        else
          v76 = (int *)(v75 + 4);
        v77 = *v76;
        goto LABEL_201;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v73 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_202:
        v27 = !v73;
LABEL_35:
        if (*((_DWORD *)v28 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
          if ((result & 1) != 0)
            goto LABEL_11;
        }
LABEL_36:
        WTF::AtomStringImpl::addLiteral();
        v30 = v88;
        v32 = JSC::JSObject::get(v23, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v31);
          else
            *(_DWORD *)v30 -= 2;
        }
        if (*((_DWORD *)v19 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
          if ((result & 1) != 0)
            goto LABEL_11;
        }
        if (v32 == 10)
        {
          v79 = 0;
          v88 = 0;
          v89 = 0;
        }
        else
        {
          result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v32, (uint64_t)&v88);
          if (v89)
            goto LABEL_11;
          v79 = v88;
        }
        WTF::AtomStringImpl::addLiteral();
        v33 = v93;
        v35 = JSC::JSObject::get(v23, (JSC::JSGlobalObject *)a2, (unint64_t)v93);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v34);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (*((_DWORD *)v19 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
          if ((result & 1) != 0)
            goto LABEL_11;
        }
        if (v35 == 10)
        {
          v20 = 0;
          if (!v27)
          {
            v21 = 0;
            goto LABEL_75;
          }
          goto LABEL_74;
        }
        v36 = a2[7];
        v91 = v36;
        v93 = (WTF::StringImpl *)v35;
        if ((v35 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v35 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v93, (JSC::JSGlobalObject *)a2);
          v37 = v92;
          if (v92)
            goto LABEL_57;
          goto LABEL_147;
        }
        v37 = *(_QWORD *)(v35 + 8);
        if ((v37 & 1) != 0)
        {
          v37 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v35, (JSC::JSGlobalObject *)a2);
          if (!v37)
          {
LABEL_56:
            v92 = v37;
            if (v37)
            {
LABEL_57:
              v38 = *(const char **)(v37 + 8);
              v39 = *(_DWORD *)(v37 + 4);
              v40 = ((unint64_t)*(unsigned int *)(v37 + 16) >> 2) & 1;
              if (v38 != "read-only-storage" && v39 == 17)
              {
                if ((_DWORD)v40)
                {
                  if (*v38 != 114
                    || *(_QWORD *)(v38 + 1) != 0x796C6E6F2D646165
                    || *(_QWORD *)(v38 + 9) != 0x656761726F74732DLL)
                  {
LABEL_63:
                    v41 = 0;
                    v42 = 0;
                    goto LABEL_69;
                  }
                }
                else
                {
                  if (*(_WORD *)v38 != 114)
                    goto LABEL_63;
                  v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v38 + 2), (int16x8_t)xmmword_1968BF8E0);
                  v70.i16[0] = vminvq_u16(v70);
                  if (!v70.i32[0])
                    goto LABEL_63;
                  v71 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v38 + 18), (int16x8_t)xmmword_1968BF8F0);
                  v71.i16[0] = vminvq_u16(v71);
                  if (!v71.i32[0])
                    goto LABEL_63;
                }
                goto LABEL_67;
              }
              if (v38 == "read-only-storage" && v39 == 17)
              {
LABEL_67:
                v43 = &WebCore::parseEnumerationFromString<WebCore::GPUBufferBindingType>(WTF::String const&)::mappings;
                goto LABEL_68;
              }
              v67 = v40 << 32;
              v68 = v39 != 7;
              if (v38 == "storage" || v39 != 7)
              {
                v69 = *(_DWORD *)(v37 + 4);
                if (v38 == "storage" && v39 == 7)
                  goto LABEL_132;
              }
              else if ((_DWORD)v40)
              {
                if (*v38 == 115 && *(_DWORD *)(v38 + 1) == 1634889588 && *(_DWORD *)(v38 + 3) == 1701273970)
                {
LABEL_132:
                  v43 = &off_1E327ADA8;
                  goto LABEL_68;
                }
                v68 = 0;
                v69 = 7;
                v67 = 0x100000000;
              }
              else if (*(_WORD *)v38 == 115)
              {
                v68 = 0;
                v69 = 7;
                if (*(_QWORD *)(v38 + 2) == 0x610072006F0074 && *(_QWORD *)(v38 + 6) == 0x65006700610072)
                  goto LABEL_132;
              }
              else
              {
                v68 = 0;
                v69 = 7;
              }
              if (v38 == "uniform" || v68)
              {
                if (v39 != 7 || v38 != "uniform")
                  goto LABEL_63;
              }
              else if (v69)
              {
                if (v67)
                {
                  if (*v38 != 117 || *(_DWORD *)(v38 + 1) != 1868982638 || *(_DWORD *)(v38 + 3) != 1836216166)
                    goto LABEL_63;
                }
                else
                {
                  if (*(_WORD *)v38 != 117)
                    goto LABEL_63;
                  if (*(_QWORD *)(v38 + 6) != 0x6D0072006F0066 || *(_QWORD *)(v38 + 2) != 0x6F00660069006ELL)
                    goto LABEL_63;
                }
              }
              v43 = &off_1E327ADC0;
LABEL_68:
              v42 = *((unsigned __int8 *)v43 + 16);
              v41 = 1;
LABEL_69:
              v92 = 0;
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v37, v34);
              else
                *(_DWORD *)v37 -= 2;
LABEL_71:
              if (*((_DWORD *)v36 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
                if ((result & 1) != 0)
                  goto LABEL_11;
              }
              if (!v41)
                goto LABEL_144;
              v20 = v42;
              if (!v27)
                goto LABEL_21;
LABEL_74:
              v21 = 256;
              goto LABEL_75;
            }
LABEL_147:
            v42 = 0;
            v41 = 0;
            goto LABEL_71;
          }
        }
        else if (!v37)
        {
          goto LABEL_56;
        }
        *(_DWORD *)v37 += 2;
        goto LABEL_56;
      }
    }
    v27 = 1;
    goto LABEL_35;
  }
  v20 = 0;
  v79 = 0;
LABEL_21:
  v21 = 0;
LABEL_75:
  v18 = v21 | v20;
  v17 = 1;
LABEL_76:
  WTF::AtomStringImpl::addLiteral();
  v44 = v88;
  v46 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v45);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v46 == 10)
  {
    v47 = 0;
    goto LABEL_86;
  }
  v88 = a2[7];
  if ((v46 & 0xFFFFFFFFFFFFFFF7) != 2
    && ((v46 & 0xFFFE000000000002) != 0 || !JSC::JSCell::getObject((JSC::JSCell *)v46)))
  {
LABEL_144:
    result = JSC::throwTypeError();
    goto LABEL_11;
  }
  v47 = 1;
LABEL_86:
  WTF::AtomStringImpl::addLiteral();
  v48 = v88;
  v50 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v49);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v50 == (JSC::JSCell *)10)
  {
    v51 = 0;
    v85 = 0;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::GPUSamplerBindingLayout>(v50, (unint64_t)a2, (uint64_t)&v88);
    if (HIDWORD(v88))
      goto LABEL_11;
    v51 = (char)v88;
    v85 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v52 = v88;
  v54 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v53);
    else
      *(_DWORD *)v52 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  v84 = v51;
  if (v54 == (JSC::JSCell *)10)
  {
    v83 = 0;
    LOBYTE(v55) = 0;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::GPUStorageTextureBindingLayout>(v54, a2, (uint64_t)&v88);
    if (HIDWORD(v88))
      goto LABEL_11;
    v55 = (unsigned __int16)v88 | (BYTE2(v88) << 16);
    v80 = v55 >> 8;
    v83 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v56 = v88;
  v58 = (JSC::JSCell *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v57);
    else
      *(_DWORD *)v56 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  v81 = v47;
  v82 = v18;
  v59 = v17;
  v60 = v13;
  if (v58 == (JSC::JSCell *)10)
  {
    v61 = 0;
    LOBYTE(v62) = 0;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::GPUTextureBindingLayout>(v58, (unint64_t)a2, (uint64_t)&v88);
    if (HIDWORD(v88))
      goto LABEL_11;
    v62 = (unsigned __int16)v88 | (BYTE2(v88) << 16);
    v13 = v62 >> 8;
    v61 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v63 = v88;
  v65 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v88);
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v64);
    else
      *(_DWORD *)v63 -= 2;
  }
  if (*((_DWORD *)v87 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v87);
    if ((_DWORD)result)
      goto LABEL_11;
  }
  if (v65 == 10)
  {
    v9 = "visibility";
    v10 = (int)a2;
    v11 = 11;
    goto LABEL_10;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v65, &v88);
  v66 = (int)v88;
  if ((unint64_t)v88 >> 32)
    goto LABEL_11;
  *(_DWORD *)a1 = v60;
  *(_DWORD *)(a1 + 4) = v66;
  *(_QWORD *)(a1 + 8) = v82;
  *(_QWORD *)(a1 + 16) = v79;
  *(_BYTE *)(a1 + 24) = v59;
  *(_DWORD *)(a1 + 25) = *(_DWORD *)v86;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)&v86[3];
  *(_BYTE *)(a1 + 32) = v84;
  *(_BYTE *)(a1 + 33) = v85;
  *(_BYTE *)(a1 + 36) = BYTE1(v13);
  *(_WORD *)(a1 + 34) = v62 | (unsigned __int16)((_WORD)v13 << 8);
  *(_BYTE *)(a1 + 37) = v61;
  *(_BYTE *)(a1 + 40) = BYTE1(v80);
  *(_WORD *)(a1 + 38) = v55 | (unsigned __int16)((_WORD)v80 << 8);
  *(_BYTE *)(a1 + 41) = v83;
  *(_BYTE *)(a1 + 42) = 0;
  *(_BYTE *)(a1 + 43) = v81;
  *(_DWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBlendComponent>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  unsigned __int16 v5;
  char v6;
  uint64_t Object;
  JSC::Structure *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  int v18;
  BOOL v19;
  int v20;
  char **v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  unsigned __int16 v28;
  WTF::StringImpl *v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint64_t v34;
  WTF::StringImpl *v35;

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v5) = 0;
    v6 = 0;
LABEL_90:
    LOBYTE(v28) = 1;
LABEL_93:
    v24 = 0;
    *(_BYTE *)v3 = v6;
    *(_BYTE *)(v3 + 1) = v28;
    *(_BYTE *)(v3 + 2) = v5;
    goto LABEL_94;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_63;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_63;
  v9 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v11 = JSC::JSObject::get(v9, a2, (unint64_t)v35);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v10);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_64;
  }
  if (v11 == 10)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    v35 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v5 = WebCore::parseEnumeration<WebCore::GPUBlendFactor>(a2, v11);
    if (*((_DWORD *)v35 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
      if ((result & 1) != 0)
        goto LABEL_64;
    }
    if (v5 <= 0xFFu)
      goto LABEL_63;
  }
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v9, a2, (unint64_t)v35);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v12);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((result & 1) != 0)
      goto LABEL_64;
  }
  if (v13 == 10)
  {
    v6 = 0;
    goto LABEL_85;
  }
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v35 = (WTF::StringImpl *)v13;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, a2);
    v15 = v34;
    if (v34)
      goto LABEL_25;
LABEL_59:
    v6 = 0;
    v23 = 0;
    goto LABEL_83;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0)
  {
    if (!v15)
      goto LABEL_24;
    goto LABEL_23;
  }
  v15 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, a2);
  if (v15)
LABEL_23:
    *(_DWORD *)v15 += 2;
LABEL_24:
  if (!v15)
    goto LABEL_59;
LABEL_25:
  v16 = *(_DWORD *)(v15 + 16);
  v17 = *(const char **)(v15 + 8);
  v18 = *(_DWORD *)(v15 + 4);
  v19 = v18 != 3;
  if (v17 != "add" && v18 == 3)
  {
    if ((v16 & 4) != 0)
    {
      if (*v17 != 97 || *(_WORD *)(v17 + 1) != 25700)
      {
LABEL_30:
        v20 = 3;
        goto LABEL_31;
      }
    }
    else if (*(_WORD *)v17 != 97 || *(_DWORD *)(v17 + 2) != 6553700)
    {
      goto LABEL_30;
    }
LABEL_49:
    v22 = &WebCore::parseEnumerationFromString<WebCore::GPUBlendOperation>(WTF::String const&)::mappings;
    goto LABEL_80;
  }
  if (v17 == "add")
  {
    v20 = *(_DWORD *)(v15 + 4);
    if (v18 == 3)
      goto LABEL_49;
  }
  else
  {
    v20 = *(_DWORD *)(v15 + 4);
  }
LABEL_31:
  if (v17 == "max" || v18 != 3)
  {
    if (v17 == "max" && v18 == 3)
      goto LABEL_54;
  }
  else
  {
    if (!v20)
      goto LABEL_54;
    if ((v16 & 4) != 0)
    {
      if (*v17 != 109 || *(_WORD *)(v17 + 1) != 30817)
        goto LABEL_39;
LABEL_54:
      v22 = &off_1E327AA30;
      goto LABEL_80;
    }
    if (*(_WORD *)v17 == 109 && *(_DWORD *)(v17 + 2) == 7864417)
      goto LABEL_54;
  }
LABEL_39:
  if (v17 == "min")
    v19 = 1;
  if (v19)
  {
    if (v17 == "min" && v18 == 3)
      goto LABEL_46;
  }
  else
  {
    if (!v20)
    {
LABEL_46:
      v22 = &off_1E327AA48;
LABEL_80:
      v6 = *((_BYTE *)v22 + 16);
      v23 = 1;
      goto LABEL_81;
    }
    if ((v16 & 4) != 0)
    {
      if (*v17 == 109 && *(_WORD *)(v17 + 1) == 28265)
        goto LABEL_46;
    }
    else if (*(_WORD *)v17 == 109 && *(_DWORD *)(v17 + 2) == 7209065)
    {
      goto LABEL_46;
    }
  }
  if (v17 == "reverse-subtract" || v20 != 16)
  {
    if (v17 == "reverse-subtract" && v20 == 16)
      goto LABEL_79;
    if (v17 == "subtract" || v20 != 8)
    {
      if (v20 != 8 || v17 != "subtract")
        goto LABEL_100;
    }
    else if ((v16 & 4) != 0)
    {
      if (*v17 != 115 || *(_DWORD *)(v17 + 1) != 1920230005 || *((_DWORD *)v17 + 1) != 1952670066)
        goto LABEL_100;
    }
    else
    {
      if (*(_WORD *)v17 != 115)
        goto LABEL_100;
      if (*((_QWORD *)v17 + 1) != 0x74006300610072 || *(_QWORD *)(v17 + 2) != 0x72007400620075)
        goto LABEL_100;
    }
    v22 = &off_1E327AA78;
    goto LABEL_80;
  }
  if ((v16 & 4) != 0)
  {
    if (*v17 == 114 && *(_QWORD *)(v17 + 1) == 0x732D657372657665 && *((_QWORD *)v17 + 1) == 0x7463617274627573)
    {
LABEL_79:
      v22 = &off_1E327AA60;
      goto LABEL_80;
    }
  }
  else if (*(_WORD *)v17 == 114)
  {
    v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v17 + 2), (int16x8_t)xmmword_1968BF900);
    v30.i16[0] = vminvq_u16(v30);
    if (v30.i32[0])
    {
      v31 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v17 + 1), (int16x8_t)xmmword_1968BF910);
      v31.i16[0] = vminvq_u16(v31);
      if (v31.i32[0])
        goto LABEL_79;
    }
  }
LABEL_100:
  v6 = 0;
  v23 = 0;
LABEL_81:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v15, v12);
  else
    *(_DWORD *)v15 -= 2;
LABEL_83:
  if (*((_DWORD *)v14 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
    if ((result & 1) != 0)
      goto LABEL_64;
  }
  if (!v23)
    goto LABEL_63;
LABEL_85:
  WTF::AtomStringImpl::addLiteral();
  v25 = v35;
  result = JSC::JSObject::get(v9, a2, (unint64_t)v35);
  v27 = result;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      result = WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (v27 == 10)
      goto LABEL_90;
    v35 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v29 = v35;
    result = WebCore::parseEnumeration<WebCore::GPUBlendFactor>(a2, v27);
    v28 = result;
    if (!*((_DWORD *)v29 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v29), (result & 1) == 0))
    {
      if (v28 > 0xFFu)
        goto LABEL_93;
LABEL_63:
      result = JSC::throwTypeError();
    }
  }
LABEL_64:
  v24 = 1;
LABEL_94:
  *(_DWORD *)(v3 + 4) = v24;
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUBlendFactor>(JSC::JSGlobalObject *a1, unint64_t this)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  int v9;
  int v10;
  BOOL v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint8x16_t v22;
  BOOL v23;
  int v24;
  BOOL v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  char v29;
  uint16x8_t v30;
  char v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  BOOL v37;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  BOOL v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint8x16_t v51;
  uint16x8_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint64_t v56;
  unint64_t v57;

  v3 = (uint64_t)a1;
  v57 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, (JSC::JSGlobalObject *)v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_30:
        v9 = 0;
        v10 = 0;
        return v9 | (v10 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v57, a1);
  v4 = v56;
  if (!v56)
    goto LABEL_30;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "constant" && v6 == 8)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 99 || *(_DWORD *)(v5 + 1) != 1953721967 || *((_DWORD *)v5 + 1) != 1953390964)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 99)
        goto LABEL_16;
      v14 = *(_QWORD *)(v5 + 2);
      v15 = *((_QWORD *)v5 + 1);
      if (v14 != 0x740073006E006FLL || v15 != 0x74006E00610074)
        goto LABEL_16;
    }
LABEL_37:
    v13 = &WebCore::parseEnumerationFromString<WebCore::GPUBlendFactor>(WTF::String const&)::mappings;
    goto LABEL_38;
  }
  if (v5 == "constant" && v6 == 8)
    goto LABEL_37;
  v12 = v6 != 3;
  if (v5 == "dst" || v6 != 3)
  {
    if (v5 == "dst" && v6 == 3)
      goto LABEL_26;
    v18 = v6 == 9;
    v19 = v6 != 9;
    if (v5 == "dst-alpha" || v6 != 9)
    {
      v20 = *(_DWORD *)(v4 + 4);
      if (v5 != "dst-alpha" || v6 != 9)
      {
LABEL_46:
        v21 = v7 << 32;
        if (v5 == "one" || v12)
        {
          if (v5 == "one" && v6 == 3)
            goto LABEL_52;
        }
        else
        {
          if (!v20)
          {
LABEL_52:
            v13 = &off_1E327A928;
            goto LABEL_38;
          }
          if ((_DWORD)v7)
          {
            if (*v5 == 111 && *(_WORD *)(v5 + 1) == 25966)
              goto LABEL_52;
          }
          else
          {
            if (*(_WORD *)v5 == 111 && *(_DWORD *)(v5 + 2) == 6619246)
              goto LABEL_52;
            v21 = 0;
          }
        }
        if (v5 != "one-minus-constant" && v20 == 18)
        {
          if (v21)
          {
            if (*v5 == 111)
            {
              v22 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 2), (int8x16_t)xmmword_1968BF940), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968BF930));
              v22.i8[0] = vminvq_u8(v22);
              v23 = v22.i8[0];
              if (v22.i32[0])
              {
LABEL_61:
                v13 = &off_1E327A940;
                goto LABEL_38;
              }
            }
            else
            {
              v23 = 0;
            }
          }
          else
          {
            if (*(_WORD *)v5 == 111)
            {
              v26 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF950);
              v26.i16[0] = vminvq_u16(v26);
              v23 = v26.i8[0];
              if (v26.i32[0])
              {
                v27 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BF960);
                v27.i16[0] = vminvq_u16(v27);
                v23 = v27.i8[0];
                if (v27.i32[0])
                {
                  v28 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 20), (int16x8_t)xmmword_1968BF970);
                  v28.i16[0] = vminvq_u16(v28);
                  v23 = v28.i8[0];
                  if (v28.i32[0])
                    goto LABEL_61;
                }
              }
            }
            else
            {
              v23 = 0;
            }
            v21 = 0;
          }
          v24 = 18;
          v25 = 1;
LABEL_64:
          if (v5 == "src")
            v12 = 1;
          if (v12)
          {
            if (v5 == "src" && v6 == 3)
              goto LABEL_71;
          }
          else
          {
            if (!v24)
            {
LABEL_71:
              v13 = &off_1E327A9B8;
              goto LABEL_38;
            }
            if (v21)
            {
              if (*v5 == 115 && *(_WORD *)(v5 + 1) == 25458)
                goto LABEL_71;
            }
            else
            {
              if (*(_WORD *)v5 == 115 && *(_DWORD *)(v5 + 2) == 6488178)
                goto LABEL_71;
              v21 = 0;
            }
          }
          v29 = v5 == "src-alpha" || v19;
          if ((v29 & 1) != 0)
          {
            if (v5 == "src-alpha" && v18)
              goto LABEL_89;
          }
          else
          {
            if (!v24)
            {
LABEL_89:
              v13 = &off_1E327A9D0;
              goto LABEL_38;
            }
            if (v21)
            {
              if (*v5 == 115 && *(_DWORD *)(v5 + 1) == 1630364530 && *(_DWORD *)(v5 + 5) == 1634234476)
                goto LABEL_89;
            }
            else
            {
              if (*(_WORD *)v5 == 115)
              {
                v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFA00);
                v30.i16[0] = vminvq_u16(v30);
                if (v30.i32[0])
                  goto LABEL_89;
              }
              v21 = 0;
            }
          }
          v31 = v5 == "src-alpha-saturated" || v25;
          if ((v31 & 1) != 0)
          {
            if (v5 == "src-alpha-saturated" && v23)
              goto LABEL_101;
          }
          else
          {
            if (!v24)
            {
LABEL_101:
              v13 = &off_1E327A9E8;
              goto LABEL_38;
            }
            if (v21)
            {
              if (*v5 == 115)
              {
                v32 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 3), (int8x16_t)xmmword_1968BFA20), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968BFA10));
                v32.i8[0] = vminvq_u8(v32);
                if (v32.i32[0])
                  goto LABEL_101;
              }
              v21 = 1;
            }
            else
            {
              if (*(_WORD *)v5 == 115)
              {
                v33 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFA00);
                v33.i16[0] = vminvq_u16(v33);
                if (v33.i32[0])
                {
                  v34 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968BFA30);
                  v34.i16[0] = vminvq_u16(v34);
                  if (v34.i32[0])
                  {
                    v35 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 22), (int16x8_t)xmmword_1968BFA40);
                    v35.i16[0] = vminvq_u16(v35);
                    if (v35.i32[0])
                      goto LABEL_101;
                  }
                }
              }
              v21 = 0;
            }
          }
          if (v5 == "zero" || v24 != 4)
          {
            if (v24 == 4 && v5 == "zero")
              goto LABEL_109;
          }
          else if (v21)
          {
            if (*v5 == 122 && *(_WORD *)(v5 + 1) == 29285 && *((_WORD *)v5 + 1) == 28530)
            {
LABEL_109:
              v13 = &off_1E327AA00;
              goto LABEL_38;
            }
          }
          else if (*(_WORD *)v5 == 122 && *((_DWORD *)v5 + 1) == 7274610 && *(_DWORD *)(v5 + 2) == 7471205)
          {
            goto LABEL_109;
          }
LABEL_16:
          v9 = 0;
          v10 = 0;
          goto LABEL_39;
        }
        if (v5 == "one-minus-constant" && v20 == 18)
          goto LABEL_61;
        v3 = 0x73756E696D2D656ELL;
        v37 = v20 != 13;
        if (v5 != "one-minus-dst" && v20 == 13)
        {
          if (v21)
          {
            if (*v5 == 111
              && *(_QWORD *)(v5 + 1) == 0x73756E696D2D656ELL
              && *(_QWORD *)(v5 + 5) == 0x7473642D73756E69)
            {
LABEL_144:
              v13 = &off_1E327A958;
              goto LABEL_38;
            }
          }
          else
          {
            if (*(_WORD *)v5 == 111)
            {
              v42 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF950);
              v42.i16[0] = vminvq_u16(v42);
              v23 = v42.i8[0];
              if (v42.i32[0])
              {
                v43 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968BF980);
                v43.i16[0] = vminvq_u16(v43);
                v23 = v43.i8[0];
                if (v43.i32[0])
                  goto LABEL_144;
              }
              v21 = 0;
              v37 = 0;
              goto LABEL_176;
            }
            v21 = 0;
          }
          v37 = 0;
          v23 = 0;
LABEL_176:
          v25 = 1;
          v24 = 13;
          goto LABEL_177;
        }
        if (v5 == "one-minus-dst" && v20 == 13)
          goto LABEL_144;
        v23 = v20 == 19;
        v25 = v20 != 19;
        if (v5 == "one-minus-dst-alpha" || v20 != 19)
        {
          if (v5 == "one-minus-dst-alpha")
          {
            v24 = v20;
            if (v20 == 19)
              goto LABEL_229;
          }
          else
          {
            v24 = v20;
          }
        }
        else
        {
          if (v21)
          {
            if (*v5 == 111)
            {
              v51 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 3), (int8x16_t)xmmword_1968BF9A0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968BF990));
              v51.i8[0] = vminvq_u8(v51);
              if (!v51.i32[0])
              {
                v25 = 0;
                if (v5 == "one-minus-src")
                  v37 = 1;
                v44 = 0;
                v24 = 19;
                if (!v37)
                  goto LABEL_185;
                goto LABEL_215;
              }
LABEL_229:
              v13 = &off_1E327A970;
              goto LABEL_38;
            }
          }
          else
          {
            if (*(_WORD *)v5 == 111)
            {
              v53 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF950);
              v53.i16[0] = vminvq_u16(v53);
              if (v53.i32[0])
              {
                v54 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968BF9B0);
                v54.i16[0] = vminvq_u16(v54);
                if (v54.i32[0])
                {
                  v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 22), (int16x8_t)xmmword_1968BF920);
                  v55.i16[0] = vminvq_u16(v55);
                  if (v55.i32[0])
                    goto LABEL_229;
                }
              }
            }
            v21 = 0;
          }
          v25 = 0;
          v24 = 19;
        }
LABEL_177:
        v44 = v20 == 13 && v5 == "one-minus-src";
        if (v5 != "one-minus-src" && !v37)
        {
          if (v24)
          {
            if (!v21)
            {
              if (*(_WORD *)v5 == 111)
              {
                v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF950);
                v45.i16[0] = vminvq_u16(v45);
                if (v45.i32[0])
                {
                  v46 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968BF9C0);
                  v46.i16[0] = vminvq_u16(v46);
                  if (v46.i32[0])
                    goto LABEL_187;
                }
              }
              v21 = 0;
              goto LABEL_192;
            }
            if (*v5 != 111)
              goto LABEL_192;
LABEL_185:
            if (*(_QWORD *)(v5 + 1) == 0x73756E696D2D656ELL)
            {
              v3 = 0x6372732D73756E69;
              if (*(_QWORD *)(v5 + 5) == 0x6372732D73756E69)
                goto LABEL_187;
            }
LABEL_192:
            if (v5 == "one-minus-src-alpha" || v25)
            {
              if (v5 != "one-minus-src-alpha" || !v23)
                goto LABEL_64;
            }
            else if (v24)
            {
              if (v21)
              {
                if (*v5 != 111)
                {
                  v25 = 0;
                  goto LABEL_64;
                }
                v47 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v5 + 3), (int8x16_t)xmmword_1968BF9E0), vceqq_s8(*(int8x16_t *)(v5 + 1), (int8x16_t)xmmword_1968BF9D0));
                v47.i8[0] = vminvq_u8(v47);
                v25 = v47.i8[0];
                if (!v47.i32[0])
                  goto LABEL_64;
              }
              else if (*(_WORD *)v5 != 111
                     || (v48 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF950),
                         v48.i16[0] = vminvq_u16(v48),
                         !v48.i32[0])
                     || (v49 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 6), (int16x8_t)xmmword_1968BF9F0),
                         v49.i16[0] = vminvq_u16(v49),
                         !v49.i32[0])
                     || (v50 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 22), (int16x8_t)xmmword_1968BFA00),
                         v50.i16[0] = vminvq_u16(v50),
                         !v50.i32[0]))
              {
                v25 = 0;
                v21 = 0;
                goto LABEL_64;
              }
            }
            v13 = &off_1E327A9A0;
            goto LABEL_38;
          }
LABEL_187:
          v13 = &off_1E327A988;
          goto LABEL_38;
        }
LABEL_215:
        if (!v44)
          goto LABEL_192;
        goto LABEL_187;
      }
    }
    else if ((_DWORD)v7)
    {
      if (*v5 != 100 || *(_DWORD *)(v5 + 1) != 1630368883 || *(_DWORD *)(v5 + 5) != 1634234476)
        goto LABEL_131;
    }
    else
    {
      if (*(_WORD *)v5 != 100)
      {
LABEL_131:
        v19 = 0;
LABEL_132:
        v20 = 9;
        goto LABEL_46;
      }
      v41 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BF920);
      v41.i16[0] = vminvq_u16(v41);
      v19 = v41.i8[0];
      if (!v41.i32[0])
        goto LABEL_132;
    }
    v13 = &off_1E327A910;
    goto LABEL_38;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 == 100 && *(_DWORD *)(v5 + 2) == 7602291)
      goto LABEL_26;
    goto LABEL_45;
  }
  if (*v5 != 100 || *(_WORD *)(v5 + 1) != 29811)
  {
LABEL_45:
    v12 = 0;
    v18 = 0;
    v19 = 1;
    v20 = 3;
    goto LABEL_46;
  }
LABEL_26:
  v13 = &off_1E327A8F8;
LABEL_38:
  v9 = *((unsigned __int8 *)v13 + 16);
  v10 = 1;
LABEL_39:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, (WTF::StringImpl *)v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9 | (v10 << 8);
}

WebCore::GPUBuffer *WebCore::JSGPUBuffer::destroy(WebCore::JSGPUBuffer *this, JSC::JSCell *a2)
{
  WebCore::GPUBuffer *result;
  WTF *v4;
  void *v5;

  result = (WebCore::GPUBuffer *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::GPUBuffer::~GPUBuffer(result, a2);
      return (WebCore::GPUBuffer *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSGPUBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUBufferPrototype::create(WebCore::JSGPUBufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSGPUBuffer::s_info, (uint64_t)&WebCore::JSGPUBufferPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBuffer>,(WebCore::DOMConstructorID)13>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 104);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUBuffer::s_info + ~((_QWORD)&WebCore::JSGPUBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBuffer::s_info + ~((_QWORD)&WebCore::JSGPUBuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUBuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUBuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUBufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBufferPrototype::create((WebCore::JSGPUBufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUBuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 104) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUBufferPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBuffer>,(WebCore::DOMConstructorID)13>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsGPUBuffer_size(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUBuffer_usage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 64);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsGPUBuffer_mapState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 68);
  if ((byte_1EE335583 & 1) == 0)
  {
    dword_1ECE77AE0 += 2;
    byte_1EE335583 = 1;
    dword_1ECE77B00 += 2;
    qword_1EE3356E8 = (uint64_t)&dword_1ECE77AE0;
    unk_1EE3356F0 = &dword_1ECE77B00;
    dword_1ECE77B20 += 2;
    qword_1EE3356F8 = (uint64_t)&dword_1ECE77B20;
  }
  v5 = *(_QWORD *)&_MergedGlobals_530[8 * v4 + 360];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsGPUBuffer_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 16) + 24);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUBuffer_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUBuffer::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUBuffer::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 16);
    v14 = (WTF::StringImpl *)v13[3];
    v13[3] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 64))(v13, v13 + 3);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUBufferOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUBufferOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::GPUBuffer *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::GPUBuffer *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::GPUBuffer **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::GPUBuffer **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::GPUBuffer **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::GPUBuffer::~GPUBuffer(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUBuffer>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUBuffer::s_info + ~((_QWORD)&WebCore::JSGPUBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBuffer::s_info + ~((_QWORD)&WebCore::JSGPUBuffer::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUBuffer::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUBuffer::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUBufferPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUBufferPrototype::create((WebCore::JSGPUBufferPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUBuffer::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUBuffer::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 104);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 104))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 104);
    *(_QWORD *)(v36 + 104) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 104);
  *(_QWORD *)(v32 + 104) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335660 & 1) == 0)
  {
    qword_1EE335658 = (uint64_t)&off_1E327C950;
    byte_1EE335660 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335658;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBufferBinding>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  void *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  char v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;
  JSC::VM *v36;

  v36 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v36, "buffer", 7, "GPUBufferBinding", 17, "GPUBuffer", 10);
LABEL_10:
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_23;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_23;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v34);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v7);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*((_DWORD *)v36 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
    goto LABEL_9;
  v34 = a2[7];
  if ((v8 & 0xFFFE000000000002) != 0)
    goto LABEL_23;
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSGPUBuffer::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSGPUBuffer::s_info && v12 != 0);
  }
  if (!v11 || (v15 = *(_QWORD *)(v8 + 24)) == 0)
  {
LABEL_23:
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (v16)
    goto LABEL_64;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v15;
  v18 = *(unsigned int **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v16;
  if (!v18)
    goto LABEL_64;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (v16)
  {
LABEL_64:
    do
      v21 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v21 + 1, (unsigned int *)v16));
  }
  WTF::AtomStringImpl::addLiteral();
  v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v34);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v22);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (!*((_DWORD *)v36 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v36), !(_DWORD)result))
  {
    if (v23 == 10)
    {
      v24 = 0;
      v34 = 0;
      v35 = 0;
    }
    else
    {
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v23, (uint64_t)&v34);
      if (v35)
        goto LABEL_61;
      v24 = v34;
    }
    WTF::AtomStringImpl::addLiteral();
    v27 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v32);
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v26);
      else
        *(_DWORD *)v32 -= 2;
    }
    result = (uint64_t)v36;
    if (*((_DWORD *)v36 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v36);
      if ((_DWORD)result)
        goto LABEL_61;
    }
    if (v27 == 10)
    {
      v28 = 0;
      v29 = 0;
    }
    else
    {
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v27, (uint64_t)&v32);
      if (v33)
        goto LABEL_61;
      v29 = v32;
      v28 = 1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v29;
    *(_BYTE *)(a1 + 24) = v28;
    *(_DWORD *)(a1 + 32) = 0;
    return result;
  }
LABEL_61:
  *(_DWORD *)(a1 + 32) = 1;
  if (v16)
  {
    do
    {
      v30 = __ldaxr((unsigned int *)v16);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v16));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v16);
      return WTF::fastFree((WTF *)v16, v25);
    }
  }
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUBufferDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  BOOL v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  JSC::VM *v40;
  unint64_t v41;

  v40 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    goto LABEL_29;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_51:
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v38);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v8);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (*((_DWORD *)v40 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
    if ((_DWORD)result)
      goto LABEL_51;
  }
  if (v9 == 10)
  {
    v5 = 0;
    goto LABEL_13;
  }
  result = WebCore::valueToUSVString((JSC::JSGlobalObject *)a2, v9, (uint64_t)&v38);
  v11 = v39;
  if (!v39)
  {
    v5 = v38;
    v38 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v41, (WTF::StringImpl *)&v38);
LABEL_13:
    WTF::AtomStringImpl::addLiteral();
    v12 = v38;
    v14 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v38);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (*((_DWORD *)v40 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
      if ((_DWORD)result)
        goto LABEL_31;
    }
    if (v14 == 10)
    {
      v15 = 0;
      goto LABEL_24;
    }
    v16 = a2[7];
    if (v14 >= 0xFFFE000000000000)
    {
      v33 = (_DWORD)v14 == 0;
      goto LABEL_78;
    }
    *(_QWORD *)&v17 = v14 - 0x2000000000000;
    if (v14 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v17 <= 0.0)
      {
        v15 = v17 < 0.0;
        goto LABEL_23;
      }
    }
    else
    {
      if ((v14 & 0xFFFE000000000002) != 0)
      {
        v15 = v14 == 7;
        goto LABEL_23;
      }
      v34 = *(unsigned __int8 *)(v14 + 5);
      if (v34 == 3)
      {
        v37 = *(_DWORD *)(v14 + 8);
LABEL_74:
        v33 = v37 == 0;
        goto LABEL_78;
      }
      if (v34 == 2)
      {
        v35 = *(_QWORD *)(v14 + 8);
        if ((v35 & 1) != 0)
          v36 = (int *)(v14 + 16);
        else
          v36 = (int *)(v35 + 4);
        v37 = *v36;
        goto LABEL_74;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v33 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_78:
        v15 = !v33;
LABEL_23:
        if (*((_DWORD *)v16 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
          if ((_DWORD)result)
            goto LABEL_31;
        }
LABEL_24:
        WTF::AtomStringImpl::addLiteral();
        v18 = v38;
        v20 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v38);
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v19);
          else
            *(_DWORD *)v18 -= 2;
        }
        if (*((_DWORD *)v40 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
          if ((_DWORD)result)
            goto LABEL_31;
        }
        if (v20 != 10)
        {
          result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>((WTF::StringImpl *)a2, v20, (uint64_t)&v38);
          if (v39)
            goto LABEL_31;
          v28 = v38;
          WTF::AtomStringImpl::addLiteral();
          v29 = (WTF::StringImpl *)v41;
          v31 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, v41);
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v30);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (*((_DWORD *)v40 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v40);
            if ((result & 1) != 0)
              goto LABEL_31;
          }
          if (v31 != 10)
          {
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v31, &v41);
            v32 = v41;
            v27 = HIDWORD(v41);
            if (!HIDWORD(v41))
            {
              *(_QWORD *)a3 = v5;
              *(_QWORD *)(a3 + 8) = v28;
              *(_DWORD *)(a3 + 16) = v32;
              *(_BYTE *)(a3 + 20) = v15;
              v5 = 0;
LABEL_32:
              *(_DWORD *)(a3 + 24) = v27;
              if (v5)
              {
                if (*(_DWORD *)v5 == 2)
                  return WTF::StringImpl::destroy(v5, v26);
                else
                  *(_DWORD *)v5 -= 2;
              }
              return result;
            }
LABEL_31:
            LODWORD(v27) = 1;
            goto LABEL_32;
          }
          v21 = "usage";
          v22 = "unsigned long";
          v23 = (int)a2;
          v24 = 6;
          v25 = 14;
LABEL_30:
          result = (uint64_t)WebCore::throwRequiredMemberTypeError(v23, (int)&v40, v21, v24, "GPUBufferDescriptor", 20, v22, v25);
          goto LABEL_31;
        }
LABEL_29:
        v21 = "size";
        v22 = "unsigned long long";
        v23 = (int)a2;
        v24 = 5;
        v25 = 19;
        goto LABEL_30;
      }
    }
    v15 = 1;
    goto LABEL_23;
  }
  *(_DWORD *)(a3 + 24) = 1;
  if ((_DWORD)v11 != -1)
    return ((uint64_t (*)(unint64_t *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v11])(&v41, &v38);
  return result;
}

WTF *WebCore::JSGPUBufferUsage::destroy(WebCore::JSGPUBufferUsage *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGPUBufferUsage::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBufferUsage>,(WebCore::DOMConstructorID)14>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 112);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBufferUsage>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSGPUBufferUsage::s_info + ~((_QWORD)&WebCore::JSGPUBufferUsage::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUBufferUsage::s_info + ~((_QWORD)&WebCore::JSGPUBufferUsage::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSGPUBufferUsage::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSGPUBufferUsage::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSGPUBufferUsagePrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<11u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUBufferUsage::s_info, (uint64_t)&WebCore::JSGPUBufferUsagePrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSGPUBufferUsage::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSGPUBufferUsage::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<10u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUBufferUsage::s_info, (uint64_t)&WebCore::JSGPUBufferUsageConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 112) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUBufferUsageConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUBufferUsagePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUBufferUsage>,(WebCore::DOMConstructorID)14>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSGPUCanvasContext::destroy(uint64_t this, JSCell *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
  return this;
}

uint64_t WebCore::JSGPUCanvasContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUCanvasContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUCanvasContextPrototype::create(WebCore::JSGPUCanvasContextPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSGPUCanvasContext::s_info, &WebCore::JSGPUCanvasContextPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCanvasContext>,(WebCore::DOMConstructorID)625>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5000);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCanvasContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUCanvasContext::s_info + ~((_QWORD)&WebCore::JSGPUCanvasContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCanvasContext::s_info + ~((_QWORD)&WebCore::JSGPUCanvasContext::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUCanvasContext::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUCanvasContext::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUCanvasContextPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCanvasContextPrototype::create((WebCore::JSGPUCanvasContextPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUCanvasContext::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCanvasContext::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5000) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUCanvasContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUCanvasContextPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCanvasContext>,(WebCore::DOMConstructorID)625>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUCanvasContext_canvas(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::HTMLElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE v15[40];
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD v19[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a2 + 24) + 248))(&v13);
  v5 = v14;
  if (v14 == -1)
    v5 = -1;
  v18 = v5;
  LOBYTE(v16) = 0;
  v17 = 0;
  v19[0] = &v18;
  v19[1] = &v16;
  v19[2] = a1;
  v19[3] = v3;
  v19[4] = &v13;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_17HTMLCanvasElementEEENS4_INS_15OffscreenCanvasEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((uint64_t)v19, v4, (uint64_t)v15);
  if (v17)
  {
    v6 = v16;
    if (v14 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E327EF30[v14])(v19, &v13);
    return v6;
  }
  else
  {
    v8 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::JSGPUCanvasContextOwner::isReachableFromOpaqueRoots(v8, v9, v10, v11, v12);
  }
}

uint64_t WebCore::JSGPUCanvasContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[6];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[7] || (result = (*(uint64_t (**)(_QWORD *))(v5[5] + 64))(v5 + 5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSGPUCanvasContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 16))(*(_QWORD *)(v4 + 32));
  v6 = v4 + 8;
  if (!v4)
    v6 = 0;
  if (!*(_DWORD *)(a3 + 48))
  {
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  }
  v9 = *(_QWORD *)(a3 + 32);
  v8 = (uint64_t *)(a3 + 32);
  v7 = v9;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  v10 = *(_DWORD *)(v7 - 8);
  v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(_QWORD *)(v7 + 16 * v14);
  if (v15 != v4)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(_QWORD *)(v7 + 16 * v14);
      ++v16;
      if (v15 == v4)
        goto LABEL_12;
    }
    v14 = *(unsigned int *)(v7 - 4);
  }
LABEL_12:
  if (v14 == *(_DWORD *)(v7 - 4))
    goto LABEL_22;
  v17 = (_QWORD *)(v7 + 16 * v14);
  *v17 = -1;
  v20 = v17[1];
  v19 = v17 + 1;
  v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 8) = 3;
    *v19 = 0;
  }
  ++*(_DWORD *)(*v8 - 16);
  v21 = *v8;
  v22 = *v8 ? *(_DWORD *)(v21 - 12) - 1 : -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v8;
  if (!*v8
    || ((v24 = 6 * *(_DWORD *)(v23 - 12), v25 = *(_DWORD *)(v23 - 4), v24 < v25) ? (v26 = v25 >= 9) : (v26 = 0), !v26))
  {
LABEL_22:
    if (!v4)
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  }
  result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 24))(*(_QWORD *)(v4 + 32));
  return result;
}

unint64_t WebCore::wrap<WebCore::GPUCanvasContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_62;
      }
      goto LABEL_5;
    }
LABEL_62:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 32) + 16))(*(_QWORD *)(a3 + 32));
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSGPUCanvasContext::s_info + ~((_QWORD)&WebCore::JSGPUCanvasContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCanvasContext::s_info + ~((_QWORD)&WebCore::JSGPUCanvasContext::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSGPUCanvasContext::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSGPUCanvasContext::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUCanvasContextPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSGPUCanvasContextPrototype::create((WebCore::JSGPUCanvasContextPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSGPUCanvasContext::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSGPUCanvasContext::s_info);
LABEL_12:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 5080);
  if (v26)
    goto LABEL_32;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_17:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 5080))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 5080);
    *(_QWORD *)(v29 + 5080) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 5080);
  *(_QWORD *)(v25 + 5080) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_31:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_32:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_33:
    v26[3] = SlowCase + 32;
    goto LABEL_34;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335670 & 1) == 0)
  {
    qword_1EE335668 = (uint64_t)&off_1E327C980;
    byte_1EE335670 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE335668;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_56:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE335668;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_56;
  return SlowCase;
}

uint64_t WebCore::convertDictionary<WebCore::GPUColorDict>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  uint64_t Object;
  JSC::Structure *v7;
  JSC::SmallStrings *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t result;
  int v13;
  JSC::VM *v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  double v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  double v30;
  JSC::VM *v31;
  double v32;
  JSC::VM *v33;
  double v34;
  JSC::VM *v35;
  double v36;
  double v37;
  JSC::VM *v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v38 = v5;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = JSC::throwTypeError();
      goto LABEL_11;
    }
    v7 = (JSC::Structure *)Object;
    v8 = (JSC::VM *)((char *)v5 + 41968);
    JSC::SmallStrings::singleCharacterStringRep(v8);
    v10 = (WTF::StringImpl *)JSC::JSObject::get(v7, a2, (unint64_t)v40);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v9);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (*((_DWORD *)v38 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
      if ((result & 1) != 0)
        goto LABEL_11;
    }
    if (v10 != (WTF::StringImpl *)10)
    {
      v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v39 = v14;
      v40 = v10;
      if ((unint64_t)v10 >= 0xFFFE000000000000)
      {
        v15 = (double)(int)v10;
      }
      else if ((unint64_t)v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v31 = v14;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v40, a2);
        v14 = v31;
        v15 = v32;
      }
      else
      {
        *(_QWORD *)&v15 = (char *)v10 - 0x2000000000000;
      }
      if (*((_DWORD *)v14 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
        if ((result & 1) != 0)
          goto LABEL_11;
      }
      if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        JSC::SmallStrings::singleCharacterStringRep(v8);
        v16 = v40;
        v18 = (WTF::StringImpl *)JSC::JSObject::get(v7, a2, (unint64_t)v40);
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v17);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (*((_DWORD *)v38 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
          if ((result & 1) != 0)
            goto LABEL_11;
        }
        if (v18 == (WTF::StringImpl *)10)
        {
          v11 = "b";
          goto LABEL_10;
        }
        v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v39 = v19;
        v40 = v18;
        if ((unint64_t)v18 >= 0xFFFE000000000000)
        {
          v20 = (double)(int)v18;
        }
        else if ((unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v33 = v19;
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v40, a2);
          v19 = v33;
          v20 = v34;
        }
        else
        {
          *(_QWORD *)&v20 = (char *)v18 - 0x2000000000000;
        }
        if (*((_DWORD *)v19 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
          if ((result & 1) != 0)
            goto LABEL_11;
        }
        if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          JSC::SmallStrings::singleCharacterStringRep(v8);
          v21 = v40;
          v23 = (WTF::StringImpl *)JSC::JSObject::get(v7, a2, (unint64_t)v40);
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v22);
            else
              *(_DWORD *)v21 -= 2;
          }
          if (*((_DWORD *)v38 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
            if ((result & 1) != 0)
              goto LABEL_11;
          }
          if (v23 == (WTF::StringImpl *)10)
          {
            v11 = "g";
            goto LABEL_10;
          }
          v24 = (JSC::VM *)*((_QWORD *)a2 + 7);
          v39 = v24;
          v40 = v23;
          if ((unint64_t)v23 >= 0xFFFE000000000000)
          {
            v25 = (double)(int)v23;
          }
          else if ((unint64_t)v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            v35 = v24;
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v40, a2);
            v24 = v35;
            v25 = v36;
          }
          else
          {
            *(_QWORD *)&v25 = (char *)v23 - 0x2000000000000;
          }
          if (*((_DWORD *)v24 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
            if ((result & 1) != 0)
              goto LABEL_11;
          }
          if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            JSC::SmallStrings::singleCharacterStringRep(v8);
            v26 = v40;
            v28 = (WTF::StringImpl *)JSC::JSObject::get(v7, a2, (unint64_t)v40);
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v27);
              else
                *(_DWORD *)v26 -= 2;
            }
            result = (uint64_t)v38;
            if (*((_DWORD *)v38 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v38);
              if ((result & 1) != 0)
                goto LABEL_11;
            }
            if (v28 == (WTF::StringImpl *)10)
            {
              v11 = "r";
              goto LABEL_10;
            }
            v29 = (JSC::VM *)*((_QWORD *)a2 + 7);
            v39 = v29;
            v40 = v28;
            if ((unint64_t)v28 >= 0xFFFE000000000000)
            {
              v30 = (double)(int)v28;
            }
            else if ((unint64_t)v28 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v40, a2);
            }
            else
            {
              *(_QWORD *)&v30 = (char *)v28 - 0x2000000000000;
            }
            if (*((_DWORD *)v29 + 20))
            {
              v37 = v30;
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
              v30 = v37;
              if ((result & 1) != 0)
                goto LABEL_11;
            }
            if ((*(_QWORD *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              v13 = 0;
              *(double *)a3 = v30;
              *(double *)(a3 + 8) = v25;
              *(double *)(a3 + 16) = v20;
              *(double *)(a3 + 24) = v15;
              goto LABEL_12;
            }
          }
        }
      }
      result = JSC::throwTypeError();
      goto LABEL_11;
    }
  }
  v11 = "a";
LABEL_10:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v38, v11, 2, "GPUColorDict", 13, "double", 7);
LABEL_11:
  v13 = 1;
LABEL_12:
  *(_DWORD *)(a3 + 32) = v13;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::GPUColorTargetState>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  JSC::VM **v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  JSC::JSCell *v26;
  uint64_t result;
  int v28;
  WTF::StringImpl *v29;
  unsigned __int16 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  JSC::JSCell *v39;
  uint64_t v40;
  JSC::VM *v41;
  unsigned __int16 v42;
  unsigned __int8 v43;
  int v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;

  v41 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0)
      goto LABEL_53;
    Object = JSC::JSCell::getObject(this);
    if (!Object)
      goto LABEL_53;
    v7 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v9 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v8);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v41 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
      if ((result & 1) != 0)
        goto LABEL_27;
    }
    if (v9 == 10)
    {
      v10 = 0;
      LOBYTE(v11) = 0;
LABEL_10:
      WTF::AtomStringImpl::addLiteral();
      v12 = v46;
      v14 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v13);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (*((_DWORD *)v41 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
        if ((result & 1) != 0)
          goto LABEL_27;
      }
      if (v14 == 10)
        goto LABEL_15;
      v46 = a2[7];
      v29 = v46;
      v30 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>((JSC::JSGlobalObject *)a2, v14);
      if (*((_DWORD *)v29 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
        if ((result & 1) != 0)
          goto LABEL_27;
      }
      if (v30 > 0xFFu)
      {
        WTF::AtomStringImpl::addLiteral();
        v31 = v46;
        v33 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v32);
          else
            *(_DWORD *)v31 -= 2;
        }
        result = (uint64_t)v41;
        if (*((_DWORD *)v41 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
          if ((result & 1) != 0)
            goto LABEL_27;
        }
        if (v33 == 10)
        {
          v34 = 15;
        }
        else
        {
          result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v33, &v46);
          v34 = (int)v46;
          if ((unint64_t)v46 >> 32)
            goto LABEL_27;
        }
        v28 = 0;
        *(_BYTE *)a3 = v30;
        *(_WORD *)(a3 + 5) = v3 >> 24;
        *(_DWORD *)(a3 + 1) = v11 | ((_DWORD)v3 << 8);
        *(_BYTE *)(a3 + 7) = v10;
        *(_DWORD *)(a3 + 8) = v34;
        goto LABEL_28;
      }
LABEL_53:
      result = JSC::throwTypeError();
      goto LABEL_27;
    }
    v45 = a2[7];
    if ((v9 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_24;
    if ((v9 & 0xFFFE000000000002) != 0)
      goto LABEL_53;
    v23 = JSC::JSCell::getObject((JSC::JSCell *)v9);
    if (!v23)
      goto LABEL_53;
    v24 = (JSC::Structure *)v23;
    WTF::AtomStringImpl::addLiteral();
    v26 = (JSC::JSCell *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v25);
      else
        *(_DWORD *)v46 -= 2;
    }
    if (*((_DWORD *)v45 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
      if ((result & 1) != 0)
        goto LABEL_27;
    }
    if (v26 == (JSC::JSCell *)10)
    {
LABEL_24:
      v15 = "alpha";
    }
    else
    {
      result = WebCore::convertDictionary<WebCore::GPUBlendComponent>((uint64_t)&v42, (JSC::JSGlobalObject *)a2, v26);
      if (v44)
        goto LABEL_27;
      v35 = v43;
      v36 = v42;
      WTF::AtomStringImpl::addLiteral();
      v37 = v46;
      v39 = (JSC::JSCell *)JSC::JSObject::get(v24, (JSC::JSGlobalObject *)a2, (unint64_t)v46);
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v38);
        else
          *(_DWORD *)v37 -= 2;
      }
      if (*((_DWORD *)v45 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v45);
        if ((result & 1) != 0)
          goto LABEL_27;
      }
      if (v39 != (JSC::JSCell *)10)
      {
        result = WebCore::convertDictionary<WebCore::GPUBlendComponent>((uint64_t)&v46, (JSC::JSGlobalObject *)a2, v39);
        if (HIDWORD(v46))
          goto LABEL_27;
        v40 = v36 | (v35 << 16);
        v11 = (unsigned __int16)v46 | ((unint64_t)BYTE2(v46) << 16);
        v3 = ((v11 | (v40 << 24)) >> 8) & 0xFFFFFFFFFFLL;
        v10 = 1;
        goto LABEL_10;
      }
      v15 = "color";
    }
    v16 = "GPUBlendState";
    v17 = "GPUBlendComponent";
    v18 = &v45;
    v19 = (int)a2;
    v20 = 6;
    v21 = 14;
    v22 = 18;
    goto LABEL_26;
  }
LABEL_15:
  v15 = "format";
  v16 = "GPUColorTargetState";
  v17 = "GPUTextureFormat";
  v18 = &v41;
  v19 = (int)a2;
  v20 = 7;
  v21 = 20;
  v22 = 17;
LABEL_26:
  result = (uint64_t)WebCore::throwRequiredMemberTypeError(v19, (int)v18, v15, v20, v16, v21, v17, v22);
LABEL_27:
  v28 = 1;
LABEL_28:
  *(_DWORD *)(a3 + 12) = v28;
  return result;
}

WTF *WebCore::JSGPUColorWrite::destroy(WebCore::JSGPUColorWrite *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSGPUColorWrite::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUColorWrite>,(WebCore::DOMConstructorID)15>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  JSC::Heap *v8;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  uint64_t v25;
  JSC::JSCell *v26;
  JSC::JSObject *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  JSC::Structure **v51;
  int *v52;
  int v53;
  int v54;
  JSC::Structure *v55;
  int v56;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 120);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v47) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  v8 = (JSC::Heap *)(a1 + 192);
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v42);
    v5[2] = SlowCase + (int)v42;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v47, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUColorWrite>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v43 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v43);
    v10[2848] = v2 + (int)v43;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v47);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v47);
  v14 = v47;
  v47 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v47);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(a2 + 3296);
  if (!v17)
    goto LABEL_21;
  v18 = *(_DWORD *)(v17 - 8);
  v19 = ((unint64_t)&WebCore::JSGPUColorWrite::s_info + ~((_QWORD)&WebCore::JSGPUColorWrite::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUColorWrite::s_info + ~((_QWORD)&WebCore::JSGPUColorWrite::s_info << 32)) >> 22);
  v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
  v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v22 = v18 & ((v21 >> 31) ^ v21);
  v23 = *(char ***)(v17 + 16 * v22);
  if (v23 != &WebCore::JSGPUColorWrite::s_info)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v18;
      v23 = *(char ***)(v17 + 16 * v22);
      ++v24;
      if (v23 == &WebCore::JSGPUColorWrite::s_info)
        goto LABEL_20;
    }
LABEL_21:
    v26 = *(JSC::JSCell **)(a2 + 656);
    LODWORD(v47) = 23;
    if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
    {
      v27 = (JSC::JSObject *)JSC::JSCell::getObject(v26);
      if (v27)
        JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)a1);
    }
    v28 = (uint64_t *)(a1 + 38904);
    v29 = *v5;
    if (*v5 >= (unint64_t)v5[1])
    {
      v29 = v5[2];
      if ((v29 & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        v29 = JSC::LocalAllocator::allocateSlowCase();
LABEL_26:
        *(_DWORD *)v29 = 0;
        MEMORY[0x19AEA4278](v29, a1, a2, v26, &v47, &WebCore::JSGPUColorWritePrototype::s_info, 0, 0);
        if (*(_BYTE *)(a1 + 755))
          __dmb(0xAu);
        *(_DWORD *)(v29 + 16) |= 0x80000u;
        v30 = *v28;
        if (*(_QWORD *)(a1 + 38904) >= *(_QWORD *)(a1 + 38912))
        {
          v30 = *(_QWORD *)(a1 + 38920);
          if ((v30 & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
            *(_DWORD *)v30 = 0;
            v31 = *(_DWORD *)(v29 + 8);
            *(_DWORD *)v30 = v29 >> 4;
            *(_DWORD *)(v30 + 4) = v31;
            *(_QWORD *)(v30 + 8) = 0;
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUColorWrite::s_info, &WebCore::JSGPUColorWritePrototypeTableValues, (JSC::JSObject *)v30);
            v32 = *(_QWORD *)(v5[227] + 2776);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v34 = JSC::JSString::create(a1, &v47);
            v35 = v47;
            v47 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v33);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
            v56 = *(_DWORD *)v30;
            v55 = v36;
            v37 = JSC::Structure::outOfLineCapacity(v36);
            v53 = 0;
            v54 = v37;
            v47 = (WTF::StringImpl *)&v54;
            v48 = v30;
            v49 = a1;
            v50 = &v56;
            v51 = &v55;
            v52 = &v53;
            JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)a1, v32, 6, (uint64_t)&v47);
            if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            JSC::JSObject::putDirectOffset(v30, a1, v53, v34);
            *((_DWORD *)v36 + 4) |= 0x10u;
            LODWORD(v47) = 23;
            if ((v30 & 0xFFFE000000000002) == 0)
            {
              v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
              if (v38)
                JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)a1);
            }
            v39 = *v5;
            v8 = (JSC::Heap *)(a1 + 192);
            if (*v5 >= (unint64_t)v5[1])
            {
              v39 = v5[2];
              if ((v39 & 1) != 0)
              {
                JSC::sanitizeStackForVM();
                v39 = JSC::LocalAllocator::allocateSlowCase();
                goto LABEL_40;
              }
              v46 = *(_QWORD *)(v39 + 8) ^ v5[3];
              v5[1] = v39 + HIDWORD(v46);
              v5[2] = v39 + (int)v46;
            }
            *v5 = v39 + 128;
LABEL_40:
            *(_DWORD *)v39 = 0;
            MEMORY[0x19AEA4278](v39, a1, a2, v30, &v47, &WebCore::JSGPUColorWrite::s_info, 0, 0);
            if (*(_BYTE *)(a1 + 755))
              __dmb(0xAu);
            v25 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSGPUColorWrite::s_info);
            goto LABEL_43;
          }
          v45 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(a1 + 38928);
          *(_QWORD *)(a1 + 38912) = v30 + HIDWORD(v45);
          *(_QWORD *)(a1 + 38920) = v30 + (int)v45;
        }
        *v28 = v30 + 16;
        goto LABEL_30;
      }
      v44 = *(_QWORD *)(v29 + 8) ^ v5[3];
      v5[1] = v29 + HIDWORD(v44);
      v5[2] = v29 + (int)v44;
    }
    *v5 = v29 + 128;
    goto LABEL_26;
  }
LABEL_20:
  v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
  if (!v25)
    goto LABEL_21;
LABEL_43:
  v40 = *(_QWORD *)(v25 + 48);
  v47 = 0;
  v48 = v2;
  v49 = 0x1000000FFFFFFFFLL;
  v50 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v40, 14, (uint64_t)&v47);
  JSC::reifyStaticProperties<5u>((JSC::VM *)a1, (uint64_t)&WebCore::JSGPUColorWrite::s_info, &WebCore::JSGPUColorWriteConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 120) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v8, (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUColorWriteConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUColorWritePrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUColorWrite>,(WebCore::DOMConstructorID)15>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSGPUCommandBuffer::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUCommandBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUCommandBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUCommandBufferPrototype::create(WebCore::JSGPUCommandBufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  unint64_t v20;
  WTF::StringImpl *v21[6];
  int v22;
  int v23;
  JSC::Structure *v24;
  int v25;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v20);
    *((_QWORD *)this + 4865) = SlowCase + (int)v20;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUCommandBuffer::s_info, (uint64_t)&WebCore::JSGPUCommandBufferPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v10 = v21[0];
    v11 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v21[0]) = -1;
    WORD2(v21[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v11;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v12);
      else
        *(_DWORD *)v10 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v21);
  v16 = v21[0];
  v21[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v25 = *(_DWORD *)SlowCase;
  v24 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v22 = 0;
  v23 = v18;
  v21[0] = (WTF::StringImpl *)&v23;
  v21[1] = (WTF::StringImpl *)SlowCase;
  v21[2] = this;
  v21[3] = (WTF::StringImpl *)&v25;
  v21[4] = (WTF::StringImpl *)&v24;
  v21[5] = (WTF::StringImpl *)&v22;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v21);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v22, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandBuffer>,(WebCore::DOMConstructorID)16>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 128);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUCommandBuffer::s_info + ~((_QWORD)&WebCore::JSGPUCommandBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCommandBuffer::s_info + ~((_QWORD)&WebCore::JSGPUCommandBuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUCommandBuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUCommandBuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUCommandBufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCommandBufferPrototype::create((WebCore::JSGPUCommandBufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUCommandBuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCommandBuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 128) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUCommandBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUCommandBufferPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandBuffer>,(WebCore::DOMConstructorID)16>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUCommandBuffer_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUCommandBuffer_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUCommandBuffer::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUCommandBuffer::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 16))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUCommandBufferOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUCommandBufferOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSGPUCommandEncoder::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUCommandEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUCommandEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUCommandEncoderPrototype::create(WebCore::JSGPUCommandEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::Structure *v31;
  int v32;
  unint64_t v34;
  JSC::VM *v35;
  uint64_t SlowCase;
  WTF::StringImpl *v37[6];
  int v38;
  int v39;
  JSC::Structure *v40;
  int v41;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v34 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v34);
    *((_QWORD *)this + 4865) = v6 + (int)v34;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v35 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v35;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSGPUCommandEncoder::s_info, (uint64_t)&WebCore::JSGPUCommandEncoderPrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  v11 = (v10 & 0x1000000) == 0;
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v12 = v37[0];
    v13 = *v7;
    *v7 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v13;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v37[0];
    v17 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v37[0];
    v21 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) + 472) & 0x1000000) != 0)
  {
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v37[0];
    v25 = *v7;
    *v7 = 1;
    LODWORD(v37[0]) = -1;
    WORD2(v37[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_24:
  v27 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = JSC::JSString::create((uint64_t)this, v37);
  v30 = v37[0];
  v37[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v41 = *(_DWORD *)v6;
  v40 = v31;
  v32 = JSC::Structure::outOfLineCapacity(v31);
  v38 = 0;
  v39 = v32;
  v37[0] = (WTF::StringImpl *)&v39;
  v37[1] = (WTF::StringImpl *)v6;
  v37[2] = this;
  v37[3] = (WTF::StringImpl *)&v41;
  v37[4] = (WTF::StringImpl *)&v40;
  v37[5] = (WTF::StringImpl *)&v38;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v31, this, v27, 6, (uint64_t)v37);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v38, v29);
  *((_DWORD *)v31 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandEncoder>,(WebCore::DOMConstructorID)17>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 136);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUCommandEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPUCommandEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCommandEncoder::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUCommandEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUCommandEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUCommandEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUCommandEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCommandEncoderPrototype::create((WebCore::JSGPUCommandEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUCommandEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCommandEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 136) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUCommandEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUCommandEncoderPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCommandEncoder>,(WebCore::DOMConstructorID)17>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUCommandEncoder_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUCommandEncoder_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUCommandEncoder::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 120))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUCommandEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUCommandEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUCommandEncoder>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUCommandEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPUCommandEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCommandEncoder::s_info
                                                                     + ~((_QWORD)&WebCore::JSGPUCommandEncoder::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUCommandEncoder::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUCommandEncoder::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUCommandEncoderPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCommandEncoderPrototype::create((WebCore::JSGPUCommandEncoderPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUCommandEncoder::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCommandEncoder::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 136);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 136))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 136);
    *(_QWORD *)(v36 + 136) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 136);
  *(_QWORD *)(v32 + 136) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335690 & 1) == 0)
  {
    qword_1EE335688 = (uint64_t)&off_1E327C9E0;
    byte_1EE335690 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335688;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::GPUCommandEncoderDescriptor>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  JSC::VM *v14;
  char v15;

  v4 = (JSC::VM *)*((_QWORD *)result + 7);
  v14 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  v5 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
LABEL_16:
    *(_DWORD *)(a3 + 8) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  result = (JSC::JSGlobalObject *)JSC::JSObject::get(v7, v5, (unint64_t)v12);
  v9 = (uint64_t)result;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_16;
  }
  if (v9 == 10)
  {
LABEL_9:
    v10 = 0;
LABEL_12:
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  result = (JSC::JSGlobalObject *)WebCore::valueToUSVString(v5, v9, (uint64_t)&v12);
  v11 = v13;
  if (!v13)
  {
    v10 = v12;
    v12 = 0;
    result = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_((uint64_t)&v15, (WTF::StringImpl *)&v12);
    goto LABEL_12;
  }
  *(_DWORD *)(a3 + 8) = 1;
  if ((_DWORD)v11 != -1)
    return (JSC::JSGlobalObject *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v11])(&v15, &v12);
  return result;
}

uint64_t WebCore::parseEnumeration<WebCore::GPUCompareFunction>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  int v9;
  int v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  int v19;
  uint16x8_t v20;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint64_t v26;
  unint64_t v27;

  v3 = a1;
  v27 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_31:
        v9 = 0;
        v10 = 0;
        return v9 | (v10 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, a1);
  v4 = v26;
  if (!v26)
    goto LABEL_31;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "always" && v6 == 6)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97 || *(_DWORD *)(v5 + 1) != 2036430700 || *(_DWORD *)(v5 + 2) != 1937334647)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 97)
        goto LABEL_16;
      v15 = *(_QWORD *)(v5 + 2);
      v16 = *(_QWORD *)(v5 + 4);
      if (v15 != 0x7900610077006CLL || v16 != 0x73007900610077)
        goto LABEL_16;
    }
LABEL_38:
    v14 = &WebCore::parseEnumerationFromString<WebCore::GPUCompareFunction>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v5 == "always" && v6 == 6)
    goto LABEL_38;
  v12 = v7 << 32;
  v13 = v6 != 5;
  if (v5 == "equal" || v6 != 5)
  {
    if (v5 == "equal" && v6 == 5)
      goto LABEL_27;
    if (v5 != "greater" && v6 == 7)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 103 || *(_DWORD *)(v5 + 1) != 1952540018 || *(_DWORD *)(v5 + 3) != 1919251553)
          goto LABEL_77;
        goto LABEL_89;
      }
      if (*(_WORD *)v5 != 103)
      {
LABEL_77:
        v19 = 7;
        goto LABEL_47;
      }
      v19 = 7;
      if (*(_QWORD *)(v5 + 2) == 0x74006100650072 && *(_QWORD *)(v5 + 6) == 0x72006500740061)
      {
LABEL_89:
        v14 = &off_1E327BD40;
        goto LABEL_39;
      }
LABEL_47:
      if (v5 == "never" || v13)
      {
        if (v5 == "never" && v6 == 5)
          goto LABEL_54;
      }
      else
      {
        if (!v19)
        {
LABEL_54:
          v14 = &off_1E327BDA0;
          goto LABEL_39;
        }
        if ((v12 & 0x100000000) != 0)
        {
          if (*v5 == 110 && *(_WORD *)(v5 + 1) == 30309 && *(_WORD *)(v5 + 3) == 29285)
            goto LABEL_54;
          v12 = 0x100000000;
        }
        else if (*(_WORD *)v5 == 110 && *(_QWORD *)(v5 + 2) == 0x72006500760065)
        {
          goto LABEL_54;
        }
      }
      if (v5 == "not-equal" || v19 != 9)
      {
        if (v19 == 9 && v5 == "not-equal")
          goto LABEL_62;
      }
      else if ((v12 & 0x100000000) != 0)
      {
        if (*v5 == 110 && *(_DWORD *)(v5 + 1) == 1697477743 && *(_DWORD *)(v5 + 5) == 1818326385)
        {
LABEL_62:
          v14 = &off_1E327BDB8;
          goto LABEL_39;
        }
      }
      else if (*(_WORD *)v5 == 110)
      {
        v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFA90);
        v20.i16[0] = vminvq_u16(v20);
        if (v20.i32[0])
          goto LABEL_62;
      }
LABEL_16:
      v9 = 0;
      v10 = 0;
      goto LABEL_40;
    }
    if (v5 == "greater" && v6 == 7)
      goto LABEL_89;
    if (v5 != "greater-equal" && v6 == 13)
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 103 || *(_QWORD *)(v5 + 1) != 0x652D726574616572 || *(_QWORD *)(v5 + 5) != 0x6C617571652D7265)
        {
LABEL_96:
          v19 = 13;
          goto LABEL_47;
        }
      }
      else
      {
        if (*(_WORD *)v5 != 103)
          goto LABEL_96;
        v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFA50);
        v22.i16[0] = vminvq_u16(v22);
        if (!v22.i32[0])
          goto LABEL_96;
        v23 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 10), (int16x8_t)xmmword_1968BFA60);
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0])
          goto LABEL_96;
      }
LABEL_99:
      v14 = &off_1E327BD58;
      goto LABEL_39;
    }
    if (v5 == "greater-equal" && v6 == 13)
      goto LABEL_99;
    if (v5 != "less" && v6 == 4)
    {
      if (!(_DWORD)v7)
      {
        if (*(_WORD *)v5 != 108)
        {
          v19 = 4;
          goto LABEL_47;
        }
        v19 = 4;
        if (*(_DWORD *)(v5 + 2) != 7536741 || *((_DWORD *)v5 + 1) != 7536755)
          goto LABEL_47;
LABEL_106:
        v14 = &off_1E327BD70;
        goto LABEL_39;
      }
      if (*v5 == 108 && *(_WORD *)(v5 + 1) == 29541 && *((_WORD *)v5 + 1) == 29555)
        goto LABEL_106;
      v19 = 4;
LABEL_108:
      v12 = 0x100000000;
      goto LABEL_47;
    }
    if (v5 == "less" && v6 == 4)
      goto LABEL_106;
    if (v5 == "less-equal" || v6 != 10)
    {
      v19 = *(_DWORD *)(v4 + 4);
      if (v5 != "less-equal" || v6 != 10)
        goto LABEL_47;
    }
    else if ((_DWORD)v7)
    {
      if (*v5 != 108 || *(_QWORD *)(v5 + 1) != 0x617571652D737365 || *(_QWORD *)(v5 + 2) != 0x6C617571652D7373)
      {
        v19 = 10;
        goto LABEL_108;
      }
    }
    else if (*(_WORD *)v5 != 108
           || (v24 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 2), (int16x8_t)xmmword_1968BFA70),
               v24.i16[0] = vminvq_u16(v24),
               !v24.i32[0])
           || (v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v5 + 4), (int16x8_t)xmmword_1968BFA80),
               v25.i16[0] = vminvq_u16(v25),
               !v25.i32[0]))
    {
      v19 = 10;
      goto LABEL_47;
    }
    v14 = &off_1E327BD88;
    goto LABEL_39;
  }
  if (!(_DWORD)v7)
  {
    if (*(_WORD *)v5 == 101 && *(_QWORD *)(v5 + 2) == 0x6C006100750071)
      goto LABEL_27;
    goto LABEL_46;
  }
  if (*v5 != 101 || *(_WORD *)(v5 + 1) != 30065 || *(_WORD *)(v5 + 3) != 27745)
  {
LABEL_46:
    v13 = 0;
    v19 = 5;
    goto LABEL_47;
  }
LABEL_27:
  v14 = &off_1E327BD28;
LABEL_39:
  v9 = *((unsigned __int8 *)v14 + 16);
  v10 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9 | (v10 << 8);
}

uint64_t WebCore::JSGPUCompilationInfo::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
        WTF::RefCounted<WebCore::WebGPU::CompilationInfo>::deref(v3, a2);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUCompilationInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUCompilationInfoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUCompilationInfoPrototype::create(WebCore::JSGPUCompilationInfoPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSGPUCompilationInfo::s_info, (uint64_t)&WebCore::JSGPUCompilationInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationInfo>,(WebCore::DOMConstructorID)18>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 144);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationInfo>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUCompilationInfo::s_info
         + ~((_QWORD)&WebCore::JSGPUCompilationInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCompilationInfo::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUCompilationInfo::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUCompilationInfo::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUCompilationInfo::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUCompilationInfoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCompilationInfoPrototype::create((WebCore::JSGPUCompilationInfoPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUCompilationInfo::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCompilationInfo::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 144) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUCompilationInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUCompilationInfoPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationInfo>,(WebCore::DOMConstructorID)18>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

JSC *WebCore::jsGPUCompilationInfo_messages(JSC *result, uint64_t a2)
{
  JSC *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  WTF **v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  unint64_t SlowCase;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v36;
  JSC::Structure *v37;
  JSC::JSCell *v38;
  uint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *Allocator;
  int v61;
  JSValue v62;
  void *v63;
  unint64_t v64;
  char v65;
  JSC::VM *v66;
  JSC::JSObject *v67;
  JSC::JSGlobalObject *v68;
  uint64_t v69;
  uint64_t *v70;
  WTF *v71;
  WTF *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  _QWORD *v75;
  JSC *v76;
  WTF *v77;
  WTF **v78;
  WTF *v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  WTF *v83;
  _OWORD v84[4];
  uint64_t v85;
  JSC::VM *v86;
  uint64_t v87[2];

  v2 = result;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v5 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v5) = *(_DWORD *)(v4 + 20);
    if ((_DWORD)v5)
    {
      v5 = 0;
      do
      {
        v7 = v5;
        v8 = *(_DWORD **)(*(_QWORD *)(v4 + 8) + 8 * v5);
        v9 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v9 = 1;
        ++*v8;
        *(_QWORD *)(v9 + 8) = v8;
        v5 = v7 + 1;
        *((_QWORD *)v6 + v7) = v9;
      }
      while (v7 + 1 < (unint64_t)*(unsigned int *)(v4 + 20));
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = (JSC::VM *)*((_QWORD *)v2 + 7);
  v86 = v10;
  v81 = 0;
  v82 = 0x800000000;
  v83 = (WTF *)((char *)v84 + 8);
  memset(v84, 0, sizeof(v84));
  v85 = 0;
  v11 = v5;
  if (v5 >= 9)
  {
    v81 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v82) == 1;
    v76 = v2;
    v12 = (WTF **)((char *)v6 + 8 * v11);
  }
  else
  {
    v12 = (WTF **)((char *)v6 + 8 * v5);
    if (!(_DWORD)v5)
    {
      v65 = 1;
LABEL_81:
      v79 = v83;
      v80 = v82;
      v66 = *(JSC::VM **)(v3 + 56);
      if (*((_DWORD *)v66 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) != 0)
        v68 = 0;
      else
        v68 = (JSC::JSGlobalObject *)JSC::constructArray();
      if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
        v69 = 0;
      else
        v69 = JSC::objectConstructorFreeze(v2, v68, v67);
      goto LABEL_85;
    }
    v76 = v2;
  }
  v77 = v6;
  v13 = (WTF **)v6;
  v78 = v12;
  do
  {
    v14 = *v13;
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
    if (v15)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = *(WTF **)(v15 + 16 * v20);
      if (v21 == v14)
      {
LABEL_17:
        v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
        if (v23)
        {
          if ((*(_BYTE *)(v23 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v23;
            if (*(_QWORD *)v23)
              goto LABEL_62;
          }
        }
      }
      else
      {
        v22 = 1;
        while (v21)
        {
          v20 = ((_DWORD)v20 + v22) & v16;
          v21 = *(WTF **)(v15 + 16 * v20);
          ++v22;
          if (v21 == v14)
            goto LABEL_17;
        }
      }
    }
    ++*(_DWORD *)v14;
    v25 = *(_QWORD *)(v3 + 3296);
    if (v25)
    {
      v26 = *(_DWORD *)(v25 - 8);
      v27 = ((unint64_t)&WebCore::JSGPUCompilationMessage::s_info
           + ~((_QWORD)&WebCore::JSGPUCompilationMessage::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCompilationMessage::s_info
                                                                           + ~((_QWORD)&WebCore::JSGPUCompilationMessage::s_info << 32)) >> 22);
      v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      v30 = v26 & ((v29 >> 31) ^ v29);
      v31 = *(char ***)(v25 + 16 * v30);
      if (v31 == &WebCore::JSGPUCompilationMessage::s_info)
      {
LABEL_25:
        v33 = *(_QWORD *)(v25 + 16 * v30 + 8);
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v32 = 1;
        while (v31)
        {
          v30 = ((_DWORD)v30 + v32) & v26;
          v31 = *(char ***)(v25 + 16 * v30);
          ++v32;
          if (v31 == &WebCore::JSGPUCompilationMessage::s_info)
            goto LABEL_25;
        }
      }
    }
    v34 = *(uint64_t **)(v3 + 56);
    Structure = WebCore::JSGPUCompilationMessagePrototype::createStructure(v34, v3, *(JSC::JSCell **)(v3 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v38 = (JSC::JSCell *)WebCore::JSGPUCompilationMessagePrototype::create((WebCore::JSGPUCompilationMessagePrototype *)v34, Structure, v36, v37);
    v39 = WebCore::JSGPUCompilationMessage::createStructure(v34, v3, v38);
    v33 = WebCore::cacheDOMStructure((JSCell *)v3, v39, (uint64_t)&WebCore::JSGPUCompilationMessage::s_info);
LABEL_27:
    v40 = v10;
    v41 = *(_QWORD *)(v3 + 56);
    v42 = *(_QWORD *)(v41 + 41456);
    v43 = *(_QWORD *)(v42 + 23536);
    v44 = *(_QWORD **)(v43 + 152);
    if (v44)
      goto LABEL_47;
    v45 = *(_QWORD *)(v42 + 22648);
    if (__ldaxr((unsigned __int8 *)v45))
    {
      __clrex();
LABEL_31:
      MEMORY[0x19AEA534C](v45);
      goto LABEL_32;
    }
    if (__stxr(1u, (unsigned __int8 *)v45))
      goto LABEL_31;
LABEL_32:
    v47 = *(_QWORD *)(v45 + 2824);
    if (!*(_QWORD *)(v47 + 152))
    {
      v48 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v79, "IsoSpace T");
      v87[0] = 0;
      MEMORY[0x19AEA3204](v48, &v79, v41 + 192, v41 + 1872, 32, 8, v87);
      v50 = v87[0];
      v87[0] = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v51 = v79;
      v79 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
          WTF::fastFree(v51, v49);
        else
          --*(_DWORD *)v51;
      }
      v52 = *(_QWORD *)(v47 + 152);
      *(_QWORD *)(v47 + 152) = v48;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v53 = *(_QWORD *)(v43 + 152);
    *(_QWORD *)(v43 + 152) = v44;
    if (v53)
    {
      v54 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v54, v55);
    }
    v56 = __ldxr((unsigned __int8 *)v45);
    v12 = v78;
    if (v56 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v45))
        goto LABEL_47;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
LABEL_47:
    SlowCase = v44[3];
    if (SlowCase >= v44[4])
    {
      SlowCase = v44[5];
      v10 = v40;
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM();
        SlowCase = JSC::LocalAllocator::allocateSlowCase();
      }
      else
      {
        v64 = *(_QWORD *)(SlowCase + 8) ^ v44[6];
        v44[4] = SlowCase + HIDWORD(v64);
        v44[5] = SlowCase + (int)v64;
        v44[3] = SlowCase + 32;
      }
    }
    else
    {
      v44[3] = SlowCase + 32;
      v10 = v40;
    }
    *(_DWORD *)SlowCase = 0;
    WebCore::JSDOMObject::JSDOMObject(SlowCase, v33);
    *(_QWORD *)(SlowCase + 24) = v14;
    if (*(_BYTE *)(v41 + 755))
      __dmb(0xAu);
    v57 = *(_QWORD *)(v3 + 3320);
    if ((byte_1EE3356B0 & 1) == 0)
    {
      qword_1EE3356A8 = (uint64_t)&off_1E327CA40;
      byte_1EE3356B0 = 1;
    }
    v79 = v14;
    if ((SlowCase & 8) != 0)
      v58 = (SlowCase - 112) | 1;
    else
      v58 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v58 & 1) != 0)
      v59 = v58 + 47;
    else
      v59 = *(_QWORD *)v58 + 32;
    Allocator = *(_QWORD **)(v59 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v59 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3356A8;
    Allocator[2] = v57;
    v87[0] = (uint64_t)Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v57 + 32), (uint64_t *)&v79, v87);
    if (v87[0])
      *(_QWORD *)(v87[0] + 8) = 3;
LABEL_62:
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_111;
    v61 = v82;
    if ((_DWORD)v82 == HIDWORD(v82) || v83 != (WTF *)((char *)v84 + 8) && v83)
    {
      v62.super.isa = (Class)SlowCase;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v82, v62) == 1)
        v81 = 1;
    }
    else
    {
      *((_QWORD *)v83 + v82) = SlowCase;
      LODWORD(v82) = v61 + 1;
    }
    ++v13;
  }
  while (v13 != v12);
  if (!v81)
  {
    v65 = 0;
    v2 = v76;
    v6 = v77;
    goto LABEL_81;
  }
  JSC::throwOutOfMemoryError();
LABEL_111:
  v65 = 0;
  v69 = 0;
  v6 = v77;
LABEL_85:
  v70 = *(uint64_t **)&v84[0];
  if (*(_QWORD *)&v84[0])
  {
    v79 = (WTF *)&v82;
    v75 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v84[0], (uint64_t *)&v79);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v70, v75);
  }
  if (v83 != (WTF *)((char *)v84 + 8) && v83)
    WTF::fastFree(v83, v63);
  if ((v65 & 1) == 0)
  {
    v71 = v6;
    do
    {
      v72 = *(WTF **)v71;
      *(_QWORD *)v71 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 1)
        {
          v73 = (WTF *)*((_QWORD *)v72 + 1);
          *((_QWORD *)v72 + 1) = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 1)
            {
              v74 = (WTF::StringImpl *)*((_QWORD *)v73 + 1);
              *((_QWORD *)v73 + 1) = 0;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v63);
                else
                  *(_DWORD *)v74 -= 2;
              }
              WTF::fastFree(v73, v63);
            }
            else
            {
              --*(_DWORD *)v73;
            }
          }
          WTF::fastFree(v72, v63);
        }
        else
        {
          --*(_DWORD *)v72;
        }
      }
      v71 = (WTF *)((char *)v71 + 8);
    }
    while (v71 != (WTF *)v12);
  }
  if (v6)
    WTF::fastFree(v6, v63);
  return (JSC *)v69;
}

uint64_t WebCore::JSGPUCompilationInfoOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUCompilationInfoOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
      WTF::RefCounted<WebCore::WebGPU::CompilationInfo>::deref(v24, a2);
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::GPUCompilationInfo>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSGPUCompilationInfo::s_info
         + ~((_QWORD)&WebCore::JSGPUCompilationInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCompilationInfo::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUCompilationInfo::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSGPUCompilationInfo::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSGPUCompilationInfo::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSGPUCompilationInfoPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCompilationInfoPrototype::create((WebCore::JSGPUCompilationInfoPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSGPUCompilationInfo::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCompilationInfo::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 144);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 144))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 144);
    *(_QWORD *)(v36 + 144) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 144);
  *(_QWORD *)(v32 + 144) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3356A0 & 1) == 0)
  {
    qword_1EE335698 = (uint64_t)&off_1E327CA10;
    byte_1EE3356A0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335698;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSGPUCompilationMessage::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF *v3;
  WTF::StringImpl *v4;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
          *((_QWORD *)v3 + 1) = 0;
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
              WTF::StringImpl::destroy(v4, a2);
            else
              *(_DWORD *)v4 -= 2;
          }
          WTF::fastFree(v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUCompilationMessage::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUCompilationMessagePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUCompilationMessagePrototype::create(WebCore::JSGPUCompilationMessagePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSGPUCompilationMessage::s_info, &WebCore::JSGPUCompilationMessagePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationMessage>,(WebCore::DOMConstructorID)19>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 152);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationMessage>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUCompilationMessage::s_info
         + ~((_QWORD)&WebCore::JSGPUCompilationMessage::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCompilationMessage::s_info
                                                                         + ~((_QWORD)&WebCore::JSGPUCompilationMessage::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUCompilationMessage::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUCompilationMessage::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUCompilationMessagePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUCompilationMessagePrototype::create((WebCore::JSGPUCompilationMessagePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUCompilationMessage::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUCompilationMessage::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 152) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUCompilationMessageConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUCompilationMessagePrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUCompilationMessage>,(WebCore::DOMConstructorID)19>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUCompilationMessage_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsGPUCompilationMessage_type(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (v2 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x194B29188);
  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE335584 & 1) == 0)
  {
    dword_1ECE77B40 += 2;
    byte_1EE335584 = 1;
    dword_1ECE77B60 += 2;
    qword_1EE335700 = (uint64_t)&dword_1ECE77B40;
    unk_1EE335708 = &dword_1ECE77B60;
    dword_1ECE77B80 += 2;
    qword_1EE335710 = (uint64_t)&dword_1ECE77B80;
  }
  v5 = *(_QWORD *)&_MergedGlobals_530[8 * v2 + 384];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_7:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_10;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_7;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_10:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsGPUCompilationMessage_lineNum(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 24);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUCompilationMessage_linePos(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 32);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUCompilationMessage_offset(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

unint64_t WebCore::jsGPUCompilationMessage_length(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48);
  v3 = HIDWORD(v2);
  v4 = (double)v2;
  if ((v2 & 0x80000000) != 0)
    v5 = COERCE__INT64((double)v2) + 0x2000000000000;
  else
    v5 = v2 | 0xFFFE000000000000;
  if (v3)
    return *(_QWORD *)&v4 + 0x2000000000000;
  else
    return v5;
}

uint64_t WebCore::JSGPUCompilationMessageOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUCompilationMessageOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  WTF::StringImpl *v25;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v25 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        WTF::fastFree(v24, a2);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSGPUComputePassEncoder::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSGPUComputePassEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSGPUComputePassEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSGPUComputePassEncoderPrototype::create(WebCore::JSGPUComputePassEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v5;
  unint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::Structure *v35;
  int v36;
  unint64_t v38;
  JSC::VM *v39;
  uint64_t SlowCase;
  WTF::StringImpl *v41[6];
  int v42;
  int v43;
  JSC::Structure *v44;
  int v45;

  v5 = (_QWORD *)((char *)this + 38904);
  v6 = *((_QWORD *)this + 4863);
  if (v6 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 4865);
  if ((v6 & 1) == 0)
  {
    v38 = *(_QWORD *)(v6 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v6 + HIDWORD(v38);
    *((_QWORD *)this + 4865) = v6 + (int)v38;
LABEL_2:
    *v5 = v6 + 16;
    goto LABEL_3;
  }
  v39 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
  a2 = (unint64_t)v39;
  v6 = SlowCase;
LABEL_3:
  v7 = (int *)((char *)this + 93124);
  *(_DWORD *)v6 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v8;
  *(_QWORD *)(v6 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSGPUComputePassEncoder::s_info, (uint64_t)&WebCore::JSGPUComputePassEncoderPrototypeTableValues, (JSC::JSObject *)v6);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                         + 0x28));
  v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9) + 472);
  v11 = (v10 & 0x1000000) == 0;
  if ((v10 & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v12 = v41[0];
    v13 = *v7;
    *v7 = 1;
    LODWORD(v41[0]) = -1;
    WORD2(v41[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v13;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v14);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v41[0];
    v17 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v41[0]) = -1;
    WORD2(v41[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 136))(v19) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v20 = v41[0];
    v21 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v41[0]) = -1;
    WORD2(v41[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v21;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v22);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) + 472) & 0x1000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v41[0];
    v25 = *v7;
    v11 = 1;
    *v7 = 1;
    LODWORD(v41[0]) = -1;
    WORD2(v41[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v27 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 136))(v27) + 472) & 0x1000000) != 0)
  {
    if (!v11)
      goto LABEL_28;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v28 = v41[0];
    v29 = *v7;
    *v7 = 1;
    LODWORD(v41[0]) = -1;
    WORD2(v41[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v7 = v29;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v30);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)), this, (JSC::JSObject *)v6);
LABEL_28:
  v31 = *(_QWORD *)(v5[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = JSC::JSString::create((uint64_t)this, v41);
  v34 = v41[0];
  v41[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  v45 = *(_DWORD *)v6;
  v44 = v35;
  v36 = JSC::Structure::outOfLineCapacity(v35);
  v42 = 0;
  v43 = v36;
  v41[0] = (WTF::StringImpl *)&v43;
  v41[1] = (WTF::StringImpl *)v6;
  v41[2] = this;
  v41[3] = (WTF::StringImpl *)&v45;
  v41[4] = (WTF::StringImpl *)&v44;
  v41[5] = (WTF::StringImpl *)&v42;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v35, this, v31, 6, (uint64_t)v41);
  if ((*(_BYTE *)((16 * *(unsigned int *)v6) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v6, (uint64_t)this, v42, v33);
  *((_DWORD *)v35 + 4) |= 0x10u;
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePassEncoder>,(WebCore::DOMConstructorID)20>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 160);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePassEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSGPUComputePassEncoder::s_info
         + ~((_QWORD)&WebCore::JSGPUComputePassEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUComputePassEncoder::s_info
                                                                         + ~((_QWORD)&WebCore::JSGPUComputePassEncoder::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSGPUComputePassEncoder::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSGPUComputePassEncoder::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSGPUComputePassEncoderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSGPUComputePassEncoderPrototype::create((WebCore::JSGPUComputePassEncoderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSGPUComputePassEncoder::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSGPUComputePassEncoder::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 160) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsGPUComputePassEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSGPUComputePassEncoderPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSGPUComputePassEncoder>,(WebCore::DOMConstructorID)20>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsGPUComputePassEncoder_label(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 16);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

BOOL WebCore::setJSGPUComputePassEncoder_label(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  int v17;
  char v18;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSGPUComputePassEncoder::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v16);
  v10 = v17;
  v11 = v17 == 0;
  if (!v17)
  {
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD **)(v8 + 8);
    v14 = (WTF::StringImpl *)v13[2];
    v13[2] = v12;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v9);
      else
        *(_DWORD *)v14 -= 2;
    }
    (*(void (**)(_QWORD *, _QWORD *))(*v13 + 88))(v13, v13 + 2);
    v10 = v17;
  }
  if (v10 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v10])(&v18, &v16);
  return v11;
}

uint64_t WebCore::JSGPUComputePassEncoderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSGPUComputePassEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

void WebCore::JSFileOwner::~JSFileOwner(WebCore::JSFileOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSFileCallback::hasCallback(WebCore::JSFileCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSFileListOwner::~JSFileListOwner(WebCore::JSFileListOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileReaderOwner::~JSFileReaderOwner(WebCore::JSFileReaderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileReaderSyncOwner::~JSFileReaderSyncOwner(WebCore::JSFileReaderSyncOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileSystemDirectoryEntryOwner::~JSFileSystemDirectoryEntryOwner(WebCore::JSFileSystemDirectoryEntryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileSystemDirectoryHandleOwner::~JSFileSystemDirectoryHandleOwner(WebCore::JSFileSystemDirectoryHandleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileSystemDirectoryReaderOwner::~JSFileSystemDirectoryReaderOwner(WebCore::JSFileSystemDirectoryReaderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSFileSystemEntriesCallback::hasCallback(WebCore::JSFileSystemEntriesCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSFileSystemEntryCallback::hasCallback(WebCore::JSFileSystemEntryCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSFileSystemFileEntryOwner::~JSFileSystemFileEntryOwner(WebCore::JSFileSystemFileEntryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileSystemFileHandleOwner::~JSFileSystemFileHandleOwner(WebCore::JSFileSystemFileHandleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFileSystemSyncAccessHandleOwner::~JSFileSystemSyncAccessHandleOwner(WebCore::JSFileSystemSyncAccessHandleOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFontFaceOwner::~JSFontFaceOwner(WebCore::JSFontFaceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFontFaceSetOwner::~JSFontFaceSetOwner(WebCore::JSFontFaceSetOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSFragmentDirectiveOwner::~JSFragmentDirectiveOwner(WebCore::JSFragmentDirectiveOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUOwner::~JSGPUOwner(WebCore::JSGPUOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUAdapterOwner::~JSGPUAdapterOwner(WebCore::JSGPUAdapterOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUAdapterInfoOwner::~JSGPUAdapterInfoOwner(WebCore::JSGPUAdapterInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUBindGroupOwner::~JSGPUBindGroupOwner(WebCore::JSGPUBindGroupOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUBindGroupLayoutOwner::~JSGPUBindGroupLayoutOwner(WebCore::JSGPUBindGroupLayoutOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUBufferOwner::~JSGPUBufferOwner(WebCore::JSGPUBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUCanvasContextOwner::~JSGPUCanvasContextOwner(WebCore::JSGPUCanvasContextOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUCommandBufferOwner::~JSGPUCommandBufferOwner(WebCore::JSGPUCommandBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUCommandEncoderOwner::~JSGPUCommandEncoderOwner(WebCore::JSGPUCommandEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUCompilationInfoOwner::~JSGPUCompilationInfoOwner(WebCore::JSGPUCompilationInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUCompilationMessageOwner::~JSGPUCompilationMessageOwner(WebCore::JSGPUCompilationMessageOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSGPUComputePassEncoderOwner::~JSGPUComputePassEncoderOwner(WebCore::JSGPUComputePassEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore4File11PropertyBagENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsFileListPrototypeFunction_item(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  JSC::VM *v15;
  _DWORD v16[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v15 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "FileList", "item");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFileList::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFileList::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "FileList", "item");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v16);
    if (v16[1])
    {
      return 0;
    }
    else if (*(_DWORD *)(v11 + 28) > v16[0] && (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * v16[0])) != 0)
    {
      return WebCore::wrap<WebCore::File>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v12);
    }
    else
    {
      return 2;
    }
  }
}

uint64_t WebCore::jsFileReaderPrototypeFunction_readAsArrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  JSC::VM *v29;
  char v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsArrayBuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFileReader::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFileReader::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsArrayBuffer");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v32 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSBlob::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSBlob::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::FileReader::readInternal(v16 - 32, v24, 0, (uint64_t)&v32);
      if (!v34)
        return 10;
      v26 = (WTF::StringImpl *)v32;
      v30 = (char)v32;
      v27 = v33;
      v31 = v33;
      if (!*((_QWORD *)v9 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v9, this, v28);
        v27 = v31;
      }
      v31 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "blob", 5, "FileReader", 11, a8, "readAsArrayBuffer", 18, "Blob", 5);
    }
    return 0;
  }
  v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v25);
}

uint64_t WebCore::jsFileReaderPrototypeFunction_readAsBinaryString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  JSC::VM *v29;
  char v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsBinaryString");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFileReader::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFileReader::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsBinaryString");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v32 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSBlob::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSBlob::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::FileReader::readInternal(v16 - 32, v24, 1, (uint64_t)&v32);
      if (!v34)
        return 10;
      v26 = (WTF::StringImpl *)v32;
      v30 = (char)v32;
      v27 = v33;
      v31 = v33;
      if (!*((_QWORD *)v9 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v9, this, v28);
        v27 = v31;
      }
      v31 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "blob", 5, "FileReader", 11, a8, "readAsBinaryString", 19, "Blob", 5);
    }
    return 0;
  }
  v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v25);
}

_BYTE *WebCore::jsFileReaderPrototypeFunction_readAsText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  JSValue v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSValue v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44[2];
  WTF::StringImpl *v45;
  char v46;

  v9 = *((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "FileReader", "readAsText");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFileReader::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFileReader::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v39, "FileReader", "readAsText");
  v16 = *((int *)a2 + 8);
  if ((_DWORD)v16 == 1)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, this, v35);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v44 = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSBlob::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSBlob::s_info && v21 != 0);
    }
    if (v20)
    {
      v25 = *(_QWORD *)(v18 + 24);
      if (v25)
      {
        if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL || (v26 = *((_QWORD *)a2 + 7), v26 == 10))
        {
          v27 = 0;
          v41 = 0;
          v40 = 0;
          v28 = 1;
          goto LABEL_39;
        }
        *(_QWORD *)v44 = *((_QWORD *)a2 + 7);
        if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v44, this);
          goto LABEL_35;
        }
        v29 = *(WTF::StringImpl **)(v26 + 8);
        if ((v29 & 1) != 0)
        {
          v29 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
          if (!v29)
            goto LABEL_34;
        }
        else if (!v29)
        {
LABEL_34:
          v42 = v29;
LABEL_35:
          if (*(_DWORD *)(v9 + 80))
          {
            v27 = v42;
            if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9))
            {
              v41 = 1;
              v42 = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, a2);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v24 = 0;
              v32 = 1;
              goto LABEL_48;
            }
          }
          else
          {
            v27 = v42;
          }
          v41 = 0;
          v40 = 0;
          if (v27)
          {
            v28 = 0;
            *(_DWORD *)v27 += 2;
          }
          else
          {
            v28 = 1;
          }
LABEL_39:
          v30 = *(WTF::StringImpl **)(v17 + 64);
          *(_QWORD *)(v17 + 64) = v27;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, a2);
            else
              *(_DWORD *)v30 -= 2;
          }
          WebCore::FileReader::readInternal(v17 - 32, v25, 3, (uint64_t)v44);
          if ((v28 & 1) == 0)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v31);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (v46)
          {
            v36 = (WTF::StringImpl *)LOBYTE(v44[0]);
            LOBYTE(v42) = v44[0];
            v37 = v45;
            v43 = v45;
            if (!*(_QWORD *)(v9 + 16))
            {
              v38.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v44[0]), (JSC::JSGlobalObject *)&v43);
              JSC::VM::throwException((JSC::VM *)v9, this, v38);
              v37 = v43;
            }
            v43 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v36);
              else
                *(_DWORD *)v37 -= 2;
            }
            v24 = 0;
          }
          else
          {
            v24 = 10;
          }
          v32 = 0;
LABEL_48:
          ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v32])(v44, &v40);
          return (_BYTE *)v24;
        }
        *(_DWORD *)v29 += 2;
        goto LABEL_34;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v44, 0, "blob", 5, "FileReader", 11, a8, "readAsText", 11, "Blob", 5);
  return 0;
}

uint64_t WebCore::jsFileReaderPrototypeFunction_readAsDataURL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  JSC::VM *v29;
  char v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsDataURL");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFileReader::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFileReader::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "FileReader", "readAsDataURL");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v32 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSBlob::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSBlob::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::FileReader::readInternal(v16 - 32, v24, 4, (uint64_t)&v32);
      if (!v34)
        return 10;
      v26 = (WTF::StringImpl *)v32;
      v30 = (char)v32;
      v27 = v33;
      v31 = v33;
      if (!*((_QWORD *)v9 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v32, (JSC::JSGlobalObject *)&v31);
        JSC::VM::throwException(v9, this, v28);
        v27 = v31;
      }
      v31 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "blob", 5, "FileReader", 11, a8, "readAsDataURL", 14, "Blob", 5);
    }
    return 0;
  }
  v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v25);
}

uint64_t WebCore::jsFileReaderPrototypeFunction_abort(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "FileReader", "abort");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileReader::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileReader::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "FileReader", "abort");
  WebCore::FileReader::abort((WTF *)(*(_QWORD *)(v3 + 24) - 32), a2);
  return 10;
}

uint64_t WebCore::jsFileReaderSyncPrototypeFunction_readAsArrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  WebCore::Blob *v21;
  uint64_t v22;
  JSC::ArrayBuffer *v23;
  WebCore::JSDOMGlobalObject *v24;
  JSValue v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  JSValue v30;
  WebCore *v31;
  JSC::JSGlobalObject *v32;
  JSC::CallFrame *v33;
  JSC::VM *v34;
  WebCore::JSDOMGlobalObject *v35;
  WTF::StringImpl *v36;
  int v37;
  _BYTE v38[8];
  WTF::StringImpl *v39;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "FileReaderSync", "readAsArrayBuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileReaderSync::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileReaderSync::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "FileReaderSync", "readAsArrayBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v27);
  }
  v12 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  v14 = *((_QWORD *)a2 + 6);
  v35 = (WebCore::JSDOMGlobalObject *)*((_QWORD *)this + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSBlob::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSBlob::s_info && v17 != 0);
  }
  if (!v16 || (v21 = *(WebCore::Blob **)(v14 + 24)) == 0)
  {
LABEL_25:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v35, 0, "blob", 5, "FileReaderSync", 15, v13, "readAsArrayBuffer", 18, "Blob", 5);
    return 0;
  }
  v22 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::FileReaderSync::readAsArrayBuffer(v12, v21, (uint64_t)&v35);
  if (!v37)
  {
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      v20 = WebCore::toJS(this, v22, v24, v23);
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24);
    }
    else
    {
      v20 = 2;
    }
LABEL_30:
    if (v37 != -1)
      ((void (*)(_BYTE *, WebCore::JSDOMGlobalObject **))off_1E327CFE8[v37])(v38, &v35);
    return v20;
  }
  if (v37 == 1)
  {
    v28 = (WTF::StringImpl *)v35;
    v38[0] = (_BYTE)v35;
    v29 = v36;
    v36 = 0;
    v39 = v29;
    if (!*((_QWORD *)v4 + 2))
    {
      v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v35, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v4, this, v30);
      v29 = v39;
    }
    v39 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v20 = 0;
    goto LABEL_30;
  }
  v31 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsFileReaderSyncPrototypeFunction_readAsBinaryString(v31, v32, v33);
}

uint64_t WebCore::jsFileReaderSyncPrototypeFunction_readAsBinaryString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  WebCore::Blob *v21;
  JSValue v24;
  JSC::VM *v25;
  unsigned __int8 v26[16];
  int v27;
  JSC::VM *v28;
  char v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "FileReaderSync", "readAsBinaryString");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileReaderSync::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileReaderSync::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "FileReaderSync", "readAsBinaryString");
  v28 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  v14 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v26 = *((_QWORD *)this + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSBlob::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSBlob::s_info && v17 != 0);
  }
  if (v16 && (v21 = *(WebCore::Blob **)(v14 + 24)) != 0)
  {
    WebCore::FileReaderSync::readAsBinaryString(v12, v21, (uint64_t)v26);
    v20 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v28, v26);
    if (v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E327CFF8[v27])(&v29, v26);
  }
  else
  {
LABEL_25:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v26, 0, "blob", 5, "FileReaderSync", 15, v13, "readAsBinaryString", 19, "Blob", 5);
    return 0;
  }
  return v20;
}

uint64_t WebCore::jsFileReaderSyncPrototypeFunction_readAsText(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  WebCore::Blob *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSValue v32;
  WTF::StringImpl *v33;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v35;
  unsigned __int8 v36[16];
  int v37;
  uint64_t v38;
  int v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  char v42;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "FileReaderSync", "readAsText");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileReaderSync::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileReaderSync::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v35, "FileReaderSync", "readAsText");
  v40 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v32);
  }
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  v14 = *((_QWORD *)a2 + 6);
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  *(_QWORD *)v36 = v15;
  if ((v14 & 0xFFFE000000000002) == 0)
  {
    v16 = (WebCore::ScriptExecutionContext *)v12;
    v17 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
    v18 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
    v19 = (char **)(16 * v17);
    if ((_DWORD)v17)
      v20 = v19 == &WebCore::JSBlob::s_info;
    else
      v20 = 1;
    if (!v20)
    {
      do
      {
        v19 = (char **)v19[2];
        v18 = v19 != 0;
      }
      while (v19 != &WebCore::JSBlob::s_info && v19 != 0);
    }
    if (v18)
    {
      v23 = *(WebCore::Blob **)(v14 + 24);
      if (v23)
      {
        if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
          || (v24 = *((_QWORD *)a2 + 7), v24 == 10))
        {
          v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v25 += 2;
          v39 = 0;
          goto LABEL_41;
        }
        *(_QWORD *)v36 = v24;
        if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v36, this);
          goto LABEL_38;
        }
        v26 = *(WTF::StringImpl **)(v24 + 8);
        if ((v26 & 1) != 0)
        {
          v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, this);
          if (!v26)
            goto LABEL_37;
        }
        else if (!v26)
        {
LABEL_37:
          v41 = v26;
LABEL_38:
          if (*((_DWORD *)v15 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
            v25 = v41;
            if (hasExceptionsAfterHandlingTraps)
            {
              v39 = 1;
              v41 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v33);
                else
                  *(_DWORD *)v25 -= 2;
              }
              v22 = 0;
              v29 = 1;
              goto LABEL_47;
            }
          }
          else
          {
            v25 = v41;
          }
          v39 = 0;
LABEL_41:
          v38 = 0;
          v41 = v25;
          WebCore::FileReaderSync::readAsText(v16, v23, (const WTF::String *)&v41, (uint64_t)v36);
          v22 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v40, v36);
          if (v37 != -1)
            ((void (*)(char *, unsigned __int8 *))off_1E327CFF8[v37])(&v42, v36);
          v37 = -1;
          v28 = v41;
          v41 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v27);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = 0;
LABEL_47:
          ((void (*)(unsigned __int8 *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v29])(v36, &v38);
          return v22;
        }
        *(_DWORD *)v26 += 2;
        goto LABEL_37;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v36, 0, "blob", 5, "FileReaderSync", 15, v13, "readAsText", 11, "Blob", 5);
  return 0;
}

uint64_t WebCore::jsFileReaderSyncPrototypeFunction_readAsDataURL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  uint64_t v20;
  WebCore::Blob *v21;
  JSValue v24;
  JSC::VM *v25;
  unsigned __int8 v26[16];
  int v27;
  JSC::VM *v28;
  char v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "FileReaderSync", "readAsDataURL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileReaderSync::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileReaderSync::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "FileReaderSync", "readAsDataURL");
  v28 = v4;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  v14 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v26 = *((_QWORD *)this + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v15 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
  v16 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
  v17 = (char **)(16 * v15);
  if ((_DWORD)v15)
    v18 = v17 == &WebCore::JSBlob::s_info;
  else
    v18 = 1;
  if (!v18)
  {
    do
    {
      v17 = (char **)v17[2];
      v16 = v17 != 0;
    }
    while (v17 != &WebCore::JSBlob::s_info && v17 != 0);
  }
  if (v16 && (v21 = *(WebCore::Blob **)(v14 + 24)) != 0)
  {
    WebCore::FileReaderSync::readAsDataURL(v12, v21, (uint64_t)v26);
    v20 = WebCore::toJS<WebCore::IDLDOMString,WebCore::ExceptionOr<WTF::String>>(this, (WTF::StringImpl *)&v28, v26);
    if (v27 != -1)
      ((void (*)(char *, unsigned __int8 *))off_1E327CFF8[v27])(&v29, v26);
  }
  else
  {
LABEL_25:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v26, 0, "blob", 5, "FileReaderSync", 15, v13, "readAsDataURL", 14, "Blob", 5);
    return 0;
  }
  return v20;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsFileSystemDirectoryEntryPrototypeFunction_createReader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::FileSystemDirectoryEntry *v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  unint64_t v12;
  WebCore::ActiveDOMObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t SlowCase;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  int v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v28;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  WTF::StringImpl *v53;
  _DWORD *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *Allocator;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WebCore::ActiveDOMObject *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  WebCore::ActiveDOMObject *v70;
  _QWORD *v71;
  WTF *v72;

  v3 = *((_QWORD *)a2 + 5);
  v69 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "FileSystemDirectoryEntry", "createReader");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileSystemDirectoryEntry::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileSystemDirectoryEntry::s_info && v6 != 0);
  }
  if (!v5)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "FileSystemDirectoryEntry", "createReader");
  v9 = *(WebCore::FileSystemDirectoryEntry **)(v3 + 24);
  v10 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v10)
    return 10;
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  WebCore::FileSystemDirectoryEntry::createReader(v9, v10, (uint64_t *)&v70);
  v13 = v70;
  v14 = *(_QWORD *)(v11 + 3320);
  if (*(_DWORD *)(v14 + 48))
  {
    v60 = *(_QWORD *)(v14 + 32);
    if (!v60)
      goto LABEL_17;
    v61 = *(_DWORD *)(v60 - 8);
    v62 = ((unint64_t)v70 + ~((_QWORD)v70 << 32)) ^ (((unint64_t)v70 + ~((_QWORD)v70 << 32)) >> 22);
    v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
    v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
    v65 = v61 & ((v64 >> 31) ^ v64);
    v66 = *(WebCore::ActiveDOMObject **)(v60 + 16 * v65);
    if (v66 != v70)
    {
      v67 = 1;
      while (v66)
      {
        v65 = ((_DWORD)v65 + v67) & v61;
        v66 = *(WebCore::ActiveDOMObject **)(v60 + 16 * v65);
        ++v67;
        if (v66 == v70)
          goto LABEL_87;
      }
      goto LABEL_17;
    }
LABEL_87:
    v15 = *(_QWORD *)(v60 + 16 * v65 + 8);
    if (!v15)
      goto LABEL_17;
  }
  else
  {
    v15 = *((_QWORD *)v70 + 3);
    if (!v15)
      goto LABEL_17;
  }
  if ((*(_BYTE *)(v15 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v15;
    if (*(_QWORD *)v15)
      goto LABEL_60;
  }
LABEL_17:
  ++*((_DWORD *)v70 + 8);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v13 != &off_1E3354F78)
  {
    __break(0xC471u);
    JUMPOUT(0x194B2C5B0);
  }
  v17 = *(_QWORD *)(v11 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSFileSystemDirectoryReader::s_info
         + ~((_QWORD)&WebCore::JSFileSystemDirectoryReader::s_info << 32)) ^ (((unint64_t)&WebCore::JSFileSystemDirectoryReader::s_info
                                                                             + ~((_QWORD)&WebCore::JSFileSystemDirectoryReader::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSFileSystemDirectoryReader::s_info)
    {
LABEL_23:
      v25 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v25)
        goto LABEL_25;
    }
    else
    {
      v24 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v24) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v24;
        if (v23 == &WebCore::JSFileSystemDirectoryReader::s_info)
          goto LABEL_23;
      }
    }
  }
  v26 = *(uint64_t **)(v11 + 56);
  Structure = WebCore::JSFileSystemDirectoryReaderPrototype::createStructure(v26, v11, *(JSC::JSCell **)(v11 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSFileSystemDirectoryReaderPrototype::create((WebCore::JSFileSystemDirectoryReaderPrototype *)v26, Structure, v28, v29);
  v31 = WebCore::JSFileSystemDirectoryReader::createStructure(v26, v11, v30);
  v25 = WebCore::cacheDOMStructure((JSCell *)v11, v31, (uint64_t)&WebCore::JSFileSystemDirectoryReader::s_info);
LABEL_25:
  v32 = *(_QWORD *)(v11 + 56);
  v33 = *(_QWORD *)(v32 + 41456);
  v34 = *(_QWORD *)(v33 + 23536);
  v35 = *(_QWORD **)(v34 + 696);
  if (v35)
    goto LABEL_45;
  v36 = *(_QWORD *)(v33 + 22648);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v36);
LABEL_30:
  v38 = *(_QWORD *)(v36 + 2824);
  if (!*(_QWORD *)(v38 + 696))
  {
    v39 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v72, "IsoSpace T");
    v71 = 0;
    MEMORY[0x19AEA3204](v39, &v72, v32 + 192, v32 + 1872, 32, 8, &v71);
    v41 = (uint64_t)v71;
    v71 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = v72;
    v72 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        WTF::fastFree(v42, v40);
      else
        --*(_DWORD *)v42;
    }
    v43 = *(_QWORD *)(v38 + 696);
    *(_QWORD *)(v38 + 696) = v39;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v44 = *(_QWORD *)(v34 + 696);
  *(_QWORD *)(v34 + 696) = v35;
  if (v44)
  {
    v45 = (WTF *)MEMORY[0x19AEA3528](v44);
    WTF::fastFree(v45, v46);
  }
  v47 = __ldxr((unsigned __int8 *)v36);
  if (v47 != 1)
  {
    __clrex();
    goto LABEL_44;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_45:
  SlowCase = v35[3];
  if (SlowCase >= v35[4])
  {
    SlowCase = v35[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_47;
    }
    v68 = *(_QWORD *)(SlowCase + 8) ^ v35[6];
    v35[4] = SlowCase + HIDWORD(v68);
    v35[5] = SlowCase + (int)v68;
  }
  v35[3] = SlowCase + 32;
LABEL_47:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v25);
  *(_QWORD *)(SlowCase + 24) = v13;
  if (*(_BYTE *)(v32 + 755))
    __dmb(0xAu);
  v48 = *(_QWORD *)(v11 + 3320);
  if ((byte_1EE3355C0 & 1) == 0)
  {
    qword_1EE3355B8 = (uint64_t)&off_1E327C770;
    byte_1EE3355C0 = 1;
  }
  if (*(_DWORD *)(v48 + 48))
  {
    v72 = v13;
    if ((SlowCase & 8) != 0)
      v57 = (SlowCase - 112) | 1;
    else
      v57 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v57 & 1) != 0)
      v58 = v57 + 47;
    else
      v58 = *(_QWORD *)v57 + 32;
    Allocator = *(_QWORD **)(v58 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v58 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3355B8;
    Allocator[2] = v48;
    v71 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v48 + 32), (uint64_t *)&v72, (uint64_t *)&v71);
    v51 = (uint64_t)v71;
    if (!v71)
      goto LABEL_60;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v12 = (SlowCase - 112) | 1;
    else
      v12 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v49 = v12 + 47;
    else
      v49 = *(_QWORD *)v12 + 32;
    v50 = *(_QWORD **)(v49 + 16);
    if (!v50)
      v50 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v49 + 16) = *v50;
    *v50 = SlowCase;
    v50[1] = &qword_1EE3355B8;
    v50[2] = v48;
    v51 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v13 + 3) = v50;
    if (!v51)
      goto LABEL_60;
  }
  *(_QWORD *)(v51 + 8) = 3;
LABEL_60:
  if (*((_DWORD *)v13 + 8) == 1)
  {
    if (*((_BYTE *)v13 + 64))
    {
      v53 = (WTF::StringImpl *)*((_QWORD *)v13 + 7);
      *((_QWORD *)v13 + 7) = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
          WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)v53 -= 2;
      }
    }
    v54 = (_DWORD *)*((_QWORD *)v13 + 5);
    *((_QWORD *)v13 + 5) = 0;
    if (v54)
    {
      if (v54[8] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 16))(v54);
      else
        --v54[8];
    }
    WebCore::ActiveDOMObject::~ActiveDOMObject(v13, (void *)v12);
    v56 = *((_QWORD *)v13 + 3);
    if (v56)
    {
      *(_QWORD *)(v56 + 8) = 3;
      *((_QWORD *)v13 + 3) = 0;
    }
    bmalloc::api::isoDeallocate(v13, v55);
  }
  else
  {
    --*((_DWORD *)v13 + 8);
  }
  return SlowCase;
}

uint64_t WebCore::jsFileSystemDirectoryEntryPrototypeFunction_getFile(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::JSFileSystemEntryCallback *v3;
  WebCore::JSErrorCallback *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WebCore::JSDOMGlobalObject *v22;
  unsigned int v23;
  WebCore::JSFileSystemEntryCallback *v24;
  int v25;
  int v26;
  unint64_t v27;
  WebCore::JSDOMGlobalObject *v28;
  unsigned int v29;
  WebCore::JSErrorCallback *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v39;
  WebCore::JSErrorCallback *v40;
  int v41;
  WebCore::JSFileSystemEntryCallback *v42;
  int v43;
  _WORD v44[2];
  int v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  WebCore::JSErrorCallback *v50;
  WebCore::JSFileSystemEntryCallback *v51;
  _WORD v52[5];

  v5 = (WebCore::JSErrorCallback *)0xFFFE000000000002;
  v39 = *((_QWORD *)this + 7);
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "FileSystemDirectoryEntry", "getFile");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSFileSystemDirectoryEntry::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSFileSystemDirectoryEntry::s_info && v10 != 0);
  }
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "FileSystemDirectoryEntry", "getFile");
  v13 = *(_QWORD *)(v6 + 24);
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v14)
    return 10;
  v15 = (char *)v14;
  v16 = *((_DWORD *)a2 + 8);
  if (v16 == 1 || (v17 = *((_QWORD *)a2 + 6), v17 == 10) || (v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v46 = 0;
    v47 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v48);
    LOBYTE(v46) = 0;
    v47 = -1;
    LODWORD(v18) = v49;
    if (v49 == -1)
      return 0;
    ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **, WTF::StringImpl **))off_1E327D0A8[v49])(&v42, &v46, &v48);
    v47 = v18;
    if (v49 != -1)
    {
      ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v49])(&v42, &v48);
      LODWORD(v18) = v47;
    }
    if ((_DWORD)v18)
      goto LABEL_77;
    v16 = *((_DWORD *)a2 + 8);
  }
  if ((unint64_t)(v16 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v18 = 10;
  else
    v18 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::FileSystemDirectoryEntry::Flags>((uint64_t)v44, this, (JSC::JSCell *)v18);
  if (v45)
  {
    v33 = 0;
    goto LABEL_57;
  }
  v20 = *((int *)a2 + 8);
  if ((unint64_t)(v20 - 4) >= 0xFFFFFFFFFFFFFFFDLL
    || (v21 = *((_QWORD *)a2 + 8), (v21 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v3 = 0;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v22 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v40 = (WebCore::JSErrorCallback *)*((_QWORD *)this + 7);
    if ((v21 & 0xFFFE000000000002) == 0
      && (v23 = *(unsigned __int8 *)(v21 + 5), v23 >= 0x17)
      && ((v23 & 0xFE) == 0x1A
       || (*(_BYTE *)(v21 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v48, v21), (_BYTE)v48)))
    {
      v3 = (WebCore::JSFileSystemEntryCallback *)WTF::fastMalloc((WTF *)0x20);
      v24 = WebCore::JSFileSystemEntryCallback::JSFileSystemEntryCallback(v3, v21, v22);
      v25 = 0;
      v49 = 0;
      v48 = 0;
      v26 = 1;
      v42 = v24;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v40, 2, "successCallback", 16, "FileSystemDirectoryEntry", 25, v19, "getFile", 8);
      v26 = 0;
      v25 = 1;
      v49 = 1;
    }
    v43 = v25;
    ((void (*)(WebCore::JSErrorCallback **, WTF::StringImpl **))off_1E327D0B8[v25])(&v40, &v48);
    if (!v26)
    {
      v33 = 0;
      v37 = 1;
      goto LABEL_56;
    }
    v20 = *((int *)a2 + 8);
    v5 = (WebCore::JSErrorCallback *)0xFFFE000000000002;
  }
  if ((unint64_t)(v20 - 5) >= 0xFFFFFFFFFFFFFFFCLL
    || (v27 = *((_QWORD *)a2 + 9), (v27 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v5 = 0;
    v41 = 0;
  }
  else
  {
    v28 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v51 = (WebCore::JSFileSystemEntryCallback *)*((_QWORD *)this + 7);
    if ((v27 & 0xFFFE000000000002) == 0
      && (v29 = *(unsigned __int8 *)(v27 + 5), v29 >= 0x17)
      && ((v29 & 0xFE) == 0x1A
       || (*(_BYTE *)(v27 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v48, v27), (_BYTE)v48)))
    {
      v5 = (WebCore::JSErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      v30 = WebCore::JSErrorCallback::JSErrorCallback(v5, v27, v28);
      v31 = 0;
      v49 = 0;
      v48 = 0;
      v32 = 1;
      v40 = v30;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v51, 3, "errorCallback", 14, "FileSystemDirectoryEntry", 25, v19, "getFile", 8);
      v32 = 0;
      v31 = 1;
      v49 = 1;
    }
    v41 = v31;
    ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **))off_1E327D0C8[v31])(&v51, &v48);
    if (!v32)
    {
      v33 = 0;
      v34 = 1;
LABEL_55:
      ((void (*)(WTF::StringImpl **, WebCore::JSErrorCallback **))off_1E327D0D8[v34])(&v48, &v40);
      v37 = 0;
LABEL_56:
      ((void (*)(WTF::StringImpl **, WebCore::JSFileSystemEntryCallback **))off_1E327D0E8[v37])(&v48, &v42);
LABEL_57:
      LODWORD(v18) = v47;
      goto LABEL_58;
    }
  }
  if (!v47)
  {
    v35 = v46;
    v46 = 0;
    v48 = v35;
    v52[0] = v44[0];
    v42 = 0;
    v50 = v5;
    v51 = v3;
    v40 = 0;
    WebCore::FileSystemDirectoryEntry::getFile(v13, v15, (uint64_t *)&v48, v52, (uint64_t *)&v51, (uint64_t *)&v50);
    if (v50)
    {
      if (*((_DWORD *)v50 + 4) == 1)
        (*(void (**)(WebCore::JSErrorCallback *))(*(_QWORD *)v50 + 16))(v50);
      else
        --*((_DWORD *)v50 + 4);
    }
    if (v51)
    {
      if (*((_DWORD *)v51 + 4) == 1)
      {
        (*(void (**)(WebCore::JSFileSystemEntryCallback *))(*(_QWORD *)v51 + 16))(v51);
        if (v35)
        {
LABEL_52:
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v36);
          else
            *(_DWORD *)v35 -= 2;
        }
LABEL_54:
        v34 = 0;
        v33 = 10;
        goto LABEL_55;
      }
      --*((_DWORD *)v51 + 4);
    }
    if (v35)
      goto LABEL_52;
    goto LABEL_54;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
  v33 = 0;
LABEL_58:
  if ((_DWORD)v18 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(&v48, &v46);
  return v33;
}

uint64_t WebCore::jsFileSystemDirectoryEntryPrototypeFunction_getDirectory(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore::JSFileSystemEntryCallback *v3;
  WebCore::JSErrorCallback *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WebCore::JSDOMGlobalObject *v22;
  unsigned int v23;
  WebCore::JSFileSystemEntryCallback *v24;
  int v25;
  int v26;
  unint64_t v27;
  WebCore::JSDOMGlobalObject *v28;
  unsigned int v29;
  WebCore::JSErrorCallback *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v39;
  WebCore::JSErrorCallback *v40;
  int v41;
  WebCore::JSFileSystemEntryCallback *v42;
  int v43;
  _WORD v44[2];
  int v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  WebCore::JSErrorCallback *v50;
  WebCore::JSFileSystemEntryCallback *v51;
  _WORD v52[5];

  v5 = (WebCore::JSErrorCallback *)0xFFFE000000000002;
  v39 = *((_QWORD *)this + 7);
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "FileSystemDirectoryEntry", "getDirectory");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSFileSystemDirectoryEntry::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSFileSystemDirectoryEntry::s_info && v10 != 0);
  }
  if (!v9)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "FileSystemDirectoryEntry", "getDirectory");
  v13 = *(_QWORD *)(v6 + 24);
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v14)
    return 10;
  v15 = (char *)v14;
  v16 = *((_DWORD *)a2 + 8);
  if (v16 == 1 || (v17 = *((_QWORD *)a2 + 6), v17 == 10) || (v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v46 = 0;
    v47 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v48);
    LOBYTE(v46) = 0;
    v47 = -1;
    LODWORD(v18) = v49;
    if (v49 == -1)
      return 0;
    ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **, WTF::StringImpl **))off_1E327D0A8[v49])(&v42, &v46, &v48);
    v47 = v18;
    if (v49 != -1)
    {
      ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v49])(&v42, &v48);
      LODWORD(v18) = v47;
    }
    if ((_DWORD)v18)
      goto LABEL_77;
    v16 = *((_DWORD *)a2 + 8);
  }
  if ((unint64_t)(v16 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v18 = 10;
  else
    v18 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::FileSystemDirectoryEntry::Flags>((uint64_t)v44, this, (JSC::JSCell *)v18);
  if (v45)
  {
    v33 = 0;
    goto LABEL_57;
  }
  v20 = *((int *)a2 + 8);
  if ((unint64_t)(v20 - 4) >= 0xFFFFFFFFFFFFFFFDLL
    || (v21 = *((_QWORD *)a2 + 8), (v21 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v3 = 0;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v22 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v40 = (WebCore::JSErrorCallback *)*((_QWORD *)this + 7);
    if ((v21 & 0xFFFE000000000002) == 0
      && (v23 = *(unsigned __int8 *)(v21 + 5), v23 >= 0x17)
      && ((v23 & 0xFE) == 0x1A
       || (*(_BYTE *)(v21 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v48, v21), (_BYTE)v48)))
    {
      v3 = (WebCore::JSFileSystemEntryCallback *)WTF::fastMalloc((WTF *)0x20);
      v24 = WebCore::JSFileSystemEntryCallback::JSFileSystemEntryCallback(v3, v21, v22);
      v25 = 0;
      v49 = 0;
      v48 = 0;
      v26 = 1;
      v42 = v24;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v40, 2, "successCallback", 16, "FileSystemDirectoryEntry", 25, v19, "getDirectory", 13);
      v26 = 0;
      v25 = 1;
      v49 = 1;
    }
    v43 = v25;
    ((void (*)(WebCore::JSErrorCallback **, WTF::StringImpl **))off_1E327D0B8[v25])(&v40, &v48);
    if (!v26)
    {
      v33 = 0;
      v37 = 1;
      goto LABEL_56;
    }
    v20 = *((int *)a2 + 8);
    v5 = (WebCore::JSErrorCallback *)0xFFFE000000000002;
  }
  if ((unint64_t)(v20 - 5) >= 0xFFFFFFFFFFFFFFFCLL
    || (v27 = *((_QWORD *)a2 + 9), (v27 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v5 = 0;
    v41 = 0;
  }
  else
  {
    v28 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    v51 = (WebCore::JSFileSystemEntryCallback *)*((_QWORD *)this + 7);
    if ((v27 & 0xFFFE000000000002) == 0
      && (v29 = *(unsigned __int8 *)(v27 + 5), v29 >= 0x17)
      && ((v29 & 0xFE) == 0x1A
       || (*(_BYTE *)(v27 + 6) & 4) != 0
       && ((*(void (**)(WTF::StringImpl **__return_ptr, unint64_t))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0x38))(&v48, v27), (_BYTE)v48)))
    {
      v5 = (WebCore::JSErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      v30 = WebCore::JSErrorCallback::JSErrorCallback(v5, v27, v28);
      v31 = 0;
      v49 = 0;
      v48 = 0;
      v32 = 1;
      v40 = v30;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v51, 3, "errorCallback", 14, "FileSystemDirectoryEntry", 25, v19, "getDirectory", 13);
      v32 = 0;
      v31 = 1;
      v49 = 1;
    }
    v41 = v31;
    ((void (*)(WebCore::JSFileSystemEntryCallback **, WTF::StringImpl **))off_1E327D0C8[v31])(&v51, &v48);
    if (!v32)
    {
      v33 = 0;
      v34 = 1;
LABEL_55:
      ((void (*)(WTF::StringImpl **, WebCore::JSErrorCallback **))off_1E327D0D8[v34])(&v48, &v40);
      v37 = 0;
LABEL_56:
      ((void (*)(WTF::StringImpl **, WebCore::JSFileSystemEntryCallback **))off_1E327D0E8[v37])(&v48, &v42);
LABEL_57:
      LODWORD(v18) = v47;
      goto LABEL_58;
    }
  }
  if (!v47)
  {
    v35 = v46;
    v46 = 0;
    v48 = v35;
    v52[0] = v44[0];
    v42 = 0;
    v50 = v5;
    v51 = v3;
    v40 = 0;
    WebCore::FileSystemDirectoryEntry::getDirectory(v13, v15, (uint64_t *)&v48, v52, (uint64_t *)&v51, (uint64_t *)&v50);
    if (v50)
    {
      if (*((_DWORD *)v50 + 4) == 1)
        (*(void (**)(WebCore::JSErrorCallback *))(*(_QWORD *)v50 + 16))(v50);
      else
        --*((_DWORD *)v50 + 4);
    }
    if (v51)
    {
      if (*((_DWORD *)v51 + 4) == 1)
      {
        (*(void (**)(WebCore::JSFileSystemEntryCallback *))(*(_QWORD *)v51 + 16))(v51);
        if (v35)
        {
LABEL_52:
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v36);
          else
            *(_DWORD *)v35 -= 2;
        }
LABEL_54:
        v34 = 0;
        v33 = 10;
        goto LABEL_55;
      }
      --*((_DWORD *)v51 + 4);
    }
    if (v35)
      goto LABEL_52;
    goto LABEL_54;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
  v33 = 0;
LABEL_58:
  if ((_DWORD)v18 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v18])(&v48, &v46);
  return v33;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore25JSFileSystemEntryCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15JSErrorCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore15JSErrorCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore25JSFileSystemEntryCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsFileSystemDirectoryHandlePrototypeFunction_getFileHandle(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  JSC::JSCell *v27;
  JSC::VM *v28;
  uint64_t Object;
  JSC::Structure *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  BOOL v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::DOMGuardedObject *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  objc_class *v41;
  WebCore::DOMGuardedObject *v42;
  JSC::VM *v43;
  JSValue v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  WebCore::DOMGuardedObject *v51;
  int v52;
  BOOL v53;
  WebCore::DOMGuardedObject *v54;
  WTF::StringImpl *v55;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194B2D604);
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_65;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemDirectoryHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_65:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"FileSystemDirectoryHandle", "getFileHandle", v18);
    goto LABEL_55;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v43, this, v44);
LABEL_55:
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
    else
      --*((_DWORD *)v15 + 4);
    goto LABEL_57;
  }
  v25 = *(_QWORD *)(v19 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v51);
  v26 = v52;
  if (v52)
    goto LABEL_52;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v33 = 0;
LABEL_43:
    while (v52)
    {
      v34 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
      v33 = (_DWORD)v3 != 0;
LABEL_42:
      if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
        goto LABEL_51;
    }
    v35 = v51;
    v51 = 0;
    v54 = v15;
    v55 = v35;
    v53 = v33;
    WebCore::FileSystemDirectoryHandle::getFileHandle(v25, &v55, (unsigned __int8 *)&v53, (uint64_t *)&v54);
    v37 = v54;
    v54 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v37 + 16))(v37);
      else
        --*((_DWORD *)v37 + 4);
    }
    v38 = v55;
    v55 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    v15 = 0;
    goto LABEL_51;
  }
  v27 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  v54 = v28;
  if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_36;
  if (((unint64_t)v27 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(v27);
    if (Object)
    {
      v30 = (JSC::Structure *)Object;
      v50 = v14;
      WTF::AtomStringImpl::addLiteral();
      v31 = v55;
      v3 = JSC::JSObject::get(v30, this, (unint64_t)v55);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
      v14 = v50;
      if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
        goto LABEL_51;
      if (v3 == 10)
      {
LABEL_36:
        v33 = 0;
        goto LABEL_43;
      }
      v34 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v3 >= 0xFFFE000000000000)
        goto LABEL_80;
      if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v33 = COERCE_DOUBLE(v3 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v3 - 0x2000000000000) < 0.0;
        goto LABEL_42;
      }
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v33 = v3 == 7;
        goto LABEL_42;
      }
      v45 = *(unsigned __int8 *)(v3 + 5);
      if (v45 == 3)
      {
        v48 = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v45 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v33 = 1;
LABEL_98:
            v14 = v50;
            goto LABEL_42;
          }
          v49 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_95:
          v33 = !v49;
          goto LABEL_98;
        }
        v46 = *(_QWORD *)(v3 + 8);
        if ((v46 & 1) != 0)
          v47 = (int *)(v3 + 16);
        else
          v47 = (int *)(v46 + 4);
        v48 = *v47;
      }
      v49 = v48 == 0;
      goto LABEL_95;
    }
  }
  JSC::throwTypeError();
LABEL_51:
  v26 = v52;
LABEL_52:
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(&v55, &v51);
  if (v15)
    goto LABEL_55;
LABEL_57:
  v39 = *(_QWORD *)(v11 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v11 + 24) != v39)
    {
      v41 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v11);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v51);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v51, v41, 0);
      v42 = v51;
      v51 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v42 + 16))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
    }
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    return 10;
  return v14;
}

unint64_t WebCore::jsFileSystemDirectoryHandlePrototypeFunction_getDirectoryHandle(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  JSC::JSCell *v27;
  JSC::VM *v28;
  uint64_t Object;
  JSC::Structure *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  BOOL v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::DOMGuardedObject *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  objc_class *v41;
  WebCore::DOMGuardedObject *v42;
  JSC::VM *v43;
  JSValue v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  WebCore::DOMGuardedObject *v51;
  int v52;
  BOOL v53;
  WebCore::DOMGuardedObject *v54;
  WTF::StringImpl *v55;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194B2DAF0);
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_65;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemDirectoryHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_65:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"FileSystemDirectoryHandle", "getDirectoryHandle", v18);
    goto LABEL_55;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v43 = (JSC::VM *)*((_QWORD *)this + 7);
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v43, this, v44);
LABEL_55:
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
    else
      --*((_DWORD *)v15 + 4);
    goto LABEL_57;
  }
  v25 = *(_QWORD *)(v19 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v51);
  v26 = v52;
  if (v52)
    goto LABEL_52;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v33 = 0;
LABEL_43:
    while (v52)
    {
      v34 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
      v33 = (_DWORD)v3 != 0;
LABEL_42:
      if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
        goto LABEL_51;
    }
    v35 = v51;
    v51 = 0;
    v54 = v15;
    v55 = v35;
    v53 = v33;
    WebCore::FileSystemDirectoryHandle::getDirectoryHandle(v25, &v55, (unsigned __int8 *)&v53, (uint64_t *)&v54);
    v37 = v54;
    v54 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v37 + 16))(v37);
      else
        --*((_DWORD *)v37 + 4);
    }
    v38 = v55;
    v55 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    v15 = 0;
    goto LABEL_51;
  }
  v27 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  v54 = v28;
  if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_36;
  if (((unint64_t)v27 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(v27);
    if (Object)
    {
      v30 = (JSC::Structure *)Object;
      v50 = v14;
      WTF::AtomStringImpl::addLiteral();
      v31 = v55;
      v3 = JSC::JSObject::get(v30, this, (unint64_t)v55);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
      v14 = v50;
      if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
        goto LABEL_51;
      if (v3 == 10)
      {
LABEL_36:
        v33 = 0;
        goto LABEL_43;
      }
      v34 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v3 >= 0xFFFE000000000000)
        goto LABEL_80;
      if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v33 = COERCE_DOUBLE(v3 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v3 - 0x2000000000000) < 0.0;
        goto LABEL_42;
      }
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v33 = v3 == 7;
        goto LABEL_42;
      }
      v45 = *(unsigned __int8 *)(v3 + 5);
      if (v45 == 3)
      {
        v48 = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v45 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v33 = 1;
LABEL_98:
            v14 = v50;
            goto LABEL_42;
          }
          v49 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_95:
          v33 = !v49;
          goto LABEL_98;
        }
        v46 = *(_QWORD *)(v3 + 8);
        if ((v46 & 1) != 0)
          v47 = (int *)(v3 + 16);
        else
          v47 = (int *)(v46 + 4);
        v48 = *v47;
      }
      v49 = v48 == 0;
      goto LABEL_95;
    }
  }
  JSC::throwTypeError();
LABEL_51:
  v26 = v52;
LABEL_52:
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(&v55, &v51);
  if (v15)
    goto LABEL_55;
LABEL_57:
  v39 = *(_QWORD *)(v11 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v11 + 24) != v39)
    {
      v41 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v11);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v51);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v51, v41, 0);
      v42 = v51;
      v51 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v42 + 16))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
    }
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    return 10;
  return v14;
}

unint64_t WebCore::jsFileSystemDirectoryHandlePrototypeFunction_removeEntry(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  JSC::VM *v13;
  unint64_t v14;
  WebCore::DOMGuardedObject *v15;
  WebCore::DOMGuardedObject *v16;
  JSC::JSGlobalObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  JSC::JSCell *v27;
  WebCore::DOMGuardedObject *v28;
  uint64_t Object;
  JSC::Structure *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  BOOL v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  objc_class *v40;
  WebCore::DOMGuardedObject *v41;
  JSC::VM *v42;
  JSValue v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  WebCore::DOMGuardedObject *v50;
  int v51;
  BOOL v52;
  WebCore::DOMGuardedObject *v53;
  WTF::StringImpl *v54;

  v6 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSDOMGlobalObject::s_info && v8 != 0);
  }
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x194B2DFD8);
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_DWORD *)this + 291);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  v14 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v13, a3);
  v15 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v16 = WebCore::DOMGuardedObject::DOMGuardedObject(v15, (unint64_t)this, v14);
  *(_QWORD *)v16 = &off_1E3226868;
  *((_DWORD *)v16 + 10) = 0;
  *((_BYTE *)v16 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_65;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemDirectoryHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_65:
    WebCore::rejectPromiseWithThisTypeError(v15, (WebCore::DeferredPromise *)"FileSystemDirectoryHandle", "removeEntry", v18);
    goto LABEL_55;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v42 = (JSC::VM *)*((_QWORD *)this + 7);
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v17);
    JSC::VM::throwException(v42, this, v43);
LABEL_55:
    if (*((_DWORD *)v15 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v15 + 16))(v15);
    else
      --*((_DWORD *)v15 + 4);
    goto LABEL_57;
  }
  v25 = *(_QWORD *)(v19 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v50);
  v26 = v51;
  if (v51)
    goto LABEL_52;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v33 = 0;
LABEL_43:
    while (v51)
    {
      v34 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_80:
      v33 = (_DWORD)v3 != 0;
LABEL_42:
      if (*((_DWORD *)v34 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v34))
        goto LABEL_51;
    }
    v35 = v50;
    v50 = 0;
    v53 = v15;
    v54 = v35;
    v52 = v33;
    WebCore::FileSystemDirectoryHandle::removeEntry(v25, (uint64_t)&v54, (unsigned __int8 *)&v52, (uint64_t *)&v53);
    if (v53)
    {
      if (*((_DWORD *)v53 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v53 + 16))();
      else
        --*((_DWORD *)v53 + 4);
    }
    v37 = v54;
    v54 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    v15 = 0;
    goto LABEL_51;
  }
  v27 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v28 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  v53 = v28;
  if (((unint64_t)v27 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_36;
  if (((unint64_t)v27 & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(v27);
    if (Object)
    {
      v30 = (JSC::Structure *)Object;
      v49 = v14;
      WTF::AtomStringImpl::addLiteral();
      v31 = v54;
      v3 = JSC::JSObject::get(v30, this, (unint64_t)v54);
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
      }
      v14 = v49;
      if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
        goto LABEL_51;
      if (v3 == 10)
      {
LABEL_36:
        v33 = 0;
        goto LABEL_43;
      }
      v34 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v3 >= 0xFFFE000000000000)
        goto LABEL_80;
      if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v33 = COERCE_DOUBLE(v3 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v3 - 0x2000000000000) < 0.0;
        goto LABEL_42;
      }
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v33 = v3 == 7;
        goto LABEL_42;
      }
      v44 = *(unsigned __int8 *)(v3 + 5);
      if (v44 == 3)
      {
        v47 = *(_DWORD *)(v3 + 8);
      }
      else
      {
        if (v44 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v33 = 1;
LABEL_98:
            v14 = v49;
            goto LABEL_42;
          }
          v48 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_95:
          v33 = !v48;
          goto LABEL_98;
        }
        v45 = *(_QWORD *)(v3 + 8);
        if ((v45 & 1) != 0)
          v46 = (int *)(v3 + 16);
        else
          v46 = (int *)(v45 + 4);
        v47 = *v46;
      }
      v48 = v47 == 0;
      goto LABEL_95;
    }
  }
  JSC::throwTypeError();
LABEL_51:
  v26 = v51;
LABEL_52:
  if (v26 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v26])(&v54, &v50);
  if (v15)
    goto LABEL_55;
LABEL_57:
  v38 = *(_QWORD *)(v11 + 16);
  if (v38)
  {
    if (*(_QWORD *)(v11 + 24) != v38)
    {
      v40 = *(objc_class **)(v38 + 8);
      JSC::VM::clearException((JSC::VM *)v11);
      WebCore::DeferredPromise::create((unint64_t)this, v14, 0, &v50);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v50, v40, 0);
      v41 = v50;
      v50 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v41 + 16))(v41);
        else
          --*((_DWORD *)v41 + 4);
      }
    }
  }
  if (*(_DWORD *)(v11 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11) & 1) != 0)
    return 10;
  return v14;
}

unint64_t WebCore::jsFileSystemDirectoryHandlePrototypeFunction_resolve(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  JSValue v36;
  objc_class *v37;
  WebCore::DOMGuardedObject *v38;
  WebCore::DOMGuardedObject *v39;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B2E3E0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemDirectoryHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_49:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FileSystemDirectoryHandle", "resolve", v17);
    goto LABEL_38;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v36);
LABEL_38:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_44;
  }
  v26 = *(_QWORD *)(v19 + 24);
  v27 = *((_QWORD *)a2 + 6);
  v39 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
  v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
  v30 = (char **)(16 * v28);
  if ((_DWORD)v28)
    v31 = v30 == &WebCore::JSFileSystemHandle::s_info;
  else
    v31 = 1;
  if (!v31)
  {
    do
    {
      v30 = (char **)v30[2];
      v29 = v30 != 0;
    }
    while (v30 != &WebCore::JSFileSystemHandle::s_info && v30 != 0);
  }
  if (!v29 || (v33 = *(_QWORD *)(v27 + 24)) == 0)
  {
LABEL_37:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v39, 0, "possibleDescendant", 19, "FileSystemDirectoryHandle", 26, v18, "resolve", 8, "FileSystemHandle", 17);
    goto LABEL_38;
  }
  v39 = v14;
  WebCore::FileSystemDirectoryHandle::resolve(v26, v33, (uint64_t *)&v39);
  if (v39)
  {
    if (*((_DWORD *)v39 + 4) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 16))();
    else
      --*((_DWORD *)v39 + 4);
  }
LABEL_44:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v37 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v39);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v39, v37, 0);
      v38 = v39;
      v39 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsFileSystemDirectoryHandlePrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileSystemDirectoryHandle::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FileSystemDirectoryHandleIterator>(v3, 2);
}

_BYTE *WebCore::jsFileSystemDirectoryHandlePrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "keys");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileSystemDirectoryHandle::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "keys");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FileSystemDirectoryHandleIterator>(v3, 0);
}

_BYTE *WebCore::jsFileSystemDirectoryHandlePrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileSystemDirectoryHandle::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileSystemDirectoryHandle::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FileSystemDirectoryHandle", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FileSystemDirectoryHandleIterator>(v3, 1);
}

unint64_t WebCore::iteratorCreate<WebCore::FileSystemDirectoryHandleIterator>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::Structure *v28;
  int v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  WTF::StringImpl *v55[6];
  int v56;
  int v57;
  int v58;
  JSC::Structure *v59;

  v4 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (unint64_t *)(v5 + 40136);
  v7 = *(_QWORD *)(v4 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::FileSystemDirectoryHandleIterator::s_info
        + ~((_QWORD)&WebCore::FileSystemDirectoryHandleIterator::s_info << 32)) ^ (((unint64_t)&WebCore::FileSystemDirectoryHandleIterator::s_info
                                                                                  + ~((_QWORD)&WebCore::FileSystemDirectoryHandleIterator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::FileSystemDirectoryHandleIterator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_32;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::FileSystemDirectoryHandleIterator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(JSC::JSCell **)(v4 + 704);
  LODWORD(v55[0]) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v18 = (uint64_t *)(v5 + 38904);
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v52 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v52);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v52;
LABEL_11:
    *v6 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, v4, v16, v55, &WebCore::JSDOMAsyncIteratorPrototype<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v5 + 38904) < *(_QWORD *)(v5 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v5 + 38920);
  if ((v20 & 1) == 0)
  {
    v53 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v20 + HIDWORD(v53);
    *(_QWORD *)(v5 + 38920) = v20 + (int)v53;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 2000);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v55[0] = v22;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  else
  {
    v55[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = JSC::JSString::create(v5, v55);
  v27 = v55[0];
  v55[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v58 = *(_DWORD *)v20;
  v59 = v28;
  v29 = JSC::Structure::outOfLineCapacity(v28);
  v56 = 0;
  v57 = v29;
  v55[0] = (WTF::StringImpl *)&v57;
  v55[1] = (WTF::StringImpl *)v20;
  v55[2] = (WTF::StringImpl *)v5;
  v55[3] = (WTF::StringImpl *)&v58;
  v55[4] = (WTF::StringImpl *)&v59;
  v55[5] = (WTF::StringImpl *)&v56;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v28, (JSC::VM *)v5, v24, 6, (uint64_t)v55);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v5, v56, v26);
  *((_DWORD *)v28 + 4) |= 0x10u;
  LODWORD(v55[0]) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v30)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v5);
  }
  v31 = *v6;
  if (*v6 >= *(_QWORD *)(v5 + 40144))
  {
    v31 = *(_QWORD *)(v5 + 40152);
    if ((v31 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v31 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v54 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v31 + HIDWORD(v54);
    *(_QWORD *)(v5 + 40152) = v31 + (int)v54;
  }
  *v6 = v31 + 128;
LABEL_29:
  *(_DWORD *)v31 = 0;
  MEMORY[0x19AEA4278](v31, v5, v4, v20, v55, &WebCore::FileSystemDirectoryHandleIterator::s_info, 0, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::cacheDOMStructure((JSCell *)v4, v31, (uint64_t)&WebCore::FileSystemDirectoryHandleIterator::s_info);
LABEL_32:
  v32 = *(_QWORD *)(v5 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 7528);
  if (v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_37:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 760))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v55, "IsoSpace T");
    v59 = 0;
    MEMORY[0x19AEA3204](v38, v55, v5 + 192, v5 + 1872, 48, 8, &v59);
    v40 = v59;
    v59 = 0;
    if (v40)
      (*(void (**)(JSC::Structure *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v55[0];
    v55[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 760);
    *(_QWORD *)(v37 + 760) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v33 + 7528);
  *(_QWORD *)(v33 + 7528) = v34;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v35);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_52:
  v47 = v34[3];
  if (v47 < v34[4])
  {
LABEL_53:
    v34[3] = v47 + 48;
    goto LABEL_54;
  }
  v47 = v34[5];
  if ((v47 & 1) == 0)
  {
    v51 = *(_QWORD *)(v47 + 8) ^ v34[6];
    v34[4] = v47 + HIDWORD(v51);
    v34[5] = v47 + (int)v51;
    goto LABEL_53;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_54:
  *(_DWORD *)v47 = 0;
  WebCore::JSDOMObject::JSDOMObject(v47, v15);
  v48 = *(_QWORD *)(a1 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                    * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                    + 0x28));
  v49 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)v49 = 1;
  ++*(_DWORD *)(v48 + 24);
  *(_WORD *)(v49 + 40) = 0;
  *(_QWORD *)(v49 + 8) = v48;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  *(_QWORD *)(v49 + 32) = 0;
  *(_QWORD *)(v47 + 24) = v49;
  *(_DWORD *)(v47 + 32) = a2;
  *(_QWORD *)(v47 + 40) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return v47;
}

uint64_t WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 36);
    if ((_DWORD)v3)
    {
      v6 = *(WTF::StringImpl ***)(this + 24);
      v7 = 8 * v3;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
          {
            v9 = v7;
            v10 = v6;
            WTF::StringImpl::destroy(v8, a2);
            v7 = v9;
            v6 = v10;
          }
          else
          {
            *(_DWORD *)v8 -= 2;
          }
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v4 = *(WTF **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(_DWORD **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v5)
    {
      if (v5[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
      else
        --v5[6];
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSDOMAsyncIteratorPrototype<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::next(JSC::JSPromise *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;
  uint64_t v12;
  JSValue v13;
  JSC::JSGlobalObject *NewPromiseCapability;
  JSC::JSFunction *v15;
  uint64_t v16;
  JSC::JSPromise *v17;
  JSValue v18;
  unint64_t v19;
  JSC::JSPromise *Steps;
  WebCore::DOMGuardedObject *v21;
  WebCore::DOMGuardedObject *v22;
  _DWORD *v23;
  uint64_t v24;
  JSC::JSPromise *v25;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info
         && v7 != 0);
  }
  if (!v6)
    return JSC::throwTypeError();
  v11 = *(_QWORD *)(v4 + 40);
  if (v11 && (v12 = **(_QWORD **)(v11 + 24), (v12 & 0xFFFE000000000002) == 0) && *(_BYTE *)(v12 + 5) == 68)
  {
    NewPromiseCapability = (JSC::JSGlobalObject *)JSC::JSPromise::createNewPromiseCapability();
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      return 0;
    JSC::JSPromise::convertCapabilityToDeferredData(a1, NewPromiseCapability, v13);
    if (*((_DWORD *)v3 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
        return 0;
    }
    JSC::JSFunction::create();
    v15 = (JSC::JSFunction *)JSC::JSBoundFunction::create();
    if (*((_DWORD *)v3 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
        return 0;
    }
    v16 = **(_QWORD **)(*(_QWORD *)(v4 + 40) + 24);
    if ((v16 & 0xFFFE000000000002) != 0)
      v17 = 0;
    else
      v17 = *(_BYTE *)(v16 + 5) == 68 ? **(JSC::JSPromise ***)(*(_QWORD *)(v4 + 40) + 24) : 0;
    v18.super.isa = NewPromiseCapability;
    JSC::JSPromise::performPromiseThen(v17, a1, v15, v15, v18);
    if (*((_DWORD *)v3 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
        return 0;
    }
    v19 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
    Steps = v25;
  }
  else
  {
    Steps = WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::runNextSteps(*(_QWORD *)(a2 + 40), (uint64_t)a1);
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      return 0;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  }
  v21 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  v22 = WebCore::DOMGuardedObject::DOMGuardedObject(v21, v19, (unint64_t)Steps);
  *(_QWORD *)v22 = &off_1E3251870;
  v23 = *(_DWORD **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v22;
  if (v23)
  {
    if (v23[4] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
      v22 = *(WebCore::DOMGuardedObject **)(v4 + 40);
    }
    else
    {
      --v23[4];
    }
  }
  v24 = **((_QWORD **)v22 + 3);
  if ((v24 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v24 + 5) == 68)
    return **((_QWORD **)v22 + 3);
  else
    return 0;
}

JSC::JSPromise *WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::runNextSteps(uint64_t a1, uint64_t a2)
{
  JSC::VM *v4;
  JSValue v5;
  JSC::JSGlobalObject *NewPromiseCapability;
  JSC::Structure *v7;
  int v8;
  JSC::VM *v9;
  JSC::JSPromise *v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::DOMGuardedObject *v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void (*v18)(void);
  JSValue v19;
  JSValue v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSC::JSFunction *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::JSFunction *v29;
  JSValue v30;
  JSC::JSPromise *v32;
  WTF::StringImpl *v33;

  v4 = *(JSC::VM **)(a2 + 56);
  NewPromiseCapability = (JSC::JSGlobalObject *)JSC::JSPromise::createNewPromiseCapability();
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  JSC::JSPromise::convertCapabilityToDeferredData((JSC::JSPromise *)a2, NewPromiseCapability, v5);
  if (*((_DWORD *)v4 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v19.super.isa = (Class)1;
    v20.super.isa = (Class)JSC::createIteratorResultObject((JSC *)a2, (JSC::JSGlobalObject *)0xA, v19);
    JSC::JSPromise::resolve(v32, (JSC::JSGlobalObject *)a2, v20);
    goto LABEL_30;
  }
  v8 = *(_DWORD *)(a2 + 1164);
  if (v8)
    v9 = (JSC::VM *)(16 * (v8 & 0xFFFFFFFE));
  else
    v9 = 0;
  v10 = (JSC::JSPromise *)JSC::JSPromise::create(*(JSC::JSPromise **)(a2 + 56), v9, v7);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v12 = WTF::fastMalloc((WTF *)0x30);
  v13 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v12, v11, (unint64_t)v10);
  *(_QWORD *)v13 = &off_1E3226868;
  *((_DWORD *)v13 + 10) = 0;
  *((_BYTE *)v13 + 44) = 0;
  v14 = *(_QWORD *)(a1 + 24);
  if (!v14)
  {
    v21 = *(_QWORD *)(v12 + 24);
    if (v21 && *(_QWORD *)v21 && (*(_BYTE *)(v21 + 8) & 3) == 0)
    {
      v22 = *(_QWORD *)(v12 + 32);
      if (!v22 || (*(_BYTE *)(v22 + 8) & 3) != 0)
        v23 = 0;
      else
        v23 = *(uint64_t **)v22;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v12, v23, 0, (objc_class *)0xA);
      MEMORY[0x19AEA32A0](&v33);
    }
    if (*(_DWORD *)(v12 + 16) != 1)
    {
      --*(_DWORD *)(v12 + 16);
      goto LABEL_21;
    }
    v18 = *(void (**)(void))(*(_QWORD *)v12 + 16);
    goto LABEL_10;
  }
  v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = &off_1E327D248;
  *((_QWORD *)v16 + 1) = v12;
  *((_QWORD *)v16 + 2) = v15;
  v33 = v16;
  WebCore::FileSystemDirectoryHandle::Iterator::next(v14, (uint64_t *)&v33);
  v17 = v33;
  v33 = 0;
  if (v17)
  {
    v18 = *(void (**)(void))(*(_QWORD *)v17 + 8);
LABEL_10:
    v18();
  }
LABEL_21:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  v33 = 0;
  JSC::JSFunction::create();
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (JSC::JSFunction *)JSC::JSBoundFunction::create();
  v33 = 0;
  JSC::JSFunction::create();
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (JSC::JSFunction *)JSC::JSBoundFunction::create();
  if (*((_DWORD *)v4 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
  }
  v30.super.isa = NewPromiseCapability;
  JSC::JSPromise::performPromiseThen(v10, (JSC::JSGlobalObject *)a2, v26, v29, v30);
LABEL_30:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  return v32;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZN7WebCore22JSDOMAsyncIteratorBaseINS2_27JSFileSystemDirectoryHandleENS2_39FileSystemDirectoryHandleIteratorTraitsEE22getNextIterationResultERN3JSC14JSGlobalObjectEEUlT_E_vJONS2_11ExceptionOrINSt3__18optionalINS_12KeyValuePairINS_6StringENS_3RefINS2_16FileSystemHandleENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEEEEEEEEEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E327D248;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCore22JSDOMAsyncIteratorBaseINS2_27JSFileSystemDirectoryHandleENS2_39FileSystemDirectoryHandleIteratorTraitsEE22getNextIterationResultERN3JSC14JSGlobalObjectEEUlT_E_vJONS2_11ExceptionOrINSt3__18optionalINS_12KeyValuePairINS_6StringENS_3RefINS2_16FileSystemHandleENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEEEEEEEEEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E327D248;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZN7WebCore22JSDOMAsyncIteratorBaseINS2_27JSFileSystemDirectoryHandleENS2_39FileSystemDirectoryHandleIteratorTraitsEE22getNextIterationResultERN3JSC14JSGlobalObjectEEUlT_E_vJONS2_11ExceptionOrINSt3__18optionalINS_12KeyValuePairINS_6StringENS_3RefINS2_16FileSystemHandleENS_12RawPtrTraitsISI_EENS_21DefaultRefDerefTraitsISI_EEEEEEEEEEEE4callESR_(WTF::StringImpl *result, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  JSC::JSLock *v11;
  objc_class *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  int v33;
  unsigned __int8 v34[8];
  WTF::StringImpl *v35;
  WTF *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  char v45;
  int v46;
  uint64_t v47;

  v2 = result;
  v47 = *MEMORY[0x1E0C80C00];
  LOBYTE(v43) = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF::StringImpl **, uint64_t))off_1E327D270[v3])(v34, &v43, a2 + 8);
    v46 = v3;
  }
  v4 = *((_QWORD *)v2 + 1);
  v5 = *(_QWORD *)(v4 + 32);
  if (!v5)
    goto LABEL_57;
  if ((*(_BYTE *)(v5 + 8) & 3) != 0)
    goto LABEL_57;
  v6 = *(uint64_t **)v5;
  if (!*(_QWORD *)v5)
    goto LABEL_57;
  if ((_DWORD)v3)
  {
    if ((_DWORD)v3 != 1)
    {
      v31 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF12KeyValuePairINS9_6StringENS9_3RefIN7WebCore16FileSystemHandleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEEEEEENSD_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(v31);
    }
    v7 = v44;
    v44 = 0;
    v32 = 0;
    v34[0] = v43;
    if (v7)
      *(_DWORD *)v7 += 2;
    v35 = v7;
    WebCore::DeferredPromise::reject(v4, v34, 0, (objc_class **)&v32);
    result = v35;
    v35 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    goto LABEL_54;
  }
  if (!v45)
  {
    v14 = *(_QWORD *)(v4 + 24);
    if (v14 && *(_QWORD *)v14 && (*(_BYTE *)(v14 + 8) & 3) == 0)
    {
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v4, v6, 0, (objc_class *)0xA);
      result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v34);
    }
    goto LABEL_57;
  }
  v7 = v43;
  v9 = v44;
  v43 = 0;
  v44 = 0;
  v10 = *((_DWORD *)v2 + 5);
  v11 = *(JSC::JSLock **)(v6[7] + 112);
  result = (WTF::StringImpl *)JSC::JSLock::lock(v11);
  if (v10 == 2)
  {
    v15 = v6[7];
    if (v7 && (v16 = *((_DWORD *)v7 + 1)) != 0)
    {
      if (v16 != 1)
      {
LABEL_30:
        v17 = *(_QWORD *)(v15 + 64760);
        if (!v17 || v7 != *(WTF::StringImpl **)(v17 + 8))
          v17 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_33;
      }
      v26 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if ((*((_BYTE *)v7 + 16) & 4) != 0)
      {
        v27 = *v26;
      }
      else
      {
        v29 = *(unsigned __int16 *)v26;
        if (v29 > 0xFF)
          goto LABEL_30;
        v27 = v29;
      }
      v17 = *(_QWORD *)(v15 + 8 * v27 + 42216);
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 41968);
    }
LABEL_33:
    v18 = WebCore::wrap<WebCore::FileSystemHandle>((int)v6, (JSC::VM *)v6, (uint64_t)v9);
    v34[0] = 0;
    v36 = (WTF *)&v38;
    v37 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    v38 = v17;
    v39 = v18;
    v35 = (WTF::StringImpl *)0x800000002;
    v19 = (JSC::VM *)v6[7];
    v32 = (WTF::StringImpl **)&v38;
    v33 = 2;
    if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
      v12 = 0;
    else
      v12 = (objc_class *)JSC::constructArray();
    v20 = v37;
    if (v37)
    {
      v32 = &v35;
      v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v37, (uint64_t *)&v32);
      WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v20, v30);
    }
    result = v36;
    if (v36 != (WTF *)&v38 && v36)
      result = (WTF::StringImpl *)WTF::fastFree(v36, v8);
    goto LABEL_42;
  }
  if (v10 == 1)
  {
    result = (WTF::StringImpl *)WebCore::wrap<WebCore::FileSystemHandle>((int)v6, (JSC::VM *)v6, (uint64_t)v9);
LABEL_41:
    v12 = result;
    goto LABEL_42;
  }
  v12 = 0;
  if (!v10)
  {
    result = (WTF::StringImpl *)v6[7];
    if (!v7 || (v13 = *((_DWORD *)v7 + 1)) == 0)
    {
      v12 = (objc_class *)*((_QWORD *)result + 5246);
      goto LABEL_42;
    }
    if (v13 != 1)
      goto LABEL_20;
    v24 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
    if ((*((_BYTE *)v7 + 16) & 4) != 0)
    {
      v25 = *v24;
    }
    else
    {
      v28 = *(unsigned __int16 *)v24;
      if (v28 > 0xFF)
      {
LABEL_20:
        v12 = (objc_class *)*((_QWORD *)result + 8095);
        if (v12 && v7 == *((WTF::StringImpl **)v12 + 1))
          goto LABEL_42;
        result = (WTF::StringImpl *)JSC::jsStringWithCacheSlowCase();
        goto LABEL_41;
      }
      v25 = v28;
    }
    v12 = (objc_class *)*((_QWORD *)result + v25 + 5277);
  }
LABEL_42:
  if (v11)
    result = (WTF::StringImpl *)JSC::JSLock::unlock(v11);
  v21 = *(_QWORD *)(v4 + 24);
  if (v21 && *(_QWORD *)v21 && (*(_BYTE *)(v21 + 8) & 3) == 0)
  {
    v22 = *(_QWORD *)(v4 + 32);
    if (!v22 || (*(_BYTE *)(v22 + 8) & 3) != 0)
      v23 = 0;
    else
      v23 = *(uint64_t **)v22;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v4, v23, 0, v12);
    result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v34);
  }
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 16))(v9);
    else
      --*((_DWORD *)v9 + 6);
  }
LABEL_54:
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v8);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_57:
  if (v46 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(unsigned __int8 *, WTF::StringImpl **))off_1E327D260[v46])(v34, &v43);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF12KeyValuePairINS9_6StringENS9_3RefIN7WebCore16FileSystemHandleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEEEEEENSD_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v3)
    {
      if (v3[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[6];
    }
    v4 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3WTF12KeyValuePairINS9_6StringENS9_3RefIN7WebCore16FileSystemHandleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEEEEEENSD_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF12KeyValuePairINS9_6StringENS9_3RefIN7WebCore16FileSystemHandleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEEEEEENSD_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*((_BYTE *)a3 + 16))
  {
    v3 = *a3;
    *a3 = 0;
    *(_QWORD *)a2 = v3;
    v4 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN3WTF12KeyValuePairINS9_6StringENS9_3RefIN7WebCore16FileSystemHandleENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEEEEEENSD_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSL_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

_BYTE *WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::onPromiseFulFilled(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  JSC *v13;
  uint64_t v14;
  JSValue v15;
  uint64_t v16;

  v16 = *((_QWORD *)a1 + 7);
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)a1, (int)&v16, "FileSystemDirectoryHandle", "onPromiseFulfilled");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)a1, (int)&v16, "FileSystemDirectoryHandle", "onPromiseFulfilled");
  if (*(_DWORD *)(a2 + 32) == 1)
    v10 = 10;
  else
    v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[4];
  }
  if (v10 == 10)
  {
    v12 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v12)
      WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v12, (WTF::StringImpl *)a2);
    v13 = a1;
    v14 = 10;
    v15.super.isa = (Class)1;
  }
  else
  {
    v13 = a1;
    v14 = v10;
    v15.super.isa = 0;
  }
  return (_BYTE *)JSC::createIteratorResultObject(v13, (JSC::JSGlobalObject *)v14, v15);
}

_BYTE *WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::onPromiseRejected(JSC::VM **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  JSValue v13;
  JSC::VM *v14;

  v14 = a1[7];
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)a1, (int)&v14, "FileSystemDirectoryHandle", "onPromiseRejected");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)a1, (int)&v14, "FileSystemDirectoryHandle", "onPromiseRejected");
  if (*(_DWORD *)(a2 + 32) == 1)
    v10 = 10;
  else
    v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_DWORD **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[4];
  }
  v12 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  if (v12)
    WTF::RefCounted<WebCore::FileSystemDirectoryHandle::Iterator>::deref(v12, (WTF::StringImpl *)a2);
  v13.super.isa = (Class)v10;
  return (_BYTE *)JSC::VM::throwException(a1[7], (JSC::JSGlobalObject *)a1, v13);
}

JSC::JSPromise *WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::onPromiseSettled(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (JSC::JSPromise *)WebCore::throwThisTypeError(a1, (int)&v10, "FileSystemDirectoryHandle", "onPromiseSettled");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::s_info
         && v6 != 0);
  }
  if (v5)
    return WebCore::JSDOMAsyncIteratorBase<WebCore::JSFileSystemDirectoryHandle,WebCore::FileSystemDirectoryHandleIteratorTraits>::runNextSteps(v3, a1);
  else
    return (JSC::JSPromise *)WebCore::throwThisTypeError(a1, (int)&v10, "FileSystemDirectoryHandle", "onPromiseSettled");
}

uint64_t WebCore::jsFileSystemDirectoryReaderPrototypeFunction_readEntries(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *Allocator;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  unsigned int v30;
  WebCore::JSErrorCallback *v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  WebCore *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSValue v42;
  unint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  WebCore::JSErrorCallback *v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  int v52;
  WebCore *v53;

  v3 = (WebCore *)this;
  v4 = this[7];
  v46 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "FileSystemDirectoryReader", "readEntries");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileSystemDirectoryReader::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileSystemDirectoryReader::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "FileSystemDirectoryReader", "readEntries");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v4, v3, v42);
  }
  v12 = *(WTF::StringImpl **)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if (!v13)
    return 10;
  v45 = v12;
  v15 = *((_QWORD *)a2 + 6);
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v47 = (WebCore::JSErrorCallback *)*((_QWORD *)v3 + 7);
  if ((v15 & 0xFFFE000000000002) != 0
    || (v17 = *(unsigned __int8 *)(v15 + 5), v17 < 0x17)
    || (v18 = (char *)v13, (v17 & 0xFE) != 0x1A)
    && ((*(_BYTE *)(v15 + 6) & 4) == 0
     || ((*(void (**)(_DWORD **__return_ptr, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x38))(&v51, v15), !(_BYTE)v51)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v3, (uint64_t)&v47, 0, "successCallback", 16, "FileSystemDirectoryReader", 26, v14, "readEntries", 12);
    v38 = 0;
    v39 = 1;
    v50 = 1;
    goto LABEL_42;
  }
  v19 = WTF::fastMalloc((WTF *)0x20);
  v20 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  *(_DWORD *)(v19 + 16) = 1;
  *(_QWORD *)v19 = &off_1E33A18C0;
  *(_QWORD *)(v19 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v19, v20);
  *(_QWORD *)v19 = &off_1E3277AB0;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  Allocator = 0;
  if (v16)
  {
    if ((v16 & 8) != 0)
      v43 = ((unint64_t)v16 - 112) | 1;
    else
      v43 = (unint64_t)v16 & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = v16;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  v21[1] = &off_1E32268A0;
  *v21 = Allocator;
  if ((v15 & 8) != 0)
    v25 = (v15 - 112) | 1;
  else
    v25 = v15 & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  v27 = *(_QWORD **)(v26 + 16);
  if (!v27)
    v27 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *v27;
  *v27 = v15;
  v27[1] = v21 + 1;
  v27[2] = v23;
  v21[2] = v27;
  *(_QWORD *)(v19 + 24) = v21;
  v49 = v19;
  v50 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v28 = *((_QWORD *)a2 + 7), (v28 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v34 = v45;
    v3 = 0;
    v48 = 0;
    goto LABEL_34;
  }
  v29 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v53 = (WebCore *)*((_QWORD *)v3 + 7);
  if ((v28 & 0xFFFE000000000002) == 0
    && (v30 = *(unsigned __int8 *)(v28 + 5), v30 >= 0x17)
    && ((v30 & 0xFE) == 0x1A
     || (*(_BYTE *)(v28 + 6) & 4) != 0
     && ((*(void (**)(_DWORD **__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v51, v28), (_BYTE)v51)))
  {
    v3 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
    v31 = WebCore::JSErrorCallback::JSErrorCallback(v3, v28, v29);
    v32 = 0;
    v52 = 0;
    v51 = 0;
    v33 = 1;
    v47 = v31;
  }
  else
  {
    v32 = 1;
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v3, (uint64_t)&v53, 1, "errorCallback", 14, "FileSystemDirectoryReader", 26, v22, "readEntries", 12);
    v33 = 0;
    v52 = 1;
  }
  v48 = v32;
  ((void (*)(WebCore **, _DWORD **))off_1E327D0C8[v32])(&v53, &v51);
  if (v33)
  {
    v34 = v45;
LABEL_34:
    v49 = 0;
    v51 = (_DWORD *)v19;
    v47 = 0;
    v53 = v3;
    WebCore::FileSystemDirectoryReader::readEntries(v34, v18, (uint64_t *)&v51, (uint64_t *)&v53);
    v35 = v53;
    v53 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 4) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v35 + 16))(v35);
      else
        --*((_DWORD *)v35 + 4);
    }
    v36 = v51;
    v51 = 0;
    if (v36)
    {
      if (v36[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
      else
        --v36[4];
    }
    v37 = 0;
    v38 = 10;
    goto LABEL_41;
  }
  v38 = 0;
  v37 = 1;
LABEL_41:
  ((void (*)(_DWORD **, WebCore::JSErrorCallback **))off_1E327D0D8[v37])(&v51, &v47);
  v39 = 0;
LABEL_42:
  ((void (*)(_DWORD **, uint64_t *))off_1E327D2D0[v39])(&v51, &v49);
  return v38;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore27JSFileSystemEntriesCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::jsFileSystemEntryPrototypeFunction_getParent(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  WebCore::JSDOMGlobalObject *v18;
  unsigned int v19;
  WebCore::JSFileSystemEntryCallback *v20;
  int v21;
  int v22;
  unint64_t v23;
  WebCore::JSDOMGlobalObject *v24;
  unsigned int v25;
  WebCore::JSErrorCallback *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  WebCore::JSErrorCallback *v37;
  int v38;
  WebCore::JSFileSystemEntryCallback *v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;

  v4 = (uint64_t)this;
  v36 = *((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "FileSystemEntry", "getParent");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileSystemEntry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileSystemEntry::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "FileSystemEntry", "getParent");
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v15 = v13;
  v16 = *((_DWORD *)a2 + 8);
  if (v16 == 1 || (v17 = *((_QWORD *)a2 + 6), (v17 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v3 = 0;
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v18 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v37 = *(WebCore::JSErrorCallback **)(v4 + 56);
    if ((v17 & 0xFFFE000000000002) == 0
      && (v19 = *(unsigned __int8 *)(v17 + 5), v19 >= 0x17)
      && ((v19 & 0xFE) == 0x1A
       || (*(_BYTE *)(v17 + 6) & 4) != 0
       && ((*(void (**)(_QWORD **__return_ptr, unint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(&v42, v17), (_BYTE)v42)))
    {
      v3 = WTF::fastMalloc((WTF *)0x20);
      v20 = WebCore::JSFileSystemEntryCallback::JSFileSystemEntryCallback((WebCore::JSFileSystemEntryCallback *)v3, v17, v18);
      v21 = 0;
      v43 = 0;
      v42 = 0;
      v22 = 1;
      v39 = v20;
    }
    else
    {
      WebCore::throwArgumentMustBeFunctionError(v4, (uint64_t)&v37, 0, "successCallback", 16, "FileSystemEntry", 16, v14, "getParent", 10);
      v22 = 0;
      v21 = 1;
      v43 = 1;
    }
    v40 = v21;
    ((void (*)(WebCore::JSErrorCallback **, _QWORD **))off_1E327D0B8[v21])(&v37, &v42);
    if (!v22)
    {
      v29 = 0;
      v34 = 1;
      goto LABEL_37;
    }
    v16 = *((_DWORD *)a2 + 8);
  }
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v23 = *((_QWORD *)a2 + 7), (v23 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v4 = 0;
    v38 = 0;
LABEL_31:
    v39 = 0;
    v37 = 0;
    v30 = v3 | v4;
    if (v3 | v4)
    {
      v31 = *(_QWORD *)(v12 + 40);
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v32 = 1;
      ++*(_DWORD *)(v12 + 32);
      *(_QWORD *)(v32 + 8) = v12;
      ++*(_QWORD *)(v12 + 16);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v33 = &off_1E33554E8;
      v33[1] = v12;
      v33[2] = v32;
      v33[3] = v3;
      v33[4] = v4;
      v42 = v33;
      WebCore::DOMFileSystem::getParent(v31, v15, v12, (uint64_t *)&v42);
      if (v42)
        (*(void (**)(_QWORD *))(*v42 + 8))(v42);
      v30 = 0;
    }
    v29 = 10;
    goto LABEL_36;
  }
  v24 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v41 = *(_QWORD *)(v4 + 56);
  if ((v23 & 0xFFFE000000000002) == 0
    && (v25 = *(unsigned __int8 *)(v23 + 5), v25 >= 0x17)
    && ((v25 & 0xFE) == 0x1A
     || (*(_BYTE *)(v23 + 6) & 4) != 0
     && ((*(void (**)(_QWORD **__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v23 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v42, v23), (_BYTE)v42)))
  {
    v4 = WTF::fastMalloc((WTF *)0x20);
    v26 = WebCore::JSErrorCallback::JSErrorCallback((WebCore::JSErrorCallback *)v4, v23, v24);
    v27 = 0;
    v43 = 0;
    v42 = 0;
    v28 = 1;
    v37 = v26;
  }
  else
  {
    v27 = 1;
    WebCore::throwArgumentMustBeFunctionError(v4, (uint64_t)&v41, 1, "errorCallback", 14, "FileSystemEntry", 16, v14, "getParent", 10);
    v28 = 0;
    v43 = 1;
  }
  v38 = v27;
  ((void (*)(uint64_t *, _QWORD **))off_1E327D0C8[v27])(&v41, &v42);
  if (v28)
    goto LABEL_31;
  v29 = 0;
  v30 = 1;
LABEL_36:
  ((void (*)(_QWORD **, WebCore::JSErrorCallback **))off_1E327D0D8[v30])(&v42, &v37);
  v34 = 0;
LABEL_37:
  ((void (*)(_QWORD **, WebCore::JSFileSystemEntryCallback **))off_1E327D0E8[v34])(&v42, &v39);
  return v29;
}

uint64_t WebCore::jsFileSystemFileEntryPrototypeFunction_file(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WebCore *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *Allocator;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  WebCore::JSDOMGlobalObject *v29;
  unsigned int v30;
  WebCore::JSErrorCallback *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  JSValue v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;
  WebCore::JSErrorCallback *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;

  v3 = (WebCore *)this;
  v4 = this[7];
  v46 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "FileSystemFileEntry", "file");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileSystemFileEntry::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileSystemFileEntry::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "FileSystemFileEntry", "file");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return JSC::VM::throwException(v4, v3, v42);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
  if (!v13)
    return 10;
  v15 = *((_QWORD *)a2 + 6);
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v47 = (WebCore::JSErrorCallback *)*((_QWORD *)v3 + 7);
  if ((v15 & 0xFFFE000000000002) != 0
    || (v17 = *(unsigned __int8 *)(v15 + 5), v17 < 0x17)
    || (v18 = v13, (v17 & 0xFE) != 0x1A)
    && ((*(_BYTE *)(v15 + 6) & 4) == 0
     || ((*(void (**)(_QWORD **__return_ptr, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x38))(&v52, v15), !(_BYTE)v52)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v3, (uint64_t)&v47, 0, "successCallback", 16, "FileSystemFileEntry", 20, v14, "file", 5);
    v34 = 0;
    v39 = 1;
    v50 = 1;
    goto LABEL_38;
  }
  v45 = v18;
  v19 = WTF::fastMalloc((WTF *)0x20);
  v20 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  *(_DWORD *)(v19 + 16) = 1;
  *(_QWORD *)v19 = &off_1E33A18C0;
  *(_QWORD *)(v19 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v19, v20);
  *(_QWORD *)v19 = &off_1E3276760;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  Allocator = 0;
  if (v16)
  {
    if ((v16 & 8) != 0)
      v43 = ((unint64_t)v16 - 112) | 1;
    else
      v43 = (unint64_t)v16 & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = v16;
    Allocator[1] = 0;
    Allocator[2] = 0;
  }
  v21[1] = &off_1E32268A0;
  *v21 = Allocator;
  if ((v15 & 8) != 0)
    v25 = (v15 - 112) | 1;
  else
    v25 = v15 & 0xFFFFFFFFFFFFC000;
  if ((v25 & 1) != 0)
    v26 = v25 + 47;
  else
    v26 = *(_QWORD *)v25 + 32;
  v27 = *(_QWORD **)(v26 + 16);
  if (!v27)
    v27 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v26 + 16) = *v27;
  *v27 = v15;
  v27[1] = v21 + 1;
  v27[2] = v23;
  v21[2] = v27;
  *(_QWORD *)(v19 + 24) = v21;
  v49 = v19;
  v50 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
    || (v28 = *((_QWORD *)a2 + 7), (v28 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v3 = 0;
    v48 = 0;
LABEL_34:
    v49 = 0;
    v47 = 0;
    v36 = *(_QWORD *)(v12 + 40);
    v37 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v37 = 1;
    ++*(_DWORD *)(v12 + 32);
    *(_QWORD *)(v37 + 8) = v12;
    ++*(_QWORD *)(v12 + 16);
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v38 = &off_1E3355548;
    v38[1] = v12;
    v38[2] = v37;
    v38[3] = v19;
    v38[4] = v3;
    v52 = v38;
    WebCore::DOMFileSystem::getFile(v36, v45, v12, &v52);
    if (v52)
      (*(void (**)(_QWORD *))(*v52 + 8))(v52);
    v35 = 0;
    v34 = 10;
    goto LABEL_37;
  }
  v29 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v51 = *((_QWORD *)v3 + 7);
  if ((v28 & 0xFFFE000000000002) == 0
    && (v30 = *(unsigned __int8 *)(v28 + 5), v30 >= 0x17)
    && ((v30 & 0xFE) == 0x1A
     || (*(_BYTE *)(v28 + 6) & 4) != 0
     && ((*(void (**)(_QWORD **__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v52, v28), (_BYTE)v52)))
  {
    v3 = (WebCore *)WTF::fastMalloc((WTF *)0x20);
    v31 = WebCore::JSErrorCallback::JSErrorCallback(v3, v28, v29);
    v32 = 0;
    v53 = 0;
    v52 = 0;
    v33 = 1;
    v47 = v31;
  }
  else
  {
    v32 = 1;
    WebCore::throwArgumentMustBeFunctionError((uint64_t)v3, (uint64_t)&v51, 1, "errorCallback", 14, "FileSystemFileEntry", 20, v22, "file", 5);
    v33 = 0;
    v53 = 1;
  }
  v48 = v32;
  ((void (*)(uint64_t *, _QWORD **))off_1E327D0C8[v32])(&v51, &v52);
  if (v33)
    goto LABEL_34;
  v34 = 0;
  v35 = 1;
LABEL_37:
  ((void (*)(_QWORD **, WebCore::JSErrorCallback **))off_1E327D0D8[v35])(&v52, &v47);
  v39 = 0;
LABEL_38:
  ((void (*)(_QWORD **, uint64_t *))off_1E327D448[v39])(&v52, &v49);
  return v34;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14JSFileCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsFileSystemFileHandlePrototypeFunction_getFile(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(void);
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B30E64);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSFileSystemFileHandle::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSFileSystemFileHandle::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FileSystemFileHandle", "getFile", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v29 = v14;
  WebCore::FileSystemFileHandle::getFile(v23, (uint64_t *)&v29);
  if (v29)
  {
    if (*((_DWORD *)v29 + 4) != 1)
    {
      --*((_DWORD *)v29 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v29 + 16);
LABEL_32:
    v26();
  }
LABEL_28:
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v27 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v27, 0);
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFileSystemFileHandlePrototypeFunction_createSyncAccessHandle(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(void);
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B310C0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSFileSystemFileHandle::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSFileSystemFileHandle::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_33:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FileSystemFileHandle", "createSyncAccessHandle", v16);
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v29 = v14;
  WebCore::FileSystemFileHandle::createSyncAccessHandle(v23, (uint64_t *)&v29);
  if (v29)
  {
    if (*((_DWORD *)v29 + 4) != 1)
    {
      --*((_DWORD *)v29 + 4);
      goto LABEL_28;
    }
    v26 = *(void (**)(void))(*(_QWORD *)v29 + 16);
LABEL_32:
    v26();
  }
LABEL_28:
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v27 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v27, 0);
      v28 = v29;
      v29 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFileSystemHandlePrototypeFunction_isSameEntry(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  JSValue v36;
  objc_class *v37;
  WebCore::DOMGuardedObject *v38;
  WebCore::DOMGuardedObject *v39;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B313F8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_49:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FileSystemHandle", "isSameEntry", v17);
    goto LABEL_38;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v36);
LABEL_38:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_44;
  }
  v26 = *(_QWORD *)(v19 + 24);
  v27 = *((_QWORD *)a2 + 6);
  v39 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
  v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
  v30 = (char **)(16 * v28);
  if ((_DWORD)v28)
    v31 = v30 == &WebCore::JSFileSystemHandle::s_info;
  else
    v31 = 1;
  if (!v31)
  {
    do
    {
      v30 = (char **)v30[2];
      v29 = v30 != 0;
    }
    while (v30 != &WebCore::JSFileSystemHandle::s_info && v30 != 0);
  }
  if (!v29 || (v33 = *(_QWORD *)(v27 + 24)) == 0)
  {
LABEL_37:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v39, 0, "other", 6, "FileSystemHandle", 17, v18, "isSameEntry", 12, "FileSystemHandle", 17);
    goto LABEL_38;
  }
  v39 = v14;
  WebCore::FileSystemHandle::isSameEntry(v26, v33, (uint64_t *)&v39);
  if (v39)
  {
    if (*((_DWORD *)v39 + 4) == 1)
      (*(void (**)(void))(*(_QWORD *)v39 + 16))();
    else
      --*((_DWORD *)v39 + 4);
  }
LABEL_44:
  v34 = *(_QWORD *)(v10 + 16);
  if (v34)
  {
    if (*(_QWORD *)(v10 + 24) != v34)
    {
      v37 = *(objc_class **)(v34 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v39);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v39, v37, 0);
      v38 = v39;
      v39 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsFileSystemHandlePrototypeFunction_move(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::DOMGuardedObject *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  JSValue v41;
  objc_class *v42;
  WebCore::DOMGuardedObject *v43;
  WebCore::DOMGuardedObject *v44;
  int v45;
  WebCore::DOMGuardedObject *v46;
  WTF::StringImpl *v47;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B317D4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_58;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSFileSystemHandle::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSFileSystemHandle::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_58:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FileSystemHandle", "move", v17);
    goto LABEL_38;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v41);
LABEL_38:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_52;
  }
  v26 = *(_QWORD *)(v19 + 24);
  v27 = *((_QWORD *)a2 + 6);
  v44 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
  v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
  v30 = (char **)(16 * v28);
  if ((_DWORD)v28)
    v31 = v30 == &WebCore::JSFileSystemHandle::s_info;
  else
    v31 = 1;
  if (!v31)
  {
    do
    {
      v30 = (char **)v30[2];
      v29 = v30 != 0;
    }
    while (v30 != &WebCore::JSFileSystemHandle::s_info && v30 != 0);
  }
  if (!v29 || (v33 = *(_QWORD *)(v27 + 24)) == 0)
  {
LABEL_37:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v44, 0, "destination", 12, "FileSystemHandle", 17, v18, "move", 5, "FileSystemHandle", 17);
    goto LABEL_38;
  }
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 7), (uint64_t)&v44);
  v34 = v45;
  if (!v45)
  {
    v35 = v44;
    v44 = 0;
    v46 = v14;
    v47 = v35;
    WebCore::FileSystemHandle::move(v26, v33, &v47, (uint64_t *)&v46);
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v37 + 16))(v37);
      else
        --*((_DWORD *)v37 + 4);
    }
    v38 = v47;
    v47 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v36);
      else
        *(_DWORD *)v38 -= 2;
    }
    v14 = 0;
    v34 = v45;
  }
  if (v34 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v34])(&v47, &v44);
  if (v14)
    goto LABEL_38;
LABEL_52:
  v39 = *(_QWORD *)(v10 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v10 + 24) != v39)
    {
      v42 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v44);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v44, v42, 0);
      v43 = v44;
      v44 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v43 + 16))(v43);
        else
          --*((_DWORD *)v43 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_truncate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t result;
  JSValue v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  int v19[2];
  int v20;
  char v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  char v25;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "FileSystemSyncAccessHandle", "truncate");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "FileSystemSyncAccessHandle", "truncate");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 6), (uint64_t)v19);
  if (!v20)
  {
    if (!*(_BYTE *)(v11 + 80)
      && (WTF::FileSystemImpl::truncateFile((WTF::FileSystemImpl *)*(unsigned int *)(v11 + 68)) & 1) != 0)
    {
      return 10;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = 8;
    v25 = 1;
    v21 = 8;
    v15 = v24;
    v24 = 0;
    v22 = v15;
    if (!*((_QWORD *)v4 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException(v4, this, v16);
      v15 = v22;
    }
    v22 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v25)
    {
      v17 = v24;
      v24 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 != 2)
        {
          result = 0;
          *(_DWORD *)v17 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v17, v14);
      }
    }
  }
  return 0;
}

_BYTE *WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_getSize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  JSC::VM *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  char v26[8];
  WTF::StringImpl *v27;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "FileSystemSyncAccessHandle", "getSize");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "FileSystemSyncAccessHandle", "getSize");
  v11 = *(_QWORD *)(v4 + 24);
  if (!*(_BYTE *)(v11 + 80))
  {
    v12 = WTF::FileSystemImpl::fileSize((WTF::FileSystemImpl *)*(unsigned int *)(v11 + 68));
    if (v14)
    {
      v23 = v12;
      v25 = 0;
      v15 = v12 | 0xFFFE000000000000;
      if ((v12 & 0x80000000) != 0)
        v15 = COERCE__INT64((double)v12) + 0x2000000000000;
      v13.n128_f64[0] = (double)v12;
      if (HIDWORD(v12))
        v16 = v13.n128_u64[0] + 0x2000000000000;
      else
        v16 = v15;
      v17 = 0;
LABEL_20:
      off_1E327D6B0[v17](v26, &v23, v13);
      return (_BYTE *)v16;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v23) = 8;
  v25 = 1;
  v26[0] = 8;
  v20 = v24;
  v24 = 0;
  v27 = v20;
  if (!*((_QWORD *)v5 + 2))
  {
    v21.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v27);
    JSC::VM::throwException(v5, this, v21);
    v20 = v27;
  }
  v27 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v16 = 0;
  result = 0;
  v17 = v25;
  if (v25 != -1)
    goto LABEL_20;
  return result;
}

uint64_t WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "FileSystemSyncAccessHandle", "flush");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "FileSystemSyncAccessHandle", "flush");
  v11 = *(_QWORD *)(v4 + 24);
  if (!*(_BYTE *)(v11 + 80)
    && (WTF::FileSystemImpl::flushFile((WTF::FileSystemImpl *)*(unsigned int *)(v11 + 68)) & 1) != 0)
  {
    return 10;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = 8;
  v22 = 1;
  v18 = 8;
  v14 = v21;
  v21 = 0;
  v19 = v14;
  if (!*((_QWORD *)v5 + 2))
  {
    v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v5, this, v15);
    v14 = v19;
  }
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v22)
  {
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        result = 0;
        *(_DWORD *)v16 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v16, v13);
    }
  }
  return 0;
}

uint64_t WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)a2 + 5);
  v13 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "FileSystemSyncAccessHandle", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v13, "FileSystemSyncAccessHandle", "close");
  v9 = *(_QWORD *)(v3 + 24);
  if (!*(_BYTE *)(v9 + 80))
  {
    *(_BYTE *)(v9 + 80) = 1;
    v15 = 0;
    v16 = 0;
    WebCore::FileHandle::close((WebCore::FileHandle *)(v9 + 56), (int *)a2);
    v14 = 0;
    v11 = *(WTF::StringImpl **)(v9 + 56);
    *(_QWORD *)(v9 + 56) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    HIDWORD(v15) = -1;
    *(_QWORD *)(v9 + 64) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v9 + 76) = 0;
    *(_DWORD *)(v9 + 72) = 0;
    WebCore::FileHandle::~FileHandle((WebCore::FileHandle *)&v14, (int *)v10);
    WebCore::FileSystemFileHandle::closeSyncAccessHandle(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48));
  }
  return 10;
}

_BYTE *WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_read(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)();
  int v17;
  unint64_t v18;
  unint64_t v19;
  double v21;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WebCore *v27;
  JSC::JSGlobalObject *v28;
  JSC::CallFrame *v29;
  JSC::VM *v30;
  char v31[8];
  int v32;
  char v33[8];
  int v34;
  int v35[2];
  WTF::StringImpl *v36;
  int v37;
  char v38[8];
  WTF::StringImpl *v39;
  _BYTE v40[24];
  int v41;
  char v42[8];
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "FileSystemSyncAccessHandle", "read");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "FileSystemSyncAccessHandle", "read");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v42);
  v13 = v45;
  if (v45)
  {
    v19 = 0;
LABEL_32:
    if (v13 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_1E327D6E0[v13])(v40, &v43);
    return (_BYTE *)v19;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::FileSystemSyncAccessHandle::FilesystemReadWriteOptions>((uint64_t)v40, this, (JSC::JSCell *)v14);
  if (v41)
  {
    v19 = 0;
LABEL_31:
    v13 = v45;
    goto LABEL_32;
  }
  if (!v45)
  {
    v31[0] = 0;
    v32 = -1;
    v15 = v44;
    if (v44 == -1)
    {
      v33[0] = 0;
      v34 = -1;
    }
    else
    {
      v16 = off_1E327D6D0[v44];
      ((void (*)(int *, char *, uint64_t *))v16)(v35, v31, &v43);
      v32 = v15;
      v33[0] = 0;
      v34 = -1;
      ((void (*)(int *, char *, char *))v16)(v35, v33, v31);
      v34 = v15;
    }
    WebCore::FileSystemSyncAccessHandle::read(v12, (uint64_t)v33, v40[16], (uint64_t)v35);
    if (!v37)
    {
      if (v35[1])
      {
        v17 = 0;
        v21 = (double)*(unint64_t *)v35;
      }
      else
      {
        v17 = 0;
        if ((v35[0] & 0x80000000) == 0)
        {
          v18 = *(_QWORD *)v35 | 0xFFFE000000000000;
LABEL_26:
          ((void (*)(char *, int *))off_1E327D6B0[v17])(v38, v35);
          v19 = v18;
LABEL_27:
          v37 = -1;
          if (v34 != -1)
            ((void (*)(char *, char *))off_1E327D6C0[v34])(v38, v33);
          v34 = -1;
          if (v32 != -1)
            ((void (*)(char *, char *))off_1E327D6C0[v32])(v38, v31);
          goto LABEL_31;
        }
        v21 = (double)v35[0];
      }
      v18 = *(_QWORD *)&v21 + 0x2000000000000;
      goto LABEL_26;
    }
    if (v37 == 1)
    {
      v24 = (WTF::StringImpl *)LOBYTE(v35[0]);
      v38[0] = v35[0];
      v25 = v36;
      v36 = 0;
      v39 = v25;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v35[0]), (JSC::JSGlobalObject *)&v39);
        JSC::VM::throwException(v4, this, v26);
        v25 = v39;
      }
      v39 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v18 = 0;
      v19 = 0;
      v17 = v37;
      if (v37 == -1)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v27 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_write(v27, v28, v29);
}

_BYTE *WebCore::jsFileSystemSyncAccessHandlePrototypeFunction_write(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)();
  int v17;
  unint64_t v18;
  unint64_t v19;
  double v21;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  uint64_t v27;
  JSC::VM *v28;
  char v29[8];
  int v30;
  char v31[8];
  int v32;
  int v33[2];
  WTF::StringImpl *v34;
  int v35;
  char v36[8];
  WTF::StringImpl *v37;
  char v38[8];
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42[8];
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "FileSystemSyncAccessHandle", "write");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFileSystemSyncAccessHandle::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFileSystemSyncAccessHandle::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "FileSystemSyncAccessHandle", "write");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v23);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v42);
  v13 = v45;
  if (v45)
  {
    v19 = 0;
LABEL_32:
    if (v13 != -1)
      ((void (*)(char *, uint64_t *))off_1E327D6E0[v13])(v38, &v43);
    return (_BYTE *)v19;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::FileSystemSyncAccessHandle::FilesystemReadWriteOptions>((uint64_t)v38, this, (JSC::JSCell *)v14);
  if (v41)
  {
    v19 = 0;
LABEL_31:
    v13 = v45;
    goto LABEL_32;
  }
  if (!v45)
  {
    v29[0] = 0;
    v30 = -1;
    v15 = v44;
    if (v44 == -1)
    {
      v31[0] = 0;
      v32 = -1;
    }
    else
    {
      v16 = off_1E327D6D0[v44];
      ((void (*)(int *, char *, uint64_t *))v16)(v33, v29, &v43);
      v30 = v15;
      v31[0] = 0;
      v32 = -1;
      ((void (*)(int *, char *, char *))v16)(v33, v31, v29);
      v32 = v15;
    }
    WebCore::FileSystemSyncAccessHandle::write(v12, (uint64_t)v31, v39, v40, (uint64_t)v33);
    if (!v35)
    {
      if (v33[1])
      {
        v17 = 0;
        v21 = (double)*(unint64_t *)v33;
      }
      else
      {
        v17 = 0;
        if ((v33[0] & 0x80000000) == 0)
        {
          v18 = *(_QWORD *)v33 | 0xFFFE000000000000;
LABEL_26:
          ((void (*)(char *, int *))off_1E327D6B0[v17])(v36, v33);
          v19 = v18;
LABEL_27:
          v35 = -1;
          if (v32 != -1)
            ((void (*)(char *, char *))off_1E327D6C0[v32])(v36, v31);
          v32 = -1;
          if (v30 != -1)
            ((void (*)(char *, char *))off_1E327D6C0[v30])(v36, v29);
          goto LABEL_31;
        }
        v21 = (double)v33[0];
      }
      v18 = *(_QWORD *)&v21 + 0x2000000000000;
      goto LABEL_26;
    }
    if (v35 == 1)
    {
      v24 = (WTF::StringImpl *)LOBYTE(v33[0]);
      v36[0] = v33[0];
      v25 = v34;
      v34 = 0;
      v37 = v25;
      if (!*((_QWORD *)v4 + 2))
      {
        v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v33[0]), (JSC::JSGlobalObject *)&v37);
        JSC::VM::throwException(v4, this, v26);
        v25 = v37;
      }
      v37 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
      v18 = 0;
      v19 = 0;
      v17 = v35;
      if (v35 == -1)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v27 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJyN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJyS9_EEEEEEDcSD_DpT0_(v27);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJyN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJyS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>@<X0>(unint64_t this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 56);
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_5;
  v4 = *(unsigned __int8 *)(this + 5);
  if (v4 == 38)
  {
    v5 = *(_QWORD *)(this + 16);
    if (!v5 || *(_BYTE *)(v5 + 64))
    {
LABEL_5:
      JSC::throwTypeError();
      v6 = 1;
      v15 = 1;
      goto LABEL_7;
    }
    *(_DWORD *)v5 += 2;
    v10 = 1;
    v9 = 0;
    v13 = v5;
    v14 = 1;
    v15 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v12);
    v6 = 0;
  }
  else
  {
    if ((v4 - 39) > 0xB)
      goto LABEL_5;
    if ((*(_BYTE *)(this + 40) & 6) != 0)
      goto LABEL_5;
    JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)this);
    if (!v9)
      goto LABEL_5;
    v6 = 0;
    v13 = v9;
    v14 = 0;
    v15 = 0;
  }
LABEL_7:
  *(_BYTE *)(a3 + 8) = 0;
  v7 = a3 + 8;
  *(_DWORD *)(v7 + 16) = -1;
  result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1E327D6F0[v6])(&v9, v7, &v13);
  *(_DWORD *)(v7 + 16) = v6;
  if (v15 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E327D6E0[v15])(&v9, &v13);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11ArrayBufferENSD_ISI_EENSF_ISI_EEEEEEEN7WebCore25ConversionResultExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISP_LNS0_6_TraitE1EEEEEvRSQ_OT_EUlRSW_OT0_E_JRNS0_6__baseILST_1EJSM_SO_EEEOS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  v3 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E327D6D0[v3])(&v6);
    *(_DWORD *)(a2 + 8) = v3;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10FocusEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *result;
  WTF *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  result = (unsigned int *)a2[3];
  a2[3] = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
      }
      else
      {
        result[6] -= 2;
      }
    }
    else
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 96))(result);
    }
  }
  v4 = (WTF *)a2[1];
  a2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v5 = (uint64_t *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v5)
      {
        if (*v5)
          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v5, (WTF::StringImpl *)a2);
        WTF::fastFree((WTF *)v5, a2);
      }
      v6 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      return (unsigned int *)WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return result;
}

void WebCore::FontFace::Descriptors::~Descriptors(WebCore::FontFace::Descriptors *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore8FontFace11DescriptorsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, WebCore::FontFace::Descriptors *this)
{
  WebCore::FontFace::Descriptors::~Descriptors(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6StringENS9_6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISD_EENS9_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15ArrayBufferViewENSE_ISJ_EENSG_ISJ_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSN_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E327D770[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

_BYTE *WebCore::jsFontFacePrototypeFunction_load(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  unint64_t v11;
  JSC::Structure *v12;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"FontFace", "load", a4);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSFontFace::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSFontFace::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"FontFace", "load", a4);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  *(_BYTE *)(v10 + 64) = 1;
  WebCore::CSSFontFace::pump(*(_QWORD *)(v10 + 48), 1);
  return (_BYTE *)WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::promise(*(_QWORD **)(v10 + 56), v11, v12);
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFace>>::promise(_QWORD *a1, unint64_t a2, JSC::Structure *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::JSPromise *v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::DOMGuardedObject *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::FontFace *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v34[8];
  WTF::StringImpl *v35;
  objc_class *v36;

  v5 = *((unsigned int *)a1 + 13);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v9 = *(JSC::JSPromise **)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 1164);
    if (v10)
      v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
    else
      v11 = 0;
    v12 = JSC::JSPromise::create(v9, v11, a3);
    v13 = WTF::fastMalloc((WTF *)0x30);
    v14 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v13, a2, v12);
    *(_QWORD *)v14 = &off_1E3226868;
    *((_DWORD *)v14 + 10) = 1;
    *((_BYTE *)v14 + 44) = 0;
    v15 = *((unsigned int *)a1 + 13);
    if ((_DWORD)v15 == *((_DWORD *)a1 + 12))
    {
      v16 = v15 + (v15 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v15 + 1)
        v18 = v15 + 1;
      else
        v18 = v17;
      v19 = (_QWORD *)a1[5];
      if (v18 < 2)
      {
        v20 = a1 + 7;
        a1[5] = a1 + 7;
        *((_DWORD *)a1 + 12) = 1;
      }
      else
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194B32F04);
        }
        v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
        *((_DWORD *)a1 + 12) = v18;
        a1[5] = v20;
      }
      memcpy(v20, v19, 8 * v15);
      if (a1 + 7 != v19 && v19)
      {
        if ((_QWORD *)a1[5] == v19)
        {
          a1[5] = 0;
          *((_DWORD *)a1 + 12) = 0;
        }
        WTF::fastFree((WTF *)v19, v25);
      }
      v15 = *((unsigned int *)a1 + 13);
      v21 = (uint64_t *)(a1[5] + 8 * v15);
    }
    else
    {
      v21 = (uint64_t *)(a1[5] + 8 * v15);
    }
    ++*(_DWORD *)(v13 + 16);
    *v21 = v13;
    *((_DWORD *)a1 + 13) = v15 + 1;
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_39;
    if (!*((_BYTE *)a1 + 24))
    {
      v30 = (WebCore::FontFace *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFace>>(v13, v30);
      goto LABEL_39;
    }
    v26 = *((_BYTE *)a1 + 8);
    v27 = (WTF::StringImpl *)a1[2];
    if (v27)
      *(_DWORD *)v27 += 4;
    v35 = v27;
    v36 = 0;
    v34[0] = v26;
    WebCore::DeferredPromise::reject(v13, v34, 0, &v36);
    v29 = v35;
    v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v28);
        if (v27)
        {
LABEL_36:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v28);
          else
            *(_DWORD *)v27 -= 2;
        }
LABEL_39:
        v31 = *(_QWORD *)(v13 + 24);
        if (v31 && (v32 = *(_QWORD *)v31) != 0 && (*(_BYTE *)(v31 + 8) & 3) == 0)
        {
          if ((v32 & 0xFFFE000000000002) != 0)
          {
            v24 = 0;
          }
          else if (*(_BYTE *)(v32 + 5) == 68)
          {
            v24 = *(_QWORD *)v31;
          }
          else
          {
            v24 = 0;
          }
        }
        else
        {
          v24 = 10;
        }
        if (*(_DWORD *)(v13 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        else
          --*(_DWORD *)(v13 + 16);
        return v24;
      }
      *(_DWORD *)v29 -= 2;
    }
    if (v27)
      goto LABEL_36;
    goto LABEL_39;
  }
  v6 = a1[5];
  v7 = 8 * v5;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 8) & 3) == 0 && *(_QWORD *)v8 == a2)
        break;
    }
    v6 += 8;
    v7 -= 8;
    if (!v7)
      goto LABEL_7;
  }
  v22 = *(_BYTE **)(*(_QWORD *)v6 + 24);
  if (!v22)
    return 10;
  v23 = *(_QWORD *)v22;
  if (!*(_QWORD *)v22 || (v22[8] & 3) != 0)
    return 10;
  if ((v23 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v23 + 5) == 68)
    return *(_QWORD *)v22;
  return 0;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFace>>(uint64_t result, WebCore::FontFace *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::FontFace>((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore8FontFaceENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::FontFace *v6;
  WTF *v7;
  void *v8;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(WebCore::FontFace **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 1)
        {
          WebCore::FontFace::~FontFace(v6);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*((_DWORD *)v6 + 6);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::jsFontFaceSetPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WebCore::FontFace *v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "FontFaceSet", "has");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFontFaceSet::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFontFaceSet::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "FontFaceSet", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSFontFace::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSFontFace::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(WebCore::FontFace **)(v17 + 24)) != 0)
    {
      if (WebCore::FontFaceSet::has((WebCore::FontFaceSet *)(v16 - 24), v24))
        return 7;
      else
        return 6;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "font", 5, "FontFaceSet", 12, a8, "has", 4, "FontFace", 9);
      return 0;
    }
  }
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_add(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSValue v36;
  JSValue v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebCore *v40;
  JSC::JSGlobalObject *v41;
  JSC::CallFrame *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  int v45;
  char v46[8];
  WTF::StringImpl *v47;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "FontFaceSet", "add");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSFontFaceSet::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSFontFaceSet::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "FontFaceSet", "add");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v36);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v44[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSFontFace::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSFontFace::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v44, 0, "font", 5, "FontFaceSet", 12, a8, "add", 4, "FontFace", 9);
    return 0;
  }
  v26 = *(JSC::VM **)(v11 + 40);
  v27 = *(_QWORD *)(v17 + 48);
  v28 = *(_QWORD *)(v25 + 48);
  v29 = *(unsigned int *)(v27 + 36);
  if ((_DWORD)v29)
  {
    v30 = *(_QWORD **)(v27 + 24);
    v31 = 8 * v29;
    while (*v30 != v28)
    {
      ++v30;
      v31 -= 8;
      if (!v31)
        goto LABEL_30;
    }
    goto LABEL_33;
  }
LABEL_30:
  v32 = *(unsigned int *)(v28 + 24);
  if ((_DWORD)v32 != -1)
  {
    v44[0] = v46;
    if (((uint64_t (*)(_QWORD *, uint64_t, JSC::CallFrame *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v32])(v44, v28 + 16, a3))
    {
      LOBYTE(v44[0]) = 10;
      v45 = 1;
      v46[0] = 10;
      v44[1] = 0;
      v47 = 0;
      if (!*((_QWORD *)v9 + 2))
      {
        v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0xA, (JSC::JSGlobalObject *)&v47);
        JSC::VM::throwException(v9, this, v37);
        v39 = v47;
        v47 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v38);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      v24 = 0;
      v33 = 1;
      goto LABEL_34;
    }
    WebCore::CSSFontFaceSet::add(*(WebCore::CSSFontFaceSet **)(v17 + 48), *(WebCore::CSSFontFace **)(v25 + 48));
LABEL_33:
    v44[0] = v17 - 24;
    v45 = 0;
    v24 = WebCore::wrap<WebCore::FontFaceSet>((int)this, v26, v17 - 24);
    v33 = 0;
LABEL_34:
    ((void (*)(char *, _QWORD *))off_1E327DC58[v33])(v46, v44);
    return (_BYTE *)v24;
  }
  v40 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsFontFaceSetPrototypeFunction_delete(v40, v41, v42);
}

uint64_t WebCore::jsFontFaceSetPrototypeFunction_delete(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::CSSFontFace *v29;
  const WebCore::CSSFontFace **v30;
  uint64_t v31;
  JSValue v32;
  WebCore *v33;
  JSC::JSGlobalObject *v34;
  JSC::CallFrame *v35;
  JSC::VM *v36;
  char v37;
  JSC::VM *v38;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "FontFaceSet", "delete");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSFontFaceSet::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSFontFaceSet::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "FontFaceSet", "delete");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v38 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSFontFace::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSFontFace::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      v25 = *(_QWORD *)(v24 + 48);
      v26 = *(unsigned int *)(v25 + 24);
      if ((_DWORD)v26 == -1)
      {
        v33 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::jsFontFaceSetPrototypeFunction_clear(v33, v34, v35);
      }
      else
      {
        v38 = (JSC::VM *)&v37;
        if (((uint64_t (*)(JSC::VM **, uint64_t, JSC::CallFrame *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v26])(&v38, v25 + 16, a3))
        {
          return 6;
        }
        v27 = *(_QWORD *)(v16 + 48);
        v28 = *(unsigned int *)(v27 + 36);
        if (!(_DWORD)v28)
        {
          return 6;
        }
        else
        {
          v29 = *(const WebCore::CSSFontFace **)(v24 + 48);
          v30 = *(const WebCore::CSSFontFace ***)(v27 + 24);
          v31 = 8 * v28;
          result = 6;
          while (*v30 != v29)
          {
            ++v30;
            v31 -= 8;
            if (!v31)
              return result;
          }
          WebCore::CSSFontFaceSet::remove(*(WebCore::CSSFontFaceSet **)(v16 + 48), v29);
          return 7;
        }
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v38, 0, "font", 5, "FontFaceSet", 12, a8, "delete", 7, "FontFace", 9);
      return 0;
    }
  }
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  _BYTE *result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "FontFaceSet", "clear");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFontFaceSet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFontFaceSet::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v14, "FontFaceSet", "clear");
  v9 = *(_QWORD *)(v3 + 24);
  result = *(_BYTE **)(v9 + 48);
  v11 = *((_QWORD *)result + 9);
  v12 = *((unsigned int *)result + 9);
  v13 = 10;
  while (v11 < v12)
  {
    if (!v12)
    {
      __break(0xC471u);
      return result;
    }
    WebCore::CSSFontFaceSet::remove((WebCore::CSSFontFaceSet *)result, *(const WebCore::CSSFontFace **)(*((_QWORD *)result + 3) + 8 * (v12 - 1)));
    result = *(_BYTE **)(v9 + 48);
    v12 = *((unsigned int *)result + 9);
  }
  return (_BYTE *)v13;
}

unint64_t WebCore::jsFontFaceSetPrototypeFunction_load(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::DOMGuardedObject *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  objc_class *v41;
  WebCore::DOMGuardedObject *v42;
  JSValue v43;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  int v49;
  WebCore::DOMGuardedObject *v50;
  int v51;
  WebCore::DOMGuardedObject *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B33CACLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_73;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSFontFaceSet::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSFontFaceSet::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_73:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"FontFaceSet", "load", v17);
  }
  else
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v25 = *(_QWORD *)(v18 + 24);
      v26 = *((_QWORD *)a2 + 6);
      v48 = v26;
      if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v48, this);
LABEL_32:
        if (*((_DWORD *)v24 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
          v28 = v54;
          if (hasExceptionsAfterHandlingTraps)
          {
            v51 = 1;
            v54 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v45);
              else
                *(_DWORD *)v28 -= 2;
            }
            v38 = 1;
LABEL_57:
            ((void (*)(uint64_t *, WebCore::DOMGuardedObject **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v38])(&v48, &v50);
            if (!v14)
              goto LABEL_60;
            goto LABEL_58;
          }
        }
        else
        {
          v28 = v54;
        }
        v50 = v28;
        v51 = 0;
        if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL
          || (v29 = *((_QWORD *)a2 + 7), v29 == 10))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v30 = v54;
          v49 = 0;
          goto LABEL_46;
        }
        v54 = (WTF::StringImpl *)v29;
        v31 = (JSC::VM *)*((_QWORD *)this + 7);
        if ((v29 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v29 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, this);
          goto LABEL_43;
        }
        v32 = *(WTF::StringImpl **)(v29 + 8);
        if ((v32 & 1) != 0)
        {
          v32 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v29, this);
          if (!v32)
            goto LABEL_42;
        }
        else if (!v32)
        {
LABEL_42:
          v53 = v32;
LABEL_43:
          if (*((_DWORD *)v31 + 20))
          {
            v47 = JSC::VM::hasExceptionsAfterHandlingTraps(v31);
            v30 = v53;
            if (v47)
            {
              v49 = 1;
              v53 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v46);
                else
                  *(_DWORD *)v30 -= 2;
              }
              v37 = 1;
              goto LABEL_56;
            }
          }
          else
          {
            v30 = v53;
          }
          v49 = 0;
LABEL_46:
          v50 = 0;
          v53 = v30;
          v54 = v28;
          v48 = 0;
          v52 = v14;
          WebCore::FontFaceSet::load(v25 - 24, (unsigned int **)&v54, (WTF::String *)&v53, (uint64_t *)&v52);
          v34 = v52;
          v52 = 0;
          if (v34)
          {
            if (*((_DWORD *)v34 + 4) == 1)
              (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v34 + 16))(v34);
            else
              --*((_DWORD *)v34 + 4);
          }
          v35 = v53;
          v53 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v33);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = v54;
          v54 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v33);
            else
              *(_DWORD *)v36 -= 2;
          }
          v14 = 0;
          v37 = 0;
LABEL_56:
          ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v37])(&v54, &v48);
          v38 = 0;
          goto LABEL_57;
        }
        *(_DWORD *)v32 += 2;
        goto LABEL_42;
      }
      v27 = *(WTF::StringImpl **)(v26 + 8);
      if ((v27 & 1) != 0)
      {
        v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
        if (!v27)
          goto LABEL_31;
      }
      else if (!v27)
      {
LABEL_31:
        v54 = v27;
        goto LABEL_32;
      }
      *(_DWORD *)v27 += 2;
      goto LABEL_31;
    }
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v24, this, v43);
  }
LABEL_58:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_60:
  v39 = *(_QWORD *)(v10 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v10 + 24) != v39)
    {
      v41 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v50);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v50, v41, 0);
      v42 = v50;
      v50 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v42 + 16))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_check(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  JSValue v33;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSValue v38;
  int v39;
  WTF::StringImpl *v40;
  WebCore *v41;
  JSC::JSGlobalObject *v42;
  JSC::CallFrame *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47[2];
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;

  v4 = *((_QWORD *)this + 7);
  v44 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "FontFaceSet", "check");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSFontFaceSet::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSFontFaceSet::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v44, "FontFaceSet", "check");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v33);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v47 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v54 = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v47, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v15 = v54;
    if (hasExceptionsAfterHandlingTraps)
    {
      v53 = 1;
      v54 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v35);
        else
          *(_DWORD *)v15 -= 2;
      }
      v26 = 0;
      v30 = 1;
      goto LABEL_52;
    }
  }
  else
  {
    v15 = v54;
  }
  v52 = v15;
  v53 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL || (v16 = *((_QWORD *)a2 + 7), v16 == 10))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = *(WTF::StringImpl **)v47;
    v51 = 0;
    goto LABEL_33;
  }
  *(_QWORD *)v47 = v16;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v47, this);
    goto LABEL_30;
  }
  v19 = *(WTF::StringImpl **)(v16 + 8);
  if ((v19 & 1) != 0)
  {
    v19 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
    if (!v19)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (v19)
LABEL_28:
    *(_DWORD *)v19 += 2;
LABEL_29:
  v54 = v19;
LABEL_30:
  if (*((_DWORD *)v18 + 20))
  {
    v39 = JSC::VM::hasExceptionsAfterHandlingTraps(v18);
    v17 = v54;
    if (v39)
    {
      v51 = 1;
      v54 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v40);
        else
          *(_DWORD *)v17 -= 2;
      }
      v26 = 0;
      v29 = 1;
      goto LABEL_51;
    }
  }
  else
  {
    v17 = v54;
  }
  v51 = 0;
LABEL_33:
  v52 = 0;
  v45 = v17;
  v46 = v15;
  v50 = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 120);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 80);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          if (!*(_BYTE *)(v23 + 178))
          {
            *(_DWORD *)(v23 - 264) += 2;
            WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v23 - 288));
            if (*(_DWORD *)(v23 - 264) == 2)
            {
              if ((*(_WORD *)(v23 - 258) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v23 - 288), v24);
            }
            else
            {
              *(_DWORD *)(v23 - 264) -= 2;
            }
          }
        }
      }
    }
  }
  WebCore::CSSFontFaceSet::check(*(WebCore::CSSFontFaceSet **)(v12 + 48), (unsigned int **)&v46, (uint64_t)v47);
  if (!v49)
  {
    v25 = 0;
    if (LOBYTE(v47[0]))
      v26 = 7;
    else
      v26 = 6;
LABEL_44:
    off_1E327DC68[v25](&v54, v47);
    v49 = -1;
    v45 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v27);
      else
        *(_DWORD *)v17 -= 2;
    }
    v28 = v46;
    v46 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v29 = 0;
LABEL_51:
    ((void (*)(int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v29])(v47, &v50);
    v30 = 0;
LABEL_52:
    ((void (*)(int *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v30])(v47, &v52);
    return (_BYTE *)v26;
  }
  if (v49 == 1)
  {
    v36 = (WTF::StringImpl *)LOBYTE(v47[0]);
    LOBYTE(v54) = v47[0];
    v37 = v48;
    v48 = 0;
    v55 = v37;
    if (!*(_QWORD *)(v4 + 16))
    {
      v38.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v47[0]), (JSC::JSGlobalObject *)&v55);
      JSC::VM::throwException((JSC::VM *)v4, this, v38);
      v37 = v55;
    }
    v55 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v36);
      else
        *(_DWORD *)v37 -= 2;
    }
    v26 = 0;
    v25 = 1;
    goto LABEL_44;
  }
  v41 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsFontFaceSetPrototypeFunction_entries(v41, v42, v43);
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "entries");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFontFaceSet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFontFaceSet::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "entries");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FontFaceSetIterator>(v3, 1);
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "keys");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFontFaceSet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFontFaceSet::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "keys");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FontFaceSetIterator>(v3, 0);
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "values");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFontFaceSet::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFontFaceSet::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v10, "FontFaceSet", "values");
  else
    return (_BYTE *)WebCore::iteratorCreate<WebCore::FontFaceSetIterator>(v3, 1);
}

_BYTE *WebCore::jsFontFaceSetPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore::FontFace *v14;
  objc_class *v15;
  objc_class *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  WTF *v22;
  void *v23;
  JSValue v24;
  JSValue v25;
  JSValue v26;
  _QWORD *v27;
  uint64_t v29;
  bmalloc::api *v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  char v36;
  uint64_t v37;
  WTF *v38;
  uint64_t *v39[9];
  WebCore::FontFace *v40;
  WebCore::FontFaceSet *v41[2];
  uint64_t v42[3];
  uint64_t v43;

  v4 = *((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "FontFaceSet", "forEach");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSFontFaceSet::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSFontFaceSet::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "FontFaceSet", "forEach");
  v43 = v4;
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0))
  {
    LOBYTE(v42[0]) = 0;
    return (_BYTE *)JSC::throwTypeError();
  }
  if (*(_BYTE *)(v11 + 5) == 26)
    JSC::JSFunction::getCallData(*((JSC::JSFunction **)a2 + 6), (JSCell *)a2);
  else
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v42, *((_QWORD *)a2 + 6));
  if (!LOBYTE(v42[0]))
    return (_BYTE *)JSC::throwTypeError();
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  ++*(_DWORD *)(v12 - 8);
  v41[0] = (WebCore::FontFaceSet *)(v12 - 24);
  v41[1] = 0;
  do
  {
    while (1)
    {
      WebCore::FontFaceSet::Iterator::next((unsigned int *)v41, (uint64_t *)&v40);
      v14 = v40;
      if (!v40)
        goto LABEL_56;
      v36 = 0;
      v37 = 0x800000000;
      v38 = (WTF *)&v39[1];
      memset(v39, 0, sizeof(v39));
      v15 = (objc_class *)WebCore::wrap<WebCore::FontFace>((uint64_t)this, *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28), v40);
      v16 = v15;
      v17 = v37;
      if ((_DWORD)v37 == HIDWORD(v37) || v38 != (WTF *)&v39[1] && v38)
      {
        v24.super.isa = v15;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v37, v24) == 1)
          v36 = 1;
      }
      else
      {
        *((_QWORD *)v38 + v37) = v15;
        LODWORD(v37) = v17 + 1;
      }
      v18 = v37;
      if ((_DWORD)v37 == HIDWORD(v37) || v38 != (WTF *)&v39[1] && v38)
      {
        v25.super.isa = v16;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v37, v25) == 1)
          v36 = 1;
      }
      else
      {
        *((_QWORD *)v38 + v37) = v16;
        LODWORD(v37) = v18 + 1;
      }
      v19 = v37;
      if ((_DWORD)v37 == HIDWORD(v37) || v38 != (WTF *)&v39[1] && v38)
      {
        v26.super.isa = (Class)v5;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v37, v26) == 1)
        {
          v36 = 1;
LABEL_51:
          JSC::throwOutOfMemoryError();
          v20 = 1;
          goto LABEL_32;
        }
      }
      else
      {
        *((_QWORD *)v38 + v37) = v5;
        LODWORD(v37) = v19 + 1;
      }
      if (v36)
        goto LABEL_51;
      v34 = v38;
      v35 = v37;
      JSC::call();
      v20 = *(_QWORD *)(v43 + 16) ? 3 : 0;
LABEL_32:
      v21 = v39[0];
      if (v39[0])
      {
        v34 = (WTF *)&v37;
        v27 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v39[0], (uint64_t *)&v34);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v21, v27);
      }
      if (v38 != (WTF *)&v39[1] && v38)
        WTF::fastFree(v38, v13);
      if (*((_DWORD *)v14 + 6) == 1)
        break;
      --*((_DWORD *)v14 + 6);
      if (v20)
        goto LABEL_55;
    }
    WebCore::FontFace::~FontFace(v14);
    WTF::fastFree(v22, v23);
  }
  while (!v20);
LABEL_55:
  if (v20 == 3)
  {
LABEL_56:
    v29 = 10;
    goto LABEL_58;
  }
  v29 = 0;
LABEL_58:
  if (v41[0])
  {
    if (*((_DWORD *)v41[0] + 4) == 1)
    {
      WebCore::FontFaceSet::~FontFaceSet(v41[0], v13);
      bmalloc::api::isoDeallocate(v31, v32);
    }
    else
    {
      --*((_DWORD *)v41[0] + 4);
    }
  }
  return (_BYTE *)v29;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJPN7WebCore11FontFaceSetENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::iteratorCreate<WebCore::FontFaceSetIterator>(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  int v14;
  unint64_t v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  JSC::Structure *v28;
  int v29;
  JSC::JSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  JSC::Structure *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  WTF::StringImpl *v54[6];
  int v55;
  int v56;
  int v57;
  JSC::Structure *v58;

  v4 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v4 + 56);
  v6 = (unint64_t *)(v5 + 40136);
  v7 = *(_QWORD *)(v4 + 3296);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 8);
    v9 = ((unint64_t)&WebCore::FontFaceSetIterator::s_info
        + ~((_QWORD)&WebCore::FontFaceSetIterator::s_info << 32)) ^ (((unint64_t)&WebCore::FontFaceSetIterator::s_info
                                                                    + ~((_QWORD)&WebCore::FontFaceSetIterator::s_info << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(char ***)(v7 + 16 * v12);
    if (v13 == &WebCore::FontFaceSetIterator::s_info)
    {
LABEL_6:
      v15 = *(_QWORD *)(v7 + 16 * v12 + 8);
      if (v15)
        goto LABEL_32;
    }
    else
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(char ***)(v7 + 16 * v12);
        ++v14;
        if (v13 == &WebCore::FontFaceSetIterator::s_info)
          goto LABEL_6;
      }
    }
  }
  v16 = *(JSC::JSCell **)(v4 + 696);
  LODWORD(v54[0]) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v18 = (uint64_t *)(v5 + 38904);
  SlowCase = *v6;
  if (*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v51 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v51);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v51;
LABEL_11:
    *v6 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, v4, v16, v54, &WebCore::JSDOMIteratorPrototype<WebCore::JSFontFaceSet,WebCore::FontFaceSetIteratorTraits>::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v5 + 38904) < *(_QWORD *)(v5 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v5 + 38920);
  if ((v20 & 1) == 0)
  {
    v52 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v20 + HIDWORD(v52);
    *(_QWORD *)(v5 + 38920) = v20 + (int)v52;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 41952) + 2000);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v54[0] = v22;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  else
  {
    v54[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v26 = JSC::JSString::create(v5, v54);
  v27 = v54[0];
  v54[0] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (JSC::Structure *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v57 = *(_DWORD *)v20;
  v58 = v28;
  v29 = JSC::Structure::outOfLineCapacity(v28);
  v55 = 0;
  v56 = v29;
  v54[0] = (WTF::StringImpl *)&v56;
  v54[1] = (WTF::StringImpl *)v20;
  v54[2] = (WTF::StringImpl *)v5;
  v54[3] = (WTF::StringImpl *)&v57;
  v54[4] = (WTF::StringImpl *)&v58;
  v54[5] = (WTF::StringImpl *)&v55;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v28, (JSC::VM *)v5, v24, 6, (uint64_t)v54);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v5, v55, v26);
  *((_DWORD *)v28 + 4) |= 0x10u;
  LODWORD(v54[0]) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v30 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v30)
      JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v5);
  }
  v31 = *v6;
  if (*v6 >= *(_QWORD *)(v5 + 40144))
  {
    v31 = *(_QWORD *)(v5 + 40152);
    if ((v31 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v31 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_29;
    }
    v53 = *(_QWORD *)(v31 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v31 + HIDWORD(v53);
    *(_QWORD *)(v5 + 40152) = v31 + (int)v53;
  }
  *v6 = v31 + 128;
LABEL_29:
  *(_DWORD *)v31 = 0;
  MEMORY[0x19AEA4278](v31, v5, v4, v20, v54, &WebCore::FontFaceSetIterator::s_info, 0, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::cacheDOMStructure((JSCell *)v4, v31, (uint64_t)&WebCore::FontFaceSetIterator::s_info);
LABEL_32:
  v32 = *(_QWORD *)(v5 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 2984);
  if (v34)
    goto LABEL_52;
  v35 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v35))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v35))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_37:
  v37 = *(_QWORD *)(v35 + 2824);
  if (!*(_QWORD *)(v37 + 2984))
  {
    v38 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v54, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v38, v54, v5 + 192, v5 + 1872, 56, 8, &v58);
    v40 = v58;
    v58 = 0;
    if (v40)
      (*(void (**)(JSC::Structure *))(*(_QWORD *)v40 + 8))(v40);
    v41 = v54[0];
    v54[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 1)
        WTF::fastFree(v41, v39);
      else
        --*(_DWORD *)v41;
    }
    v42 = *(_QWORD *)(v37 + 2984);
    *(_QWORD *)(v37 + 2984) = v38;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v33 + 2984);
  *(_QWORD *)(v33 + 2984) = v34;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v35);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v35))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_52:
  v47 = v34[3];
  if (v47 < v34[4])
  {
LABEL_53:
    v34[3] = v47 + 64;
    goto LABEL_54;
  }
  v47 = v34[5];
  if ((v47 & 1) == 0)
  {
    v50 = *(_QWORD *)(v47 + 8) ^ v34[6];
    v34[4] = v47 + HIDWORD(v50);
    v34[5] = v47 + (int)v50;
    goto LABEL_53;
  }
  JSC::sanitizeStackForVM();
  v47 = JSC::LocalAllocator::allocateSlowCase();
LABEL_54:
  *(_DWORD *)v47 = 0;
  WebCore::JSDOMObject::JSDOMObject(v47, v15);
  v48 = *(_QWORD *)(a1 + 24);
  WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                    * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                    + 0x28));
  ++*(_DWORD *)(v48 - 8);
  *(_QWORD *)(v47 + 24) = v48 - 24;
  *(_QWORD *)(v47 + 32) = 0;
  *(_BYTE *)(v47 + 40) = 1;
  *(_DWORD *)(v47 + 48) = a2;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  return v47;
}

uint64_t WebCore::JSDOMIteratorPrototype<WebCore::JSFontFaceSet,WebCore::FontFaceSetIteratorTraits>::next(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::FontFaceSet **v10;
  void *v11;
  WebCore::FontFace *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  JSC::VM *v17;
  uint64_t *v18;
  void *v19;
  WebCore::FontFaceSet *v20;
  JSValue v21;
  uint64_t IteratorResultObject;
  JSValue v24;
  WTF *v25;
  void *v26;
  bmalloc::api *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  WebCore::FontFace *v31;
  uint64_t *v32;
  int v33;
  char v34;
  uint64_t v35;
  WTF *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMIteratorBase<WebCore::JSFontFaceSet,WebCore::FontFaceSetIteratorTraits>::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMIteratorBase<WebCore::JSFontFaceSet,WebCore::FontFaceSetIteratorTraits>::s_info
         && v6 != 0);
  }
  if (!v5)
    return JSC::throwTypeError();
  if (!*(_BYTE *)(v3 + 40))
  {
LABEL_30:
    v21.super.isa = (Class)1;
    return JSC::createIteratorResultObject(this, (JSC::JSGlobalObject *)0xA, v21);
  }
  v10 = (WebCore::FontFaceSet **)(v3 + 24);
  WebCore::FontFaceSet::Iterator::next((unsigned int *)(v3 + 24), (uint64_t *)&v31);
  v12 = v31;
  if (!v31)
  {
    if (*(_BYTE *)(v3 + 40))
    {
      v20 = *v10;
      *v10 = 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 4) == 1)
        {
          WebCore::FontFaceSet::~FontFaceSet(v20, v11);
          bmalloc::api::isoDeallocate(v27, v28);
        }
        else
        {
          --*((_DWORD *)v20 + 4);
        }
      }
      *(_BYTE *)(v3 + 40) = 0;
    }
    goto LABEL_30;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  v14 = WebCore::wrap<WebCore::FontFace>((uint64_t)this, v13, v31);
  v15 = (void *)v14;
  v16 = *(_DWORD *)(v3 + 48);
  if (v16 >= 2)
  {
    if (v16 == 2)
    {
      v34 = 0;
      v36 = (WTF *)&v38;
      v37 = 0;
      v40 = 0u;
      v41 = 0u;
      v42 = 0;
      v38 = v14;
      v39 = (unint64_t)v14;
      v35 = 0x800000002;
      v17 = *(JSC::VM **)(v13 + 56);
      v32 = &v38;
      v33 = 2;
      if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
        v15 = 0;
      else
        v15 = (void *)JSC::constructArray();
      v18 = v37;
      if (v37)
      {
        v32 = &v35;
        v29 = v15;
        v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v37, (uint64_t *)&v32);
        WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v18, v30);
        v15 = v29;
      }
      if (v36 != (WTF *)&v38 && v36)
      {
        v19 = v15;
        WTF::fastFree(v36, v15);
        v15 = v19;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  v24.super.isa = 0;
  IteratorResultObject = JSC::createIteratorResultObject(this, (JSC::JSGlobalObject *)v15, v24);
  if (*((_DWORD *)v12 + 6) == 1)
  {
    WebCore::FontFace::~FontFace(v12);
    WTF::fastFree(v25, v26);
  }
  else
  {
    --*((_DWORD *)v12 + 6);
  }
  return IteratorResultObject;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13FormDataEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsGPUPrototypeFunction_requestAdapter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  objc_class *v32;
  WebCore::DOMGuardedObject *v33;
  WebCore::DOMGuardedObject *v34;
  int v35;
  _QWORD *v36;
  __int16 v37;
  char v38;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSGPU::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSGPU::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_39:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPU", "requestAdapter", v16);
LABEL_47:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_36;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v23 = 10;
  else
    v23 = *((_QWORD *)a2 + 6);
  v24 = *(_QWORD *)(v17 + 24);
  WebCore::convertDictionary<WebCore::GPURequestAdapterOptions>((JSC::JSCell *)v23, (unint64_t)this, (uint64_t)&v34);
  if (v35)
    goto LABEL_47;
  v25 = *(_QWORD *)(v24 + 40);
  if ((WORD2(v34) & 0xFF00) != 0)
  {
    v26 = BYTE4(v34);
    if (!BYTE4(v34) || BYTE4(v34) == 1)
    {
      v27 = 1;
      goto LABEL_34;
    }
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x194B35470);
  }
  v26 = 0;
  v27 = 0;
LABEL_34:
  v38 = BYTE6(v34);
  v37 = v26 | (v27 << 8);
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = &off_1E334D4B0;
  v28[1] = v14;
  v36 = v28;
  (*(void (**)(uint64_t, __int16 *, _QWORD **))(*(_QWORD *)v25 + 16))(v25, &v37, &v36);
  v29 = v36;
  v36 = 0;
  if (v29)
    (*(void (**)(_QWORD *))(*v29 + 8))(v29);
LABEL_36:
  v30 = *(_QWORD *)(v10 + 16);
  if (v30)
  {
    if (*(_QWORD *)(v10 + 24) != v30)
    {
      v32 = *(objc_class **)(v30 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v34);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v34, v32, 0);
      v33 = v34;
      v34 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v33 + 16))(v33);
        else
          --*((_DWORD *)v33 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsGPUPrototypeFunction_getPreferredCanvasFormat(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v3 = *((_QWORD *)a2 + 5);
  v4 = *((_QWORD *)this + 7);
  v19 = v4;
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "GPU", "getPreferredCanvasFormat");
  v5 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 76);
  v7 = *(_DWORD *)(v5 + 76) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPU::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPU::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "GPU", "getPreferredCanvasFormat");
  v11 = (uint64_t *)(v4 + 41968);
  WebCore::convertEnumerationToString(22, &v20);
  v13 = v20;
  if (!v20)
    return (_BYTE *)*v11;
  v14 = *((_DWORD *)v20 + 1);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_15:
      v15 = *(_QWORD *)(v4 + 64760);
      if (!v15 || v20 != *(WTF::StringImpl **)(v15 + 8))
        v15 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_18;
    }
    v17 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    if ((*((_BYTE *)v20 + 16) & 4) != 0)
    {
      v18 = *v17;
    }
    else
    {
      v18 = *(unsigned __int16 *)v17;
      if (v18 > 0xFF)
        goto LABEL_15;
      v18 = v18;
    }
    v15 = *(_QWORD *)(v4 + 8 * v18 + 42216);
  }
  else
  {
    v15 = *v11;
  }
LABEL_18:
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v12);
  else
    *(_DWORD *)v13 -= 2;
  return (_BYTE *)v15;
}

unint64_t WebCore::jsGPUAdapterPrototypeFunction_requestDevice(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  WTF *v28;
  WTF::StringImpl *v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WebCore::DOMGuardedObject *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  objc_class *v42;
  WTF::StringImpl *v43;
  __int128 v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  WebCore::DOMGuardedObject *v50;
  WTF::StringImpl *v51[2];
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  char v56;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B35A14);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_65;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSGPUAdapter::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSGPUAdapter::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_65:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUAdapter", "requestDevice", v16);
LABEL_56:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_58;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
    goto LABEL_56;
  v25 = v24;
  if (*((_DWORD *)a2 + 8) == 1)
    v26 = 10;
  else
    v26 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::GPUDeviceDescriptor>((JSC::JSCell *)v26, this, (uint64_t)&v44);
  v27 = v49;
  if (!v49)
  {
    v28 = v46;
    v46 = 0;
    v29 = v48;
    v48 = 0;
    v30 = v44;
    v44 = 0uLL;
    *(_OWORD *)v51 = v30;
    *(_QWORD *)&v30 = v45;
    v45 = 0;
    v52 = v30;
    v53 = v28;
    *(_QWORD *)&v30 = v47;
    v47 = 0;
    v54 = v30;
    v55 = v29;
    v56 = 1;
    v50 = v14;
    WebCore::GPUAdapter::requestDevice(v23, v25, (uint64_t)v51, (uint64_t *)&v50);
    v32 = v50;
    v50 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v32 + 16))(v32);
      else
        --*((_DWORD *)v32 + 4);
    }
    if (v56)
    {
      v33 = v55;
      v55 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v31);
        else
          *(_DWORD *)v33 -= 2;
      }
      if (HIDWORD(v54))
      {
        v34 = v53;
        v35 = 16 * HIDWORD(v54);
        do
        {
          v36 = *(WTF::StringImpl **)v34;
          *(_QWORD *)v34 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v31);
            else
              *(_DWORD *)v36 -= 2;
          }
          v34 = (WTF *)((char *)v34 + 16);
          v35 -= 16;
        }
        while (v35);
      }
      v37 = v53;
      if (v53)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree(v37, v31);
      }
      v38 = v51[1];
      if (v51[1])
      {
        v51[1] = 0;
        LODWORD(v52) = 0;
        WTF::fastFree(v38, v31);
      }
      v39 = v51[0];
      v51[0] = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v31);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    v14 = 0;
    v27 = v49;
  }
  if (v27 != -1)
    (*(&off_1E327DEE0 + v27))((int)v51, (WebCore::GPUDeviceDescriptor *)&v44);
  if (v14)
    goto LABEL_56;
LABEL_58:
  v40 = *(_QWORD *)(v10 + 16);
  if (v40)
  {
    if (*(_QWORD *)(v10 + 24) != v40)
    {
      v42 = *(objc_class **)(v40 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, v51);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v51[0], v42, 0);
      v43 = v51[0];
      v51[0] = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v43 + 16))(v43);
        else
          --*((_DWORD *)v43 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsGPUAdapterPrototypeFunction_requestAdapterInfo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;
  void *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  objc_class *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  WebCore::DOMGuardedObject *v42;
  WTF::StringImpl *v43;
  int v44;
  unsigned int v45;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B35DCCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPUAdapter::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPUAdapter::s_info && v20 != 0);
    }
    if (v19)
    {
      v23 = *(_QWORD *)(v17 + 24);
      if (*((_DWORD *)a2 + 8) == 1 || (v24 = *((_QWORD *)a2 + 6), v24 == 10))
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v41 = 0;
      }
      else
      {
        v42 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
        if ((v24 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v24 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v31 = v43;
          v43 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
          v29 = 1;
          v41 = 1;
          goto LABEL_43;
        }
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(this, v24, (uint64_t)&v39);
        v29 = v41;
        if (v41)
        {
LABEL_33:
          if (v29 == -1)
          {
LABEL_44:
            if (!v14)
              goto LABEL_47;
            goto LABEL_45;
          }
LABEL_43:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E327DEF0[v29])(&v43, &v39);
          goto LABEL_44;
        }
        v27 = v39;
        v26 = v40;
        v25 = HIDWORD(v40);
      }
      v39 = 0;
      v40 = 0;
      v42 = v14;
      v43 = v27;
      v44 = v26;
      v45 = v25;
      WebCore::GPUAdapter::requestAdapterInfo(v23, (uint64_t)&v43, (uint64_t *)&v42);
      if (*((_DWORD *)v14 + 4) == 1)
      {
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
        if (!v25)
          goto LABEL_30;
      }
      else
      {
        --*((_DWORD *)v14 + 4);
        if (!v25)
        {
LABEL_30:
          if (v27)
            WTF::fastFree(v27, v28);
          v14 = 0;
          v29 = v41;
          goto LABEL_33;
        }
      }
      v34 = 8 * v25;
      v35 = (WTF::StringImpl **)v27;
      do
      {
        v36 = *v35;
        *v35 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v28);
          else
            *(_DWORD *)v36 -= 2;
        }
        ++v35;
        v34 -= 8;
      }
      while (v34);
      goto LABEL_30;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUAdapter", "requestAdapterInfo", v16);
LABEL_45:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_47:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v37 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v43);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v43, v37, 0);
      v38 = v43;
      v43 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void WebCore::GPUDeviceDescriptor::~GPUDeviceDescriptor(WebCore::GPUDeviceDescriptor *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = (WTF::StringImpl **)*((_QWORD *)this + 3);
    v6 = 16 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19GPUDeviceDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::GPUDeviceDescriptor *this)
{
  WebCore::GPUDeviceDescriptor::~GPUDeviceDescriptor(this, this);
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF **v13;

  v11 = 0;
  v12 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v13 = &v11;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v13);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v12);
    result = (uint64_t)v11;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(WTF::StringImpl **)result;
        *(_QWORD *)result = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
          {
            v10 = result;
            WTF::StringImpl::destroy(v9, v6);
            result = v10;
          }
          else
          {
            *(_DWORD *)v9 -= 2;
          }
        }
        result += 8;
        v8 -= 8;
      }
      while (v8);
      result = (uint64_t)v11;
    }
    if (result)
    {
      v11 = 0;
      LODWORD(v12) = 0;
      return WTF::fastFree((WTF *)result, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSRopeString *IndexQuickly;
  JSC::JSRopeString *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSRopeString *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSRopeString *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDOMString>::convert((int)&v16, a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = (JSC::JSRopeString *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDOMString>::convert((int)&v16, a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDOMString>::convert(int a1, JSC::JSGlobalObject *a2, JSC::JSRopeString *this, uint64_t a4)
{
  JSC::VM *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v18 = this;
  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v6 & 1) != 0)
    {
      v6 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a2);
      if (!v6)
        goto LABEL_6;
    }
    else if (!v6)
    {
LABEL_6:
      v17 = v6;
      goto LABEL_7;
    }
    *(_DWORD *)v6 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v18, a2);
LABEL_7:
  if (!*((_DWORD *)v5 + 20))
  {
    v7 = v17;
LABEL_9:
    v16 = 0;
    v15 = 0;
    v18 = v7;
    v8 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(a4 + 8))
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(a4, (unint64_t)&v18);
      v12 = v18;
      v18 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v7;
      *(_DWORD *)(a4 + 12) = v8 + 1;
    }
    v9 = 0;
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v18, &v15);
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
  v7 = v17;
  if (!hasExceptionsAfterHandlingTraps)
    goto LABEL_9;
  v16 = 1;
  v17 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v13);
    else
      *(_DWORD *)v7 -= 2;
  }
  v9 = 1;
  return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v18, &v15);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore17GPUBindGroupEntryELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = *((unsigned int *)a2 + 3);
  result = *a2;
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    v6 = (_DWORD *)((char *)result + 40);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))off_1E327E028[v7])(&v8, v6 - 8);
      *v6 = -1;
      v6 += 12;
      v5 -= 48;
    }
    while (v5);
    result = *a2;
  }
  if (result)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SL_SP_EEEEEEDcST_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 0;
        v5 = (unsigned int *)*((_QWORD *)v2 + 1);
        *((_QWORD *)v2 + 1) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v2 + 1) = 0;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_BYTE *)(a2 + 24) = *((_BYTE *)a3 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS15_EEEDcSX_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E327E028[v5])(&v10, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E327E028[v5])(&v14, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = *((_QWORD *)v7 + 1);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 0;
        v11 = (unsigned int *)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v7 + 1) = 0;
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  __n128 result;
  uint64_t v12;
  char v13;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_1E327E028[v5])(&v13, v4);
LABEL_9:
    *(_DWORD *)(v4 + 32) = -1;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    result = *(__n128 *)(a3 + 1);
    *(_BYTE *)(v4 + 24) = *((_BYTE *)a3 + 24);
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 2;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = (unsigned int *)*a2;
  *a2 = v7;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  result = *(__n128 *)(a3 + 1);
  *((_BYTE *)a2 + 24) = *((_BYTE *)a3 + 24);
  *(__n128 *)(a2 + 1) = result;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_14GPUTextureViewENSC_ISH_EENSE_ISH_EEEENSA_16GPUBufferBindingENS9_INSA_18GPUExternalTextureENSC_ISM_EENSE_ISM_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISQ_LNS0_6_TraitE1EEEEEvOT_EUlRSW_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SL_SP_EEEOS14_EEEDcSW_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E327E028[v5])(&v14, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 32) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v10 = *((_QWORD *)v7 + 1);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 0;
        v11 = (unsigned int *)*((_QWORD *)v7 + 1);
        *((_QWORD *)v7 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v7 + 1) = 0;
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore10GPUSamplerENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_14GPUTextureViewENSD_ISI_EENSF_ISI_EEEENSB_16GPUBufferBindingENSA_INSB_18GPUExternalTextureENSD_ISN_EENSF_ISN_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSR_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E327E028[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore23GPUBindGroupLayoutEntryELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WebCore::jsGPUBufferPrototypeFunction_mapAsync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  WebCore::DOMGuardedObject *v28;
  unint64_t v29;
  WebCore::DOMGuardedObject *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::VM *v34;
  JSValue v35;
  objc_class *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194B36D78);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_51;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSGPUBuffer::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSGPUBuffer::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_51:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"GPUBuffer", "mapAsync", v17);
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    v34 = (JSC::VM *)*((_QWORD *)this + 7);
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v34, this, v35);
  }
  else
  {
    v24 = *(_QWORD *)(v18 + 24);
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v39);
    v25 = v39;
    if (!HIDWORD(v39))
    {
      v26 = *((int *)a2 + 8);
      if ((unint64_t)(v26 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {
        v38 = v24;
        v27 = 0;
        v28 = 0;
      }
      else if (*((_QWORD *)a2 + 7) == 10)
      {
        v38 = v24;
        v27 = 0;
        v28 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v39);
        if (v40)
          goto LABEL_43;
        v38 = v24;
        v28 = (WebCore::DOMGuardedObject *)v39;
        v26 = *((int *)a2 + 8);
        v27 = 1;
      }
      if ((unint64_t)(v26 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v30 = 0;
        v31 = 0;
      }
      else
      {
        v29 = *((_QWORD *)a2 + 8);
        if (v29 == 10)
        {
          v30 = 0;
          v31 = 0;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v29, (uint64_t)&v39);
          if (v40)
            goto LABEL_43;
          v30 = (WebCore::DOMGuardedObject *)v39;
          v31 = 1;
        }
      }
      v39 = (uint64_t)v14;
      WebCore::GPUBuffer::mapAsync(v38, v25, (uint64_t)v28, v27, (uint64_t)v30, v31, &v39);
      if (v39)
      {
        if (*(_DWORD *)(v39 + 16) == 1)
          (*(void (**)(void))(*(_QWORD *)v39 + 16))();
        else
          --*(_DWORD *)(v39 + 16);
      }
      v14 = 0;
LABEL_43:
      if (!v14)
        goto LABEL_46;
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_46:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v36 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)&v39);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(v39, v36, 0);
      v37 = (_DWORD *)v39;
      v39 = 0;
      if (v37)
      {
        if (v37[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 16))(v37);
        else
          --v37[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsGPUBufferPrototypeFunction_getMappedRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  int v14;
  char v15;
  WebCore::JSDOMGlobalObject *v16;
  WebCore::JSDOMGlobalObject *v17;
  char i;
  uint64_t v19;
  unint64_t v20;
  JSC::ArrayBuffer *v21;
  WebCore::JSDOMGlobalObject *v22;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  JSC::VM *v27;
  WebCore::JSDOMGlobalObject *v28;
  WTF::StringImpl *v29;
  int v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUBuffer", "getMappedRange");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSGPUBuffer::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSGPUBuffer::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "GPUBuffer", "getMappedRange");
  v13 = *(_QWORD *)(v6 + 24);
  v14 = *((_DWORD *)a2 + 8);
  if (v14 == 1)
  {
    v16 = 0;
    v15 = 0;
    v17 = 0;
    i = 0;
    goto LABEL_25;
  }
  if (*((_QWORD *)a2 + 6) == 10)
  {
    v15 = 0;
    v16 = 0;
  }
  else
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 6), (uint64_t)&v28);
    if ((_DWORD)v29)
      return 0;
    v16 = v28;
    v14 = *((_DWORD *)a2 + 8);
    v15 = 1;
  }
  if ((unint64_t)(v14 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_40;
  v20 = *((_QWORD *)a2 + 7);
  if (v20 == 10)
  {
    v17 = 0;
    i = 0;
    goto LABEL_25;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v20, (uint64_t)&v28);
  if ((_DWORD)v29)
    return 0;
  v17 = v28;
  for (i = 1; ; i = 0)
  {
LABEL_25:
    v6 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
    WebCore::GPUBuffer::getMappedRange(v13, (unint64_t)v16, v15, (unint64_t)v17, i, (uint64_t)&v28, a4);
    if (!v30)
    {
      v22 = v28;
      v28 = 0;
      v19 = WebCore::toJS(this, v6, v22, v21);
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v22);
      goto LABEL_27;
    }
    if (v30 == 1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_40:
    v17 = 0;
  }
  v24 = (WTF::StringImpl *)v28;
  v31[0] = (_BYTE)v28;
  v25 = v29;
  v29 = 0;
  v32 = v25;
  if (!*((_QWORD *)v5 + 2))
  {
    v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v28, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v5, this, v26);
    v25 = v32;
  }
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v19 = 0;
LABEL_27:
  if (v30 != -1)
    ((void (*)(_BYTE *, WebCore::JSDOMGlobalObject **))off_1E327E260[v30])(v31, &v28);
  return (_BYTE *)v19;
}

uint64_t WebCore::jsGPUBufferPrototypeFunction_unmap(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::GPUBuffer *v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *((_QWORD *)a2 + 5);
  v14 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "GPUBuffer", "unmap");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUBuffer::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUBuffer::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v14, "GPUBuffer", "unmap");
  v9 = *(WebCore::GPUBuffer **)(v3 + 24);
  v10 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v10)
  {
    WebCore::GPUBuffer::internalUnmap(v9, v10);
    v11 = *((_QWORD *)v9 + 11);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(v12 + 56, v9);
    }
  }
  return 10;
}

uint64_t WebCore::jsGPUBufferPrototypeFunction_destroy(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "GPUBuffer", "destroy");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUBuffer::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUBuffer::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "GPUBuffer", "destroy");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (v10)
  {
    *(_BYTE *)(v9 + 256) = 1;
    WebCore::GPUBuffer::internalUnmap((WebCore::GPUBuffer *)v9, v10);
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 40))(*(_QWORD *)(v9 + 16));
  }
  return 10;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16GPUTextureFormatELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_BYTE *WebCore::jsGPUCanvasContextPrototypeFunction_configure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  __int16 v17;
  JSC::VM *v18;
  const char **v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  __int16 v24;
  char **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  __int16 v29;
  WTF::StringImpl *v30;
  unsigned __int16 v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  WTF::StringImpl *v55;
  unsigned __int16 v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  JSC::VM *v66;
  int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF *v73;
  JSValue v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  JSValue v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF *v81;
  uint16x8_t v82;
  uint16x8_t v83;
  void *v84;
  WTF *v85;
  __int16 v87;
  __int16 v88;
  JSC::VM *v89;
  WTF::StringImpl *v90[2];
  WTF *v91;
  WTF::StringImpl *v92;
  __int16 v93;
  int v94;
  int v95[2];
  WTF::StringImpl *v96;
  char v97;
  WTF::StringImpl *v98[2];
  WTF *v99;
  WTF::StringImpl *v100;
  __int16 v101;
  JSC::VM *v102[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v89 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v89, "GPUCanvasContext", "configure");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCanvasContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCanvasContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v89, "GPUCanvasContext", "configure");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v75.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v75);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v102[0] = v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_58:
    WebCore::throwRequiredMemberTypeError((int)this, (int)v102, "device", 7, "GPUCanvasConfiguration", 23, "GPUDevice", 10);
LABEL_59:
    v94 = 1;
    goto LABEL_60;
  }
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0)
    goto LABEL_81;
  Object = JSC::JSCell::getObject(v12);
  if (!Object)
    goto LABEL_81;
  v14 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v16 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
  if (v90[0])
  {
    if (*(_DWORD *)v90[0] == 2)
      WTF::StringImpl::destroy(v90[0], v15);
    else
      *(_DWORD *)v90[0] -= 2;
  }
  if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
    goto LABEL_59;
  if (v16 == 10)
  {
    v17 = 0;
    goto LABEL_44;
  }
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  *(_QWORD *)v95 = v18;
  v90[0] = (WTF::StringImpl *)v16;
  if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v90, this);
    v19 = (const char **)v98[0];
    if (v98[0])
      goto LABEL_28;
    goto LABEL_139;
  }
  v19 = *(const char ***)(v16 + 8);
  if ((v19 & 1) == 0)
  {
    if (!v19)
      goto LABEL_27;
    goto LABEL_26;
  }
  v19 = *(const char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
  if (v19)
LABEL_26:
    *(_DWORD *)v19 += 2;
LABEL_27:
  v98[0] = (WTF::StringImpl *)v19;
  if (v19)
  {
LABEL_28:
    v20 = *((_DWORD *)v19 + 4);
    v21 = v19[1];
    v22 = *((_DWORD *)v19 + 1);
    if (v21 == "opaque" || v22 != 6)
    {
      if (v21 != "opaque" || v22 != 6)
      {
        if (v21 == "premultiplied" || v22 != 13)
        {
          if (v22 != 13 || v21 != "premultiplied")
            goto LABEL_34;
        }
        else if ((v20 & 4) != 0)
        {
          if (*v21 != 112
            || *(_QWORD *)(v21 + 1) != 0x7069746C756D6572
            || *(_QWORD *)(v21 + 5) != 0x6465696C7069746CLL)
          {
            goto LABEL_34;
          }
        }
        else
        {
          if (*(_WORD *)v21 != 112)
            goto LABEL_34;
          v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v21 + 2), (int16x8_t)xmmword_1968BFAA0);
          v82.i16[0] = vminvq_u16(v82);
          if (!v82.i32[0])
            goto LABEL_34;
          v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v21 + 10), (int16x8_t)xmmword_1968BFAB0);
          v83.i16[0] = vminvq_u16(v83);
          if (!v83.i32[0])
            goto LABEL_34;
        }
        v25 = &off_1E327B0F8;
        goto LABEL_38;
      }
    }
    else
    {
      if ((v20 & 4) != 0)
      {
        if (*v21 != 111 || *(_DWORD *)(v21 + 1) != 1970364784 || *(_DWORD *)(v21 + 2) != 1702195553)
          goto LABEL_34;
        goto LABEL_37;
      }
      if (*(_WORD *)v21 != 111)
      {
LABEL_34:
        v23 = 0;
        v24 = 0;
        goto LABEL_39;
      }
      v23 = 0;
      if (*(_QWORD *)(v21 + 2) != 0x75007100610070)
      {
        v24 = 0;
        goto LABEL_39;
      }
      v24 = 0;
      if (*(_QWORD *)(v21 + 4) != 0x65007500710061)
      {
LABEL_39:
        v98[0] = 0;
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v19, v15);
        else
          *(_DWORD *)v19 -= 2;
        goto LABEL_41;
      }
    }
LABEL_37:
    v25 = &WebCore::parseEnumerationFromString<WebCore::GPUCanvasAlphaMode>(WTF::String const&)::mappings;
LABEL_38:
    v24 = *((unsigned __int8 *)v25 + 16);
    v23 = 1;
    goto LABEL_39;
  }
LABEL_139:
  v24 = 0;
  v23 = 0;
LABEL_41:
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    goto LABEL_59;
  if (!v23)
    goto LABEL_81;
  v17 = v24 << 8;
LABEL_44:
  WTF::AtomStringImpl::addLiteral();
  v26 = v90[0];
  v28 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
    goto LABEL_59;
  if (v28 == 10)
  {
    v29 = 0;
  }
  else
  {
    v90[0] = *((WTF::StringImpl **)this + 7);
    v30 = v90[0];
    v31 = WebCore::parseEnumeration<WebCore::GPUPredefinedColorSpace>(this, v28);
    if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
      goto LABEL_59;
    if (v31 <= 0xFFu)
      goto LABEL_81;
    v29 = v31;
  }
  WTF::AtomStringImpl::addLiteral();
  v32 = v90[0];
  v34 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
    goto LABEL_59;
  if (v34 == 10)
    goto LABEL_58;
  v90[0] = *((WTF::StringImpl **)this + 7);
  if ((v34 & 0xFFFE000000000002) != 0)
    goto LABEL_81;
  v44 = *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C);
  v45 = *(_DWORD *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C) != 0;
  if ((_DWORD)v44)
  {
    v46 = 16 * v44;
    if ((char **)v46 != &WebCore::JSGPUDevice::s_info)
    {
      do
      {
        v46 = *(_QWORD *)(v46 + 16);
        v45 = v46 != 0;
      }
      while ((char **)v46 != &WebCore::JSGPUDevice::s_info && v46 != 0);
    }
  }
  if (!v45)
  {
LABEL_81:
    JSC::throwTypeError();
    goto LABEL_59;
  }
  v88 = v29;
  v48 = (unsigned int *)WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(*(_QWORD *)(v34 + 24) - 32);
  v49 = v48;
  if (v48)
  {
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 + 1, v48));
  }
  WTF::AtomStringImpl::addLiteral();
  v51 = v90[0];
  v53 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v52);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
    goto LABEL_90;
  if (v53 != 10)
  {
    v90[0] = *((WTF::StringImpl **)this + 7);
    v55 = v90[0];
    v56 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>(this, v53);
    if (*((_DWORD *)v55 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v55) & 1) != 0)
      goto LABEL_90;
    v87 = v17;
    if (v56 <= 0xFFu)
    {
      JSC::throwTypeError();
      goto LABEL_90;
    }
    WTF::AtomStringImpl::addLiteral();
    v57 = v90[0];
    v59 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v58);
      else
        *(_DWORD *)v57 -= 2;
    }
    if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
      goto LABEL_90;
    if (v59 == 10)
    {
      v60 = 16;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v59, v90);
      v60 = (int)v90[0];
      if ((unint64_t)v90[0] >> 32)
        goto LABEL_90;
    }
    WTF::AtomStringImpl::addLiteral();
    v61 = v90[0];
    v63 = JSC::JSObject::get(v14, this, (unint64_t)v90[0]);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
    if (*((_DWORD *)v102[0] + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v102[0]))
      goto LABEL_90;
    if (v63 == 10)
    {
      v64 = 0;
      LODWORD(v99) = 0;
      v65 = 0;
    }
    else
    {
      v66 = (JSC::VM *)*((_QWORD *)this + 7);
      *(_QWORD *)v95 = v66;
      if ((v63 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v63 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v69 = v90[0];
        v90[0] = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v68);
          else
            *(_DWORD *)v69 -= 2;
        }
        v67 = 1;
        LODWORD(v99) = 1;
        goto LABEL_127;
      }
      v90[0] = 0;
      v90[1] = 0;
      v98[0] = (WTF::StringImpl *)v90;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::GPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v63, (uint64_t *)v98);
      if (*((_DWORD *)v66 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v66))
      {
        v85 = v90[0];
        LODWORD(v99) = 1;
        if (v90[0])
        {
          v90[0] = 0;
          LODWORD(v90[1]) = 0;
          WTF::fastFree(v85, v84);
        }
        v67 = 1;
        goto LABEL_127;
      }
      v64 = v90[0];
      v65 = v90[1];
      LODWORD(v99) = 0;
    }
    v67 = 0;
    v98[0] = 0;
    v98[1] = 0;
    v90[0] = (WTF::StringImpl *)v49;
    LOBYTE(v90[1]) = v56;
    HIDWORD(v90[1]) = v60;
    v91 = v64;
    v92 = v65;
    v93 = v88 | v87;
    v49 = 0;
LABEL_127:
    v94 = v67;
    ((void (*)(int *, WTF::StringImpl **))off_1E327E5B8[v67])(v95, v98);
    goto LABEL_128;
  }
  WebCore::throwRequiredMemberTypeError((int)this, (int)v102, "format", 7, "GPUCanvasConfiguration", 23, "GPUTextureFormat", 17);
LABEL_90:
  v94 = 1;
LABEL_128:
  if (v49)
  {
    do
    {
      v70 = __ldaxr(v49);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v49));
    if (!v71)
    {
      atomic_store(1u, v49);
      v72 = v49[7];
      if ((_DWORD)v72)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v49 + 2), (WTF::StringImpl *)(*((_QWORD *)v49 + 2) + 32 * v72));
      v73 = (WTF *)*((_QWORD *)v49 + 2);
      if (v73)
      {
        *((_QWORD *)v49 + 2) = 0;
        v49[6] = 0;
        WTF::fastFree(v73, v54);
      }
      WTF::fastFree((WTF *)v49, v54);
    }
  }
LABEL_60:
  v35 = v94;
  if (!v94)
  {
    *(_OWORD *)v98 = *(_OWORD *)v90;
    v90[0] = 0;
    v99 = v91;
    v36 = v92;
    v91 = 0;
    v92 = 0;
    v100 = v36;
    v101 = v93;
    (*(void (**)(int *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 256))(v95, v11, v98);
    v38 = v99;
    if (v99)
    {
      v99 = 0;
      LODWORD(v100) = 0;
      WTF::fastFree(v38, v37);
    }
    v39 = v98[0];
    v98[0] = 0;
    if (v39)
    {
      do
      {
        v40 = __ldaxr((unsigned int *)v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, (unsigned int *)v39));
      if (!v41)
      {
        atomic_store(1u, (unsigned int *)v39);
        v80 = *((unsigned int *)v39 + 7);
        if ((_DWORD)v80)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v39 + 2), (WTF::StringImpl *)(*((_QWORD *)v39 + 2) + 32 * v80));
        v81 = (WTF *)*((_QWORD *)v39 + 2);
        if (v81)
        {
          *((_QWORD *)v39 + 2) = 0;
          *((_DWORD *)v39 + 6) = 0;
          WTF::fastFree(v81, v37);
        }
        WTF::fastFree(v39, v37);
      }
    }
    if (!v97)
    {
      v42 = 10;
LABEL_68:
      v35 = v94;
      goto LABEL_69;
    }
    v76 = (WTF::StringImpl *)LOBYTE(v95[0]);
    LOBYTE(v98[0]) = v95[0];
    v77 = v96;
    v96 = 0;
    v98[1] = v77;
    if (!*((_QWORD *)v4 + 2))
    {
      v78.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v95[0]), (JSC::JSGlobalObject *)&v98[1]);
      JSC::VM::throwException(v4, this, v78);
      v77 = v98[1];
    }
    v98[1] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
        WTF::StringImpl::destroy(v77, v76);
      else
        *(_DWORD *)v77 -= 2;
    }
    if (v97)
    {
      v79 = v96;
      v96 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 != 2)
        {
          v42 = 0;
          *(_DWORD *)v79 -= 2;
          goto LABEL_68;
        }
        WTF::StringImpl::destroy(v79, v76);
      }
    }
    v42 = 0;
    goto LABEL_68;
  }
  v42 = 0;
LABEL_69:
  if (v35 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E327E690[v35])(v98, v90);
  return (_BYTE *)v42;
}

uint64_t WebCore::jsGPUCanvasContextPrototypeFunction_unconfigure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUCanvasContext", "unconfigure");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUCanvasContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUCanvasContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUCanvasContext", "unconfigure");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 264))(*(_QWORD *)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsGPUCanvasContextPrototypeFunction_getCurrentTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF *v12;
  unint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  uint64_t v18;
  JSC::VM *v19;
  int v20[2];
  WTF::StringImpl *v21;
  int v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "GPUCanvasContext", "getCurrentTexture");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCanvasContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCanvasContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "GPUCanvasContext", "getCurrentTexture");
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  (*(void (**)(int *__return_ptr))(**(_QWORD **)(v4 + 24) + 272))(v20);
  if (!v22)
  {
    v12 = *(WTF **)v20;
    *(_QWORD *)v20 = 0;
    if (v12)
    {
      v13 = WebCore::wrap<WebCore::GPUTexture>((uint64_t)this, v11, v12);
      if (*((_DWORD *)v12 + 2) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v12 + 8))(v12);
      else
        --*((_DWORD *)v12 + 2);
    }
    else
    {
      v13 = 2;
    }
LABEL_17:
    if (v22 != -1)
      ((void (*)(_BYTE *, int *))off_1E327E6A0[v22])(v23, v20);
    return (_BYTE *)v13;
  }
  if (v22 == 1)
  {
    v15 = (WTF::StringImpl *)LOBYTE(v20[0]);
    v23[0] = v20[0];
    v16 = v21;
    v21 = 0;
    v24 = v16;
    if (!*((_QWORD *)v5 + 2))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v24);
      JSC::VM::throwException(v5, this, v17);
      v16 = v24;
    }
    v24 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v13 = 0;
    goto LABEL_17;
  }
  v18 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22GPUCanvasConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v18);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22GPUCanvasConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF *)a2[2];
  if (v3)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)result);
      v7 = *(unsigned int *)(result + 28);
      if ((_DWORD)v7)
      {
        v10 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v7));
        result = v10;
      }
      v8 = *(WTF **)(result + 16);
      if (v8)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v9 = result;
        WTF::fastFree(v8, a2);
        result = v9;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore10GPUTextureENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_beginRenderPass(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::GPUCommandEncoder *v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  WTF *v15;
  __int128 v16;
  WTF *v17;
  void *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v32;
  JSValue v34;
  WTF::StringImpl *v35;
  JSValue v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  JSC::VM *v40;
  WTF::StringImpl *v41[2];
  uint64_t v42;
  WTF *v43;
  _OWORD v44[2];
  char v45;
  WTF *v46[2];
  uint64_t v47;
  __int128 v48;
  int v49[2];
  WTF::StringImpl *v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  WTF *v54;
  _OWORD v55[2];
  char v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  _BYTE v61[8];
  WTF::StringImpl *v62;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "GPUCommandEncoder", "beginRenderPass");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCommandEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "GPUCommandEncoder", "beginRenderPass");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v34);
  }
  v11 = *(WebCore::GPUCommandEncoder **)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPURenderPassDescriptor>(*((JSC::JSCell **)a2 + 6), (WTF::StringImpl **)this, (uint64_t)&v52);
  v12 = v60;
  if (v60)
  {
    v19 = 0;
LABEL_38:
    if (v12 != -1)
      ((void (*)(WTF::StringImpl **, __int128 *))off_1E327EB08[v12])(v41, &v52);
    return (_BYTE *)v19;
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v14 = v52;
  v52 = 0uLL;
  *(_OWORD *)v41 = v14;
  *(_QWORD *)&v14 = v53;
  v53 = 0;
  v42 = v14;
  LOBYTE(v43) = 0;
  v45 = 0;
  if (v56)
  {
    v15 = v54;
    v54 = 0;
    v43 = v15;
    v44[0] = v55[0];
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v55 + 9);
    v45 = 1;
  }
  v16 = v57;
  v57 = 0uLL;
  *(_OWORD *)v46 = v16;
  v47 = v58;
  v48 = v59;
  WebCore::GPUCommandEncoder::beginRenderPass(v11, (const WebCore::GPURenderPassDescriptor *)v41, (uint64_t)v49);
  if (!v51)
  {
    v17 = *(WTF **)v49;
    *(_QWORD *)v49 = 0;
    v19 = WebCore::wrap<WebCore::GPURenderPassEncoder>((uint64_t)this, v13, v17);
    if (*(_DWORD *)v17 == 1)
    {
      v32 = (_DWORD *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v32)
      {
        if (v32[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        else
          --v32[2];
      }
      WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v17;
    }
LABEL_19:
    if (v51 != -1)
      ((void (*)(_BYTE *, int *))off_1E327EAE8[v51])(v61, v49);
    v51 = -1;
    v20 = (unsigned int *)v46[1];
    v46[1] = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v18);
      }
    }
    v23 = (unsigned int *)v46[0];
    v46[0] = 0;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v18);
      }
    }
    if (v45)
    {
      v26 = (unsigned int *)v43;
      v43 = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v18);
        }
      }
    }
    WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t *)&v41[1], v18);
    v30 = v41[0];
    v41[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
    v12 = v60;
    goto LABEL_38;
  }
  if (v51 == 1)
  {
    v18 = (void *)LOBYTE(v49[0]);
    v61[0] = v49[0];
    v35 = v50;
    v50 = 0;
    v62 = v35;
    if (!*((_QWORD *)v4 + 2))
    {
      v36.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v49[0]), (JSC::JSGlobalObject *)&v62);
      JSC::VM::throwException(v4, this, v36);
      v35 = v62;
    }
    v62 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v35 -= 2;
    }
    v19 = 0;
    goto LABEL_19;
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUCommandEncoderPrototypeFunction_beginComputePass(v37, v38, v39);
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_beginComputePass(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t Object;
  JSC::Structure *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSC::JSCell *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF *v33;
  int v34;
  uint64_t v35;
  unint64_t SlowCase;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v48;
  JSC::Structure *v49;
  JSC::JSCell *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  void *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *Allocator;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  int v76;
  _DWORD *v78;
  WTF::StringImpl *v79;
  JSValue v80;
  unint64_t v81;
  WebCore *v82;
  JSC::JSGlobalObject *v83;
  JSC::CallFrame *v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF *v87;
  uint64_t v88;
  char v89;
  WTF *v90;
  WTF::StringImpl *v91;
  int v92;
  _QWORD v93[3];
  int v94;
  WTF *v95;
  WTF::StringImpl *v96;
  _QWORD *v97;

  v4 = *((_QWORD *)this + 7);
  v85 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v85, "GPUCommandEncoder", "beginComputePass");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCommandEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v85, "GPUCommandEncoder", "beginComputePass");
  v11 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = -1;
    goto LABEL_34;
  }
  v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
  v90 = (WTF *)v4;
  if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
LABEL_31:
    v14 = 0;
    v15 = -1;
    goto LABEL_34;
  }
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
  {
    JSC::throwTypeError();
LABEL_111:
    v94 = 1;
LABEL_112:
    SlowCase = 0;
    v76 = 1;
LABEL_98:
    ((void (*)(WTF::StringImpl **, _QWORD *))off_1E327EB28[v76])(&v86, v93);
    return (_BYTE *)SlowCase;
  }
  v17 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v19 = JSC::JSObject::get(v17, this, (unint64_t)v86);
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v18);
    else
      *(_DWORD *)v86 -= 2;
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    goto LABEL_111;
  if (v19 == 10)
  {
    v13 = 0;
  }
  else
  {
    WebCore::valueToUSVString(this, v19, (uint64_t)&v86);
    if ((_DWORD)v87)
    {
      v94 = 1;
      if ((_DWORD)v87 != -1)
        ((void (*)(WTF **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v87])(&v95, &v86);
      goto LABEL_112;
    }
    v13 = v86;
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v86;
  v22 = (JSC::JSCell *)JSC::JSObject::get(v17, this, (unint64_t)v86);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
  {
    v94 = 1;
LABEL_131:
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v23);
      else
        *(_DWORD *)v13 -= 2;
    }
    goto LABEL_112;
  }
  if (v22 == (JSC::JSCell *)10)
    goto LABEL_31;
  WebCore::convertDictionary<WebCore::GPUComputePassTimestampWrites>(v22, (JSC::VM **)this, (uint64_t)&v86);
  if ((_DWORD)v88)
  {
    v94 = 1;
    if ((_DWORD)v88 != -1)
      ((void (*)(WTF **, WTF::StringImpl **))off_1E327ED40[v88])(&v95, &v86);
    goto LABEL_131;
  }
  v14 = v86;
  v15 = (uint64_t)v87;
LABEL_34:
  v93[2] = v15;
  v94 = 0;
  v24 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v93[0] = 0;
  v93[1] = 0;
  v86 = v13;
  v87 = v14;
  v88 = v15;
  v89 = 1;
  WebCore::GPUCommandEncoder::beginComputePass(v11, (uint64_t)&v86, (uint64_t)&v90);
  if (!v92)
  {
    v26 = v90;
    v90 = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 3320) + 32);
    if (v27)
    {
      v28 = *(_DWORD *)(v27 - 8);
      v29 = ((unint64_t)v26 + ~((_QWORD)v26 << 32)) ^ (((unint64_t)v26 + ~((_QWORD)v26 << 32)) >> 22);
      v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
      v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
      v32 = v28 & ((v31 >> 31) ^ v31);
      v33 = *(WTF **)(v27 + 16 * v32);
      if (v33 == v26)
      {
LABEL_40:
        v35 = *(_QWORD *)(v27 + 16 * v32 + 8);
        if (v35)
        {
          if ((*(_BYTE *)(v35 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v35;
            if (*(_QWORD *)v35)
            {
LABEL_85:
              if (*(_DWORD *)v26 == 1)
              {
                v78 = (_DWORD *)*((_QWORD *)v26 + 1);
                *((_QWORD *)v26 + 1) = 0;
                if (v78)
                {
                  if (v78[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
                  else
                    --v78[2];
                }
                WTF::fastFree(v26, (void *)v25);
              }
              else
              {
                --*(_DWORD *)v26;
              }
              goto LABEL_87;
            }
          }
        }
      }
      else
      {
        v34 = 1;
        while (v33)
        {
          v32 = ((_DWORD)v32 + v34) & v28;
          v33 = *(WTF **)(v27 + 16 * v32);
          ++v34;
          if (v33 == v26)
            goto LABEL_40;
        }
      }
    }
    ++*(_DWORD *)v26;
    v37 = *(_QWORD *)(v24 + 3296);
    if (v37)
    {
      v38 = *(_DWORD *)(v37 - 8);
      v39 = ((unint64_t)&WebCore::JSGPUComputePassEncoder::s_info
           + ~((_QWORD)&WebCore::JSGPUComputePassEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUComputePassEncoder::s_info
                                                                           + ~((_QWORD)&WebCore::JSGPUComputePassEncoder::s_info << 32)) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(char ***)(v37 + 16 * v42);
      if (v43 == &WebCore::JSGPUComputePassEncoder::s_info)
      {
LABEL_48:
        v45 = *(_QWORD *)(v37 + 16 * v42 + 8);
        if (v45)
          goto LABEL_50;
      }
      else
      {
        v44 = 1;
        while (v43)
        {
          v42 = ((_DWORD)v42 + v44) & v38;
          v43 = *(char ***)(v37 + 16 * v42);
          ++v44;
          if (v43 == &WebCore::JSGPUComputePassEncoder::s_info)
            goto LABEL_48;
        }
      }
    }
    v46 = *(uint64_t **)(v24 + 56);
    Structure = WebCore::JSGPUComputePassEncoderPrototype::createStructure(v46, v24, *(JSC::JSCell **)(v24 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v50 = (JSC::JSCell *)WebCore::JSGPUComputePassEncoderPrototype::create((WebCore::JSGPUComputePassEncoderPrototype *)v46, Structure, v48, v49);
    v51 = WebCore::JSGPUComputePassEncoder::createStructure(v46, v24, v50);
    v45 = WebCore::cacheDOMStructure((JSCell *)v24, v51, (uint64_t)&WebCore::JSGPUComputePassEncoder::s_info);
LABEL_50:
    v52 = *(_QWORD *)(v24 + 56);
    v53 = *(_QWORD *)(v52 + 41456);
    v54 = *(_QWORD *)(v53 + 23536);
    v55 = *(_QWORD **)(v54 + 160);
    if (v55)
      goto LABEL_70;
    v56 = *(_QWORD *)(v53 + 22648);
    if (__ldaxr((unsigned __int8 *)v56))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v56))
    {
      goto LABEL_55;
    }
    MEMORY[0x19AEA534C](v56);
LABEL_55:
    v58 = *(_QWORD *)(v56 + 2824);
    if (!*(_QWORD *)(v58 + 160))
    {
      v59 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v95, "IsoSpace T");
      v97 = 0;
      MEMORY[0x19AEA3204](v59, &v95, v52 + 192, v52 + 1872, 32, 8, &v97);
      v61 = (uint64_t)v97;
      v97 = 0;
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      v62 = v95;
      v95 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 1)
          WTF::fastFree(v62, v60);
        else
          --*(_DWORD *)v62;
      }
      v63 = *(_QWORD *)(v58 + 160);
      *(_QWORD *)(v58 + 160) = v59;
      if (v63)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
    }
    v55 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v64 = *(_QWORD *)(v54 + 160);
    *(_QWORD *)(v54 + 160) = v55;
    if (v64)
    {
      v65 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v65, v66);
    }
    v67 = __ldxr((unsigned __int8 *)v56);
    if (v67 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v56))
      {
LABEL_70:
        SlowCase = v55[3];
        if (SlowCase >= v55[4])
        {
          SlowCase = v55[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_72;
          }
          v81 = *(_QWORD *)(SlowCase + 8) ^ v55[6];
          v55[4] = SlowCase + HIDWORD(v81);
          v55[5] = SlowCase + (int)v81;
        }
        v55[3] = SlowCase + 32;
LABEL_72:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v45);
        *(_QWORD *)(SlowCase + 24) = v26;
        if (*(_BYTE *)(v52 + 755))
          __dmb(0xAu);
        v68 = *(_QWORD *)(v24 + 3320);
        if ((byte_1EE3356C0 & 1) == 0)
        {
          qword_1EE3356B8 = (uint64_t)&off_1E327CA70;
          byte_1EE3356C0 = 1;
        }
        v95 = v26;
        if ((SlowCase & 8) != 0)
          v69 = (SlowCase - 112) | 1;
        else
          v69 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v69 & 1) != 0)
          v70 = v69 + 47;
        else
          v70 = *(_QWORD *)v69 + 32;
        Allocator = *(_QWORD **)(v70 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v70 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE3356B8;
        Allocator[2] = v68;
        v97 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v68 + 32), (uint64_t *)&v95, (uint64_t *)&v97);
        if (v97)
          v97[1] = 3;
        goto LABEL_85;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v56);
    goto LABEL_70;
  }
  if (v92 == 1)
  {
    v25 = v90;
    LOBYTE(v95) = (_BYTE)v90;
    v79 = v91;
    v91 = 0;
    v96 = v79;
    if (!*(_QWORD *)(v4 + 16))
    {
      v80.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v90, (JSC::JSGlobalObject *)&v96);
      JSC::VM::throwException((JSC::VM *)v4, this, v80);
      v79 = v96;
    }
    v96 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v25);
      else
        *(_DWORD *)v79 -= 2;
    }
    SlowCase = 0;
LABEL_87:
    if (v92 != -1)
      ((void (*)(WTF **, WTF **))off_1E327EB18[v92])(&v95, &v90);
    v92 = -1;
    if (v89)
    {
      v72 = (unsigned int *)v87;
      v87 = 0;
      if (v72)
      {
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (!v74)
        {
          atomic_store(1u, v72);
          WTF::fastFree((WTF *)v72, (void *)v25);
        }
      }
      v75 = v86;
      v86 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v25);
        else
          *(_DWORD *)v75 -= 2;
      }
    }
    v76 = v94;
    if (v94 == -1)
      return (_BYTE *)SlowCase;
    goto LABEL_98;
  }
  v82 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUCommandEncoderPrototypeFunction_copyBufferToBuffer(v82, v83, v84);
}

uint64_t WebCore::jsGPUCommandEncoderPrototypeFunction_copyBufferToBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  uint64_t v33;
  JSValue v34;
  WebCore *v35;
  JSC::JSGlobalObject *v36;
  JSC::CallFrame *v37;
  JSC::VM *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  JSC::VM *v43;
  int v44;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "GPUCommandEncoder", "copyBufferToBuffer");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSGPUCommandEncoder::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "GPUCommandEncoder", "copyBufferToBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v34);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v43 = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSGPUBuffer::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSGPUBuffer::s_info && v21 != 0);
    }
    if (v20 && (v25 = *(_QWORD *)(v18 + 24)) != 0)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v43);
      if (v44)
      {
        return 0;
      }
      else
      {
        v27 = *((_QWORD *)a2 + 8);
        v41 = *((_QWORD *)this + 7);
        if ((v27 & 0xFFFE000000000002) != 0)
          goto LABEL_38;
        v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
        v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
        v30 = (char **)(16 * v28);
        if ((_DWORD)v28)
          v31 = v30 == &WebCore::JSGPUBuffer::s_info;
        else
          v31 = 1;
        if (!v31)
        {
          do
          {
            v30 = (char **)v30[2];
            v29 = v30 != 0;
          }
          while (v30 != &WebCore::JSGPUBuffer::s_info && v30 != 0);
        }
        if (v29 && (v33 = *(_QWORD *)(v27 + 24)) != 0)
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 9), (uint64_t)&v41);
          if (v42)
          {
            return 0;
          }
          else
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 10), (uint64_t)&v39);
            if (v40)
            {
              return 0;
            }
            else if (v44 || v42)
            {
              v35 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
              return WebCore::jsGPUCommandEncoderPrototypeFunction_copyBufferToTexture(v35, v36, v37);
            }
            else
            {
              (*(void (**)(_QWORD, _QWORD, JSC::VM *, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 8) + 32))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v25 + 16), v43, *(_QWORD *)(v33 + 16), v41, v39);
              return 10;
            }
          }
        }
        else
        {
LABEL_38:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v41, 2, "destination", 12, "GPUCommandEncoder", 18, v26, "copyBufferToBuffer", 19, "GPUBuffer", 10);
          return 0;
        }
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v43, 0, "source", 7, "GPUCommandEncoder", 18, a8, "copyBufferToBuffer", 19, "GPUBuffer", 10);
      return 0;
    }
  }
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_copyBufferToTexture(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::JSGlobalObject *v3;
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  JSC::JSObject *v14;
  int v15;
  int v16;
  unsigned int *v17;
  WTF *v18;
  int v19;
  int v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  JSValue v31;
  JSC::VM *v32;
  WTF *v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  _BYTE v44[16];
  int v45;
  WTF *v46;
  int v47;
  _BYTE v48[16];
  int v49;
  char v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  unsigned int *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v3 = (JSC::JSGlobalObject *)this;
  v60 = *MEMORY[0x1E0C80C00];
  v4 = this[7];
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "copyBufferToTexture");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUCommandEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "copyBufferToTexture");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, v3, v31);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUImageCopyBuffer>(*((JSC::JSCell **)a2 + 6), this, (uint64_t)&v40);
  v13 = v43;
  if (!v43)
  {
    WebCore::convertDictionary<WebCore::GPUImageCopyTexture>(*((JSC::JSCell **)a2 + 7), (JSC::VM **)v3, (uint64_t)&v33);
    v15 = v39;
    if (v39)
    {
      v28 = 0;
LABEL_44:
      if (v15 != -1)
        ((void (*)(WTF **, WTF **))off_1E327EB98[v15])(&v46, &v33);
      v13 = v43;
      goto LABEL_47;
    }
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(*((_QWORD *)a2 + 8), v3, v14, (uint64_t)v56);
    v16 = v59;
    if (v59)
    {
      v28 = 0;
LABEL_41:
      if (v16 != -1)
        ((void (*)(WTF **, _BYTE *))off_1E327EB88[v16])(&v46, v57);
      v15 = v39;
      goto LABEL_44;
    }
    if (!v43)
    {
      v52 = v40;
      v17 = v42;
      v42 = 0;
      v53 = v41;
      v54 = v17;
      if (!v39)
      {
        v18 = v33;
        v33 = 0;
        v46 = v18;
        v47 = v34;
        v3 = (JSC::JSGlobalObject *)v48;
        v48[0] = 0;
        v50 = 0;
        if (!v37)
        {
LABEL_23:
          v51 = v38;
          goto LABEL_24;
        }
        v49 = -1;
        v19 = v36;
        if (v36 == -1)
        {
LABEL_22:
          v50 = 1;
          goto LABEL_23;
        }
        ((void (*)(_BYTE *, _BYTE *, uint64_t *))off_1E327EB78[v36])(v44, v48, &v35);
        v49 = v19;
        v50 = 1;
        v51 = v38;
        if (!v59)
        {
LABEL_24:
          v44[0] = 0;
          v45 = -1;
          v20 = v58;
          if (v58 != -1)
          {
            ((void (*)(char *, _BYTE *, _BYTE *))off_1E327EB48[v58])(&v55, v44, v57);
            v45 = v20;
          }
          WebCore::GPUCommandEncoder::copyBufferToTexture(v12, (uint64_t *)&v52, (WebCore::GPUImageCopyTexture *)&v46, (uint64_t)v44);
          if (v45 != -1)
            ((void (*)(char *, _BYTE *))off_1E327EB38[v45])(&v55, v44);
          if (v50)
          {
            if (v49 != -1)
              ((void (*)(_BYTE *, JSC::JSGlobalObject *))off_1E327EB68[v49])(v44, v3);
            v49 = -1;
          }
          v22 = (unsigned int *)v46;
          v46 = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, v21);
            }
          }
          v25 = v54;
          v54 = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v21);
            }
          }
          v16 = v59;
          v28 = 10;
          goto LABEL_41;
        }
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  v28 = 0;
LABEL_47:
  if (v13 != -1)
    ((void (*)(WTF **, __int128 *))off_1E327EBA8[v13])(&v33, &v40);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_copyTextureToBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  JSC::JSObject *v14;
  int v15;
  int v16;
  unsigned int *v17;
  int v18;
  WTF *v19;
  int v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  JSValue v31;
  JSC::VM *v32;
  __int128 v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  unsigned int *v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  char v42;
  int v43;
  _BYTE v44[16];
  int v45;
  __int128 v46;
  uint64_t v47;
  WTF *v48;
  unsigned int *v49;
  int v50;
  _BYTE v51[16];
  int v52;
  char v53;
  char v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "copyTextureToBuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUCommandEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "copyTextureToBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v31);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUImageCopyTexture>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v37);
  v13 = v43;
  if (v43)
  {
    v28 = 0;
  }
  else
  {
    WebCore::convertDictionary<WebCore::GPUImageCopyBuffer>(*((JSC::JSCell **)a2 + 7), (JSC::VM **)this, (uint64_t)&v33);
    v15 = v36;
    if (v36)
    {
      v28 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(*((_QWORD *)a2 + 8), this, v14, (uint64_t)v56);
      v16 = v59;
      if (v59)
      {
        v28 = 0;
      }
      else
      {
        if (v43)
          goto LABEL_55;
        v17 = v37;
        v37 = 0;
        v49 = v17;
        v50 = v38;
        v51[0] = 0;
        v53 = 0;
        if (v41)
        {
          v52 = -1;
          v18 = v40;
          if (v40 != -1)
          {
            ((void (*)(__int128 *, _BYTE *, uint64_t *))off_1E327EB78[v40])(&v46, v51, &v39);
            v52 = v18;
          }
          v53 = 1;
        }
        v54 = v42;
        if (v36 || (v46 = v33, v19 = v35, v35 = 0, v47 = v34, v48 = v19, v59))
LABEL_55:
          std::__throw_bad_variant_access[abi:sn180100]();
        v44[0] = 0;
        v45 = -1;
        v20 = v58;
        if (v58 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E327EB48[v58])(&v55, v44, v57);
          v45 = v20;
        }
        WebCore::GPUCommandEncoder::copyTextureToBuffer(v12, (WebCore::GPUImageCopyTexture *)&v49, (uint64_t *)&v46, (uint64_t)v44);
        if (v45 != -1)
          ((void (*)(char *, _BYTE *))off_1E327EB38[v45])(&v55, v44);
        v22 = (unsigned int *)v48;
        v48 = 0;
        if (v22)
        {
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v21);
          }
        }
        if (v53)
        {
          if (v52 != -1)
            ((void (*)(__int128 *, _BYTE *))off_1E327EB68[v52])(&v46, v51);
          v52 = -1;
        }
        v25 = v49;
        v49 = 0;
        if (v25)
        {
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v21);
          }
        }
        v16 = v59;
        v28 = 10;
      }
      if (v16 != -1)
        ((void (*)(unsigned int **, _BYTE *))off_1E327EB88[v16])(&v49, v57);
      v15 = v36;
    }
    if (v15 != -1)
      ((void (*)(unsigned int **, __int128 *))off_1E327EBA8[v15])(&v49, &v33);
    v13 = v43;
  }
  if (v13 != -1)
    ((void (*)(unsigned int **, unsigned int **))off_1E327EB98[v13])(&v49, &v37);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_copyTextureToTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  JSC::JSObject *v14;
  int v15;
  int v16;
  unsigned int *v17;
  int v18;
  WTF *v19;
  int v20;
  int v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  JSValue v32;
  JSC::VM *v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  int v40;
  unsigned int *v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  int v47;
  _BYTE v48[16];
  int v49;
  WTF *v50;
  int v51;
  _BYTE v52[16];
  int v53;
  char v54;
  char v55;
  unsigned int *v56;
  int v57;
  _BYTE v58[16];
  int v59;
  char v60;
  char v61;
  char v62;
  char v63[8];
  _BYTE v64[16];
  int v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "GPUCommandEncoder", "copyTextureToTexture");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUCommandEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "GPUCommandEncoder", "copyTextureToTexture");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::GPUImageCopyTexture>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v41);
  v13 = v47;
  if (v47)
  {
    v29 = 0;
  }
  else
  {
    WebCore::convertDictionary<WebCore::GPUImageCopyTexture>(*((JSC::JSCell **)a2 + 7), (JSC::VM **)this, (uint64_t)&v34);
    v15 = v40;
    if (v40)
    {
      v29 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert(*((_QWORD *)a2 + 8), this, v14, (uint64_t)v63);
      v16 = v66;
      if (v66)
      {
        v29 = 0;
      }
      else
      {
        if (v47)
          goto LABEL_63;
        v17 = v41;
        v41 = 0;
        v56 = v17;
        v57 = v42;
        v58[0] = 0;
        v60 = 0;
        if (v45)
        {
          v59 = -1;
          v18 = v44;
          if (v44 != -1)
          {
            ((void (*)(WTF **, _BYTE *, uint64_t *))off_1E327EB78[v44])(&v50, v58, &v43);
            v59 = v18;
          }
          v60 = 1;
        }
        v61 = v46;
        if (v40)
          goto LABEL_63;
        v19 = v34;
        v34 = 0;
        v50 = v19;
        v51 = v35;
        v52[0] = 0;
        v54 = 0;
        if (v38)
        {
          v53 = -1;
          v20 = v37;
          if (v37 != -1)
          {
            ((void (*)(_BYTE *, _BYTE *, uint64_t *))off_1E327EB78[v37])(v48, v52, &v36);
            v53 = v20;
          }
          v54 = 1;
        }
        v55 = v39;
        if (v66)
LABEL_63:
          std::__throw_bad_variant_access[abi:sn180100]();
        v48[0] = 0;
        v49 = -1;
        v21 = v65;
        if (v65 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E327EB48[v65])(&v62, v48, v64);
          v49 = v21;
        }
        WebCore::GPUCommandEncoder::copyTextureToTexture(v12, (WebCore::GPUImageCopyTexture *)&v56, (unsigned int *)&v50, (uint64_t)v48);
        if (v49 != -1)
          ((void (*)(char *, _BYTE *))off_1E327EB38[v49])(&v62, v48);
        if (v54)
        {
          if (v53 != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E327EB68[v53])(v48, v52);
          v53 = -1;
        }
        v23 = (unsigned int *)v50;
        v50 = 0;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v22);
          }
        }
        if (v60)
        {
          if (v59 != -1)
            ((void (*)(WTF **, _BYTE *))off_1E327EB68[v59])(&v50, v58);
          v59 = -1;
        }
        v26 = v56;
        v56 = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v22);
          }
        }
        v16 = v66;
        v29 = 10;
      }
      if (v16 != -1)
        ((void (*)(unsigned int **, _BYTE *))off_1E327EB88[v16])(&v56, v64);
      v15 = v40;
    }
    if (v15 != -1)
      ((void (*)(unsigned int **, WTF **))off_1E327EB98[v15])(&v56, &v34);
    v13 = v47;
  }
  if (v13 != -1)
    ((void (*)(WTF **, unsigned int **))off_1E327EB98[v13])(&v34, &v41);
  return (_BYTE *)v29;
}

uint64_t WebCore::jsGPUCommandEncoderPrototypeFunction_clearBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v26;
  JSC::VM *v27;
  unint64_t v28;
  JSC::VM *v29;
  uint64_t v30;
  JSValue v31;
  JSC::VM *v32;
  JSC::VM *v33;
  int v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "clearBuffer");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSGPUCommandEncoder::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "GPUCommandEncoder", "clearBuffer");
  v17 = *((int *)a2 + 8);
  if ((_DWORD)v17 == 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v31);
  }
  else
  {
    v18 = *(_QWORD *)(v10 + 24);
    v19 = *((_QWORD *)a2 + 6);
    v33 = v9;
    if ((v19 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSGPUBuffer::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSGPUBuffer::s_info && v22 != 0);
    }
    if (!v21 || (v26 = *(_QWORD *)(v19 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "buffer", 7, "GPUCommandEncoder", 18, a8, "clearBuffer", 12, "GPUBuffer", 10);
      return 0;
    }
    if ((unint64_t)(v17 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = 0;
    }
    else if (*((_QWORD *)a2 + 7) == 10)
    {
      v27 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v33);
      if (v34)
        return 0;
      v27 = v33;
      v17 = *((int *)a2 + 8);
    }
    if ((unint64_t)(v17 - 4) > 0xFFFFFFFFFFFFFFFCLL)
    {
      v29 = 0;
      v30 = 0;
    }
    else
    {
      v28 = *((_QWORD *)a2 + 8);
      if (v28 == 10)
      {
        v29 = 0;
        v30 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v28, (uint64_t)&v33);
        if (v34)
          return 0;
        v29 = v33;
        v30 = 1;
      }
    }
    (*(void (**)(_QWORD, _QWORD, JSC::VM *, JSC::VM *, uint64_t))(**(_QWORD **)(v18 + 8) + 64))(*(_QWORD *)(v18 + 8), *(_QWORD *)(v26 + 16), v27, v29, v30);
    return 10;
  }
}

uint64_t WebCore::jsGPUCommandEncoderPrototypeFunction_resolveQuerySet(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  char **v32;
  BOOL v33;
  uint64_t v35;
  JSValue v36;
  JSC::VM *v37;
  JSC::VM *v38;
  int v39;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v37 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v37, "GPUCommandEncoder", "resolveQuerySet");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSGPUCommandEncoder::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v37, "GPUCommandEncoder", "resolveQuerySet");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v36);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v38 = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSGPUQuerySet::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSGPUQuerySet::s_info && v21 != 0);
    }
    if (v20 && (v25 = *(_QWORD *)(v18 + 24)) != 0)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), &v38);
      v26 = v38;
      if ((unint64_t)v38 >> 32)
      {
        return 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), &v38);
        v28 = v38;
        if ((unint64_t)v38 >> 32)
        {
          return 0;
        }
        else
        {
          v29 = *((_QWORD *)a2 + 9);
          v38 = (JSC::VM *)*((_QWORD *)this + 7);
          if ((v29 & 0xFFFE000000000002) != 0)
            goto LABEL_39;
          v30 = *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C);
          v31 = *(_DWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C) != 0;
          v32 = (char **)(16 * v30);
          if ((_DWORD)v30)
            v33 = v32 == &WebCore::JSGPUBuffer::s_info;
          else
            v33 = 1;
          if (!v33)
          {
            do
            {
              v32 = (char **)v32[2];
              v31 = v32 != 0;
            }
            while (v32 != &WebCore::JSGPUBuffer::s_info && v32 != 0);
          }
          if (v31 && (v35 = *(_QWORD *)(v29 + 24)) != 0)
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 10), (uint64_t)&v38);
            if (v39)
            {
              return 0;
            }
            else
            {
              (*(void (**)(_QWORD, _QWORD, JSC::VM *, JSC::VM *, _QWORD, JSC::VM *))(**(_QWORD **)(v17 + 8)
                                                                                              + 104))(*(_QWORD *)(v17 + 8), *(_QWORD *)(v25 + 16), v26, v28, *(_QWORD *)(v35 + 16), v38);
              return 10;
            }
          }
          else
          {
LABEL_39:
            WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v38, 3, "destination", 12, "GPUCommandEncoder", 18, v27, "resolveQuerySet", 16, "GPUBuffer", 10);
            return 0;
          }
        }
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v38, 0, "querySet", 9, "GPUCommandEncoder", 18, a8, "resolveQuerySet", 16, "GPUQuerySet", 12);
      return 0;
    }
  }
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_finish(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::JSCell *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  unint64_t SlowCase;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char **v37;
  int v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v42;
  JSC::Structure *v43;
  JSC::JSCell *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  void *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *Allocator;
  uint64_t v66;
  _DWORD *v68;
  WTF::StringImpl *v69;
  JSValue v70;
  unint64_t v71;
  WebCore *v72;
  JSC::JSGlobalObject *v73;
  JSC::CallFrame *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char v77;
  WTF *v78;
  WTF::StringImpl *v79;
  int v80;
  uint64_t v81;
  int v82;
  WTF *v83;
  WTF::StringImpl *v84;
  _QWORD *v85;

  v4 = *((_QWORD *)this + 7);
  v75 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v75, "GPUCommandEncoder", "finish");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCommandEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v75, "GPUCommandEncoder", "finish");
  v11 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17 = 0;
  }
  else
  {
    v12 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
    v83 = (WTF *)v4;
    if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_21;
    if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v12)) == 0)
    {
      JSC::throwTypeError();
LABEL_97:
      v82 = 1;
LABEL_98:
      SlowCase = 0;
      v66 = 1;
LABEL_85:
      ((void (*)(WTF **, uint64_t *))off_1E327EBC8[v66])(&v78, &v81);
      return (_BYTE *)SlowCase;
    }
    v14 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v16 = JSC::JSObject::get(v14, this, (unint64_t)v78);
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v15);
      else
        *(_DWORD *)v78 -= 2;
    }
    if (*(_DWORD *)(v4 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
      goto LABEL_97;
    if (v16 == 10)
    {
LABEL_21:
      v17 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, v16, (uint64_t)&v78);
      if ((_DWORD)v79)
      {
        v82 = 1;
        if ((_DWORD)v79 != -1)
          ((void (*)(WTF::StringImpl **, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v79])(&v76, &v78);
        goto LABEL_98;
      }
      v17 = v78;
    }
  }
  v82 = 0;
  v18 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v81 = 0;
  v76 = v17;
  v77 = 1;
  WebCore::GPUCommandEncoder::finish(v11, (uint64_t)&v76, (uint64_t)&v78);
  if (!v80)
  {
    v20 = v78;
    v78 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 3320) + 32);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 - 8);
      v23 = ((unint64_t)v20 + ~((_QWORD)v20 << 32)) ^ (((unint64_t)v20 + ~((_QWORD)v20 << 32)) >> 22);
      v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      v26 = v22 & ((v25 >> 31) ^ v25);
      v27 = *(WTF **)(v21 + 16 * v26);
      if (v27 == v20)
      {
LABEL_31:
        v29 = *(_QWORD *)(v21 + 16 * v26 + 8);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 8) & 3) == 0)
          {
            SlowCase = *(_QWORD *)v29;
            if (*(_QWORD *)v29)
            {
LABEL_76:
              if (*(_DWORD *)v20 == 1)
              {
                v68 = (_DWORD *)*((_QWORD *)v20 + 1);
                *((_QWORD *)v20 + 1) = 0;
                if (v68)
                {
                  if (v68[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
                  else
                    --v68[2];
                }
                WTF::fastFree(v20, (void *)v19);
              }
              else
              {
                --*(_DWORD *)v20;
              }
LABEL_78:
              if (v80 != -1)
                ((void (*)(WTF **, WTF **))off_1E327EBB8[v80])(&v83, &v78);
              v80 = -1;
              if (v77 && v76)
              {
                if (*(_DWORD *)v76 == 2)
                  WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v76 -= 2;
              }
              v66 = 0;
              goto LABEL_85;
            }
          }
        }
      }
      else
      {
        v28 = 1;
        while (v27)
        {
          v26 = ((_DWORD)v26 + v28) & v22;
          v27 = *(WTF **)(v21 + 16 * v26);
          ++v28;
          if (v27 == v20)
            goto LABEL_31;
        }
      }
    }
    ++*(_DWORD *)v20;
    v31 = *(_QWORD *)(v18 + 3296);
    if (v31)
    {
      v32 = *(_DWORD *)(v31 - 8);
      v33 = ((unint64_t)&WebCore::JSGPUCommandBuffer::s_info
           + ~((_QWORD)&WebCore::JSGPUCommandBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSGPUCommandBuffer::s_info
                                                                      + ~((_QWORD)&WebCore::JSGPUCommandBuffer::s_info << 32)) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v36 = v32 & ((v35 >> 31) ^ v35);
      v37 = *(char ***)(v31 + 16 * v36);
      if (v37 == &WebCore::JSGPUCommandBuffer::s_info)
      {
LABEL_39:
        v39 = *(_QWORD *)(v31 + 16 * v36 + 8);
        if (v39)
          goto LABEL_41;
      }
      else
      {
        v38 = 1;
        while (v37)
        {
          v36 = ((_DWORD)v36 + v38) & v32;
          v37 = *(char ***)(v31 + 16 * v36);
          ++v38;
          if (v37 == &WebCore::JSGPUCommandBuffer::s_info)
            goto LABEL_39;
        }
      }
    }
    v40 = *(uint64_t **)(v18 + 56);
    Structure = WebCore::JSGPUCommandBufferPrototype::createStructure(v40, v18, *(JSC::JSCell **)(v18 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v44 = (JSC::JSCell *)WebCore::JSGPUCommandBufferPrototype::create((WebCore::JSGPUCommandBufferPrototype *)v40, Structure, v42, v43);
    v45 = WebCore::JSGPUCommandBuffer::createStructure(v40, v18, v44);
    v39 = WebCore::cacheDOMStructure((JSCell *)v18, v45, (uint64_t)&WebCore::JSGPUCommandBuffer::s_info);
LABEL_41:
    v46 = *(_QWORD *)(v18 + 56);
    v47 = *(_QWORD *)(v46 + 41456);
    v48 = *(_QWORD *)(v47 + 23536);
    v49 = *(_QWORD **)(v48 + 128);
    if (v49)
      goto LABEL_61;
    v50 = *(_QWORD *)(v47 + 22648);
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v50);
LABEL_46:
    v52 = *(_QWORD *)(v50 + 2824);
    if (!*(_QWORD *)(v52 + 128))
    {
      v53 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v83, "IsoSpace T");
      v85 = 0;
      MEMORY[0x19AEA3204](v53, &v83, v46 + 192, v46 + 1872, 32, 8, &v85);
      v55 = (uint64_t)v85;
      v85 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      v56 = v83;
      v83 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 1)
          WTF::fastFree(v56, v54);
        else
          --*(_DWORD *)v56;
      }
      v57 = *(_QWORD *)(v52 + 128);
      *(_QWORD *)(v52 + 128) = v53;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v58 = *(_QWORD *)(v48 + 128);
    *(_QWORD *)(v48 + 128) = v49;
    if (v58)
    {
      v59 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v59, v60);
    }
    v61 = __ldxr((unsigned __int8 *)v50);
    if (v61 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v50))
      {
LABEL_61:
        SlowCase = v49[3];
        if (SlowCase >= v49[4])
        {
          SlowCase = v49[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
            goto LABEL_63;
          }
          v71 = *(_QWORD *)(SlowCase + 8) ^ v49[6];
          v49[4] = SlowCase + HIDWORD(v71);
          v49[5] = SlowCase + (int)v71;
        }
        v49[3] = SlowCase + 32;
LABEL_63:
        *(_DWORD *)SlowCase = 0;
        WebCore::JSDOMObject::JSDOMObject(SlowCase, v39);
        *(_QWORD *)(SlowCase + 24) = v20;
        if (*(_BYTE *)(v46 + 755))
          __dmb(0xAu);
        v62 = *(_QWORD *)(v18 + 3320);
        if ((byte_1EE335680 & 1) == 0)
        {
          qword_1EE335678 = (uint64_t)&off_1E327C9B0;
          byte_1EE335680 = 1;
        }
        v83 = v20;
        if ((SlowCase & 8) != 0)
          v63 = (SlowCase - 112) | 1;
        else
          v63 = SlowCase & 0xFFFFFFFFFFFFC000;
        if ((v63 & 1) != 0)
          v64 = v63 + 47;
        else
          v64 = *(_QWORD *)v63 + 32;
        Allocator = *(_QWORD **)(v64 + 16);
        if (!Allocator)
          Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v64 + 16) = *Allocator;
        *Allocator = SlowCase;
        Allocator[1] = &qword_1EE335678;
        Allocator[2] = v62;
        v85 = Allocator;
        JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v62 + 32), (uint64_t *)&v83, (uint64_t *)&v85);
        if (v85)
          v85[1] = 3;
        goto LABEL_76;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v50);
    goto LABEL_61;
  }
  if (v80 == 1)
  {
    v19 = v78;
    LOBYTE(v83) = (_BYTE)v78;
    v69 = v79;
    v79 = 0;
    v84 = v69;
    if (!*(_QWORD *)(v4 + 16))
    {
      v70.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v78, (JSC::JSGlobalObject *)&v84);
      JSC::VM::throwException((JSC::VM *)v4, this, v70);
      v69 = v84;
    }
    v84 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
        WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v69 -= 2;
    }
    SlowCase = 0;
    goto LABEL_78;
  }
  v72 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsGPUCommandEncoderPrototypeFunction_pushDebugGroup(v72, v73, v74);
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_pushDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUCommandEncoder", "pushDebugGroup");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCommandEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUCommandEncoder", "pushDebugGroup");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 72))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsGPUCommandEncoderPrototypeFunction_popDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUCommandEncoder", "popDebugGroup");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUCommandEncoder::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUCommandEncoder", "popDebugGroup");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                + 8));
  return 10;
}

_BYTE *WebCore::jsGPUCommandEncoderPrototypeFunction_insertDebugMarker(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUCommandEncoder", "insertDebugMarker");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUCommandEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUCommandEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUCommandEncoder", "insertDebugMarker");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 88))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20GPURenderPassEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore20GPURenderPassEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t *a1, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v14;

  v3 = *((_DWORD *)a1 + 3);
  v4 = *a1;
  if (v3)
  {
    v5 = v4 + 88 * v3;
    do
    {
      if (*(_BYTE *)(v4 + 80))
      {
        if (*(_BYTE *)(v4 + 64))
        {
          v6 = *(unsigned int *)(v4 + 56);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))off_1E327EAF8[v6])(&v14, v4 + 24);
          *(_DWORD *)(v4 + 56) = -1;
        }
        v7 = *(unsigned int **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = 0;
        if (v7)
        {
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v10 = *(unsigned int **)v4;
        *(_QWORD *)v4 = 0;
        if (v10)
        {
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, a2);
          }
        }
      }
      v4 += 88;
    }
    while (v4 != v5);
    v4 = *a1;
  }
  if (v4)
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIdLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore12GPUColorDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore23GPURenderPassDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;

  v3 = (unsigned int *)a2[10];
  a2[10] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a2[9];
  a2[9] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  if (*((_BYTE *)a2 + 64))
  {
    v9 = (unsigned int *)a2[3];
    a2[3] = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  WTF::Vector<std::optional<WebCore::GPURenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 1, a2);
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21GPUComputePassEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21GPUComputePassEncoderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24GPUComputePassDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *result;

  v3 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>,WebCore::IDLDictionary<WebCore::GPUExtent3DDict>>>::convert@<X0>(uint64_t this@<X1>, JSC *a2@<X0>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v7;
  uint64_t result;
  int v9;
  int v10;
  JSC::JSObject *v11;
  JSC::VM *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  JSC::JSObject *v17;
  void *v18;
  WTF *v19;
  WTF **v20;
  uint64_t v21;
  int v22;
  JSC::VM *v23;
  WTF *v24;
  uint64_t v25;

  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v23 = v7;
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_2;
  if ((this & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) < 0x17u)
  {
    result = JSC::throwTypeError();
LABEL_12:
    v9 = 1;
LABEL_13:
    *(_DWORD *)(a4 + 32) = v9;
    return result;
  }
  v11 = (JSC::JSObject *)JSC::iteratorMethod(a2, (JSC::JSGlobalObject *)this, a3);
  if (*((_DWORD *)v7 + 20))
  {
    v16 = v7;
    v17 = v11;
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    v11 = v17;
    if ((_DWORD)result)
      goto LABEL_12;
  }
  if (v11 == (JSC::JSObject *)10)
  {
LABEL_2:
    result = WebCore::convertDictionary<WebCore::GPUExtent3DDict>((JSC::JSCell *)this, (JSC::VM **)a2, &v20);
    v9 = 1;
    if (!HIDWORD(v21))
    {
      v10 = v21;
      *(_QWORD *)(a4 + 8) = v20;
      *(_DWORD *)(a4 + 16) = v10;
      *(_DWORD *)(a4 + 24) = 1;
      v9 = 0;
    }
    goto LABEL_13;
  }
  v24 = 0;
  v25 = 0;
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v20 = &v24;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, this, v11, (uint64_t *)&v20);
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
  {
    v19 = v24;
    v22 = 1;
    if (v24)
    {
      v24 = 0;
      LODWORD(v25) = 0;
      WTF::fastFree(v19, v18);
    }
    v13 = 1;
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v22 = 0;
    v15 = v25;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)(a4 + 8) = v24;
    *(_QWORD *)(a4 + 16) = v15;
    *(_DWORD *)(a4 + 24) = 0;
  }
  *(_DWORD *)(a4 + 32) = v13;
  return ((uint64_t (*)(WTF **, WTF ***))off_1E327EB58[v14])(&v24, &v20);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUExtent3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUExtent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUExtent3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t IndexQuickly;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v14 = *a4;
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a1, IndexQuickly, &v22);
      if (!HIDWORD(v22))
      {
        v15 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v22);
          *(_DWORD *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v14 + 4 * v15) = v22;
        }
        ++*(_DWORD *)(v14 + 12);
      }
      if (*(_QWORD *)(v8 + 16))
      {
        v20 = JSC::JSArrayIterator::create();
        v21 = i | 0xFFFE000000000000;
        if (i < 0)
          v21 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v20 + 16) = v21;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a4;
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a1, v17, &v22);
        if (!HIDWORD(v22))
        {
          v19 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
            *(_DWORD *)(*(_QWORD *)v18 + 4 * *(unsigned int *)(v18 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v22);
          else
            *(_DWORD *)(*(_QWORD *)v18 + 4 * v19) = v22;
          ++*(_DWORD *)(v18 + 12);
        }
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore15GPUOrigin3DDictEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6VectorIjLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEN7WebCore15GPUExtent3DDictEEEENSE_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E327EB38[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19GPUImageCopyTextureENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  char v7;

  if (*((_BYTE *)a2 + 40))
  {
    v3 = a2[8];
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, _DWORD *))off_1E327EB68[v3])(&v7, a2 + 4);
    a2[8] = -1;
  }
  result = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GPUImageCopyBufferENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = (unsigned int *)a2[3];
  a2[3] = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16GPUCommandBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16GPUCommandBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26GPUCommandBufferDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29GPUComputePassTimestampWritesENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_setPipeline(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPUComputePassEncoder", "setPipeline");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPUComputePassEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPUComputePassEncoder", "setPipeline");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPUComputePipeline::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPUComputePipeline::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v24 + 8), a3);
      return 10;
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "pipeline", 9, "GPUComputePassEncoder", 22, a8, "setPipeline", 12, "GPUComputePipeline", 19);
      return 0;
    }
  }
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_dispatchWorkgroups(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  JSC::VM *v22;
  unint64_t v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v22, "GPUComputePassEncoder", "dispatchWorkgroups");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSGPUComputePassEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v22, "GPUComputePassEncoder", "dispatchWorkgroups");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v23);
    v13 = v23;
    if (HIDWORD(v23))
    {
      return 0;
    }
    else
    {
      v14 = *((int *)a2 + 8);
      if ((unint64_t)(v14 - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {
        v15 = 0;
      }
      else if (*((_QWORD *)a2 + 7) == 10)
      {
        v15 = 0;
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), &v23);
        if (HIDWORD(v23))
          return 0;
        v15 = v23 | 0x100000000;
        v14 = *((int *)a2 + 8);
      }
      if ((unint64_t)(v14 - 4) > 0xFFFFFFFFFFFFFFFCLL)
      {
        v17 = 0;
      }
      else
      {
        v16 = *((_QWORD *)a2 + 8);
        if (v16 == 10)
        {
          v17 = 0;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v16, &v23);
          if (HIDWORD(v23))
            return 0;
          v17 = v23 | 0x100000000;
        }
      }
      if ((v15 & 0xFF00000000) != 0)
        v18 = v15;
      else
        v18 = 1;
      if ((v17 & 0xFF00000000) != 0)
        v19 = v17;
      else
        v19 = 1;
      (*(void (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(v12 + 8) + 24))(*(_QWORD *)(v12 + 8), v13, v18, v19);
      return 10;
    }
  }
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_dispatchWorkgroupsIndirect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  JSValue v25;
  JSC::VM *v26;
  JSC::VM *v27;
  int v28;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPUComputePassEncoder", "dispatchWorkgroupsIndirect");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSGPUComputePassEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "GPUComputePassEncoder", "dispatchWorkgroupsIndirect");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSGPUBuffer::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSGPUBuffer::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(_QWORD *)(v17 + 24)) != 0)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)a2 + 7), (uint64_t)&v27);
      if (v28)
      {
        return 0;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, JSC::VM *))(**(_QWORD **)(v16 + 8) + 32))(*(_QWORD *)(v16 + 8), *(_QWORD *)(v24 + 16), v27);
        return 10;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "indirectBuffer", 15, "GPUComputePassEncoder", 22, a8, "dispatchWorkgroupsIndirect", 27, "GPUBuffer", 10);
      return 0;
    }
  }
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_end(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUComputePassEncoder", "end");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUComputePassEncoder::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUComputePassEncoder", "end");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                + 8));
  return 10;
}

_BYTE *WebCore::jsGPUComputePassEncoderPrototypeFunction_pushDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUComputePassEncoder", "pushDebugGroup");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUComputePassEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUComputePassEncoder", "pushDebugGroup");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 64))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_popDebugGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUComputePassEncoder", "popDebugGroup");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSGPUComputePassEncoder::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "GPUComputePassEncoder", "popDebugGroup");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                + 8));
  return 10;
}

_BYTE *WebCore::jsGPUComputePassEncoderPrototypeFunction_insertDebugMarker(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUComputePassEncoder", "insertDebugMarker");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSGPUComputePassEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "GPUComputePassEncoder", "insertDebugMarker");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v21);
  v12 = v22;
  if (v22)
  {
    v16 = 0;
  }
  else
  {
    v13 = v21;
    v21 = 0;
    v23 = v13;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v11 + 8) + 80))(*(_QWORD *)(v11 + 8), &v23);
    v15 = v23;
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = v22;
    v16 = 10;
  }
  if (v12 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v12])(&v23, &v21);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsGPUComputePassEncoderPrototypeFunction_setBindGroup(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSGPUComputePassEncoder *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  JSC::JSGlobalObject *v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  JSValue v26;
  uint64_t v27;
  JSC::JSArrayBufferView *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  uint64_t v34;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  JSValue v38;
  WTF::StringImpl *v39;
  _QWORD v40[2];
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  char v49;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v40[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v40, "GPUComputePassEncoder", "setBindGroup");
  v7 = a2;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSGPUComputePassEncoder::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSGPUComputePassEncoder::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v40, "GPUComputePassEncoder", "setBindGroup");
  v40[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 5)
    v13 = 5;
  if (v13 != 5)
  {
    if (v13 == 3 || v13 == 2)
      return (_BYTE *)WebCore::jsGPUComputePassEncoderPrototypeFunction_setBindGroup1Body((WTF::StringImpl **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    if (v13 > 1)
      return (_BYTE *)JSC::throwTypeError();
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v26);
  }
  v16 = *(_QWORD *)(v6 + 24);
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v47);
  v18 = v47;
  if (HIDWORD(v47))
    return 0;
  v19 = *((_QWORD *)v7 + 7);
  v20 = *((_QWORD *)this + 7);
  v47 = v20;
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v21 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v22 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v23 = (char **)(16 * v21);
  if ((_DWORD)v21)
    v24 = v23 == &WebCore::JSGPUBindGroup::s_info;
  else
    v24 = 1;
  if (!v24)
  {
    do
    {
      v23 = (char **)v23[2];
      v22 = v23 != 0;
    }
    while (v23 != &WebCore::JSGPUBindGroup::s_info && v23 != 0);
  }
  if (v22 && (v27 = *(_QWORD *)(v19 + 24)) != 0)
  {
    v28 = (JSC::JSArrayBufferView *)*((_QWORD *)v7 + 8);
    v45 = v20;
    if (((unint64_t)v28 & 0xFFFE000000000002) == 0 && *((_BYTE *)v28 + 5) == 45)
    {
      JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::possiblySharedTypedImpl(v28, (uint64_t *)&v47);
      v29 = v47;
      if (v47)
      {
        v30 = *(_QWORD *)(v47 + 32);
        if (!v30)
          goto LABEL_49;
        v31 = *(_QWORD *)(v30 + 16);
        if (!v31)
          goto LABEL_49;
        v32 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (v32)
        {
          if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
            goto LABEL_81;
          goto LABEL_43;
        }
LABEL_44:
        if (*(_QWORD *)(v30 + 32))
          v33 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v33 = 0;
        if (!v33)
        {
          while (1)
          {
LABEL_49:
            if ((*(_BYTE *)(v29 + 6) & 3) != 0)
              goto LABEL_50;
            v43 = v29;
            v44 = 0;
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, *((_QWORD *)v7 + 9), (uint64_t)&v41);
            if (v42)
              break;
            v7 = (JSC::JSGlobalObject *)*((_QWORD *)v7 + 10);
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, (unint64_t)v7, &v47);
            if (HIDWORD(v47))
              goto LABEL_79;
            v43 = 0;
            if (!v42)
            {
              WebCore::GPUComputePassEncoder::setBindGroup(v16, v18, v27, v29, v41, v47, (uint64_t)&v47);
              if (*(_DWORD *)v29 == 1)
                JSC::ArrayBufferView::operator delete();
              else
                --*(_DWORD *)v29;
              if (v49)
              {
                v36 = (WTF::StringImpl *)v47;
                LOBYTE(v45) = v47;
                v37 = v48;
                v48 = 0;
                v46 = v37;
                if (!*((_QWORD *)v5 + 2))
                {
                  v38.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v47, (JSC::JSGlobalObject *)&v46);
                  JSC::VM::throwException(v5, this, v38);
                  v37 = v46;
                }
                v46 = 0;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                    WTF::StringImpl::destroy(v37, v36);
                  else
                    *(_DWORD *)v37 -= 2;
                }
                if (v49)
                {
                  v39 = v48;
                  v48 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 != 2)
                    {
                      v15 = 0;
                      *(_DWORD *)v39 -= 2;
                      goto LABEL_62;
                    }
                    WTF::StringImpl::destroy(v39, v36);
                  }
                }
LABEL_79:
                v15 = 0;
                goto LABEL_62;
              }
              v15 = 10;
LABEL_62:
              v34 = 0;
              goto LABEL_53;
            }
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_81:
            if (*MEMORY[0x1E0CC10F0])
              goto LABEL_44;
LABEL_43:
            if ((v31 & 0x3FFFFFFFFLL) + v32)
              goto LABEL_44;
          }
          v15 = 0;
          goto LABEL_62;
        }
        v47 = 0;
LABEL_50:
        if (*(_DWORD *)v29 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v29;
      }
    }
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v45, 2, "dynamicOffsetsData", 19, "GPUComputePassEncoder", 22, v17, "setBindGroup", 13, "Uint32Array", 12);
    v15 = 0;
    v34 = 1;
    v44 = 1;
LABEL_53:
    ((void (*)(unint64_t *, uint64_t *))off_1E327EEE0[v34])(&v47, &v43);
  }
  else
  {
LABEL_31:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v47, 1, "bindGroup", 10, "GPUComputePassEncoder", 22, v17, "setBindGroup", 13, "GPUBindGroup", 13);
    return 0;
  }
  return (_BYTE *)v15;
}

uint64_t WebCore::jsGPUComputePassEncoderPrototypeFunction_setBindGroup1Body(WTF::StringImpl **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSGPUComputePassEncoder *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _BOOL4 v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  void *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  WTF::StringImpl *v28;
  _QWORD v29[2];
  int v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  char v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;

  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)this, *((_QWORD *)a2 + 6), &v31);
  v8 = v31;
  if ((unint64_t)v31 >> 32)
    return 0;
  v9 = *((_QWORD *)a2 + 7);
  v10 = this[7];
  v31 = v10;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
    v12 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
    v13 = (char **)(16 * v11);
    if ((_DWORD)v11)
      v14 = v13 == &WebCore::JSGPUBindGroup::s_info;
    else
      v14 = 1;
    if (!v14)
    {
      do
      {
        v13 = (char **)v13[2];
        v12 = v13 != 0;
      }
      while (v13 != &WebCore::JSGPUBindGroup::s_info && v13 != 0);
    }
    if (v12)
    {
      v17 = *(_QWORD *)(v9 + 24);
      if (v17)
      {
        if ((unint64_t)(*((int *)a2 + 8) - 4) >= 0xFFFFFFFFFFFFFFFDLL
          || (v18 = *((_QWORD *)a2 + 8), v18 == 10))
        {
          v19 = 0;
          v30 = 0;
          v20 = 0;
        }
        else
        {
          v34 = v10;
          if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            v26 = v31;
            v31 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v25);
              else
                *(_DWORD *)v26 -= 2;
            }
            v16 = 0;
            v23 = 1;
            v30 = 1;
            goto LABEL_22;
          }
          v31 = 0;
          v32 = 0;
          v35 = &v31;
          JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>((JSC::JSGlobalObject *)this, v18, (uint64_t *)&v35);
          if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
          {
            v28 = v31;
            v30 = 1;
            if (v31)
            {
              v31 = 0;
              LODWORD(v32) = 0;
              WTF::fastFree(v28, v27);
            }
            v16 = 0;
            v23 = 1;
            goto LABEL_22;
          }
          v19 = v31;
          v20 = v32;
          v30 = 0;
        }
        v29[0] = 0;
        v29[1] = 0;
        v31 = v19;
        v32 = v20;
        v33 = 1;
        (*(void (**)(_QWORD, WTF::StringImpl *, _QWORD, WTF::StringImpl **))(**((_QWORD **)a3 + 1) + 48))(*((_QWORD *)a3 + 1), v8, *(_QWORD *)(v17 + 8), &v31);
        if (v33)
        {
          v22 = v31;
          if (v31)
          {
            v31 = 0;
            LODWORD(v32) = 0;
            WTF::fastFree(v22, v21);
          }
        }
        v23 = 0;
        v16 = 10;
LABEL_22:
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E327EB58[v23])(&v31, v29);
        return v16;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v31, 1, "bindGroup", 10, "GPUComputePassEncoder", 22, v7, "setBindGroup", 13, "GPUBindGroup", 13);
  return 0;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnforceRangeAdaptor<WebCore::IDLUnsignedLong>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a1, IndexQuickly, &v20);
      if (!HIDWORD(v20))
      {
        v13 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v20);
          *(_DWORD *)(*(_QWORD *)v12 + 4 * *(unsigned int *)(v12 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v12 + 4 * v13) = v20;
        }
        ++*(_DWORD *)(v12 + 12);
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v18 = JSC::JSArrayIterator::create();
        v19 = i | 0xFFFE000000000000;
        if (i < 0)
          v19 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v18 + 16) = v19;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v15 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = *a3;
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a1, v15, &v20);
        if (!HIDWORD(v20))
        {
          v17 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(v16 + 8))
            *(_DWORD *)(*(_QWORD *)v16 + 4 * *(unsigned int *)(v16 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17 + 1, (unint64_t)&v20);
          else
            *(_DWORD *)(*(_QWORD *)v16 + 4 * v17) = v20;
          ++*(_DWORD *)(v16 + 12);
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::possiblySharedTypedImpl@<X0>(JSC::JSArrayBufferView *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char v5;
  uint64_t result;
  char v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *((unsigned __int8 *)this + 40);
  v5 = v4 - 88;
  if ((v4 - 88) <= 0x35)
  {
    if (((1 << v5) & 0x3D) != 0)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (!result)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (((1 << v5) & 0x3D000000000000) != 0)
    {
      result = *((_QWORD *)this + 6);
      if (!result)
        goto LABEL_28;
LABEL_11:
      v7 = 0;
      *(_DWORD *)result += 2;
      goto LABEL_12;
    }
  }
  if (v4 == 16 || v4 == 48)
  {
    result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
    if (result)
      goto LABEL_11;
  }
  else
  {
    result = 0;
  }
LABEL_28:
  v7 = 1;
LABEL_12:
  v17 = result;
  v8 = *((unsigned __int8 *)this + 40);
  if ((v8 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 3);
    if ((v7 & 1) == 0)
      goto LABEL_14;
LABEL_22:
    v15 = 0;
    goto LABEL_23;
  }
  v9 = 0;
  if ((v7 & 1) != 0)
    goto LABEL_22;
LABEL_14:
  v10 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(result + 64) && (v16 = *(_QWORD *)(result + 32)) != 0)
    v11 = *(_QWORD *)(v16 + 32);
  else
    v11 = *(_QWORD *)(result + 48);
  v12 = v11 >= v10;
  v13 = v11 - v10;
  if (!v12 || (v14 = v9 <= v13 >> 2, (v10 & 3) != 0) || ((v8 | v14) & 1) == 0)
  {
    *a2 = 0;
    return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  JSC::ArrayBufferView::ArrayBufferView();
  result = v17;
LABEL_23:
  *a2 = v15;
  if (result)
    return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_13Uint32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

unint64_t WebCore::JSFile::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSFile *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v5 = (WebCore::JSFile *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSFile::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase >= v6[4])
  {
    SlowCase = v6[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v11);
    v6[5] = SlowCase + (int)v11;
  }
  v6[3] = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(SlowCase + 24) = v8;
  WebCore::JSBlob::finishCreation(v9, v5);
  return SlowCase;
}

_QWORD *WebCore::cacheWrapper<WebCore::File,WebCore::JSFile>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::File *)::owner = (uint64_t)&off_1E327F250;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::File *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::File *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFileList>(WebCore::JSFileList *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSFileList::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSFileList::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSFileList::s_info);
  }
  return result;
}

unint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::create(uint64_t a1, uint64_t a2, JSC::JSCell **a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructorNotConstructable<WebCore::JSFileList>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::jsFileReader_resultGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  char v10;

  v4 = *(_QWORD *)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  WebCore::FileReader::result((WebCore::JSFileReader *)((char *)a3 - 32), (char *)a2, (uint64_t)&v7);
  v5 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLArrayBuffer>>>::convert<std::optional<std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>>(this, v4, (uint64_t)&v7);
  if (v9 && v8 != -1)
    ((void (*)(char *, uint64_t *))off_1E327EEF0[v8])(&v10, &v7);
  return v5;
}

uint64_t WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLArrayBuffer>>>::convert<std::optional<std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>>(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  JSC::ArrayBuffer *v7;
  _BYTE v8[8];
  int v9;
  char v10;

  if (!*(_BYTE *)(a3 + 16))
    return 2;
  WebCore::IDLType<std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::extractValueFromNullable((uint64_t)v8, a3);
  v3 = WebCore::toJS<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLArrayBuffer>,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(a1, a2, (uint64_t)v8, v7);
  if (v9 != -1)
    ((void (*)(char *, _BYTE *))off_1E327EEF0[v9])(&v10, v8);
  return v3;
}

uint64_t WebCore::toJS<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLArrayBuffer>,std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>(WebCore *a1, uint64_t a2, uint64_t a3, JSC::ArrayBuffer *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  int v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a3 + 8);
  if (v4 == -1)
    v5 = -1;
  else
    v5 = *(unsigned int *)(a3 + 8);
  if (v5 != 1)
  {
    if (v5)
    {
LABEL_25:
      v15 = std::__throw_bad_optional_access[abi:sn180100]();
      return WebCore::IDLType<std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::extractValueFromNullable(v15);
    }
    if (!v4)
    {
      v6 = *((_QWORD *)a1 + 7);
      v7 = *(WebCore::JSDOMGlobalObject **)a3;
      if (!*(_QWORD *)a3)
        return *(_QWORD *)(v6 + 41968);
      v8 = *((_DWORD *)v7 + 1);
      if (!v8)
        return *(_QWORD *)(v6 + 41968);
      if (v8 != 1)
      {
LABEL_10:
        v9 = *(_QWORD *)(v6 + 64760);
        if (!v9 || v7 != *(WebCore::JSDOMGlobalObject **)(v9 + 8))
          return JSC::jsStringWithCacheSlowCase();
        return v9;
      }
      v12 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if ((*((_BYTE *)v7 + 16) & 4) != 0)
      {
        v13 = *v12;
      }
      else
      {
        v14 = *(unsigned __int16 *)v12;
        if (v14 > 0xFF)
          goto LABEL_10;
        v13 = v14;
      }
      return *(_QWORD *)(v6 + 8 * v13 + 42216);
    }
LABEL_24:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_25;
  }
  if (v4 != 1)
    goto LABEL_24;
  v11 = *(WebCore::JSDOMGlobalObject **)a3;
  if (!v11)
    return 2;
  return WebCore::toJS(a1, a2, v11, a4);
}

uint64_t WebCore::IDLType<std::variant<WTF::String,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>>>::extractValueFromNullable(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = result;
    *(_BYTE *)result = 0;
    *(_DWORD *)(result + 8) = -1;
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E327EF00[v3])(&v5, result, a2);
      *(_DWORD *)(v2 + 8) = v3;
    }
  }
  else
  {
    v4 = std::__throw_bad_optional_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(v4);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6StringENS8_6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t WebCore::jsFileReader_onloadstartGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 1160), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::jsFileReader_onprogressGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 1584), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::jsFileReader_onloadGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 1104), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::jsFileReader_onabortGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 64), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::jsFileReader_onerrorGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::jsFileReader_onloadendGetter(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSFileReader *a3)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::DOMWrapperWorld *v6;
  uint64_t v7;
  void *v8;
  WebCore::FileReader *v10;

  v4 = (WebCore *)*((_QWORD *)this + 3);
  ++*((_DWORD *)v4 - 2);
  v10 = (WebCore *)((char *)v4 - 32);
  v5 = WebCore::eventNames(this);
  v7 = WebCore::eventHandlerAttribute(v4, (WebCore::EventTarget *)(v5 + 1128), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) + 3320), v6);
  WTF::Ref<WebCore::FileReader,WTF::RawPtrTraits<WebCore::FileReader>,WTF::DefaultRefDerefTraits<WebCore::FileReader>>::~Ref(&v10, v8);
  return v7;
}

uint64_t WebCore::JSFileReader::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 4104);
  *(_QWORD *)(a1 + 4104) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSFileReader::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSFileReader *v6;
  unint64_t v7;
  uint64_t result;

  v6 = (WebCore::JSFileReader *)*((_QWORD *)a2 + 7);
  v7 = JSC::allocateCell<WebCore::JSFileReader>(v6, a2);
  result = WebCore::JSFileReader::JSFileReader(v7, a1, (uint64_t)a2, a3);
  if (*((_BYTE *)v6 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t *WebCore::cacheWrapper<WebCore::FileReader,WebCore::JSFileReader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;

  if ((byte_1EE3355A0 & 1) == 0)
  {
    qword_1EE335598 = (uint64_t)&off_1E327C710;
    byte_1EE3355A0 = 1;
  }
  if (a2)
    v6 = (_QWORD *)(a2 + 40);
  else
    v6 = 0;
  result = (uint64_t *)WebCore::setInlineCachedWrapper(a1, v6, a3, (uint64_t)&qword_1EE335598);
  if ((result & 1) == 0)
  {
    v9 = a2;
    JSC::Weak<JSC::JSObject>::Weak(&v8, a3, (uint64_t)&qword_1EE335598, a1);
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(a1 + 32), &v9, &v8);
    if (v8)
      *(_QWORD *)(v8 + 8) = 3;
  }
  return result;
}

unint64_t JSC::allocateCell<WebCore::JSFileReader>(WebCore::JSFileReader *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSFileReader::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSFileReaderSync::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryEntry::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryHandle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemDirectoryReader::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemEntry::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemFileEntry::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemFileHandle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemHandle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSFileSystemSyncAccessHandle::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::getDOMStructure<WebCore::JSFocusEvent>(WebCore::JSFocusEvent *a1, JSC::VM *a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t Structure;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSFocusEvent::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSFocusEvent::createPrototype(a1, a2, v5);
    Structure = WebCore::JSFocusEvent::createStructure((uint64_t *)a1, (uint64_t)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSFocusEvent::s_info);
  }
  return result;
}

uint64_t WebCore::JSFocusEvent::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 3688);
  *(_QWORD *)(a1 + 3688) = v3;
  if (result)
  {
    v5 = (WTF *)MEMORY[0x19AEA3528]();
    return WTF::fastFree(v5, v6);
  }
  return result;
}

uint64_t WebCore::JSFontFace::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WebCore::FontFace *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::FontFace>>::convert(WebCore::FontFace *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WebCore::FontFace *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WebCore::FontFace *v17;

  v17 = (WebCore::FontFace *)*((_QWORD *)result + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return (WebCore::FontFace *)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSFontFace::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSFontFace::s_info && v6 != 0);
  }
  if (!v5)
    return (WebCore::FontFace *)JSC::throwTypeError();
  v9 = *(WebCore::FontFace **)(a2 + 24);
  if (!v9)
    return (WebCore::FontFace *)JSC::throwTypeError();
  ++*((_DWORD *)v9 + 6);
  v17 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v17);
    v12 = *(unsigned int *)(a3 + 12);
    v13 = *(char **)a3;
    v14 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    result = v17;
    *(_DWORD *)(a3 + 12) = v12 + 1;
    v17 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
      {
        WebCore::FontFace::~FontFace(result);
        return (WebCore::FontFace *)WTF::fastFree(v15, v16);
      }
      else
      {
        --*((_DWORD *)result + 6);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

uint64_t WebCore::JSFontFaceSet::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::FontFaceSet>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::FontFaceSet>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::JSFragmentDirective::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPU::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUAdapter::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WTF::RefCounted<WebCore::GPUSupportedFeatures>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 1)
      {
        v4 = *(unsigned int *)(v3 + 20);
        if ((_DWORD)v4)
        {
          v7 = *(WTF::StringImpl ***)(v3 + 8);
          v8 = 8 * v4;
          v10 = v3;
          do
          {
            v9 = *v7;
            *v7 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, a2);
              else
                *(_DWORD *)v9 -= 2;
            }
            ++v7;
            v8 -= 8;
            v3 = v10;
          }
          while (v8);
        }
        v5 = *(WTF **)(v3 + 8);
        if (v5)
        {
          *(_QWORD *)(v3 + 8) = 0;
          *(_DWORD *)(v3 + 16) = 0;
          v6 = v3;
          WTF::fastFree(v5, a2);
          v3 = v6;
        }
        WTF::fastFree((WTF *)v3, a2);
      }
      else
      {
        --*(_DWORD *)v3;
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSGPUAdapterInfo::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *_ZN3WTF10StringImpl16removeCharactersIZN7WebCore14GPUAdapterInfo20normalizedIdentifierERKNS_6StringEEUlT_E_EENS_3RefIS0_NS_12RawPtrTraitsIS0_EENS_21DefaultRefDerefTraitsIS0_EEEERKS7_(WTF *result, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v11;
  size_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WTF *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v26;
  WTF *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v35;
  void *v37;
  WTF *v38;

  v2 = *(_BYTE **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    v11 = (WTF *)*(unsigned int *)(a2 + 4);
    if (!(_DWORD)v11)
      goto LABEL_19;
    v12 = 0;
    v13 = (unsigned __int8 *)v11 + (_QWORD)v2;
    while (1)
    {
      v14 = v2[v12];
      v15 = v14 - 58;
      v16 = (v14 | 0x20) - 123;
      if (v15 <= 0xFFFFFFF5 && v16 < 0xFFFFFFE6)
        break;
      if (v11 == (WTF *)++v12)
        goto LABEL_19;
    }
    result = (WTF *)WTF::fastMalloc(v11);
    v38 = result;
    if (v12 > (unint64_t)v11)
      goto LABEL_69;
    v28 = result;
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
        *(_BYTE *)result = *v2;
      else
        memcpy(result, v2, v12);
    }
    if (v11 == (WTF *)v12)
    {
LABEL_66:
      WTF::StringImpl::adopt();
      return (WTF *)WTF::fastFree(v38, v37);
    }
    v29 = &v2[v12];
    v30 = v12;
    while (1)
    {
      while (1)
      {
        v31 = *v29;
        v32 = v31 - 58;
        v33 = (v31 | 0x20) - 123;
        if (v32 <= 0xFFFFFFF5 && v33 <= 0xFFFFFFE5)
          break;
LABEL_53:
        if (v29 != v13)
        {
          while (1)
          {
            v35 = *v29;
            if ((v35 - 58) <= 0xFFFFFFF5 && (v35 | 0x20u) - 123 < 0xFFFFFFE6)
              break;
            ++v29;
            *((_BYTE *)v28 + v30++) = v35;
            if (v29 == v13)
              goto LABEL_66;
          }
          if (v29 != v13)
            continue;
        }
        goto LABEL_66;
      }
      if (++v29 == v13)
      {
        v29 = &v2[(_QWORD)v11];
        goto LABEL_53;
      }
    }
  }
  v3 = *(unsigned int *)(a2 + 4);
  if (!(_DWORD)v3)
  {
LABEL_19:
    *(_DWORD *)a2 += 2;
    *(_QWORD *)result = a2;
    return result;
  }
  v4 = 0;
  v5 = 0;
  v6 = (unsigned __int16 *)&v2[2 * v3];
  while (1)
  {
    v7 = *(unsigned __int16 *)&v2[2 * v4];
    v8 = v7 - 58;
    v9 = (v7 | 0x20) - 123;
    if (v8 <= 0xFFFFFFF5 && v9 < 0xFFFFFFE6)
      break;
    v5 -= 2;
    ++v4;
    if (-2 * v3 == v5)
      goto LABEL_19;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(2 * v3));
  v38 = result;
  if (v4 <= v3)
  {
    v18 = result;
    v19 = -2 * v3;
    if ((_DWORD)v4 == 1)
    {
      *(_WORD *)result = *(_WORD *)v2;
    }
    else if ((_DWORD)v4)
    {
      memcpy(result, v2, -v5);
    }
    if (v19 != v5)
    {
      v20 = (unsigned __int16 *)&v2[-v5];
      v21 = v4;
      do
      {
        while (1)
        {
          v22 = *v20;
          v23 = v22 - 58;
          v24 = (v22 | 0x20) - 123;
          if (v23 > 0xFFFFFFF5 || v24 > 0xFFFFFFE5)
            break;
          if (++v20 == v6)
            goto LABEL_63;
        }
        if (v20 == v6)
          break;
        while (1)
        {
          v26 = *v20;
          if ((v26 - 58) <= 0xFFFFFFF5 && (v26 | 0x20u) - 123 < 0xFFFFFFE6)
            break;
          ++v20;
          *((_WORD *)v18 + v21++) = v26;
          if (v20 == v6)
            goto LABEL_63;
        }
      }
      while (v20 != v6);
    }
LABEL_63:
    WTF::StringImpl::adopt();
    return (WTF *)WTF::fastFree(v38, v37);
  }
LABEL_69:
  __break(1u);
  return result;
}

uint64_t WebCore::JSGPUBindGroup::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

int *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::GPUBindGroupEntry>>::convert(JSC::VM **a1, JSC::JSCell *this, uint64_t a3)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *result;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  _DWORD *v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t (**v42)();
  _DWORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  __int128 v48;
  char v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  _QWORD v54[4];
  int v55;
  JSC::VM *v56;
  JSC::VM *v57;
  char v58;
  WTF::StringImpl *v59;
  _DWORD *v60;
  __int128 v61;
  char v62;
  unsigned int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v56 = a1[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v53 = 0;
    v54[0] = 0;
    v55 = 0;
LABEL_10:
    v9 = "binding";
    v10 = "unsigned long";
    v11 = (int)a1;
    v12 = 8;
    v13 = 14;
LABEL_11:
    result = (int *)WebCore::throwRequiredMemberTypeError(v11, (int)&v56, v9, v12, "GPUBindGroupEntry", 18, v10, v13);
LABEL_12:
    v52 = 1;
    goto LABEL_13;
  }
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = JSC::JSCell::getObject(this);
    if (Object)
    {
      v6 = (JSC::Structure *)Object;
      v53 = 0;
      v54[0] = 0;
      v55 = 0;
      WTF::AtomStringImpl::addLiteral();
      v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v59);
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v7);
        else
          *(_DWORD *)v59 -= 2;
      }
      if (*((_DWORD *)v56 + 20))
      {
        result = (int *)JSC::VM::hasExceptionsAfterHandlingTraps(v56);
        if ((_DWORD)result)
          goto LABEL_12;
      }
      if (v8 == 10)
        goto LABEL_10;
      result = (int *)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a1, v8, &v59);
      if ((unint64_t)v59 >> 32)
        goto LABEL_12;
      v53 = (int)v59;
      WTF::AtomStringImpl::addLiteral();
      v26 = v59;
      v28 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v59);
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v27);
        else
          *(_DWORD *)v26 -= 2;
      }
      if (*((_DWORD *)v56 + 20))
      {
        result = (int *)JSC::VM::hasExceptionsAfterHandlingTraps(v56);
        if ((_DWORD)result)
          goto LABEL_12;
      }
      if (v28 == 10)
      {
        v9 = "resource";
        v10 = "(GPUSampler or GPUTextureView or GPUBufferBinding or GPUExternalTexture)";
        v11 = (int)a1;
        v12 = 9;
        v13 = 73;
        goto LABEL_11;
      }
      v57 = a1[7];
      if ((v28 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_39;
      if ((v28 & 0xFFFE000000000002) == 0)
      {
        v30 = *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C);
        v31 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
        v32 = 16 * v30;
        v33 = v31;
        if ((_DWORD)v30)
        {
          v33 = 1;
          if ((char **)v32 != &WebCore::JSGPUSampler::s_info)
          {
            v34 = 16 * v30;
            do
            {
              v34 = *(_QWORD *)(v34 + 16);
              v33 = v34 != 0;
            }
            while ((char **)v34 != &WebCore::JSGPUSampler::s_info && v34 != 0);
          }
        }
        if (v33)
        {
          v36 = *(_DWORD **)(v28 + 24);
          if (v36)
          {
            v37 = 0;
            goto LABEL_76;
          }
        }
        v38 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
        if ((_DWORD)v30)
        {
          v38 = *(_DWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((char **)v32 != &WebCore::JSGPUTextureView::s_info)
          {
            v39 = 16 * v30;
            do
            {
              v39 = *(_QWORD *)(v39 + 16);
              v38 = v39 != 0;
            }
            while ((char **)v39 != &WebCore::JSGPUTextureView::s_info && v39 != 0);
          }
        }
        if (v38)
        {
          v36 = *(_DWORD **)(v28 + 24);
          if (v36)
          {
            v37 = 1;
            goto LABEL_76;
          }
        }
        if ((_DWORD)v30 && (char **)v32 != &WebCore::JSGPUExternalTexture::s_info)
        {
          do
          {
            v32 = *(_QWORD *)(v32 + 16);
            v31 = v32 != 0;
          }
          while ((char **)v32 != &WebCore::JSGPUExternalTexture::s_info && v32 != 0);
        }
        if (v31)
        {
          v36 = *(_DWORD **)(v28 + 24);
          if (v36)
          {
            v37 = 3;
LABEL_76:
            ++*v36;
            v47 = v36;
            v50 = v37;
            LOBYTE(v51) = 1;
            LOBYTE(v60) = 0;
            v63 = -1;
            result = (int *)((uint64_t (*)(char *, _DWORD **, _DWORD **))off_1E327E048[v37])(&v58, &v60, &v47);
            v63 = v37;
            v64 = 0;
            if (!(_BYTE)v51)
              goto LABEL_82;
            v29 = v50;
            if (v50 == -1)
              goto LABEL_82;
            v42 = off_1E327E028;
LABEL_81:
            result = (int *)((uint64_t (*)(char *, _DWORD **))v42[v29])(&v58, &v47);
LABEL_82:
            v44 = v64;
            if (v64)
            {
              v52 = 1;
            }
            else
            {
              LOBYTE(v47) = 0;
              v50 = -1;
              v45 = v63;
              if (v63 == -1)
              {
                if (v55 != -1)
                {
                  result = (int *)((uint64_t (*)(JSC::VM **, _QWORD *))off_1E327E028[v55])(&v57, v54);
                  v55 = -1;
                }
              }
              else
              {
                ((void (*)(JSC::VM **, _DWORD **, _DWORD **))off_1E327E048[v63])(&v57, &v47, &v60);
                v50 = v45;
                v57 = (JSC::VM *)v54;
                result = (int *)((uint64_t (*)(JSC::VM **, _QWORD *, _DWORD **))off_1E327E068[v45])(&v57, v54, &v47);
              }
              if (v50 != -1)
                result = (int *)((uint64_t (*)(JSC::VM **, _DWORD **))off_1E327E028[v50])(&v57, &v47);
              v46 = v55;
              LODWORD(v47) = v53;
              LOBYTE(v48) = 0;
              v51 = -1;
              if (v55 != -1)
              {
                result = (int *)((uint64_t (*)(JSC::VM **, __int128 *, _QWORD *))off_1E327E048[v55])(&v57, &v48, v54);
                v51 = v46;
              }
              v52 = 0;
              v44 = v64;
            }
            if (v44 != -1)
              result = (int *)((uint64_t (*)(JSC::VM **, _DWORD **))off_1E327E088[v44])(&v57, &v60);
LABEL_13:
            if (v55 != -1)
              result = (int *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E327E028[v55])(&v59, v54);
            v15 = v52;
            if (v52)
            {
LABEL_35:
              if (v15 == -1)
                return result;
              return (int *)((uint64_t (*)(WTF::StringImpl **, _DWORD **))off_1E327EF10[v15])(&v59, &v47);
            }
            v16 = v51;
            LODWORD(v59) = (_DWORD)v47;
            LOBYTE(v60) = 0;
            v63 = -1;
            if (v51 != -1)
            {
              result = (int *)((uint64_t (*)(int *, _DWORD **, __int128 *))off_1E327E048[v51])(&v53, &v60, &v48);
              v63 = v16;
            }
            v17 = *(unsigned int *)(a3 + 12);
            if ((_DWORD)v17 == *(_DWORD *)(a3 + 8))
            {
              result = (int *)WTF::Vector<WebCore::GPUBindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v17 + 1, (unint64_t)&v59);
              v18 = *(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 12);
              v19 = *result;
              *(_BYTE *)(v18 + 8) = 0;
              v20 = v18 + 8;
              *(_DWORD *)v18 = v19;
              *(_DWORD *)(v18 + 40) = -1;
              v21 = (_DWORD *)(v18 + 40);
              v22 = result[10];
              if ((_DWORD)v22 == -1)
                goto LABEL_24;
              result = (int *)((uint64_t (*)(int *, uint64_t, int *))off_1E327E048[v22])(&v53, v20, result + 2);
            }
            else
            {
              v23 = *(_QWORD *)a3 + 48 * v17;
              *(_DWORD *)v23 = (_DWORD)v59;
              *(_BYTE *)(v23 + 8) = 0;
              v24 = v23 + 8;
              *(_DWORD *)(v23 + 40) = -1;
              v21 = (_DWORD *)(v23 + 40);
              LODWORD(v22) = v63;
              if (v63 == -1)
              {
                ++*(_DWORD *)(a3 + 12);
LABEL_34:
                v15 = v52;
                goto LABEL_35;
              }
              result = (int *)((uint64_t (*)(int *, uint64_t, _DWORD **))off_1E327E048[v63])(&v53, v24, &v60);
            }
            *v21 = v22;
LABEL_24:
            v25 = v63;
            ++*(_DWORD *)(a3 + 12);
            if ((_DWORD)v25 != -1)
              result = (int *)((uint64_t (*)(int *, _DWORD **))off_1E327E028[v25])(&v53, &v60);
            goto LABEL_34;
          }
        }
        if (*(unsigned __int8 *)(v28 + 5) >= 0x17u)
        {
LABEL_39:
          result = (int *)WebCore::convertDictionary<WebCore::GPUBufferBinding>((uint64_t)&v47, a1, (JSC::JSCell *)v28);
          v29 = v50;
          if (v50)
          {
            v64 = 1;
            if (v50 == -1)
              goto LABEL_82;
          }
          else
          {
            v43 = v47;
            v47 = 0;
            v61 = v48;
            v62 = v49;
            v60 = v43;
            v63 = 2;
            v64 = 0;
          }
          v42 = off_1E327EF20;
          goto LABEL_81;
        }
      }
      result = (int *)JSC::throwTypeError();
      v64 = 1;
      goto LABEL_82;
    }
  }
  JSC::throwTypeError();
  v15 = 1;
  v52 = 1;
  return (int *)((uint64_t (*)(WTF::StringImpl **, _DWORD **))off_1E327EF10[v15])(&v59, &v47);
}

unint64_t WTF::Vector<WebCore::GPUBindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::GPUBindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::GPUBindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::GPUBindGroupEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(unsigned int *)(result + 12);
      v5 = 48 * a2;
      result = WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = (_DWORD *)((char *)v3 + 40);
        v8 = (_DWORD *)(result + 40);
        v9 = 48 * v4;
        do
        {
          *(v8 - 10) = *(v7 - 10);
          *((_BYTE *)v8 - 32) = 0;
          v6 = v8 - 8;
          *v8 = -1;
          v10 = *v7;
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, _DWORD *, _DWORD *))off_1E327E048[v10])(&v12, v6, v7 - 8);
            *v8 = v10;
            v11 = *v7;
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, _DWORD *))off_1E327E028[v11])(&v13, v7 - 8);
          }
          *v7 = -1;
          v7 += 12;
          v8 += 12;
          v9 -= 48;
        }
        while (v9);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17GPUBindGroupEntryENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E327E028[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 40) = -1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16GPUBufferBindingENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int v3;
  unsigned int v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    do
    {
      v3 = __ldaxr(result);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, result));
    if (!v4)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::JSGPUBindGroupLayout::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

char *WTF::Vector<WebCore::GPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  void *v24;
  uint64_t v25;
  WTF *v26;
  __int128 v27;
  __int128 v28;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 48 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v17 = *(WTF **)a1;
        return (char *)v17 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (v9 < 0x5555556)
      {
        v10 = 48 * v9;
        v11 = WTF::fastMalloc((WTF *)(48 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = (_OWORD *)(v11 + v13);
          v15 = *(_OWORD *)((char *)v5 + v13);
          v16 = *(_OWORD *)((char *)v5 + v13 + 32);
          v14[1] = *(_OWORD *)((char *)v5 + v13 + 16);
          v14[2] = v16;
          *v14 = v15;
          v13 += 48;
        }
        while (48 * v6 != v13);
        v17 = *(WTF **)a1;
        if (v5)
        {
          if (v17 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v17 = *(WTF **)a1;
        }
        return (char *)v17 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x194B3FDE0);
    }
  }
  v18 = *(unsigned int *)(a1 + 8);
  v19 = v18 + (v18 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= a2)
    v20 = a2;
  if (v20 > v18)
  {
    if (v20 >= 0x5555556)
      goto LABEL_33;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = 48 * v20;
    v23 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v20));
    *(_DWORD *)(a1 + 8) = (v22 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v23;
    if ((_DWORD)v21)
    {
      v25 = 48 * v21;
      v26 = v5;
      do
      {
        v27 = *(_OWORD *)v26;
        v28 = *((_OWORD *)v26 + 2);
        v23[1] = *((_OWORD *)v26 + 1);
        v23[2] = v28;
        *v23 = v27;
        v23 += 3;
        v26 = (WTF *)((char *)v26 + 48);
        v25 -= 48;
      }
      while (v25);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v24);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::JSGPUBuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::WeakPtr<WebCore::GPUDevice,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::GPUDevice>(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v2 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v2 = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = a1 + 32;
    *(_BYTE *)(v2 + 32) = 0;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v4 & 0xFFFF000000000000 | v2;
    v5 = v4 & 0xFFFFFFFFFFFFLL;
    if ((v4 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v9 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v9)
        {
          v12 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v9));
          v5 = v12;
        }
        v10 = *(WTF **)(v5 + 16);
        if (v10)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v11 = v5;
          WTF::fastFree(v10, v3);
          v5 = v11;
        }
        WTF::fastFree((WTF *)v5, v3);
      }
    }
  }
  return *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLEnumeration<WebCore::GPUTextureFormat>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::GPUTextureFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  unint64_t IndexQuickly;
  uint64_t v12;
  JSC::VM *v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  unsigned __int16 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v13 = v25;
      result = WebCore::parseEnumeration<WebCore::GPUTextureFormat>(a1, IndexQuickly);
      v14 = result;
      if (!*((_DWORD *)v13 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v13), (result & 1) == 0))
      {
        if (v14 <= 0xFFu)
        {
          result = JSC::throwTypeError();
        }
        else
        {
          LOBYTE(v25) = v14;
          v15 = *(unsigned int *)(v12 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(v12 + 8))
          {
            result = (uint64_t)WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v12, (WTF *)(v15 + 1), (unint64_t)&v25);
            v15 = *(unsigned int *)(v12 + 12);
            *(_BYTE *)(*(_QWORD *)v12 + v15) = *(_BYTE *)result;
          }
          else
          {
            *(_BYTE *)(*(_QWORD *)v12 + v15) = v14;
          }
          *(_DWORD *)(v12 + 12) = v15 + 1;
        }
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        v25 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v19 = v25;
        v20 = WebCore::parseEnumeration<WebCore::GPUTextureFormat>(a1, v17);
        if (!*((_DWORD *)v19 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) == 0)
        {
          if (v20 <= 0xFFu)
          {
            JSC::throwTypeError();
          }
          else
          {
            LOBYTE(v25) = v20;
            v21 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
            {
              v22 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v18, (WTF *)(v21 + 1), (unint64_t)&v25);
              v21 = *(unsigned int *)(v18 + 12);
              *(_BYTE *)(*(_QWORD *)v18 + v21) = *v22;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)v18 + v21) = v20;
            }
            *(_DWORD *)(v18 + 12) = v21 + 1;
          }
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSGPUCanvasContext::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_17HTMLCanvasElementEEENS4_INS_15OffscreenCanvasEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_@<X0>(uint64_t result@<X0>, WebCore::HTMLElement *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = result;
  v5 = **(_QWORD **)result;
  if (!v5)
  {
    v6 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(v6 + 8))
      goto LABEL_18;
    if (*(_QWORD *)v6)
      result = WebCore::toJS(*(WebCore **)(result + 16), *(JSC::JSGlobalObject **)(result + 24), *(WebCore::JSDOMGlobalObject **)v6, a2);
    else
      result = 2;
    v7 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v7 + 8))
      *(_BYTE *)(v7 + 8) = 1;
    *(_QWORD *)v7 = result;
    v5 = **(_QWORD **)v3;
  }
  if (v5 != 1)
  {
LABEL_16:
    v10 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(_OWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v3 + 32);
    return result;
  }
  v8 = *(_QWORD *)(v3 + 32);
  if (*(_DWORD *)(v8 + 8) == 1)
  {
    if (*(_QWORD *)v8)
      result = WebCore::wrap<WebCore::OffscreenCanvas>(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)v8);
    else
      result = 2;
    v9 = *(_QWORD *)(v3 + 8);
    if (!*(_BYTE *)(v9 + 8))
      *(_BYTE *)(v9 + 8) = 1;
    *(_QWORD *)v9 = result;
    goto LABEL_16;
  }
LABEL_18:
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLCanvasElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15OffscreenCanvasENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(v11);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLCanvasElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15OffscreenCanvasENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17HTMLCanvasElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15OffscreenCanvasENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WebCore::OffscreenCanvas **a2)
{
  WebCore::OffscreenCanvas *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

uint64_t WebCore::JSGPUCommandBuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUCommandEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::RefCounted<WebCore::WebGPU::CompilationInfo>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF *v8;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3)
    {
      v4 = *(WTF ***)(this + 8);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            v7 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
            *((_QWORD *)v6 + 1) = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
            WTF::fastFree(v6, a2);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v8 = *(WTF **)(v2 + 8);
    if (v8)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v8, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::JSGPUCompilationInfo::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUCompilationMessage::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSGPUComputePassEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::AlternativeTextContextController::removeAlternativesForContext(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const void *v28;
  int v29;
  const void **v30;
  const void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;

  if (a2)
  {
    v3 = *a1;
    if (*a1)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      v9 = *(_QWORD *)(v3 + 16 * v8);
      if (v9 != a2)
      {
        v10 = 1;
        while (v9)
        {
          v8 = ((_DWORD)v8 + v10) & v4;
          v9 = *(_QWORD *)(v3 + 16 * v8);
          ++v10;
          if (v9 == a2)
            goto LABEL_9;
        }
        v8 = *(unsigned int *)(v3 - 4);
      }
LABEL_9:
      if (v8 != *(_DWORD *)(v3 - 4))
      {
        v11 = (_QWORD *)(v3 + 16 * v8);
        v12 = (const void *)v11[1];
        v11[1] = 0;
        v13 = (_QWORD *)*a1;
        if (!*a1 || (v13 += 2 * *((unsigned int *)v13 - 1), v13 != v11))
        {
          if (v13 != v11)
          {
            *v11 = -1;
            v11[1] = 0;
            ++*(_DWORD *)(*a1 - 16);
            v14 = *a1;
            v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
            *(_DWORD *)(v14 - 12) = v15;
            v16 = *a1;
            if (*a1)
            {
              v17 = 6 * *(_DWORD *)(v16 - 12);
              v18 = *(_DWORD *)(v16 - 4);
              if (v17 < v18 && v18 >= 9)
                WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v18 >> 1);
            }
          }
        }
        if (v12)
        {
          v22 = a1[1];
          v21 = a1 + 1;
          v20 = v22;
          if (v22)
          {
            v23 = *(_DWORD *)(v20 - 8);
            v24 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
            v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
            v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
            v27 = v23 & ((v26 >> 31) ^ v26);
            v28 = *(const void **)(v20 + 16 * v27);
            if (v28 != v12)
            {
              v29 = 1;
              while (v28)
              {
                v27 = ((_DWORD)v27 + v29) & v23;
                v28 = *(const void **)(v20 + 16 * v27);
                ++v29;
                if (v28 == v12)
                  goto LABEL_32;
              }
              v27 = *(unsigned int *)(v20 - 4);
            }
LABEL_32:
            if (v27 != *(_DWORD *)(v20 - 4))
            {
              v30 = (const void **)(v20 + 16 * v27);
              v31 = *v30;
              *v30 = 0;
              if (v31)
                CFRelease(v31);
              *v30 = (const void *)-1;
              ++*(_DWORD *)(*v21 - 16);
              v32 = *v21;
              if (*v21)
                v33 = *(_DWORD *)(v32 - 12) - 1;
              else
                v33 = -1;
              *(_DWORD *)(v32 - 12) = v33;
              v34 = *v21;
              if (*v21)
              {
                v35 = 6 * *(_DWORD *)(v34 - 12);
                v36 = *(_DWORD *)(v34 - 4);
                if (v35 < v36 && v36 >= 9)
                  WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(v21, v36 >> 1, 0);
              }
            }
          }
          CFRelease(v12);
        }
      }
    }
  }
}

void sub_194B40D84(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::AlternativeTextUIController::addAlternatives(uint64_t *a1, uint64_t cf)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  CFTypeRef v12;
  uint64_t *v13;
  int v14;
  uint64_t IdentifierInternal;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  const void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;

  if (cf)
  {
    CFRetain((CFTypeRef)cf);
    v5 = a1 + 1;
    v4 = a1[1];
    if (v4
      || (WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(a1 + 1, 8u, 0), (v4 = *v5) != 0))
    {
      v6 = *(_DWORD *)(v4 - 8);
    }
    else
    {
      v6 = 0;
    }
    v7 = (~(cf << 32) + cf) ^ ((unint64_t)(~(cf << 32) + cf) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = (uint64_t *)(v4 + 16 * v10);
    v12 = (CFTypeRef)*v11;
    if (*v11)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        if (v12 == (CFTypeRef)cf)
        {
          v29 = v11[1];
          CFRelease((CFTypeRef)cf);
          return v29;
        }
        if (v12 == (CFTypeRef)-1)
          v13 = v11;
        v10 = (v10 + v14) & v6;
        v11 = (uint64_t *)(v4 + 16 * v10);
        v12 = (CFTypeRef)*v11;
        ++v14;
      }
      while (*v11);
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = v13;
      }
    }
    *v11 = cf;
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    v16 = *a1;
    if (*a1
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, 8u), (v16 = *a1) != 0))
    {
      v17 = *(_DWORD *)(v16 - 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = (uint64_t *)(v16 + 16 * v21);
    v23 = *v22;
    if (*v22)
    {
      v24 = 0;
      v25 = 1;
      while (v23 != IdentifierInternal)
      {
        if (v23 == -1)
          v24 = v22;
        v21 = (v21 + v25) & v17;
        v22 = (uint64_t *)(v16 + 16 * v21);
        v23 = *v22;
        ++v25;
        if (!*v22)
        {
          if (v24)
          {
            *v24 = 0;
            v24[1] = 0;
            --*(_DWORD *)(*a1 - 16);
            v22 = v24;
          }
          goto LABEL_24;
        }
      }
LABEL_42:
      v11[1] = IdentifierInternal;
      v35 = *v5;
      if (*v5)
        v36 = *(_DWORD *)(v35 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(v35 - 12) = v36;
      v37 = *v5;
      if (*v5)
        v38 = *(_DWORD *)(v37 - 12);
      else
        v38 = 0;
      v39 = (*(_DWORD *)(v37 - 16) + v38);
      v40 = *(unsigned int *)(v37 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
          return v11[1];
      }
      else
      {
        if (3 * v40 > 4 * v39)
          return v11[1];
        if (!(_DWORD)v40)
        {
          v41 = 8;
          goto LABEL_53;
        }
      }
      v41 = (_DWORD)v40 << (6 * *(_DWORD *)(v37 - 12) >= (2 * v40));
LABEL_53:
      v11 = WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(a1 + 1, v41, (const void **)v11);
      return v11[1];
    }
LABEL_24:
    *v22 = IdentifierInternal;
    CFRetain((CFTypeRef)cf);
    v26 = (const void *)v22[1];
    v22[1] = cf;
    if (v26)
      CFRelease(v26);
    v27 = *a1;
    if (*a1)
      v28 = *(_DWORD *)(v27 - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(v27 - 12) = v28;
    v30 = *a1;
    if (*a1)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_42;
    }
    else
    {
      if (3 * v33 > 4 * v32)
        goto LABEL_42;
      if (!(_DWORD)v33)
      {
        v34 = 8;
        goto LABEL_41;
      }
    }
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_41:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v34);
    goto LABEL_42;
  }
  return 0;
}

void sub_194B410C4(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebCore::AlternativeTextUIController::replaceAlternatives(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  const void *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  const void *v34;
  uint64_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;

  WebCore::AlternativeTextContextController::removeAlternativesForContext(a1, a3);
  if (!a2)
    return;
  CFRetain((CFTypeRef)a2);
  v7 = a1 + 1;
  v6 = a1[1];
  if (v6
    || (WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(a1 + 1, 8u, 0), (v6 = *v7) != 0))
  {
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v6 + 16 * v12);
  v14 = (const void *)*v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == (const void *)a2)
      {
        v13[1] = a3;
        CFRelease((CFTypeRef)a2);
        goto LABEL_27;
      }
      if (v14 == (const void *)-1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (uint64_t *)(v6 + 16 * v12);
      v14 = (const void *)*v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*v7 - 16);
      v13 = v15;
    }
  }
  *v13 = a2;
  v13[1] = a3;
  v17 = *v7;
  if (*v7)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_27;
    goto LABEL_23;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
      goto LABEL_26;
    }
LABEL_23:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
LABEL_26:
    WTF::HashTable<WTF::RetainPtr<BETextAlternatives>,WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashMap<WTF::RetainPtr<BETextAlternatives>,WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::DictationContextType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<BETextAlternatives>>>::rehash(a1 + 1, v23, (const void **)v13);
  }
LABEL_27:
  v24 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, 8u), (v24 = *a1) != 0))
  {
    v25 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v25 = 0;
  }
  v26 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
  v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
  v29 = v25 & ((v28 >> 31) ^ v28);
  v30 = (uint64_t *)(v24 + 16 * v29);
  v31 = *v30;
  if (!*v30)
  {
LABEL_38:
    *v30 = a3;
    CFRetain((CFTypeRef)a2);
    v34 = (const void *)v30[1];
    v30[1] = a2;
    if (v34)
      CFRelease(v34);
    v35 = *a1;
    if (*a1)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v38 = *a1;
    if (*a1)
      v39 = *(_DWORD *)(v38 - 12);
    else
      v39 = 0;
    v40 = (*(_DWORD *)(v38 - 16) + v39);
    v41 = *(unsigned int *)(v38 - 4);
    if (v41 > 0x400)
    {
      if (v41 > 2 * v40)
        return;
    }
    else
    {
      if (3 * v41 > 4 * v40)
        return;
      if (!(_DWORD)v41)
      {
        v42 = 8;
        goto LABEL_55;
      }
    }
    v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
LABEL_55:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v42);
    return;
  }
  v32 = 0;
  v33 = 1;
  while (v31 != a3)
  {
    if (v31 == -1)
      v32 = v30;
    v29 = (v29 + v33) & v25;
    v30 = (uint64_t *)(v24 + 16 * v29);
    v31 = *v30;
    ++v33;
    if (!*v30)
    {
      if (v32)
      {
        *v32 = 0;
        v32[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v30 = v32;
      }
      goto LABEL_38;
    }
  }
  CFRetain((CFTypeRef)a2);
  v37 = (const void *)v30[1];
  v30[1] = a2;
  if (v37)
    CFRelease(v37);
}

void sub_194B41408(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

const void *WebCore::AlternativeTextUIController::alternativesForContext(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void *v11;

  if (!a2)
    return 0;
  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  v10 = v2 + 16 * v7;
  v11 = *(const void **)(v10 + 8);
  if (v11)
  {
    CFRetain(*(CFTypeRef *)(v10 + 8));
    CFRelease(v11);
  }
  return v11;
}

uint64_t WebCore::AttributedString::AttributedString(uint64_t this)
{
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

{
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

void WebCore::AttributedString::~AttributedString(WebCore::AttributedString *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;

  if (*((_BYTE *)this + 32))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = *((_QWORD *)this + 3);
        do
        {
          v6 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5 != -1)
          {
            v7 = *(unsigned int *)(v5 + 48);
            if ((_DWORD)v7 != -1)
            {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v7])(&v10, v5 + 8);
              v6 = *(WTF::StringImpl **)v5;
            }
            *(_DWORD *)(v5 + 48) = -1;
            *(_QWORD *)v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 56;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 8, a2);
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
}

uint64_t WebCore::AttributedString::AttributedString(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    *(_QWORD *)(result + 24) = 0;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(result + 16) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(result + 20) = v3;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    *(_QWORD *)(result + 24) = 0;
    v4 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(result + 24) = v4;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t WebCore::AttributedString::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char v29;
  char v30;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_DWORD *)(a1 + 20);
  v7 = *(WTF **)(a1 + 8);
  if (v6)
  {
    v8 = (WTF *)((char *)v7 + 24 * v6);
    do
    {
      v9 = *((_QWORD *)v7 + 2);
      if (v9)
      {
        v10 = *(unsigned int *)(v9 - 4);
        if ((_DWORD)v10)
        {
          v11 = *((_QWORD *)v7 + 2);
          do
          {
            v12 = *(WTF::StringImpl **)v11;
            if (*(_QWORD *)v11 != -1)
            {
              v13 = *(unsigned int *)(v11 + 48);
              if ((_DWORD)v13 != -1)
              {
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v13])(&v28, v11 + 8);
                v12 = *(WTF::StringImpl **)v11;
              }
              *(_DWORD *)(v11 + 48) = -1;
              *(_QWORD *)v11 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, a2);
                else
                  *(_DWORD *)v12 -= 2;
              }
            }
            v11 += 56;
            --v10;
          }
          while (v10);
        }
        WTF::fastFree((WTF *)(v9 - 16), a2);
      }
      v7 = (WTF *)((char *)v7 + 24);
    }
    while (v7 != v8);
    v7 = *(WTF **)(a1 + 8);
  }
  if (v7)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v14 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v14;
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v15 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = 0;
      v16 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v15;
      if (v16)
      {
        v17 = *(unsigned int *)(v16 - 4);
        if ((_DWORD)v17)
        {
          v18 = v16;
          do
          {
            v19 = *(WTF::StringImpl **)v18;
            if (*(_QWORD *)v18 != -1)
            {
              v20 = *(unsigned int *)(v18 + 48);
              if ((_DWORD)v20 != -1)
              {
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v20])(&v29, v18 + 8);
                v19 = *(WTF::StringImpl **)v18;
              }
              *(_DWORD *)(v18 + 48) = -1;
              *(_QWORD *)v18 = 0;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                  WTF::StringImpl::destroy(v19, a2);
                else
                  *(_DWORD *)v19 -= 2;
              }
            }
            v18 += 56;
            --v17;
          }
          while (v17);
        }
        WTF::fastFree((WTF *)(v16 - 16), a2);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v21 = *(_QWORD *)(a1 + 24);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 - 4);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(a1 + 24);
        do
        {
          v24 = *(WTF::StringImpl **)v23;
          if (*(_QWORD *)v23 != -1)
          {
            v25 = *(unsigned int *)(v23 + 48);
            if ((_DWORD)v25 != -1)
            {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v25])(&v30, v23 + 8);
              v24 = *(WTF::StringImpl **)v23;
            }
            *(_DWORD *)(v23 + 48) = -1;
            *(_QWORD *)v23 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, a2);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          v23 += 56;
          --v22;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)(v21 - 16), a2);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    v26 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)(a1 + 24) = v26;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebCore::AttributedString::AttributedString(uint64_t this, const WebCore::AttributedString *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = this;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *((unsigned int *)a2 + 5);
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return this;
    }
    v6 = 24 * v5;
    v7 = WTF::fastMalloc((WTF *)(24 * v5));
    *(_DWORD *)(v3 + 16) = v6 / 0x18;
    *(_QWORD *)(v3 + 8) = v7;
    v8 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v8)
    {
      v9 = (uint64_t *)(v7 + 16);
      v10 = 24 * v8;
      v11 = (uint64_t *)(*((_QWORD *)a2 + 1) + 16);
      do
      {
        *((_OWORD *)v9 - 1) = *((_OWORD *)v11 - 1);
        v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v9, v11)+ 3;
        v11 += 3;
        v10 -= 24;
      }
      while (v10);
    }
  }
  *(_BYTE *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(v3 + 24), (uint64_t *)a2 + 3);
    *(_BYTE *)(v3 + 32) = 1;
  }
  return v3;
}

void sub_194B41A8C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if (*(_BYTE *)(v13 + 32))
  {
    v17 = *v15;
    if (v17)
    {
      v18 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v18)
      {
        v20 = v17;
        do
        {
          v21 = *(WTF::StringImpl **)v20;
          if (*(_QWORD *)v20 != -1)
          {
            v22 = *(unsigned int *)(v20 + 48);
            if ((_DWORD)v22 != -1)
            {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v22])(&a13, v20 + 8);
              v21 = *(WTF::StringImpl **)v20;
            }
            *(_DWORD *)(v20 + 48) = -1;
            *(_QWORD *)v20 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, a2);
              else
                *(_DWORD *)v21 -= 2;
            }
          }
          v20 += 56;
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)(v17 - 16), a2);
    }
  }
  WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v14, a2);
  v23 = *(WTF::StringImpl **)v13;
  *(_QWORD *)v13 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::AttributedString::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF **v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char v43;
  char v44;
  char v45;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (a2 != a1)
  {
    v6 = (WTF **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 20);
    v8 = *(_DWORD *)(a2 + 20);
    if (v7 <= v8)
    {
      v16 = *(_DWORD *)(a1 + 16);
      if (v8 <= v16)
      {
        v8 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        if (v16)
        {
          v17 = *v6;
          if (v7)
          {
            v18 = (WTF *)((char *)v17 + 24 * v7);
            do
            {
              v19 = *((_QWORD *)v17 + 2);
              if (v19)
              {
                v20 = *(unsigned int *)(v19 - 4);
                if ((_DWORD)v20)
                {
                  v21 = *((_QWORD *)v17 + 2);
                  do
                  {
                    v22 = *(WTF::StringImpl **)v21;
                    if (*(_QWORD *)v21 != -1)
                    {
                      v23 = *(unsigned int *)(v21 + 48);
                      if ((_DWORD)v23 != -1)
                      {
                        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v23])(&v44, v21 + 8);
                        v22 = *(WTF::StringImpl **)v21;
                      }
                      *(_DWORD *)(v21 + 48) = -1;
                      *(_QWORD *)v21 = 0;
                      if (v22)
                      {
                        if (*(_DWORD *)v22 == 2)
                          WTF::StringImpl::destroy(v22, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v22 -= 2;
                      }
                    }
                    v21 += 56;
                    --v20;
                  }
                  while (v20);
                }
                WTF::fastFree((WTF *)(v19 - 16), (void *)a2);
              }
              v17 = (WTF *)((char *)v17 + 24);
            }
            while (v17 != v18);
            *(_DWORD *)(a1 + 20) = 0;
            v17 = *(WTF **)(a1 + 8);
            v6 = (WTF **)(a1 + 8);
          }
          if (v17)
          {
            *(_QWORD *)(a1 + 8) = 0;
            *(_DWORD *)(a1 + 16) = 0;
            WTF::fastFree(v17, (void *)a2);
          }
        }
        WTF::Vector<std::pair<WebCore::AttributedString::Range,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v6, *(unsigned int *)(a2 + 20));
        v8 = *(_DWORD *)(a1 + 20);
      }
    }
    else
    {
      v9 = (uint64_t)*v6 + 24 * v7;
      v10 = (uint64_t)*v6 + 24 * v8;
      do
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(unsigned int *)(v11 - 4);
          if ((_DWORD)v12)
          {
            v13 = *(_QWORD *)(v10 + 16);
            do
            {
              v14 = *(WTF::StringImpl **)v13;
              if (*(_QWORD *)v13 != -1)
              {
                v15 = *(unsigned int *)(v13 + 48);
                if ((_DWORD)v15 != -1)
                {
                  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v15])(&v43, v13 + 8);
                  v14 = *(WTF::StringImpl **)v13;
                }
                *(_DWORD *)(v13 + 48) = -1;
                *(_QWORD *)v13 = 0;
                if (v14)
                {
                  if (*(_DWORD *)v14 == 2)
                    WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v14 -= 2;
                }
              }
              v13 += 56;
              --v12;
            }
            while (v12);
          }
          WTF::fastFree((WTF *)(v11 - 16), (void *)a2);
        }
        v10 += 24;
      }
      while (v10 != v9);
      *(_DWORD *)(a1 + 20) = v8;
      v6 = (WTF **)(a1 + 8);
    }
    v24 = *(_QWORD *)(a2 + 8);
    v25 = *v6;
    if (v8)
    {
      v26 = (uint64_t *)((char *)v25 + 16);
      v27 = 24 * v8;
      v28 = (uint64_t *)(v24 + 16);
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
        v26 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v26, v28)+ 3;
        v28 += 3;
        v27 -= 24;
      }
      while (v27);
      v24 = *(_QWORD *)(a2 + 8);
      v29 = *(_DWORD *)(a1 + 20);
      v25 = *(WTF **)(a1 + 8);
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_DWORD *)(a2 + 20);
    if (v29 != v30)
    {
      v31 = 24 * v29 + 16;
      v32 = (uint64_t *)((char *)v25 + v31);
      v33 = 24 * v30 - 24 * v29;
      v34 = (uint64_t *)(v24 + v31);
      do
      {
        *((_OWORD *)v32 - 1) = *((_OWORD *)v34 - 1);
        v32 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v32, v34)+ 3;
        v34 += 3;
        v33 -= 24;
      }
      while (v33);
      v29 = *(_DWORD *)(a2 + 20);
    }
    *(_DWORD *)(a1 + 20) = v29;
  }
  v35 = (uint64_t *)(a1 + 24);
  v36 = (uint64_t *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(a1 + 32))
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(v35, v36);
  }
  else if (*(_BYTE *)(a1 + 32))
  {
    v37 = *v35;
    if (*v35)
    {
      v38 = *(unsigned int *)(v37 - 4);
      if ((_DWORD)v38)
      {
        v39 = *v35;
        do
        {
          v40 = *(WTF::StringImpl **)v39;
          if (*(_QWORD *)v39 != -1)
          {
            v41 = *(unsigned int *)(v39 + 48);
            if ((_DWORD)v41 != -1)
            {
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v41])(&v45, v39 + 8);
              v40 = *(WTF::StringImpl **)v39;
            }
            *(_DWORD *)(v39 + 48) = -1;
            *(_QWORD *)v39 = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v36);
              else
                *(_DWORD *)v40 -= 2;
            }
          }
          v39 += 56;
          --v38;
        }
        while (v38);
      }
      WTF::fastFree((WTF *)(v37 - 16), v36);
    }
    *(_BYTE *)(a1 + 32) = 0;
  }
  else
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(v35, v36);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

uint64_t WebCore::AttributedString::AttributedString(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v4;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a4 + 8))
  {
    *(_QWORD *)(result + 24) = 0;
    v6 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 24) = v6;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v4;
  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(result + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(result + 20) = v5;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (*((_BYTE *)a4 + 8))
  {
    *(_QWORD *)(result + 24) = 0;
    v6 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 24) = v6;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t WebCore::AttributedString::rangesAreSafe(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  if (*a1)
    v2 = *(unsigned int *)(v2 + 4);
  v3 = *(_DWORD *)(a2 + 12);
  if (!v3)
    return 1;
  v4 = *(unint64_t **)a2;
  v5 = *(_QWORD *)a2 + 24 * v3;
  while (*v4 <= v2)
  {
    v6 = v4[1];
    if (v6 > v2 || v6 + *v4 > v2)
      break;
    v4 += 3;
    if (v4 == (unint64_t *)v5)
      return 1;
  }
  return 0;
}

BOOL WebCore::AttributedString::isNull(WebCore::AttributedString *this)
{
  return *(_QWORD *)this == 0;
}

void WebCore::AttributedString::documentAttributesAsNSDictionary(WebCore::AttributedString *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 32))
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    WebCore::toNSDictionary((uint64_t)a2, (uint64_t *)this + 3, (uint64_t)&v5, (uint64_t)&v4, (uint64_t)&v3);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), v2);
    if (v4)
      WTF::fastFree((WTF *)(v4 - 16), v2);
    if (v5)
      WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_194B420D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  if (a11)
    WTF::fastFree((WTF *)(a11 - 16), a2);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WebCore::toNSDictionary(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  const __CFString *v20;
  CFTypeRef v21;
  uint64_t v22;
  _QWORD *v24;
  CFTypeRef cf;
  _QWORD v26[3];
  _QWORD *v27;

  v9 = objc_alloc(MEMORY[0x1E0C99E08]);
  if (*a2)
    v10 = *(unsigned int *)(*a2 - 12);
  else
    v10 = 0;
  v11 = (void *)objc_msgSend(v9, "initWithCapacity:", v10, a1);
  v12 = *a2;
  if (*a2)
  {
    v13 = *(unsigned int *)(v12 - 4);
    v14 = v12 + 56 * v13;
    if (*(_DWORD *)(v12 - 12))
    {
      v15 = *a2;
      if ((_DWORD)v13)
      {
        v16 = 56 * v13;
        v15 = *a2;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 56;
          v16 -= 56;
          if (!v16)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v12)
        goto LABEL_12;
      goto LABEL_16;
    }
    v15 = v12 + 56 * v13;
  }
  else
  {
    v15 = 0;
    LODWORD(v13) = 0;
  }
  v14 = v12 + 56 * v13;
  if (v12)
  {
LABEL_12:
    v17 = v12 + 56 * *(unsigned int *)(v12 - 4);
    goto LABEL_17;
  }
LABEL_16:
  v17 = 0;
LABEL_17:
  if (v17 == v15)
  {
LABEL_32:
    *v24 = v11;
  }
  else
  {
    while (1)
    {
      v26[0] = a3;
      v26[1] = a4;
      v26[2] = a5;
      v18 = *(unsigned int *)(v15 + 48);
      if ((_DWORD)v18 == -1)
        break;
      v27 = v26;
      ((void (*)(CFTypeRef *__return_ptr, _QWORD **, uint64_t))off_1E327F848[v18])(&cf, &v27, v15 + 8);
      v19 = cf;
      if (cf)
      {
        if (*(_QWORD *)v15)
          v20 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v20 = &stru_1E3487BC0;
        objc_msgSend(v11, "setObject:forKey:", v19, v20);
        v21 = cf;
        cf = 0;
        if (v21)
          CFRelease(v21);
      }
      v22 = v15 + 56;
      v15 = v14;
      if (v22 != v14)
      {
        v15 = v22;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 56;
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v15 == v17)
        goto LABEL_32;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    __break(1u);
  }
}

void sub_194B422E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void WebCore::AttributedString::nsAttributedString(WebCore::AttributedString *this@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)this)
  {
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v4 = objc_alloc(MEMORY[0x1E0CB3778]);
    if (*(_QWORD *)this)
      v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v5 = &stru_1E3487BC0;
    v6 = objc_msgSend(v4, "initWithString:", v5);
    v8 = (void *)v6;
    v9 = *((unsigned int *)this + 5);
    if ((_DWORD)v9)
    {
      v10 = 24 * v9;
      v11 = (uint64_t *)(*((_QWORD *)this + 1) + 16);
      do
      {
        WebCore::toNSDictionary((uint64_t)&v14, v11, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15);
        v12 = v14;
        objc_msgSend(v8, "addAttributes:range:", v14, *(v11 - 2), *(v11 - 1));
        if (v12)
          CFRelease(v12);
        v11 += 3;
        v10 -= 24;
      }
      while (v10);
      v13 = v15;
      *a2 = (uint64_t)v8;
      if (v13)
        WTF::fastFree((WTF *)(v13 - 16), v7);
    }
    else
    {
      *a2 = v6;
    }
    if (v16)
      WTF::fastFree((WTF *)(v16 - 16), v7);
    if (v17)
      WTF::fastFree((WTF *)(v17 - 16), v7);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_194B42434(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10)
    WTF::fastFree((WTF *)(a10 - 16), a2);
  if (a11)
    WTF::fastFree((WTF *)(a11 - 16), a2);
  if (a12)
    WTF::fastFree((WTF *)(a12 - 16), a2);
  _Unwind_Resume(exception_object);
}

void WebCore::AttributedString::fromNSAttributedString(id *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  v2 = 0;
  WebCore::AttributedString::fromNSAttributedStringAndDocumentAttributes(a1, &v2, a2);
}

void WebCore::AttributedString::fromNSAttributedStringAndDocumentAttributes(id *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  id v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void *v30;
  void *v31;
  void *v32;
  WTF::StringImpl *v33;
  _QWORD v34[8];
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t, WTF::StringImpl *);
  const char *v41;
  _QWORD v42[3];
  char v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  uint64_t (*v49)(uint64_t, void *);
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t (*v56)(uint64_t, void *);
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t (*v63)(uint64_t, void *);
  const char *v64;
  uint64_t v65;
  char v66;

  v59 = 0;
  v60 = &v59;
  v61 = 0x3812000000;
  v62 = __Block_byref_object_copy__3;
  v63 = __Block_byref_object_dispose__3;
  v64 = "";
  v65 = 0;
  v52 = 0;
  v53 = &v52;
  v54 = 0x3812000000;
  v55 = __Block_byref_object_copy__1;
  v56 = __Block_byref_object_dispose__2;
  v57 = "";
  v58 = 0;
  v45 = 0;
  v46 = &v45;
  v47 = 0x3812000000;
  v48 = __Block_byref_object_copy__4;
  v49 = __Block_byref_object_dispose__5;
  v50 = "";
  v51 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x5812000000;
  v39 = __Block_byref_object_copy__7;
  v40 = __Block_byref_object_dispose__8;
  v44 = 0;
  v41 = "";
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  MEMORY[0x19AEA5508](&v35, objc_msgSend(*a1, "string"));
  v7 = v35;
  v35 = 0;
  v8 = (WTF::StringImpl *)v37[6];
  v37[6] = (uint64_t)v7;
  if (v8)
  {
    v9 = *(_DWORD *)v8 - 2;
    if (*(_DWORD *)v8 != 2)
    {
LABEL_3:
      *(_DWORD *)v8 = v9;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v8, v6);
    v8 = v35;
    v35 = 0;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 2;
      if (*(_DWORD *)v8 != 2)
        goto LABEL_3;
      WTF::StringImpl::destroy(v8, v33);
    }
  }
LABEL_4:
  v10 = *a1;
  v11 = objc_msgSend(v10, "length");
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = ___ZN7WebCore16AttributedString43fromNSAttributedStringAndDocumentAttributesEON3WTF9RetainPtrI18NSAttributedStringEEONS2_I12NSDictionaryEE_block_invoke;
  v34[3] = &unk_1E327F738;
  v34[4] = &v36;
  v34[5] = &v59;
  v34[6] = &v52;
  v34[7] = &v45;
  objc_msgSend(v10, "enumerateAttributesInRange:options:usingBlock:", 0, v11, 0x100000, v34);
  if (*a2)
  {
    WebCore::extractDictionary(&v35, *a2, (uint64_t)(v60 + 6), (uint64_t)(v53 + 6), (uint64_t)(v46 + 6));
    v13 = v37;
    v14 = v35;
    if (*((_BYTE *)v37 + 80))
    {
      v35 = 0;
      v15 = v37[9];
      v37[9] = (uint64_t)v14;
      if (v15)
      {
        v16 = *(unsigned int *)(v15 - 4);
        if ((_DWORD)v16)
        {
          v17 = v15;
          do
          {
            v18 = *(WTF::StringImpl **)v17;
            if (*(_QWORD *)v17 != -1)
            {
              v19 = *(unsigned int *)(v17 + 48);
              if ((_DWORD)v19 != -1)
              {
                ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v19])(&v66, v17 + 8);
                v18 = *(WTF::StringImpl **)v17;
              }
              *(_DWORD *)(v17 + 48) = -1;
              *(_QWORD *)v17 = 0;
              if (v18)
              {
                if (*(_DWORD *)v18 == 2)
                  WTF::StringImpl::destroy(v18, v12);
                else
                  *(_DWORD *)v18 -= 2;
              }
            }
            v17 += 56;
            --v16;
          }
          while (v16);
        }
        WTF::fastFree((WTF *)(v15 - 16), v12);
        v21 = v35;
        if (v35)
        {
          v22 = *((unsigned int *)v35 - 1);
          if ((_DWORD)v22)
          {
            v23 = v35;
            do
            {
              v24 = *(WTF::StringImpl **)v23;
              if (*(_QWORD *)v23 != -1)
              {
                v25 = *((unsigned int *)v23 + 12);
                if ((_DWORD)v25 != -1)
                {
                  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v25])(&v66, (char *)v23 + 8);
                  v24 = *(WTF::StringImpl **)v23;
                }
                *((_DWORD *)v23 + 12) = -1;
                *(_QWORD *)v23 = 0;
                if (v24)
                {
                  if (*(_DWORD *)v24 == 2)
                    WTF::StringImpl::destroy(v24, v20);
                  else
                    *(_DWORD *)v24 -= 2;
                }
              }
              v23 = (WTF::StringImpl *)((char *)v23 + 56);
              --v22;
            }
            while (v22);
          }
          WTF::fastFree((WTF::StringImpl *)((char *)v21 - 16), v20);
        }
      }
    }
    else
    {
      v37[9] = (uint64_t)v35;
      *((_BYTE *)v13 + 80) = 1;
    }
  }
  v26 = v37;
  v27 = *((_OWORD *)v37 + 3);
  v37[6] = 0;
  v26[7] = 0;
  *(_OWORD *)a3 = v27;
  *(_QWORD *)&v27 = v26[8];
  v26[8] = 0;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (*((_BYTE *)v26 + 80))
  {
    v28 = v26[9];
    v26[9] = 0;
    *(_QWORD *)(a3 + 24) = v28;
    *(_BYTE *)(a3 + 32) = 1;
  }
  _Block_object_dispose(&v36, 8);
  WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)v42, v29);
  _Block_object_dispose(&v45, 8);
  if (v51)
    WTF::fastFree((WTF *)(v51 - 16), v30);
  _Block_object_dispose(&v52, 8);
  if (v58)
    WTF::fastFree((WTF *)(v58 - 16), v31);
  _Block_object_dispose(&v59, 8);
  if (v65)
    WTF::fastFree((WTF *)(v65 - 16), v32);
}

void sub_194B42898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  WebCore::AttributedString *v35;
  uint64_t v36;
  WTF::StringImpl *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a18, 8);
  WebCore::AttributedString::~AttributedString(v35, v38);
  _Block_object_dispose(&a29, 8);
  if (a35)
    WTF::fastFree((WTF *)(a35 - 16), v39);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  v41 = *(_QWORD *)(v36 - 136);
  if (v41)
    WTF::fastFree((WTF *)(v41 - 16), v40);
  _Block_object_dispose((const void *)(v36 - 128), 8);
  v43 = *(_QWORD *)(v36 - 80);
  if (v43)
    WTF::fastFree((WTF *)(v43 - 16), v42);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__3(uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), a2);
  return result;
}

uint64_t __Block_byref_object_dispose__2(uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), a2);
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

{
  _OWORD *v2;
  __int128 *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  v2 = (_OWORD *)(result + 64);
  *(_QWORD *)(result + 48) = result + 64;
  *(_QWORD *)(result + 56) = 5;
  v3 = *(__int128 **)(a2 + 48);
  if (v3 == (__int128 *)(a2 + 64))
  {
    v5 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        v7 = *v3++;
        *v2++ = v7;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 48) = a2 + 64;
    *(_QWORD *)(result + 48) = v3;
    v4 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 5;
    *(_DWORD *)(result + 56) = v4;
  }
  v8 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t __Block_byref_object_dispose__5(uint64_t result, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48);
  if (v2)
    return WTF::fastFree((WTF *)(v2 - 16), a2);
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = v2;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 56) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(result + 64) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_QWORD *)(result + 72) = 0;
    v4 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(result + 72) = v4;
    *(_BYTE *)(result + 80) = 1;
  }
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::AttributedString::~AttributedString((WebCore::AttributedString *)(a1 + 48), a2);
}

void sub_194B42BF0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  if (a13)
  {
    v18 = *(unsigned int *)(a13 - 4);
    if ((_DWORD)v18)
    {
      v20 = a13;
      do
      {
        v21 = *(WTF::StringImpl **)v20;
        if (*(_QWORD *)v20 != -1)
        {
          v22 = *(unsigned int *)(v20 + 48);
          if ((_DWORD)v22 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v22])(&a17, v20 + 8);
            v21 = *(WTF::StringImpl **)v20;
          }
          *(_DWORD *)(v20 + 48) = -1;
          *(_QWORD *)v20 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, a2);
            else
              *(_DWORD *)v21 -= 2;
          }
        }
        v20 += 56;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(a13 - 16), a2);
  }
  if (a10)
  {
    v19 = *(unsigned int *)(a10 - 4);
    if ((_DWORD)v19)
    {
      v23 = a10;
      do
      {
        v24 = *(WTF::StringImpl **)v23;
        if (*(_QWORD *)v23 != -1)
        {
          v25 = *(unsigned int *)(v23 + 48);
          if ((_DWORD)v25 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v25])(&a17, v23 + 8);
            v24 = *(WTF::StringImpl **)v23;
          }
          *(_DWORD *)(v23 + 48) = -1;
          *(_QWORD *)v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, a2);
            else
              *(_DWORD *)v24 -= 2;
          }
        }
        v23 += 56;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::extractDictionary(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  *a1 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3321888768;
  v6[2] = ___ZN7WebCoreL17extractDictionaryEP12NSDictionaryRN3WTF7HashMapIP11NSTextTableNS2_23ObjectIdentifierGenericINS_31AttributedStringTextTableIDTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS2_11DefaultHashIS5_EENS2_10HashTraitsIS5_EENSD_ISA_EENS2_15HashTableTraitsEEERNS3_IP16NSTextTableBlockNS6_INS_36AttributedStringTextTableBlockIDTypeES9_yEENSB_ISK_EENSD_ISK_EENSD_ISM_EESG_EERNS3_IP10NSTextListNS6_INS_30AttributedStringTextListIDTypeES9_yEENSB_IST_EENSD_IST_EENSD_ISV_EESG_EE_block_invoke;
  v6[3] = &__block_descriptor_64_e8_32c496_ZTSKZN7WebCoreL17extractDictionaryEP12NSDictionaryRN3WTF7HashMapIP11NSTextTableNS2_23ObjectIdentifierGenericINS_31AttributedStringTextTableIDTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS2_11DefaultHashIS5_EENS2_10HashTraitsIS5_EENSD_ISA_EENS2_15HashTableTraitsEEERNS3_IP16NSTextTableBlockNS6_INS_36AttributedStringTextTableBlockIDTypeES9_yEENSB_ISK_EENSD_ISK_EENSD_ISM_EESG_EERNS3_IP10NSTextListNS6_INS_30AttributedStringTextListIDTypeES9_yEENSB_IST_EENSD_IST_EENSD_ISV_EESG_EEE3__0_e15_v32__0_8_16_B24l;
  v6[4] = a3;
  v6[5] = a4;
  v6[6] = a5;
  v6[7] = a1;
  return objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v6);
}

void sub_194B42D84(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v4 = v2;
  v6 = *v4;
  if (*v4)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = *v4;
      do
      {
        v9 = *(WTF::StringImpl **)v8;
        if (*(_QWORD *)v8 != -1)
        {
          v10 = *(unsigned int *)(v8 + 48);
          if ((_DWORD)v10 != -1)
          {
            ((void (*)(uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v10])(v3 - 49, v8 + 8);
            v9 = *(WTF::StringImpl **)v8;
          }
          *(_DWORD *)(v8 + 48) = -1;
          *(_QWORD *)v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        v8 += 56;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DataDetection::canBePresentedByDataDetectors(WebCore::DataDetection *this, const WTF::URL *a2)
{
  void *v3;
  uint64_t v4;
  const __CFString *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _QWORD v10[2];
  WTF::StringImpl *v11;

  v3 = (void *)PAL::softLinkDataDetectorsCoreDDURLTapAndHoldSchemes(this);
  v10[0] = WTF::URL::protocol(this);
  v10[1] = v4;
  WTF::StringView::convertToASCIILowercase((WTF::StringView *)v10);
  if (v11)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  v7 = objc_msgSend(v3, "containsObject:", v5);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

void sub_194B42EB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DataDetection::isDataDetectorLink(WebCore::DataDetection *this, WebCore::Element *a2)
{
  const WTF::URL *v3;
  WTF::StringImpl *v4;
  uint64_t canBePresentedByDataDetectors;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[5];

  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    return 0;
  }
  *((_DWORD *)this + 6) += 2;
  WebCore::HTMLAnchorElement::href(this, (WTF::URL *)v8);
  canBePresentedByDataDetectors = WebCore::DataDetection::canBePresentedByDataDetectors((WebCore::DataDetection *)v8, v3);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, v4);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return canBePresentedByDataDetectors;
}

void sub_194B42FAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  uint64_t v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WebCore::DataDetection::requiresExtendedContext(WebCore::DataDetection *this, WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::x_apple_data_detectors_typeAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!*v6 || *(_DWORD *)(v8 + 4) != 14)
    return 0;
  v10 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v10 & 0xFFDF) == 0x43
      && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x41
      && (*(_WORD *)(v10 + 4) & 0xFFDF) == 0x4C
      && (*(_WORD *)(v10 + 6) & 0xFFDF) == 0x45
      && (*(_WORD *)(v10 + 8) & 0xFFDF) == 0x4E
      && (*(_WORD *)(v10 + 10) & 0xFFDF) == 0x44
      && (*(_WORD *)(v10 + 12) & 0xFFDF) == 0x41
      && (*(_WORD *)(v10 + 14) & 0xFFDF) == 0x52
      && (*(_WORD *)(v10 + 16) & 0xFFDF) == 0xD
      && (*(_WORD *)(v10 + 18) & 0xFFDF) == 0x45
      && (*(_WORD *)(v10 + 20) & 0xFFDF) == 0x56
      && (*(_WORD *)(v10 + 22) & 0xFFDF) == 0x45
      && (*(_WORD *)(v10 + 24) & 0xFFDF) == 0x4E)
    {
      v11 = *(unsigned __int16 *)(v10 + 26);
      return (v11 & 0xFFFFFFDF) == 84;
    }
    return 0;
  }
  if ((*(_BYTE *)v10 & 0xDF) != 0x43
    || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x41
    || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x4C
    || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x45
    || (*(_BYTE *)(v10 + 4) & 0xDF) != 0x4E
    || (*(_BYTE *)(v10 + 5) & 0xDF) != 0x44
    || (*(_BYTE *)(v10 + 6) & 0xDF) != 0x41
    || (*(_BYTE *)(v10 + 7) & 0xDF) != 0x52
    || (*(_BYTE *)(v10 + 8) & 0xDF) != 0xD
    || (*(_BYTE *)(v10 + 9) & 0xDF) != 0x45
    || (*(_BYTE *)(v10 + 10) & 0xDF) != 0x56
    || (*(_BYTE *)(v10 + 11) & 0xDF) != 0x45
    || (*(_BYTE *)(v10 + 12) & 0xDF) != 0x4E)
  {
    return 0;
  }
  v11 = *(unsigned __int8 *)(v10 + 13);
  return (v11 & 0xFFFFFFDF) == 84;
}

uint64_t WebCore::DataDetection::dataDetectorIdentifier@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *(_QWORD *)(this + 104);
  if (!v3)
    goto LABEL_12;
  v4 = *(_DWORD *)(v3 + 4);
  if ((v4 & 1) == 0)
  {
    v5 = v3 + 32;
    LODWORD(v6) = v4 >> 5;
    if ((_DWORD)v6)
      goto LABEL_4;
LABEL_12:
    v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v3 + 40);
  LODWORD(v6) = *(_DWORD *)(v3 + 52);
  if (!(_DWORD)v6)
    goto LABEL_12;
LABEL_4:
  v6 = v6;
  v7 = (_DWORD **)(v5 + 8);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 1);
    if (v8 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr
      || *(_QWORD *)(v8 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 24)
      && *(_QWORD *)(v8 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v6)
    {
      v7 = (_DWORD **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v9 = *v7;
  if (v9)
    *v9 += 2;
  *a2 = v9;
  return this;
}

uint64_t WebCore::DataDetection::canPresentDataDetectorsUIForElement(WebCore::DataDetection *this, WebCore::Element *a2)
{
  uint64_t result;
  PAL *v4;
  NSURL *v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *SubResults;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  __int16 v45;
  char v46;

  result = WebCore::DataDetection::isDataDetectorLink(this, a2);
  if (!(_DWORD)result)
    return result;
  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    __break(0xC471u);
    goto LABEL_72;
  }
  WebCore::HTMLAnchorElement::href(this, (WTF::URL *)&v43);
  v4 = (PAL *)WTF::URL::operator NSURL *();
  v7 = PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForURL(v4, v5);
  v8 = v43;
  v43 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      if ((v7 & 1) != 0)
        return 1;
      goto LABEL_11;
    }
    *(_DWORD *)v8 -= 2;
  }
  if ((v7 & 1) != 0)
    return 1;
LABEL_11:
  v9 = *((_QWORD *)this + 13);
  if (!v9)
    goto LABEL_22;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_14;
LABEL_22:
    v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_22;
LABEL_14:
  v12 = v12;
  v13 = (uint64_t *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_23:
  v15 = *v13;
  if (!v15)
    return 0;
  v16 = *(unsigned int *)(v15 + 4);
  if (!(_DWORD)v16)
    return 0;
  v17 = *(void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528) + 8) + 312);
  if (!v17)
    return 0;
  v18 = *v17;
  if (!*v17)
    return 0;
  v19 = v16 | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  v43 = *(WTF::StringImpl **)(v15 + 8);
  v44 = v19;
  v45 = 47;
  v46 = 0;
  v39 = &v43;
  v40 = 0;
  v42 = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v39);
  v20 = *((unsigned int *)v39 + 2);
  if (v20 <= v40)
  {
    v24 = 0;
    v23 = "";
    goto LABEL_39;
  }
  LODWORD(v21) = v41;
  if (v20 - v40 <= v41)
  {
    if (!v40)
    {
      v23 = (const char *)*v39;
      v21 = (uint64_t)v39[1];
      goto LABEL_38;
    }
    LODWORD(v21) = v20 - v40;
  }
  v21 = v21;
  v22 = v20 - v40;
  if (*((_BYTE *)v39 + 12))
  {
    if (v22 >= v21)
    {
      v23 = (char *)*v39 + v40;
      v21 = v21 | 0x100000000;
      goto LABEL_38;
    }
    goto LABEL_71;
  }
  if (v22 < v21)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    JUMPOUT(0x194B433D8);
  }
  v23 = (char *)*v39 + 2 * v40;
LABEL_38:
  v24 = v21;
  if ((v21 & 0xFF00000000) == 0)
  {
    v25 = WTF::parseInteger<int,char16_t>((uint64_t)v23, v21, 10, 1);
    goto LABEL_41;
  }
LABEL_39:
  v25 = WTF::parseInteger<int,unsigned char>((uint64_t)v23, v24, 10, 1);
LABEL_41:
  if ((v25 & 0xFF00000000) != 0)
    v26 = (int)v25;
  else
    v26 = 0;
  v27 = objc_msgSend((id)objc_msgSend(v18, "objectAtIndexedSubscript:", v26), "coreResult");
  v28 = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(v28 + 8) != (_DWORD)v44 || !*(_BYTE *)(v28 + 16))
  {
    do
    {
      SubResults = (void *)PAL::softLinkDataDetectorsCoreDDResultGetSubResults(v27);
      v30 = *((unsigned int *)v39 + 2);
      if (v30 <= v40)
      {
        v34 = 0;
        v33 = "";
        goto LABEL_56;
      }
      LODWORD(v31) = v41;
      if (v30 - v40 <= v41)
      {
        if (!v40)
        {
          v33 = (const char *)*v39;
          v31 = (uint64_t)v39[1];
          goto LABEL_55;
        }
        LODWORD(v31) = v30 - v40;
      }
      v31 = v31;
      v32 = v30 - v40;
      if (*((_BYTE *)v39 + 12))
      {
        if (v32 < v31)
          goto LABEL_71;
        v33 = (char *)*v39 + v40;
        v31 = v31 | 0x100000000;
      }
      else
      {
        if (v32 < v31)
          goto LABEL_71;
        v33 = (char *)*v39 + 2 * v40;
      }
LABEL_55:
      v34 = v31;
      if ((v31 & 0xFF00000000) == 0)
      {
        v35 = WTF::parseInteger<int,char16_t>((uint64_t)v33, v31, 10, 1);
        goto LABEL_58;
      }
LABEL_56:
      v35 = WTF::parseInteger<int,unsigned char>((uint64_t)v33, v34, 10, 1);
LABEL_58:
      if ((v35 & 0xFF00000000) != 0)
        v36 = (int)v35;
      else
        v36 = 0;
      v27 = objc_msgSend(SubResults, "objectAtIndexedSubscript:", v36);
      v37 = WTF::StringView::SplitResult::Iterator::operator++();
    }
    while (*(_DWORD *)(v37 + 8) != (_DWORD)v44 || *(_BYTE *)(v37 + 16) == 0);
  }
  return PAL::softLinkDataDetectorsCoreDDShouldImmediatelyShowActionSheetForResult(v27);
}

void sub_194B436E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DataDetection::removeDataDetectedLinksInDocument(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int16 v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v2 = *(_QWORD *)(this + 80);
  if (v2)
  {
    v3 = this;
    while (1)
    {
      v4 = v2;
      v5 = *(_WORD *)(v2 + 28);
      if ((v5 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
        break;
      if ((v5 & 4) != 0)
      {
        v2 = *(_QWORD *)(v4 + 80);
        if (v2)
          continue;
      }
      if (v4 == this)
        return this;
      while (1)
      {
        v2 = *(_QWORD *)(v4 + 56);
        if (v2)
          break;
        v4 = *(_QWORD *)(v4 + 32);
        if (v4)
          v6 = v4 == this;
        else
          v6 = 1;
        if (v6)
          return this;
      }
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    for (i = 1; ; ++i)
    {
      v11 = v9;
      if (v9 == v8)
      {
        v12 = ((unint64_t)v8 >> 2) + v8;
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)v9 + 1)
          v14 = v9 + 1;
        else
          v14 = v13;
        if (v14 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v15 = (char *)WTF::fastMalloc((WTF *)(8 * v14));
        this = (uint64_t)memcpy(v15, v7, 8 * v11);
        if (v7)
        {
          if (v15 == v7)
          {
            LODWORD(v14) = 0;
            v15 = 0;
          }
          this = WTF::fastFree((WTF *)v7, a2);
          v7 = v15;
          v8 = v14;
        }
        else
        {
          v7 = v15;
          v8 = v14;
        }
      }
      *(_DWORD *)(v4 + 24) += 2;
      *(_QWORD *)&v7[8 * v11] = v4;
      v9 = v11 + 1;
      v16 = *(_QWORD *)(v4 + 80);
      if (!v16)
        break;
LABEL_30:
      while (1)
      {
        v4 = v16;
        v17 = *(_WORD *)(v16 + 28);
        if ((v17 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
          break;
        if ((v17 & 4) != 0)
        {
          v16 = *(_QWORD *)(v4 + 80);
          if (v16)
            continue;
        }
        if (v4 == v3)
          goto LABEL_51;
        while (1)
        {
          v16 = *(_QWORD *)(v4 + 56);
          if (v16)
            break;
          v4 = *(_QWORD *)(v4 + 32);
          if (v4)
            v18 = v4 == v3;
          else
            v18 = 1;
          if (v18)
            goto LABEL_51;
        }
      }
    }
    if (v4 != v3)
    {
      do
      {
        v16 = *(_QWORD *)(v4 + 56);
        if (v16)
          goto LABEL_30;
        v4 = *(_QWORD *)(v4 + 32);
        if (v4)
          v19 = v4 == v3;
        else
          v19 = 1;
      }
      while (!v19);
    }
LABEL_51:
    if ((_DWORD)v11 != -1)
    {
      v20 = 0;
      do
      {
        WebCore::removeResultLinksFromAnchor(*(WebCore::ContainerNode **)&v7[v20], a2);
        v20 += 8;
      }
      while (8 * i != v20);
      v21 = 8 * i;
      v22 = (uint64_t *)v7;
      do
      {
        this = *v22;
        *v22 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 24) == 2)
          {
            if ((*(_WORD *)(this + 30) & 0x400) == 0)
              this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
          }
          else
          {
            *(_DWORD *)(this + 24) -= 2;
          }
        }
        ++v22;
        v21 -= 8;
      }
      while (v21);
    }
    if (v7)
      return WTF::fastFree((WTF *)v7, a2);
  }
  return this;
}

void sub_194B4397C(_Unwind_Exception *exception_object, void *a2)
{
  WTF *v2;
  unsigned int v3;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  if (v3)
  {
    v5 = 8 * v3;
    v6 = v2;
    do
    {
      v7 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  if (v2)
    WTF::fastFree(v2, a2);
  _Unwind_Resume(exception_object);
}

WebCore::ContainerNode *WebCore::removeResultLinksFromAnchor(WebCore::ContainerNode *this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::ContainerNode *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  WebCore::Node *v22;
  _BYTE v23[8];
  WTF::StringImpl *v24;
  char v25;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        goto LABEL_4;
    }
LABEL_40:
    this = (WebCore::ContainerNode *)WebCore::removeResultLinksFromAnchor((WebCore *)v3, a2);
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        break;
      if ((*(_WORD *)(v3 + 28) & 8) != 0)
        goto LABEL_40;
    }
  }
LABEL_4:
  v4 = *(WebCore::ContainerNode **)(v2 + 32);
  if (!v4
    || (*((_WORD *)v4 + 14) & 8) == 0
    || (*(_WORD *)(v2 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    return this;
  }
  v5 = *(_QWORD *)(v2 + 104);
  if (!v5)
    goto LABEL_19;
  v6 = *(_DWORD *)(v5 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v5 + 32;
    LODWORD(v8) = v6 >> 5;
    if ((_DWORD)v8)
      goto LABEL_11;
LABEL_19:
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_20;
  }
  v7 = *(_QWORD *)(v5 + 40);
  LODWORD(v8) = *(_DWORD *)(v5 + 52);
  if (!(_DWORD)v8)
    goto LABEL_19;
LABEL_11:
  v8 = v8;
  v9 = (uint64_t *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::HTMLNames::x_apple_data_detectorsAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_20:
  v11 = *v9;
  if (*v9 && *(_DWORD *)(v11 + 4) == 4)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v12 & 0xDF) != 0x54
        || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x55)
      {
        return this;
      }
      v13 = *(unsigned __int8 *)(v12 + 3);
    }
    else
    {
      if ((*(_WORD *)v12 & 0xFFDF) != 0x54
        || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x55)
      {
        return this;
      }
      v13 = *(unsigned __int16 *)(v12 + 6);
    }
    if ((v13 & 0xFFFFFFDF) == 0x45)
    {
      while (1)
      {
        v14 = *(uint64_t **)(v2 + 80);
        if (!v14)
          break;
        *(_DWORD *)(v2 + 24) += 2;
        v22 = (WebCore::Node *)v2;
        WebCore::ContainerNode::insertBefore((uint64_t)v4, v14, &v22, (uint64_t)v23);
        if (v25)
        {
          v16 = v24;
          v24 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v15);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
        v17 = v22;
        v22 = 0;
        if (v17)
        {
          if (*((_DWORD *)v17 + 6) == 2)
          {
            if ((*((_WORD *)v17 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v17, v15);
          }
          else
          {
            *((_DWORD *)v17 + 6) -= 2;
          }
        }
      }
      this = WebCore::ContainerNode::removeChild(v4, (WebCore::Node *)v2, &v19);
      if (v21)
      {
        this = v20;
        v20 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WebCore::ContainerNode *)WTF::StringImpl::destroy(this, v18);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

void sub_194B43C68(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WebCore::Node *a13)
{
  if (a13)
  {
    if (*((_DWORD *)a13 + 6) == 2)
    {
      if ((*((_WORD *)a13 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a13, a2);
    }
    else
    {
      *((_DWORD *)a13 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

double WebCore::DataDetection::extractReferenceDate(WebCore::DataDetection *this, NSDictionary *a2)
{
  void *v2;
  double result;

  v2 = (void *)-[WebCore::DataDetection objectForKey:](this, "objectForKey:", PAL::get_DataDetectorsUI_kDataDetectorsReferenceDateKey(this));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (v2)
      objc_msgSend(v2, "timeIntervalSince1970");
  }
  return result;
}

WebCore::Node *WebCore::DataDetection::detectContentInFrame(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v6;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *result;
  uint64_t v15;
  const __CFAllocator *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Node *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  WebCore::Node *v33;
  int v34;
  WebCore::Node *v35;
  int v36;
  uint64_t v37;

  if (a1 && (v6 = *(_QWORD *)(a1 + 296)) != 0)
  {
    *(_DWORD *)(v6 + 24) += 6;
    v10 = *(_WORD *)(v6 + 28);
    if ((v10 & 1) != 0)
    {
      v12 = *(_QWORD *)(v6 + 80);
      if (v12)
        LODWORD(v12) = *(_DWORD *)(v12 + 4);
    }
    else if ((v10 & 4) != 0 && (v11 = *(_QWORD *)(v6 + 80)) != 0)
    {
      LODWORD(v12) = 0;
      do
      {
        LODWORD(v12) = v12 + 1;
        v11 = *(_QWORD *)(v11 + 56);
      }
      while (v11);
    }
    else
    {
      LODWORD(v12) = 0;
    }
    v33 = (WebCore::Node *)v6;
    v34 = 0;
    v35 = (WebCore::Node *)v6;
    v36 = v12;
    v15 = PAL::softLinkDataDetectorsCoreDDScannerCreate(0, 0, 0);
    PAL::softLinkDataDetectorsCoreDDScannerSetQOS(v15, 4);
    v17 = PAL::softLinkDataDetectorsCoreDDScanQueryCreate(0, v16);
    WebCore::buildQuery(v17, &v33);
    WebCore::getFragmentsFromQuery((unsigned int *)&v30, v17);
    v18 = a2;
    if ((a2 & 0x40) != 0)
      PAL::softLinkDataDetectorsCoreDDScannerEnableOptionalSource(v15, 2, 1);
    v28 = v15;
    v29 = v17;
    if (_MergedGlobals_357 == 1)
    {
      v19 = a4;
      v20 = qword_1EE335740;
    }
    else
    {
      WTF::WorkQueue::create();
      v19 = a4;
      v20 = v37;
      qword_1EE335740 = v37;
      _MergedGlobals_357 = 1;
    }
    *(_DWORD *)(v6 + 24) += 2;
    v21 = v30;
    v30 = 0;
    v23 = v31;
    v22 = v32;
    v31 = 0;
    v24 = *a5;
    *a5 = 0;
    v25 = WTF::fastMalloc((WTF *)0x50);
    *(_QWORD *)v25 = off_1E327FA10;
    *(_QWORD *)(v25 + 8) = v28;
    *(_BYTE *)(v25 + 16) = v18;
    *(_QWORD *)(v25 + 24) = a3;
    *(_BYTE *)(v25 + 32) = v19;
    *(_QWORD *)(v25 + 40) = v29;
    *(_QWORD *)(v25 + 48) = v6;
    *(_QWORD *)(v25 + 56) = v21;
    *(_DWORD *)(v25 + 64) = v23;
    *(_DWORD *)(v25 + 68) = v22;
    *(_QWORD *)(v25 + 72) = v24;
    v37 = v25;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 32))(v20, &v37);
    v26 = v37;
    v37 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v35;
    v35 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (WebCore::Node *)WebCore::Node::removedLastRef(result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef((WebCore::Node *)v6);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    return (WebCore::Node *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return result;
}

void sub_194B44008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, WTF *a12, int a13, int a14, WebCore::Node *a15, uint64_t a16, WebCore::Node *a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void WebCore::buildQuery(uint64_t a1, _DWORD *a2)
{
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v4;
  void *v5;
  unint64_t v6;
  int v7;
  WTF *v8;
  unint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  unint64_t v18;
  int IsCharacterMember;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  CFStringRef v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  unint64_t v28;
  WTF *v29;
  __int128 v30;
  int8x16_t v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  const __CFAllocator *alloc;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[64];
  UniChar *chars;
  uint64_t v43;
  _BYTE v44[96];
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  v4 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  WebCore::TextIterator::TextIterator((uint64_t)v44, a2, 0);
  if (v45)
  {
    v6 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v7 = v47;
      if ((_DWORD)v47)
      {
        v8 = v46;
        v9 = v47;
        v39 = (WTF *)v41;
        v40 = 32;
        chars = 0;
        v43 = 0;
        if ((v47 & 0xFF00000000) != 0)
        {
          if (v47 > 0x20uLL)
          {
            if (v47 <= 0x29uLL)
              v28 = 41;
            else
              v28 = v47;
            WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v39, v28);
            HIDWORD(v40) = v7;
            v10 = v39;
            if (v9 < 0x40)
            {
              v11 = v39;
            }
            else
            {
              v11 = (WTF *)((char *)v39 + 2 * (v7 & 0xFFFFFFC0));
              v29 = v39;
              v30 = 0u;
              do
              {
                v48.val[0] = *(int8x16_t *)v8;
                v31 = *((int8x16_t *)v8 + 1);
                v49.val[0] = (int8x16_t)*((_OWORD *)v8 + 2);
                v32 = *((_OWORD *)v8 + 3);
                v8 = (WTF *)((char *)v8 + 64);
                v33 = v32;
                v49.val[1] = 0u;
                v50.val[0] = v31;
                v48.val[1] = 0u;
                v34 = (char *)v29;
                vst2q_s8(v34, v48);
                v34 += 32;
                v50.val[1] = 0u;
                vst2q_s8(v34, v50);
                v35 = (char *)v29 + 64;
                vst2q_s8(v35, v49);
                v36 = (char *)v29 + 96;
                vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
                v29 = (WTF *)((char *)v29 + 128);
              }
              while (v29 != v11);
            }
          }
          else
          {
            HIDWORD(v40) = v47;
            v10 = (WTF *)v41;
            v11 = (WTF *)v41;
          }
          v12 = (WTF *)((char *)v10 + 2 * v9);
          while (v11 != v12)
          {
            v13 = *(unsigned __int8 *)v8;
            v8 = (WTF *)((char *)v8 + 1);
            *(_WORD *)v11 = v13;
            v11 = (WTF *)((char *)v11 + 2);
          }
          v8 = v39;
          v14 = HIDWORD(v40);
        }
        else
        {
          v14 = v47;
        }
        chars = (UniChar *)v8;
        v43 = v14;
        v15 = 0;
        v16 = 0;
        v17 = 0;
        v18 = v9;
        while (CFCharacterSetIsCharacterMember(Predefined, *(_WORD *)v8))
        {
          IsCharacterMember = CFCharacterSetIsCharacterMember(v4, *(_WORD *)v8);
          v21 = *(unsigned __int16 *)v8;
          v8 = (WTF *)((char *)v8 + 2);
          v20 = v21;
          v22 = v17 | (v21 == 9);
          if (IsCharacterMember)
          {
            v22 = v17;
            v16 = 1;
          }
          if (v20 == 160)
            v17 = (v15 > 1) | v22;
          else
            v17 = v22;
          if (v20 == 160)
            ++v15;
          else
            v15 = 0;
          if (!--v18)
          {
            if ((v16 & 1) != 0)
            {
              PAL::softLinkDataDetectorsCoreDDScanQueryAddLineBreak(a1);
              v23 = 5000;
            }
            else
            {
              if ((v17 & 1) != 0)
                v26 = 2;
              else
                v26 = 1;
              PAL::softLinkDataDetectorsCoreDDScanQueryAddSeparator(a1, v26);
              v23 = 10000;
            }
            if (v6 <= v23)
              v25 = 4;
            else
              v25 = 2;
            goto LABEL_36;
          }
        }
        v24 = CFStringCreateWithCharacters(alloc, chars, v9);
        PAL::softLinkDataDetectorsCoreDDScanQueryAddTextFragment(a1, v24, 0, v9, v6, 0, 0);
        if (v24)
          CFRelease(v24);
        v25 = 0;
LABEL_36:
        v27 = v39;
        if (v41 != (_BYTE *)v39 && v39)
        {
          v39 = 0;
          LODWORD(v40) = 0;
          WTF::fastFree(v27, v5);
        }
        if ((v25 | 4) != 4)
          break;
      }
      else
      {
        PAL::softLinkDataDetectorsCoreDDScanQueryAddSeparator(a1, 4);
        if (v6 > 0x3E8)
          break;
      }
      WebCore::TextIterator::advance((WebCore::TextIterator *)v44, (WTF::StringImpl *)v5);
      ++v6;
    }
    while (v45);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v44, v5);
}

void sub_194B4456C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  WTF *v30;

  if (v30 != a18)
  {
    if (a18)
      WTF::fastFree(a18, a2);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&a30, a2);
  _Unwind_Resume(a1);
}

unsigned int *WebCore::getFragmentsFromQuery(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  __int128 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  uint64_t v21;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v2 = *(_QWORD *)(a2 + 32);
  if (v2 >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a2 + 16);
      MEMORY[0x19AEA5508](&v19, *(_QWORD *)(v8 + v5));
      v10 = *(_QWORD *)(v8 + v5 + 24);
      v11 = v10 + *(_QWORD *)(v8 + v5 + 16);
      *(_QWORD *)&v20 = *(_QWORD *)(v8 + v5 + 16);
      *((_QWORD *)&v20 + 1) = v11;
      if (!v10)
        v20 = 0uLL;
      v21 = *(_QWORD *)(v8 + v5 + 8);
      if (v7 == v4[2])
      {
        v12 = WTF::Vector<WebCore::DDQueryFragmentCore,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v7 + 1, (unint64_t)&v19);
        v13 = v4[3];
        v6 = *(_QWORD *)v4;
        v14 = *(_QWORD *)v4 + 32 * v13;
        v15 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)v14 = v15;
        v16 = *(_OWORD *)(v12 + 8);
        *(_QWORD *)(v14 + 24) = *(_QWORD *)(v12 + 24);
        *(_OWORD *)(v14 + 8) = v16;
      }
      else
      {
        v13 = v6 + 32 * v7;
        v17 = v19;
        v19 = 0;
        *(_QWORD *)v13 = v17;
        v18 = v20;
        *(_QWORD *)(v13 + 24) = v21;
        *(_OWORD *)(v13 + 8) = v18;
        LODWORD(v13) = v4[3];
      }
      v7 = v13 + 1;
      v4[3] = v13 + 1;
      result = (unsigned int *)v19;
      v19 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        else
          *result -= 2;
      }
      v5 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_194B44724(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  uint64_t v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;

  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, a2);
    else
      *(_DWORD *)a9 -= 2;
  }
  v11 = *(unsigned int *)(v9 + 12);
  v12 = *(WTF **)v9;
  if ((_DWORD)v11)
  {
    v13 = 32 * v11;
    v14 = *(WTF::StringImpl ***)v9;
    do
    {
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v14 += 4;
      v13 -= 32;
    }
    while (v13);
  }
  if (v12)
  {
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DataDetection::detectContentInFrame(WebCore::LocalFrame *,WTF::OptionSet<WebCore::DataDetectorType>,std::optional<double>,WTF::CompletionHandler<void ()(NSArray *)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v4)
  {
    v5 = *(WTF::StringImpl ***)(a1 + 48);
    v6 = 32 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  v8 = *(WTF **)(a1 + 48);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  v10 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
    CFRelease(v11);
  return a1;
}

uint64_t WebCore::DataDetection::detectContentInRange(_DWORD *a1, unsigned __int8 a2, WebCore::Node *a3, char a4)
{
  PAL *v8;
  const __CFAllocator *v9;
  const void *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF *v18;
  unsigned int v19;

  v8 = (PAL *)PAL::softLinkDataDetectorsCoreDDScannerCreate(0, 0, 0);
  v10 = (const void *)PAL::softLinkDataDetectorsCoreDDScanQueryCreate(0, v9);
  WebCore::buildQuery((uint64_t)v10, a1);
  WebCore::getFragmentsFromQuery((unsigned int *)&v18, (uint64_t)v10);
  if ((a2 & 0x40) != 0)
    PAL::softLinkDataDetectorsCoreDDScannerEnableOptionalSource(v8, 2, 1);
  if (PAL::softLinkDataDetectorsCoreDDScannerScanQuery(v8, v10))
    v12 = WebCore::processDataDetectorScannerResults(v8, a2, a3, a4, (uint64_t)v10, a1, (uint64_t *)&v18);
  else
    v12 = 0;
  v13 = v18;
  if (v19)
  {
    v14 = 32 * v19;
    v15 = v18;
    do
    {
      v16 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v11);
        else
          *(_DWORD *)v16 -= 2;
      }
      v15 = (WTF *)((char *)v15 + 32);
      v14 -= 32;
    }
    while (v14);
  }
  if (v13)
    WTF::fastFree(v13, v11);
  if (v10)
    CFRelease(v10);
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_194B449FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, int a11)
{
  const void *v11;
  const void *v12;

  if (v12)
  {
    CFRelease(v12);
    if (!v11)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else if (!v11)
  {
    goto LABEL_4;
  }
  CFRelease(v11);
  goto LABEL_4;
}

uint64_t WebCore::processDataDetectorScannerResults(PAL *a1, unsigned __int8 a2, WebCore::Node *a3, char a4, uint64_t a5, _DWORD *a6, uint64_t *a7)
{
  uint64_t DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUse;
  const __CFArray *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  void *v17;
  const WTF::StringImpl *v18;
  unint64_t v19;
  WTF *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int32x2_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  WTF *v28;
  const void *v29;
  PAL *Type;
  const void *DataDetectorsCore_DDBinderSignatureBlockKey;
  unint64_t i;
  const void *v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  _QWORD *v43;
  WTF *v44;
  const void *v45;
  const void *v46;
  WTF *v47;
  const void *v48;
  const void *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  WTF *v54;
  uint64_t v55;
  _QWORD *v56;
  WTF *v57;
  const void *v58;
  const void *v59;
  WTF *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  WTF *v65;
  uint64_t v66;
  _QWORD *v67;
  const void *v68;
  const void *v69;
  WTF *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  WTF *v76;
  uint64_t v77;
  _QWORD *v78;
  WTF *v79;
  const void *v80;
  const void *v81;
  WTF *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unsigned int v85;
  uint64_t v86;
  WTF *v87;
  uint64_t QueryRangeForURLification;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t FragmentMetaData;
  WebCore::Node *v93;
  WebCore::Node *v95;
  uint64_t v96;
  unsigned int j;
  uint64_t v98;
  WebCore::Node *v99;
  uint64_t v100;
  unsigned int k;
  uint64_t v102;
  WebCore::Node *v103;
  __int32 v104;
  int v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  __int32 *v110;
  __int32 *v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  char *v116;
  WTF::StringImpl *v117;
  WebCore::Node *v118;
  WebCore::Node *v119;
  WTF::StringImpl *v120;
  WebCore::Node *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  __int32 v125;
  __int32 v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  char *v132;
  WebCore::Node *v133;
  WebCore::Node *v134;
  uint64_t v135;
  unint64_t v136;
  BOOL v137;
  uint64_t v138;
  WebCore::Node *v139;
  uint64_t v140;
  unsigned int m;
  uint64_t v142;
  WTF::StringImpl *v143;
  int v144;
  __int32 v145;
  __int32 v146;
  unint64_t v147;
  int v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  int v154;
  char *v155;
  WebCore::Node *v156;
  WebCore::Node *v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  int v160;
  char *v161;
  uint64_t v162;
  char *v163;
  WTF *v164;
  WTF *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  WTF *v171;
  double v172;
  char v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  CFTimeZoneRef v186;
  uint64_t HasProperties;
  unint64_t v188;
  uint32x2_t v189;
  float32x2_t v190;
  uint64_t v191;
  uint64_t v192;
  const WTF::StringImpl *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int8 v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int v203;
  unint64_t v204;
  int v205;
  unint64_t v206;
  BOOL v207;
  int v208;
  BOOL v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unsigned int v215;
  uint64_t v216;
  _BYTE *v217;
  BOOL v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  void *v223;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  unsigned int v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  _WORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  BOOL v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  _WORD *v245;
  WTF::StringImpl *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _WORD *v250;
  _BYTE *v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  int v256;
  const void *v257;
  const void *v258;
  const void *v259;
  const void *v260;
  void *v261;
  WTF::AtomStringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  _DWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  __int16 v280;
  _BOOL8 v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  WebCore::Document *v290;
  unsigned int v291;
  WTF::StringImpl *v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  WTF::StringImpl *v297;
  uint64_t v298;
  _DWORD *v299;
  uint64_t v300;
  _DWORD *v301;
  _DWORD *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  const __CFString *v307;
  WTF::StringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  WTF *v331;
  unsigned int v332;
  uint32x2_t v333;
  float32x2_t v334;
  float v335;
  unsigned int v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  WTF::StringImpl *v345;
  WebCore::MutableStyleProperties *v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  WTF::String *v349;
  __n128 v350;
  _DWORD *v351;
  float v352;
  float v353;
  float v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  float v359;
  float v360;
  uint64_t v361;
  unsigned int v362;
  float v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  unint64_t v369;
  WTF::StringImpl *v370;
  uint64_t *v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  const __CFString *v375;
  unsigned int v376;
  WTF::AtomStringImpl *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  WTF::StringImpl *v384;
  WTF::StringImpl *v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  uint64_t v396;
  WTF::StringImpl *v397;
  WTF::StringImpl *v398;
  unint64_t v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int v402;
  __int16 v403;
  int v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  PAL *v413;
  PAL *v414;
  PAL *v415;
  const void *v416;
  WebCore::Node *v417;
  char v418;
  unint64_t v419;
  uint64_t v420;
  uint32x2_t v421;
  float32x2_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  unsigned __int8 v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  WTF::StringImpl *v434;
  uint64_t v435;
  void *v436;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  int v441;
  unint64_t v442;
  int v443;
  unint64_t v444;
  int v445;
  char v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  _BYTE *v453;
  unint64_t v454;
  unsigned int v455;
  unint64_t v456;
  unsigned int v457;
  uint64_t v458;
  WTF::StringImpl *v459;
  _WORD *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  int v468;
  unint64_t v469;
  int v470;
  int v471;
  uint64_t v472;
  WTF::StringImpl *v473;
  _WORD *v474;
  WTF::StringImpl *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  _WORD *v479;
  _BYTE *v480;
  uint64_t v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  WTF::StringImpl *v484;
  int Category;
  const void *v486;
  const void *v487;
  const void *v488;
  const void *v489;
  void *v490;
  WTF::AtomStringImpl *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  _DWORD *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  __int16 v509;
  _BOOL8 v510;
  unint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _DWORD *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  unsigned int v519;
  WTF::StringImpl *v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  _DWORD *v524;
  WTF::StringImpl *v525;
  uint64_t v526;
  _DWORD *v527;
  uint64_t v528;
  _DWORD *v529;
  _DWORD *v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  uint64_t v533;
  uint64_t v534;
  const __CFString *v535;
  WTF::StringImpl *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t *v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t *v549;
  unint64_t v550;
  uint64_t v551;
  uint64_t v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  uint64_t v556;
  WTF::StringImpl *v557;
  WTF::StringImpl *v558;
  WTF *v559;
  unsigned int v560;
  uint32x2_t v561;
  float32x2_t v562;
  float v563;
  unsigned int v564;
  float v565;
  float v566;
  float v567;
  float v568;
  float v569;
  float v570;
  float v571;
  float v572;
  WTF::StringImpl *v573;
  WebCore::MutableStyleProperties *v574;
  WTF::StringImpl *v575;
  uint64_t v576;
  WTF::String *v577;
  __n128 v578;
  _DWORD *v579;
  float v580;
  float v581;
  float v582;
  uint64_t v583;
  unsigned int v584;
  uint64_t v585;
  unsigned int v586;
  float v587;
  float v588;
  uint64_t v589;
  unsigned int v590;
  float v591;
  uint64_t v592;
  WTF::StringImpl *v593;
  WTF::StringImpl *v594;
  WTF::StringImpl *v595;
  uint64_t v596;
  unint64_t v597;
  WTF::StringImpl *v598;
  uint64_t *v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  const __CFString *v603;
  unsigned int v604;
  WTF::AtomStringImpl *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t *v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  WTF::StringImpl *v612;
  WTF::StringImpl *v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t *v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  WTF::StringImpl *v620;
  WTF::StringImpl *v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  uint64_t v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  unint64_t v627;
  unsigned int *v628;
  unsigned int v629;
  unsigned int v630;
  __int16 v631;
  int v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  PAL *v641;
  PAL *v642;
  PAL *v643;
  const void *v644;
  WTF::StringImpl *v645;
  uint64_t v646;
  unsigned int *v647;
  uint64_t v648;
  const void **v649;
  const void *v650;
  uint64_t v651;
  const void **v652;
  const void *v653;
  uint64_t v654;
  WTF::StringImpl **v655;
  WTF::StringImpl *v656;
  uint64_t v658;
  WTF::AtomStringImpl *v659;
  WTF::AtomStringImpl *v660;
  uint64_t v661;
  int v662;
  unsigned int v663;
  WTF::AtomStringImpl *v664;
  unsigned int v665;
  _WORD *v666;
  _WORD *v667;
  _WORD *v668;
  _WORD *v669;
  int v670;
  unsigned int v671;
  uint64_t v672;
  WebCore::Document *v673;
  _DWORD *v674;
  _DWORD *v675;
  PAL *v676;
  WTF::StringImpl *v677;
  PAL *v678;
  WTF::StringImpl *v679;
  void *v680;
  uint64_t v681;
  uint64_t v682;
  const __CFTimeZone *v683;
  uint64_t v684;
  void *v685;
  uint64_t v686;
  unsigned __int8 v687;
  uint64_t v688;
  uint64_t v689;
  char v690;
  WTF::AtomStringImpl *v691;
  WTF::AtomStringImpl *v692;
  WebCore::Node *v693;
  WebCore::Node *v694;
  _DWORD *v695;
  char *v696;
  _DWORD *v697;
  char *v698;
  _DWORD *v699;
  CFTypeRef v700;
  const __CFArray *obj;
  uint64_t v703;
  unint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned __int8 v708;
  uint64_t v709;
  WTF::StringImpl *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  void *cf;
  WTF *cfa;
  uint64_t SubResults;
  WTF *v718;
  WTF *v719;
  unsigned int v720;
  unsigned int v721;
  WTF *v722;
  WTF *v723;
  WTF *v724;
  char v725[8];
  WTF::StringImpl *v726;
  char v727;
  char v728[8];
  WTF::StringImpl *v729;
  char v730;
  char v731[8];
  WTF::StringImpl *v732;
  char v733;
  char v734[8];
  WTF::StringImpl *v735;
  char v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  WTF *v741;
  unsigned int v742;
  unint64_t v743;
  int v744;
  float v745;
  WebCore::Node *v746;
  __int32 v747;
  WTF::StringImpl *v748[2];
  WebCore::Node *v749;
  __int32 v750;
  WTF *v751;
  uint64_t v752;
  WTF::StringImpl *v753;
  uint64_t v754;
  char v755;
  _BYTE v756[128];
  __int128 v757;
  char v758;
  _BYTE v759[72];
  WebCore::Node *v760;
  WebCore::Node *v761;
  int32x2_t v762;
  uint64_t v763;

  v763 = *MEMORY[0x1E0C80C00];
  DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUse = PAL::get_DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUse(a1);
  v14 = (const __CFArray *)PAL::softLinkDataDetectorsCoreDDScannerCopyResultsWithOptions(a1, DataDetectorsCore_DDScannerCopyResultsOptionsForPassiveUse | 2);
  if (!v14)
    return 0;
  obj = v14;
  if (!CFArrayGetCount(v14))
  {
    v83 = 0;
    goto LABEL_1265;
  }
  v16 = PAL::softLinkDataDetectorsCoreDDScanQueryCreate(0, v15);
  WebCore::buildQuery(v16, a6);
  WebCore::getFragmentsFromQuery((unsigned int *)&v741, v16);
  v700 = (CFTypeRef)v16;
  v19 = v742;
  v20 = v741;
  if (v742 != *((_DWORD *)a7 + 3))
  {
    v83 = 0;
    if (v742)
      goto LABEL_1254;
    goto LABEL_1261;
  }
  v687 = a2;
  if (v742)
  {
    v21 = 0;
    v22 = 0;
    v23 = *a7;
    do
    {
      if (!WTF::equal(*(WTF **)v20, *(const WTF::StringImpl **)v23, v18))
        break;
      v24 = vmovn_s64(vceqq_s64(*(int64x2_t *)((char *)v20 + 8), *(int64x2_t *)(v23 + 8)));
      if ((v24.i32[0] & v24.i32[1] & 1) == 0)
        break;
      if (*((_QWORD *)v20 + 3) != *(_QWORD *)(v23 + 24))
        break;
      v21 = ++v22 >= v19;
      v23 += 32;
      v20 = (WTF *)((char *)v20 + 32);
    }
    while (v19 != v22);
    if (!v21)
    {
      v83 = 0;
      goto LABEL_1253;
    }
  }
  v739 = 0u;
  v740 = 0u;
  v737 = 0u;
  v738 = 0u;
  v25 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v737, v756, 16);
  v693 = a3;
  v695 = a6;
  v690 = a4;
  if (!v25)
  {
    v720 = 0;
    v721 = 0;
    v719 = 0;
    v28 = 0;
    goto LABEL_132;
  }
  v26 = 0;
  v720 = 0;
  v721 = 0;
  v719 = 0;
  LODWORD(v27) = 0;
  v28 = 0;
  v707 = 0;
  v703 = *(_QWORD *)v738;
  do
  {
    v709 = 0;
    v706 = v25;
    do
    {
      v722 = v28;
      if (*(_QWORD *)v738 != v703)
        objc_enumerationMutation(obj);
      v29 = *(const void **)(*((_QWORD *)&v737 + 1) + 8 * v709);
      cf = (void *)objc_msgSend(MEMORY[0x1E0CB36B0], "indexPathWithIndex:", v707);
      Type = (PAL *)PAL::softLinkDataDetectorsCoreDDResultGetType(v29);
      DataDetectorsCore_DDBinderSignatureBlockKey = (const void *)PAL::get_DataDetectorsCore_DDBinderSignatureBlockKey(Type);
      if (!CFEqual(Type, DataDetectorsCore_DDBinderSignatureBlockKey))
      {
        if (v720 == (_DWORD)v27)
        {
          v61 = v720 + ((unint64_t)v720 >> 2);
          if (v61 >= 0x10)
            v62 = v61 + 1;
          else
            v62 = 16;
          if (v62 <= (unint64_t)v720 + 1)
            v27 = v720 + 1;
          else
            v27 = v62;
          if (v27 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B4914CLL);
          }
          v63 = WTF::fastMalloc((WTF *)(8 * v27));
          v65 = (WTF *)v63;
          if (v720)
          {
            v66 = 8 * v720;
            v67 = (_QWORD *)v63;
            do
            {
              v68 = *(const void **)v28;
              *(_QWORD *)v28 = 0;
              *v67 = v68;
              v69 = *(const void **)v28;
              *(_QWORD *)v28 = 0;
              if (v69)
                CFRelease(v69);
              ++v67;
              v28 = (WTF *)((char *)v28 + 8);
              v66 -= 8;
            }
            while (v66);
          }
          if (v722)
          {
            if (v65 == v722)
            {
              LODWORD(v27) = 0;
              v70 = 0;
            }
            else
            {
              v70 = v65;
            }
            WTF::fastFree(v722, v64);
          }
          else
          {
            v70 = v65;
          }
          v722 = v70;
          *((_QWORD *)v70 + v720) = v29;
          if (v29)
LABEL_93:
            CFRetain(v29);
        }
        else
        {
          *((_QWORD *)v28 + v720) = v29;
          if (v29)
            goto LABEL_93;
        }
        ++v720;
        if (v721 == (_DWORD)v26)
        {
          v71 = ((unint64_t)v26 >> 2) + v26;
          if (v71 >= 0x10)
            v72 = v71 + 1;
          else
            v72 = 16;
          if (v72 <= (unint64_t)v26 + 1)
            v73 = v26 + 1;
          else
            v73 = v72;
          if (v73 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B49154);
          }
          v74 = WTF::fastMalloc((WTF *)(8 * v73));
          v76 = (WTF *)v74;
          if ((_DWORD)v26)
          {
            v77 = 8 * v26;
            v78 = (_QWORD *)v74;
            v79 = v719;
            do
            {
              v80 = *(const void **)v79;
              *(_QWORD *)v79 = 0;
              *v78 = v80;
              v81 = *(const void **)v79;
              *(_QWORD *)v79 = 0;
              if (v81)
                CFRelease(v81);
              ++v78;
              v79 = (WTF *)((char *)v79 + 8);
              v77 -= 8;
            }
            while (v77);
          }
          if (v719)
          {
            if (v76 == v719)
              v73 = 0;
            else
              v73 = v73;
            if (v76 == v719)
              v82 = 0;
            else
              v82 = v76;
            WTF::fastFree(v719, v75);
          }
          else
          {
            v82 = v76;
          }
          v719 = v82;
          *((_QWORD *)v82 + v26) = cf;
          if (cf)
            CFRetain(cf);
          v721 = v26 + 1;
          v26 = v73;
        }
        else
        {
          *((_QWORD *)v719 + v721) = cf;
          if (cf)
            CFRetain(cf);
          ++v721;
        }
        v28 = v722;
        goto LABEL_123;
      }
      SubResults = PAL::softLinkDataDetectorsCoreDDResultGetSubResults(v29);
      for (i = 0; ; ++i)
      {
        v723 = v28;
        if (i >= objc_msgSend((id)SubResults, "count"))
          break;
        v33 = (const void *)objc_msgSend(cf, "indexPathByAddingIndex:", i);
        v34 = v33;
        v35 = v26;
        if (v721 == (_DWORD)v26)
        {
          v36 = ((unint64_t)v26 >> 2) + v26;
          if (v36 >= 0x10)
            v37 = v36 + 1;
          else
            v37 = 16;
          if (v37 <= (unint64_t)v26 + 1)
            v38 = v26 + 1;
          else
            v38 = v37;
          if (v38 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B49144);
          }
          v39 = WTF::fastMalloc((WTF *)(8 * v38));
          v41 = (WTF *)v39;
          if ((_DWORD)v26)
          {
            v42 = 8 * v26;
            v43 = (_QWORD *)v39;
            v44 = v719;
            do
            {
              v45 = *(const void **)v44;
              *(_QWORD *)v44 = 0;
              *v43 = v45;
              v46 = *(const void **)v44;
              *(_QWORD *)v44 = 0;
              if (v46)
                CFRelease(v46);
              ++v43;
              v44 = (WTF *)((char *)v44 + 8);
              v42 -= 8;
            }
            while (v42);
          }
          if (v719)
          {
            if (v41 == v719)
              v38 = 0;
            else
              v38 = v38;
            if (v41 == v719)
              v47 = 0;
            else
              v47 = v41;
            WTF::fastFree(v719, v40);
          }
          else
          {
            v47 = v41;
          }
          v719 = v47;
          *((_QWORD *)v47 + v26) = v34;
          if (v34)
            CFRetain(v34);
          v35 = v38;
        }
        else
        {
          *((_QWORD *)v719 + v721) = v33;
          if (v33)
            CFRetain(v33);
        }
        v26 = v35;
        ++v721;
        v48 = (const void *)objc_msgSend((id)SubResults, "objectAtIndex:", i);
        v49 = v48;
        if (v720 == (_DWORD)v27)
        {
          v50 = v720 + ((unint64_t)v720 >> 2);
          if (v50 >= 0x10)
            v51 = v50 + 1;
          else
            v51 = 16;
          if (v51 <= (unint64_t)v720 + 1)
            v27 = v720 + 1;
          else
            v27 = v51;
          if (v27 >> 29)
            goto LABEL_1282;
          v52 = WTF::fastMalloc((WTF *)(8 * v27));
          v54 = (WTF *)v52;
          if (v720)
          {
            v55 = 8 * v720;
            v56 = (_QWORD *)v52;
            v57 = v723;
            do
            {
              v58 = *(const void **)v57;
              *(_QWORD *)v57 = 0;
              *v56 = v58;
              v59 = *(const void **)v57;
              *(_QWORD *)v57 = 0;
              if (v59)
                CFRelease(v59);
              ++v56;
              v57 = (WTF *)((char *)v57 + 8);
              v55 -= 8;
            }
            while (v55);
          }
          if (v723)
          {
            if (v54 == v723)
            {
              LODWORD(v27) = 0;
              v60 = 0;
            }
            else
            {
              v60 = v54;
            }
            WTF::fastFree(v723, v53);
          }
          else
          {
            v60 = v54;
          }
          v723 = v60;
          *((_QWORD *)v60 + v720) = v49;
          if (v49)
            CFRetain(v49);
        }
        else
        {
          *((_QWORD *)v723 + v720) = v48;
          if (v48)
            CFRetain(v48);
        }
        ++v720;
        v28 = v723;
      }
LABEL_123:
      ++v707;
      ++v709;
    }
    while (v709 != v706);
    v25 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v737, v756, 16);
  }
  while (v25);
LABEL_132:
  v754 = 0;
  v753 = 0;
  WebCore::TextIterator::TextIterator((uint64_t)&v757, v695, 0);
  v724 = v28;
  if (v720)
  {
    v85 = 0;
    v86 = 0;
    v710 = 0;
    v87 = v28;
    cfa = (WTF *)((char *)v28 + 8 * v720);
    while (1)
    {
      QueryRangeForURLification = PAL::softLinkDataDetectorsCoreDDResultGetQueryRangeForURLification(*(_QWORD *)v87);
      v90 = v89;
      v91 = (uint64_t)(int)QueryRangeForURLification >> 16;
      FragmentMetaData = PAL::softLinkDataDetectorsCoreDDScanQueryGetFragmentMetaData(a5, v91);
      v93 = v760;
      if (v86 < FragmentMetaData && v760 != 0)
      {
        do
        {
          WebCore::TextIterator::advance((WebCore::TextIterator *)&v757, v84);
          ++v86;
          v93 = v760;
        }
        while (v86 < FragmentMetaData && v760);
      }
      if (!v93)
      {
        v171 = (WTF *)(SubResults & 0xFFFFFFFFFFFFFF00);
        v170 = 1;
LABEL_258:
        v173 = v690;
        v172 = *(double *)&v693;
LABEL_269:
        WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v757, v84);
        v184 = v753;
        if (v85)
        {
          v185 = 0;
          do
          {
            WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)((char *)v184 + v185), v17);
            v185 += 16;
          }
          while (16 * v85 != v185);
          v28 = v724;
        }
        goto LABEL_274;
      }
      v752 = 0;
      v751 = 0;
      if (v91 == (uint64_t)(int)v90 >> 16)
      {
        v95 = v761;
        if (v761)
        {
          v96 = *((_QWORD *)v761 + 6);
          for (j = 0; ; ++j)
          {
            v98 = v96 & 0xFFFFFFFFFFFFLL;
            if (!v98)
              break;
            v96 = *(_QWORD *)(v98 + 48);
          }
          v762 = vadd_s32(v762, vdup_n_s32(j));
          v761 = 0;
          if (*((_DWORD *)v95 + 6) == 2)
          {
            if ((*((_WORD *)v95 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v95, v84);
          }
          else
          {
            *((_DWORD *)v95 + 6) -= 2;
          }
        }
        v103 = v760;
        v104 = v762.i32[0];
        *((_DWORD *)v760 + 6) += 4;
        v743 = (unint64_t)v103;
        v744 = v104;
        v746 = v103;
        v747 = v762.i32[1];
        WebCore::resolveCharacterRange(&v743, QueryRangeForURLification >> 32, (uint64_t)(v90 - (QueryRangeForURLification & 0xFFFFFFFF00000000)) >> 32, 0, v748);
        v105 = HIDWORD(v752);
        if (HIDWORD(v752) == (_DWORD)v752)
        {
          v106 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v751, HIDWORD(v752) + 1, (unint64_t)v748);
          v105 = HIDWORD(v752);
          v107 = (char *)v751 + 32 * HIDWORD(v752);
          v108 = *(_QWORD *)v106;
          *(_QWORD *)v106 = 0;
          *(_QWORD *)v107 = v108;
          *((_DWORD *)v107 + 2) = *(_DWORD *)(v106 + 8);
          v109 = *(_QWORD *)(v106 + 16);
          *(_QWORD *)(v106 + 16) = 0;
          *((_QWORD *)v107 + 2) = v109;
          v110 = (__int32 *)(v107 + 24);
          v111 = (__int32 *)(v106 + 24);
        }
        else
        {
          v116 = (char *)v751 + 32 * HIDWORD(v752);
          v117 = v748[0];
          v748[0] = 0;
          *(_QWORD *)v116 = v117;
          *((_DWORD *)v116 + 2) = v748[1];
          v118 = v749;
          v749 = 0;
          *((_QWORD *)v116 + 2) = v118;
          v110 = (__int32 *)(v116 + 24);
          v111 = &v750;
        }
        *v110 = *v111;
        HIDWORD(v752) = v105 + 1;
        v119 = v749;
        v749 = 0;
        if (v119)
        {
          if (*((_DWORD *)v119 + 6) == 2)
          {
            if ((*((_WORD *)v119 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v119, v84);
          }
          else
          {
            *((_DWORD *)v119 + 6) -= 2;
          }
        }
        v120 = v748[0];
        v748[0] = 0;
        if (v120)
        {
          if (*((_DWORD *)v120 + 6) == 2)
          {
            if ((*((_WORD *)v120 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v120, v84);
          }
          else
          {
            *((_DWORD *)v120 + 6) -= 2;
          }
        }
        v121 = v746;
        v746 = 0;
        if (v121)
        {
          if (*((_DWORD *)v121 + 6) == 2)
          {
            if ((*((_WORD *)v121 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v121, v84);
          }
          else
          {
            *((_DWORD *)v121 + 6) -= 2;
          }
        }
        v122 = (WTF::StringImpl *)v743;
        v743 = 0;
        if (!v122)
          goto LABEL_188;
        goto LABEL_186;
      }
      v99 = v761;
      if (!v761)
        goto LABEL_178;
      v100 = *((_QWORD *)v761 + 6);
      for (k = 0; ; ++k)
      {
        v102 = v100 & 0xFFFFFFFFFFFFLL;
        if (!v102)
          break;
        v100 = *(_QWORD *)(v102 + 48);
      }
      v762 = vadd_s32(v762, vdup_n_s32(k));
      v761 = 0;
      v112 = *((_DWORD *)v99 + 6);
      v113 = v112 - 2;
      if (v112 != 2)
      {
        v114 = 0;
        v115 = 0;
        *((_DWORD *)v99 + 6) = v113;
        goto LABEL_179;
      }
      if ((*((_WORD *)v99 + 15) & 0x400) != 0)
      {
LABEL_178:
        v114 = 0;
        v115 = 0;
      }
      else
      {
        WebCore::Node::removedLastRef(v99, v84);
        v115 = HIDWORD(v752);
        v114 = v752;
      }
LABEL_179:
      v123 = v760;
      v124 = *((_DWORD *)v760 + 6);
      v125 = v762.i32[0];
      *((_DWORD *)v760 + 6) = v124 + 4;
      v748[0] = v123;
      v749 = v123;
      v750 = v762.i32[1];
      v126 = v125 + HIDWORD(QueryRangeForURLification);
      LODWORD(v748[1]) = v126;
      if (v115 == v114)
      {
        v127 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v751, v115 + 1, (unint64_t)v748);
        v115 = HIDWORD(v752);
        v128 = (char *)v751 + 32 * HIDWORD(v752);
        v129 = *(_QWORD *)v127;
        *(_DWORD *)(v129 + 24) = *(_DWORD *)(*(_QWORD *)v127 + 24) + 2;
        *(_QWORD *)v128 = v129;
        *((_DWORD *)v128 + 2) = *(_DWORD *)(v127 + 8);
        v130 = *(_QWORD *)(v127 + 16);
        *(_DWORD *)(v130 + 24) += 2;
        *((_QWORD *)v128 + 2) = v130;
        v131 = v128 + 24;
      }
      else
      {
        v132 = (char *)v751 + 32 * v115;
        *((_DWORD *)v123 + 6) = v124 + 6;
        *(_QWORD *)v132 = v123;
        *((_DWORD *)v132 + 2) = v126;
        v133 = v749;
        *((_DWORD *)v749 + 6) += 2;
        *((_QWORD *)v132 + 2) = v133;
        v131 = v132 + 24;
        v127 = (unint64_t)v748;
      }
      *v131 = *(_DWORD *)(v127 + 24);
      HIDWORD(v752) = v115 + 1;
      v134 = v749;
      v749 = 0;
      if (v134)
      {
        if (*((_DWORD *)v134 + 6) == 2)
        {
          if ((*((_WORD *)v134 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v134, v84);
        }
        else
        {
          *((_DWORD *)v134 + 6) -= 2;
        }
      }
      v122 = v748[0];
      v748[0] = 0;
      if (!v122)
        goto LABEL_188;
LABEL_186:
      if (*((_DWORD *)v122 + 6) == 2)
      {
        if ((*((_WORD *)v122 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v122, v84);
      }
      else
      {
        *((_DWORD *)v122 + 6) -= 2;
      }
LABEL_188:
      v135 = (uint64_t)(int)v90 >> 16;
      if (v91 >= v135)
      {
        v137 = 0;
LABEL_229:
        if (v85 == (_DWORD)v754)
        {
          v159 = WTF::Vector<WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v753, v85 + 1, (unint64_t)&v751);
          v160 = HIDWORD(v754);
          v710 = v753;
          v161 = (char *)v753 + 16 * HIDWORD(v754);
          *(_QWORD *)v161 = 0;
          *((_QWORD *)v161 + 1) = 0;
          v162 = *(_QWORD *)v159;
          *(_QWORD *)v159 = 0;
          *(_QWORD *)v161 = v162;
          LODWORD(v162) = *(_DWORD *)(v159 + 8);
          *(_DWORD *)(v159 + 8) = 0;
          *((_DWORD *)v161 + 2) = v162;
          LODWORD(v162) = *(_DWORD *)(v159 + 12);
          *(_DWORD *)(v159 + 12) = 0;
          *((_DWORD *)v161 + 3) = v162;
          v85 = v160 + 1;
          HIDWORD(v754) = v160 + 1;
        }
        else
        {
          v163 = (char *)v710 + 16 * v85;
          *(_QWORD *)v163 = 0;
          *((_QWORD *)v163 + 1) = 0;
          v164 = v751;
          v751 = 0;
          *(_QWORD *)v163 = v164;
          LODWORD(v164) = v752;
          LODWORD(v752) = 0;
          *((_DWORD *)v163 + 2) = (_DWORD)v164;
          LODWORD(v164) = HIDWORD(v752);
          HIDWORD(v752) = 0;
          *((_DWORD *)v163 + 3) = (_DWORD)v164;
          HIDWORD(v754) = ++v85;
        }
      }
      else
      {
        v136 = HIDWORD(v90);
        v137 = 1;
        while (1)
        {
          v138 = PAL::softLinkDataDetectorsCoreDDScanQueryGetFragmentMetaData(a5, ++v91);
          if (v86 < v138)
            break;
LABEL_194:
          if (!v760)
            goto LABEL_231;
          v139 = v761;
          if (v761)
          {
            v140 = *((_QWORD *)v761 + 6);
            for (m = 0; ; ++m)
            {
              v142 = v140 & 0xFFFFFFFFFFFFLL;
              if (!v142)
                break;
              v140 = *(_QWORD *)(v142 + 48);
            }
            v762 = vadd_s32(v762, vdup_n_s32(m));
            v761 = 0;
            if (*((_DWORD *)v139 + 6) == 2)
            {
              if ((*((_WORD *)v139 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v139, v84);
            }
            else
            {
              *((_DWORD *)v139 + 6) -= 2;
            }
          }
          v143 = v760;
          v144 = *((_DWORD *)v760 + 6);
          v145 = v762.i32[0];
          *((_DWORD *)v760 + 6) = v144 + 4;
          v146 = v762.i32[1];
          v748[0] = v143;
          LODWORD(v748[1]) = v145;
          v749 = v143;
          if (v91 == v135)
            v146 = v145 + v136;
          v750 = v146;
          if (!HIDWORD(v752))
          {
            __break(0xC471u);
            JUMPOUT(0x194B4915CLL);
          }
          if (*((WTF::StringImpl **)v751 + 4 * HIDWORD(v752) - 4) == v143)
          {
            v152 = (char *)v751 + 32 * HIDWORD(v752) - 32;
            *((_DWORD *)v143 + 6) = v144 + 6;
            v153 = *((_QWORD *)v152 + 2);
            *((_QWORD *)v152 + 2) = v143;
            if (v153)
            {
              if (*(_DWORD *)(v153 + 24) == 2)
              {
                if ((*(_WORD *)(v153 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v153, v84);
                  v146 = v750;
                }
              }
              else
              {
                *(_DWORD *)(v153 + 24) -= 2;
              }
            }
            *((_DWORD *)v152 + 6) = v146;
            v28 = v724;
          }
          else if (HIDWORD(v752) == (_DWORD)v752)
          {
            v147 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v751, HIDWORD(v752) + 1, (unint64_t)v748);
            v148 = HIDWORD(v752) + 1;
            v149 = (char *)v751 + 32 * HIDWORD(v752);
            v150 = *(_QWORD *)v147;
            *(_DWORD *)(v150 + 24) = *(_DWORD *)(*(_QWORD *)v147 + 24) + 2;
            *(_QWORD *)v149 = v150;
            *((_DWORD *)v149 + 2) = *(_DWORD *)(v147 + 8);
            v151 = *(_QWORD *)(v147 + 16);
            *(_DWORD *)(v151 + 24) += 2;
            *((_QWORD *)v149 + 2) = v151;
            *((_DWORD *)v149 + 6) = *(_DWORD *)(v147 + 24);
            HIDWORD(v752) = v148;
          }
          else
          {
            v154 = HIDWORD(v752) + 1;
            v155 = (char *)v751 + 32 * HIDWORD(v752);
            *((_DWORD *)v143 + 6) = v144 + 6;
            *(_QWORD *)v155 = v143;
            *((_DWORD *)v155 + 2) = v145;
            v156 = v749;
            *((_DWORD *)v749 + 6) += 2;
            *((_QWORD *)v155 + 2) = v156;
            *((_DWORD *)v155 + 6) = v750;
            HIDWORD(v752) = v154;
          }
          v157 = v749;
          v749 = 0;
          if (v157)
          {
            if (*((_DWORD *)v157 + 6) == 2)
            {
              if ((*((_WORD *)v157 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v157, v84);
            }
            else
            {
              *((_DWORD *)v157 + 6) -= 2;
            }
          }
          v158 = v748[0];
          v748[0] = 0;
          if (v158)
          {
            if (*((_DWORD *)v158 + 6) == 2)
            {
              if ((*((_WORD *)v158 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v158, v84);
            }
            else
            {
              *((_DWORD *)v158 + 6) -= 2;
            }
          }
          v137 = v91 < v135;
          if (v91 == v135)
            goto LABEL_229;
        }
        while (v760)
        {
          WebCore::TextIterator::advance((WebCore::TextIterator *)&v757, v84);
          if (v138 == ++v86)
          {
            v86 = v138;
            goto LABEL_194;
          }
        }
LABEL_231:
        SubResults &= 0xFFFFFFFFFFFFFF00;
      }
      if (HIDWORD(v752))
      {
        v166 = 32 * HIDWORD(v752);
        v167 = (uint64_t *)((char *)v751 + 16);
        do
        {
          v168 = *v167;
          *v167 = 0;
          if (v168)
          {
            if (*(_DWORD *)(v168 + 24) == 2)
            {
              if ((*(_WORD *)(v168 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v168, v84);
            }
            else
            {
              *(_DWORD *)(v168 + 24) -= 2;
            }
          }
          v169 = *(v167 - 2);
          *(v167 - 2) = 0;
          if (v169)
          {
            if (*(_DWORD *)(v169 + 24) == 2)
            {
              if ((*(_WORD *)(v169 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v169, v84);
            }
            else
            {
              *(_DWORD *)(v169 + 24) -= 2;
            }
          }
          v167 += 4;
          v166 -= 32;
        }
        while (v166);
      }
      v165 = v751;
      if (v751)
      {
        v751 = 0;
        LODWORD(v752) = 0;
        WTF::fastFree(v165, v84);
        if (v137)
        {
LABEL_256:
          v170 = 1;
          v171 = (WTF *)SubResults;
          goto LABEL_258;
        }
      }
      else if (v137)
      {
        goto LABEL_256;
      }
      v87 = (WTF *)((char *)v87 + 8);
      if (v87 == cfa)
      {
        if (v85)
        {
          if (!(v85 >> 28))
          {
            v173 = v690;
            v172 = *(double *)&v693;
            v171 = (WTF *)WTF::fastMalloc((WTF *)(16 * v85));
            v174 = v753;
            v175 = (WTF::StringImpl *)((char *)v753 + 16 * v85);
            v176 = v171;
            do
            {
              v177 = *((unsigned int *)v174 + 3);
              *(_QWORD *)v176 = 0;
              *((_QWORD *)v176 + 1) = 0;
              *((_DWORD *)v176 + 3) = v177;
              if ((_DWORD)v177)
              {
                if (v177 >> 27)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194B4917CLL);
                }
                v178 = WTF::fastMalloc((WTF *)(32 * v177));
                *((_DWORD *)v176 + 2) = v177;
                *(_QWORD *)v176 = v178;
                v179 = *((unsigned int *)v174 + 3);
                if ((_DWORD)v179)
                {
                  v180 = *(uint64_t **)v174;
                  v181 = *(_QWORD *)v174 + 32 * v179;
                  do
                  {
                    v182 = *v180;
                    *(_DWORD *)(v182 + 24) = *(_DWORD *)(*v180 + 24) + 2;
                    *(_QWORD *)v178 = v182;
                    *(_DWORD *)(v178 + 8) = *((_DWORD *)v180 + 2);
                    v183 = v180[2];
                    *(_DWORD *)(v183 + 24) += 2;
                    *(_QWORD *)(v178 + 16) = v183;
                    *(_DWORD *)(v178 + 24) = *((_DWORD *)v180 + 6);
                    v180 += 4;
                    v178 += 32;
                  }
                  while (v180 != (uint64_t *)v181);
                }
              }
              v176 = (WTF *)((char *)v176 + 16);
              v174 = (WTF::StringImpl *)((char *)v174 + 16);
            }
            while (v174 != v175);
            v170 = 0;
            v28 = v724;
            goto LABEL_269;
          }
LABEL_1282:
          __break(0xC471u);
          JUMPOUT(0x194B4913CLL);
        }
        break;
      }
    }
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&v757, v84);
  v85 = 0;
  v170 = 0;
  v171 = 0;
  v184 = v753;
  v173 = v690;
  v172 = *(double *)&v693;
LABEL_274:
  if (v184)
    WTF::fastFree(v184, v17);
  if ((v170 & 1) != 0)
  {
    v83 = 0;
    goto LABEL_1239;
  }
  v186 = CFTimeZoneCopyDefault();
  if (v173)
    HasProperties = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v172);
  else
    HasProperties = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v682 = HasProperties;
  v753 = 0;
  if (!v720)
  {
    v417 = 0;
    v418 = 1;
    goto LABEL_1226;
  }
  v683 = v186;
  v718 = v171;
  v708 = v687;
  v681 = 2 * (v687 & 1);
  v663 = v85;
  if (v720 > v85)
  {
    v665 = 0;
    v419 = 0;
    v694 = 0;
    v420 = v85;
    v713 = 4294901760;
    v421 = (uint32x2_t)0xFFFFFFF0FFFFFFF8;
    v422 = (float32x2_t)vdup_n_s32(0x437F0000u);
    v689 = v85;
    while (1)
    {
      v423 = *((_QWORD *)v28 + v419);
      HasProperties = PAL::softLinkDataDetectorsCoreDDResultGetQueryRangeForURLification(v423);
      if (v419 == v420)
      {
        __break(0xC471u);
        JUMPOUT(0x194B4916CLL);
      }
      v425 = (uint64_t)(int)v713 >> 16;
      v426 = (uint64_t)(int)HasProperties >> 16;
      if ((int)v425 >= (int)v426 && ((int)v425 > (int)v426 || SHIDWORD(v713) >= SHIDWORD(HasProperties)))
        goto LABEL_923;
      v698 = (char *)v718 + 16 * v419;
      if (!*((_DWORD *)v698 + 3))
        goto LABEL_923;
      v686 = v424;
      if (v419 >= v721)
      {
LABEL_1278:
        __break(0xC471u);
        JUMPOUT(0x194B49174);
      }
      v705 = v419;
      v427 = (void *)*((_QWORD *)v719 + v419);
      v428 = objc_msgSend(v427, "length");
      v429 = v428;
      if (!v428)
      {
        v692 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
        v28 = v724;
        v430 = v708;
        goto LABEL_859;
      }
      v430 = v708;
      if (v428 == 2)
      {
        v438 = objc_msgSend(v427, "indexAtPosition:", 0);
        v439 = objc_msgSend(v427, "indexAtPosition:", 1);
        v440 = v439;
        v441 = 0;
        v442 = v438;
        do
        {
          ++v441;
          v218 = v442 > 9;
          v442 /= 0xAuLL;
        }
        while (v218);
        v443 = 0;
        v444 = v439;
        do
        {
          ++v443;
          v218 = v444 > 9;
          v444 /= 0xAuLL;
        }
        while (v218);
        if (v443 < 0
          || ((v207 = __OFADD__(v443, 1), v445 = v443 + 1, !v207) ? (v446 = 0) : (v446 = 1),
              v441 < 0
           || (v446 & 1) != 0
           || (v447 = (v441 + v445), __OFADD__(v441, v445))
           || (v447 & 0x80000000) != 0
           || (WTF::tryFastCompactMalloc((WTF *)(v447 + 20)), (v434 = (WTF::StringImpl *)v757) == 0)))
        {
LABEL_1276:
          __break(0xC471u);
          JUMPOUT(0x194B49164);
        }
        v448 = 0;
        v449 = v757 + 20;
        *(_DWORD *)v757 = 2;
        *((_DWORD *)v434 + 1) = v447;
        *((_QWORD *)v434 + 1) = (char *)v434 + 20;
        *((_DWORD *)v434 + 4) = 4;
        v450 = v438;
        do
        {
          v759[v448--] = (v450 % 0xA) | 0x30;
          v218 = v450 > 9;
          v450 /= 0xAuLL;
        }
        while (v218);
        v28 = v724;
        v430 = v708;
        if (v448 + 26 <= 25)
          memcpy((char *)v434 + 20, &v759[v448 + 1], -v448);
        v451 = 0;
        do
        {
          ++v451;
          v218 = v438 > 9;
          v438 /= 0xAuLL;
        }
        while (v218);
        v452 = 0;
        v453 = (_BYTE *)(v449 + v451);
        *v453 = 47;
        do
        {
          v759[v452--] = (v440 % 0xA) | 0x30;
          v218 = v440 > 9;
          v440 /= 0xAuLL;
        }
        while (v218);
        if (v452 + 26 <= 25)
          memcpy(v453 + 1, &v759[v452 + 1], -v452);
        goto LABEL_856;
      }
      if (v428 == 1)
        break;
      v748[1] = 0;
      v748[0] = 0;
      LODWORD(v749) = 0;
      BYTE4(v749) = 1;
      v454 = objc_msgSend(v427, "indexAtPosition:", 0);
      v455 = v749;
      v456 = v454;
      do
      {
        v457 = v455++;
        v218 = v456 > 9;
        v456 /= 0xAuLL;
      }
      while (v218);
      if (v455 >= v749)
        v458 = v457 + 1;
      else
        v458 = 0xFFFFFFFFLL;
      v459 = v748[1];
      if ((v748[1] || (v459 = v748[0]) != 0) && (*((_BYTE *)v459 + 16) & 4) == 0)
      {
        v460 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v748);
        v28 = v724;
        if (v460)
        {
          v461 = -1;
          v462 = 24;
          do
          {
            v463 = v461;
            *((_BYTE *)&v757 + v462--) = (v454 % 0xA) | 0x30;
            --v461;
            v218 = v454 > 9;
            v454 /= 0xAuLL;
          }
          while (v218);
          if (v462 + 2 <= 25)
          {
            do
            {
              *v460++ = v759[v463 + 1];
              v234 = __CFADD__(v463++, 1);
            }
            while (!v234);
          }
        }
      }
      else
      {
        v464 = (void *)MEMORY[0x19AEA4824](v748, v458);
        v28 = v724;
        if (v464)
        {
          v465 = 0;
          do
          {
            v759[v465--] = (v454 % 0xA) | 0x30;
            v218 = v454 > 9;
            v454 /= 0xAuLL;
          }
          while (v218);
          if (v465 + 26 <= 25)
            memcpy(v464, &v759[v465 + 1], -v465);
        }
      }
      v466 = 1;
      do
      {
        v467 = objc_msgSend(v427, "indexAtPosition:", v466);
        v468 = 1;
        v469 = v467;
        do
        {
          v470 = v468++;
          v218 = v469 > 9;
          v469 /= 0xAuLL;
        }
        while (v218);
        if (v468)
          v471 = v470 + 1;
        else
          v471 = -1;
        if (__CFADD__(v471, (_DWORD)v749))
          v472 = 0xFFFFFFFFLL;
        else
          v472 = (v471 + (_DWORD)v749);
        v473 = v748[1];
        if ((v748[1] || (v473 = v748[0]) != 0) && (*((_BYTE *)v473 + 16) & 4) == 0)
        {
          v474 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v748);
          if (v474)
          {
            *v474 = 47;
            v476 = -1;
            v477 = 24;
            do
            {
              v478 = v476;
              *((_BYTE *)&v757 + v477--) = (v467 % 0xA) | 0x30;
              --v476;
              v218 = v467 > 9;
              v467 /= 0xAuLL;
            }
            while (v218);
            if (v477 + 2 <= 25)
            {
              v479 = v474 + 1;
              do
              {
                *v479++ = v759[v478 + 1];
                v234 = __CFADD__(v478++, 1);
              }
              while (!v234);
            }
          }
        }
        else
        {
          v480 = (_BYTE *)MEMORY[0x19AEA4824](v748, v472);
          if (v480)
          {
            v481 = 0;
            *v480 = 47;
            do
            {
              v759[v481--] = (v467 % 0xA) | 0x30;
              v218 = v467 > 9;
              v467 /= 0xAuLL;
            }
            while (v218);
            if (v481 + 26 <= 25)
              memcpy(v480 + 1, &v759[v481 + 1], -v481);
          }
        }
        ++v466;
      }
      while (v466 != v429);
      v434 = v748[0];
      if (v748[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v748),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v748),
            (v434 = v748[0]) != 0))
      {
        *(_DWORD *)v434 += 2;
      }
      v482 = v748[1];
      v748[1] = 0;
      if (v482)
      {
        if (*(_DWORD *)v482 == 2)
          WTF::StringImpl::destroy(v482, v475);
        else
          *(_DWORD *)v482 -= 2;
      }
      v483 = v748[0];
      v748[0] = 0;
      if (!v483)
        goto LABEL_855;
      if (*(_DWORD *)v483 != 2)
      {
        *(_DWORD *)v483 -= 2;
LABEL_855:
        if (!v434)
          goto LABEL_928;
        goto LABEL_856;
      }
      WTF::StringImpl::destroy(v483, v475);
      if (!v434)
      {
LABEL_928:
        v692 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
        goto LABEL_859;
      }
LABEL_856:
      v692 = (WTF::AtomStringImpl *)WTF::StringImpl::operator NSString *();
      if (v434)
      {
        if (*(_DWORD *)v434 == 2)
          WTF::StringImpl::destroy(v434, v484);
        else
          *(_DWORD *)v434 -= 2;
      }
LABEL_859:
      HasProperties = PAL::softLinkDataDetectorsCoreDDResultHasProperties(v423, 1);
      if (!(_DWORD)HasProperties)
      {
LABEL_921:
        v419 = v705;
        goto LABEL_922;
      }
      Category = PAL::softLinkDataDetectorsCoreDDResultGetCategory(v423);
      HasProperties = PAL::softLinkDataDetectorsCoreDDResultGetType(v423);
      v486 = (const void *)HasProperties;
      if ((v430 & 4) != 0 && Category == 3)
        goto LABEL_879;
      if ((v430 & 0x10) != 0)
      {
        v487 = (const void *)PAL::get_DataDetectorsCore_DDBinderTrackingNumberKey[0]((PAL *)HasProperties);
        HasProperties = CFEqual(v487, v486);
        if ((_DWORD)HasProperties)
          goto LABEL_879;
      }
      if ((v430 & 0x20) != 0)
      {
        v488 = (const void *)PAL::get_DataDetectorsCore_DDBinderFlightInformationKey[0]((PAL *)HasProperties);
        HasProperties = CFEqual(v488, v486);
        if ((_DWORD)HasProperties)
          goto LABEL_879;
      }
      if ((v430 & 0x40) != 0)
      {
        v489 = (const void *)PAL::get_DataDetectorsCore_DDBinderParsecSourceKey[0]((PAL *)HasProperties);
        HasProperties = CFEqual(v489, v486);
        if (!(_DWORD)HasProperties && (v430 & (Category == 2)) == 0)
        {
LABEL_872:
          if ((v430 & 2) == 0 || !v423)
            goto LABEL_1296;
          if ((byte_1EE335739 & 1) == 0)
          {
            v680 = (void *)MEMORY[0x1E0C99E60];
            v676 = (PAL *)PAL::get_DataDetectorsCore_DDBinderHttpURLKey[0]((PAL *)HasProperties);
            v641 = (PAL *)PAL::get_DataDetectorsCore_DDBinderWebURLKey[0](v676);
            v642 = (PAL *)PAL::get_DataDetectorsCore_DDBinderMailURLKey[0](v641);
            v643 = (PAL *)PAL::get_DataDetectorsCore_DDBinderGenericURLKey[0](v642);
            v644 = (const void *)objc_msgSend(v680, "setWithObjects:", v676, v641, v642, v643, PAL::get_DataDetectorsCore_DDBinderEmailKey[0](v643), 0);
            qword_1EE335748 = (uint64_t)v644;
            if (v644)
              CFRetain(v644);
            byte_1EE335739 = 1;
          }
          HasProperties = objc_msgSend((id)qword_1EE335748, "containsObject:", PAL::softLinkDataDetectorsCoreDDResultGetType(v423));
          if ((HasProperties & 1) == 0)
          {
LABEL_1296:
            if ((v430 & 8) == 0)
              goto LABEL_921;
            if (Category != 4)
              goto LABEL_921;
            HasProperties = PAL::softLinkDataDetectorsCoreDDResultIsPastDate(v423, v682, v683);
            if ((_DWORD)HasProperties)
              goto LABEL_921;
          }
        }
      }
      else if ((v430 & 1) == 0 || Category != 2)
      {
        goto LABEL_872;
      }
LABEL_879:
      HasProperties = PAL::softLinkDataDetectorsCoreDDURLStringForResult(v423, v692, v681, v682, v683);
      v491 = (WTF::AtomStringImpl *)HasProperties;
      v420 = v689;
      if (!HasProperties)
        goto LABEL_1217;
      v492 = *((unsigned int *)v698 + 3);
      if (!(_DWORD)v492)
      {
LABEL_1281:
        __break(0xC471u);
        JUMPOUT(0x194B4918CLL);
      }
      v493 = **(_QWORD **)v698;
      v494 = *(_QWORD *)(*(_QWORD *)v698 + 32 * v492 - 16);
      v495 = v493;
      while (1)
      {
        v496 = v495;
        if ((*(_WORD *)(v495 + 28) & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v495 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
        {
          goto LABEL_907;
        }
        v498 = (_DWORD *)(v495 + 24);
        v497 = *(_DWORD *)(v495 + 24);
        *(_DWORD *)(v496 + 24) = v497 + 2;
        v499 = *(_QWORD *)(v496 + 104);
        if (v499)
        {
          v500 = *(unsigned int *)(v499 + 4);
          if ((v500 & 1) != 0)
          {
            v501 = *(_QWORD *)(v499 + 40);
            v502 = *(unsigned int *)(v499 + 52);
            if (v502)
            {
LABEL_889:
              v503 = (uint64_t *)(v501 + 8);
              do
              {
                v504 = *(v503 - 1);
                if (v504 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                  || *(_QWORD *)(v504 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
                  && *(_QWORD *)(v504 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
                {
                  goto LABEL_897;
                }
                v503 += 2;
              }
              while (--v502);
            }
          }
          else
          {
            v501 = v499 + 32;
            v502 = v500 >> 5;
            if (v500 >> 5)
              goto LABEL_889;
          }
        }
        v503 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_897:
        v505 = *v503;
        if (!v505 || *(_DWORD *)(v505 + 4) != 4)
        {
LABEL_919:
          if (v497)
          {
            *v498 = v497;
          }
          else if ((*(_WORD *)(v496 + 30) & 0x400) == 0)
          {
            HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v496, v490);
          }
          goto LABEL_921;
        }
        v506 = *(_QWORD *)(v505 + 8);
        if ((*(_BYTE *)(v505 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v506 & 0xDF) != 0x54
            || (*(_BYTE *)(v506 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v506 + 2) & 0xDF) != 0x55)
          {
            goto LABEL_919;
          }
          v507 = *(unsigned __int8 *)(v506 + 3);
        }
        else
        {
          if ((*(_WORD *)v506 & 0xFFDF) != 0x54
            || (*(_WORD *)(v506 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v506 + 4) & 0xFFDF) != 0x55)
          {
            goto LABEL_919;
          }
          v507 = *(unsigned __int16 *)(v506 + 6);
        }
        if ((v507 & 0xFFFFFFDF) != 0x45)
          goto LABEL_919;
        HasProperties = (uint64_t)WebCore::removeResultLinksFromAnchor((WebCore::ContainerNode *)v496, (WebCore::Element *)v490);
        if (*v498 == 2)
        {
          v420 = v689;
          if ((*(_WORD *)(v496 + 30) & 0x400) == 0)
            HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v496, v490);
        }
        else
        {
          *v498 -= 2;
          v420 = v689;
        }
LABEL_907:
        if (v496 == v494)
          break;
        if ((*(_WORD *)(v496 + 28) & 4) != 0)
        {
          v495 = *(_QWORD *)(v496 + 80);
          if (v495)
            continue;
        }
        while (1)
        {
          v495 = *(_QWORD *)(v496 + 56);
          if (v495)
            break;
          v496 = *(_QWORD *)(v496 + 32);
          if (!v496)
            goto LABEL_935;
        }
      }
      v508 = *(_QWORD *)(v493 + 32);
      if (v508)
      {
        v509 = *(_WORD *)(v508 + 28);
        if ((v509 & 8) != 0)
        {
          while ((v509 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v508 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
          {
            v508 = *(_QWORD *)(v508 + 32);
            if (v508)
            {
              v509 = *(_WORD *)(v508 + 28);
              if ((v509 & 8) != 0)
                continue;
            }
            goto LABEL_935;
          }
          while (1)
          {
            v633 = *(_QWORD *)(v508 + 104);
            if (v633
              && ((v634 = *(unsigned int *)(v633 + 4), (v634 & 1) != 0)
                ? (v635 = *(_QWORD *)(v633 + 40), v636 = *(unsigned int *)(v633 + 52))
                : (v635 = v633 + 32, v636 = v634 >> 5),
                  v636))
            {
              v637 = (uint64_t *)(v635 + 8);
              while (1)
              {
                v638 = *(v637 - 1);
                if (v638 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                  || *(_QWORD *)(v638 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
                  && *(_QWORD *)(v638 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
                {
                  break;
                }
                v637 += 2;
                if (!--v636)
                  goto LABEL_1205;
              }
            }
            else
            {
LABEL_1205:
              v637 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            }
            v639 = *v637;
            if (!v639)
              break;
            if (*(_DWORD *)(v639 + 4) != 4)
              goto LABEL_1218;
            v640 = *(_QWORD *)(v639 + 8);
            if ((*(_BYTE *)(v639 + 16) & 4) != 0)
            {
              if ((*(_BYTE *)v640 & 0xDF) != 0x54
                || (*(_BYTE *)(v640 + 1) & 0xDF) != 0x52
                || (*(_BYTE *)(v640 + 2) & 0xDF) != 0x55)
              {
                goto LABEL_1218;
              }
              v632 = *(unsigned __int8 *)(v640 + 3);
            }
            else
            {
              if ((*(_WORD *)v640 & 0xFFDF) != 0x54
                || (*(_WORD *)(v640 + 2) & 0xFFDF) != 0x52
                || (*(_WORD *)(v640 + 4) & 0xFFDF) != 0x55)
              {
LABEL_1218:
                v28 = v724;
                v419 = v705;
                v420 = v689;
                goto LABEL_923;
              }
              v632 = *(unsigned __int16 *)(v640 + 6);
            }
            if ((v632 & 0xFFFFFFDF) != 0x45)
              goto LABEL_1218;
            HasProperties = (uint64_t)WebCore::removeResultLinksFromAnchor((WebCore::ContainerNode *)v508, (WebCore::Element *)v490);
            v508 = *(_QWORD *)(v508 + 32);
            v28 = v724;
            v420 = v689;
            if (!v508)
              goto LABEL_935;
            v631 = *(_WORD *)(v508 + 28);
            if ((v631 & 8) == 0)
              goto LABEL_935;
            while ((v631 & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v508 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
            {
              v508 = *(_QWORD *)(v508 + 32);
              if (v508)
              {
                v631 = *(_WORD *)(v508 + 28);
                if ((v631 & 8) != 0)
                  continue;
              }
              goto LABEL_935;
            }
          }
LABEL_1217:
          v419 = v705;
          goto LABEL_923;
        }
      }
LABEL_935:
      v419 = v705;
      v510 = (unint64_t)objc_msgSend(*((id *)v719 + v705), "length") > 1;
      HasProperties = PAL::softLinkDataDetectorsCoreDDShouldUseLightLinksForResult(v423, v510);
      v662 = HasProperties;
      v512 = *((unsigned int *)v698 + 3);
      v513 = v686;
      if (!(_DWORD)v512)
      {
        v713 = v686;
        goto LABEL_923;
      }
      v660 = v491;
      v514 = *(_DWORD **)v698;
      v515 = *(_QWORD *)v698 + 32 * v512;
      v658 = v515;
      while (2)
      {
        v516 = *(_QWORD *)v514;
        v517 = *(_QWORD *)(*(_QWORD *)v514 + 32);
        if (v517)
        {
          v518 = *(_DWORD *)(v516 + 24);
          *(_DWORD *)(v516 + 24) = v518 + 2;
          if ((*(_WORD *)(v516 + 28) & 2) == 0)
          {
            if (v518)
            {
              *(_DWORD *)(v516 + 24) = v518;
            }
            else if ((*(_WORD *)(v516 + 30) & 0x400) == 0)
            {
              HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v516, (void *)v511);
            }
            goto LABEL_1147;
          }
          v672 = v517;
          v673 = *(WebCore::Document **)(*(_QWORD *)(v516 + 40) + 8);
          v714 = v516;
          if (v694 == (WebCore::Node *)v516)
          {
            v520 = (WTF::StringImpl *)*((_QWORD *)v694 + 10);
            if (!v520)
              goto LABEL_963;
            v511 = v665;
            if (v665 || (v521 = *((_DWORD *)v520 + 1), v521 > v514[2]))
            {
              WTF::StringImpl::substring(*((WTF::StringImpl **)v694 + 10));
              goto LABEL_1165;
            }
          }
          else
          {
            if (v694)
              WebCore::CharacterData::setData(v694, &v753, v193);
            v519 = v514[2];
            if (!v519)
            {
              v520 = 0;
              goto LABEL_963;
            }
            v520 = *(WTF::StringImpl **)(v516 + 80);
            if (!v520)
              goto LABEL_963;
            v521 = *((_DWORD *)v520 + 1);
            if (v521 > v519)
            {
              WTF::StringImpl::substring(*(WTF::StringImpl **)(v516 + 80));
LABEL_1165:
              v520 = (WTF::StringImpl *)v757;
              if (!(_QWORD)v757 || !*(_DWORD *)(v757 + 4))
              {
LABEL_963:
                v527 = *(_DWORD **)(v516 + 80);
                if (!v527)
                  goto LABEL_967;
                v511 = v514[2];
                if ((_DWORD)v511 || v527[1] > v514[6])
                {
                  WTF::StringImpl::substring(*(WTF::StringImpl **)(v516 + 80));
                  v527 = (_DWORD *)v757;
                  if (v520)
                    goto LABEL_968;
                }
                else
                {
                  *v527 += 2;
LABEL_967:
                  if (v520)
                  {
LABEL_968:
                    if (*(_DWORD *)v520 == 2)
                      WTF::StringImpl::destroy(v520, (WTF::StringImpl *)v511);
                    else
                      *(_DWORD *)v520 -= 2;
                  }
                }
                v528 = bmalloc::api::isoAllocate();
                *(_OWORD *)(v528 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v528 + 24) = 0x300300000002;
                v529 = (_DWORD *)(v528 + 24);
                *(_QWORD *)(v528 + 32) = 0;
                *(_QWORD *)(v528 + 40) = (char *)v673 + 96;
                *(_OWORD *)(v528 + 48) = 0u;
                *(_OWORD *)(v528 + 64) = 0u;
                ++*((_DWORD *)v673 + 831);
                v530 = v527;
                if (v527 || (v530 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
                  *v530 += 2;
                v669 = (_WORD *)(v528 + 30);
                *(_QWORD *)(v528 + 80) = v530;
                *(_QWORD *)v528 = off_1E33A8078;
                *(_DWORD *)(v528 + 24) = 4;
                *(_DWORD *)(v714 + 24) += 2;
                *(_QWORD *)&v757 = v714;
                v679 = (WTF::StringImpl *)v527;
                v699 = (_DWORD *)(v528 + 24);
                WebCore::ContainerNode::insertBefore(v672, (uint64_t *)v528, (WebCore::Node **)&v757, (uint64_t)v731);
                if (v733)
                {
                  v532 = v732;
                  v732 = 0;
                  if (v532)
                  {
                    if (*(_DWORD *)v532 == 2)
                      WTF::StringImpl::destroy(v532, v531);
                    else
                      *(_DWORD *)v532 -= 2;
                  }
                }
                v533 = v757;
                *(_QWORD *)&v757 = 0;
                if (v533)
                {
                  if (*(_DWORD *)(v533 + 24) == 2)
                  {
                    if ((*(_WORD *)(v533 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v533, v531);
                  }
                  else
                  {
                    *(_DWORD *)(v533 + 24) -= 2;
                  }
                }
                if (*v529 == 2)
                {
                  if ((*v669 & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v528, v531);
                }
                else
                {
                  *v529 -= 2;
                }
                v534 = bmalloc::api::isoAllocate();
                v536 = (WTF::StringImpl *)v534;
                *(_OWORD *)(v534 + 8) = xmmword_1968BC9D0;
                *(_QWORD *)(v534 + 24) = 0x101C00000002;
                v675 = (_DWORD *)(v534 + 24);
                *(_QWORD *)(v534 + 32) = 0;
                *(_QWORD *)(v534 + 40) = (char *)v673 + 96;
                *(_OWORD *)(v534 + 48) = 0u;
                *(_OWORD *)(v534 + 64) = 0u;
                ++*((_DWORD *)v673 + 831);
                *(_QWORD *)(v534 + 80) = 0;
                *(_QWORD *)(v534 + 88) = 0;
                v537 = WebCore::HTMLNames::aTag;
                if (WebCore::HTMLNames::aTag)
                  ++*(_DWORD *)WebCore::HTMLNames::aTag;
                v667 = (_WORD *)(v534 + 30);
                *(_QWORD *)(v534 + 96) = v537;
                *(_QWORD *)(v534 + 104) = 0;
                *(_QWORD *)v534 = off_1E33B3458;
                *(_QWORD *)(v534 + 112) = &unk_1E33B3958;
                *(_WORD *)(v534 + 120) = 0;
                *(_BYTE *)(v534 + 122) = 0;
                *(_DWORD *)(v534 + 124) = -1;
                *(_QWORD *)(v534 + 128) = 0;
                v538 = v714;
                WTF::AtomStringImpl::add(v660, v535);
                v748[0] = (WTF::StringImpl *)v757;
                v539 = *((_QWORD *)v536 + 13);
                if (v539
                  && ((v540 = *(unsigned int *)(v539 + 4), (v540 & 1) != 0)
                    ? (v541 = *(uint64_t **)(v539 + 40), v542 = *(unsigned int *)(v539 + 52))
                    : (v541 = (uint64_t *)(v539 + 32), v542 = v540 >> 5),
                      v542))
                {
                  v543 = 0;
                  while (1)
                  {
                    v544 = *v541;
                    if (*v541 == WebCore::HTMLNames::hrefAttr
                      || *(_QWORD *)(v544 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
                      && *(_QWORD *)(v544 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
                    {
                      break;
                    }
                    ++v543;
                    v541 += 2;
                    if (v542 == v543)
                      goto LABEL_996;
                  }
                }
                else
                {
LABEL_996:
                  v543 = 0xFFFFFFFFLL;
                }
                WebCore::Element::setAttributeInternal(v536, v543, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, v748, 0);
                v546 = v748[0];
                v748[0] = 0;
                if (v546)
                {
                  if (*(_DWORD *)v546 == 2)
                    WTF::StringImpl::destroy(v546, v545);
                  else
                    *(_DWORD *)v546 -= 2;
                }
                WTF::AtomStringImpl::add();
                v748[0] = (WTF::StringImpl *)v757;
                v547 = *((_QWORD *)v536 + 13);
                if (v547
                  && ((v548 = *(unsigned int *)(v547 + 4), (v548 & 1) != 0)
                    ? (v549 = *(uint64_t **)(v547 + 40), v550 = *(unsigned int *)(v547 + 52))
                    : (v549 = (uint64_t *)(v547 + 32), v550 = v548 >> 5),
                      v550))
                {
                  v551 = 0;
                  while (1)
                  {
                    v552 = *v549;
                    if (*v549 == WebCore::HTMLNames::dirAttr
                      || *(_QWORD *)(v552 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
                      && *(_QWORD *)(v552 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
                    {
                      break;
                    }
                    ++v551;
                    v549 += 2;
                    if (v550 == v551)
                      goto LABEL_1012;
                  }
                }
                else
                {
LABEL_1012:
                  v551 = 0xFFFFFFFFLL;
                }
                WebCore::Element::setAttributeInternal(v536, v551, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, v748, 0);
                v554 = v748[0];
                v748[0] = 0;
                if (v554)
                {
                  if (*(_DWORD *)v554 == 2)
                    WTF::StringImpl::destroy(v554, v553);
                  else
                    *(_DWORD *)v554 -= 2;
                }
                if (!v662)
                  goto LABEL_1070;
                WebCore::Document::updateStyleIfNeeded(v673);
                LOBYTE(v757) = 0;
                v758 = 0;
                v556 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v672 + 264))(v672, &v757);
                if (v758 && (v557 = (WTF::StringImpl *)*((_QWORD *)&v757 + 1), *((_QWORD *)&v757 + 1) = 0, v557))
                {
                  if (*(_DWORD *)v557 != 2)
                  {
                    *(_DWORD *)v557 -= 2;
                    goto LABEL_1021;
                  }
                  WTF::StringImpl::destroy(v557, v555);
                  if (!v556)
                  {
LABEL_1070:
                    WebCore::ContainerNode::appendChild((uint64_t)v536, (WebCore::Node *)v528, (uint64_t)v728);
                    if (v730)
                    {
                      v595 = v729;
                      v729 = 0;
                      if (v595)
                      {
                        if (*(_DWORD *)v595 == 2)
                          WTF::StringImpl::destroy(v595, v594);
                        else
                          *(_DWORD *)v595 -= 2;
                      }
                    }
                    v596 = *((_QWORD *)v536 + 13);
                    if (v596)
                    {
                      v597 = *(unsigned int *)(v596 + 4);
                      v598 = v679;
                      if ((v597 & 1) != 0)
                      {
                        v599 = *(uint64_t **)(v596 + 40);
                        v600 = *(unsigned int *)(v596 + 52);
                      }
                      else
                      {
                        v599 = (uint64_t *)(v596 + 32);
                        v600 = v597 >> 5;
                      }
                      if (v600)
                      {
                        v601 = 0;
                        while (1)
                        {
                          v602 = *v599;
                          if (*v599 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                            || *(_QWORD *)(v602 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
                            && *(_QWORD *)(v602 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
                          {
                            break;
                          }
                          ++v601;
                          v599 += 2;
                          if (v600 == v601)
                            goto LABEL_1087;
                        }
                      }
                      else
                      {
LABEL_1087:
                        v601 = 0xFFFFFFFFLL;
                      }
                    }
                    else
                    {
                      v601 = 0xFFFFFFFFLL;
                      v598 = v679;
                    }
                    WebCore::Element::setAttributeInternal(v536, v601, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectorsAttr, (WTF::StringImpl **)&WebCore::trueAtomData, 0);
                    v604 = PAL::softLinkDataDetectorsCoreDDResultGetCategory(v423) - 1;
                    v605 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
                    if (v604 <= 4)
                      v605 = (WTF::AtomStringImpl *)*((_QWORD *)&off_1E327FBA8 + (int)v604);
                    WTF::AtomStringImpl::add(v605, v603);
                    v748[0] = (WTF::StringImpl *)v757;
                    v606 = *((_QWORD *)v536 + 13);
                    if (v606
                      && ((v607 = *(unsigned int *)(v606 + 4), (v607 & 1) != 0)
                        ? (v608 = *(uint64_t **)(v606 + 40), v609 = *(unsigned int *)(v606 + 52))
                        : (v608 = (uint64_t *)(v606 + 32), v609 = v607 >> 5),
                          v609))
                    {
                      v610 = 0;
                      while (1)
                      {
                        v611 = *v608;
                        if (*v608 == WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                          || *(_QWORD *)(v611 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                                                                 + 24)
                          && *(_QWORD *)(v611 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                                                                 + 32))
                        {
                          break;
                        }
                        ++v610;
                        v608 += 2;
                        if (v609 == v610)
                          goto LABEL_1102;
                      }
                    }
                    else
                    {
LABEL_1102:
                      v610 = 0xFFFFFFFFLL;
                    }
                    WebCore::Element::setAttributeInternal(v536, v610, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectors_typeAttr, v748, 0);
                    v613 = v748[0];
                    v748[0] = 0;
                    if (v613)
                    {
                      if (*(_DWORD *)v613 == 2)
                        WTF::StringImpl::destroy(v613, v612);
                      else
                        *(_DWORD *)v613 -= 2;
                    }
                    WTF::AtomStringImpl::add(v692, (const __CFString *)v612);
                    v748[0] = (WTF::StringImpl *)v757;
                    v614 = *((_QWORD *)v536 + 13);
                    if (v614
                      && ((v615 = *(unsigned int *)(v614 + 4), (v615 & 1) != 0)
                        ? (v616 = *(uint64_t **)(v614 + 40), v617 = *(unsigned int *)(v614 + 52))
                        : (v616 = (uint64_t *)(v614 + 32), v617 = v615 >> 5),
                          v617))
                    {
                      v618 = 0;
                      while (1)
                      {
                        v619 = *v616;
                        if (*v616 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                          || *(_QWORD *)(v619 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                                                                 + 24)
                          && *(_QWORD *)(v619 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                                                                 + 32))
                        {
                          break;
                        }
                        ++v618;
                        v616 += 2;
                        if (v617 == v618)
                          goto LABEL_1118;
                      }
                    }
                    else
                    {
LABEL_1118:
                      v618 = 0xFFFFFFFFLL;
                    }
                    WebCore::Element::setAttributeInternal(v536, v618, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectors_resultAttr, v748, 0);
                    v621 = v748[0];
                    v748[0] = 0;
                    if (v621)
                    {
                      if (*(_DWORD *)v621 == 2)
                        WTF::StringImpl::destroy(v621, v620);
                      else
                        *(_DWORD *)v621 -= 2;
                    }
                    *(_DWORD *)(v538 + 24) += 2;
                    *(_QWORD *)&v757 = v538;
                    WebCore::ContainerNode::insertBefore(v672, (uint64_t *)v536, (WebCore::Node **)&v757, (uint64_t)v725);
                    if (v727)
                    {
                      v623 = v726;
                      v726 = 0;
                      if (v623)
                      {
                        if (*(_DWORD *)v623 == 2)
                          WTF::StringImpl::destroy(v623, v622);
                        else
                          *(_DWORD *)v623 -= 2;
                      }
                    }
                    v624 = v757;
                    *(_QWORD *)&v757 = 0;
                    if (v624)
                    {
                      if (*(_DWORD *)(v624 + 24) == 2)
                      {
                        if ((*(_WORD *)(v624 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v624, v622);
                      }
                      else
                      {
                        *(_DWORD *)(v624 + 24) -= 2;
                      }
                    }
                    v511 = v514[6];
                    v625 = *(WTF::StringImpl **)(v538 + 80);
                    if (v625)
                    {
                      if ((_DWORD)v511)
                      {
                        v627 = v514[6];
                        WTF::StringImpl::substring(v625);
                        v625 = (WTF::StringImpl *)v757;
                        v511 = v627;
                        v538 = v714;
                      }
                      else
                      {
                        *(_DWORD *)v625 += 2;
                      }
                    }
                    v665 = v511;
                    v626 = v753;
                    v753 = v625;
                    if (v626)
                    {
                      if (*(_DWORD *)v626 == 2)
                        WTF::StringImpl::destroy(v626, (WTF::StringImpl *)v511);
                      else
                        *(_DWORD *)v626 -= 2;
                    }
                    HasProperties = (uint64_t)v694;
                    if (v694)
                    {
                      if (*((_DWORD *)v694 + 6) == 2)
                      {
                        if ((*((_WORD *)v694 + 15) & 0x400) == 0)
                          HasProperties = (uint64_t)WebCore::Node::removedLastRef(v694, (void *)v511);
                      }
                      else
                      {
                        *((_DWORD *)v694 + 6) -= 2;
                      }
                    }
                    if (*v675 == 2)
                    {
                      if ((*v667 & 0x400) == 0)
                        HasProperties = (uint64_t)WebCore::Node::removedLastRef(v536, (void *)v511);
                    }
                    else
                    {
                      *v675 -= 2;
                    }
                    if (*v699 == 2)
                    {
                      v419 = v705;
                      if ((*v669 & 0x400) == 0)
                        HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v528, (void *)v511);
                    }
                    else
                    {
                      *v699 -= 2;
                      v419 = v705;
                    }
                    if (v598)
                    {
                      v513 = v686;
                      if (*(_DWORD *)v598 == 2)
                        HasProperties = WTF::StringImpl::destroy(v598, (WTF::StringImpl *)v511);
                      else
                        *(_DWORD *)v598 -= 2;
                      v694 = (WebCore::Node *)v538;
                    }
                    else
                    {
                      v694 = (WebCore::Node *)v538;
                      v513 = v686;
                    }
                    v515 = v658;
                    goto LABEL_1147;
                  }
                }
                else
                {
LABEL_1021:
                  if (!v556)
                    goto LABEL_1070;
                }
                WebCore::RenderStyle::visitedDependentColor(v556, 5, 0, (uint64_t *)&v751);
                v559 = v751;
                if (((unint64_t)v751 & 0x4000000000000) != 0)
                {
                  if (((unint64_t)v751 & 0x8000000000000) != 0)
                  {
                    *(_OWORD *)v748 = *(_OWORD *)(((unint64_t)v751 & 0xFFFFFFFFFFFFLL) + 4);
                    *(_QWORD *)&v757 = &v755;
                    *((_QWORD *)&v757 + 1) = v748;
                    _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_((unint64_t)v751 >> 56, (uint64_t)&v757);
                    v562 = v422;
                    v561 = v421;
                  }
                  else
                  {
                    v560 = bswap32(v751);
                    v561 = v421;
                    v562 = v422;
                    *(float32x2_t *)((char *)&v757 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v560), v421), (int8x8_t)0xFF000000FFLL)), v422);
                    *(float *)&v757 = (float)v560 / 255.0;
                    *((float *)&v757 + 3) = (float)HIBYTE(v560) / 255.0;
                    v563 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v757);
                  }
                  v743 = __PAIR64__(v564, LODWORD(v563));
                  v744 = 1112014848;
                  v745 = v565 * 0.38;
                  v566 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v743);
                  v568 = v567;
                  v570 = v569;
                  v572 = v571;
                  v574 = WebCore::StyledElement::ensureMutableInlineStyle(v536, v573);
                  dword_1ECE8C3A8 += 2;
                  *(_QWORD *)&v757 = &WebCore::staticCSSValuePool[3584];
                  WebCore::MutableStyleProperties::setProperty(v574, 5, (_DWORD **)&v757, 0);
                  v579 = (_DWORD *)v757;
                  *(_QWORD *)&v757 = 0;
                  if (v579)
                  {
                    if (*v579 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v579, v575);
                    else
                      *v579 -= 2;
                  }
                  WebCore::StyledElement::inlineStyleChanged(v536, (uint64_t)v575, v576, v577, v578);
                  v580 = 255.0;
                  v581 = v570 * 255.0;
                  if (v570 > 1.0)
                    v581 = 255.0;
                  if (v570 >= 0.0)
                    v582 = v581;
                  else
                    v582 = 0.0;
                  v583 = llroundf(v582);
                  if (v583 >= 255)
                    v583 = 255;
                  v584 = (v583 & ~(v583 >> 63)) << 16;
                  v585 = llroundf(v572 * 255.0);
                  if (v585 >= 255)
                    v585 = 255;
                  v586 = v584 | ((v585 & ~(v585 >> 63)) << 24);
                  v587 = v568 * 255.0;
                  if (v568 > 1.0)
                    v587 = 255.0;
                  if (v568 >= 0.0)
                    v588 = v587;
                  else
                    v588 = 0.0;
                  v589 = llroundf(v588);
                  if (v589 >= 255)
                    v589 = 255;
                  v590 = v586 | ((v589 & ~(v589 >> 63)) << 8);
                  if (v566 <= 1.0)
                    v580 = v566 * 255.0;
                  if (v566 >= 0.0)
                    v591 = v580;
                  else
                    v591 = 0.0;
                  v592 = llroundf(v591);
                  if (v592 >= 255)
                    v592 = 255;
                  v748[0] = (WTF::StringImpl *)(bswap32(v590 | v592 & ~(v592 >> 63)) | 0x1104000000000000);
                  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v757, (unint64_t)v748[0], (uint64_t *)v748);
                  WebCore::StyledElement::setInlineStyleProperty(v536, (WTF::StringImpl *)0xFE, (uint64_t)&v757, 0, 0);
                  v593 = (WTF::StringImpl *)v757;
                  *(_QWORD *)&v757 = 0;
                  v421 = v561;
                  v422 = v562;
                  if (v593)
                  {
                    if (*(_DWORD *)v593 == 2)
                      WTF::StringImpl::destroy(v593, v558);
                    else
                      *(_DWORD *)v593 -= 2;
                  }
                  v559 = v751;
                }
                if (((unint64_t)v559 & 0x8000000000000) != 0)
                {
                  v628 = (unsigned int *)((unint64_t)v559 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v629 = __ldaxr(v628);
                    v630 = v629 - 1;
                  }
                  while (__stlxr(v630, v628));
                  v28 = v724;
                  v538 = v714;
                  if (!v630)
                  {
                    atomic_store(1u, v628);
                    WTF::fastFree((WTF *)v628, v558);
                  }
                }
                goto LABEL_1070;
              }
LABEL_952:
              v522 = bmalloc::api::isoAllocate();
              *(_OWORD *)(v522 + 8) = xmmword_1968BC9D0;
              v523 = v516;
              *(_QWORD *)(v522 + 24) = 0x300300000002;
              v524 = (_DWORD *)(v522 + 24);
              *(_QWORD *)(v522 + 32) = 0;
              *(_QWORD *)(v522 + 40) = (char *)v673 + 96;
              *(_OWORD *)(v522 + 48) = 0u;
              *(_OWORD *)(v522 + 64) = 0u;
              ++*((_DWORD *)v673 + 831);
              *(_DWORD *)v520 += 2;
              *(_QWORD *)(v522 + 80) = v520;
              *(_QWORD *)v522 = off_1E33A8078;
              *(_DWORD *)(v523 + 24) += 2;
              *(_QWORD *)&v757 = v523;
              WebCore::ContainerNode::insertBefore(v672, (uint64_t *)v522, (WebCore::Node **)&v757, (uint64_t)v734);
              if (v736)
              {
                v525 = v735;
                v735 = 0;
                if (v525)
                {
                  if (*(_DWORD *)v525 == 2)
                    WTF::StringImpl::destroy(v525, (WTF::StringImpl *)v511);
                  else
                    *(_DWORD *)v525 -= 2;
                }
              }
              v526 = v757;
              *(_QWORD *)&v757 = 0;
              if (v526)
              {
                if (*(_DWORD *)(v526 + 24) == 2)
                {
                  if ((*(_WORD *)(v526 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v526, (void *)v511);
                }
                else
                {
                  *(_DWORD *)(v526 + 24) -= 2;
                }
              }
              if (*v524 == 2)
              {
                if ((*(_WORD *)(v522 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v522, (void *)v511);
              }
              else
              {
                *v524 -= 2;
              }
              v516 = v714;
              goto LABEL_963;
            }
          }
          *(_DWORD *)v520 += 2;
          if (!v521)
            goto LABEL_963;
          goto LABEL_952;
        }
LABEL_1147:
        v514 += 8;
        if (v514 != (_DWORD *)v515)
          continue;
        break;
      }
      v713 = v513;
LABEL_922:
      v420 = v689;
LABEL_923:
      if (++v419 == v720)
        goto LABEL_1223;
    }
    v431 = objc_msgSend(v427, "indexAtPosition:", 0);
    LODWORD(v432) = 0;
    v433 = v431;
    do
    {
      v432 = (v432 + 1);
      v218 = v433 > 9;
      v433 /= 0xAuLL;
    }
    while (v218);
    if ((v432 & 0x80000000) != 0)
    {
LABEL_1280:
      __break(0xC471u);
      JUMPOUT(0x194B49184);
    }
    if (!(_DWORD)v432)
    {
      v434 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v28 = v724;
      v430 = v708;
      goto LABEL_856;
    }
    WTF::tryFastCompactMalloc((WTF *)(v432 + 20));
    v434 = (WTF::StringImpl *)v757;
    if (!(_QWORD)v757)
      goto LABEL_1280;
    v435 = 0;
    v436 = (void *)(v757 + 20);
    *(_DWORD *)v757 = 2;
    *((_DWORD *)v434 + 1) = v432;
    *((_QWORD *)v434 + 1) = (char *)v434 + 20;
    *((_DWORD *)v434 + 4) = 4;
    do
    {
      v759[v435--] = (v431 % 0xA) | 0x30;
      v218 = v431 > 9;
      v431 /= 0xAuLL;
    }
    while (v218);
    v28 = v724;
    v430 = v708;
    if (v435 + 26 <= 25)
    {
      memcpy(v436, &v759[v435 + 1], -v435);
      if (!v434)
        goto LABEL_928;
      goto LABEL_856;
    }
    goto LABEL_855;
  }
  v671 = 0;
  v188 = 0;
  v694 = 0;
  v711 = 4294901760;
  v189 = (uint32x2_t)0xFFFFFFF0FFFFFFF8;
  v190 = (float32x2_t)vdup_n_s32(0x437F0000u);
  while (2)
  {
    v191 = *((_QWORD *)v28 + v188);
    HasProperties = PAL::softLinkDataDetectorsCoreDDResultGetQueryRangeForURLification(v191);
    v194 = (uint64_t)(int)v711 >> 16;
    v195 = (uint64_t)(int)HasProperties >> 16;
    if ((int)v194 >= (int)v195)
    {
      v218 = (int)v194 <= (int)v195 && SHIDWORD(v711) < SHIDWORD(HasProperties);
      if (!v218)
        goto LABEL_452;
    }
    v696 = (char *)v718 + 16 * v188;
    if (!*((_DWORD *)v696 + 3))
      goto LABEL_452;
    v688 = v192;
    if (v188 >= v721)
      goto LABEL_1278;
    v704 = v188;
    v196 = (void *)*((_QWORD *)v719 + v188);
    v197 = objc_msgSend(v196, "length");
    v198 = v197;
    if (!v197)
    {
      v691 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
      v28 = v724;
      v199 = v708;
      goto LABEL_389;
    }
    v199 = v708;
    if (v197 == 1)
    {
      v219 = objc_msgSend(v196, "indexAtPosition:", 0);
      LODWORD(v220) = 0;
      v221 = v219;
      do
      {
        v220 = (v220 + 1);
        v218 = v221 > 9;
        v221 /= 0xAuLL;
      }
      while (v218);
      if ((v220 & 0x80000000) != 0)
        goto LABEL_1280;
      if (!(_DWORD)v220)
      {
        v211 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v28 = v724;
        v199 = v708;
        goto LABEL_386;
      }
      WTF::tryFastCompactMalloc((WTF *)(v220 + 20));
      v211 = (WTF::StringImpl *)v757;
      if (!(_QWORD)v757)
        goto LABEL_1280;
      v222 = 0;
      v223 = (void *)(v757 + 20);
      *(_DWORD *)v757 = 2;
      *((_DWORD *)v211 + 1) = v220;
      *((_QWORD *)v211 + 1) = (char *)v211 + 20;
      *((_DWORD *)v211 + 4) = 4;
      do
      {
        v759[v222--] = (v219 % 0xA) | 0x30;
        v218 = v219 > 9;
        v219 /= 0xAuLL;
      }
      while (v218);
      v28 = v724;
      v199 = v708;
      if (v222 + 26 <= 25)
      {
        memcpy(v223, &v759[v222 + 1], -v222);
        if (v211)
          goto LABEL_386;
        goto LABEL_457;
      }
      goto LABEL_385;
    }
    if (v197 != 2)
    {
      v748[1] = 0;
      v748[0] = 0;
      LODWORD(v749) = 0;
      BYTE4(v749) = 1;
      v224 = objc_msgSend(v196, "indexAtPosition:", 0);
      v225 = v749;
      v226 = v224;
      do
      {
        v227 = v225++;
        v218 = v226 > 9;
        v226 /= 0xAuLL;
      }
      while (v218);
      if (v225 >= v749)
        v228 = v227 + 1;
      else
        v228 = 0xFFFFFFFFLL;
      v229 = v748[1];
      if ((v748[1] || (v229 = v748[0]) != 0) && (*((_BYTE *)v229 + 16) & 4) == 0)
      {
        v230 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v748);
        v28 = v724;
        if (v230)
        {
          v231 = -1;
          v232 = 24;
          do
          {
            v233 = v231;
            *((_BYTE *)&v757 + v232--) = (v224 % 0xA) | 0x30;
            --v231;
            v218 = v224 > 9;
            v224 /= 0xAuLL;
          }
          while (v218);
          if (v232 + 2 <= 25)
          {
            do
            {
              *v230++ = v759[v233 + 1];
              v234 = __CFADD__(v233++, 1);
            }
            while (!v234);
          }
        }
      }
      else
      {
        v235 = (void *)MEMORY[0x19AEA4824](v748, v228);
        v28 = v724;
        if (v235)
        {
          v236 = 0;
          do
          {
            v759[v236--] = (v224 % 0xA) | 0x30;
            v218 = v224 > 9;
            v224 /= 0xAuLL;
          }
          while (v218);
          if (v236 + 26 <= 25)
            memcpy(v235, &v759[v236 + 1], -v236);
        }
      }
      v237 = 1;
      do
      {
        v238 = objc_msgSend(v196, "indexAtPosition:", v237);
        v239 = 1;
        v240 = v238;
        do
        {
          v241 = v239++;
          v218 = v240 > 9;
          v240 /= 0xAuLL;
        }
        while (v218);
        if (v239)
          v242 = v241 + 1;
        else
          v242 = -1;
        if (__CFADD__(v242, (_DWORD)v749))
          v243 = 0xFFFFFFFFLL;
        else
          v243 = (v242 + (_DWORD)v749);
        v244 = v748[1];
        if ((v748[1] || (v244 = v748[0]) != 0) && (*((_BYTE *)v244 + 16) & 4) == 0)
        {
          v245 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)v748);
          if (v245)
          {
            *v245 = 47;
            v247 = -1;
            v248 = 24;
            do
            {
              v249 = v247;
              *((_BYTE *)&v757 + v248--) = (v238 % 0xA) | 0x30;
              --v247;
              v218 = v238 > 9;
              v238 /= 0xAuLL;
            }
            while (v218);
            if (v248 + 2 <= 25)
            {
              v250 = v245 + 1;
              do
              {
                *v250++ = v759[v249 + 1];
                v234 = __CFADD__(v249++, 1);
              }
              while (!v234);
            }
          }
        }
        else
        {
          v251 = (_BYTE *)MEMORY[0x19AEA4824](v748, v243);
          if (v251)
          {
            v252 = 0;
            *v251 = 47;
            do
            {
              v759[v252--] = (v238 % 0xA) | 0x30;
              v218 = v238 > 9;
              v238 /= 0xAuLL;
            }
            while (v218);
            if (v252 + 26 <= 25)
              memcpy(v251 + 1, &v759[v252 + 1], -v252);
          }
        }
        ++v237;
      }
      while (v237 != v198);
      v211 = v748[0];
      if (v748[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v748),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)v748),
            (v211 = v748[0]) != 0))
      {
        *(_DWORD *)v211 += 2;
      }
      v253 = v748[1];
      v748[1] = 0;
      if (v253)
      {
        if (*(_DWORD *)v253 == 2)
          WTF::StringImpl::destroy(v253, v246);
        else
          *(_DWORD *)v253 -= 2;
      }
      v254 = v748[0];
      v748[0] = 0;
      if (v254)
      {
        if (*(_DWORD *)v254 == 2)
        {
          WTF::StringImpl::destroy(v254, v246);
          if (v211)
            goto LABEL_386;
LABEL_457:
          v691 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
          goto LABEL_389;
        }
        *(_DWORD *)v254 -= 2;
      }
LABEL_385:
      if (v211)
        goto LABEL_386;
      goto LABEL_457;
    }
    v200 = objc_msgSend(v196, "indexAtPosition:", 0);
    v201 = objc_msgSend(v196, "indexAtPosition:", 1);
    v202 = v201;
    v203 = 0;
    v204 = v200;
    do
    {
      ++v203;
      v218 = v204 > 9;
      v204 /= 0xAuLL;
    }
    while (v218);
    v205 = 0;
    v206 = v201;
    do
    {
      ++v205;
      v218 = v206 > 9;
      v206 /= 0xAuLL;
    }
    while (v218);
    if (v205 < 0)
      goto LABEL_1276;
    v207 = __OFADD__(v205, 1);
    v208 = v205 + 1;
    v209 = v207;
    if (v203 < 0)
      goto LABEL_1276;
    if (v209)
      goto LABEL_1276;
    v210 = (v203 + v208);
    if (__OFADD__(v203, v208))
      goto LABEL_1276;
    if ((v210 & 0x80000000) != 0)
      goto LABEL_1276;
    WTF::tryFastCompactMalloc((WTF *)(v210 + 20));
    v211 = (WTF::StringImpl *)v757;
    if (!(_QWORD)v757)
      goto LABEL_1276;
    v212 = 0;
    v213 = v757 + 20;
    *(_DWORD *)v757 = 2;
    *((_DWORD *)v211 + 1) = v210;
    *((_QWORD *)v211 + 1) = (char *)v211 + 20;
    *((_DWORD *)v211 + 4) = 4;
    v214 = v200;
    do
    {
      v759[v212--] = (v214 % 0xA) | 0x30;
      v218 = v214 > 9;
      v214 /= 0xAuLL;
    }
    while (v218);
    v28 = v724;
    v199 = v708;
    if (v212 + 26 <= 25)
      memcpy((char *)v211 + 20, &v759[v212 + 1], -v212);
    v215 = 0;
    do
    {
      ++v215;
      v218 = v200 > 9;
      v200 /= 0xAuLL;
    }
    while (v218);
    v216 = 0;
    v217 = (_BYTE *)(v213 + v215);
    *v217 = 47;
    do
    {
      v759[v216--] = (v202 % 0xA) | 0x30;
      v218 = v202 > 9;
      v202 /= 0xAuLL;
    }
    while (v218);
    if (v216 + 26 <= 25)
      memcpy(v217 + 1, &v759[v216 + 1], -v216);
LABEL_386:
    v691 = (WTF::AtomStringImpl *)WTF::StringImpl::operator NSString *();
    if (v211)
    {
      if (*(_DWORD *)v211 == 2)
        WTF::StringImpl::destroy(v211, v255);
      else
        *(_DWORD *)v211 -= 2;
    }
LABEL_389:
    HasProperties = PAL::softLinkDataDetectorsCoreDDResultHasProperties(v191, 1);
    if (!(_DWORD)HasProperties)
      goto LABEL_451;
    v256 = PAL::softLinkDataDetectorsCoreDDResultGetCategory(v191);
    HasProperties = PAL::softLinkDataDetectorsCoreDDResultGetType(v191);
    v257 = (const void *)HasProperties;
    if ((v199 & 4) == 0 || v256 != 3)
    {
      if ((v199 & 0x10) == 0
        || (v258 = (const void *)PAL::get_DataDetectorsCore_DDBinderTrackingNumberKey[0]((PAL *)HasProperties),
            HasProperties = CFEqual(v258, v257),
            !(_DWORD)HasProperties))
      {
        if ((v199 & 0x20) == 0
          || (v259 = (const void *)PAL::get_DataDetectorsCore_DDBinderFlightInformationKey[0]((PAL *)HasProperties),
              HasProperties = CFEqual(v259, v257),
              !(_DWORD)HasProperties))
        {
          if ((v199 & 0x40) != 0)
          {
            v260 = (const void *)PAL::get_DataDetectorsCore_DDBinderParsecSourceKey[0]((PAL *)HasProperties);
            HasProperties = CFEqual(v260, v257);
            if (!(_DWORD)HasProperties && (v199 & (v256 == 2)) == 0)
              goto LABEL_402;
          }
          else if ((v199 & 1) == 0 || v256 != 2)
          {
LABEL_402:
            if ((v199 & 2) == 0 || !v191)
              goto LABEL_1297;
            if ((byte_1EE335739 & 1) == 0)
            {
              v685 = (void *)MEMORY[0x1E0C99E60];
              v678 = (PAL *)PAL::get_DataDetectorsCore_DDBinderHttpURLKey[0]((PAL *)HasProperties);
              v413 = (PAL *)PAL::get_DataDetectorsCore_DDBinderWebURLKey[0](v678);
              v414 = (PAL *)PAL::get_DataDetectorsCore_DDBinderMailURLKey[0](v413);
              v415 = (PAL *)PAL::get_DataDetectorsCore_DDBinderGenericURLKey[0](v414);
              v416 = (const void *)objc_msgSend(v685, "setWithObjects:", v678, v413, v414, v415, PAL::get_DataDetectorsCore_DDBinderEmailKey[0](v415), 0);
              qword_1EE335748 = (uint64_t)v416;
              if (v416)
                CFRetain(v416);
              byte_1EE335739 = 1;
            }
            HasProperties = objc_msgSend((id)qword_1EE335748, "containsObject:", PAL::softLinkDataDetectorsCoreDDResultGetType(v191));
            if ((HasProperties & 1) == 0)
            {
LABEL_1297:
              if ((v199 & 8) == 0)
                goto LABEL_451;
              if (v256 != 4)
                goto LABEL_451;
              HasProperties = PAL::softLinkDataDetectorsCoreDDResultIsPastDate(v191, v682, v683);
              if ((_DWORD)HasProperties)
                goto LABEL_451;
            }
          }
        }
      }
    }
    HasProperties = PAL::softLinkDataDetectorsCoreDDURLStringForResult(v191, v691, v681, v682, v683);
    v262 = (WTF::AtomStringImpl *)HasProperties;
    if (!HasProperties)
      goto LABEL_451;
    v263 = *((unsigned int *)v696 + 3);
    if (!(_DWORD)v263)
      goto LABEL_1281;
    v264 = **(_QWORD **)v696;
    v265 = *(_QWORD *)(*(_QWORD *)v696 + 32 * v263 - 16);
    v266 = v264;
    while (2)
    {
      v267 = v266;
      if ((*(_WORD *)(v266 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v266 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
      {
        v269 = (_DWORD *)(v266 + 24);
        v268 = *(_DWORD *)(v266 + 24);
        *(_DWORD *)(v267 + 24) = v268 + 2;
        v270 = *(_QWORD *)(v267 + 104);
        if (!v270)
          goto LABEL_426;
        v271 = *(unsigned int *)(v270 + 4);
        if ((v271 & 1) != 0)
        {
          v272 = *(_QWORD *)(v270 + 40);
          v273 = *(unsigned int *)(v270 + 52);
          if (!v273)
            goto LABEL_426;
        }
        else
        {
          v272 = v270 + 32;
          v273 = v271 >> 5;
          if (!(v271 >> 5))
          {
LABEL_426:
            v274 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            goto LABEL_427;
          }
        }
        v274 = (uint64_t *)(v272 + 8);
        while (1)
        {
          v275 = *(v274 - 1);
          if (v275 == WebCore::HTMLNames::x_apple_data_detectorsAttr
            || *(_QWORD *)(v275 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
            && *(_QWORD *)(v275 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
          {
            break;
          }
          v274 += 2;
          if (!--v273)
            goto LABEL_426;
        }
LABEL_427:
        v276 = *v274;
        if (!v276 || *(_DWORD *)(v276 + 4) != 4)
        {
LABEL_449:
          if (v268)
          {
            *v269 = v268;
          }
          else if ((*(_WORD *)(v267 + 30) & 0x400) == 0)
          {
            HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v267, v261);
          }
          goto LABEL_451;
        }
        v277 = *(_QWORD *)(v276 + 8);
        if ((*(_BYTE *)(v276 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v277 & 0xDF) != 0x54
            || (*(_BYTE *)(v277 + 1) & 0xDF) != 0x52
            || (*(_BYTE *)(v277 + 2) & 0xDF) != 0x55)
          {
            goto LABEL_449;
          }
          v278 = *(unsigned __int8 *)(v277 + 3);
        }
        else
        {
          if ((*(_WORD *)v277 & 0xFFDF) != 0x54
            || (*(_WORD *)(v277 + 2) & 0xFFDF) != 0x52
            || (*(_WORD *)(v277 + 4) & 0xFFDF) != 0x55)
          {
            goto LABEL_449;
          }
          v278 = *(unsigned __int16 *)(v277 + 6);
        }
        if ((v278 & 0xFFFFFFDF) != 0x45)
          goto LABEL_449;
        HasProperties = (uint64_t)WebCore::removeResultLinksFromAnchor((WebCore::ContainerNode *)v267, (WebCore::Element *)v261);
        if (*v269 == 2)
        {
          if ((*(_WORD *)(v267 + 30) & 0x400) == 0)
            HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v267, v261);
        }
        else
        {
          *v269 -= 2;
        }
      }
      if (v267 != v265)
      {
        if ((*(_WORD *)(v267 + 28) & 4) == 0 || (v266 = *(_QWORD *)(v267 + 80)) == 0)
        {
          while (1)
          {
            v266 = *(_QWORD *)(v267 + 56);
            if (v266)
              break;
            v267 = *(_QWORD *)(v267 + 32);
            if (!v267)
              goto LABEL_464;
          }
        }
        continue;
      }
      break;
    }
    v279 = *(_QWORD *)(v264 + 32);
    if (!v279 || (v280 = *(_WORD *)(v279 + 28), (v280 & 8) == 0))
    {
LABEL_464:
      v188 = v704;
      v281 = (unint64_t)objc_msgSend(*((id *)v719 + v704), "length") > 1;
      HasProperties = PAL::softLinkDataDetectorsCoreDDShouldUseLightLinksForResult(v191, v281);
      v670 = HasProperties;
      v283 = *((unsigned int *)v696 + 3);
      v284 = v688;
      if (!(_DWORD)v283)
      {
LABEL_710:
        v711 = v284;
        goto LABEL_452;
      }
      v664 = v262;
      v285 = *(_DWORD **)v696;
      v286 = *(_QWORD *)v696 + 32 * v283;
      v659 = (WTF::AtomStringImpl *)v286;
      v661 = v191;
      while (1)
      {
        v287 = *(_QWORD *)v285;
        v288 = *(_QWORD *)(*(_QWORD *)v285 + 32);
        if (v288)
        {
          v289 = *(_DWORD *)(v287 + 24);
          *(_DWORD *)(v287 + 24) = v289 + 2;
          if ((*(_WORD *)(v287 + 28) & 2) != 0)
          {
            v684 = v288;
            v290 = *(WebCore::Document **)(*(_QWORD *)(v287 + 40) + 8);
            v712 = v287;
            if (v694 == (WebCore::Node *)v287)
            {
              v292 = (WTF::StringImpl *)*((_QWORD *)v694 + 10);
              if (!v292)
                goto LABEL_492;
              v282 = v671;
              if (v671 || (v293 = *((_DWORD *)v292 + 1), v293 > v285[2]))
              {
                WTF::StringImpl::substring(*((WTF::StringImpl **)v694 + 10));
                goto LABEL_694;
              }
            }
            else
            {
              if (v694)
                WebCore::CharacterData::setData(v694, &v753, v193);
              v291 = v285[2];
              if (!v291)
              {
                v292 = 0;
                goto LABEL_492;
              }
              v292 = *(WTF::StringImpl **)(v287 + 80);
              if (!v292)
                goto LABEL_492;
              v293 = *((_DWORD *)v292 + 1);
              if (v293 > v291)
              {
                WTF::StringImpl::substring(*(WTF::StringImpl **)(v287 + 80));
LABEL_694:
                v292 = (WTF::StringImpl *)v757;
                if (!(_QWORD)v757 || !*(_DWORD *)(v757 + 4))
                {
LABEL_492:
                  v299 = *(_DWORD **)(v287 + 80);
                  if (!v299)
                    goto LABEL_496;
                  v282 = v285[2];
                  if ((_DWORD)v282 || v299[1] > v285[6])
                  {
                    WTF::StringImpl::substring(*(WTF::StringImpl **)(v287 + 80));
                    v299 = (_DWORD *)v757;
                    if (v292)
                      goto LABEL_497;
                  }
                  else
                  {
                    *v299 += 2;
LABEL_496:
                    if (v292)
                    {
LABEL_497:
                      if (*(_DWORD *)v292 == 2)
                        WTF::StringImpl::destroy(v292, (WTF::StringImpl *)v282);
                      else
                        *(_DWORD *)v292 -= 2;
                    }
                  }
                  v300 = bmalloc::api::isoAllocate();
                  *(_OWORD *)(v300 + 8) = xmmword_1968BC9D0;
                  *(_QWORD *)(v300 + 24) = 0x300300000002;
                  v301 = (_DWORD *)(v300 + 24);
                  *(_QWORD *)(v300 + 32) = 0;
                  *(_QWORD *)(v300 + 40) = (char *)v290 + 96;
                  *(_OWORD *)(v300 + 48) = 0u;
                  *(_OWORD *)(v300 + 64) = 0u;
                  ++*((_DWORD *)v290 + 831);
                  v302 = v299;
                  if (v299 || (v302 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
                    *v302 += 2;
                  v668 = (_WORD *)(v300 + 30);
                  *(_QWORD *)(v300 + 80) = v302;
                  *(_QWORD *)v300 = off_1E33A8078;
                  *(_DWORD *)(v300 + 24) = 4;
                  *(_DWORD *)(v712 + 24) += 2;
                  *(_QWORD *)&v757 = v712;
                  v677 = (WTF::StringImpl *)v299;
                  v697 = (_DWORD *)(v300 + 24);
                  WebCore::ContainerNode::insertBefore(v684, (uint64_t *)v300, (WebCore::Node **)&v757, (uint64_t)v731);
                  if (v733)
                  {
                    v304 = v732;
                    v732 = 0;
                    if (v304)
                    {
                      if (*(_DWORD *)v304 == 2)
                        WTF::StringImpl::destroy(v304, v303);
                      else
                        *(_DWORD *)v304 -= 2;
                    }
                  }
                  v305 = v757;
                  *(_QWORD *)&v757 = 0;
                  if (v305)
                  {
                    if (*(_DWORD *)(v305 + 24) == 2)
                    {
                      if ((*(_WORD *)(v305 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v305, v303);
                    }
                    else
                    {
                      *(_DWORD *)(v305 + 24) -= 2;
                    }
                  }
                  if (*v301 == 2)
                  {
                    if ((*v668 & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v300, v303);
                  }
                  else
                  {
                    *v301 -= 2;
                  }
                  v306 = bmalloc::api::isoAllocate();
                  v308 = (WTF::StringImpl *)v306;
                  *(_OWORD *)(v306 + 8) = xmmword_1968BC9D0;
                  *(_QWORD *)(v306 + 24) = 0x101C00000002;
                  v674 = (_DWORD *)(v306 + 24);
                  *(_QWORD *)(v306 + 32) = 0;
                  *(_QWORD *)(v306 + 40) = (char *)v290 + 96;
                  *(_OWORD *)(v306 + 48) = 0u;
                  *(_OWORD *)(v306 + 64) = 0u;
                  ++*((_DWORD *)v290 + 831);
                  *(_QWORD *)(v306 + 80) = 0;
                  *(_QWORD *)(v306 + 88) = 0;
                  v309 = WebCore::HTMLNames::aTag;
                  if (WebCore::HTMLNames::aTag)
                    ++*(_DWORD *)WebCore::HTMLNames::aTag;
                  v666 = (_WORD *)(v306 + 30);
                  *(_QWORD *)(v306 + 96) = v309;
                  *(_QWORD *)(v306 + 104) = 0;
                  *(_QWORD *)v306 = off_1E33B3458;
                  *(_QWORD *)(v306 + 112) = &unk_1E33B3958;
                  *(_WORD *)(v306 + 120) = 0;
                  *(_BYTE *)(v306 + 122) = 0;
                  *(_DWORD *)(v306 + 124) = -1;
                  *(_QWORD *)(v306 + 128) = 0;
                  v310 = v712;
                  WTF::AtomStringImpl::add(v664, v307);
                  v748[0] = (WTF::StringImpl *)v757;
                  v311 = *((_QWORD *)v308 + 13);
                  if (v311
                    && ((v312 = *(unsigned int *)(v311 + 4), (v312 & 1) != 0)
                      ? (v313 = *(uint64_t **)(v311 + 40), v314 = *(unsigned int *)(v311 + 52))
                      : (v313 = (uint64_t *)(v311 + 32), v314 = v312 >> 5),
                        v314))
                  {
                    v315 = 0;
                    while (1)
                    {
                      v316 = *v313;
                      if (*v313 == WebCore::HTMLNames::hrefAttr
                        || *(_QWORD *)(v316 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
                        && *(_QWORD *)(v316 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
                      {
                        break;
                      }
                      ++v315;
                      v313 += 2;
                      if (v314 == v315)
                        goto LABEL_525;
                    }
                  }
                  else
                  {
LABEL_525:
                    v315 = 0xFFFFFFFFLL;
                  }
                  WebCore::Element::setAttributeInternal(v308, v315, (WebCore::TreeScope *)&WebCore::HTMLNames::hrefAttr, v748, 0);
                  v318 = v748[0];
                  v748[0] = 0;
                  if (v318)
                  {
                    if (*(_DWORD *)v318 == 2)
                      WTF::StringImpl::destroy(v318, v317);
                    else
                      *(_DWORD *)v318 -= 2;
                  }
                  WTF::AtomStringImpl::add();
                  v748[0] = (WTF::StringImpl *)v757;
                  v319 = *((_QWORD *)v308 + 13);
                  if (v319
                    && ((v320 = *(unsigned int *)(v319 + 4), (v320 & 1) != 0)
                      ? (v321 = *(uint64_t **)(v319 + 40), v322 = *(unsigned int *)(v319 + 52))
                      : (v321 = (uint64_t *)(v319 + 32), v322 = v320 >> 5),
                        v322))
                  {
                    v323 = 0;
                    while (1)
                    {
                      v324 = *v321;
                      if (*v321 == WebCore::HTMLNames::dirAttr
                        || *(_QWORD *)(v324 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 24)
                        && *(_QWORD *)(v324 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirAttr + 32))
                      {
                        break;
                      }
                      ++v323;
                      v321 += 2;
                      if (v322 == v323)
                        goto LABEL_541;
                    }
                  }
                  else
                  {
LABEL_541:
                    v323 = 0xFFFFFFFFLL;
                  }
                  WebCore::Element::setAttributeInternal(v308, v323, (WebCore::TreeScope *)&WebCore::HTMLNames::dirAttr, v748, 0);
                  v326 = v748[0];
                  v748[0] = 0;
                  if (v326)
                  {
                    if (*(_DWORD *)v326 == 2)
                      WTF::StringImpl::destroy(v326, v325);
                    else
                      *(_DWORD *)v326 -= 2;
                  }
                  if (!v670)
                    goto LABEL_599;
                  WebCore::Document::updateStyleIfNeeded(v290);
                  LOBYTE(v757) = 0;
                  v758 = 0;
                  v328 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v684 + 264))(v684, &v757);
                  if (v758 && (v329 = (WTF::StringImpl *)*((_QWORD *)&v757 + 1), *((_QWORD *)&v757 + 1) = 0, v329))
                  {
                    if (*(_DWORD *)v329 != 2)
                    {
                      *(_DWORD *)v329 -= 2;
                      goto LABEL_550;
                    }
                    WTF::StringImpl::destroy(v329, v327);
                    if (!v328)
                    {
LABEL_599:
                      WebCore::ContainerNode::appendChild((uint64_t)v308, (WebCore::Node *)v300, (uint64_t)v728);
                      if (v730)
                      {
                        v367 = v729;
                        v729 = 0;
                        if (v367)
                        {
                          if (*(_DWORD *)v367 == 2)
                            WTF::StringImpl::destroy(v367, v366);
                          else
                            *(_DWORD *)v367 -= 2;
                        }
                      }
                      v368 = *((_QWORD *)v308 + 13);
                      if (v368)
                      {
                        v369 = *(unsigned int *)(v368 + 4);
                        v370 = v677;
                        if ((v369 & 1) != 0)
                        {
                          v371 = *(uint64_t **)(v368 + 40);
                          v372 = *(unsigned int *)(v368 + 52);
                        }
                        else
                        {
                          v371 = (uint64_t *)(v368 + 32);
                          v372 = v369 >> 5;
                        }
                        if (v372)
                        {
                          v373 = 0;
                          while (1)
                          {
                            v374 = *v371;
                            if (*v371 == WebCore::HTMLNames::x_apple_data_detectorsAttr
                              || *(_QWORD *)(v374 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr
                                                                     + 24)
                              && *(_QWORD *)(v374 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr
                                                                     + 32))
                            {
                              break;
                            }
                            ++v373;
                            v371 += 2;
                            if (v372 == v373)
                              goto LABEL_616;
                          }
                        }
                        else
                        {
LABEL_616:
                          v373 = 0xFFFFFFFFLL;
                        }
                      }
                      else
                      {
                        v373 = 0xFFFFFFFFLL;
                        v370 = v677;
                      }
                      WebCore::Element::setAttributeInternal(v308, v373, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectorsAttr, (WTF::StringImpl **)&WebCore::trueAtomData, 0);
                      v376 = PAL::softLinkDataDetectorsCoreDDResultGetCategory(v661) - 1;
                      v377 = (WTF::AtomStringImpl *)&stru_1E3487BC0;
                      if (v376 <= 4)
                        v377 = (WTF::AtomStringImpl *)*((_QWORD *)&off_1E327FBA8 + (int)v376);
                      WTF::AtomStringImpl::add(v377, v375);
                      v748[0] = (WTF::StringImpl *)v757;
                      v378 = *((_QWORD *)v308 + 13);
                      if (v378
                        && ((v379 = *(unsigned int *)(v378 + 4), (v379 & 1) != 0)
                          ? (v380 = *(uint64_t **)(v378 + 40), v381 = *(unsigned int *)(v378 + 52))
                          : (v380 = (uint64_t *)(v378 + 32), v381 = v379 >> 5),
                            v381))
                      {
                        v382 = 0;
                        while (1)
                        {
                          v383 = *v380;
                          if (*v380 == WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                            || *(_QWORD *)(v383 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                                                                   + 24)
                            && *(_QWORD *)(v383 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_typeAttr
                                                                   + 32))
                          {
                            break;
                          }
                          ++v382;
                          v380 += 2;
                          if (v381 == v382)
                            goto LABEL_631;
                        }
                      }
                      else
                      {
LABEL_631:
                        v382 = 0xFFFFFFFFLL;
                      }
                      WebCore::Element::setAttributeInternal(v308, v382, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectors_typeAttr, v748, 0);
                      v385 = v748[0];
                      v748[0] = 0;
                      if (v385)
                      {
                        if (*(_DWORD *)v385 == 2)
                          WTF::StringImpl::destroy(v385, v384);
                        else
                          *(_DWORD *)v385 -= 2;
                      }
                      WTF::AtomStringImpl::add(v691, (const __CFString *)v384);
                      v748[0] = (WTF::StringImpl *)v757;
                      v386 = *((_QWORD *)v308 + 13);
                      if (v386
                        && ((v387 = *(unsigned int *)(v386 + 4), (v387 & 1) != 0)
                          ? (v388 = *(uint64_t **)(v386 + 40), v389 = *(unsigned int *)(v386 + 52))
                          : (v388 = (uint64_t *)(v386 + 32), v389 = v387 >> 5),
                            v389))
                      {
                        v390 = 0;
                        while (1)
                        {
                          v391 = *v388;
                          if (*v388 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                            || *(_QWORD *)(v391 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                                                                   + 24)
                            && *(_QWORD *)(v391 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                                                                   + 32))
                          {
                            break;
                          }
                          ++v390;
                          v388 += 2;
                          if (v389 == v390)
                            goto LABEL_647;
                        }
                      }
                      else
                      {
LABEL_647:
                        v390 = 0xFFFFFFFFLL;
                      }
                      WebCore::Element::setAttributeInternal(v308, v390, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectors_resultAttr, v748, 0);
                      v393 = v748[0];
                      v748[0] = 0;
                      if (v393)
                      {
                        if (*(_DWORD *)v393 == 2)
                          WTF::StringImpl::destroy(v393, v392);
                        else
                          *(_DWORD *)v393 -= 2;
                      }
                      *(_DWORD *)(v310 + 24) += 2;
                      *(_QWORD *)&v757 = v310;
                      WebCore::ContainerNode::insertBefore(v684, (uint64_t *)v308, (WebCore::Node **)&v757, (uint64_t)v725);
                      if (v727)
                      {
                        v395 = v726;
                        v726 = 0;
                        if (v395)
                        {
                          if (*(_DWORD *)v395 == 2)
                            WTF::StringImpl::destroy(v395, v394);
                          else
                            *(_DWORD *)v395 -= 2;
                        }
                      }
                      v396 = v757;
                      *(_QWORD *)&v757 = 0;
                      if (v396)
                      {
                        if (*(_DWORD *)(v396 + 24) == 2)
                        {
                          if ((*(_WORD *)(v396 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v396, v394);
                        }
                        else
                        {
                          *(_DWORD *)(v396 + 24) -= 2;
                        }
                      }
                      v282 = v285[6];
                      v397 = *(WTF::StringImpl **)(v310 + 80);
                      if (v397)
                      {
                        if ((_DWORD)v282)
                        {
                          v399 = v285[6];
                          WTF::StringImpl::substring(v397);
                          v397 = (WTF::StringImpl *)v757;
                          v282 = v399;
                          v310 = v712;
                        }
                        else
                        {
                          *(_DWORD *)v397 += 2;
                        }
                      }
                      v671 = v282;
                      v398 = v753;
                      v753 = v397;
                      if (v398)
                      {
                        if (*(_DWORD *)v398 == 2)
                          WTF::StringImpl::destroy(v398, (WTF::StringImpl *)v282);
                        else
                          *(_DWORD *)v398 -= 2;
                      }
                      HasProperties = (uint64_t)v694;
                      if (v694)
                      {
                        if (*((_DWORD *)v694 + 6) == 2)
                        {
                          if ((*((_WORD *)v694 + 15) & 0x400) == 0)
                            HasProperties = (uint64_t)WebCore::Node::removedLastRef(v694, (void *)v282);
                        }
                        else
                        {
                          *((_DWORD *)v694 + 6) -= 2;
                        }
                      }
                      if (*v674 == 2)
                      {
                        if ((*v666 & 0x400) == 0)
                          HasProperties = (uint64_t)WebCore::Node::removedLastRef(v308, (void *)v282);
                      }
                      else
                      {
                        *v674 -= 2;
                      }
                      if (*v697 == 2)
                      {
                        v188 = v704;
                        if ((*v668 & 0x400) == 0)
                          HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v300, (void *)v282);
                      }
                      else
                      {
                        *v697 -= 2;
                        v188 = v704;
                      }
                      if (v370)
                      {
                        v284 = v688;
                        if (*(_DWORD *)v370 == 2)
                          HasProperties = WTF::StringImpl::destroy(v370, (WTF::StringImpl *)v282);
                        else
                          *(_DWORD *)v370 -= 2;
                        v694 = (WebCore::Node *)v310;
                      }
                      else
                      {
                        v694 = (WebCore::Node *)v310;
                        v284 = v688;
                      }
                      v286 = (uint64_t)v659;
                      goto LABEL_676;
                    }
                  }
                  else
                  {
LABEL_550:
                    if (!v328)
                      goto LABEL_599;
                  }
                  WebCore::RenderStyle::visitedDependentColor(v328, 5, 0, (uint64_t *)&v751);
                  v331 = v751;
                  if (((unint64_t)v751 & 0x4000000000000) != 0)
                  {
                    if (((unint64_t)v751 & 0x8000000000000) != 0)
                    {
                      *(_OWORD *)v748 = *(_OWORD *)(((unint64_t)v751 & 0xFFFFFFFFFFFFLL) + 4);
                      *(_QWORD *)&v757 = &v755;
                      *((_QWORD *)&v757 + 1) = v748;
                      _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_((unint64_t)v751 >> 56, (uint64_t)&v757);
                      v334 = v190;
                      v333 = v189;
                    }
                    else
                    {
                      v332 = bswap32(v751);
                      v333 = v189;
                      v334 = v190;
                      *(float32x2_t *)((char *)&v757 + 4) = vdiv_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v332), v189), (int8x8_t)0xFF000000FFLL)), v190);
                      *(float *)&v757 = (float)v332 / 255.0;
                      *((float *)&v757 + 3) = (float)HIBYTE(v332) / 255.0;
                      v335 = WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v757);
                    }
                    v743 = __PAIR64__(v336, LODWORD(v335));
                    v744 = 1112014848;
                    v745 = v337 * 0.38;
                    v338 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HSLA<float>,void>::convert((float *)&v743);
                    v340 = v339;
                    v342 = v341;
                    v344 = v343;
                    v346 = WebCore::StyledElement::ensureMutableInlineStyle(v308, v345);
                    dword_1ECE8C3A8 += 2;
                    *(_QWORD *)&v757 = &WebCore::staticCSSValuePool[3584];
                    WebCore::MutableStyleProperties::setProperty(v346, 5, (_DWORD **)&v757, 0);
                    v351 = (_DWORD *)v757;
                    *(_QWORD *)&v757 = 0;
                    if (v351)
                    {
                      if (*v351 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v351, v347);
                      else
                        *v351 -= 2;
                    }
                    WebCore::StyledElement::inlineStyleChanged(v308, (uint64_t)v347, v348, v349, v350);
                    v352 = 255.0;
                    v353 = v342 * 255.0;
                    if (v342 > 1.0)
                      v353 = 255.0;
                    if (v342 >= 0.0)
                      v354 = v353;
                    else
                      v354 = 0.0;
                    v355 = llroundf(v354);
                    if (v355 >= 255)
                      v355 = 255;
                    v356 = (v355 & ~(v355 >> 63)) << 16;
                    v357 = llroundf(v344 * 255.0);
                    if (v357 >= 255)
                      v357 = 255;
                    v358 = v356 | ((v357 & ~(v357 >> 63)) << 24);
                    v359 = v340 * 255.0;
                    if (v340 > 1.0)
                      v359 = 255.0;
                    if (v340 >= 0.0)
                      v360 = v359;
                    else
                      v360 = 0.0;
                    v361 = llroundf(v360);
                    if (v361 >= 255)
                      v361 = 255;
                    v362 = v358 | ((v361 & ~(v361 >> 63)) << 8);
                    if (v338 <= 1.0)
                      v352 = v338 * 255.0;
                    if (v338 >= 0.0)
                      v363 = v352;
                    else
                      v363 = 0.0;
                    v364 = llroundf(v363);
                    if (v364 >= 255)
                      v364 = 255;
                    v748[0] = (WTF::StringImpl *)(bswap32(v362 | v364 & ~(v364 >> 63)) | 0x1104000000000000);
                    WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v757, (unint64_t)v748[0], (uint64_t *)v748);
                    WebCore::StyledElement::setInlineStyleProperty(v308, (WTF::StringImpl *)0xFE, (uint64_t)&v757, 0, 0);
                    v365 = (WTF::StringImpl *)v757;
                    *(_QWORD *)&v757 = 0;
                    v189 = v333;
                    v190 = v334;
                    if (v365)
                    {
                      if (*(_DWORD *)v365 == 2)
                        WTF::StringImpl::destroy(v365, v330);
                      else
                        *(_DWORD *)v365 -= 2;
                    }
                    v331 = v751;
                  }
                  if (((unint64_t)v331 & 0x8000000000000) != 0)
                  {
                    v400 = (unsigned int *)((unint64_t)v331 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v401 = __ldaxr(v400);
                      v402 = v401 - 1;
                    }
                    while (__stlxr(v402, v400));
                    v28 = v724;
                    v310 = v712;
                    if (!v402)
                    {
                      atomic_store(1u, v400);
                      WTF::fastFree((WTF *)v400, v330);
                    }
                  }
                  goto LABEL_599;
                }
LABEL_481:
                v294 = bmalloc::api::isoAllocate();
                *(_OWORD *)(v294 + 8) = xmmword_1968BC9D0;
                v295 = v287;
                *(_QWORD *)(v294 + 24) = 0x300300000002;
                v296 = (_DWORD *)(v294 + 24);
                *(_QWORD *)(v294 + 32) = 0;
                *(_QWORD *)(v294 + 40) = (char *)v290 + 96;
                *(_OWORD *)(v294 + 48) = 0u;
                *(_OWORD *)(v294 + 64) = 0u;
                ++*((_DWORD *)v290 + 831);
                *(_DWORD *)v292 += 2;
                *(_QWORD *)(v294 + 80) = v292;
                *(_QWORD *)v294 = off_1E33A8078;
                *(_DWORD *)(v295 + 24) += 2;
                *(_QWORD *)&v757 = v295;
                WebCore::ContainerNode::insertBefore(v684, (uint64_t *)v294, (WebCore::Node **)&v757, (uint64_t)v734);
                if (v736)
                {
                  v297 = v735;
                  v735 = 0;
                  if (v297)
                  {
                    if (*(_DWORD *)v297 == 2)
                      WTF::StringImpl::destroy(v297, (WTF::StringImpl *)v282);
                    else
                      *(_DWORD *)v297 -= 2;
                  }
                }
                v298 = v757;
                *(_QWORD *)&v757 = 0;
                if (v298)
                {
                  if (*(_DWORD *)(v298 + 24) == 2)
                  {
                    if ((*(_WORD *)(v298 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v298, (void *)v282);
                  }
                  else
                  {
                    *(_DWORD *)(v298 + 24) -= 2;
                  }
                }
                if (*v296 == 2)
                {
                  if ((*(_WORD *)(v294 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v294, (void *)v282);
                }
                else
                {
                  *v296 -= 2;
                }
                v287 = v712;
                goto LABEL_492;
              }
            }
            *(_DWORD *)v292 += 2;
            if (!v293)
              goto LABEL_492;
            goto LABEL_481;
          }
          if (v289)
          {
            *(_DWORD *)(v287 + 24) = v289;
          }
          else if ((*(_WORD *)(v287 + 30) & 0x400) == 0)
          {
            HasProperties = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v287, (void *)v282);
          }
        }
LABEL_676:
        v285 += 8;
        if (v285 == (_DWORD *)v286)
          goto LABEL_710;
      }
    }
    while ((v280 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v279 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
    {
      v279 = *(_QWORD *)(v279 + 32);
      if (v279)
      {
        v280 = *(_WORD *)(v279 + 28);
        if ((v280 & 8) != 0)
          continue;
      }
      goto LABEL_464;
    }
    while (1)
    {
      v405 = *(_QWORD *)(v279 + 104);
      if (v405
        && ((v406 = *(unsigned int *)(v405 + 4), (v406 & 1) != 0)
          ? (v407 = *(_QWORD *)(v405 + 40), v408 = *(unsigned int *)(v405 + 52))
          : (v407 = v405 + 32, v408 = v406 >> 5),
            v408))
      {
        v409 = (uint64_t *)(v407 + 8);
        while (1)
        {
          v410 = *(v409 - 1);
          if (v410 == WebCore::HTMLNames::x_apple_data_detectorsAttr
            || *(_QWORD *)(v410 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
            && *(_QWORD *)(v410 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
          {
            break;
          }
          v409 += 2;
          if (!--v408)
            goto LABEL_734;
        }
      }
      else
      {
LABEL_734:
        v409 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      }
      v411 = *v409;
      if (!v411)
        break;
      if (*(_DWORD *)(v411 + 4) != 4)
        goto LABEL_746;
      v412 = *(_QWORD *)(v411 + 8);
      if ((*(_BYTE *)(v411 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v412 & 0xDF) != 0x54
          || (*(_BYTE *)(v412 + 1) & 0xDF) != 0x52
          || (*(_BYTE *)(v412 + 2) & 0xDF) != 0x55)
        {
          goto LABEL_746;
        }
        v404 = *(unsigned __int8 *)(v412 + 3);
      }
      else
      {
        if ((*(_WORD *)v412 & 0xFFDF) != 0x54
          || (*(_WORD *)(v412 + 2) & 0xFFDF) != 0x52
          || (*(_WORD *)(v412 + 4) & 0xFFDF) != 0x55)
        {
LABEL_746:
          v28 = v724;
          v188 = v704;
          goto LABEL_452;
        }
        v404 = *(unsigned __int16 *)(v412 + 6);
      }
      if ((v404 & 0xFFFFFFDF) != 0x45)
        goto LABEL_746;
      HasProperties = (uint64_t)WebCore::removeResultLinksFromAnchor((WebCore::ContainerNode *)v279, (WebCore::Element *)v261);
      v279 = *(_QWORD *)(v279 + 32);
      v28 = v724;
      if (!v279)
        goto LABEL_464;
      v403 = *(_WORD *)(v279 + 28);
      if ((v403 & 8) == 0)
        goto LABEL_464;
      while ((v403 & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v279 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
      {
        v279 = *(_QWORD *)(v279 + 32);
        if (v279)
        {
          v403 = *(_WORD *)(v279 + 28);
          if ((v403 & 8) != 0)
            continue;
        }
        goto LABEL_464;
      }
    }
LABEL_451:
    v188 = v704;
LABEL_452:
    if (++v188 != v720)
      continue;
    break;
  }
LABEL_1223:
  v417 = v694;
  if (v694)
  {
    v171 = v718;
    v85 = v663;
    v186 = v683;
    HasProperties = WebCore::CharacterData::setData(v694, &v753, v193);
    v418 = 0;
  }
  else
  {
    v418 = 1;
    v171 = v718;
    v85 = v663;
    v186 = v683;
  }
LABEL_1226:
  v83 = objc_msgSend((id)PAL::getDDScannerResultClass[0]((PAL *)HasProperties), "resultsFromCoreResults:", obj);
  v645 = v753;
  v753 = 0;
  if (!v645)
  {
LABEL_1229:
    if ((v418 & 1) != 0)
      goto LABEL_1232;
    goto LABEL_1230;
  }
  if (*(_DWORD *)v645 != 2)
  {
    *(_DWORD *)v645 -= 2;
    goto LABEL_1229;
  }
  WTF::StringImpl::destroy(v645, (WTF::StringImpl *)v17);
  if ((v418 & 1) == 0)
  {
LABEL_1230:
    if (*((_DWORD *)v417 + 6) == 2)
    {
      if ((*((_WORD *)v417 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v417, v17);
    }
    else
    {
      *((_DWORD *)v417 + 6) -= 2;
    }
  }
LABEL_1232:
  if (v186)
    CFRelease(v186);
  if (v85)
  {
    v646 = 16 * v85;
    v647 = (unsigned int *)v171;
    do
    {
      v647 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v647, v17) + 4;
      v646 -= 16;
    }
    while (v646);
  }
  if (v171)
    WTF::fastFree(v171, v17);
LABEL_1239:
  if (v721)
  {
    v648 = 8 * v721;
    v649 = (const void **)v719;
    do
    {
      v650 = *v649;
      *v649 = 0;
      if (v650)
        CFRelease(v650);
      ++v649;
      v648 -= 8;
    }
    while (v648);
  }
  if (v719)
    WTF::fastFree(v719, v17);
  if (v720)
  {
    v651 = 8 * v720;
    v652 = (const void **)v724;
    do
    {
      v653 = *v652;
      *v652 = 0;
      if (v653)
        CFRelease(v653);
      ++v652;
      v651 -= 8;
    }
    while (v651);
  }
  if (v724)
    WTF::fastFree(v724, v17);
LABEL_1253:
  LODWORD(v19) = v742;
  v20 = v741;
  if (v742)
  {
LABEL_1254:
    v654 = 32 * v19;
    v655 = (WTF::StringImpl **)v20;
    do
    {
      v656 = *v655;
      *v655 = 0;
      if (v656)
      {
        if (*(_DWORD *)v656 == 2)
          WTF::StringImpl::destroy(v656, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v656 -= 2;
      }
      v655 += 4;
      v654 -= 32;
    }
    while (v654);
  }
LABEL_1261:
  if (v20)
    WTF::fastFree(v20, v17);
  if (v700)
    CFRelease(v700);
LABEL_1265:
  CFRelease(obj);
  return v83;
}

void sub_194B49198(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,CFTypeRef cf,uint64_t a35,uint64_t a36,uint64_t a37,WebCore::Node *a38,uint64_t a39,CFTypeRef a40,uint64_t a41,CFTypeRef a42,uint64_t a43,uint64_t a44,uint64_t a45,WebCore::Node *a46,uint64_t a47,WTF *a48,WTF *a49,unsigned int a50,int a51,unsigned int a52,WTF *a53)
{
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  const void **v61;
  const void *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;

  v54 = (WTF::StringImpl *)STACK[0x260];
  STACK[0x260] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  if (a38)
  {
    if (*((_DWORD *)a38 + 6) == 2)
    {
      if ((*((_WORD *)a38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a38, a2);
    }
    else
    {
      *((_DWORD *)a38 + 6) -= 2;
    }
  }
  if (cf)
    CFRelease(cf);
  if (a19)
  {
    v55 = 16 * a19;
    v56 = (unsigned int *)a48;
    do
    {
      v56 = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v56, a2) + 4;
      v55 -= 16;
    }
    while (v55);
  }
  if (a48)
    WTF::fastFree(a48, a2);
  if (a52)
  {
    v57 = 8 * a52;
    v58 = (const void **)a49;
    do
    {
      v59 = *v58;
      *v58 = 0;
      if (v59)
        CFRelease(v59);
      ++v58;
      v57 -= 8;
    }
    while (v57);
  }
  if (a49)
    WTF::fastFree(a49, a2);
  if (a50)
  {
    v60 = 8 * a50;
    v61 = (const void **)a53;
    do
    {
      v62 = *v61;
      *v61 = 0;
      if (v62)
        CFRelease(v62);
      ++v61;
      v60 -= 8;
    }
    while (v60);
  }
  if (a53)
    WTF::fastFree(a53, a2);
  v63 = LODWORD(STACK[0x20C]);
  v64 = (WTF *)STACK[0x200];
  if ((_DWORD)v63)
  {
    v65 = 32 * v63;
    v66 = (WTF::StringImpl **)STACK[0x200];
    do
    {
      v67 = *v66;
      *v66 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, a2);
        else
          *(_DWORD *)v67 -= 2;
      }
      v66 += 4;
      v65 -= 32;
    }
    while (v65);
  }
  if (v64)
    WTF::fastFree(v64, a2);
  if (a40)
    CFRelease(a40);
  CFRelease(a42);
  _Unwind_Resume(a1);
}

BOOL WebCore::DataDetection::isDataDetectorElement(WebCore::DataDetection *this, const WebCore::Element *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  if ((*((_WORD *)this + 14) & 0x10) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    return 0;
  }
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_14;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_6;
LABEL_14:
    v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_14;
LABEL_6:
  v5 = v5;
  v6 = (uint64_t *)(v4 + 8);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 == WebCore::HTMLNames::x_apple_data_detectorsAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectorsAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_15:
  v8 = *v6;
  if (!*v6 || *(_DWORD *)(v8 + 4) != 4)
    return 0;
  v10 = *(_QWORD *)(v8 + 8);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v10 & 0xFFDF) == 0x54
      && (*(_WORD *)(v10 + 2) & 0xFFDF) == 0x52
      && (*(_WORD *)(v10 + 4) & 0xFFDF) == 0x55)
    {
      v11 = *(unsigned __int16 *)(v10 + 6);
      return (v11 & 0xFFFFFFDF) == 69;
    }
    return 0;
  }
  if ((*(_BYTE *)v10 & 0xDF) != 0x54 || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x52 || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x55)
    return 0;
  v11 = *(unsigned __int8 *)(v10 + 3);
  return (v11 & 0xFFFFFFDF) == 69;
}

unsigned int *WebCore::DataDetection::findDataDetectionResultElementInImageOverlay@<X0>(WebCore::DataDetection *this@<X0>, const WebCore::FloatPoint *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Element **v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  int v14;
  BOOL v15;
  BOOL v16;
  WebCore::Element *v18;
  char v19;
  unsigned int *result;
  __int16 v21;
  uint64_t i;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WebCore::Element **v35;
  WebCore::Element **v36;
  char *v37;
  WebCore::Node *v38;
  WebCore::Element **v39;
  uint64_t v40;
  WebCore::Node *v41[2];

  v6 = 0;
  v39 = 0;
  v40 = 0;
  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  v7 = *(_QWORD *)(v6 + 80);
  if (v7)
  {
    v21 = *(_WORD *)(v7 + 28);
    if ((v21 & 0x10) != 0)
    {
      i = *(_QWORD *)(v6 + 80);
      goto LABEL_41;
    }
    while (1)
    {
      if ((v21 & 4) == 0 || (i = *(_QWORD *)(v7 + 80)) == 0)
      {
        if (v7 == v6)
          break;
        while (1)
        {
          i = *(_QWORD *)(v7 + 56);
          if (i)
            break;
          v7 = *(_QWORD *)(v7 + 32);
          if (v7)
            v23 = v7 == v6;
          else
            v23 = 1;
          if (v23)
            goto LABEL_4;
        }
      }
      v21 = *(_WORD *)(i + 28);
      v7 = i;
      if ((v21 & 0x10) != 0)
      {
        while (1)
        {
LABEL_41:
          WebCore::ImageOverlay::imageOverlayHost((uint64_t)v41, (const WebCore::Node *)i);
          result = (unsigned int *)v41[0];
          if (v41[0])
          {
            {
              v38 = v41[0];
              WTF::AtomStringImpl::add();
              result = (unsigned int *)v38;
              WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className = (uint64_t)v41[1];
            }
            v24 = *(_QWORD *)(i + 104);
            if (v24 && (v25 = *(_QWORD *)(v24 + 16)) != 0)
            {
              v26 = 0;
              while (*(_QWORD *)(v25 + 16 + 8 * v26) != WebCore::ImageOverlay::imageOverlayDataDetectorClass(void)::className)
              {
                if (++v26 >= (unint64_t)*(unsigned int *)(v25 + 12))
                  goto LABEL_49;
              }
              if (result[6] == 2)
              {
                if ((*((_WORD *)result + 15) & 0x400) == 0)
                  result = WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
              }
              else
              {
                result[6] -= 2;
              }
              v31 = HIDWORD(v40);
              if (HIDWORD(v40) == (_DWORD)v40)
              {
                v32 = HIDWORD(v40) + ((unint64_t)HIDWORD(v40) >> 2);
                if (v32 >= 0x10)
                  v33 = v32 + 1;
                else
                  v33 = 16;
                if (v33 <= (unint64_t)HIDWORD(v40) + 1)
                  v34 = HIDWORD(v40) + 1;
                else
                  v34 = v33;
                if (v34 >> 29)
                {
                  __break(0xC471u);
                  return result;
                }
                v35 = v39;
                v36 = (WebCore::Element **)WTF::fastMalloc((WTF *)(8 * v34));
                LODWORD(v40) = v34;
                v39 = v36;
                memcpy(v36, v35, 8 * HIDWORD(v40));
                if (v35)
                {
                  if (v36 == v35)
                  {
                    v39 = 0;
                    LODWORD(v40) = 0;
                  }
                  WTF::fastFree((WTF *)v35, a2);
                  v36 = v39;
                }
                v31 = HIDWORD(v40);
                v37 = (char *)&v36[HIDWORD(v40)];
              }
              else
              {
                v37 = (char *)&v39[HIDWORD(v40)];
              }
              *(_DWORD *)(i + 24) += 2;
              *(_QWORD *)v37 = i;
              HIDWORD(v40) = v31 + 1;
            }
            else
            {
LABEL_49:
              if (result[6] == 2)
              {
                if ((*((_WORD *)result + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
              }
              else
              {
                result[6] -= 2;
              }
            }
          }
          v27 = *(_QWORD *)(i + 80);
          if (!v27)
          {
            if (i == v6)
              goto LABEL_4;
            while (1)
            {
              v27 = *(_QWORD *)(i + 56);
              if (v27)
                break;
              i = *(_QWORD *)(i + 32);
              if (i)
                v30 = i == v6;
              else
                v30 = 1;
              if (v30)
                goto LABEL_4;
            }
          }
          v28 = *(_WORD *)(v27 + 28);
          for (i = v27; (v28 & 0x10) == 0; v27 = i)
          {
            if ((v28 & 4) == 0 || (i = *(_QWORD *)(v27 + 80)) == 0)
            {
              if (v27 == v6)
                goto LABEL_4;
              while (1)
              {
                i = *(_QWORD *)(v27 + 56);
                if (i)
                  break;
                v27 = *(_QWORD *)(v27 + 32);
                if (v27)
                  v29 = v27 == v6;
                else
                  v29 = 1;
                if (v29)
                  goto LABEL_4;
              }
            }
            v28 = *(_WORD *)(i + 28);
          }
        }
      }
    }
  }
LABEL_4:
  if (HIDWORD(v40))
  {
    v8 = v39;
    v9 = 8 * HIDWORD(v40);
    while (1)
    {
      v10 = WebCore::Element::boundsInRootViewSpace(*v8);
      v11 = roundf(*(float *)this);
      v12 = (int)v11;
      if (v11 <= -2147500000.0)
        v12 = 0x80000000;
      if (v11 >= 2147500000.0)
        v12 = 0x7FFFFFFF;
      v13 = roundf(*((float *)this + 1));
      v14 = (int)v13;
      if (v13 <= -2147500000.0)
        v14 = 0x80000000;
      if (v13 >= 2147500000.0)
        v14 = 0x7FFFFFFF;
      v15 = v12 < (int)v10 || (int)a2 + (int)v10 <= v12;
      v16 = v15 || v14 < SHIDWORD(v10);
      if (!v16 && HIDWORD(a2) + HIDWORD(v10) > v14)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_26;
    }
    v18 = *v8;
    *v8 = 0;
    *(_QWORD *)a3 = v18;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = a2;
    v19 = 1;
  }
  else
  {
LABEL_26:
    v19 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v19;
  return (unsigned int *)WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, a2);
}

void sub_194B49DC4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DataDetection::createElementForImageOverlay@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  const void *v12;
  uint64_t IdentifierInternal;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  const void *v26;
  uint64_t v27;
  int v28;
  const void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;

  result = bmalloc::api::isoAllocate();
  *(_OWORD *)(result + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(result + 24) = 0x101C00000002;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = a1 + 96;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  v7 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)result = off_1E33B9CC0;
  *a3 = result;
  v8 = *(_QWORD *)(a1 + 528);
  if (v8)
  {
    result = *(_QWORD *)(v8 + 8);
    if (result)
    {
      v9 = (unsigned int *)(result + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = WebCore::LocalFrame::dataDetectionResults((WebCore::LocalFrame *)result);
      v12 = *a2;
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v16 = v11[1];
      v15 = v11 + 1;
      v14 = v16;
      if (v16
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v15, 8u), (v14 = *v15) != 0))
      {
        v17 = *(_DWORD *)(v14 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                   + ~(IdentifierInternal << 32)) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      v22 = (uint64_t *)(v14 + 16 * v21);
      v23 = *v22;
      if (*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != IdentifierInternal)
        {
          if (v23 == -1)
            v24 = v22;
          v21 = (v21 + v25) & v17;
          v22 = (uint64_t *)(v14 + 16 * v21);
          v23 = *v22;
          ++v25;
          if (!*v22)
          {
            if (v24)
            {
              *v24 = 0;
              v24[1] = 0;
              --*(_DWORD *)(*v15 - 16);
              v22 = v24;
            }
            goto LABEL_18;
          }
        }
        if (v12)
          CFRetain(v12);
        v29 = (const void *)v22[1];
        v22[1] = (uint64_t)v12;
        if (v29)
          CFRelease(v29);
LABEL_39:
        v35 = (WTF::StringImpl *)*a3;
        WTF::AtomString::number((WTF::AtomString *)IdentifierInternal);
        v36 = *((_QWORD *)v35 + 13);
        if (v36)
        {
          v37 = *(_DWORD *)(v36 + 4);
          if ((v37 & 1) == 0)
          {
            v38 = (uint64_t *)(v36 + 32);
            v39 = v37 >> 5;
            if (!v39)
              goto LABEL_51;
LABEL_44:
            v40 = 0;
            while (1)
            {
              v41 = *v38;
              if (*v38 == WebCore::HTMLNames::x_apple_data_detectors_resultAttr
                || *(_QWORD *)(v41 + 24) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 24)
                && *(_QWORD *)(v41 + 32) == *(_QWORD *)(WebCore::HTMLNames::x_apple_data_detectors_resultAttr + 32))
              {
                goto LABEL_52;
              }
              ++v40;
              v38 += 2;
              if (v39 == v40)
                goto LABEL_51;
            }
          }
          v38 = *(uint64_t **)(v36 + 40);
          v39 = *(_DWORD *)(v36 + 52);
          if (v39)
            goto LABEL_44;
        }
LABEL_51:
        v40 = 0xFFFFFFFFLL;
LABEL_52:
        WebCore::Element::setAttributeInternal(v35, v40, (WebCore::TreeScope *)&WebCore::HTMLNames::x_apple_data_detectors_resultAttr, &v46, 0);
        result = (uint64_t)v46;
        v46 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v42);
          else
            *(_DWORD *)result -= 2;
        }
        do
        {
          v43 = __ldaxr(v9);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v9));
        if (!v44)
        {
          atomic_store(1u, v9);
          v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v45 = off_1E31FE290;
          *((_QWORD *)v45 + 1) = v9;
          v46 = v45;
          WTF::ensureOnMainThread();
          result = (uint64_t)v46;
          v46 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        return result;
      }
LABEL_18:
      *v22 = IdentifierInternal;
      if (v12)
        CFRetain(v12);
      v26 = (const void *)v22[1];
      v22[1] = (uint64_t)v12;
      if (v26)
        CFRelease(v26);
      v27 = *v15;
      if (*v15)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v30 = *v15;
      if (*v15)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_39;
      }
      else
      {
        if (3 * v33 > 4 * v32)
          goto LABEL_39;
        if (!(_DWORD)v33)
        {
          v34 = 8;
          goto LABEL_38;
        }
      }
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_38:
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v15, v34);
      goto LABEL_39;
    }
  }
  return result;
}

void sub_194B4A178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::DictionaryLookup::rangeForSelection(WebCore::DictionaryLookup *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5;
  int v6;
  int v7;
  const WebCore::VisiblePosition *v8;
  uint64_t v9;
  int v11;
  int v12;
  const WebCore::VisiblePosition *v13;
  WTF::StringImpl *v14;
  WebCore::Node *v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  PAL *v22;
  id v23;
  const __CFString *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WebCore::Node *v33;
  uint64_t v34;
  WebCore::Node *v35;
  void *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  void *v39;
  WebCore::Node *v40;
  WTF::StringImpl *v41;
  WebCore::Node *v42;
  int v43;
  WebCore::Node *v44;
  int v45;
  WebCore::Node *v46;
  int v47;
  char v48;
  WebCore::Node *v49;
  int v50;
  char v51;
  WebCore::Node *v52[3];
  WebCore::Node *v53[3];
  WebCore::Node *v54;
  int v55;
  char v56;
  char v57;
  WebCore::Node *v58;
  int v59;
  char v60;
  char v61;

  v5 = atomic_load(&qword_1EE335750);
  if (v5 != -1)
  {
    v46 = (WebCore::Node *)&v58;
    v42 = (WebCore::Node *)&v46;
    std::__call_once(&qword_1EE335750, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::canCreateRevealItems(void)::$_0 &&>>);
  }
  if (byte_1EE33573A)
  {
    v6 = *((unsigned __int8 *)this + 97);
    v7 = *((unsigned __int8 *)this + 96);
    WebCore::VisiblePosition::canonicalPosition((WebCore::DictionaryLookup *)((char *)this + 64), (uint64_t)&v58);
    LOBYTE(v9) = 1;
    v61 = 1;
    if (v6 != 2 && v7 == 0)
      goto LABEL_78;
    while (1)
    {
      v11 = *((unsigned __int8 *)this + 97);
      v12 = *((unsigned __int8 *)this + 96);
      WebCore::VisiblePosition::canonicalPosition((WebCore::DictionaryLookup *)((char *)this + 80), (uint64_t)&v54);
      v57 = v9;
      if (v11 == 2 || !v12)
      {
        v38 = v54;
        if (v54)
        {
          *((_DWORD *)v54 + 6) += 2;
          v46 = v38;
          v47 = v55;
          v48 = v56;
          LOBYTE(v49) = 0;
          if (!WebCore::inSameLine((WebCore *)&v54, (const WebCore::VisiblePosition *)&v46, v13))
            v57 = 0;
          v40 = v46;
          v46 = 0;
          if (v40)
          {
            if (*((_DWORD *)v40 + 6) == 2)
            {
              if ((*((_WORD *)v40 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v40, v39);
            }
            else
            {
              *((_DWORD *)v40 + 6) -= 2;
            }
          }
        }
      }
      WebCore::startOfParagraph((uint64_t)&v58, 1, v53);
      WebCore::endOfParagraph((WebCore::Node *)&v54, 1, v52);
      v15 = v52[0];
      if (!v53[0] || !v52[0])
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        goto LABEL_44;
      }
      WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v53, (uint64_t)&v58, (uint64_t)&v46);
      if (v51)
      {
        this = (WebCore::DictionaryLookup *)WebCore::characterCount((int *)&v46, 0);
        if (v51)
        {
          v17 = v49;
          v49 = 0;
          if (v17)
          {
            if (*((_DWORD *)v17 + 6) == 2)
            {
              if ((*((_WORD *)v17 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v17, v16);
            }
            else
            {
              *((_DWORD *)v17 + 6) -= 2;
            }
          }
          v18 = v46;
          v46 = 0;
          if (v18)
          {
            if (*((_DWORD *)v18 + 6) == 2)
            {
              if ((*((_WORD *)v18 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v18, v16);
            }
            else
            {
              *((_DWORD *)v18 + 6) -= 2;
            }
          }
        }
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v58, (uint64_t)&v54, (uint64_t)&v46);
        if (v51)
        {
          v9 = WebCore::characterCount((int *)&v46, 0);
          if (v51)
          {
            v20 = v49;
            v49 = 0;
            if (v20)
            {
              if (*((_DWORD *)v20 + 6) == 2)
              {
                if ((*((_WORD *)v20 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v20, v19);
              }
              else
              {
                *((_DWORD *)v20 + 6) -= 2;
              }
            }
            v21 = v46;
            v46 = 0;
            if (v21)
            {
              if (*((_DWORD *)v21 + 6) == 2)
              {
                if ((*((_WORD *)v21 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v21, v19);
              }
              else
              {
                *((_DWORD *)v21 + 6) -= 2;
              }
            }
          }
          WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v53, (uint64_t)v52, (uint64_t)&v46);
          if (v51)
            break;
        }
      }
      __break(1u);
LABEL_78:
      v35 = v58;
      if (v58)
      {
        *((_DWORD *)v58 + 6) += 2;
        v46 = v35;
        v47 = v59;
        v48 = v60;
        LOBYTE(v49) = 0;
        if (!WebCore::inSameLine((WebCore *)&v58, (const WebCore::VisiblePosition *)&v46, v8))
          v61 = 0;
        v37 = v46;
        v46 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v36);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
      }
    }
    v42 = v46;
    v43 = v47;
    v44 = v49;
    v45 = v50;
    v22 = WebCore::plainText(&v42, 0, 0, (const WTF::String *)&v41);
    v23 = objc_alloc((Class)PAL::getRVItemClass(v22));
    if (v41)
      v24 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v24 = &stru_1E3487BC0;
    v25 = (void *)objc_msgSend(v23, "initWithText:selectedRange:", v24, this, v9);
    v26 = objc_msgSend(v25, "highlightRange");
    v28 = v27;
    if (v25)
      CFRelease(v25);
    WebCore::resolveCharacterRange(&v42, v26, v28, 0, &v46);
    *(_QWORD *)a2 = v46;
    *(_DWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v49;
    *(_DWORD *)(a2 + 24) = v50;
    *(_BYTE *)(a2 + 32) = 1;
    v29 = v41;
    v41 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v14);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      if (*((_DWORD *)v30 + 6) == 2)
      {
        if ((*((_WORD *)v30 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v30, v14);
      }
      else
      {
        *((_DWORD *)v30 + 6) -= 2;
      }
    }
    v31 = v42;
    v42 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v14);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    v15 = v52[0];
LABEL_44:
    v52[0] = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v14);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
    v32 = v53[0];
    v53[0] = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v14);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    v33 = v54;
    v54 = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 6) == 2)
      {
        if ((*((_WORD *)v33 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v33, v14);
      }
      else
      {
        *((_DWORD *)v33 + 6) -= 2;
      }
    }
    v34 = (uint64_t)v58;
    v58 = 0;
    if (v34)
    {
      if (*(_DWORD *)(v34 + 24) == 2)
      {
        if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v34, v14);
      }
      else
      {
        *(_DWORD *)(v34 + 24) -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
}

void sub_194B4A900()
{
  objc_end_catch();
  JUMPOUT(0x194B4A908);
}

void WebCore::DictionaryLookup::rangeAtHitTestResult(WebCore::DictionaryLookup *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::LocalFrame *v9;
  void *v10;
  uint64_t v11;
  WebCore::Node **v12;
  WebCore::Node *v13;
  int8x8_t v14;
  WebCore::Node *v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  const WebCore::VisiblePosition *v33;
  void *v34;
  WebCore::Node *v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  WTF::StringImpl *v38;
  int v39;
  void *v40;
  WebCore::Node *v41;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  uint64_t v45;
  WebCore::Node *v46;
  WebCore::Node *v47;
  void *v48;
  int8x8_t v49;
  void *v50;
  WebCore::Node *v51;
  WTF::StringImpl *v52;
  void *v53;
  WebCore::Node *v54;
  WTF::StringImpl *v55;
  unsigned int *Ref;
  WebCore::Node *v57;
  void *RVSelectionClass;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  PAL *v63;
  id v64;
  const __CFString *v65;
  void *v66;
  unint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WebCore::Node *v70;
  WebCore::Node *v71;
  unsigned int v72;
  unsigned int v73;
  int8x8_t v74;
  WebCore::Node **v75;
  WebCore::Node **v76;
  WebCore::Node *v77;
  void *v78;
  WebCore::Node *v79;
  WebCore::Node *v80;
  int v81;
  char v82;
  WebCore::Node *v83;
  int v84;
  char v85;
  _BYTE v86[40];
  WTF::StringImpl *v87;
  int v88;
  char v89;
  WebCore::Node *v90;
  char v91;
  WebCore::Node *v92[3];
  WebCore::Node *v93;
  int v94;
  char v95;
  char v96;
  WebCore::Node *v97[2];
  char v98;
  WebCore::Node *v99;
  int v100;
  WebCore::Node *v101;
  unsigned __int8 v102;
  WebCore::Node **v103;
  int v104;
  char v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  int v119;
  char v120;
  __int16 v121;
  char v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  char v126;
  int32x2_t v127;
  _QWORD v128[2];

  v128[1] = *MEMORY[0x1E0C80C00];
  v6 = atomic_load(&qword_1EE335750);
  if (v6 != -1)
  {
    v103 = &v99;
    v80 = (WebCore::Node *)&v103;
    std::__call_once(&qword_1EE335750, &v80, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::canCreateRevealItems(void)::$_0 &&>>);
  }
  if (!byte_1EE33573A
    || (v7 = *((_QWORD *)this + 10)) == 0
    || (*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) == 0
    || (v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528)) == 0
    || (v9 = *(WebCore::LocalFrame **)(v8 + 8)) == 0
    || (v127.i32[0] = ((int)(*((_DWORD *)this + 22) - (v3 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 22) / 64,
        v127.i32[1] = ((int)(*((_DWORD *)this + 23) - (v3 & 0xFFFFFFC0) + 32) >> 6) + *((_DWORD *)this + 23) / 64,
        WebCore::LocalFrame::rangeForPoint(v9, &v127, (uint64_t)&v103),
        !(_BYTE)v109))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return;
  }
  v11 = v106;
  v106 = 0;
  if (v11)
  {
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v10);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  v12 = v103;
  v103 = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 6) == 2)
    {
      if ((*((_WORD *)v12 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v12, v10);
    }
    else
    {
      *((_DWORD *)v12 + 6) -= 2;
    }
  }
  WebCore::LocalFrame::visiblePositionForPoint(v9, &v127, (int8x8_t *)&v123);
  if (!v123)
  {
    WebCore::firstPositionInOrBeforeNode(v7, v13, (uint64_t)&v80);
    WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v80, (uint64_t)&v103);
    LOBYTE(v106) = 1;
    v14 = (int8x8_t)v123;
    v123 = (WTF::StringImpl *)v103;
    if (v14)
    {
      if (*(_DWORD *)(*(_QWORD *)&v14 + 24) == 2)
      {
        if ((*(_WORD *)(*(_QWORD *)&v14 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef(*(WebCore::Node **)&v14, v13);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)&v14 + 24) -= 2;
      }
    }
    v124 = v104;
    v125 = v105;
    v126 = 1;
    v15 = v80;
    v80 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v13);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
  }
  v16 = *(int **)(*(_QWORD *)(*((_QWORD *)v9 + 3) + 8) + 72);
  v17 = *v16;
  v18 = *v16 + 1;
  *v16 = v18;
  v19 = *((_QWORD *)v16 + 2);
  if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0 && !*(_BYTE *)(v20 + 144)
    || (v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 1) + 8) + 160), !*(_BYTE *)(v20 + 144)))
  {
    v21 = (unsigned int *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    if (*v16)
    {
      --*v16;
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 296) + 3064);
      v24 = *(_QWORD *)(v23 + 56);
      if (v24)
        *(_DWORD *)(v24 + 24) += 2;
      v103 = (WebCore::Node **)v24;
      v104 = *(_DWORD *)(v23 + 64);
      v105 = *(_BYTE *)(v23 + 68);
      v25 = *(_QWORD *)(v23 + 72);
      if (v25)
        *(_DWORD *)(v25 + 24) += 2;
      v106 = v25;
      v107 = *(_DWORD *)(v23 + 80);
      v108 = *(_BYTE *)(v23 + 84);
      v26 = *(_QWORD *)(v23 + 88);
      if (v26)
        *(_DWORD *)(v26 + 24) += 2;
      v109 = v26;
      v110 = *(_DWORD *)(v23 + 96);
      v111 = *(_BYTE *)(v23 + 100);
      v27 = *(_QWORD *)(v23 + 104);
      if (v27)
        *(_DWORD *)(v27 + 24) += 2;
      v112 = v27;
      v113 = *(_DWORD *)(v23 + 112);
      v114 = *(_BYTE *)(v23 + 116);
      v28 = *(_QWORD *)(v23 + 120);
      if (v28)
        *(_DWORD *)(v28 + 24) += 2;
      v115 = v28;
      v116 = *(_DWORD *)(v23 + 128);
      v117 = *(_BYTE *)(v23 + 132);
      v29 = *(_QWORD *)(v23 + 136);
      if (v29)
        *(_DWORD *)(v29 + 24) += 2;
      v118 = v29;
      v119 = *(_DWORD *)(v23 + 144);
      v120 = *(_BYTE *)(v23 + 148);
      v121 = *(_WORD *)(v23 + 152);
      v122 = *(_BYTE *)(v23 + 154);
      LOBYTE(v99) = 0;
      v102 = 0;
      if (HIBYTE(v121) == 2)
      {
        v30 = (uint64_t)&v118;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v115, (uint64_t)v97);
        v98 = 1;
        v31 = HIBYTE(v121);
        v32 = v121;
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v118, (uint64_t)&v93);
        v96 = 1;
        if (v31 == 2 || !(_DWORD)v32)
        {
          v77 = v93;
          if (v93)
          {
            *((_DWORD *)v93 + 6) += 2;
            v80 = v77;
            v81 = v94;
            v82 = v95;
            LOBYTE(v83) = 0;
            if (!WebCore::inSameLine((WebCore *)&v93, (const WebCore::VisiblePosition *)&v80, v33))
              v96 = 0;
            v79 = v80;
            v80 = 0;
            if (v79)
            {
              if (*((_DWORD *)v79 + 6) == 2)
              {
                if ((*((_WORD *)v79 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v79, v78);
              }
              else
              {
                *((_DWORD *)v79 + 6) -= 2;
              }
            }
          }
        }
        WebCore::startOfParagraph((uint64_t)v97, 1, &v87);
        WebCore::endOfParagraph((WebCore::Node *)&v93, 1, v92);
        WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)&v87, (uint64_t)v92, (uint64_t)&v80);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v99, (uint64_t *)&v80);
        if (v85)
        {
          v35 = v83;
          v83 = 0;
          if (v35)
          {
            if (*((_DWORD *)v35 + 6) == 2)
            {
              if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v35, v34);
            }
            else
            {
              *((_DWORD *)v35 + 6) -= 2;
            }
          }
          v36 = v80;
          v80 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 6) == 2)
            {
              if ((*((_WORD *)v36 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v36, v34);
            }
            else
            {
              *((_DWORD *)v36 + 6) -= 2;
            }
          }
        }
        v37 = v92[0];
        v92[0] = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v34);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
        v38 = v87;
        v87 = 0;
        if (v38)
        {
          if (*((_DWORD *)v38 + 6) == 2)
          {
            if ((*((_WORD *)v38 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v38, v34);
          }
          else
          {
            *((_DWORD *)v38 + 6) -= 2;
          }
        }
        v39 = v102;
        if (v102)
        {
          WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)&v80, (uint64_t)v99, v100, (uint64_t)v97);
          if (!v85)
            goto LABEL_189;
          v30 = WebCore::characterCount((int *)&v80, 0);
          WebCore::makeSimpleRange<WebCore::VisiblePosition,WebCore::VisiblePosition>((uint64_t *)v97, (uint64_t)&v93, (uint64_t)&v87);
          if (!v91)
            goto LABEL_189;
          v32 = WebCore::characterCount((int *)&v87, 0);
          if (v91)
          {
            v41 = v90;
            v90 = 0;
            if (v41)
            {
              if (*((_DWORD *)v41 + 6) == 2)
              {
                if ((*((_WORD *)v41 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v41, v40);
              }
              else
              {
                *((_DWORD *)v41 + 6) -= 2;
              }
            }
            v42 = v87;
            v87 = 0;
            if (v42)
            {
              if (*((_DWORD *)v42 + 6) == 2)
              {
                if ((*((_WORD *)v42 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v42, v40);
              }
              else
              {
                *((_DWORD *)v42 + 6) -= 2;
              }
            }
          }
          if (v85)
          {
            v43 = v83;
            v83 = 0;
            if (v43)
            {
              if (*((_DWORD *)v43 + 6) == 2)
              {
                if ((*((_WORD *)v43 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v43, v40);
              }
              else
              {
                *((_DWORD *)v43 + 6) -= 2;
              }
            }
            v44 = v80;
            v80 = 0;
            if (v44)
            {
              if (*((_DWORD *)v44 + 6) == 2)
              {
                if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v44, v40);
              }
              else
              {
                *((_DWORD *)v44 + 6) -= 2;
              }
            }
          }
          if (!v102)
            goto LABEL_189;
          WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)&v80, (uint64_t)v99, v100, (uint64_t)&v123);
          if (!v85)
            goto LABEL_189;
          v45 = WebCore::characterCount((int *)&v80, 0);
          if (v85)
          {
            v46 = v83;
            v83 = 0;
            if (v46)
            {
              if (*((_DWORD *)v46 + 6) == 2)
              {
                if ((*((_WORD *)v46 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v46, v34);
              }
              else
              {
                *((_DWORD *)v46 + 6) -= 2;
              }
            }
            v47 = v80;
            v80 = 0;
            if (v47)
            {
              if (*((_DWORD *)v47 + 6) == 2)
              {
                if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v47, v34);
              }
              else
              {
                *((_DWORD *)v47 + 6) -= 2;
              }
            }
          }
        }
        else
        {
          v45 = 0;
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 32) = 0;
        }
        v57 = v93;
        v93 = 0;
        if (v57)
        {
          if (*((_DWORD *)v57 + 6) == 2)
          {
            if ((*((_WORD *)v57 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v57, v34);
          }
          else
          {
            *((_DWORD *)v57 + 6) -= 2;
          }
        }
        Ref = (unsigned int *)v97[0];
        v97[0] = 0;
        if (Ref)
        {
          if (Ref[6] == 2)
          {
            if ((*((_WORD *)Ref + 15) & 0x400) == 0)
              Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, v34);
          }
          else
          {
            Ref[6] -= 2;
          }
        }
        if (!v39)
        {
LABEL_127:
          if (v102)
          {
            v70 = v101;
            v101 = 0;
            if (v70)
            {
              if (*((_DWORD *)v70 + 6) == 2)
              {
                if ((*((_WORD *)v70 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v70, v34);
              }
              else
              {
                *((_DWORD *)v70 + 6) -= 2;
              }
            }
            v71 = v99;
            v99 = 0;
            if (v71)
            {
              if (*((_DWORD *)v71 + 6) == 2)
              {
                if ((*((_WORD *)v71 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v71, v34);
              }
              else
              {
                *((_DWORD *)v71 + 6) -= 2;
              }
            }
          }
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v103);
          do
          {
            v72 = __ldaxr(v21);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v21));
          if (v73)
            goto LABEL_137;
          goto LABEL_190;
        }
      }
      else
      {
        WebCore::VisibleSelection::VisibleSelection((WebCore::VisibleSelection *)&v80, (const WebCore::VisiblePosition *)&v123, 0);
        if (v86[33])
          WebCore::VisibleSelection::validate((uint64_t)&v80, 1);
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v86, (uint64_t)&v87);
        v49 = (int8x8_t)v123;
        v123 = v87;
        if (v49)
        {
          if (*(_DWORD *)(*(_QWORD *)&v49 + 24) == 2)
          {
            if ((*(_WORD *)(*(_QWORD *)&v49 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef(*(WebCore::Node **)&v49, v48);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)&v49 + 24) -= 2;
          }
        }
        v124 = v88;
        v125 = v89;
        v126 = 1;
        WebCore::rangeExpandedAroundPositionByCharacters((WebCore *)&v123, (const WebCore::VisiblePosition *)0xFA, (uint64_t)&v87);
        std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>((uint64_t)&v99, (uint64_t *)&v87);
        if (v91)
        {
          v51 = v90;
          v90 = 0;
          if (v51)
          {
            if (*((_DWORD *)v51 + 6) == 2)
            {
              if ((*((_WORD *)v51 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v51, v50);
            }
            else
            {
              *((_DWORD *)v51 + 6) -= 2;
            }
          }
          v52 = v87;
          v87 = 0;
          if (v52)
          {
            if (*((_DWORD *)v52 + 6) == 2)
            {
              if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v52, v50);
            }
            else
            {
              *((_DWORD *)v52 + 6) -= 2;
            }
          }
        }
        if (!v102)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 32) = 0;
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v80);
          goto LABEL_127;
        }
        WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>((uint64_t)&v87, (uint64_t)v99, v100, (uint64_t)&v123);
        if (!v91)
          goto LABEL_189;
        v45 = WebCore::characterCount((int *)&v87, 0);
        if (v91)
        {
          v54 = v90;
          v90 = 0;
          if (v54)
          {
            if (*((_DWORD *)v54 + 6) == 2)
            {
              if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v54, v53);
            }
            else
            {
              *((_DWORD *)v54 + 6) -= 2;
            }
          }
          v55 = v87;
          v87 = 0;
          if (v55)
          {
            if (*((_DWORD *)v55 + 6) == 2)
            {
              if ((*((_WORD *)v55 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v55, v53);
            }
            else
            {
              *((_DWORD *)v55 + 6) -= 2;
            }
          }
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v80);
        v32 = 0;
        v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      RVSelectionClass = (void *)PAL::getRVSelectionClass((PAL *)Ref);
      v128[0] = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v30, v32);
      v59 = objc_msgSend(RVSelectionClass, "revealRangeAtIndex:selectedRanges:shouldUpdateSelection:", v45, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v128, 1), 0);
      if (v102)
      {
        v61 = v59;
        v62 = v60;
        v63 = WebCore::plainText(&v99, 0, 0, (const WTF::String *)&v87);
        v64 = objc_alloc((Class)PAL::getRVItemClass(v63));
        if (v87)
          v65 = (const __CFString *)WTF::StringImpl::operator NSString *();
        else
          v65 = &stru_1E3487BC0;
        v66 = (void *)objc_msgSend(v64, "initWithText:selectedRange:", v65, v61, v62);
        v67 = objc_msgSend(v66, "highlightRange");
        v68 = (uint64_t)v34;
        if (v66)
          CFRelease(v66);
        if (v67 == 0x7FFFFFFFFFFFFFFFLL || !v68)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 32) = 0;
LABEL_124:
          v69 = v87;
          v87 = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v34);
            else
              *(_DWORD *)v69 -= 2;
          }
          goto LABEL_127;
        }
        if (v102)
        {
          WebCore::resolveCharacterRange(&v99, v67, v68, 0, &v80);
          *(_QWORD *)a2 = v80;
          *(_DWORD *)(a2 + 8) = v81;
          *(_QWORD *)(a2 + 16) = v83;
          *(_DWORD *)(a2 + 24) = v84;
          *(_BYTE *)(a2 + 32) = 1;
          goto LABEL_124;
        }
      }
LABEL_189:
      __break(1u);
LABEL_190:
      atomic_store(1u, v21);
      v75 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x10);
      *v75 = (WebCore::Node *)off_1E31FE290;
      v75[1] = (WebCore::Node *)v21;
      v103 = v75;
      WTF::ensureOnMainThread();
      v76 = v103;
      v103 = 0;
      if (v76)
        (*((void (**)(WebCore::Node **))*v76 + 1))(v76);
      goto LABEL_137;
    }
LABEL_203:
    __break(0xC471u);
    JUMPOUT(0x194B4B498);
  }
  if (!v18)
    goto LABEL_203;
  *v16 = v17;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_137:
  v74 = (int8x8_t)v123;
  v123 = 0;
  if (v74)
  {
    if (*(_DWORD *)(*(_QWORD *)&v74 + 24) == 2)
    {
      if ((*(_WORD *)(*(_QWORD *)&v74 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef(*(WebCore::Node **)&v74, v13);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)&v74 + 24) -= 2;
    }
  }
}

void sub_194B4B898()
{
  objc_end_catch();
  JUMPOUT(0x194B4B4B8);
}

uint64_t WebCore::firstPositionInOrBeforeNode@<X0>(uint64_t this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *v4;
  char v5;

  if (this)
  {
    v4 = (WebCore::Node *)this;
    this = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)this + 208))(this, a2);
    if ((this & 1) != 0)
      return (uint64_t)WebCore::firstPositionInNode(v4, a3);
    *((_DWORD *)v4 + 6) += 2;
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = 0;
    v5 = *(_BYTE *)(a3 + 12) & 0xF0 | 1;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    v5 = *(_BYTE *)(a3 + 12) & 0xF0;
  }
  *(_BYTE *)(a3 + 12) = v5;
  return this;
}

unsigned int *WebCore::makeSimpleRange<WebCore::BoundaryPoint &,WebCore::VisiblePosition &>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int *result;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;

  *(_DWORD *)(a2 + 24) += 2;
  v7 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    *(_DWORD *)(v7 + 24) += 2;
    v15 = v7;
    v16 = *(_DWORD *)(a4 + 8);
    v17 = *(_BYTE *)(a4 + 12);
    result = (unsigned int *)WebCore::makeBoundaryPoint(&v15, (uint64_t)&v12);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    v15 = 0;
    v16 = *(_DWORD *)(a4 + 8);
    v17 = *(_BYTE *)(a4 + 12);
    result = (unsigned int *)WebCore::makeBoundaryPoint(&v15, (uint64_t)&v12);
  }
  if (v14)
  {
    v10 = v12;
    v11 = v13;
    *(_QWORD *)a1 = a2;
    *(_DWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = v11;
    *(_BYTE *)(a1 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)a2, v9);
    }
    else
    {
      *(_DWORD *)(a2 + 24) -= 2;
    }
  }
  return result;
}

const __CFString *WebCore::DictionaryLookup::stringForPDFSelection(WebCore::DictionaryLookup *this, PDFSelection *a2)
{
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PAL *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char **v16;
  char *v17;

  v3 = atomic_load(&qword_1EE335750);
  if (v3 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&qword_1EE335750, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::canCreateRevealItems(void)::$_0 &&>>);
  }
  if (!byte_1EE33573A)
    return 0;
  if (!this || !objc_msgSend((id)-[WebCore::DictionaryLookup string](this, "string"), "length"))
    return &stru_1E3487BC0;
  v4 = (void *)-[WebCore::DictionaryLookup copy](this, "copy");
  v5 = objc_msgSend((id)objc_msgSend(v4, "string"), "length");
  v6 = objc_msgSend((id)objc_msgSend(v4, "string"), "length");
  objc_msgSend(v4, "extendSelectionAtStart:", 250);
  v7 = objc_msgSend((id)objc_msgSend(v4, "string"), "length") - v6;
  objc_msgSend(v4, "extendSelectionAtEnd:", 250);
  objc_msgSend((id)objc_msgSend(v4, "string"), "length");
  v8 = (PAL *)objc_msgSend(v4, "string");
  v9 = (void *)objc_msgSend(objc_alloc((Class)PAL::getRVItemClass(v8)), "initWithText:selectedRange:", v8, v7, 0);
  v10 = objc_msgSend(v9, "highlightRange");
  v12 = v11;
  if (v9)
    CFRelease(v9);
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    -[WebCore::DictionaryLookup extendSelectionAtStart:](this, "extendSelectionAtStart:", v7 - v10);
    -[WebCore::DictionaryLookup extendSelectionAtEnd:](this, "extendSelectionAtEnd:", v12 - (v7 + v5) + v10);
  }
  v13 = -[WebCore::DictionaryLookup string](this, "string");
  if (v4)
    CFRelease(v4);
  return (const __CFString *)v13;
}

void sub_194B4BC98()
{
  objc_end_catch();
  JUMPOUT(0x194B4BCA0);
}

unsigned int *WebCore::Editor::getPasteboardTypesAndDataForAttachment(uint64_t a1, _QWORD *a2, char **a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  char *v23;
  WebCore::LegacyWebArchive **v24;
  WebCore::LegacyWebArchive *v25;
  int v26;
  uint64_t *v27;
  char *v28;
  WebCore::LegacyWebArchive **v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF::StringImpl *v39;
  unsigned int *result;
  void *v41;
  const void *v42;
  CFIndex v43;
  uint64_t v44;
  void *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  WebCore::Node *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  const void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::Node *v67;
  int v68;
  WebCore::Node *v69;
  int v70;
  char v71;
  WebCore::LegacyWebArchive *v72[2];

  v6 = a2[4];
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 24);
    v8 = a2[6] & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      v9 = 0;
      do
      {
        ++v9;
        v8 = *(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFLL;
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
    *(_DWORD *)(v6 + 24) = v7 + 6;
    v67 = (WebCore::Node *)v6;
    v68 = v9;
    v69 = (WebCore::Node *)v6;
    v70 = v9 + 1;
    v71 = 1;
    v10 = v7 + 4;
    if (v10)
    {
      *(_DWORD *)(v6 + 24) = v10;
    }
    else if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
  }
  else
  {
    LOBYTE(v67) = 0;
    v71 = 0;
  }
  (*(void (**)(_QWORD, WebCore::Node **, char **))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 8) + 304))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), &v67, a3);
  WebCore::Document::originIdentifierForPasteboard(*(WebCore::Document **)(a2[5] + 8), v11, &v59);
  v12 = v59;
  v59 = 0;
  v60 = v12;
  v61 = 0;
  v62 = 0;
  WebCore::PasteboardCustomData::createSharedBuffer((WebCore::PasteboardCustomData *)&v60, v13);
  v64 = "com.apple.WebKit.custom-pasteboard-data";
  v65 = 40;
  v14 = (uint64_t)v63;
  v63 = 0;
  v66 = v14;
  v15 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v15 == *((_DWORD *)a3 + 2))
  {
    v16 = v15 + (v15 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v15 + 1)
      v18 = v15 + 1;
    else
      v18 = v17;
    if (v18 >> 28)
      goto LABEL_90;
    v19 = *a3;
    v20 = (char *)WTF::fastMalloc((WTF *)(16 * v18));
    *((_DWORD *)a3 + 2) = v18;
    *a3 = v20;
    memcpy(v20, v19, 16 * v15);
    if (v19)
    {
      if (*a3 == v19)
      {
        *a3 = 0;
        *((_DWORD *)a3 + 2) = 0;
      }
      WTF::fastFree((WTF *)v19, v21);
    }
    v22 = *((unsigned int *)a3 + 3);
    v23 = *a3;
    v24 = (WebCore::LegacyWebArchive **)&(*a3)[16 * v22];
    if (v65)
    {
      v21 = (void *)(v65 - 1);
      if (v65 == 1)
      {
        v25 = (WebCore::LegacyWebArchive *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v26 = v22;
      }
      else
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v25 = v72[0];
        v26 = *((_DWORD *)a3 + 3);
      }
      *v24 = v25;
    }
    else
    {
      *v24 = 0;
      v26 = v22;
    }
    v27 = (uint64_t *)&v23[16 * v22 + 8];
  }
  else
  {
    v28 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v29 = (WebCore::LegacyWebArchive **)&v28[16 * v15];
    v26 = *((_DWORD *)a3 + 3);
    *v29 = v72[0];
    v27 = (uint64_t *)(v29 + 1);
  }
  v30 = v66;
  v66 = 0;
  *v27 = v30;
  *((_DWORD *)a3 + 3) = v26 + 1;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v66, v21);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v63, v31);
  if (HIDWORD(v62))
  {
    v33 = 32 * HIDWORD(v62);
    v34 = (char *)v61 + 16;
    do
    {
      v35 = *((unsigned int *)v34 + 2);
      if ((_DWORD)v35 != -1)
        ((void (*)(WebCore::LegacyWebArchive **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v35])(v72, v34);
      *((_DWORD *)v34 + 2) = -1;
      v36 = (WTF::StringImpl *)*((_QWORD *)v34 - 1);
      *((_QWORD *)v34 - 1) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, v32);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = (WTF::StringImpl *)*((_QWORD *)v34 - 2);
      *((_QWORD *)v34 - 2) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v32);
        else
          *(_DWORD *)v37 -= 2;
      }
      v34 += 32;
      v33 -= 32;
    }
    while (v33);
  }
  v38 = v61;
  if (v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree(v38, v32);
  }
  v39 = v60;
  v60 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v32);
    else
      *(_DWORD *)v39 -= 2;
  }
  result = (unsigned int *)v59;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      result = (unsigned int *)WTF::StringImpl::destroy(v59, v32);
    else
      *(_DWORD *)v59 -= 2;
  }
  if (v71)
  {
    WebCore::LegacyWebArchive::create((WebCore::LegacyWebArchive *)&v67, v72);
    result = (unsigned int *)v72[0];
    if (!v72[0])
    {
LABEL_67:
      if (v71)
      {
        v58 = v69;
        v69 = 0;
        if (v58)
        {
          if (*((_DWORD *)v58 + 6) == 2)
          {
            if ((*((_WORD *)v58 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v58, v41);
          }
          else
          {
            *((_DWORD *)v58 + 6) -= 2;
          }
        }
        result = (unsigned int *)v67;
        v67 = 0;
        if (result)
        {
          if (result[6] == 2)
          {
            if ((*((_WORD *)result + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)result, v41);
          }
          else
          {
            result[6] -= 2;
          }
        }
      }
      return result;
    }
    WebCore::LegacyWebArchive::rawDataRepresentation(v72[0], &v63);
    v42 = v63;
    if (!v63)
    {
LABEL_64:
      result = (unsigned int *)v72[0];
      v72[0] = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      goto LABEL_67;
    }
    v43 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = v43 + 24;
    *(_QWORD *)(v43 + 16) = 1;
    *(_BYTE *)(v43 + 40) = 0;
    *(_QWORD *)(v43 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v43, v42);
    v60 = (WTF::StringImpl *)v43;
    v44 = WTF::fastMalloc((WTF *)0x38);
    v59 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v44, (uint64_t *)&v60);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v60, v45);
    v46 = v59;
    v59 = 0;
    v64 = (const char *)WebCore::WebArchivePboardType;
    v65 = (uint64_t)v46;
    v47 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v47 != *((_DWORD *)a3 + 2))
    {
      v54 = MEMORY[0x19AEA5508](&(*a3)[16 * v47]);
LABEL_63:
      v56 = v65;
      v65 = 0;
      *(_QWORD *)(v54 + 8) = v56;
      ++*((_DWORD *)a3 + 3);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v65, v55);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v59, v57);
      CFRelease(v42);
      goto LABEL_64;
    }
    v48 = v47 + (v47 >> 2);
    if (v48 >= 0x10)
      v49 = v48 + 1;
    else
      v49 = 16;
    if (v49 <= v47 + 1)
      v50 = v47 + 1;
    else
      v50 = v49;
    if (!(v50 >> 28))
    {
      v51 = *a3;
      v52 = (char *)WTF::fastMalloc((WTF *)(16 * v50));
      *((_DWORD *)a3 + 2) = v50;
      *a3 = v52;
      memcpy(v52, v51, 16 * v47);
      if (v51)
      {
        if (*a3 == v51)
        {
          *a3 = 0;
          *((_DWORD *)a3 + 2) = 0;
        }
        WTF::fastFree((WTF *)v51, v53);
      }
      v54 = MEMORY[0x19AEA5508](&(*a3)[16 * *((unsigned int *)a3 + 3)], v64);
      goto LABEL_63;
    }
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x194B4C1E4);
  }
  return result;
}

void sub_194B4C1F0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF *a12, int a13, int a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, WebCore::Node *a19, uint64_t a20,WebCore::Node *a21,uint64_t a22,char a23)
{
  const void *v23;
  uint64_t v24;
  void *v26;
  _DWORD *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;

  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&a11, a2);
  CFRelease(v23);
  v27 = *(_DWORD **)(v24 - 64);
  *(_QWORD *)(v24 - 64) = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  if (a23)
  {
    v28 = a21;
    a21 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v26);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v29 = a19;
    a19 = 0;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v26);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
  }
  _Unwind_Resume(a1);
}

void WebCore::Editor::writeSelectionToPasteboard(WebCore::Editor *this, WebCore::Pasteboard *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  NSAttributedString *v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v68;
  WTF *v69;
  WTF *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  WTF *v87;
  WTF *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  WTF *v119;
  WTF *v121;
  WTF *v123;
  WTF *v125;
  WTF *v127;
  unsigned int *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  WTF *v132;
  WTF *v133;
  WTF *v134;
  WTF *v135;
  WTF *v136;
  WTF *v137;
  WTF *v138;
  WTF *v139;
  WTF *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  CFTypeRef cf[2];
  WebCore::Node *v158;
  char v159;
  CFTypeRef v160;
  char v161;
  WTF *v162[2];
  WTF *v163[2];
  WTF::StringImpl *v164[2];
  __int128 v165;
  WTF *v166;
  char v167;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  *(_OWORD *)v164 = 0u;
  v165 = 0u;
  *(_OWORD *)v162 = 0u;
  *(_OWORD *)v163 = 0u;
  WebCore::Document::originIdentifierForPasteboard((WebCore::Document *)v4, a2, (WTF::StringImpl **)cf);
  v160 = cf[0];
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = v5[1];
    if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
    {
      v5 = *(_QWORD **)(*((_QWORD *)this + 2) + 8);
      LOBYTE(v5) = *(_BYTE *)(v5[85] + 370) == 3 || *(_BYTE *)(v5[383] + 184) == 1;
    }
    else
    {
      LOBYTE(v5) = 0;
    }
  }
  v161 = (char)v5;
  if (((*(uint64_t (**)(WebCore::Pasteboard *))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
  {
    WebCore::Editor::selectionInWebArchiveFormat((WebCore::Editor *)cf, this);
    v9 = (WTF *)cf[0];
    cf[0] = 0;
    v10 = v162[0];
    v162[0] = v9;
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v53 = *((unsigned int *)v10 + 5);
        if ((_DWORD)v53)
        {
          v54 = *((_QWORD *)v10 + 1);
          v55 = v54 + 16 * v53;
          do
          {
            v56 = *(unsigned int **)(v54 + 8);
            *(_QWORD *)(v54 + 8) = 0;
            if (v56)
            {
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v141 = v54;
                v149 = v55;
                v59 = v10;
                atomic_store(1u, v56);
                v60 = v56[6];
                if ((_DWORD)v60 != -1)
                  ((void (*)(WTF **, unsigned int *))off_1E327F9E0[v60])(&v166, v56 + 2);
                v56[6] = -1;
                WTF::fastFree((WTF *)v56, v8);
                v10 = v59;
                v54 = v141;
                v55 = v149;
              }
            }
            v54 += 16;
          }
          while (v54 != v55);
        }
        v69 = (WTF *)*((_QWORD *)v10 + 1);
        if ((WTF *)((char *)v10 + 24) != v69 && v69 != 0)
        {
          *((_QWORD *)v10 + 1) = 0;
          *((_DWORD *)v10 + 4) = 0;
          v127 = v10;
          WTF::fastFree(v69, v8);
          v10 = v127;
        }
        WTF::fastFree(v10, v8);
      }
      v13 = (unsigned int *)cf[0];
      cf[0] = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          v61 = v13[5];
          if ((_DWORD)v61)
          {
            v62 = *((_QWORD *)v13 + 1);
            v63 = v62 + 16 * v61;
            do
            {
              v64 = *(unsigned int **)(v62 + 8);
              *(_QWORD *)(v62 + 8) = 0;
              if (v64)
              {
                do
                {
                  v65 = __ldaxr(v64);
                  v66 = v65 - 1;
                }
                while (__stlxr(v66, v64));
                if (!v66)
                {
                  v142 = v62;
                  v150 = v63;
                  v67 = v13;
                  atomic_store(1u, v64);
                  v68 = v64[6];
                  if ((_DWORD)v68 != -1)
                    ((void (*)(WTF **, unsigned int *))off_1E327F9E0[v68])(&v166, v64 + 2);
                  v64[6] = -1;
                  WTF::fastFree((WTF *)v64, v8);
                  v13 = v67;
                  v62 = v142;
                  v63 = v150;
                }
              }
              v62 += 16;
            }
            while (v62 != v63);
          }
          v71 = (WTF *)*((_QWORD *)v13 + 1);
          if (v13 + 6 != (unsigned int *)v71 && v71 != 0)
          {
            *((_QWORD *)v13 + 1) = 0;
            v13[4] = 0;
            v128 = v13;
            WTF::fastFree(v71, v8);
            v13 = v128;
          }
          WTF::fastFree((WTF *)v13, v8);
        }
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(v4 + 680) + 720) & 0x80000000) != 0)
    {
      WebCore::selectionAsAttributedString((WebCore *)cf, *(const WebCore::Document **)(v4 + 3064));
      v16 = (NSAttributedString *)cf[0];
      if (objc_msgSend((id)cf[0], "containsAttachments"))
      {
        WebCore::Editor::dataInRTFDFormat((WebCore::Editor *)&v166, v16);
        v18 = v166;
      }
      else
      {
        v18 = 0;
      }
      v166 = 0;
      v19 = v162[1];
      v162[1] = v18;
      if (v19)
      {
        do
        {
          v20 = __ldaxr((unsigned int *)v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, (unsigned int *)v19));
        if (!v21)
        {
          atomic_store(1u, (unsigned int *)v19);
          v73 = *((unsigned int *)v19 + 5);
          if ((_DWORD)v73)
          {
            v74 = *((_QWORD *)v19 + 1);
            v75 = v74 + 16 * v73;
            do
            {
              v76 = *(unsigned int **)(v74 + 8);
              *(_QWORD *)(v74 + 8) = 0;
              if (v76)
              {
                do
                {
                  v77 = __ldaxr(v76);
                  v78 = v77 - 1;
                }
                while (__stlxr(v78, v76));
                if (!v78)
                {
                  v143 = v75;
                  v151 = v74;
                  v135 = v19;
                  atomic_store(1u, v76);
                  v79 = v76[6];
                  if ((_DWORD)v79 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v79])(&v167, v76 + 2);
                  v76[6] = -1;
                  WTF::fastFree((WTF *)v76, v17);
                  v19 = v135;
                  v75 = v143;
                  v74 = v151;
                }
              }
              v74 += 16;
            }
            while (v74 != v75);
          }
          v87 = (WTF *)*((_QWORD *)v19 + 1);
          if ((WTF *)((char *)v19 + 24) != v87 && v87 != 0)
          {
            *((_QWORD *)v19 + 1) = 0;
            *((_DWORD *)v19 + 4) = 0;
            v129 = v19;
            WTF::fastFree(v87, v17);
            v19 = v129;
          }
          WTF::fastFree(v19, v17);
        }
        v22 = v166;
        v166 = 0;
        if (v22)
        {
          do
          {
            v23 = __ldaxr((unsigned int *)v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, (unsigned int *)v22));
          if (!v24)
          {
            atomic_store(1u, (unsigned int *)v22);
            v80 = *((unsigned int *)v22 + 5);
            if ((_DWORD)v80)
            {
              v81 = *((_QWORD *)v22 + 1);
              v82 = v81 + 16 * v80;
              do
              {
                v83 = *(unsigned int **)(v81 + 8);
                *(_QWORD *)(v81 + 8) = 0;
                if (v83)
                {
                  do
                  {
                    v84 = __ldaxr(v83);
                    v85 = v84 - 1;
                  }
                  while (__stlxr(v85, v83));
                  if (!v85)
                  {
                    v144 = v82;
                    v152 = v81;
                    v136 = v22;
                    atomic_store(1u, v83);
                    v86 = v83[6];
                    if ((_DWORD)v86 != -1)
                      ((void (*)(char *, unsigned int *))off_1E327F9E0[v86])(&v167, v83 + 2);
                    v83[6] = -1;
                    WTF::fastFree((WTF *)v83, v17);
                    v22 = v136;
                    v82 = v144;
                    v81 = v152;
                  }
                }
                v81 += 16;
              }
              while (v81 != v82);
            }
            v89 = (WTF *)*((_QWORD *)v22 + 1);
            if ((WTF *)((char *)v22 + 24) != v89 && v89 != 0)
            {
              *((_QWORD *)v22 + 1) = 0;
              *((_DWORD *)v22 + 4) = 0;
              v130 = v22;
              WTF::fastFree(v89, v17);
              v22 = v130;
            }
            WTF::fastFree(v22, v17);
          }
        }
      }
      WebCore::Editor::dataInRTFFormat((WebCore::Editor *)&v166, (NSAttributedString *)cf[0]);
      v26 = v166;
      v166 = 0;
      v27 = v163[0];
      v163[0] = v26;
      if (v27)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)v27);
          v91 = *((unsigned int *)v27 + 5);
          if ((_DWORD)v91)
          {
            v92 = *((_QWORD *)v27 + 1);
            v93 = v92 + 16 * v91;
            do
            {
              v94 = *(unsigned int **)(v92 + 8);
              *(_QWORD *)(v92 + 8) = 0;
              if (v94)
              {
                do
                {
                  v95 = __ldaxr(v94);
                  v96 = v95 - 1;
                }
                while (__stlxr(v96, v94));
                if (!v96)
                {
                  v145 = v93;
                  v153 = v92;
                  v137 = v27;
                  atomic_store(1u, v94);
                  v97 = v94[6];
                  if ((_DWORD)v97 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v97])(&v167, v94 + 2);
                  v94[6] = -1;
                  WTF::fastFree((WTF *)v94, v25);
                  v27 = v137;
                  v93 = v145;
                  v92 = v153;
                }
              }
              v92 += 16;
            }
            while (v92 != v93);
          }
          v119 = (WTF *)*((_QWORD *)v27 + 1);
          if ((WTF *)((char *)v27 + 24) != v119 && v119 != 0)
          {
            *((_QWORD *)v27 + 1) = 0;
            *((_DWORD *)v27 + 4) = 0;
            v131 = v27;
            WTF::fastFree(v119, v25);
            v27 = v131;
          }
          WTF::fastFree(v27, v25);
        }
        v30 = v166;
        v166 = 0;
        if (v30)
        {
          do
          {
            v31 = __ldaxr((unsigned int *)v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, (unsigned int *)v30));
          if (!v32)
          {
            atomic_store(1u, (unsigned int *)v30);
            v98 = *((unsigned int *)v30 + 5);
            if ((_DWORD)v98)
            {
              v99 = *((_QWORD *)v30 + 1);
              v100 = v99 + 16 * v98;
              do
              {
                v101 = *(unsigned int **)(v99 + 8);
                *(_QWORD *)(v99 + 8) = 0;
                if (v101)
                {
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, v101));
                  if (!v103)
                  {
                    v146 = v100;
                    v154 = v99;
                    v138 = v30;
                    atomic_store(1u, v101);
                    v104 = v101[6];
                    if ((_DWORD)v104 != -1)
                      ((void (*)(char *, unsigned int *))off_1E327F9E0[v104])(&v167, v101 + 2);
                    v101[6] = -1;
                    WTF::fastFree((WTF *)v101, v25);
                    v30 = v138;
                    v100 = v146;
                    v99 = v154;
                  }
                }
                v99 += 16;
              }
              while (v99 != v100);
            }
            v121 = (WTF *)*((_QWORD *)v30 + 1);
            if ((WTF *)((char *)v30 + 24) != v121 && v121 != 0)
            {
              *((_QWORD *)v30 + 1) = 0;
              *((_DWORD *)v30 + 4) = 0;
              v132 = v30;
              WTF::fastFree(v121, v25);
              v30 = v132;
            }
            WTF::fastFree(v30, v25);
          }
        }
      }
      WebCore::archivedDataForAttributedString((WebCore *)&v166, (NSAttributedString *)cf[0]);
      v34 = v166;
      v166 = 0;
      v35 = v163[1];
      v163[1] = v34;
      if (v35)
      {
        do
        {
          v36 = __ldaxr((unsigned int *)v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, (unsigned int *)v35));
        if (!v37)
        {
          atomic_store(1u, (unsigned int *)v35);
          v105 = *((unsigned int *)v35 + 5);
          if ((_DWORD)v105)
          {
            v106 = *((_QWORD *)v35 + 1);
            v107 = v106 + 16 * v105;
            do
            {
              v108 = *(unsigned int **)(v106 + 8);
              *(_QWORD *)(v106 + 8) = 0;
              if (v108)
              {
                do
                {
                  v109 = __ldaxr(v108);
                  v110 = v109 - 1;
                }
                while (__stlxr(v110, v108));
                if (!v110)
                {
                  v147 = v107;
                  v155 = v106;
                  v139 = v35;
                  atomic_store(1u, v108);
                  v111 = v108[6];
                  if ((_DWORD)v111 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v111])(&v167, v108 + 2);
                  v108[6] = -1;
                  WTF::fastFree((WTF *)v108, v33);
                  v35 = v139;
                  v107 = v147;
                  v106 = v155;
                }
              }
              v106 += 16;
            }
            while (v106 != v107);
          }
          v123 = (WTF *)*((_QWORD *)v35 + 1);
          if ((WTF *)((char *)v35 + 24) != v123 && v123 != 0)
          {
            *((_QWORD *)v35 + 1) = 0;
            *((_DWORD *)v35 + 4) = 0;
            v133 = v35;
            WTF::fastFree(v123, v33);
            v35 = v133;
          }
          WTF::fastFree(v35, v33);
        }
        v38 = v166;
        v166 = 0;
        if (v38)
        {
          do
          {
            v39 = __ldaxr((unsigned int *)v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, (unsigned int *)v38));
          if (!v40)
          {
            atomic_store(1u, (unsigned int *)v38);
            v112 = *((unsigned int *)v38 + 5);
            if ((_DWORD)v112)
            {
              v113 = *((_QWORD *)v38 + 1);
              v114 = v113 + 16 * v112;
              do
              {
                v115 = *(unsigned int **)(v113 + 8);
                *(_QWORD *)(v113 + 8) = 0;
                if (v115)
                {
                  do
                  {
                    v116 = __ldaxr(v115);
                    v117 = v116 - 1;
                  }
                  while (__stlxr(v117, v115));
                  if (!v117)
                  {
                    v148 = v114;
                    v156 = v113;
                    v140 = v38;
                    atomic_store(1u, v115);
                    v118 = v115[6];
                    if ((_DWORD)v118 != -1)
                      ((void (*)(char *, unsigned int *))off_1E327F9E0[v118])(&v167, v115 + 2);
                    v115[6] = -1;
                    WTF::fastFree((WTF *)v115, v33);
                    v38 = v140;
                    v114 = v148;
                    v113 = v156;
                  }
                }
                v113 += 16;
              }
              while (v113 != v114);
            }
            v125 = (WTF *)*((_QWORD *)v38 + 1);
            if ((WTF *)((char *)v38 + 24) != v125 && v125 != 0)
            {
              *((_QWORD *)v38 + 1) = 0;
              *((_DWORD *)v38 + 4) = 0;
              v134 = v38;
              WTF::fastFree(v125, v33);
              v38 = v134;
            }
            WTF::fastFree(v38, v33);
          }
        }
      }
      if (cf[0])
        CFRelease(cf[0]);
    }
    v41 = *((_QWORD *)this + 1);
    if (v41)
      v42 = *(_QWORD *)(v41 + 8);
    else
      v42 = 0;
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), cf);
    (*(void (**)(uint64_t, CFTypeRef *, __int128 *))(*(_QWORD *)v42 + 304))(v42, cf, &v165);
    if (v159)
    {
      v43 = v158;
      v158 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 6) == 2)
        {
          if ((*((_WORD *)v43 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v43, v7);
        }
        else
        {
          *((_DWORD *)v43 + 6) -= 2;
        }
      }
      v44 = (WebCore::Node *)cf[0];
      cf[0] = 0;
      if (v44)
      {
        if (*((_DWORD *)v44 + 6) == 2)
        {
          if ((*((_WORD *)v44 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v44, v7);
        }
        else
        {
          *((_DWORD *)v44 + 6) -= 2;
        }
      }
    }
  }
  if ((WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), (const WebCore::VisibleSelection *)v7) & 1) != 0)
  {
    v46 = 0;
  }
  else
  {
    v47 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
    WebCore::serializePreservingVisualAppearanceInternal((uint64_t *)cf, (WebCore *)(v47 + 120), v47 + 136, 0, 3, 1, 1, 1, 0, 0, 1, 0);
    v46 = (WTF::StringImpl *)cf[0];
  }
  v48 = v164[0];
  v164[0] = v46;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v45);
    else
      *(_DWORD *)v48 -= 2;
  }
  WebCore::Editor::stringSelectionForPasteboardWithImageAltText((WebCore::Editor *)cf, this);
  v50 = v164[1];
  v164[1] = (WTF::StringImpl *)cf[0];
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v49);
    else
      *(_DWORD *)v50 -= 2;
  }
  (*(void (**)(WebCore::Pasteboard *, CFTypeRef *))(*(_QWORD *)a2 + 168))(a2, &v160);
  WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&v160, v51);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v52);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

void sub_194B4CE5C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WebCore::Node *a14, uint64_t a15, WebCore::Node *a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  const void *v23;
  void *v25;

  if (v23)
    CFRelease(v23);
  WebCore::PasteboardWebContent::~PasteboardWebContent((WebCore::PasteboardWebContent *)&a20, a2);
  if (v22)
  {
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v25);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebCore::LegacyWebArchive *WebCore::Editor::selectionInWebArchiveFormat(WebCore::Editor *this, const WebCore::VisibleSelection *a2)
{
  WebCore::LegacyWebArchive *result;
  uint64_t v5;
  WebCore::LegacyWebArchive *v6;
  const void *v7;
  CFIndex v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  WebCore::LegacyWebArchive *v14;
  CFIndex v15;

  result = (WebCore::LegacyWebArchive *)WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8)+ 3064)+ 56), a2);
  if ((_DWORD)result
    || ((v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) + 528)) == 0
      ? (v6 = 0)
      : (v6 = *(WebCore::LegacyWebArchive **)(v5 + 8)),
        WebCore::LegacyWebArchive::createFromSelection(v6, (uint64_t *)&v14),
        (result = v14) == 0))
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    WebCore::LegacyWebArchive::rawDataRepresentation(v14, &v12);
    v7 = v12;
    v8 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v8 + 24;
    *(_QWORD *)(v8 + 16) = 1;
    *(_BYTE *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v8, v7);
    v15 = v8;
    v9 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v9, &v15);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v15, v10);
    v13 = 0;
    *(_QWORD *)this = v9;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v13, v11);
    if (v7)
      CFRelease(v7);
    result = v14;
    v14 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WebCore::LegacyWebArchive *)(*(uint64_t (**)(WebCore::LegacyWebArchive *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void sub_194B4D058(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, _DWORD *a5, ...)
{
  const void *v5;
  va_list va;

  va_start(va, a5);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)va, a2);
  if (v5)
    CFRelease(v5);
  if (a5)
  {
    if (a5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a5 + 8))(a5);
    else
      --a5[2];
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::Editor::stringSelectionForPasteboardWithImageAltText(WebCore::Editor *this, WebCore::Editor *a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _QWORD v10[2];

  result = WebCore::Editor::canCopy(a2, a2);
  if ((result & 1) != 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) + 688);
    if (!v5)
      v5 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)a2 + 2) + 8));
    if (*(_BYTE *)(v5 + 66))
      v6 = 576;
    else
      v6 = 2624;
    result = (uint64_t)WebCore::Editor::selectedText((uint64_t)a2, v6, v10);
    v7 = (WTF::StringImpl *)v10[0];
    if (v10[0])
    {
      result = WTF::StringImpl::replace();
      *(_QWORD *)this = v10[1];
      if (*(_DWORD *)v7 == 2)
        return WTF::StringImpl::destroy(v7, v8);
      else
        *(_DWORD *)v7 -= 2;
    }
    else
    {
      *(_QWORD *)this = 0;
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    *(_QWORD *)this = v9;
  }
  return result;
}

void sub_194B4D180(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void WebCore::Editor::writeSelection(WebCore::Editor *this, WebCore::PasteboardWriterData *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  CFTypeRef v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  NSAttributedString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  CFTypeRef v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  WebCore::Node *v48;
  WebCore::Node *v49;
  char *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  WTF *v68;
  WTF *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  WTF *v100;
  WTF *v102;
  WTF *v104;
  WTF *v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  WTF *v122;
  WTF *v124;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[80];
  CFTypeRef cf[2];
  WebCore::Node *v160;
  char v161;
  CFTypeRef v162;
  char v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  char v169;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  WebCore::Document::originIdentifierForPasteboard((WebCore::Document *)v4, a2, (WTF::StringImpl **)cf);
  v162 = cf[0];
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = v5[1];
    if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
    {
      v5 = *(_QWORD **)(*((_QWORD *)this + 2) + 8);
      LOBYTE(v5) = *(_BYTE *)(v5[85] + 370) == 3 || *(_BYTE *)(v5[383] + 184) == 1;
    }
    else
    {
      LOBYTE(v5) = 0;
    }
  }
  v163 = (char)v5;
  WebCore::Editor::selectionInWebArchiveFormat((WebCore::Editor *)cf, this);
  v8 = cf[0];
  cf[0] = 0;
  v9 = v164;
  *(_QWORD *)&v164 = v8;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v54 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v54)
      {
        v55 = *(_QWORD *)(v9 + 8);
        v56 = v55 + 16 * v54;
        do
        {
          v57 = *(unsigned int **)(v55 + 8);
          *(_QWORD *)(v55 + 8) = 0;
          if (v57)
          {
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              v142 = v56;
              v150 = v55;
              v134 = v9;
              atomic_store(1u, v57);
              v60 = v57[6];
              if ((_DWORD)v60 != -1)
                ((void (*)(uint64_t *, unsigned int *))off_1E327F9E0[v60])(&v168, v57 + 2);
              v57[6] = -1;
              WTF::fastFree((WTF *)v57, v7);
              v9 = v134;
              v56 = v142;
              v55 = v150;
            }
          }
          v55 += 16;
        }
        while (v55 != v56);
      }
      v68 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v68 && v68 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v126 = v9;
        WTF::fastFree(v68, v7);
        v9 = v126;
      }
      WTF::fastFree((WTF *)v9, v7);
    }
    v12 = (unsigned int *)cf[0];
    cf[0] = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        v61 = v12[5];
        if ((_DWORD)v61)
        {
          v62 = *((_QWORD *)v12 + 1);
          v63 = v62 + 16 * v61;
          do
          {
            v64 = *(unsigned int **)(v62 + 8);
            *(_QWORD *)(v62 + 8) = 0;
            if (v64)
            {
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                v143 = v63;
                v151 = v62;
                v135 = v12;
                atomic_store(1u, v64);
                v67 = v64[6];
                if ((_DWORD)v67 != -1)
                  ((void (*)(uint64_t *, unsigned int *))off_1E327F9E0[v67])(&v168, v64 + 2);
                v64[6] = -1;
                WTF::fastFree((WTF *)v64, v7);
                v12 = v135;
                v63 = v143;
                v62 = v151;
              }
            }
            v62 += 16;
          }
          while (v62 != v63);
        }
        v70 = (WTF *)*((_QWORD *)v12 + 1);
        if (v12 + 6 != (unsigned int *)v70 && v70 != 0)
        {
          *((_QWORD *)v12 + 1) = 0;
          v12[4] = 0;
          v127 = v12;
          WTF::fastFree(v70, v7);
          v12 = v127;
        }
        WTF::fastFree((WTF *)v12, v7);
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(v4 + 680) + 720) & 0x80000000) != 0)
  {
    WebCore::selectionAsAttributedString((WebCore *)cf, *(const WebCore::Document **)(v4 + 3064));
    v15 = (NSAttributedString *)cf[0];
    if (objc_msgSend((id)cf[0], "containsAttachments"))
    {
      WebCore::Editor::dataInRTFDFormat((WebCore::Editor *)&v168, v15);
      v17 = v168;
    }
    else
    {
      v17 = 0;
    }
    v168 = 0;
    v18 = *((_QWORD *)&v164 + 1);
    *((_QWORD *)&v164 + 1) = v17;
    if (v18)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v18);
        v72 = *(unsigned int *)(v18 + 20);
        if ((_DWORD)v72)
        {
          v73 = *(_QWORD *)(v18 + 8);
          v74 = v73 + 16 * v72;
          do
          {
            v75 = *(unsigned int **)(v73 + 8);
            *(_QWORD *)(v73 + 8) = 0;
            if (v75)
            {
              do
              {
                v76 = __ldaxr(v75);
                v77 = v76 - 1;
              }
              while (__stlxr(v77, v75));
              if (!v77)
              {
                v144 = v74;
                v152 = v73;
                v136 = v18;
                atomic_store(1u, v75);
                v78 = v75[6];
                if ((_DWORD)v78 != -1)
                  ((void (*)(char *, unsigned int *))off_1E327F9E0[v78])(&v169, v75 + 2);
                v75[6] = -1;
                WTF::fastFree((WTF *)v75, v16);
                v18 = v136;
                v74 = v144;
                v73 = v152;
              }
            }
            v73 += 16;
          }
          while (v73 != v74);
        }
        v100 = *(WTF **)(v18 + 8);
        if ((WTF *)(v18 + 24) != v100 && v100 != 0)
        {
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 16) = 0;
          v128 = v18;
          WTF::fastFree(v100, v16);
          v18 = v128;
        }
        WTF::fastFree((WTF *)v18, v16);
      }
      v21 = v168;
      v168 = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr((unsigned int *)v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)v21));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)v21);
          v79 = *(unsigned int *)(v21 + 20);
          if ((_DWORD)v79)
          {
            v80 = *(_QWORD *)(v21 + 8);
            v81 = v80 + 16 * v79;
            do
            {
              v82 = *(unsigned int **)(v80 + 8);
              *(_QWORD *)(v80 + 8) = 0;
              if (v82)
              {
                do
                {
                  v83 = __ldaxr(v82);
                  v84 = v83 - 1;
                }
                while (__stlxr(v84, v82));
                if (!v84)
                {
                  v145 = v81;
                  v153 = v80;
                  v137 = v21;
                  atomic_store(1u, v82);
                  v85 = v82[6];
                  if ((_DWORD)v85 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v85])(&v169, v82 + 2);
                  v82[6] = -1;
                  WTF::fastFree((WTF *)v82, v16);
                  v21 = v137;
                  v81 = v145;
                  v80 = v153;
                }
              }
              v80 += 16;
            }
            while (v80 != v81);
          }
          v102 = *(WTF **)(v21 + 8);
          if ((WTF *)(v21 + 24) != v102 && v102 != 0)
          {
            *(_QWORD *)(v21 + 8) = 0;
            *(_DWORD *)(v21 + 16) = 0;
            v129 = v21;
            WTF::fastFree(v102, v16);
            v21 = v129;
          }
          WTF::fastFree((WTF *)v21, v16);
        }
      }
    }
    WebCore::Editor::dataInRTFFormat((WebCore::Editor *)&v168, (NSAttributedString *)cf[0]);
    v25 = v168;
    v168 = 0;
    v26 = v165;
    *(_QWORD *)&v165 = v25;
    if (v26)
    {
      do
      {
        v27 = __ldaxr((unsigned int *)v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unsigned int *)v26));
      if (!v28)
      {
        atomic_store(1u, (unsigned int *)v26);
        v86 = *(unsigned int *)(v26 + 20);
        if ((_DWORD)v86)
        {
          v87 = *(_QWORD *)(v26 + 8);
          v88 = v87 + 16 * v86;
          do
          {
            v89 = *(unsigned int **)(v87 + 8);
            *(_QWORD *)(v87 + 8) = 0;
            if (v89)
            {
              do
              {
                v90 = __ldaxr(v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, v89));
              if (!v91)
              {
                v146 = v88;
                v154 = v87;
                v138 = v26;
                atomic_store(1u, v89);
                v92 = v89[6];
                if ((_DWORD)v92 != -1)
                  ((void (*)(char *, unsigned int *))off_1E327F9E0[v92])(&v169, v89 + 2);
                v89[6] = -1;
                WTF::fastFree((WTF *)v89, v24);
                v26 = v138;
                v88 = v146;
                v87 = v154;
              }
            }
            v87 += 16;
          }
          while (v87 != v88);
        }
        v104 = *(WTF **)(v26 + 8);
        if ((WTF *)(v26 + 24) != v104 && v104 != 0)
        {
          *(_QWORD *)(v26 + 8) = 0;
          *(_DWORD *)(v26 + 16) = 0;
          v130 = v26;
          WTF::fastFree(v104, v24);
          v26 = v130;
        }
        WTF::fastFree((WTF *)v26, v24);
      }
      v29 = v168;
      v168 = 0;
      if (v29)
      {
        do
        {
          v30 = __ldaxr((unsigned int *)v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, (unsigned int *)v29));
        if (!v31)
        {
          atomic_store(1u, (unsigned int *)v29);
          v93 = *(unsigned int *)(v29 + 20);
          if ((_DWORD)v93)
          {
            v94 = *(_QWORD *)(v29 + 8);
            v95 = v94 + 16 * v93;
            do
            {
              v96 = *(unsigned int **)(v94 + 8);
              *(_QWORD *)(v94 + 8) = 0;
              if (v96)
              {
                do
                {
                  v97 = __ldaxr(v96);
                  v98 = v97 - 1;
                }
                while (__stlxr(v98, v96));
                if (!v98)
                {
                  v147 = v95;
                  v155 = v94;
                  v139 = v29;
                  atomic_store(1u, v96);
                  v99 = v96[6];
                  if ((_DWORD)v99 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v99])(&v169, v96 + 2);
                  v96[6] = -1;
                  WTF::fastFree((WTF *)v96, v24);
                  v29 = v139;
                  v95 = v147;
                  v94 = v155;
                }
              }
              v94 += 16;
            }
            while (v94 != v95);
          }
          v106 = *(WTF **)(v29 + 8);
          if ((WTF *)(v29 + 24) != v106 && v106 != 0)
          {
            *(_QWORD *)(v29 + 8) = 0;
            *(_DWORD *)(v29 + 16) = 0;
            v131 = v29;
            WTF::fastFree(v106, v24);
            v29 = v131;
          }
          WTF::fastFree((WTF *)v29, v24);
        }
      }
    }
    WebCore::archivedDataForAttributedString((WebCore *)&v168, (NSAttributedString *)cf[0]);
    v32 = v168;
    v168 = 0;
    v33 = *((_QWORD *)&v165 + 1);
    *((_QWORD *)&v165 + 1) = v32;
    if (v33)
    {
      do
      {
        v34 = __ldaxr((unsigned int *)v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v33));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v33);
        v108 = *(unsigned int *)(v33 + 20);
        if ((_DWORD)v108)
        {
          v109 = *(_QWORD *)(v33 + 8);
          v110 = v109 + 16 * v108;
          do
          {
            v111 = *(unsigned int **)(v109 + 8);
            *(_QWORD *)(v109 + 8) = 0;
            if (v111)
            {
              do
              {
                v112 = __ldaxr(v111);
                v113 = v112 - 1;
              }
              while (__stlxr(v113, v111));
              if (!v113)
              {
                v148 = v110;
                v156 = v109;
                v140 = v33;
                atomic_store(1u, v111);
                v114 = v111[6];
                if ((_DWORD)v114 != -1)
                  ((void (*)(char *, unsigned int *))off_1E327F9E0[v114])(&v169, v111 + 2);
                v111[6] = -1;
                WTF::fastFree((WTF *)v111, v7);
                v33 = v140;
                v110 = v148;
                v109 = v156;
              }
            }
            v109 += 16;
          }
          while (v109 != v110);
        }
        v122 = *(WTF **)(v33 + 8);
        if ((WTF *)(v33 + 24) != v122 && v122 != 0)
        {
          *(_QWORD *)(v33 + 8) = 0;
          *(_DWORD *)(v33 + 16) = 0;
          v132 = v33;
          WTF::fastFree(v122, v7);
          v33 = v132;
        }
        WTF::fastFree((WTF *)v33, v7);
      }
      v36 = v168;
      v168 = 0;
      if (v36)
      {
        do
        {
          v37 = __ldaxr((unsigned int *)v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, (unsigned int *)v36));
        if (!v38)
        {
          atomic_store(1u, (unsigned int *)v36);
          v115 = *(unsigned int *)(v36 + 20);
          if ((_DWORD)v115)
          {
            v116 = *(_QWORD *)(v36 + 8);
            v117 = v116 + 16 * v115;
            do
            {
              v118 = *(unsigned int **)(v116 + 8);
              *(_QWORD *)(v116 + 8) = 0;
              if (v118)
              {
                do
                {
                  v119 = __ldaxr(v118);
                  v120 = v119 - 1;
                }
                while (__stlxr(v120, v118));
                if (!v120)
                {
                  v149 = v117;
                  v157 = v116;
                  v141 = v36;
                  atomic_store(1u, v118);
                  v121 = v118[6];
                  if ((_DWORD)v121 != -1)
                    ((void (*)(char *, unsigned int *))off_1E327F9E0[v121])(&v169, v118 + 2);
                  v118[6] = -1;
                  WTF::fastFree((WTF *)v118, v7);
                  v36 = v141;
                  v117 = v149;
                  v116 = v157;
                }
              }
              v116 += 16;
            }
            while (v116 != v117);
          }
          v124 = *(WTF **)(v36 + 8);
          if ((WTF *)(v36 + 24) != v124 && v124 != 0)
          {
            *(_QWORD *)(v36 + 8) = 0;
            *(_DWORD *)(v36 + 16) = 0;
            v133 = v36;
            WTF::fastFree(v124, v7);
            v36 = v133;
          }
          WTF::fastFree((WTF *)v36, v7);
        }
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
  }
  if ((WebCore::ImageOverlay::isInsideOverlay((WebCore::ImageOverlay *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), (const WebCore::VisibleSelection *)v7) & 1) != 0)
  {
    v40 = 0;
  }
  else
  {
    v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
    WebCore::serializePreservingVisualAppearanceInternal((uint64_t *)cf, (WebCore *)(v41 + 120), v41 + 136, 0, 3, 1, 1, 1, 0, 0, 1, 0);
    v40 = cf[0];
  }
  v42 = (WTF::StringImpl *)v166;
  *(_QWORD *)&v166 = v40;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v39);
    else
      *(_DWORD *)v42 -= 2;
  }
  WebCore::Editor::stringSelectionForPasteboardWithImageAltText((WebCore::Editor *)cf, this);
  v44 = (WTF::StringImpl *)*((_QWORD *)&v166 + 1);
  *((CFTypeRef *)&v166 + 1) = cf[0];
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = *((_QWORD *)this + 1);
  if (v45)
    v46 = *(_QWORD *)(v45 + 8);
  else
    v46 = 0;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064) + 56), cf);
  (*(void (**)(uint64_t, CFTypeRef *, __int128 *))(*(_QWORD *)v46 + 304))(v46, cf, &v167);
  if (v161)
  {
    v48 = v160;
    v160 = 0;
    if (v48)
    {
      if (*((_DWORD *)v48 + 6) == 2)
      {
        if ((*((_WORD *)v48 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v48, v47);
      }
      else
      {
        *((_DWORD *)v48 + 6) -= 2;
      }
    }
    v49 = (WebCore::Node *)cf[0];
    cf[0] = 0;
    if (v49)
    {
      if (*((_DWORD *)v49 + 6) == 2)
      {
        if ((*((_WORD *)v49 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v49, v47);
      }
      else
      {
        *((_DWORD *)v49 + 6) -= 2;
      }
    }
  }
  WebCore::PasteboardWriterData::WebContent::WebContent((uint64_t)v158, (uint64_t)&v162);
  v50 = (char *)a2 + 80;
  if (*((_BYTE *)a2 + 160))
  {
    WebCore::PasteboardWriterData::WebContent::operator=((uint64_t)v50, (uint64_t)v158);
  }
  else
  {
    WebCore::PasteboardWriterData::WebContent::WebContent((uint64_t)v50, (uint64_t)v158);
    *((_BYTE *)a2 + 160) = 1;
  }
  WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData::WebContent *)v158, v51);
  WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData::WebContent *)&v162, v52);
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4, v53);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
}

void sub_194B4DC4C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,WebCore::Node *a24,uint64_t a25,WebCore::Node *a26,uint64_t a27,char a28)
{
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  void *v32;

  if (v29)
    CFRelease(v29);
  WebCore::PasteboardWriterData::WebContent::~WebContent((WebCore::PasteboardWriterData::WebContent *)(v30 - 144), a2);
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v32);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

uint64_t WebCore::Editor::stringSelectionForPasteboard@<X0>(WebCore::Editor *this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int16 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _QWORD v11[2];

  result = WebCore::Editor::canCopy(this, a2);
  if ((result & 1) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 688);
    if (!v6)
      v6 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*((_QWORD *)this + 2) + 8));
    if (*(_BYTE *)(v6 + 66))
      v7 = 512;
    else
      v7 = 2560;
    result = (uint64_t)WebCore::Editor::selectedText((uint64_t)this, v7, v11);
    v8 = (WTF::StringImpl *)v11[0];
    if (v11[0])
    {
      result = WTF::StringImpl::replace();
      *a3 = v11[1];
      if (*(_DWORD *)v8 == 2)
        return WTF::StringImpl::destroy(v8, v9);
      else
        *(_DWORD *)v8 -= 2;
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a3 = v10;
  }
  return result;
}

void sub_194B4DDF8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void WebCore::Editor::replaceSelectionWithAttributedString(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  void *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WTF::StringImpl *v21;
  int shouldInsertText;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  WebCore::Node *v26[2];
  WebCore::Node *v27;
  char v28;
  WTF::StringImpl *v29;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(v3 + 3064);
  if (!*(_BYTE *)(v4 + 153))
    goto LABEL_60;
  v7 = *(_QWORD *)(v4 + 120);
  if (!v7)
    goto LABEL_48;
  v8 = *(_BYTE *)(v4 + 132) & 7;
  if (v8 > 4)
    goto LABEL_48;
  if (((1 << v8) & 0x19) == 0)
  {
    v7 = *(_QWORD *)(v7 + 32);
    if (!v7)
      goto LABEL_48;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v11 = WebCore::Node::computeEditability(v7, 0, 1);
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (v11 != 2)
  {
LABEL_48:
    MEMORY[0x19AEA5508](&v29, objc_msgSend(a2, "string"));
    WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 56), v26);
    shouldInsertText = WebCore::Editor::shouldInsertText(a1, (uint64_t)&v29, (uint64_t)v26, 1);
    if (v28)
    {
      v23 = v27;
      v27 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 6) == 2)
        {
          if ((*((_WORD *)v23 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v23, a2);
        }
        else
        {
          *((_DWORD *)v23 + 6) -= 2;
        }
      }
      v24 = v26[0];
      v26[0] = 0;
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24, a2);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
    }
    if (shouldInsertText)
      WebCore::Editor::pasteAsPlainText((unsigned int *)a1, (const WTF::String *)&v29, 0);
    v25 = v29;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v25 -= 2;
    }
    goto LABEL_60;
  }
  WebCore::createFragment(*(WebCore::LocalFrame **)(*(_QWORD *)(v3 + 528) + 8), a2, 0, &v29);
  v12 = v29;
  if (!v29)
    goto LABEL_60;
  WebCore::VisibleSelection::toNormalizedRange((WebCore::VisibleSelection *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3064) + 56), v26);
  v13 = *(_QWORD *)(a1 + 8);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
  {
    LOBYTE(v7) = 0;
    goto LABEL_20;
  }
  v15 = *((_QWORD *)v12 + 10);
  if (!v15 || (*(_WORD *)(v15 + 28) & 1) == 0)
    goto LABEL_18;
  v16 = *(_DWORD *)(v15 + 24);
  *(_DWORD *)(v15 + 24) = v16 + 2;
  v17 = *((_QWORD *)v12 + 11);
  if (v17 == v15)
  {
    LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v14 + 104))(v14, v15 + 80, v26, 1);
    v16 = *(_DWORD *)(v15 + 24) - 2;
    if (*(_DWORD *)(v15 + 24) != 2)
      goto LABEL_15;
  }
  else if (v16)
  {
LABEL_15:
    *(_DWORD *)(v15 + 24) = v16;
    goto LABEL_16;
  }
  if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v15, a2);
LABEL_16:
  if (v17 != v15)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
LABEL_18:
    LOBYTE(v7) = (*(uint64_t (**)(uint64_t, WTF::StringImpl *, WebCore::Node **, uint64_t))(*(_QWORD *)v14 + 96))(v14, v12, v26, 1);
  }
LABEL_20:
  if (v28)
  {
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 2)
      {
        if ((*((_WORD *)v18 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v18, a2);
      }
      else
      {
        *((_DWORD *)v18 + 6) -= 2;
      }
    }
    v19 = v26[0];
    v26[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, a2);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
  }
  if ((v7 & 1) != 0)
  {
    v26[0] = v29;
    v29 = 0;
    WebCore::Editor::pasteAsFragment((unsigned int *)a1, v26, 0, 0, a3, 25);
    v20 = v26[0];
    v26[0] = 0;
    if (v20)
    {
      if (*((_DWORD *)v20 + 6) == 2)
      {
        if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v20, a2);
      }
      else
      {
        *((_DWORD *)v20 + 6) -= 2;
      }
    }
  }
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    if (*((_DWORD *)v21 + 6) == 2)
    {
      if ((*((_WORD *)v21 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v21, a2);
    }
    else
    {
      *((_DWORD *)v21 + 6) -= 2;
    }
  }
LABEL_60:
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

void sub_194B4E1D4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WebCore::Node *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  uint64_t v14;

  if (a9)
  {
    if (*((_DWORD *)a9 + 6) == 2)
    {
      if ((*((_WORD *)a9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a9, a2);
    }
    else
    {
      *((_DWORD *)a9 + 6) -= 2;
    }
  }
  if (a14)
  {
    if (*((_DWORD *)a14 + 6) == 2)
    {
      if ((*((_WORD *)a14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a14, a2);
    }
    else
    {
      *((_DWORD *)a14 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::Editor::dataInRTFDFormat(WebCore::Editor *this, NSAttributedString *a2)
{
  uint64_t *result;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = -[NSAttributedString length](a2, "length");
  if (result)
  {
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[NSAttributedString RTFDFromRange:documentAttributes:](a2, "RTFDFromRange:documentAttributes:", 0, result, MEMORY[0x1E0C9AA70]), &v9);
    v5 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v5, &v9);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v9, v6);
    v8 = 0;
    *(_QWORD *)this = v5;
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v8, v7);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

void sub_194B4E358()
{
  objc_end_catch();
  JUMPOUT(0x194B4E360);
}

uint64_t *WebCore::Editor::dataInRTFFormat(WebCore::Editor *this, NSAttributedString *a2)
{
  uint64_t *result;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  result = -[NSAttributedString length](a2, "length");
  if (result)
  {
    WebCore::FragmentedSharedBuffer::create((WebCore::FragmentedSharedBuffer *)-[NSAttributedString RTFFromRange:documentAttributes:](a2, "RTFFromRange:documentAttributes:", 0, result, MEMORY[0x1E0C9AA70]), &v9);
    v5 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v5, &v9);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v9, v6);
    v8 = 0;
    *(_QWORD *)this = v5;
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v8, v7);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return result;
}

void sub_194B4E42C()
{
  objc_end_catch();
  JUMPOUT(0x194B4E434);
}

void WebCore::Editor::webContentFromPasteboard(WebCore::Editor *this@<X0>, WebCore::Pasteboard *a2@<X1>, const WebCore::SimpleRange *a3@<X2>, BOOL *a4@<X4>, char a5@<W3>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD v23[4];
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  BOOL v29;

  v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v23[0] = off_1E327FAD8;
  v23[1] = 0;
  if (!*(_QWORD *)(v12 + 16))
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v12;
    v20 = *(unsigned int **)(v12 + 16);
    *(_QWORD *)(v12 + 16) = v19;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v18);
      }
    }
  }
  v13 = *(unsigned int **)(v12 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v23[2] = v13;
  v23[0] = &off_1E3283CC0;
  v15 = *(_QWORD *)a3;
  *(_DWORD *)(v15 + 24) = *(_DWORD *)(*(_QWORD *)a3 + 24) + 2;
  v23[3] = v15;
  v24 = *((_DWORD *)a3 + 2);
  v16 = *((_QWORD *)a3 + 2);
  *(_DWORD *)(v16 + 24) += 2;
  v25 = v16;
  v26 = *((_DWORD *)a3 + 6);
  v27 = a5;
  v28 = 0;
  v29 = 0;
  (*(void (**)(WebCore::Pasteboard *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, v23, 0, 0, 0);
  *a4 = v29;
  *a6 = v28;
  v28 = 0;
  WebCore::WebContentReader::~WebContentReader((WebCore::WebContentReader *)v23, v17);
}

void sub_194B4E59C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WebCore::WebContentReader::~WebContentReader((WebCore::WebContentReader *)&a9, a2);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::Editor::takeFindStringFromSelection(_QWORD *this, const WebCore::Position *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  int v6;
  WebCore::Document *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const char *v23[2];

  v2 = *(_QWORD *)(*(_QWORD *)(this[2] + 8) + 3064);
  if (*(_BYTE *)(v2 + 153) != 2)
    goto LABEL_7;
  v3 = (uint64_t)this;
  this = WebCore::enclosingTextFormControl((WebCore *)(v2 + 120), a2);
  if (this)
  {
    if (*(_QWORD *)(this[12] + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      v5 = *((_DWORD *)this + 6);
      *((_DWORD *)this + 6) = v5 + 2;
      v6 = *(_DWORD *)(this[30] + 12);
      if (v5)
      {
        *((_DWORD *)this + 6) = v5;
      }
      else if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        this = WebCore::Node::removedLastRef((WebCore::Node *)this, v4);
      }
      if (v6 == 2048)
      {
LABEL_7:
        {
          this = (_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager;
          if (WebCore::SystemSoundManager::singleton(void)::systemSoundManager)
            return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::SystemSoundManager::singleton(void)::systemSoundManager
                                                                + 16))(WebCore::SystemSoundManager::singleton(void)::systemSoundManager);
        }
        else
        {
          WebCore::SystemSoundManager::singleton(void)::systemSoundManager = 0;
        }
        return this;
      }
    }
  }
  v7 = *(WebCore::Document **)(*(_QWORD *)(v3 + 16) + 8);
  v8 = *((_QWORD *)v7 + 66);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *((_QWORD *)v7 + 86);
  if (!v10)
    v10 = WebCore::Document::ensureQuirks(v7);
  if (*(_BYTE *)(v10 + 66))
    v11 = 576;
  else
    v11 = 2624;
  WebCore::Editor::selectedText(v3, v11, &v21);
  v13 = *(_QWORD *)(v9 + 296);
  if (v13 && (v14 = *(_QWORD *)(v13 + 1744)) != 0)
  {
    v16 = *(const char **)(v14 + 16);
    v15 = *(const char **)(v14 + 24);
    v23[0] = v16;
    v23[1] = v15;
    if (v15)
      v17 = PAL::nonBackslashEncodings == 0;
    else
      v17 = 1;
    if (!v17 && *(_QWORD *)PAL::nonBackslashEncodings)
      WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v23);
    v18 = v21;
    if (v21)
    {
      WTF::StringImpl::replace();
LABEL_29:
      v21 = 0;
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
      goto LABEL_31;
    }
  }
  else
  {
    v18 = v21;
    if (v21)
    {
      *(_DWORD *)v21 += 2;
      v22 = v18;
      goto LABEL_29;
    }
  }
  v22 = 0;
LABEL_31:
  v19 = *(_QWORD *)(v3 + 8);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 568))(v20, &v22);
  }
  this = v22;
  v22 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void sub_194B4E7D4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Editor::readSelectionFromPasteboard(WebCore::Editor *this, const WTF::String *a2)
{
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t result;
  int8x16_t v29;
  uint64_t v30;
  void (**v31)(WebCore::Pasteboard *__hidden);
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  int v36;
  unsigned int v37;
  char v38;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 528);
  v5 = 0uLL;
  if (v4 && (v6 = *(_QWORD *)(v4 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0)
  {
    v8 = *(int8x16_t **)(v7 + 8);
    v9 = 0uLL;
    if (v8)
    {
      v10 = v8[2];
      v11.i64[0] = -256;
      v11.i64[1] = -256;
      v9 = vandq_s8(v10, v11);
      v12.i64[0] = 255;
      v12.i64[1] = 255;
      v5 = vandq_s8(v10, v12);
    }
  }
  else
  {
    v9 = 0uLL;
  }
  v29 = vorrq_s8(v5, v9);
  v13 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = off_1E327FAB0;
  *(int8x16_t *)(v13 + 8) = v29;
  v30 = v13;
  WebCore::Pasteboard::Pasteboard((uint64_t)&v31, &v30, (_DWORD **)a2);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3064);
  v15 = *(_QWORD *)(v14 + 120);
  if (!v15)
    goto LABEL_19;
  v16 = *(_BYTE *)(v14 + 132) & 7;
  if (v16 > 4)
    goto LABEL_19;
  if (((1 << v16) & 0x19) == 0)
  {
    v15 = *(_QWORD *)(v15 + 32);
    if (!v15)
      goto LABEL_19;
  }
  *(_DWORD *)(v15 + 24) += 2;
  v18 = WebCore::Node::computeEditability(v15, 0, 1);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v17);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  if (v18 == 2)
    WebCore::Editor::pasteWithPasteboard(this, (WebCore::Pasteboard *)&v31, 1);
  else
LABEL_19:
    WebCore::Editor::pasteAsPlainTextWithPasteboard(this, (WebCore::Pasteboard *)&v31);
  v31 = off_1E3354370;
  if (v38)
  {
    if (v37)
    {
      v20 = 32 * v37;
      v21 = (char *)v35 + 16;
      do
      {
        v22 = *((unsigned int *)v21 + 2);
        if ((_DWORD)v22 != -1)
          ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v22])(&v30, v21);
        *((_DWORD *)v21 + 2) = -1;
        v23 = (WTF::StringImpl *)*((_QWORD *)v21 - 1);
        *((_QWORD *)v21 - 1) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v19);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = (WTF::StringImpl *)*((_QWORD *)v21 - 2);
        *((_QWORD *)v21 - 2) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v19);
          else
            *(_DWORD *)v24 -= 2;
        }
        v21 += 32;
        v20 -= 32;
      }
      while (v20);
    }
    v25 = v35;
    if (v35)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree(v25, v19);
    }
    v26 = v34;
    v34 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v19);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v19);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194B4EAA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void (**a13)(WebCore::Pasteboard *__hidden this), uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, WTF *a18, int a19, unsigned int a20,char a21)
{
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  a13 = off_1E3354370;
  if (a21)
  {
    if (a20)
    {
      v26 = 32 * a20;
      v27 = (char *)a18 + 16;
      do
      {
        v28 = *((unsigned int *)v27 + 2);
        if ((_DWORD)v28 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v28])(&a12, v27);
        *((_DWORD *)v27 + 2) = -1;
        v29 = (WTF::StringImpl *)*((_QWORD *)v27 - 1);
        *((_QWORD *)v27 - 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = (WTF::StringImpl *)*((_QWORD *)v27 - 2);
        *((_QWORD *)v27 - 2) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, a2);
          else
            *(_DWORD *)v30 -= 2;
        }
        v27 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    v22 = a18;
    if (a18)
    {
      a18 = 0;
      a19 = 0;
      WTF::fastFree(v22, a2);
    }
    v23 = a17;
    a17 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, a2);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v24 = a15;
  a15 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = a14;
  a14 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(exception_object);
}

void sub_194B4EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12)
    JUMPOUT(0x194B4EB28);
  JUMPOUT(0x194B4EB1CLL);
}

unsigned int *WebCore::Editor::replaceNodeFromPasteboard(unsigned int *result, uint64_t a2, _DWORD **a3, int a4)
{
  unsigned int *v5;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::String *v29;
  __n128 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  WebCore::Node *v42;
  WebCore::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WebCore::Node *v49;
  WebCore::Node *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int *v59;
  int8x16_t v60;
  int8x16_t v61;
  WebCore::Node *v62;
  WTF::StringImpl *v63;
  WebCore::Node *v64;
  int v65;
  char v66;
  uint64_t v67;
  BOOL v68;
  void (**v69)(WebCore::Pasteboard *__hidden);
  unsigned int *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF *v73;
  int v74;
  unsigned int v75;
  char v76;
  unsigned int *v77;
  int v78;
  unsigned int *v79;
  int v80;
  char v81;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) != *(_QWORD *)(*((_QWORD *)result + 2) + 8))
    return result;
  v5 = result;
  result = *(unsigned int **)(a2 + 32);
  if (!result)
    return result;
  v8 = result[6];
  v9 = *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFLL;
  if (v9)
  {
    v10 = 0;
    do
    {
      ++v10;
      v9 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFLL;
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  result[6] = v8 + 6;
  v77 = result;
  v78 = v10;
  v79 = result;
  v80 = v10 + 1;
  v81 = 1;
  v11 = v8 + 4;
  if (v11)
  {
    result[6] = v11;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)result, (void *)a2);
  }
  v12 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 8);
  *(_DWORD *)(v12 + 24) += 2;
  v13 = *(_QWORD *)(v12 + 3064);
  WebCore::VisibleSelection::VisibleSelection((uint64_t)&v69, (uint64_t)&v77, 1, 0);
  WebCore::FrameSelection::setSelection(v13, (uint64_t)&v69, 0x10u, 0, 0, 0, 0);
  WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v69);
  v14 = *(_QWORD *)(v12 + 528);
  v61 = 0u;
  if (v14 && (v15 = *(_QWORD *)(v14 + 8)) != 0 && (v16 = *(_QWORD *)(v15 + 24)) != 0)
  {
    v17 = *(int8x16_t **)(v16 + 8);
    v60 = 0uLL;
    if (v17)
    {
      v18 = v17[2];
      v19.i64[0] = -256;
      v19.i64[1] = -256;
      v20 = vandq_s8(v18, v19);
      v19.i64[0] = 255;
      v19.i64[1] = 255;
      v60 = v20;
      v61 = vandq_s8(v18, v19);
    }
  }
  else
  {
    v60 = 0uLL;
  }
  v21 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v21 = off_1E327FAB0;
  *(int8x16_t *)(v21 + 8) = vorrq_s8(v61, v60);
  v62 = (WebCore::Node *)v21;
  WebCore::Pasteboard::Pasteboard((uint64_t)&v69, (uint64_t *)&v62, a3);
  if (v62)
    (*(void (**)(WebCore::Node *))(*(_QWORD *)v62 + 8))(v62);
  v22 = *(_QWORD *)(v12 + 3064);
  v23 = *(_QWORD *)(v22 + 120);
  if (v23)
  {
    v24 = *(_BYTE *)(v22 + 132) & 7;
    if (v24 <= 4)
    {
      if (((1 << v24) & 0x19) == 0)
        goto LABEL_97;
      while (1)
      {
        *(_DWORD *)(v23 + 24) += 2;
        v26 = WebCore::Node::computeEditability(v23, 0, 1);
        if (*(_DWORD *)(v23 + 24) == 2)
        {
          if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v23, v25);
        }
        else
        {
          *(_DWORD *)(v23 + 24) -= 2;
        }
        if (v26 != 2)
          goto LABEL_98;
        v68 = 0;
        if (v81)
        {
          WebCore::Editor::webContentFromPasteboard((WebCore::Editor *)v5, (WebCore::Pasteboard *)&v69, (const WebCore::SimpleRange *)&v77, &v68, 1, &v67);
          if (!v67)
            goto LABEL_99;
          v31 = *(_QWORD *)(v67 + 80);
          if (v31 && v31 == *(_QWORD *)(v67 + 88) && (*(_WORD *)(a2 + 28) & 0x10) != 0)
          {
            *(_DWORD *)(a2 + 24) += 2;
            v32 = *(_WORD *)(v31 + 28);
            if ((v32 & 0x10) != 0)
              v23 = v31;
            else
              v23 = 0;
            if ((v32 & 0x10) != 0)
            {
              v33 = *(_DWORD *)(v31 + 24);
              *(_DWORD *)(v31 + 24) = v33 + 2;
              if (*(_QWORD *)(*(_QWORD *)(a2 + 96) + 24) == *(_QWORD *)(*(_QWORD *)(v31 + 96) + 24))
              {
                v34 = *(_QWORD *)(a2 + 104);
                v35 = *(_DWORD *)(v34 + 4);
                if ((v35 & 1) != 0)
                {
                  v36 = *(_QWORD *)(v34 + 40);
                  v37 = *(_DWORD *)(v34 + 52);
                }
                else
                {
                  v36 = v34 + 32;
                  v37 = v35 >> 5;
                }
                if (v37)
                {
                  v38 = 0;
                  do
                  {
                    if (!WebCore::Element::hasAttribute((WebCore::Element *)v23, (const WebCore::QualifiedName *)(v36 + 16 * v38), v28, v29, v30))
                    {
                      WebCore::Element::setAttribute((WebCore::Element *)v23, (const WebCore::QualifiedName *)(v36 + 16 * v38), (WTF::StringImpl **)(v36 + 16 * v38 + 8), 0, &v62, v30);
                      if ((_BYTE)v64)
                      {
                        v39 = v63;
                        v63 = 0;
                        if (v39)
                        {
                          if (*(_DWORD *)v39 == 2)
                            WTF::StringImpl::destroy(v39, v27);
                          else
                            *(_DWORD *)v39 -= 2;
                        }
                      }
                    }
                    v40 = v38 + 1;
                    v38 = (v38 + 1);
                  }
                  while (v37 != v40);
                  v33 = *(_DWORD *)(v31 + 24) - 2;
                }
              }
              if (v33)
              {
                *(_DWORD *)(v31 + 24) = v33;
              }
              else if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v27);
              }
            }
            if (*(_DWORD *)(a2 + 24) == 2)
            {
              if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)a2, v27);
            }
            else
            {
              *(_DWORD *)(a2 + 24) -= 2;
            }
          }
          if (v81)
            break;
        }
        __break(1u);
LABEL_97:
        v23 = *(_QWORD *)(v23 + 32);
        if (!v23)
          goto LABEL_98;
      }
      v41 = v67;
      v42 = (WebCore::Node *)v77;
      v77[6] += 2;
      v62 = v42;
      LODWORD(v63) = v78;
      v43 = (WebCore::Node *)v79;
      v79[6] += 2;
      v64 = v43;
      v65 = v80;
      v66 = 1;
      v44 = *((_QWORD *)v5 + 1);
      if (!v44)
      {
        LOBYTE(v23) = 0;
        v64 = 0;
        goto LABEL_68;
      }
      v45 = *(_QWORD *)(v44 + 8);
      if (!v45)
      {
        LOBYTE(v23) = 0;
        goto LABEL_66;
      }
      v46 = *(_QWORD *)(v41 + 80);
      if (v46 && (*(_WORD *)(v46 + 28) & 1) != 0)
      {
        v47 = *(_DWORD *)(v46 + 24);
        *(_DWORD *)(v46 + 24) = v47 + 2;
        v48 = *(_QWORD *)(v41 + 88);
        if (v48 == v46)
        {
          LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v45 + 104))(v45, v46 + 80, &v62, 1);
          v47 = *(_DWORD *)(v46 + 24) - 2;
        }
        if (v47)
        {
          *(_DWORD *)(v46 + 24) = v47;
        }
        else if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v46, v27);
        }
        if (v48 == v46)
        {
LABEL_66:
          if (!v66)
            goto LABEL_73;
          v43 = v64;
          v64 = 0;
          if (!v43)
          {
LABEL_70:
            v49 = v62;
            v62 = 0;
            if (v49)
            {
              if (*((_DWORD *)v49 + 6) == 2)
              {
                if ((*((_WORD *)v49 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v49, v27);
              }
              else
              {
                *((_DWORD *)v49 + 6) -= 2;
              }
            }
LABEL_73:
            if ((v23 & 1) != 0)
            {
              v62 = (WebCore::Node *)v41;
              v67 = 0;
              WebCore::Editor::pasteAsFragment(v5, &v62, 0, 0, 1, a4);
              v50 = v62;
              v62 = 0;
              if (!v50)
                goto LABEL_99;
              if (*((_DWORD *)v50 + 6) != 2)
              {
                *((_DWORD *)v50 + 6) -= 2;
                goto LABEL_99;
              }
              if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                goto LABEL_95;
            }
            else
            {
              if (*(_DWORD *)(v41 + 24) != 2)
              {
                *(_DWORD *)(v41 + 24) -= 2;
                goto LABEL_99;
              }
              if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
              {
                v50 = (WebCore::Node *)v41;
LABEL_95:
                WebCore::Node::removedLastRef(v50, v27);
                goto LABEL_99;
              }
            }
            goto LABEL_99;
          }
LABEL_68:
          if (*((_DWORD *)v43 + 6) == 2)
          {
            if ((*((_WORD *)v43 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v43, v27);
          }
          else
          {
            *((_DWORD *)v43 + 6) -= 2;
          }
          goto LABEL_70;
        }
        v45 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
      }
      LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t, WebCore::Node **, uint64_t))(*(_QWORD *)v45 + 96))(v45, v41, &v62, 1);
      goto LABEL_66;
    }
  }
LABEL_98:
  WebCore::Editor::pasteAsPlainTextWithPasteboard((WebCore::Editor *)v5, (WebCore::Pasteboard *)&v69);
LABEL_99:
  v69 = off_1E3354370;
  if (v76)
  {
    if (v75)
    {
      v51 = 32 * v75;
      v52 = (char *)v73 + 16;
      do
      {
        v53 = *((unsigned int *)v52 + 2);
        if ((_DWORD)v53 != -1)
          ((void (*)(WebCore::Node **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v53])(&v62, v52);
        *((_DWORD *)v52 + 2) = -1;
        v54 = (WTF::StringImpl *)*((_QWORD *)v52 - 1);
        *((_QWORD *)v52 - 1) = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v27);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = (WTF::StringImpl *)*((_QWORD *)v52 - 2);
        *((_QWORD *)v52 - 2) = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v27);
          else
            *(_DWORD *)v55 -= 2;
        }
        v52 += 32;
        v51 -= 32;
      }
      while (v51);
    }
    v56 = v73;
    if (v73)
    {
      v73 = 0;
      v74 = 0;
      WTF::fastFree(v56, v27);
    }
    v57 = v72;
    v72 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v27);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  v58 = v71;
  v71 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v27);
    else
      *(_DWORD *)v58 -= 2;
  }
  result = v70;
  v70 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v12, v27);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  if (v81)
  {
    v59 = v79;
    v79 = 0;
    if (v59)
    {
      if (v59[6] == 2)
      {
        if ((*((_WORD *)v59 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v59, v27);
      }
      else
      {
        v59[6] -= 2;
      }
    }
    result = v77;
    v77 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)result, v27);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  return result;
}

void sub_194B4F32C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WebCore::Node *a18, uint64_t a19, void (**a20)(WebCore::Pasteboard *__hidden this),uint64_t a21,WTF::StringImpl *a22,uint64_t a23,WTF::StringImpl *a24,WTF *a25,int a26,unsigned int a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  WTF *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;

  if (a13)
  {
    if (*(_DWORD *)(a13 + 24) == 2)
    {
      if ((*(_WORD *)(a13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a13, a2);
    }
    else
    {
      *(_DWORD *)(a13 + 24) -= 2;
    }
  }
  if (a18)
  {
    if (*((_DWORD *)a18 + 6) == 2)
    {
      if ((*((_WORD *)a18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a18, a2);
    }
    else
    {
      *((_DWORD *)a18 + 6) -= 2;
    }
  }
  a20 = off_1E3354370;
  if (a28)
  {
    if (a27)
    {
      v35 = 32 * a27;
      v36 = (char *)a25 + 16;
      do
      {
        v37 = *((unsigned int *)v36 + 2);
        if ((_DWORD)v37 != -1)
          ((void (*)(WebCore::Node **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v37])(&a18, v36);
        *((_DWORD *)v36 + 2) = -1;
        v38 = (WTF::StringImpl *)*((_QWORD *)v36 - 1);
        *((_QWORD *)v36 - 1) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = (WTF::StringImpl *)*((_QWORD *)v36 - 2);
        *((_QWORD *)v36 - 2) = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v39 -= 2;
        }
        v36 += 32;
        v35 -= 32;
      }
      while (v35);
    }
    v31 = a25;
    if (a25)
    {
      a25 = 0;
      a26 = 0;
      WTF::fastFree(v31, a2);
    }
    v32 = a24;
    a24 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  v33 = a22;
  a22 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = a21;
  a21 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, a2);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  if (*(_BYTE *)(v29 - 96))
  {
    v40 = *(_QWORD *)(v29 - 112);
    *(_QWORD *)(v29 - 112) = 0;
    if (v40)
    {
      if (*(_DWORD *)(v40 + 24) == 2)
      {
        if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v40, a2);
      }
      else
      {
        *(_DWORD *)(v40 + 24) -= 2;
      }
    }
    v41 = *(_QWORD *)(v29 - 128);
    *(_QWORD *)(v29 - 128) = 0;
    if (v41)
    {
      if (*(_DWORD *)(v41 + 24) == 2)
      {
        if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v41, a2);
      }
      else
      {
        *(_DWORD *)(v41 + 24) -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::Editor::insertMultiRepresentationHEIC(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  UInt8 *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node *v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WebCore::StyledElement *v18;
  WebCore::StyledElement *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore::StyledElement *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unint64_t v47;
  WTF::StringImpl *v48;
  WebCore::StyledElement *v49;
  WebCore::StyledElement *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  uint64_t v72;
  void *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WebCore::StyledElement *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  uint64_t v84;
  int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t *v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  char v105;
  char v106;
  int v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WebCore::StyledElement *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  void *v123;
  WTF *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *result;
  WTF::StringImpl *v128;
  _BYTE v129[8];
  WTF::StringImpl *v130;
  char v131;
  _BYTE v132[8];
  WTF::StringImpl *v133;
  char v134;
  WTF::StringImpl *v135;
  _BYTE v136[8];
  WTF::StringImpl *v137;
  char v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WebCore::Node *v143;
  uint64_t v144;
  WTF *v145;
  int v146;
  WTF *v147;
  uint64_t v148;
  WTF::AtomStringImpl *v149;
  WTF::StringImpl *v150;
  WebCore::StyledElement *v151[2];

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v149 = v145;
  v7 = *(UInt8 **)a2;
  v8 = *(WTF **)(a2 + 8);
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = v9 + 24;
  *(_QWORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v9, (WTF *)v7, v8);
  v148 = v9;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v147 = v145;
  WebCore::encodeData((WebCore *)&v147, *(const UInt8 **)a2, *(void **)(a2 + 8), 0, 0, &v145);
  WebCore::FragmentedSharedBuffer::create(&v145, &v144);
  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x101C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  v12 = v6 + 96;
  *(_QWORD *)(v10 + 40) = v6 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v13 = WebCore::HTMLNames::pictureTag;
  if (WebCore::HTMLNames::pictureTag)
    ++*(_DWORD *)WebCore::HTMLNames::pictureTag;
  *(_QWORD *)(v10 + 96) = v13;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33C82A8;
  WebCore::HTMLSourceElement::create((WebCore::HTMLSourceElement *)v6, (uint64_t *)&v143);
  v14 = v143;
  v15 = v148;
  v139 = 0;
  v140 = 0;
  v16 = *(_QWORD *)(v148 + 48);
  if (v16)
  {
    if (HIDWORD(v16))
    {
      __break(0xC471u);
      JUMPOUT(0x194B50634);
    }
    v17 = (WTF::StringImpl *)WTF::fastMalloc(*(WTF **)(v148 + 48));
    LODWORD(v140) = v16;
    v139 = v17;
  }
  v18 = (WebCore::StyledElement *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v18 = off_1E3406E88;
  *((_QWORD *)v18 + 1) = &v139;
  v151[0] = v18;
  WebCore::FragmentedSharedBuffer::forEachSegment(v15, v151);
  v19 = v151[0];
  v151[0] = 0;
  if (v19)
    (*(void (**)(WebCore::StyledElement *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
  v21 = WebCore::Blob::Blob((uint64_t)v20, (WebCore::ScriptExecutionContext *)(v6 + 192), (uint64_t)&v139, &v149);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v21 + 24));
  WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v6 + 192), v20, &v141);
  v22 = v141;
  v141 = 0;
  if (v22)
  {
    v150 = v22;
    if ((*((_BYTE *)v22 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v24 = v150;
      v22 = v151[0];
      v150 = 0;
      v151[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v23);
        else
          *(_DWORD *)v24 -= 2;
      }
    }
  }
  v142 = v22;
  v25 = *((_QWORD *)v14 + 13);
  if (!v25)
    goto LABEL_23;
  v26 = *(_DWORD *)(v25 + 4);
  if ((v26 & 1) != 0)
  {
    v27 = *(uint64_t **)(v25 + 40);
    v28 = *(_DWORD *)(v25 + 52);
    if (!v28)
    {
LABEL_23:
      v29 = 0xFFFFFFFFLL;
      goto LABEL_24;
    }
  }
  else
  {
    v27 = (uint64_t *)(v25 + 32);
    v28 = v26 >> 5;
    if (!v28)
      goto LABEL_23;
  }
  v29 = 0;
  while (1)
  {
    v30 = *v27;
    if (*v27 == WebCore::HTMLNames::srcsetAttr
      || *(_QWORD *)(v30 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 24)
      && *(_QWORD *)(v30 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcsetAttr + 32))
    {
      break;
    }
    ++v29;
    v27 += 2;
    if (v28 == v29)
      goto LABEL_23;
  }
LABEL_24:
  WebCore::Element::setAttributeInternal(v14, v29, (WebCore::TreeScope *)&WebCore::HTMLNames::srcsetAttr, &v142, 0);
  v32 = v142;
  v142 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (*((_DWORD *)v20 + 4) == 1)
    (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v20 + 8))(v20);
  else
    --*((_DWORD *)v20 + 4);
  v33 = v139;
  if (v139)
  {
    v139 = 0;
    LODWORD(v140) = 0;
    WTF::fastFree(v33, v31);
  }
  v34 = v149;
  if (v149)
  {
    if ((*((_BYTE *)v149 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v149 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v149, v31);
      v34 = v139;
    }
  }
  v151[0] = v34;
  v35 = *((_QWORD *)v14 + 13);
  if (!v35)
    goto LABEL_46;
  v36 = *(_DWORD *)(v35 + 4);
  if ((v36 & 1) != 0)
  {
    v37 = *(uint64_t **)(v35 + 40);
    v38 = *(_DWORD *)(v35 + 52);
    if (!v38)
    {
LABEL_46:
      v39 = 0xFFFFFFFFLL;
      goto LABEL_47;
    }
  }
  else
  {
    v37 = (uint64_t *)(v35 + 32);
    v38 = v36 >> 5;
    if (!v38)
      goto LABEL_46;
  }
  v39 = 0;
  while (1)
  {
    v40 = *v37;
    if (*v37 == WebCore::HTMLNames::typeAttr
      || *(_QWORD *)(v40 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
      && *(_QWORD *)(v40 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
    {
      break;
    }
    ++v39;
    v37 += 2;
    if (v38 == v39)
      goto LABEL_46;
  }
LABEL_47:
  WebCore::Element::setAttributeInternal(v14, v39, (WebCore::TreeScope *)&WebCore::HTMLNames::typeAttr, v151, 0);
  v42 = v151[0];
  v151[0] = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v41);
    else
      *(_DWORD *)v42 -= 2;
  }
  WebCore::ContainerNode::appendChild(v11, v14, (uint64_t)v136);
  if (v138)
  {
    v44 = v137;
    v137 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v43);
      else
        *(_DWORD *)v44 -= 2;
    }
  }
  WebCore::HTMLImageElement::create((WebCore::HTMLImageElement *)v6, (uint64_t *)&v142);
  v45 = v142;
  v46 = v144;
  v139 = 0;
  v140 = 0;
  v47 = *(_QWORD *)(v144 + 48);
  if (v47)
  {
    if (HIDWORD(v47))
    {
      __break(0xC471u);
      JUMPOUT(0x194B5063CLL);
    }
    v48 = (WTF::StringImpl *)WTF::fastMalloc(*(WTF **)(v144 + 48));
    LODWORD(v140) = v47;
    v139 = v48;
  }
  v49 = (WebCore::StyledElement *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v49 = off_1E3406E88;
  *((_QWORD *)v49 + 1) = &v139;
  v151[0] = v49;
  WebCore::FragmentedSharedBuffer::forEachSegment(v46, v151);
  v50 = v151[0];
  v151[0] = 0;
  if (v50)
    (*(void (**)(WebCore::StyledElement *))(*(_QWORD *)v50 + 8))(v50);
  v51 = (WebCore::ScriptExecutionContext *)bmalloc::api::isoAllocate();
  v52 = WebCore::Blob::Blob((uint64_t)v51, (WebCore::ScriptExecutionContext *)(v6 + 192), (uint64_t)&v139, &v147);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v52 + 24));
  WebCore::DOMURL::createPublicURL((WebCore::ActiveDOMObject **)(v6 + 192), v51, &v135);
  v53 = v135;
  v135 = 0;
  if (v53)
  {
    v150 = v53;
    if ((*((_BYTE *)v53 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v55 = v150;
      v53 = v151[0];
      v150 = 0;
      v151[0] = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v54);
        else
          *(_DWORD *)v55 -= 2;
      }
    }
  }
  v141 = v53;
  v56 = *((_QWORD *)v45 + 13);
  if (!v56)
    goto LABEL_74;
  v57 = *(_DWORD *)(v56 + 4);
  if ((v57 & 1) != 0)
  {
    v58 = *(uint64_t **)(v56 + 40);
    v59 = *(_DWORD *)(v56 + 52);
    if (!v59)
    {
LABEL_74:
      v60 = 0xFFFFFFFFLL;
      goto LABEL_75;
    }
  }
  else
  {
    v58 = (uint64_t *)(v56 + 32);
    v59 = v57 >> 5;
    if (!v59)
      goto LABEL_74;
  }
  v60 = 0;
  while (1)
  {
    v61 = *v58;
    if (*v58 == WebCore::HTMLNames::srcAttr
      || *(_QWORD *)(v61 + 24) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 24)
      && *(_QWORD *)(v61 + 32) == *(_QWORD *)(WebCore::HTMLNames::srcAttr + 32))
    {
      break;
    }
    ++v60;
    v58 += 2;
    if (v59 == v60)
      goto LABEL_74;
  }
LABEL_75:
  WebCore::Element::setAttributeInternal(v45, v60, (WebCore::TreeScope *)&WebCore::HTMLNames::srcAttr, &v141, 0);
  v63 = v141;
  v141 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v62);
    else
      *(_DWORD *)v63 -= 2;
  }
  if (*((_DWORD *)v51 + 4) == 1)
    (*(void (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)v51 + 8))(v51);
  else
    --*((_DWORD *)v51 + 4);
  v64 = v139;
  if (v139)
  {
    v139 = 0;
    LODWORD(v140) = 0;
    WTF::fastFree(v64, v62);
  }
  v65 = *a3;
  if (*a3 && *((_DWORD *)v65 + 1))
  {
    if ((*((_BYTE *)v65 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v65 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v65, v62);
      v65 = v139;
    }
    v151[0] = v65;
    v90 = *((_QWORD *)v45 + 13);
    if (!v90)
      goto LABEL_216;
    v91 = *(_DWORD *)(v90 + 4);
    if ((v91 & 1) != 0)
    {
      v92 = *(uint64_t **)(v90 + 40);
      v93 = *(_DWORD *)(v90 + 52);
      if (!v93)
      {
LABEL_216:
        v119 = 0xFFFFFFFFLL;
LABEL_217:
        WebCore::Element::setAttributeInternal(v45, v119, (WebCore::TreeScope *)&WebCore::HTMLNames::altAttr, v151, 0);
        v122 = v151[0];
        v151[0] = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, v121);
          else
            *(_DWORD *)v122 -= 2;
        }
        goto LABEL_83;
      }
    }
    else
    {
      v92 = (uint64_t *)(v90 + 32);
      v93 = v91 >> 5;
      if (!v93)
        goto LABEL_216;
    }
    v119 = 0;
    while (1)
    {
      v120 = *v92;
      if (*v92 == WebCore::HTMLNames::altAttr
        || *(_QWORD *)(v120 + 24) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 24)
        && *(_QWORD *)(v120 + 32) == *(_QWORD *)(WebCore::HTMLNames::altAttr + 32))
      {
        goto LABEL_217;
      }
      ++v119;
      v92 += 2;
      if (v93 == v119)
        goto LABEL_216;
    }
  }
LABEL_83:
  WebCore::ContainerNode::appendChild(v11, v45, (uint64_t)v132);
  if (v134)
  {
    v67 = v133;
    v133 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v66);
      else
        *(_DWORD *)v67 -= 2;
    }
  }
  v68 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v68 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v68 + 24) = 0xB00400000002;
  *(_QWORD *)(v68 + 32) = 0;
  *(_QWORD *)(v68 + 40) = v12;
  *(_OWORD *)(v68 + 48) = 0u;
  *(_OWORD *)(v68 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v68 + 80) = 0;
  *(_QWORD *)(v68 + 88) = 0;
  *(_QWORD *)v68 = off_1E33A31A0;
  WebCore::ContainerNode::appendChild(v68, (WebCore::Node *)v11, (uint64_t)v129);
  if (v131)
  {
    v70 = v130;
    v130 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v69);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  *(_DWORD *)(v6 + 24) += 2;
  v139 = (WTF::StringImpl *)v6;
  v71 = (_DWORD *)WTF::fastMalloc((WTF *)0x1D8);
  v72 = WebCore::EditCommand::EditCommand((uint64_t)v71, (uint64_t *)&v139, 14);
  *(_OWORD *)(v72 + 248) = 0u;
  *(_OWORD *)(v72 + 264) = 0u;
  *(_QWORD *)v72 = off_1E33ADA18;
  *(_QWORD *)(v72 + 280) = 0;
  *(_DWORD *)(v72 + 288) = 0;
  *(_BYTE *)(v72 + 292) &= 0xF0u;
  *(_QWORD *)(v72 + 296) = 0;
  *(_DWORD *)(v72 + 304) = 0;
  *(_BYTE *)(v72 + 308) &= 0xF0u;
  *(_QWORD *)(v72 + 312) = 0;
  *(_DWORD *)(v72 + 320) = 0;
  *(_BYTE *)(v72 + 324) &= 0xF0u;
  *(_QWORD *)(v72 + 328) = 0;
  *(_DWORD *)(v72 + 336) = 0;
  *(_BYTE *)(v72 + 340) &= 0xF0u;
  *(_QWORD *)(v72 + 344) = 0;
  *(_DWORD *)(v72 + 352) = 0;
  *(_BYTE *)(v72 + 356) &= 0xF0u;
  *(_QWORD *)(v72 + 360) = 0;
  *(_DWORD *)(v72 + 368) = 0;
  *(_BYTE *)(v72 + 372) &= 0xF0u;
  *(_WORD *)(v72 + 376) = 1;
  *(_BYTE *)(v72 + 378) = *(_BYTE *)(v72 + 378) & 0xFC | 1;
  *(_QWORD *)(v72 + 384) = 0;
  *(_DWORD *)(v72 + 392) = 0;
  *(_BYTE *)(v72 + 396) &= 0xF0u;
  *(_QWORD *)(v72 + 400) = 0;
  *(_DWORD *)(v72 + 408) = 0;
  *(_BYTE *)(v72 + 412) &= 0xF0u;
  *(_QWORD *)(v72 + 416) = 0;
  *(_WORD *)(v72 + 424) = 0;
  *(_BYTE *)(v72 + 426) = 1;
  *(_QWORD *)(v72 + 432) = v68;
  *(_QWORD *)(v72 + 440) = 0;
  *(_QWORD *)(v72 + 448) = 0;
  *(_QWORD *)(v72 + 456) = 0;
  *(_BYTE *)(v72 + 464) = 1;
  *(_DWORD *)(v72 + 465) = 0;
  WebCore::CompositeEditCommand::apply((WebCore::CompositeEditCommand *)v72);
  if (v71[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
  else
    --v71[2];
  v74 = v139;
  v139 = 0;
  if (v74)
  {
    if (*((_DWORD *)v74 + 6) == 2)
    {
      if ((*((_WORD *)v74 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v74, v73);
    }
    else
    {
      *((_DWORD *)v74 + 6) -= 2;
    }
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_231;
  }
  if (!byte_1ECE90A59)
  {
LABEL_231:
    v112 = v142;
    goto LABEL_232;
  }
  v75 = bmalloc::api::isoAllocate();
  v76 = (WebCore::StyledElement *)v75;
  *(_OWORD *)(v75 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v75 + 24) = 0x101C00000002;
  *(_QWORD *)(v75 + 32) = 0;
  *(_QWORD *)(v75 + 40) = v12;
  *(_OWORD *)(v75 + 48) = 0u;
  *(_OWORD *)(v75 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v75 + 80) = 0;
  *(_QWORD *)(v75 + 88) = 0;
  v77 = WebCore::HTMLNames::attachmentTag;
  if (WebCore::HTMLNames::attachmentTag)
    ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
  *(_QWORD *)(v75 + 96) = v77;
  *(_QWORD *)(v75 + 104) = 0;
  *(_QWORD *)v75 = off_1E33B4248;
  *(_BYTE *)(v75 + 112) = 0;
  *(_OWORD *)(v75 + 136) = 0uLL;
  *(_OWORD *)(v75 + 152) = 0uLL;
  *(_OWORD *)(v75 + 168) = 0uLL;
  *(_OWORD *)(v75 + 184) = 0uLL;
  *(_OWORD *)(v75 + 200) = 0uLL;
  *(_OWORD *)(v75 + 216) = 0uLL;
  *(_OWORD *)(v75 + 232) = 0uLL;
  *(_OWORD *)(v75 + 248) = 0uLL;
  *(_OWORD *)(v75 + 120) = 0uLL;
  *(_OWORD *)(v75 + 264) = 0uLL;
  *(_BYTE *)(v75 + 280) = 1;
  v151[0] = (WebCore::StyledElement *)v75;
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 680) + 704) & 0x100000000000) != 0)
  {
    *(_BYTE *)(v75 + 112) = 1;
    v75 = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v75);
    v76 = v151[0];
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)v76 + 16);
  if (!v78 || !*((_DWORD *)v78 + 1))
  {
    WTF::createVersion4UUIDString((WTF *)v75);
    v78 = v139;
    v139 = 0;
    v80 = (WTF::StringImpl *)*((_QWORD *)v76 + 16);
    *((_QWORD *)v76 + 16) = v78;
    if (!v80)
      goto LABEL_107;
    v81 = *(_DWORD *)v80 - 2;
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::destroy(v80, v79);
      v80 = v139;
      v139 = 0;
      if (!v80)
        goto LABEL_106;
      v81 = *(_DWORD *)v80 - 2;
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::destroy(v80, v117);
        goto LABEL_106;
      }
    }
    *(_DWORD *)v80 = v81;
LABEL_106:
    v78 = (WTF::StringImpl *)*((_QWORD *)v76 + 16);
LABEL_107:
    if (!v78)
      goto LABEL_109;
  }
  *(_DWORD *)v78 += 2;
LABEL_109:
  v150 = v78;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v141 = v139;
  v82 = v150;
  if (!v150)
  {
    v84 = 5;
LABEL_113:
    v85 = 1;
    goto LABEL_114;
  }
  v83 = *((_DWORD *)v150 + 1);
  *(_DWORD *)v150 += 2;
  if (v83 < 0 || (v84 = (v83 + 5), __OFADD__(v83, 5)))
  {
LABEL_261:
    __break(0xC471u);
    JUMPOUT(0x194B50624);
  }
  if ((*((_BYTE *)v82 + 16) & 4) != 0)
    goto LABEL_113;
  v85 = 0;
LABEL_114:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v84, v85, (uint64_t)v82, (int8x16_t *)".heic", 5u, &v139);
  v87 = v139;
  v135 = v139;
  if (!v139)
    goto LABEL_261;
  v88 = *(_QWORD *)(a1 + 8);
  if (v88 && (v89 = *(_QWORD *)(v88 + 8)) != 0)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v89 + 168))(v89, &v150, &v141, &v135, &v148);
    v87 = v135;
    v135 = 0;
    if (!v87)
      goto LABEL_129;
  }
  else
  {
    v135 = 0;
  }
  if (*(_DWORD *)v87 == 2)
  {
    WTF::StringImpl::destroy(v87, v86);
    if (!v82)
      goto LABEL_132;
    goto LABEL_130;
  }
  *(_DWORD *)v87 -= 2;
LABEL_129:
  if (!v82)
    goto LABEL_132;
LABEL_130:
  if (*(_DWORD *)v82 == 2)
    WTF::StringImpl::destroy(v82, v86);
  else
    *(_DWORD *)v82 -= 2;
LABEL_132:
  v94 = v141;
  v141 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, v86);
    else
      *(_DWORD *)v94 -= 2;
  }
  WebCore::AttachmentAssociatedElement::setAttachmentElement((uint64_t)v143 + 112, v151);
  v95 = bmalloc::api::isoAllocate();
  v96 = (WTF::StringImpl *)v95;
  *(_OWORD *)(v95 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v95 + 24) = 0x101C00000002;
  *(_QWORD *)(v95 + 32) = 0;
  *(_QWORD *)(v95 + 40) = v12;
  *(_OWORD *)(v95 + 48) = 0u;
  *(_OWORD *)(v95 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v95 + 80) = 0;
  *(_QWORD *)(v95 + 88) = 0;
  v97 = WebCore::HTMLNames::attachmentTag;
  if (WebCore::HTMLNames::attachmentTag)
    ++*(_DWORD *)WebCore::HTMLNames::attachmentTag;
  *(_QWORD *)(v95 + 96) = v97;
  *(_QWORD *)(v95 + 104) = 0;
  *(_QWORD *)v95 = off_1E33B4248;
  *(_BYTE *)(v95 + 112) = 0;
  *(_OWORD *)(v95 + 136) = 0uLL;
  *(_OWORD *)(v95 + 152) = 0uLL;
  *(_OWORD *)(v95 + 168) = 0uLL;
  *(_OWORD *)(v95 + 184) = 0uLL;
  *(_OWORD *)(v95 + 200) = 0uLL;
  *(_OWORD *)(v95 + 216) = 0uLL;
  *(_OWORD *)(v95 + 232) = 0uLL;
  *(_OWORD *)(v95 + 248) = 0uLL;
  *(_OWORD *)(v95 + 120) = 0uLL;
  *(_OWORD *)(v95 + 264) = 0uLL;
  *(_BYTE *)(v95 + 280) = 1;
  v141 = (WTF::StringImpl *)v95;
  if ((*(_QWORD *)(*(_QWORD *)(v6 + 680) + 704) & 0x100000000000) != 0)
  {
    *(_BYTE *)(v95 + 112) = 1;
    v95 = WebCore::Element::ensureUserAgentShadowRoot((WebCore::Element *)v95);
    v96 = v141;
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)v96 + 16);
  if (v98)
  {
    v102 = *((_DWORD *)v98 + 1);
    if (v102)
      goto LABEL_146;
  }
  WTF::createVersion4UUIDString((WTF *)v95);
  v98 = v139;
  v139 = 0;
  v100 = (WTF::StringImpl *)*((_QWORD *)v96 + 16);
  *((_QWORD *)v96 + 16) = v98;
  if (v100)
  {
    v101 = *(_DWORD *)v100 - 2;
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::destroy(v100, v99);
      v100 = v139;
      v139 = 0;
      if (!v100)
        goto LABEL_143;
      v101 = *(_DWORD *)v100 - 2;
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::destroy(v100, v118);
        goto LABEL_143;
      }
    }
    *(_DWORD *)v100 = v101;
LABEL_143:
    v98 = (WTF::StringImpl *)*((_QWORD *)v96 + 16);
  }
  if (!v98)
  {
    v135 = 0;
    v104 = 4;
    v105 = 1;
LABEL_149:
    v107 = 1;
    v106 = v105;
    goto LABEL_150;
  }
  v102 = *((_DWORD *)v98 + 1);
LABEL_146:
  v103 = *(_DWORD *)v98;
  v135 = v98;
  *(_DWORD *)v98 = v103 + 4;
  if (v102 < 0 || (v104 = (v102 + 4), __OFADD__(v102, 4)))
  {
LABEL_262:
    __break(0xC471u);
    JUMPOUT(0x194B5062CLL);
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  if ((*((_BYTE *)v98 + 16) & 4) != 0)
    goto LABEL_149;
LABEL_150:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v104, v107, (uint64_t)v98, (int8x16_t *)".png", 4u, &v139);
  v109 = v139;
  v128 = v139;
  if (!v139)
    goto LABEL_262;
  v110 = *(_QWORD *)(a1 + 8);
  if (v110 && (v111 = *(_QWORD *)(v110 + 8)) != 0)
  {
    (*(void (**)(uint64_t, WTF::StringImpl **, WTF **, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v111 + 168))(v111, &v135, &v147, &v128, &v144);
    v109 = v128;
    v128 = 0;
    if (!v109)
    {
LABEL_158:
      if ((v106 & 1) == 0)
        goto LABEL_159;
      goto LABEL_161;
    }
  }
  else
  {
    v128 = 0;
  }
  if (*(_DWORD *)v109 != 2)
  {
    *(_DWORD *)v109 -= 2;
    goto LABEL_158;
  }
  WTF::StringImpl::destroy(v109, v108);
  if ((v106 & 1) == 0)
  {
LABEL_159:
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v108);
    else
      *(_DWORD *)v98 -= 2;
  }
LABEL_161:
  v112 = v142;
  WebCore::AttachmentAssociatedElement::setAttachmentElement((uint64_t)v142 + 112, &v141);
  v113 = v135;
  v135 = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v73);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = v141;
  v141 = 0;
  if (v114)
  {
    if (*((_DWORD *)v114 + 6) == 2)
    {
      if ((*((_WORD *)v114 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v114, v73);
    }
    else
    {
      *((_DWORD *)v114 + 6) -= 2;
    }
  }
  v115 = v150;
  v150 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v73);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = v151[0];
  v151[0] = 0;
  if (v116)
  {
    if (*((_DWORD *)v116 + 6) == 2)
    {
      if ((*((_WORD *)v116 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v116, v73);
    }
    else
    {
      *((_DWORD *)v116 + 6) -= 2;
    }
  }
LABEL_232:
  if (v112)
  {
    if (*((_DWORD *)v112 + 6) == 2)
    {
      if ((*((_WORD *)v112 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v112, v73);
    }
    else
    {
      *((_DWORD *)v112 + 6) -= 2;
    }
  }
  if (v143)
  {
    if (*((_DWORD *)v143 + 6) == 2)
    {
      if ((*((_WORD *)v143 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v143, v73);
    }
    else
    {
      *((_DWORD *)v143 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v73);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v144, v73);
  v124 = v145;
  if (v145)
  {
    v145 = 0;
    v146 = 0;
    WTF::fastFree(v124, v123);
  }
  v125 = v147;
  v147 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v123);
    else
      *(_DWORD *)v125 -= 2;
  }
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v148, v123);
  result = v149;
  v149 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v126);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v126);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void sub_194B50648(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,WTF::StringImpl *a25,WebCore::Node *a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  if (a26)
  {
    if (*((_DWORD *)a26 + 6) == 2)
    {
      if ((*((_WORD *)a26 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a26, a2);
    }
    else
    {
      *((_DWORD *)a26 + 6) -= 2;
    }
  }
  if (a27)
  {
    if (*(_DWORD *)(a27 + 24) == 2)
    {
      if ((*(_WORD *)(a27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a27, a2);
    }
    else
    {
      *(_DWORD *)(a27 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v29 + 24) == 2)
  {
    if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v29, a2);
  }
  else
  {
    *(_DWORD *)(v29 + 24) -= 2;
  }
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&a28, a2);
  v33 = *(WTF **)(v30 - 144);
  if (v33)
  {
    *(_QWORD *)(v30 - 144) = 0;
    *(_DWORD *)(v30 - 136) = 0;
    WTF::fastFree(v33, v32);
  }
  v34 = *(WTF::StringImpl **)(v30 - 128);
  *(_QWORD *)(v30 - 128) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)(v30 - 120), v32);
  v36 = *(WTF::StringImpl **)(v30 - 112);
  *(_QWORD *)(v30 - 112) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v35);
      if (!v28)
        goto LABEL_26;
      goto LABEL_24;
    }
    *(_DWORD *)v36 -= 2;
  }
  if (!v28)
    goto LABEL_26;
LABEL_24:
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v28, v35);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
LABEL_26:
  _Unwind_Resume(a1);
}

void sub_194B509E0()
{
  JUMPOUT(0x194B50978);
}

void sub_194B509E8()
{
  JUMPOUT(0x194B509A0);
}

WebCore::FontChanges *WebCore::FontChanges::platformFontFamilyNameForCSS(WebCore::FontChanges *this)
{
  WebCore::FontChanges *v1;
  uint64_t Length;
  _DWORD *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  WTF::Thread *v8;
  double v9;
  const WebCore::FontPlatformData *v10;
  void *v11;
  WTF **v12;
  WTF *v13;
  CFStringRef v14;
  const __CFString *v15;
  CFComparisonResult v16;
  WTF::StringImpl *v17;
  WTF *v18;
  void *v19;
  CFStringRef v20;
  __int128 v22;
  WTF *v23[2];
  _OWORD v24[6];
  uint64_t v25;
  char v26;
  _DWORD *v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  CFStringRef v39;
  WTF **v40;

  v1 = this;
  WTF::String::createCFString(this);
  Length = CFStringGetLength(v39);
  if (Length >= 1)
  {
    Length = CFStringGetCharacterAtIndex(v39, 0);
    if ((_DWORD)Length == 46)
    {
      v1 = (WebCore::FontChanges *)((char *)v1 + 8);
      goto LABEL_34;
    }
  }
  v25 = 256;
  memset(v24, 0, sizeof(v24));
  v26 = 0;
  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  v27 = v3;
  v28 = 0;
  v29 = 2143289344;
  v30 = 0;
  v31 = 0;
  v33 = 400;
  v34 = 0;
  v35 = 257;
  v36 = 0xE00000000000;
  v38 = 0;
  v37 = 0;
  v4 = *((unsigned __int8 *)v1 + 51);
  if (*((_BYTE *)v1 + 51))
  {
    if (*((_BYTE *)v1 + 50))
      v4 = 65592;
    else
      v4 = 0;
  }
  LOWORD(v34) = v4;
  BYTE2(v34) = BYTE2(v4);
  v5 = 2000;
  if (*((_BYTE *)v1 + 49))
  {
    if (*((_BYTE *)v1 + 48))
      v5 = 3600;
    else
      v5 = 2000;
  }
  v32 = v5;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
  {
    Length = WebCore::threadGlobalDataSlow((WebCore *)Length);
    v7 = Length;
  }
  v8 = *(WTF::Thread **)(v7 + 80);
  if (!v8)
  {
    Length = (uint64_t)WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v7);
    v8 = *(WTF::Thread **)(v7 + 80);
  }
  v22 = 0u;
  *(_OWORD *)v23 = 0u;
  if ((*((_QWORD *)v8 + 4) & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((*((_QWORD *)v8 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v8 + 3) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)Length);
    WebCore::TimerBase::setNextFireTime((uint64_t)v8, v9 + 0.0);
  }
  v10 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v8, (WTF::StringImpl *)v24, (WebCore::FontPlatformData **)v1 + 1, &v22, 0);
  if (v10)
  {
    WebCore::FontCache::fontForPlatformData(v8, v10, &v40);
    v12 = v40;
  }
  else
  {
    v12 = 0;
  }
  v13 = v23[1];
  v23[1] = 0;
  if (v13)
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v13, v11);
  if (!v12)
    goto LABEL_33;
  v14 = CTFontCopyPostScriptName(v12[11]);
  v15 = v14;
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::Font::~Font(v12);
    WTF::fastFree(v18, v19);
    if (v15)
      goto LABEL_29;
LABEL_33:
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v24, (WTF::StringImpl *)v11);
    goto LABEL_34;
  }
  --*(_DWORD *)v12;
  if (!v14)
    goto LABEL_33;
LABEL_29:
  v16 = CFStringCompare(v39, v15, 0);
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v24, v17);
  if (v16 == kCFCompareEqualTo)
    v1 = (WebCore::FontChanges *)((char *)v1 + 8);
  CFRelease(v15);
LABEL_34:
  v20 = v39;
  v39 = 0;
  if (v20)
    CFRelease(v20);
  return v1;
}

void sub_194B50C54(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v6;
  uint64_t v7;
  const void *v9;
  va_list va;

  va_start(va, a6);
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)va, a2);
  CFRelease(v6);
  v9 = *(const void **)(v7 - 64);
  *(_QWORD *)(v7 - 64) = 0;
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

void WebCore::FontAttributes::createDictionary(WebCore::FontAttributes *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  PAL *v7;
  PAL *v8;
  float v9;
  float v10;
  PAL *v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  PAL *v16;
  PAL *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  id v21;
  int v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t (**v25)(void);
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  WTF::StringImpl *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  PAL *v43;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = v4;
  if (*(_QWORD *)this)
  {
    v6 = *(_QWORD *)(*(_QWORD *)this + 88);
    if (v6)
      v4 = (void *)objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, _MergedGlobals_16());
  }
  if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    WebCore::cocoaColor((WebCore::FontAttributes *)((char *)this + 16), &v43);
    v7 = v43;
    v4 = (void *)objc_msgSend(v5, "setObject:forKeyedSubscript:", v43, off_1ECE77BA8());
    if (v7)
      CFRelease(v7);
  }
  if ((*((_BYTE *)this + 14) & 4) != 0)
  {
    WebCore::cocoaColor((WebCore::FontAttributes *)((char *)this + 8), &v43);
    v8 = v43;
    v4 = (void *)objc_msgSend(v5, "setObject:forKeyedSubscript:", v43, off_1ECE77BB0());
    if (v8)
      CFRelease(v8);
  }
  if ((*((_BYTE *)this + 30) & 4) != 0)
  {
    v9 = *((float *)this + 8);
    if (v9 != 0.0)
    {
      if (v9 < 0.0)
        v9 = -v9;
      if (v9 >= 0.00000011921)
        goto LABEL_14;
    }
    v10 = *((float *)this + 9);
    if (v10 != 0.0)
    {
      if (v10 < 0.0)
        v10 = -v10;
      if (v10 >= 0.00000011921)
        goto LABEL_14;
    }
    if (*((double *)this + 5) != 0.0)
    {
LABEL_14:
      WebCore::FontShadow::createShadow((WebCore::FontAttributes *)((char *)this + 24), &v43);
      v11 = v43;
      v4 = (void *)objc_msgSend(v5, "setObject:forKeyedSubscript:", v43, off_1ECE77BB8());
      if (v11)
        CFRelease(v11);
    }
  }
  v12 = *((unsigned __int8 *)this + 48);
  if (v12 == 1)
  {
    v13 = &unk_1E349D738;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_21;
    v13 = &unk_1E349D750;
  }
  v4 = (void *)objc_msgSend(v5, "setObject:forKeyedSubscript:", v13, CFSTR("NSSuperscript"));
LABEL_21:
  v14 = (void *)objc_msgSend((id)objc_msgSend((id)PAL::getNSParagraphStyleClass[0]((PAL *)v4), "defaultParagraphStyle"), "mutableCopy");
  v15 = v14;
  if (*((unsigned __int8 *)this + 49) < 5uLL)
    objc_msgSend(v14, "setAlignment:");
  if (*((_DWORD *)this + 17))
  {
    v41 = a2;
    v42 = v15;
    v16 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *((unsigned int *)this + 17));
    v17 = v16;
    v18 = *((_DWORD *)this + 17);
    if (v18)
    {
      v19 = (unsigned __int8 *)*((_QWORD *)this + 7);
      v20 = &v19[24 * v18];
      do
      {
        v21 = objc_alloc((Class)PAL::getNSTextListClass[0](v16));
        v22 = *v19;
        v23 = (WTF::StringImpl *)*((_QWORD *)v19 + 1);
        if (v23)
          *(_DWORD *)v23 += 2;
        v24 = v19[20];
        if (v22)
          goto LABEL_30;
        v26 = MEMORY[0x19AEA53F4](v23, "disc", 4);
        v25 = off_1ECE77BD8;
        if ((v26 & 1) == 0)
        {
          v27 = MEMORY[0x19AEA53F4](off_1ECE77BD8, v23, "circle", 6);
          v25 = off_1ECE77BE0;
          if ((v27 & 1) == 0)
          {
            v28 = MEMORY[0x19AEA53F4](off_1ECE77BE0, v23, "square", 6);
            v25 = off_1ECE77BE8;
            if ((v28 & 1) == 0)
            {
              v29 = MEMORY[0x19AEA53F4](off_1ECE77BE8, v23, "decimal", 7);
              v25 = off_1ECE77BF0;
              if ((v29 & 1) == 0)
              {
                v30 = MEMORY[0x19AEA53F4](off_1ECE77BF0, v23, "octal", 5);
                v25 = off_1ECE77BF8;
                if ((v30 & 1) == 0)
                {
                  v31 = MEMORY[0x19AEA53F4](off_1ECE77BF8, v23, "lower-roman", 11);
                  v25 = off_1ECE77C00;
                  if ((v31 & 1) == 0)
                  {
                    v32 = MEMORY[0x19AEA53F4](off_1ECE77C00, v23, "upper-roman", 11);
                    v25 = off_1ECE77C08;
                    if ((v32 & 1) == 0)
                    {
                      v33 = MEMORY[0x19AEA53F4](off_1ECE77C08, v23, "lower-alpha", 11);
                      v25 = off_1ECE77C10;
                      if ((v33 & 1) == 0)
                      {
                        v34 = MEMORY[0x19AEA53F4](off_1ECE77C10, v23, "upper-alpha", 11);
                        v25 = off_1ECE77C18;
                        if ((v34 & 1) == 0)
                        {
                          v35 = MEMORY[0x19AEA53F4](off_1ECE77C18, v23, "lower-latin", 11);
                          v25 = off_1ECE77C20;
                          if ((v35 & 1) == 0)
                          {
                            v36 = MEMORY[0x19AEA53F4](off_1ECE77C20, v23, "upper-latin", 11);
                            v25 = off_1ECE77C28;
                            if ((v36 & 1) == 0)
                            {
                              v37 = MEMORY[0x19AEA53F4](off_1ECE77C28, v23, "lower-hexadecimal", 17);
                              v25 = off_1ECE77C30;
                              if ((v37 & 1) == 0)
                              {
                                v38 = MEMORY[0x19AEA53F4](off_1ECE77C30, v23, "upper-hexadecimal", 17);
                                v25 = &off_1ECE77C38;
                                if ((v38 & 1) == 0)
                                {
LABEL_30:
                                  v25 = off_1ECE77BF0;
                                  if (!v24)
                                    v25 = off_1ECE77BD8;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v40 = (void *)objc_msgSend(v21, "initWithMarkerFormat:options:", (*v25)(), 0);
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v39);
          else
            *(_DWORD *)v23 -= 2;
        }
        v16 = (PAL *)objc_msgSend(v40, "setStartingItemNumber:", *((int *)v19 + 4));
        if (v40)
        {
          -[PAL addObject:](v17, "addObject:", v40);
          CFRelease(v40);
        }
        v19 += 24;
      }
      while (v19 != v20);
    }
    v15 = v42;
    objc_msgSend(v42, "setTextLists:", v17);
    a2 = v41;
    if (v17)
      CFRelease(v17);
  }
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v15, off_1ECE77BC0());
  if (*((_BYTE *)this + 72))
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1E349D768, off_1ECE77BC8());
  if (*((_BYTE *)this + 73))
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1E349D768, off_1ECE77BD0());
  *a2 = v5;
  if (v5)
    CFRetain(v5);
  if (v15)
    CFRelease(v15);
}

void sub_194B51218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  const void *v11;

  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF ***a2)
{
  WTF **result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      return (WTF **)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::StringImpl ***)a2;
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  WTF *v3;
  WTF *v4;
  const void *v5;

  v3 = (WTF *)a2[3];
  if (v3)
  {
    a2[3] = 0;
    *((_DWORD *)a2 + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)a2[1];
  if (v4)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (const void *)*a2;
  *a2 = 0;
  if (v5)
    CFRelease(v5);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;

  v3 = (const void *)a2[4];
  a2[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD **)a2[2];
    v6 = 16 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v8 = (WTF *)a2[2];
  if (v8)
  {
    a2[2] = 0;
    *((_DWORD *)a2 + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF::StringImpl *)a2[1];
  a2[1] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = (WTF::StringImpl *)*a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS13_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEEEEDcS15_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
    CFRelease(v4);
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v34;
  char v35;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_8;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_9:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(56 * v11 + 16));
  bzero((void *)(v12 + 16), 56 * v11);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = *a2;
  if (*a2)
  {
    v14 = *(unsigned int *)(v13 - 4);
    v15 = v13 + 56 * v14;
    if (*(_DWORD *)(v13 - 12))
    {
      v16 = v13;
      if ((_DWORD)v14)
      {
        v17 = 56 * v14;
        v16 = v13;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 56;
          v17 -= 56;
          if (!v17)
          {
            v16 = v15;
            break;
          }
        }
      }
      if (v13)
        goto LABEL_22;
      goto LABEL_26;
    }
    v16 = v13 + 56 * v14;
  }
  else
  {
    v16 = 0;
    LODWORD(v14) = 0;
  }
  v15 = v13 + 56 * v14;
  if (v13)
  {
LABEL_22:
    v18 = v13 + 56 * *(unsigned int *)(v13 - 4);
    goto LABEL_27;
  }
LABEL_26:
  v18 = 0;
LABEL_27:
  while (v16 != v18)
  {
    v19 = *a1;
    if (*a1)
      v20 = *(_DWORD *)(v19 - 8);
    else
      v20 = 0;
    v21 = *(_DWORD *)(*(_QWORD *)v16 + 16);
    if (v21 < 0x100)
      v22 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v16);
    else
      v22 = v21 >> 8;
    v23 = 0;
    do
    {
      v24 = v22 & v20;
      v25 = (WTF::StringImpl **)(v19 + 56 * (v22 & v20));
      v22 = ++v23 + (v22 & v20);
    }
    while (*v25);
    v26 = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16)
      *(_DWORD *)v26 += 2;
    *v25 = v26;
    v27 = v19 + 56 * v24;
    v30 = *(_DWORD *)(v27 + 48);
    v29 = (_DWORD *)(v27 + 48);
    v28 = v30;
    v31 = *(unsigned int *)(v16 + 48);
    if (v30 == -1)
    {
      if ((_DWORD)v31 != -1)
      {
LABEL_42:
        v34 = v29 - 10;
        ((void (*)(_DWORD **))off_1E327F7D0[v31])(&v34);
      }
    }
    else
    {
      if ((_DWORD)v31 != -1)
        goto LABEL_42;
      ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v28])(&v35, v29 - 10);
      *v29 = -1;
    }
    v32 = v16 + 56;
    v16 = v15;
    if (v32 != v15)
    {
      v16 = v32;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 56;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 40) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, _DWORD **a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
        *v6 += 2;
      result = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v6;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v8, v4);
  }
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 40) = 1;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  __n128 result;
  _DWORD *v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *(__n128 *)(a3 + 8);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(__n128 *)(a2 + 8) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v10 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v10 += 2;
  *(_QWORD *)v4 = v10;
  result = *(__n128 *)(a3 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a3 + 24);
  *(__n128 *)(v4 + 8) = result;
  *(_DWORD *)(v4 + 40) = 2;
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(WTF **result, WTF ***a2, _DWORD **a3)
{
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *result;
  v5 = *((unsigned int *)*result + 10);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF **)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *v7 = **a3 + 1;
    *(_QWORD *)v4 = v7;
    *((_DWORD *)v4 + 10) = 3;
    return result;
  }
  v6 = *a3;
  *v6 = **a3 + 1;
  result = *a2;
  *a2 = (WTF **)v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      return (WTF **)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  if (!(_DWORD)v6)
    goto LABEL_6;
  if (!(v6 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        result += 2;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_DWORD *)(v4 + 40) = 4;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  char v21;

  v4 = *result;
  v5 = *(unsigned int *)(*result + 40);
  if ((_DWORD)v5 == -1)
  {
LABEL_9:
    *(_DWORD *)(v4 + 40) = -1;
    v12 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 12) = v12;
    if ((_DWORD)v12)
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
        goto LABEL_31;
      }
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(v4 + 8) = v12;
      *(_QWORD *)v4 = v13;
      result = (uint64_t *)memcpy(v13, *(const void **)a3, 8 * *(unsigned int *)(a3 + 12));
    }
    *(_DWORD *)(v4 + 40) = 5;
    return result;
  }
  if ((_DWORD)v5 != 5)
  {
    result = (uint64_t *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v21, v4);
    goto LABEL_9;
  }
  if ((_DWORD *)a3 == a2)
    return result;
  v7 = a2[3];
  v8 = *(_DWORD *)(a3 + 12);
  if (v7 > v8)
  {
    a2[3] = v8;
    v7 = v8;
    goto LABEL_6;
  }
  v9 = a2[2];
  if (v8 > v9)
  {
    if (v9)
    {
      if (v7)
        a2[3] = 0;
      v14 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        *(_QWORD *)a2 = 0;
        a2[2] = 0;
        WTF::fastFree(v14, a2);
        v9 = a2[2];
      }
    }
    v15 = *(unsigned int *)(a3 + 12);
    if (v9 >= v15)
      goto LABEL_28;
    if (!(v15 >> 29))
    {
      v16 = *(void **)a2;
      v17 = a2[3];
      v18 = *(_DWORD *)(a3 + 12);
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      a2[2] = v18;
      *(_QWORD *)a2 = v19;
      memcpy(v19, v16, 8 * v17);
      if (v16)
      {
        if (*(void **)a2 == v16)
        {
          *(_QWORD *)a2 = 0;
          a2[2] = 0;
        }
        WTF::fastFree((WTF *)v16, v20);
      }
LABEL_28:
      v7 = a2[3];
      goto LABEL_6;
    }
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x194B51E5CLL);
  }
LABEL_6:
  v10 = *(char **)a2;
  if (v7)
  {
    memmove(v10, *(const void **)a3, 8 * v7);
    v11 = a2[3];
    v10 = *(char **)a2;
  }
  else
  {
    v11 = 0;
  }
  result = (uint64_t *)memcpy(&v10[8 * v11], (const void *)(*(_QWORD *)a3 + 8 * v11), *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 12) - (*(_QWORD *)a3 + 8 * v11));
  a2[3] = *(_DWORD *)(a3 + 12);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  CFTypeRef v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      v7 = *(CFTypeRef *)a3;
      if (*(_QWORD *)a3)
        CFRetain(*(CFTypeRef *)a3);
      v8 = *(const void **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
        CFRelease(v8);
      if (a3 != a2)
      {
        v9 = *(_DWORD *)(a2 + 20);
        v10 = *(_DWORD *)(a3 + 20);
        if (v9 <= v10)
        {
          v25 = *(_DWORD *)(a2 + 16);
          if (v10 > v25)
          {
            if (v25)
            {
              if (v9)
                *(_DWORD *)(a2 + 20) = 0;
              v26 = *(WTF **)(a2 + 8);
              if (v26)
              {
                *(_QWORD *)(a2 + 8) = 0;
                *(_DWORD *)(a2 + 16) = 0;
                WTF::fastFree(v26, (void *)a2);
                v25 = *(_DWORD *)(a2 + 16);
              }
            }
            v27 = *(unsigned int *)(a3 + 20);
            if (v25 < v27)
            {
              if (v27 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x194B522B4);
              }
              v28 = *(WTF **)(a2 + 8);
              v29 = *(unsigned int *)(a2 + 20);
              v30 = 24 * v27;
              v31 = WTF::fastMalloc((WTF *)(24 * v27));
              *(_DWORD *)(a2 + 16) = (v30 & 0xFFFFFFF8) / 0x18;
              *(_QWORD *)(a2 + 8) = v31;
              if ((_DWORD)v29)
              {
                v32 = 24 * v29;
                v33 = v28;
                do
                {
                  v34 = *(_OWORD *)v33;
                  *(_QWORD *)(v31 + 16) = *((_QWORD *)v33 + 2);
                  *(_OWORD *)v31 = v34;
                  v31 += 24;
                  v33 = (WTF *)((char *)v33 + 24);
                  v32 -= 24;
                }
                while (v32);
              }
              if (v28)
              {
                if (*(WTF **)(a2 + 8) == v28)
                {
                  *(_QWORD *)(a2 + 8) = 0;
                  *(_DWORD *)(a2 + 16) = 0;
                }
                WTF::fastFree(v28, (void *)a2);
              }
            }
          }
          v10 = *(_DWORD *)(a2 + 20);
        }
        else
        {
          *(_DWORD *)(a2 + 20) = v10;
        }
        v35 = *(_QWORD *)(a3 + 8);
        v36 = *(_QWORD *)(a2 + 8);
        if (v10)
        {
          v37 = v10;
          v38 = (_BYTE *)(v36 + 16);
          v39 = 24 * v37;
          do
          {
            if (*v38 == *(_BYTE *)(v35 + 16))
            {
              if (*v38)
              {
                *((_QWORD *)v38 - 2) = *(_QWORD *)v35;
                *((_QWORD *)v38 - 1) = *(_QWORD *)(v35 + 8);
              }
            }
            else if (*v38)
            {
              *v38 = 0;
            }
            else
            {
              *((_OWORD *)v38 - 1) = *(_OWORD *)v35;
              *v38 = 1;
            }
            v35 += 24;
            v38 += 24;
            v39 -= 24;
          }
          while (v39);
          v35 = *(_QWORD *)(a3 + 8);
          v10 = *(_DWORD *)(a2 + 20);
          v36 = *(_QWORD *)(a2 + 8);
        }
        v40 = *(_DWORD *)(a3 + 20);
        if (v10 != v40)
        {
          v41 = v36 + 24 * v10;
          v42 = (__int128 *)(v35 + 24 * v10);
          v43 = 24 * v40 - 24 * v10;
          do
          {
            v44 = *v42;
            *(_QWORD *)(v41 + 16) = *((_QWORD *)v42 + 2);
            *(_OWORD *)v41 = v44;
            v41 += 24;
            v42 = (__int128 *)((char *)v42 + 24);
            v43 -= 24;
          }
          while (v43);
          v10 = *(_DWORD *)(a3 + 20);
        }
        *(_DWORD *)(a2 + 20) = v10;
        v45 = *(_DWORD *)(a2 + 36);
        v46 = *(_DWORD *)(a3 + 36);
        if (v45 > v46)
        {
          *(_DWORD *)(a2 + 36) = v46;
LABEL_72:
          v57 = *(char **)(a2 + 24);
          if (v46)
          {
            memmove(v57, *(const void **)(a3 + 24), 8 * v46);
            v58 = *(_DWORD *)(a2 + 36);
            v57 = *(char **)(a2 + 24);
          }
          else
          {
            v58 = 0;
          }
          v59 = *(unsigned int *)(a3 + 36);
          if (v58 != (_DWORD)v59)
          {
            v60 = &v57[8 * v58];
            v61 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 8 * v58);
            v62 = 8 * v59 - 8 * v58;
            do
            {
              v63 = *v61++;
              *(_QWORD *)v60 = v63;
              v60 += 8;
              v62 -= 8;
            }
            while (v62);
            v58 = *(_DWORD *)(a3 + 36);
          }
          *(_DWORD *)(a2 + 36) = v58;
          return;
        }
        v47 = *(_DWORD *)(a2 + 32);
        if (v46 <= v47)
          goto LABEL_71;
        if (v47)
        {
          if (v45)
            *(_DWORD *)(a2 + 36) = 0;
          v48 = *(WTF **)(a2 + 24);
          if (v48)
          {
            *(_QWORD *)(a2 + 24) = 0;
            *(_DWORD *)(a2 + 32) = 0;
            WTF::fastFree(v48, (void *)a2);
            v47 = *(_DWORD *)(a2 + 32);
          }
        }
        v49 = *(unsigned int *)(a3 + 36);
        if (v47 >= v49)
        {
LABEL_71:
          v46 = *(_DWORD *)(a2 + 36);
          goto LABEL_72;
        }
        if (!(v49 >> 29))
        {
          v50 = *(WTF **)(a2 + 24);
          v51 = *(unsigned int *)(a2 + 36);
          v52 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v49));
          *(_DWORD *)(a2 + 32) = v49;
          *(_QWORD *)(a2 + 24) = v52;
          if ((_DWORD)v51)
          {
            v54 = 8 * v51;
            v55 = v50;
            do
            {
              v56 = *(_QWORD *)v55;
              v55 = (WTF *)((char *)v55 + 8);
              *v52++ = v56;
              v54 -= 8;
            }
            while (v54);
          }
          if (v50)
          {
            if (*(WTF **)(a2 + 24) == v50)
            {
              *(_QWORD *)(a2 + 24) = 0;
              *(_DWORD *)(a2 + 32) = 0;
            }
            WTF::fastFree(v50, v53);
          }
          goto LABEL_71;
        }
        __break(0xC471u);
LABEL_85:
        JUMPOUT(0x194B522A4);
      }
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v64, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v11 = *(CFTypeRef *)a3;
  *(_QWORD *)v4 = *(_QWORD *)a3;
  if (v11)
    CFRetain(v11);
  v12 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      goto LABEL_85;
    }
    v13 = 24 * v12;
    v14 = WTF::fastMalloc((WTF *)(24 * v12));
    *(_DWORD *)(v4 + 16) = v13 / 0x18;
    *(_QWORD *)(v4 + 8) = v14;
    v15 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v15)
    {
      v16 = *(__int128 **)(a3 + 8);
      v17 = 24 * v15;
      do
      {
        v18 = *v16;
        *(_QWORD *)(v14 + 16) = *((_QWORD *)v16 + 2);
        *(_OWORD *)v14 = v18;
        v14 += 24;
        v16 = (__int128 *)((char *)v16 + 24);
        v17 -= 24;
      }
      while (v17);
    }
  }
  v19 = *(unsigned int *)(a3 + 36);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = v19;
  if ((_DWORD)v19)
  {
    if (v19 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194B522ACLL);
    }
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(v4 + 32) = v19;
    *(_QWORD *)(v4 + 24) = v20;
    v21 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v21)
    {
      v22 = *(uint64_t **)(a3 + 24);
      v23 = 8 * v21;
      do
      {
        v24 = *v22++;
        *v20++ = v24;
        v23 -= 8;
      }
      while (v23);
    }
  }
  *(_DWORD *)(v4 + 40) = 6;
}

void sub_194B522C0(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF **v3;
  WTF *v5;
  const void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(const void **)v2;
  *(_QWORD *)v2 = 0;
  if (v6)
    CFRelease(v6);
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 7)
    {
      v7 = *a3;
      if (*a3)
        CFRetain(*a3);
      v8 = *a2;
      *a2 = v7;
      if (v8)
        CFRelease(v8);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v9 = *a3;
  *(_QWORD *)v4 = *a3;
  if (v9)
    CFRetain(v9);
  *(_DWORD *)(v4 + 40) = 7;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 8)
    {
      v7 = *a3;
      if (*a3)
        CFRetain(*a3);
      v8 = *a2;
      *a2 = v7;
      if (v8)
        CFRelease(v8);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v9 = *a3;
  *(_QWORD *)v4 = *a3;
  if (v9)
    CFRetain(v9);
  *(_DWORD *)(v4 + 40) = 8;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, const void **a2, CFTypeRef *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 9)
    {
      v7 = *a3;
      if (*a3)
        CFRetain(*a3);
      v8 = *a2;
      *a2 = v7;
      if (v8)
        CFRelease(v8);
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v9 = *a3;
  *(_QWORD *)v4 = *a3;
  if (v9)
    CFRetain(v9);
  *(_DWORD *)(v4 + 40) = 9;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t result, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t *v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 10)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v20, v4);
LABEL_14:
    *(_DWORD *)(v4 + 40) = -1;
    v12 = *a3;
    *(_QWORD *)v4 = *a3;
    if ((v12 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    *(_DWORD *)(v4 + 40) = 10;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v20 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v19 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v18 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v20, (float *)&v19);
      a2 = v18;
      v6 = *v18;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v15 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v16 = __ldaxr((unsigned int *)result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)result));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v15;
    }
  }
  v9 = *a3;
  *a2 = *a3;
  if ((v9 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t result, unint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t *v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_14;
  if ((_DWORD)v5 != 11)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v20, v4);
LABEL_14:
    *(_DWORD *)(v4 + 40) = -1;
    v12 = *a3;
    *(_QWORD *)v4 = *a3;
    if ((v12 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
    *(_DWORD *)(v4 + 40) = 11;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v20 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v19 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v18 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v20, (float *)&v19);
      a2 = v18;
      v6 = *v18;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v15 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v16 = __ldaxr((unsigned int *)result);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)result));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v15;
    }
  }
  v9 = *a3;
  *a2 = *a3;
  if ((v9 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  const void *v24;
  unsigned int v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  WTF *v36;
  WTF *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  char v53;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 12)
    {
      v7 = *(_DWORD **)a3;
      if (*(_QWORD *)a3)
        *v7 += 2;
      v8 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(_DWORD **)(a3 + 8);
      if (v9)
        *v9 += 2;
      v10 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (a3 == a2)
        goto LABEL_84;
      v11 = *(unsigned int *)(a2 + 28);
      v12 = *(unsigned int *)(a3 + 28);
      if (v11 > v12)
      {
        v13 = (_DWORD **)(*(_QWORD *)(a2 + 16) + 16 * v12);
        v14 = 16 * v11 - 16 * v12;
        do
        {
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[2];
          }
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
        *(_DWORD *)(a2 + 28) = v12;
        goto LABEL_66;
      }
      v25 = *(_DWORD *)(a2 + 24);
      if (v12 <= v25)
        goto LABEL_65;
      if (v25)
      {
        if ((_DWORD)v11)
        {
          v26 = *(_DWORD ***)(a2 + 16);
          v27 = 16 * v11;
          do
          {
            v28 = *v26;
            *v26 = 0;
            if (v28)
            {
              if (v28[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
              else
                --v28[2];
            }
            v26 += 2;
            v27 -= 16;
          }
          while (v27);
          *(_DWORD *)(a2 + 28) = 0;
        }
        v29 = *(WTF **)(a2 + 16);
        if (v29)
        {
          *(_QWORD *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 24) = 0;
          WTF::fastFree(v29, (void *)a2);
        }
      }
      v30 = *(unsigned int *)(a3 + 28);
      if (*(_DWORD *)(a2 + 24) >= v30)
      {
LABEL_65:
        v12 = *(unsigned int *)(a2 + 28);
LABEL_66:
        v40 = *(uint64_t **)(a3 + 16);
        v41 = *(_QWORD *)(a2 + 16);
        if ((_DWORD)v12)
        {
          v42 = &v40[2 * v12];
          do
          {
            v43 = *v40;
            if (*v40)
              ++*(_DWORD *)(v43 + 8);
            v44 = *(_DWORD **)v41;
            *(_QWORD *)v41 = v43;
            if (v44)
            {
              if (v44[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
              else
                --v44[2];
            }
            *(_QWORD *)(v41 + 8) = v40[1];
            v40 += 2;
            v41 += 16;
          }
          while (v40 != v42);
          v40 = *(uint64_t **)(a3 + 16);
          v45 = *(_DWORD *)(a2 + 28);
          v41 = *(_QWORD *)(a2 + 16);
        }
        else
        {
          v45 = 0;
        }
        v46 = *(unsigned int *)(a3 + 28);
        if (v45 != (_DWORD)v46)
        {
          v47 = &v40[2 * v46];
          v48 = (_QWORD *)(v41 + 16 * v45);
          v49 = &v40[2 * v45];
          do
          {
            v50 = *v49;
            if (*v49)
              ++*(_DWORD *)(v50 + 8);
            *v48 = v50;
            v48[1] = v49[1];
            v49 += 2;
            v48 += 2;
          }
          while (v49 != v47);
          v45 = *(_DWORD *)(a3 + 28);
        }
        *(_DWORD *)(a2 + 28) = v45;
LABEL_84:
        v51 = *(const void **)(a3 + 32);
        if (v51)
          CFRetain(v51);
        v52 = *(const void **)(a2 + 32);
        *(_QWORD *)(a2 + 32) = v51;
        if (v52)
          CFRelease(v52);
        return;
      }
      if (!(v30 >> 28))
      {
        v31 = *(WTF **)(a2 + 16);
        v32 = *(unsigned int *)(a2 + 28);
        v33 = WTF::fastMalloc((WTF *)(16 * v30));
        *(_DWORD *)(a2 + 24) = v30;
        *(_QWORD *)(a2 + 16) = v33;
        if ((_DWORD)v32)
        {
          v35 = (_QWORD *)v33;
          v36 = (WTF *)((char *)v31 + 16 * v32);
          v37 = v31;
          do
          {
            v38 = *(_DWORD **)v37;
            *(_QWORD *)v37 = 0;
            *v35 = v38;
            v35[1] = *((_QWORD *)v37 + 1);
            v39 = *(_DWORD **)v37;
            *(_QWORD *)v37 = 0;
            if (v39)
            {
              if (v39[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
              else
                --v39[2];
            }
            v37 = (WTF *)((char *)v37 + 16);
            v35 += 2;
          }
          while (v37 != v36);
        }
        if (v31)
        {
          if (*(WTF **)(a2 + 16) == v31)
          {
            *(_QWORD *)(a2 + 16) = 0;
            *(_DWORD *)(a2 + 24) = 0;
          }
          WTF::fastFree(v31, v34);
        }
        goto LABEL_65;
      }
      __break(0xC471u);
LABEL_90:
      JUMPOUT(0x194B52C00);
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v53, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v16 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v16 += 2;
  *(_QWORD *)v4 = v16;
  v17 = *(_DWORD **)(a3 + 8);
  if (v17)
    *v17 += 2;
  v18 = *(unsigned int *)(a3 + 28);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = v17;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 28) = v18;
  if ((_DWORD)v18)
  {
    if (v18 >> 28)
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v18));
    *(_DWORD *)(v4 + 24) = v18;
    *(_QWORD *)(v4 + 16) = v19;
    v20 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v20)
    {
      v21 = *(uint64_t **)(a3 + 16);
      v22 = &v21[2 * v20];
      do
      {
        v23 = *v21;
        if (*v21)
          ++*(_DWORD *)(v23 + 8);
        *v19 = v23;
        v19[1] = v21[1];
        v21 += 2;
        v19 += 2;
      }
      while (v21 != v22);
    }
  }
  v24 = *(const void **)(a3 + 32);
  *(_QWORD *)(v4 + 32) = v24;
  if (v24)
    CFRetain(v24);
  *(_DWORD *)(v4 + 40) = 12;
}

void sub_194B52C0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v4 = v2[1];
  v2[1] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t *a1, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 13)
    {
      v7 = *a3;
      if (*a3)
        *(_DWORD *)v7 += 2;
      v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = a3[1];
      if (v9)
        CFRetain(a3[1]);
      v10 = a2[1];
      a2[1] = v9;
      if (v10)
        CFRelease(v10);
      v11 = a3[2];
      if (v11)
        *(_DWORD *)v11 += 2;
      result = a2[2];
      a2[2] = v11;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 40) = -1;
  v13 = *a3;
  if (*a3)
    *(_DWORD *)v13 += 2;
  result = a3[1];
  *(_QWORD *)v4 = v13;
  *(_QWORD *)(v4 + 8) = result;
  if (result)
    result = (WTF::StringImpl *)CFRetain(result);
  v14 = a3[2];
  if (v14)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)(v4 + 16) = v14;
  *(_DWORD *)(v4 + 40) = 13;
  return result;
}

void sub_194B52E14(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS1A_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEERKS1I_EEEDcS1A_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 14)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 14;
  return result;
}

unsigned int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int **v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = (unsigned int **)(*(_QWORD *)result + 8 * (_QWORD)a2);
    v6 = 8 * v4 - 8 * (_QWORD)a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *(WTF::StringImpl **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          v8 = *(unsigned int *)(v6 + 48);
          if ((_DWORD)v8 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v8])(&v11, v6 + 8);
            v7 = *(WTF::StringImpl **)v6;
          }
          *(_DWORD *)(v6 + 48) = -1;
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v3);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 56;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(double *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *a1);
  *a2 = result;
  return result;
}

const __CFString *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(_QWORD *a1@<X1>, const __CFString **a2@<X8>)
{
  const __CFString *result;

  if (*a1)
  {
    result = (const __CFString *)WTF::StringImpl::operator NSString *();
    *a2 = result;
    if (!result)
      return result;
  }
  else
  {
    result = &stru_1E3487BC0;
    *a2 = &stru_1E3487BC0;
  }
  return (const __CFString *)CFRetain(result);
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(_QWORD *a1@<X8>)
{
  CFTypeRef result;

  result = (CFTypeRef)WTF::URL::operator NSURL *();
  *a1 = result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(*(_QWORD *)a1 + 88);
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const __CFString *v9;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v5 = (void *)result;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 8 * v6;
    while (*v7)
    {
      result = WTF::StringImpl::operator NSString *();
      v9 = (const __CFString *)result;
      if (result)
        goto LABEL_5;
LABEL_6:
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_9;
    }
    v9 = &stru_1E3487BC0;
LABEL_5:
    result = objc_msgSend(v5, "addObject:", v9);
    goto LABEL_6;
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void sub_194B53160(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  const void *v8;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", *(unsigned int *)(a1 + 12));
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(double **)a1;
    v7 = 8 * v5;
    do
    {
      v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithDouble:", *v6);
      if (v8)
      {
        objc_msgSend(v4, "addObject:", v8);
        CFRelease(v8);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  *a2 = v4;
}

void sub_194B5321C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(uint64_t ***a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WebCore *v11;
  char isKindOfClass;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  void *v36;
  WebCore *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  int v64;
  char v65;
  void *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  void *v98;
  unsigned int v99;
  uint64_t *v100;
  void *v101;
  void *v102;
  uint64_t *v103;

  v5 = (*a1)[1];
  v100 = **a1;
  v6 = (*a1)[2];
  v7 = *(void **)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  v102 = (void *)objc_msgSend(v7, "textBlocks");
  v97 = a3;
  v101 = (void *)objc_msgSend(v7, "textLists");
  v8 = *(unsigned int *)(a2 + 20);
  if (objc_msgSend(v102, "count") != v8)
    goto LABEL_145;
  v9 = *(unsigned int *)(a2 + 36);
  if (objc_msgSend(v101, "count") != v9)
    goto LABEL_145;
  if (*(_DWORD *)(a2 + 20))
  {
    v103 = v5;
    v10 = 0;
    v98 = 0;
    while (1)
    {
      v11 = (WebCore *)objc_msgSend(v102, "objectAtIndexedSubscript:", v10);
      WebCore::getNSTextTableBlockClass(v11);
      isKindOfClass = objc_opt_isKindOfClass();
      v13 = *(unsigned int *)(a2 + 20);
      if ((isKindOfClass & 1) == 0)
        goto LABEL_88;
      if (v10 >= v13)
      {
LABEL_155:
        __break(0xC471u);
        JUMPOUT(0x194B53A98);
      }
      v14 = *(_QWORD *)(a2 + 8) + 24 * v10;
      if (!*(_BYTE *)(v14 + 16))
        goto LABEL_88;
      v16 = *(_QWORD *)v14;
      v15 = *(_QWORD *)(v14 + 8);
      v17 = *v103;
      if (*v103
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v103, 8u, 0), (v17 = *v103) != 0))
      {
        v18 = *(_DWORD *)(v17 - 8);
      }
      else
      {
        v18 = 0;
      }
      v19 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
      v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      v99 = (v21 >> 31) ^ v21;
      v22 = v18 & v99;
      v23 = (_QWORD *)(v17 + 16 * (v18 & v99));
      v24 = *v23;
      if (*v23)
      {
        v25 = 0;
        v26 = 1;
        do
        {
          if (v24 == v16)
          {
            v29 = 0;
            v30 = 1;
            goto LABEL_36;
          }
          if (v24 == -1)
            v25 = v23;
          v22 = (v22 + v26) & v18;
          v23 = (_QWORD *)(v17 + 16 * v22);
          v24 = *v23;
          ++v26;
        }
        while (*v23);
        if (v25)
        {
          *v25 = 0;
          v25[1] = 0;
          --*(_DWORD *)(*v103 - 16);
          v23 = v25;
        }
      }
      *v23 = v16;
      v23[1] = v11;
      v27 = *v103;
      v28 = *v103 ? *(_DWORD *)(v27 - 12) + 1 : 1;
      *(_DWORD *)(v27 - 12) = v28;
      v31 = *v103;
      v32 = *v103 ? *(_DWORD *)(v31 - 12) : 0;
      v33 = (*(_DWORD *)(v31 - 16) + v32);
      v34 = *(unsigned int *)(v31 - 4);
      if (v34 > 0x400)
        break;
      if (3 * v34 <= 4 * v33)
      {
        if ((_DWORD)v34)
          goto LABEL_31;
        v35 = 8;
        goto LABEL_34;
      }
LABEL_35:
      v30 = 0;
      v29 = 1;
LABEL_36:
      v36 = (void *)v23[1];
      v37 = (WebCore *)objc_msgSend(v36, "table");
      if (!v37)
        goto LABEL_87;
      v38 = *v100;
      if (*v100
        || (v37 = (WebCore *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v100, 8u), (v38 = *v100) != 0))
      {
        v39 = *(_DWORD *)(v38 - 8);
      }
      else
      {
        v39 = 0;
      }
      v40 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = v39 & ((v42 >> 31) ^ v42);
      v44 = (_QWORD *)(v38 + 16 * v43);
      v45 = *v44;
      if (!*v44)
      {
LABEL_48:
        *v44 = v15;
        v44[1] = objc_msgSend(v36, "table");
        v48 = *v100;
        if (*v100)
          v49 = *(_DWORD *)(v48 - 12) + 1;
        else
          v49 = 1;
        *(_DWORD *)(v48 - 12) = v49;
        v50 = *v100;
        if (*v100)
          v51 = *(_DWORD *)(v50 - 12);
        else
          v51 = 0;
        v52 = (*(_DWORD *)(v50 - 16) + v51);
        v53 = *(unsigned int *)(v50 - 4);
        if (v53 > 0x400)
        {
          if (v53 <= 2 * v52)
          {
LABEL_60:
            v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
            goto LABEL_78;
          }
        }
        else if (3 * v53 <= 4 * v52)
        {
          if ((_DWORD)v53)
            goto LABEL_60;
          v54 = 8;
LABEL_78:
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v100, v54);
        }
        if (v36)
          v65 = v29;
        else
          v65 = 1;
        if ((v65 & 1) == 0)
        {
LABEL_83:
          CFRetain(v36);
          v55 = v36;
LABEL_84:
          v66 = v98;
          if (!v98)
            v66 = (void *)objc_msgSend((id)objc_msgSend(v7, "textBlocks"), "mutableCopy");
          v98 = v66;
          objc_msgSend(v66, "setObject:atIndexedSubscript:", v55, v10);
          CFRelease(v55);
        }
        goto LABEL_87;
      }
      v46 = 0;
      v47 = 1;
      while (v45 != v15)
      {
        if (v45 == -1)
          v46 = v44;
        v43 = (v43 + v47) & v39;
        v44 = (_QWORD *)(v38 + 16 * v43);
        v45 = *v44;
        ++v47;
        if (!*v44)
        {
          if (v46)
          {
            *v46 = 0;
            v46[1] = 0;
            --*(_DWORD *)(*v100 - 16);
            v44 = v46;
          }
          goto LABEL_48;
        }
      }
      if ((v30 & 1) == 0)
      {
        v55 = (void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextTableBlockClass(v37)), "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:", v44[1], objc_msgSend(v36, "startingRow"), objc_msgSend(v36, "rowSpan"), objc_msgSend(v36, "startingColumn"), objc_msgSend(v36, "columnSpan"));
        objc_msgSend(v55, "_takeValuesFromTextBlock:", v36);
        v56 = *v103;
        if (*v103
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v103, 8u, 0), (v56 = *v103) != 0))
        {
          v57 = *(_DWORD *)(v56 - 8);
        }
        else
        {
          v57 = 0;
        }
        v58 = v57 & v99;
        v59 = (_QWORD *)(v56 + 16 * (v57 & v99));
        v60 = *v59;
        if (*v59)
        {
          v61 = 0;
          v62 = 1;
          do
          {
            if (v60 == v16)
            {
              v59[1] = v55;
              goto LABEL_104;
            }
            if (v60 == -1)
              v61 = v59;
            v58 = (v58 + v62) & v57;
            v59 = (_QWORD *)(v56 + 16 * v58);
            v60 = *v59;
            ++v62;
          }
          while (*v59);
          if (v61)
          {
            *v61 = 0;
            v61[1] = 0;
            --*(_DWORD *)(*v103 - 16);
            v59 = v61;
          }
        }
        *v59 = v16;
        v59[1] = v55;
        v63 = *v103;
        if (*v103)
          v64 = *(_DWORD *)(v63 - 12) + 1;
        else
          v64 = 1;
        *(_DWORD *)(v63 - 12) = v64;
        v67 = *v103;
        if (*v103)
          v68 = *(_DWORD *)(v67 - 12);
        else
          v68 = 0;
        v69 = (*(_DWORD *)(v67 - 16) + v68);
        v70 = *(unsigned int *)(v67 - 4);
        if (v70 > 0x400)
        {
          if (v70 <= 2 * v69)
          {
LABEL_100:
            v71 = (_DWORD)v70 << (6 * *(_DWORD *)(v67 - 12) >= (2 * v70));
            goto LABEL_103;
          }
        }
        else if (3 * v70 <= 4 * v69)
        {
          if ((_DWORD)v70)
            goto LABEL_100;
          v71 = 8;
LABEL_103:
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v103, v71, v59);
        }
LABEL_104:
        if (v55)
          goto LABEL_84;
        goto LABEL_87;
      }
      if (v36)
        goto LABEL_83;
LABEL_87:
      v13 = *(unsigned int *)(a2 + 20);
LABEL_88:
      if (++v10 >= v13)
        goto LABEL_109;
    }
    if (v34 > 2 * v33)
      goto LABEL_35;
LABEL_31:
    v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
LABEL_34:
    v23 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v103, v35, v23);
    goto LABEL_35;
  }
  v98 = 0;
LABEL_109:
  if (*(_DWORD *)(a2 + 36))
  {
    v72 = 0;
    v73 = 0;
    v74 = (unint64_t)v98;
    while (1)
    {
      v75 = objc_msgSend(v101, "objectAtIndexedSubscript:", v72);
      if (v72 >= *(unsigned int *)(a2 + 36))
        goto LABEL_155;
      v76 = v75;
      v77 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v72);
      v78 = *v6;
      if (*v6
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, 8u), (v78 = *v6) != 0))
      {
        v79 = *(_DWORD *)(v78 - 8);
      }
      else
      {
        v79 = 0;
      }
      v80 = (v77 + ~(v77 << 32)) ^ ((unint64_t)(v77 + ~(v77 << 32)) >> 22);
      v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
      v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
      v83 = v79 & ((v82 >> 31) ^ v82);
      v84 = (_QWORD *)(v78 + 16 * v83);
      v85 = *v84;
      if (*v84)
      {
        v86 = 0;
        v87 = 1;
        while (v85 != v77)
        {
          if (v85 == -1)
            v86 = v84;
          v83 = (v83 + v87) & v79;
          v84 = (_QWORD *)(v78 + 16 * v83);
          v85 = *v84;
          ++v87;
          if (!*v84)
          {
            if (v86)
            {
              *v86 = 0;
              v86[1] = 0;
              --*(_DWORD *)(*v6 - 16);
              v84 = v86;
            }
            goto LABEL_123;
          }
        }
        if (!v73)
          v73 = objc_msgSend((id)objc_msgSend(v7, "textLists"), "mutableCopy");
        objc_msgSend((id)v73, "setObject:atIndexedSubscript:", v84[1], v72);
        goto LABEL_139;
      }
LABEL_123:
      *v84 = v77;
      v84[1] = v76;
      v88 = *v6;
      v89 = *v6 ? *(_DWORD *)(v88 - 12) + 1 : 1;
      *(_DWORD *)(v88 - 12) = v89;
      v90 = *v6;
      v91 = *v6 ? *(_DWORD *)(v90 - 12) : 0;
      v92 = (*(_DWORD *)(v90 - 16) + v91);
      v93 = *(unsigned int *)(v90 - 4);
      if (v93 > 0x400)
        break;
      if (3 * v93 <= 4 * v92)
      {
        if ((_DWORD)v93)
          goto LABEL_135;
        v94 = 8;
        goto LABEL_138;
      }
LABEL_139:
      if (++v72 >= *(unsigned int *)(a2 + 36))
        goto LABEL_144;
    }
    if (v93 > 2 * v92)
      goto LABEL_139;
LABEL_135:
    v94 = (_DWORD)v93 << (6 * *(_DWORD *)(v90 - 12) >= (2 * v93));
LABEL_138:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v94);
    goto LABEL_139;
  }
  v73 = 0;
  v74 = (unint64_t)v98;
LABEL_144:
  if (v74 | v73)
  {
    v96 = (void *)objc_msgSend(v7, "mutableCopy");
    v95 = v96;
    if (v74)
      objc_msgSend(v96, "setTextBlocks:", v74);
    if (v73)
    {
      objc_msgSend(v95, "setTextLists:", v73);
      CFRelease((CFTypeRef)v73);
    }
    if (v74)
      CFRelease((CFTypeRef)v74);
    if (v7)
      CFRelease(v7);
  }
  else
  {
LABEL_145:
    v95 = v7;
  }
  *v97 = v95;
}

void sub_194B53AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11)
{
  const void *v11;

  if (v11)
  {
    CFRelease(v11);
    if (!a11)
    {
LABEL_3:
      if (!a10)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!a11)
  {
    goto LABEL_3;
  }
  CFRelease(a11);
  if (!a10)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  CFRelease(a10);
  goto LABEL_5;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X8>)
{
  CFTypeRef result;

  result = *a1;
  *a2 = *a1;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X8>)
{
  CFTypeRef result;

  result = *a1;
  *a2 = *a1;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(CFTypeRef *a1@<X1>, CFTypeRef *a2@<X8>)
{
  CFTypeRef result;

  result = *a1;
  *a2 = *a1;
  if (result)
    return CFRetain(result);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(WebCore *this@<X1>, CFTypeRef *a2@<X8>)
{
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  WebCore::cachedCGColor(this, this, &cf);
  v3 = cf;
  *a2 = cf;
  if (v3)
  {
    CFRetain(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
}

void sub_194B53C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(WebCore *this@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  WebCore::cocoaColor(this, &v3);
  *a2 = v3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  const void *v4;
  WebCore *v5;
  uint64_t v6;
  __CFString *v7;
  uint64_t v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  float *v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  void *v28;
  WebCore *v29;
  const __CFString *v30;
  const __CFString *v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  char **v35;
  char *v36;

  v4 = *(const void **)(a1 + 32);
  if (!v4
    || (v5 = (WebCore *)CFRetain(*(CFTypeRef *)(a1 + 32)),
        v6 = objc_msgSend(objc_alloc((Class)WebCore::getNSAdaptiveImageGlyphClass(v5)), "initWithImageContent:", v4),
        CFRelease(v4),
        !v6))
  {
    if (*(_QWORD *)a1)
      v31 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v31 = &stru_1E3487BC0;
    v32 = a2;
    if (*(_QWORD *)(a1 + 8))
      v7 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v7 = &stru_1E3487BC0;
    v8 = -[__CFString length](v7, "length");
    v9 = CFSTR("Apple Emoji");
    if (v8)
      v9 = v7;
    v30 = v9;
    v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", *(unsigned int *)(a1 + 28));
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = *(float **)(a1 + 16);
      v13 = (uint64_t *)&v12[4 * v11];
      do
      {
        v14 = objc_alloc(MEMORY[0x1E0CA80E8]);
        v15 = *(_QWORD *)v12;
        v16 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v16 != -1)
        {
          v36 = &v34;
          v35 = &v36;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v35, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v15 + 288))(&v33, v15, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        v18 = (const void *)objc_msgSend(v14, "initWithImage:alignmentInset:", *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v33 + 48) + 16))(*(_QWORD *)(v33 + 48)), v12[2], v12[3]);
        v19 = v33;
        v33 = 0;
        if (!v19)
          goto LABEL_30;
        v20 = *(_QWORD *)(v19 + 8);
        if (__ldaxr((unsigned __int8 *)v20))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v20))
        {
          goto LABEL_18;
        }
        MEMORY[0x19AEA534C](v20);
LABEL_18:
        v22 = *(_QWORD *)(v20 + 8);
        v23 = v22 - 1;
        *(_QWORD *)(v20 + 8) = v22 - 1;
        if (v22 == 1)
        {
          v27 = *(_QWORD *)(v20 + 16);
          v24 = *(_QWORD *)(v20 + 24);
          *(_QWORD *)(v20 + 24) = 0;
          v25 = v27 != 0;
        }
        else
        {
          v24 = 0;
          v25 = 1;
        }
        v26 = __ldxr((unsigned __int8 *)v20);
        if (v26 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
          {
            if (!v23)
              goto LABEL_26;
            goto LABEL_30;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        if (!v23)
        {
LABEL_26:
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          if (!v25)
            WTF::fastFree((WTF *)v20, v17);
        }
LABEL_30:
        objc_msgSend(v10, "addObject:", v18);
        if (v18)
          CFRelease(v18);
        v12 += 4;
      }
      while (v12 != (float *)v13);
    }
    if (objc_msgSend(v10, "count"))
    {
      v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA80E0]), "initWithContentIdentifier:shortDescription:strikeImages:", v31, v30, v10);
      v29 = (WebCore *)objc_msgSend(v28, "imageData");
      a2 = v32;
      if (v29)
      {
        v6 = objc_msgSend(objc_alloc((Class)WebCore::getNSAdaptiveImageGlyphClass(v29)), "initWithImageContent:", objc_msgSend(v28, "imageData"));
        if (!v28)
          goto LABEL_42;
        goto LABEL_41;
      }
      v6 = 0;
      if (v28)
LABEL_41:
        CFRelease(v28);
    }
    else
    {
      v6 = 0;
      a2 = v32;
    }
  }
LABEL_42:
  *a2 = v6;
}

void sub_194B53F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  const void *v13;

  if (v13)
    CFRelease(v13);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  WebCore *v6;
  NSString *v7;
  void *v8;

  v4 = *(const void **)(a1 + 8);
  if (v4)
    CFRetain(*(CFTypeRef *)(a1 + 8));
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3650]), "initRegularFileWithContents:", v4);
  v6 = *(WebCore **)a1;
  if (*(_QWORD *)a1)
  {
    v7 = (NSString *)WTF::StringImpl::operator NSString *();
    v6 = (WebCore *)objc_msgSend(v5, "setPreferredFilename:", filenameByFixingIllegalCharacters(v7));
  }
  v8 = (void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextAttachmentClass(v6)), "initWithFileWrapper:", v5);
  *a2 = v8;
  if (*(_QWORD *)(a1 + 16))
    objc_msgSend(v8, "setAccessibilityLabel:", WTF::StringImpl::operator NSString *());
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
}

void sub_194B5410C(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;
  _QWORD *v3;
  const void *v4;

  *v3 = 0;
  if (v4)
  {
    CFRelease(v4);
    if (!v2)
    {
LABEL_3:
      if (!v1)
        goto LABEL_4;
LABEL_7:
      CFRelease(v1);
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  CFRelease(v2);
  if (!v1)
    goto LABEL_4;
  goto LABEL_7;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_0,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_1,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_2,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_3,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_4,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_5,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_6,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_7,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_8,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_9,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_10,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_11,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_12,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_13,WebCore::toNSObject(WebCore::AttributedString::AttributeValue const&,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits> &,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextList *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextList *>,WTF::HashTableTraits> &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,double,WTF::String,WTF::URL,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>><double,0ul,WTF::Vector,16ul,WTF::CrashOnOverflow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs,WTF::RetainPtr<NSPresentationIntent>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSShadow>,WebCore::AttributedString::ParagraphStyleWithTableAndListIDs<NSDate>,WebCore::AttributedString::ColorFromCGColor,WebCore::AttributedString::ColorFromPlatformColor,WebCore::MultiRepresentationHEICAttachmentData,WebCore::TextAttachmentFileWrapper,WebCore::TextAttachmentMissingImage> const&>@<X0>(WebCore *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t result;

  v3 = (void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextAttachmentClass(a1)), "initWithData:ofType:", 0, 0);
  result = objc_msgSend(v3, "setImage:", webCoreTextAttachmentMissingPlatformImage());
  *a2 = v3;
  return result;
}

void sub_194B541B4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_OWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTableBlock *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTableBlock *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (*v13 + ~(*v13 << 32)) ^ ((*v13 + ~(*v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,NSTextTable *,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<NSTextTable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v10 + 1) >= 2)
      {
        v11 = *a1;
        if (*a1)
          v12 = *(_DWORD *)(v11 - 8);
        else
          v12 = 0;
        v13 = (*v10 + ~(*v10 << 32)) ^ ((*v10 + ~(*v10 << 32)) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((unint64_t)(v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = 1;
        do
        {
          v18 = v16;
          v19 = *(_QWORD *)(v11 + 16 * v16);
          v16 = (v16 + v17++) & v12;
        }
        while (v19);
        *(_OWORD *)(v11 + 16 * v18) = *(_OWORD *)v10;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

void ___ZN7WebCoreL17extractDictionaryEP12NSDictionaryRN3WTF7HashMapIP11NSTextTableNS2_23ObjectIdentifierGenericINS_31AttributedStringTextTableIDTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS2_11DefaultHashIS5_EENS2_10HashTraitsIS5_EENSD_ISA_EENS2_15HashTableTraitsEEERNS3_IP16NSTextTableBlockNS6_INS_36AttributedStringTextTableBlockIDTypeES9_yEENSB_ISK_EENSD_ISK_EENSD_ISM_EESG_EERNS3_IP10NSTextListNS6_INS_30AttributedStringTextListIDTypeES9_yEENSB_IST_EENSD_IST_EENSD_ISV_EESG_EE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t *v6;
  CFTypeID v7;
  int v8;
  char v9;
  char isKindOfClass;
  uint64_t v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  int j;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void *v53;
  NSObject *v54;
  objc_class *v55;
  NSString *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  NSObject *v70;
  objc_class *v71;
  NSString *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  unsigned int v77;
  WTF *v78;
  unsigned int v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  CGImage *v88;
  CGImage *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  void *v95;
  double v96;
  double v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  const void *v119;
  CFTypeRef v120;
  uint64_t IdentifierInternal;
  void *v122;
  unsigned int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int v132;
  _QWORD *v133;
  void *v134;
  _QWORD *v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  _OWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  void *v207;
  unint64_t v208;
  int v209;
  WTF *v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unsigned int v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  uint64_t v247;
  _OWORD *v248;
  uint64_t v249;
  int v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  double v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  NSObject *v262;
  _DWORD *v263;
  WTF::StringImpl *v264;
  _DWORD *v265;
  uint64_t v266;
  const void *v267;
  const void *v268;
  char v269;
  char v270;
  int v271;
  objc_class *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  id v277;
  uint64_t v278;
  uint64_t v279;
  id obj;
  id obja;
  id objb;
  uint64_t *v283;
  void *v284;
  uint64_t *__src;
  char *__srca;
  uint64_t __srcb;
  _BYTE v288[40];
  int v289;
  char v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  CFTypeRef cf[2];
  __int128 v298;
  _BYTE v299[12];
  WTF::StringImpl *v300[2];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 buf;
  uint64_t v305[3];
  __int128 v306;
  uint64_t v307;

  v307 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return;
  v283 = *(uint64_t **)(a1 + 32);
  v6 = *(uint64_t **)(a1 + 48);
  __src = *(uint64_t **)(a1 + 40);
  v7 = CFGetTypeID(a3);
  if (v7 == CGColorGetTypeID())
  {
    WebCore::Color::createAndPreserveColorSpace((uint64_t)a3, 0, v305);
    *(_QWORD *)v288 = v305[0];
    v8 = 10;
    goto LABEL_4;
  }
  v276 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (a3 && (isKindOfClass & 1) != 0)
  {
    objc_msgSend(a3, "doubleValue");
    *(_QWORD *)v288 = v11;
    v289 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  v19 = objc_opt_isKindOfClass();
  if (a3 && (v19 & 1) != 0)
  {
    MEMORY[0x19AEA5508](v305, a3);
    *(_QWORD *)v288 = v305[0];
    v9 = 1;
    v289 = 1;
    goto LABEL_5;
  }
  objc_opt_class();
  v33 = objc_opt_isKindOfClass();
  if (a3 && (v33 & 1) != 0)
  {
    MEMORY[0x19AEA52E0](v305, a3);
    *(_QWORD *)v288 = v305[0];
    *(_OWORD *)&v288[8] = *(_OWORD *)&v305[1];
    *(_OWORD *)&v288[24] = v306;
    v8 = 2;
    goto LABEL_4;
  }
  objc_opt_class();
  v41 = objc_opt_isKindOfClass();
  if (a3 && (v41 & 1) != 0)
  {
    v273 = a1;
    v42 = objc_msgSend(a3, "count");
    if (v42)
    {
      v43 = v42;
      objc_msgSend(a3, "objectAtIndexedSubscript:", 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (v43 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194B56100);
        }
        v295 = 0u;
        v296 = 0u;
        *(_OWORD *)cf = 0u;
        v298 = 0u;
        __srca = (char *)WTF::fastMalloc((WTF *)(8 * v43));
        v44 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v295, v305, 16);
        if (v44)
        {
          obj = a3;
          v45 = 0;
          v46 = *(_QWORD *)v296;
          do
          {
            v47 = 0;
            do
            {
              if (*(_QWORD *)v296 != v46)
                objc_enumerationMutation(obj);
              v48 = *(_QWORD *)(*((_QWORD *)&v295 + 1) + 8 * v47);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                if (v45 == (_DWORD)v43)
                {
                  v49 = ((unint64_t)v43 >> 2) + v43;
                  if (v49 >= 0x10)
                    v50 = v49 + 1;
                  else
                    v50 = 16;
                  if (v50 <= (unint64_t)v45 + 1)
                    v51 = v45 + 1;
                  else
                    v51 = v50;
                  if (v51 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194B560F8);
                  }
                  v52 = (char *)WTF::fastMalloc((WTF *)(8 * v51));
                  memcpy(v52, __srca, 8 * v45);
                  if (__srca)
                  {
                    if (v52 == __srca)
                    {
                      v52 = 0;
                      LODWORD(v51) = 0;
                    }
                    WTF::fastFree((WTF *)__srca, v53);
                  }
                  __srca = v52;
                  MEMORY[0x19AEA5508](&v52[8 * v45], v48);
                  v45 = v43 + 1;
                  LODWORD(v43) = v51;
                }
                else
                {
                  MEMORY[0x19AEA5508](&__srca[8 * v45++], v48);
                }
              }
              else
              {
                v54 = qword_1ECE7C0B8;
                if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_ERROR))
                {
                  v55 = (objc_class *)objc_opt_class();
                  v56 = NSStringFromClass(v55);
                  LODWORD(buf) = 138412290;
                  *(_QWORD *)((char *)&buf + 4) = v56;
                  _os_log_error_impl(&dword_1940B8000, v54, OS_LOG_TYPE_ERROR, "NSAttributedString extraction failed with array containing <%@>", (uint8_t *)&buf, 0xCu);
                }
              }
              ++v47;
            }
            while (v44 != v47);
            v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v295, v305, 16);
            v44 = v57;
          }
          while (v57);
        }
        else
        {
          v45 = 0;
        }
        *(_QWORD *)v288 = __srca;
        *(_DWORD *)&v288[8] = v43;
        *(_DWORD *)&v288[12] = v45;
        v82 = 4;
LABEL_199:
        v289 = v82;
        v290 = 1;
        a2 = v276;
        a1 = v273;
        goto LABEL_11;
      }
      objc_msgSend(a3, "objectAtIndexedSubscript:", 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        buf = 0uLL;
        if (v43 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x194B56108);
        }
        v62 = WTF::fastMalloc((WTF *)(8 * v43));
        DWORD2(buf) = v43;
        *(_QWORD *)&buf = v62;
        v291 = 0u;
        v292 = 0u;
        v293 = 0u;
        v294 = 0u;
        v63 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v291, v300, 16);
        if (v63)
        {
          v64 = *(_QWORD *)v292;
          do
          {
            for (i = 0; i != v63; ++i)
            {
              if (*(_QWORD *)v292 != v64)
                objc_enumerationMutation(a3);
              v66 = *(void **)(*((_QWORD *)&v291 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend(v66, "doubleValue");
                *(_QWORD *)v299 = v67;
                v68 = HIDWORD(buf);
                if (HIDWORD(buf) == DWORD2(buf))
                {
                  v69 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&buf, HIDWORD(buf) + 1, (unint64_t)v299);
                  v68 = HIDWORD(buf);
                  *(_QWORD *)(buf + 8 * HIDWORD(buf)) = *v69;
                }
                else
                {
                  *(_QWORD *)(buf + 8 * HIDWORD(buf)) = v67;
                }
                HIDWORD(buf) = v68 + 1;
              }
              else
              {
                v70 = qword_1ECE7C0B8;
                if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_ERROR))
                {
                  v71 = (objc_class *)objc_opt_class();
                  v72 = NSStringFromClass(v71);
                  *(_DWORD *)v299 = 138412290;
                  *(_QWORD *)&v299[4] = v72;
                  _os_log_error_impl(&dword_1940B8000, v70, OS_LOG_TYPE_ERROR, "NSAttributedString extraction failed with array containing <%@>", v299, 0xCu);
                }
              }
            }
            v63 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v291, v300, 16);
          }
          while (v63);
          v73 = *((_QWORD *)&buf + 1);
          v62 = buf;
        }
        else
        {
          v73 = v43;
        }
        *(_QWORD *)v288 = v62;
        *(_QWORD *)&v288[8] = v73;
        v82 = 5;
        goto LABEL_199;
      }
      v80 = qword_1ECE7C0B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_1940B8000, v80, OS_LOG_TYPE_ERROR, "NSAttributedString extraction failed with array of unknown values", (uint8_t *)&buf, 2u);
      }
      v9 = 0;
      v288[0] = 0;
    }
    else
    {
      *(_OWORD *)v288 = 0uLL;
      v289 = 4;
      v9 = 1;
    }
    a1 = v273;
    goto LABEL_5;
  }
  objc_opt_class();
  v59 = objc_opt_isKindOfClass();
  if (a3 && (v59 & 1) != 0)
  {
    CFRetain(a3);
    *(_QWORD *)v288 = a3;
    v60 = 9;
    goto LABEL_103;
  }
  PAL::getNSShadowClass[0]((PAL *)v59);
  v61 = objc_opt_isKindOfClass();
  if ((v61 & 1) != 0)
  {
    if (a3)
      CFRetain(a3);
    *(_QWORD *)v288 = a3;
    v8 = 8;
    goto LABEL_4;
  }
  PAL::getNSParagraphStyleClass[0]((PAL *)v61);
  v74 = objc_opt_isKindOfClass();
  if ((v74 & 1) != 0)
  {
    *(_QWORD *)&v295 = a3;
    if (a3)
      CFRetain(a3);
    obja = a3;
    v75 = (void *)objc_msgSend(a3, "textBlocks");
    *((_QWORD *)&v295 + 1) = 0;
    *(_QWORD *)&v296 = 0;
    v76 = objc_msgSend(v75, "count");
    if (v76)
    {
      if (v76 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x194B56110);
      }
      v77 = 24 * v76;
      v78 = (WTF *)WTF::fastMalloc((WTF *)(24 * v76));
      v79 = v77 / 0x18;
      LODWORD(v296) = v77 / 0x18;
      *((_QWORD *)&v295 + 1) = v78;
    }
    else
    {
      v78 = 0;
      v79 = 0;
    }
    v302 = 0u;
    v303 = 0u;
    *(_OWORD *)v300 = 0u;
    v301 = 0u;
    IdentifierInternal = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
    v279 = IdentifierInternal;
    v275 = a1;
    if (!IdentifierInternal)
    {
      v199 = (uint64_t)v78;
      if (v79)
        goto LABEL_307;
      goto LABEL_311;
    }
    v277 = v75;
    v123 = 0;
    v278 = *(_QWORD *)v301;
    while (1)
    {
      v124 = 0;
      do
      {
        if (*(_QWORD *)v301 != v278)
          objc_enumerationMutation(v277);
        v125 = (void *)*((_QWORD *)v300[1] + v124);
        WebCore::getNSTextTableBlockClass((WebCore *)IdentifierInternal);
        IdentifierInternal = objc_opt_isKindOfClass();
        if ((IdentifierInternal & 1) != 0)
        {
          IdentifierInternal = objc_msgSend(v125, "table");
          if (IdentifierInternal)
          {
            v126 = *__src;
            if (*__src
              || (v127 = WTF::fastZeroedMalloc((WTF *)0x90),
                  *__src = v127 + 16,
                  *(_DWORD *)(v127 + 12) = 8,
                  *(_DWORD *)(*__src - 8) = 7,
                  *(_DWORD *)(*__src - 16) = 0,
                  *(_DWORD *)(*__src - 12) = 0,
                  (v126 = *__src) != 0))
            {
              v128 = *(_DWORD *)(v126 - 8);
            }
            else
            {
              v128 = 0;
            }
            v129 = ((unint64_t)v125 + ~((_QWORD)v125 << 32)) ^ (((unint64_t)v125 + ~((_QWORD)v125 << 32)) >> 22);
            v130 = 9 * ((v129 + ~(v129 << 13)) ^ ((v129 + ~(v129 << 13)) >> 8));
            v131 = (v130 ^ (v130 >> 15)) + ~((v130 ^ (v130 >> 15)) << 27);
            v132 = v128 & ((v131 >> 31) ^ v131);
            v133 = (_QWORD *)(v126 + 16 * v132);
            v134 = (void *)*v133;
            if (*v133)
            {
              v135 = 0;
              v136 = 1;
              do
              {
                if (v134 == v125)
                  goto LABEL_245;
                if (v134 == (void *)-1)
                  v135 = v133;
                v132 = (v132 + v136) & v128;
                v133 = (_QWORD *)(v126 + 16 * v132);
                v134 = (void *)*v133;
                ++v136;
              }
              while (*v133);
              if (v135)
              {
                *v135 = 0;
                v135[1] = 0;
                --*(_DWORD *)(*__src - 16);
                v133 = v135;
              }
            }
            *v133 = v125;
            v133[1] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            v137 = *__src;
            if (*__src)
              v138 = *(_DWORD *)(v137 - 12) + 1;
            else
              v138 = 1;
            *(_DWORD *)(v137 - 12) = v138;
            v139 = *__src;
            if (*__src)
              v140 = *(_DWORD *)(v139 - 12);
            else
              v140 = 0;
            v141 = (*(_DWORD *)(v139 - 16) + v140);
            v142 = *(unsigned int *)(v139 - 4);
            if (v142 > 0x400)
            {
              if (v142 <= 2 * v141)
              {
LABEL_228:
                v143 = *(_DWORD *)(v139 - 12);
                v144 = (_DWORD)v142 << (6 * v143 >= (2 * v142));
                goto LABEL_231;
              }
            }
            else if (3 * v142 <= 4 * v141)
            {
              if ((_DWORD)v142)
                goto LABEL_228;
              v143 = *(_DWORD *)(v139 - 12);
              v144 = 8;
LABEL_231:
              v145 = WTF::fastZeroedMalloc((WTF *)(16 * v144 + 16));
              *__src = v145 + 16;
              *(_DWORD *)(v145 + 12) = v144;
              *(_DWORD *)(*__src - 8) = v144 - 1;
              *(_DWORD *)(*__src - 16) = 0;
              *(_DWORD *)(*__src - 12) = v143;
              if ((_DWORD)v142)
              {
                v147 = 0;
                v148 = 0;
                do
                {
                  v149 = (_QWORD *)(v139 + 16 * v147);
                  if ((unint64_t)(*v149 + 1) >= 2)
                  {
                    v150 = *__src;
                    v151 = *__src ? *(_DWORD *)(v150 - 8) : 0;
                    v152 = (~(*v149 << 32) + *v149) ^ ((~(*v149 << 32) + *v149) >> 22);
                    v153 = 9 * ((v152 + ~(v152 << 13)) ^ ((unint64_t)(v152 + ~(v152 << 13)) >> 8));
                    v154 = (v153 ^ (v153 >> 15)) + ~((v153 ^ (v153 >> 15)) << 27);
                    v155 = v151 & ((v154 >> 31) ^ v154);
                    v156 = 1;
                    do
                    {
                      v157 = v155;
                      v158 = *(_QWORD *)(v150 + 16 * v155);
                      v155 = (v155 + v156++) & v151;
                    }
                    while (v158);
                    v159 = (_OWORD *)(v150 + 16 * v157);
                    *v159 = *(_OWORD *)v149;
                    if (v149 == v133)
                      v148 = v159;
                  }
                  ++v147;
                }
                while (v147 != v142);
              }
              else
              {
                v148 = 0;
              }
              WTF::fastFree((WTF *)(v139 - 16), v146);
              v133 = v148;
            }
LABEL_245:
            v160 = v133[1];
            IdentifierInternal = objc_msgSend(v125, "table");
            v161 = IdentifierInternal;
            v162 = *v283;
            if (*v283
              || (IdentifierInternal = WTF::fastZeroedMalloc((WTF *)0x90),
                  *v283 = IdentifierInternal + 16,
                  *(_DWORD *)(IdentifierInternal + 12) = 8,
                  *(_DWORD *)(*v283 - 8) = 7,
                  *(_DWORD *)(*v283 - 16) = 0,
                  *(_DWORD *)(*v283 - 12) = 0,
                  (v162 = *v283) != 0))
            {
              v163 = *(_DWORD *)(v162 - 8);
            }
            else
            {
              v163 = 0;
            }
            v164 = (~(v161 << 32) + v161) ^ ((unint64_t)(~(v161 << 32) + v161) >> 22);
            v165 = 9 * ((v164 + ~(v164 << 13)) ^ ((v164 + ~(v164 << 13)) >> 8));
            v166 = (v165 ^ (v165 >> 15)) + ~((v165 ^ (v165 >> 15)) << 27);
            v167 = v163 & ((v166 >> 31) ^ v166);
            v168 = (uint64_t *)(v162 + 16 * v167);
            v169 = *v168;
            if (*v168)
            {
              v170 = 0;
              v171 = 1;
              do
              {
                if (v169 == v161)
                  goto LABEL_282;
                if (v169 == -1)
                  v170 = v168;
                v167 = (v167 + v171) & v163;
                v168 = (uint64_t *)(v162 + 16 * v167);
                v169 = *v168;
                ++v171;
              }
              while (*v168);
              if (v170)
              {
                *v170 = 0;
                v170[1] = 0;
                --*(_DWORD *)(*v283 - 16);
                v168 = v170;
              }
            }
            *v168 = v161;
            IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
            v168[1] = IdentifierInternal;
            v172 = *v283;
            if (*v283)
              v173 = *(_DWORD *)(v172 - 12) + 1;
            else
              v173 = 1;
            *(_DWORD *)(v172 - 12) = v173;
            v174 = *v283;
            if (*v283)
              v175 = *(_DWORD *)(v174 - 12);
            else
              v175 = 0;
            v176 = (*(_DWORD *)(v174 - 16) + v175);
            v177 = *(unsigned int *)(v174 - 4);
            if (v177 > 0x400)
            {
              if (v177 <= 2 * v176)
              {
LABEL_265:
                v178 = *(_DWORD *)(v174 - 12);
                v179 = (_DWORD)v177 << (6 * v178 >= (2 * v177));
                goto LABEL_268;
              }
            }
            else if (3 * v177 <= 4 * v176)
            {
              if ((_DWORD)v177)
                goto LABEL_265;
              v178 = *(_DWORD *)(v174 - 12);
              v179 = 8;
LABEL_268:
              v180 = WTF::fastZeroedMalloc((WTF *)(16 * v179 + 16));
              *v283 = v180 + 16;
              *(_DWORD *)(v180 + 12) = v179;
              *(_DWORD *)(*v283 - 8) = v179 - 1;
              *(_DWORD *)(*v283 - 16) = 0;
              *(_DWORD *)(*v283 - 12) = v178;
              if ((_DWORD)v177)
              {
                v182 = 0;
                v183 = 0;
                do
                {
                  v184 = (uint64_t *)(v174 + 16 * v182);
                  if ((unint64_t)(*v184 + 1) >= 2)
                  {
                    v185 = *v283;
                    v186 = *v283 ? *(_DWORD *)(v185 - 8) : 0;
                    v187 = (~(*v184 << 32) + *v184) ^ ((unint64_t)(~(*v184 << 32) + *v184) >> 22);
                    v188 = 9 * ((v187 + ~(v187 << 13)) ^ ((v187 + ~(v187 << 13)) >> 8));
                    v189 = (v188 ^ (v188 >> 15)) + ~((v188 ^ (v188 >> 15)) << 27);
                    v190 = v186 & ((v189 >> 31) ^ v189);
                    v191 = 1;
                    do
                    {
                      v192 = v190;
                      v193 = *(_QWORD *)(v185 + 16 * v190);
                      v190 = (v190 + v191++) & v186;
                    }
                    while (v193);
                    v194 = (uint64_t *)(v185 + 16 * v192);
                    *(_OWORD *)v194 = *(_OWORD *)v184;
                    if (v184 == v168)
                      v183 = v194;
                  }
                  ++v182;
                }
                while (v182 != v177);
              }
              else
              {
                v183 = 0;
              }
              IdentifierInternal = WTF::fastFree((WTF *)(v174 - 16), v181);
              v168 = v183;
            }
LABEL_282:
            v195 = v168[1];
            *(_QWORD *)&v291 = v160;
            *((_QWORD *)&v291 + 1) = v195;
            LOBYTE(v292) = 1;
            BYTE8(v292) = 1;
            v196 = DWORD1(v296);
            if (DWORD1(v296) == (_DWORD)v296)
            {
              IdentifierInternal = (uint64_t)WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v295 + 8, DWORD1(v296) + 1, (unint64_t)&v291);
              v196 = DWORD1(v296);
              v78 = (WTF *)*((_QWORD *)&v295 + 1);
              v197 = *((_QWORD *)&v295 + 1) + 24 * DWORD1(v296);
              v198 = *(_QWORD *)(IdentifierInternal + 16);
              *(_OWORD *)v197 = *(_OWORD *)IdentifierInternal;
            }
            else
            {
              v78 = (WTF *)*((_QWORD *)&v295 + 1);
              v197 = *((_QWORD *)&v295 + 1) + 24 * DWORD1(v296);
              v198 = v292;
              *(_OWORD *)v197 = v291;
            }
            *(_QWORD *)(v197 + 16) = v198;
            v123 = v196 + 1;
            DWORD1(v296) = v196 + 1;
          }
        }
        ++v124;
      }
      while (v124 != v279);
      IdentifierInternal = objc_msgSend(v277, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
      v279 = IdentifierInternal;
      if (!IdentifierInternal)
      {
        a1 = v275;
        if (v296 > v123)
        {
          if (!v123)
            goto LABEL_306;
          if (v123 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            JUMPOUT(0x194B56120);
          }
          v199 = WTF::fastMalloc((WTF *)(24 * v123));
          LODWORD(v296) = 24 * v123 / 0x18;
          *((_QWORD *)&v295 + 1) = v199;
          if ((WTF *)v199 == v78)
          {
LABEL_306:
            v199 = (uint64_t)v78;
          }
          else
          {
            v200 = 0;
            do
            {
              v201 = v199 + v200;
              v202 = *(_OWORD *)((char *)v78 + v200);
              *(_QWORD *)(v201 + 16) = *(_QWORD *)((char *)v78 + v200 + 16);
              *(_OWORD *)v201 = v202;
              v200 += 24;
            }
            while (24 * v123 != v200);
          }
LABEL_307:
          if (v78)
          {
            if ((WTF *)v199 == v78)
            {
              *((_QWORD *)&v295 + 1) = 0;
              LODWORD(v296) = 0;
            }
            WTF::fastFree(v78, v122);
          }
        }
LABEL_311:
        v207 = (void *)objc_msgSend(obja, "textLists");
        *((_QWORD *)&v296 + 1) = 0;
        cf[0] = 0;
        v208 = objc_msgSend(v207, "count");
        v209 = v208;
        if (v208)
        {
          if (v208 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194B56118);
          }
          v210 = (WTF *)WTF::fastMalloc((WTF *)(8 * v208));
          LODWORD(cf[0]) = v209;
          *((_QWORD *)&v296 + 1) = v210;
        }
        else
        {
          v210 = 0;
        }
        v302 = 0u;
        v303 = 0u;
        *(_OWORD *)v300 = 0u;
        v301 = 0u;
        v212 = objc_msgSend(v207, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
        if (!v212)
        {
          LODWORD(v252) = 0;
          v254 = 0;
          v255 = (uint64_t)v210;
          if (v209)
            goto LABEL_373;
          goto LABEL_379;
        }
        v284 = v207;
        __srcb = *(_QWORD *)v301;
        while (2)
        {
          v213 = 0;
LABEL_318:
          if (*(_QWORD *)v301 != __srcb)
            objc_enumerationMutation(v284);
          v214 = *((_QWORD *)v300[1] + v213);
          v215 = *v6;
          if (*v6
            || (v216 = WTF::fastZeroedMalloc((WTF *)0x90),
                *v6 = v216 + 16,
                *(_DWORD *)(v216 + 12) = 8,
                *(_DWORD *)(*v6 - 8) = 7,
                *(_DWORD *)(*v6 - 16) = 0,
                *(_DWORD *)(*v6 - 12) = 0,
                (v215 = *v6) != 0))
          {
            v217 = *(_DWORD *)(v215 - 8);
          }
          else
          {
            v217 = 0;
          }
          v218 = (~(v214 << 32) + v214) ^ ((unint64_t)(~(v214 << 32) + v214) >> 22);
          v219 = 9 * ((v218 + ~(v218 << 13)) ^ ((v218 + ~(v218 << 13)) >> 8));
          v220 = (v219 ^ (v219 >> 15)) + ~((v219 ^ (v219 >> 15)) << 27);
          v221 = v217 & ((v220 >> 31) ^ v220);
          v222 = (_QWORD *)(v215 + 16 * v221);
          v223 = *v222;
          if (*v222)
          {
            v224 = 0;
            v225 = 1;
            while (v223 != v214)
            {
              if (v223 == -1)
                v224 = v222;
              v221 = (v221 + v225) & v217;
              v222 = (_QWORD *)(v215 + 16 * v221);
              v223 = *v222;
              ++v225;
              if (!*v222)
              {
                if (v224)
                {
                  *v224 = 0;
                  v224[1] = 0;
                  --*(_DWORD *)(*v6 - 16);
                  v222 = v224;
                }
                goto LABEL_331;
              }
            }
LABEL_357:
            v249 = v222[1];
            *(_QWORD *)&v291 = v249;
            *((_QWORD *)&v291 + 1) = 1;
            v250 = HIDWORD(cf[0]);
            if (HIDWORD(cf[0]) == LODWORD(cf[0]))
            {
              v251 = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v296 + 8, HIDWORD(cf[0]) + 1, (unint64_t)&v291);
              v250 = HIDWORD(cf[0]);
              v210 = (WTF *)*((_QWORD *)&v296 + 1);
              *(_QWORD *)(*((_QWORD *)&v296 + 1) + 8 * HIDWORD(cf[0])) = *(_QWORD *)v251;
            }
            else
            {
              v210 = (WTF *)*((_QWORD *)&v296 + 1);
              *(_QWORD *)(*((_QWORD *)&v296 + 1) + 8 * HIDWORD(cf[0])) = v249;
            }
            v252 = (v250 + 1);
            HIDWORD(cf[0]) = v250 + 1;
            if (++v213 == v212)
            {
              v253 = objc_msgSend(v284, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
              v212 = v253;
              if (!v253)
              {
                v254 = (int)cf[0];
                if (LODWORD(cf[0]) <= v252)
                {
                  a1 = v275;
                }
                else
                {
                  a1 = v275;
                  if (!(_DWORD)v252)
                    goto LABEL_375;
                  if (v252 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194B56128);
                  }
                  v255 = WTF::fastMalloc((WTF *)(8 * v252));
                  LODWORD(cf[0]) = v252;
                  *((_QWORD *)&v296 + 1) = v255;
                  if ((WTF *)v255 == v210)
                  {
LABEL_375:
                    *((_QWORD *)&v296 + 1) = 0;
                    LODWORD(cf[0]) = 0;
                    goto LABEL_376;
                  }
                  v256 = 0;
                  do
                  {
                    *(_QWORD *)(v255 + v256) = *(_QWORD *)((char *)v210 + v256);
                    v256 += 8;
                  }
                  while (8 * v252 != v256);
                  v209 = v252;
LABEL_373:
                  if (v210)
                  {
                    if ((WTF *)v255 == v210)
                      goto LABEL_375;
LABEL_376:
                    WTF::fastFree(v210, v211);
                    v210 = (WTF *)*((_QWORD *)&v296 + 1);
                    v254 = (int)cf[0];
                  }
                  else
                  {
                    v254 = v209;
                    v210 = (WTF *)v255;
                  }
                }
LABEL_379:
                *(_OWORD *)v288 = v295;
                *(_QWORD *)&v288[16] = v296;
                *(_QWORD *)&v288[24] = v210;
                *(_DWORD *)&v288[32] = v254;
                *(_DWORD *)&v288[36] = v252;
                v60 = 6;
LABEL_103:
                v289 = v60;
LABEL_9:
                v290 = 1;
LABEL_10:
                a2 = v276;
                goto LABEL_11;
              }
              continue;
            }
            goto LABEL_318;
          }
          break;
        }
LABEL_331:
        *v222 = v214;
        v222[1] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
        v226 = *v6;
        if (*v6)
          v227 = *(_DWORD *)(v226 - 12) + 1;
        else
          v227 = 1;
        *(_DWORD *)(v226 - 12) = v227;
        v228 = *v6;
        if (*v6)
          v229 = *(_DWORD *)(v228 - 12);
        else
          v229 = 0;
        v230 = (*(_DWORD *)(v228 - 16) + v229);
        v231 = *(unsigned int *)(v228 - 4);
        if (v231 > 0x400)
        {
          if (v231 > 2 * v230)
            goto LABEL_357;
LABEL_340:
          v232 = *(_DWORD *)(v228 - 12);
          v233 = (_DWORD)v231 << (6 * v232 >= (2 * v231));
        }
        else
        {
          if (3 * v231 > 4 * v230)
            goto LABEL_357;
          if ((_DWORD)v231)
            goto LABEL_340;
          v232 = *(_DWORD *)(v228 - 12);
          v233 = 8;
        }
        v234 = WTF::fastZeroedMalloc((WTF *)(16 * v233 + 16));
        *v6 = v234 + 16;
        *(_DWORD *)(v234 + 12) = v233;
        *(_DWORD *)(*v6 - 8) = v233 - 1;
        *(_DWORD *)(*v6 - 16) = 0;
        *(_DWORD *)(*v6 - 12) = v232;
        if ((_DWORD)v231)
        {
          v236 = 0;
          v237 = 0;
          do
          {
            v238 = (_QWORD *)(v228 + 16 * v236);
            if ((unint64_t)(*v238 + 1) >= 2)
            {
              v239 = *v6;
              v240 = *v6 ? *(_DWORD *)(v239 - 8) : 0;
              v241 = (~(*v238 << 32) + *v238) ^ ((~(*v238 << 32) + *v238) >> 22);
              v242 = 9 * ((v241 + ~(v241 << 13)) ^ ((unint64_t)(v241 + ~(v241 << 13)) >> 8));
              v243 = (v242 ^ (v242 >> 15)) + ~((v242 ^ (v242 >> 15)) << 27);
              v244 = v240 & ((v243 >> 31) ^ v243);
              v245 = 1;
              do
              {
                v246 = v244;
                v247 = *(_QWORD *)(v239 + 16 * v244);
                v244 = (v244 + v245++) & v240;
              }
              while (v247);
              v248 = (_OWORD *)(v239 + 16 * v246);
              *v248 = *(_OWORD *)v238;
              if (v238 == v222)
                v237 = v248;
            }
            ++v236;
          }
          while (v236 != v231);
        }
        else
        {
          v237 = 0;
        }
        WTF::fastFree((WTF *)(v228 - 16), v235);
        v222 = v237;
        goto LABEL_357;
      }
    }
  }
  PAL::getNSPresentationIntentClass[0]((PAL *)v74);
  v81 = objc_opt_isKindOfClass();
  if ((v81 & 1) != 0)
  {
    if (a3)
      CFRetain(a3);
    *(_QWORD *)v288 = a3;
    v8 = 7;
    goto LABEL_4;
  }
  WebCore::getNSAdaptiveImageGlyphClass((WebCore *)v81);
  v83 = objc_opt_isKindOfClass();
  if ((v83 & 1) != 0)
  {
    v296 = 0u;
    cf[0] = 0;
    MEMORY[0x19AEA5508](v305, objc_msgSend(a3, "contentIdentifier"));
    *(_QWORD *)&v295 = v305[0];
    MEMORY[0x19AEA5508](v305, objc_msgSend(a3, "contentDescription"));
    v274 = a1;
    *((_QWORD *)&v295 + 1) = v305[0];
    *(_OWORD *)v300 = 0u;
    v301 = 0u;
    v302 = 0u;
    v303 = 0u;
    objb = a3;
    a2 = (void *)objc_msgSend(a3, "strikes");
    v84 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
    if (!v84)
      goto LABEL_194;
    v85 = *(_QWORD *)v301;
    a1 = 1;
    while (1)
    {
      v86 = 0;
      do
      {
        if (*(_QWORD *)v301 != v85)
          objc_enumerationMutation(a2);
        v87 = (void *)*((_QWORD *)v300[1] + v86);
        v291 = 0uLL;
        v88 = (CGImage *)objc_msgSend(v87, "cgImage");
        v89 = v88;
        if (v88)
          CFRetain(v88);
        if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
        {
          __break(0xC471u);
          __break(1u);
          goto LABEL_392;
        }
        v90 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
        if (!v89)
          goto LABEL_156;
        v91 = v90;
        if (!(CGImageGetWidth(v89) >> 31) && !(CGImageGetHeight(v89) >> 31))
        {
          v92 = (_QWORD *)operator new();
          *v92 = &off_1E340E810;
          v92[1] = v89;
          v89 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
          v93 = WTF::fastMalloc((WTF *)0x20);
          *(_BYTE *)v93 = 0;
          *(_OWORD *)(v93 + 8) = xmmword_19689B170;
          *(_QWORD *)(v93 + 24) = v89;
          *((_QWORD *)v89 + 2) = 0;
          *((_QWORD *)v89 + 3) = 0;
          *((_QWORD *)v89 + 4) = v91;
          *((_QWORD *)v89 + 5) = 1;
          *(_QWORD *)v89 = off_1E340E858;
          *((_QWORD *)v89 + 1) = v93;
          *((_QWORD *)v89 + 6) = v92;
LABEL_156:
          *(_QWORD *)&buf = v89;
          goto LABEL_157;
        }
        *(_QWORD *)&buf = 0;
        CFRelease(v89);
LABEL_157:
        WebCore::BitmapImage::create((uint64_t *)&buf, (uint64_t *)v299);
        v94 = (_DWORD *)v291;
        *(_QWORD *)&v291 = *(_QWORD *)v299;
        if (v94)
        {
          if (v94[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v94 + 8))(v94);
          else
            --v94[2];
        }
        objc_msgSend(v87, "alignmentInset");
        *(float *)&v96 = v96;
        *(float *)&v97 = v97;
        *((_QWORD *)&v291 + 1) = __PAIR64__(LODWORD(v97), LODWORD(v96));
        v98 = HIDWORD(v296);
        if (HIDWORD(v296) == DWORD2(v296))
        {
          v99 = (uint64_t *)WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v296, HIDWORD(v296) + 1, (unint64_t)&v291);
          v98 = HIDWORD(v296);
          v100 = v296;
          v101 = *v99;
          if (*v99)
            ++*(_DWORD *)(v101 + 8);
          v102 = (_QWORD *)(v100 + 16 * v98);
          *v102 = v101;
          v103 = v102 + 1;
          v104 = v99 + 1;
        }
        else
        {
          v105 = v296;
          v106 = v291;
          if ((_QWORD)v291)
            ++*(_DWORD *)(v291 + 8);
          v107 = (_QWORD *)(v105 + 16 * v98);
          *v107 = v106;
          v103 = v107 + 1;
          v104 = (_QWORD *)&v291 + 1;
        }
        *v103 = *v104;
        HIDWORD(v296) = v98 + 1;
        v108 = buf;
        *(_QWORD *)&buf = 0;
        if (v108)
        {
          v109 = *(_QWORD *)(v108 + 8);
          if (__ldaxr((unsigned __int8 *)v109))
          {
            __clrex();
            goto LABEL_171;
          }
          if (__stxr(1u, (unsigned __int8 *)v109))
LABEL_171:
            MEMORY[0x19AEA534C](v109);
          v111 = *(_QWORD *)(v109 + 8);
          v112 = v111 - 1;
          *(_QWORD *)(v109 + 8) = v111 - 1;
          if (v111 == 1)
          {
            v117 = *(_QWORD *)(v109 + 16);
            v113 = *(_QWORD *)(v109 + 24);
            *(_QWORD *)(v109 + 24) = 0;
            v114 = v117 != 0;
          }
          else
          {
            v113 = 0;
            v114 = 1;
          }
          v115 = __ldxr((unsigned __int8 *)v109);
          if (v115 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v109))
            {
              if (v112)
                goto LABEL_184;
LABEL_180:
              if (v113)
                (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
              if (!v114)
                WTF::fastFree((WTF *)v109, v95);
              goto LABEL_184;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v109);
          if (v112)
            goto LABEL_184;
          goto LABEL_180;
        }
LABEL_184:
        v116 = (_DWORD *)v291;
        *(_QWORD *)&v291 = 0;
        if (v116)
        {
          if (v116[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v116 + 8))(v116);
          else
            --v116[2];
        }
        ++v86;
      }
      while (v84 != v86);
      v118 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", v300, v305, 16);
      v84 = v118;
      if (!v118)
      {
LABEL_194:
        v119 = (const void *)objc_msgSend(objb, "imageContent");
        a2 = v276;
        a1 = v274;
        v120 = v119;
        if (v119)
        {
          CFRetain(v119);
          if (cf[0])
            CFRelease(cf[0]);
        }
        else
        {
          v120 = cf[0];
        }
        *(_OWORD *)v288 = v295;
        *(_OWORD *)&v288[16] = v296;
        *(_QWORD *)&v288[32] = v120;
        v8 = 12;
LABEL_4:
        v289 = v8;
        v9 = 1;
LABEL_5:
        v290 = v9;
        goto LABEL_11;
      }
    }
  }
  WebCore::getNSTextAttachmentClass((WebCore *)v83);
  v203 = objc_opt_isKindOfClass();
  if ((v203 & 1) != 0)
  {
    v204 = objc_msgSend(a3, "image");
    if (v204 == webCoreTextAttachmentMissingPlatformImage())
    {
LABEL_392:
      v288[0] = 0;
      v8 = 14;
      goto LABEL_4;
    }
    v205 = objc_msgSend(a3, "accessibilityLabel");
    if (v205)
    {
      MEMORY[0x19AEA5508](v305, v205);
      v206 = (WTF::StringImpl *)v305[0];
    }
    else
    {
      v206 = 0;
    }
    v263 = (_DWORD *)objc_msgSend(a3, "fileWrapper");
    v265 = v263;
    v266 = a1;
    if (!v263)
    {
      v268 = 0;
      v270 = 1;
      v269 = 1;
      goto LABEL_409;
    }
    v267 = (const void *)objc_msgSend(v263, "regularFileContents");
    v268 = v267;
    if (v267)
      CFRetain(v267);
    v264 = (WTF::StringImpl *)objc_msgSend(v265, "preferredFilename");
    if (v264)
    {
      MEMORY[0x19AEA5508](v305);
      v265 = (_DWORD *)v305[0];
      if (v305[0])
      {
        v269 = 0;
        *(_DWORD *)v305[0] += 2;
        goto LABEL_407;
      }
    }
    else
    {
      v265 = 0;
    }
    v269 = 1;
LABEL_407:
    if (v268)
    {
      CFRetain(v268);
      v270 = 0;
    }
    else
    {
      v270 = 1;
    }
LABEL_409:
    if (v206)
    {
      v271 = *(_DWORD *)v206;
      *(_DWORD *)v206 += 2;
      *(_QWORD *)v288 = v265;
      *(_QWORD *)&v288[8] = v268;
      *(_QWORD *)&v288[16] = v206;
      v289 = 13;
      v290 = 1;
      if (v271)
        *(_DWORD *)v206 = v271;
      else
        WTF::StringImpl::destroy(v206, v264);
    }
    else
    {
      *(_QWORD *)v288 = v265;
      *(_QWORD *)&v288[8] = v268;
      *(_QWORD *)&v288[16] = 0;
      v289 = 13;
      v290 = 1;
    }
    if ((v270 & 1) == 0)
      CFRelease(v268);
    a1 = v266;
    if ((v269 & 1) == 0)
    {
      if (*v265 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v265, v264);
      else
        *v265 -= 2;
    }
    goto LABEL_11;
  }
  PAL::getUIFontClass((PAL *)v203);
  v257 = objc_opt_isKindOfClass();
  if ((v257 & 1) == 0)
  {
    PAL::getUIColorClass((PAL *)v257);
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      WebCore::colorFromCocoaColor((WebCore *)a3, v305);
      v261 = v305[0];
      if (v305[0])
        v305[0] = 0;
      *(_QWORD *)v288 = v261;
      v60 = 11;
      goto LABEL_103;
    }
    if (a3)
    {
      v262 = qword_1ECE7C0B8;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C0B8, OS_LOG_TYPE_ERROR))
      {
        v272 = (objc_class *)objc_opt_class();
        LODWORD(v305[0]) = 138412290;
        *(uint64_t *)((char *)v305 + 4) = (uint64_t)NSStringFromClass(v272);
        _os_log_error_impl(&dword_1940B8000, v262, OS_LOG_TYPE_ERROR, "NSAttributedString extraction failed for class <%@>", (uint8_t *)v305, 0xCu);
      }
    }
    v288[0] = 0;
    v290 = 0;
    goto LABEL_10;
  }
  *(_QWORD *)&v295 = a3;
  if (a3)
    CFRetain(a3);
  objc_msgSend(a3, "pointSize");
  *(float *)&v258 = v258;
  v259 = WebCore::FontPlatformData::FontPlatformData((uint64_t)v305, (CFTypeRef *)&v295, 0, 0, 0, 0, 0, 0, *(float *)&v258);
  WebCore::Font::create(v259, 1, 0, 0, 0, 0, 0, (uint64_t *)v300);
  *(WTF::StringImpl **)v288 = v300[0];
  v289 = 3;
  v290 = 1;
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v305, v260);
  if (a3)
    CFRelease(a3);
LABEL_11:
  if (!v290)
    return;
  v12 = *(uint64_t **)(a1 + 56);
  MEMORY[0x19AEA5508](v300, a2);
  v15 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v12, 8u, 0), (v15 = *v12) != 0))
  {
    v16 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v16 = 0;
  }
  v17 = *((_DWORD *)v300[0] + 4);
  if (v17 < 0x100)
    v18 = WTF::StringImpl::hashSlowCase(v300[0]);
  else
    v18 = v17 >> 8;
  v20 = 0;
  for (j = 1; ; ++j)
  {
    v22 = v18 & v16;
    v23 = v15 + 56 * (v18 & v16);
    v24 = *(WTF **)v23;
    if (*(_QWORD *)v23 != -1)
      break;
    v20 = v15 + 56 * v22;
LABEL_27:
    v18 = j + v22;
  }
  if (!v24)
  {
    if (v20)
    {
      *(_QWORD *)(v20 + 48) = 0;
      *(_OWORD *)(v20 + 16) = 0u;
      *(_OWORD *)(v20 + 32) = 0u;
      *(_OWORD *)v20 = 0u;
      --*(_DWORD *)(*v12 - 16);
      v23 = v20;
    }
    v25 = v300[0];
    v300[0] = 0;
    v26 = *(WTF::StringImpl **)v23;
    *(_QWORD *)v23 = v25;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v13);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = (WTF::StringImpl *)(v23 + 8);
    v28 = *(unsigned int *)(v23 + 48);
    if ((_DWORD)v28 == -1)
    {
      if (v289 == -1)
        goto LABEL_44;
    }
    else if (v289 == -1)
    {
      ((void (*)(uint64_t *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v28])(v305, v27);
      *(_DWORD *)(v23 + 48) = -1;
      goto LABEL_44;
    }
    v305[0] = v23 + 8;
    ((void (*)(uint64_t *))off_1E327F968[v289])(v305);
LABEL_44:
    v34 = *v12;
    if (*v12)
      v35 = *(_DWORD *)(v34 - 12) + 1;
    else
      v35 = 1;
    *(_DWORD *)(v34 - 12) = v35;
    v36 = *v12;
    if (*v12)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        goto LABEL_90;
    }
    else
    {
      if (3 * v39 > 4 * v38)
        goto LABEL_90;
      if (!(_DWORD)v39)
      {
        v40 = 8;
        goto LABEL_89;
      }
    }
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_89:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v12, v40, (WTF::StringImpl **)v23);
    goto LABEL_90;
  }
  if (!WTF::equal(v24, v300[0], v14))
    goto LABEL_27;
  v29 = v15 + 56 * v22;
  v32 = *(_DWORD *)(v29 + 48);
  v31 = (_DWORD *)(v29 + 48);
  v30 = v32;
  v27 = (WTF::StringImpl *)(v31 - 10);
  if (v32 == -1)
  {
    if (v289 == -1)
      goto LABEL_90;
  }
  else if (v289 == -1)
  {
    ((void (*)(uint64_t *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v30])(v305, v27);
    *v31 = -1;
    goto LABEL_90;
  }
  v305[0] = (uint64_t)(v31 - 10);
  ((void (*)(uint64_t *))off_1E327F968[v289])(v305);
LABEL_90:
  v58 = v300[0];
  v300[0] = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v27);
    else
      *(_DWORD *)v58 -= 2;
  }
  if (v290)
  {
    if (v289 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v289])(v305, v288);
  }
}

void sub_194B56134(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,CFTypeRef a38,WTF::StringImpl *a39,WTF *a40,int a41,int a42,CFTypeRef cf,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,WTF::StringImpl *a49)
{
  const void *v49;
  WTF::StringImpl *v50;

  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::destroy(v50, a2);
      if (!v49)
LABEL_6:
        _Unwind_Resume(exception_object);
LABEL_5:
      CFRelease(v49);
      goto LABEL_6;
    }
    *(_DWORD *)v50 -= 2;
  }
  if (!v49)
    goto LABEL_6;
  goto LABEL_5;
}

__n128 __copy_helper_block_e8_32c496_ZTSKZN7WebCoreL17extractDictionaryEP12NSDictionaryRN3WTF7HashMapIP11NSTextTableNS2_23ObjectIdentifierGenericINS_31AttributedStringTextTableIDTypeENS2_38ObjectIdentifierMainThreadAccessTraitsIyEEyEENS2_11DefaultHashIS5_EENS2_10HashTraitsIS5_EENSD_ISA_EENS2_15HashTableTraitsEEERNS3_IP16NSTextTableBlockNS6_INS_36AttributedStringTextTableBlockIDTypeES9_yEENSB_ISK_EENSD_ISK_EENSD_ISM_EESG_EERNS3_IP10NSTextListNS6_INS_30AttributedStringTextListIDTypeES9_yEENSB_IST_EENSD_IST_EENSD_ISV_EESG_EEE3__0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a2 + 8) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v5 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 8);
  *((_DWORD *)a3 + 8) = 0;
  *(_DWORD *)(a2 + 32) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 9) = 0;
  *(_DWORD *)(a2 + 36) = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v5;
  v6 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(a2 + 32) = v6;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS12_LNS0_6_TraitE1EEEEEvRS13_OT_EUlRS19_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1H_EEEDcS19_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
  v5 = a3[2];
  a3[2] = 0;
  a2[2] = v5;
}

char *WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v14 = *(WTF **)a1;
        return (char *)v14 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v13) = *(_QWORD *)((char *)v5 + v13);
          v13 += 8;
        }
        while (8 * v6 != v13);
        v14 = *(WTF **)a1;
        if (v5)
        {
          if (v14 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v14 = *(WTF **)a1;
        }
        return (char *)v14 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x194B568C4);
    }
  }
  v15 = *(unsigned int *)(a1 + 8);
  v16 = v15 + (v15 >> 2);
  if (v16 >= 0x10)
    v17 = v16 + 1;
  else
    v17 = 16;
  if (v17 <= a2)
    v18 = a2;
  else
    v18 = v17;
  if (v18 > v15)
  {
    if (v18 >> 29)
      goto LABEL_35;
    v19 = *(unsigned int *)(a1 + 12);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(a1 + 8) = v18;
    *(_QWORD *)a1 = v20;
    if ((_DWORD)v19)
    {
      v22 = 8 * v19;
      v23 = v5;
      do
      {
        v24 = *(_QWORD *)v23;
        v23 = (WTF *)((char *)v23 + 8);
        *v20++ = v24;
        v22 -= 8;
      }
      while (v22);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v21);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)((char *)v7 + 16 * v8);
        v12 = (unsigned int **)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *(_QWORD *)v10 = v13;
          *((_QWORD *)v10 + 1) = v12[1];
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (result[2] == 1)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            else
              --result[2];
          }
          v12 += 2;
          v10 += 4;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl **v44;
  char v45;
  char v46;
  char v47;
  char v48[2];

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 56 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v41 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 56 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v44 = v12;
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *((_DWORD *)v15 + 4);
          if (v22 < 0x100)
            v23 = WTF::StringImpl::hashSlowCase(v15);
          else
            v23 = v22 >> 8;
          v24 = 0;
          do
          {
            v25 = v23 & v21;
            v26 = (WTF::StringImpl **)(v20 + 56 * (v23 & v21));
            v23 = ++v24 + (v23 & v21);
          }
          while (*v26);
          v27 = v20 + 56 * v25;
          v30 = *(_DWORD *)(v27 + 48);
          v29 = (_DWORD *)(v27 + 48);
          v28 = v30;
          if (v30 == -1)
          {
            *v29 = -1;
            *v26 = 0;
          }
          else
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v28])(&v47, v20 + 56 * v25 + 8);
            v31 = *v26;
            *v29 = -1;
            *v26 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v8);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          v32 = *v14;
          *v14 = 0;
          v33 = v20 + 56 * v25;
          *(_BYTE *)(v33 + 8) = 0;
          v34 = v33 + 8;
          *v26 = v32;
          *v29 = -1;
          v35 = v4 + 56 * v11;
          v38 = *(_DWORD *)(v35 + 48);
          v36 = (_DWORD *)(v35 + 48);
          v37 = v38;
          if (v38 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E327F8F0[v37])(v48, v34, v4 + 56 * v11 + 8);
            *v29 = v37;
            v39 = *v36;
            if ((_DWORD)v39 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v39])(&v46, v4 + 56 * v11 + 8);
          }
          *v36 = -1;
          v40 = *v14;
          *v14 = 0;
          v12 = v44;
          v13 = v41;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v8);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v4 + 56 * v11;
          v19 = *(_DWORD *)(v16 + 48);
          v18 = (_DWORD *)(v16 + 48);
          v17 = v19;
          if (v19 != -1)
          {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v17])(&v45, v4 + 56 * v11 + 8);
            v15 = *v14;
          }
          *v18 = -1;
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

void sub_194B56CFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  WTF::StringImpl **v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v21;
  WTF::StringImpl *v22;

  v21 = *v19;
  if ((_DWORD)v21 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v21])(&a17, v18);
  *v19 = -1;
  v22 = *v17;
  *v17 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  _Unwind_Resume(exception_object);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 40) = 0;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 40) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  double result;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v19, v4);
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    v14 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v14;
    v15 = *(_DWORD *)(v4 + 8) & 0xFFFFFFFE | a3[1] & 1;
    *(_DWORD *)(v4 + 8) = v15;
    v16 = v15 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
    *(_DWORD *)(v4 + 8) = v16;
    v17 = v16 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
    *(_DWORD *)(v4 + 8) = v17;
    v18 = v17 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
    *(_DWORD *)(v4 + 8) = v18;
    *(_DWORD *)(v4 + 8) = a3[1] & 0xFFFFFFC0 | v18 & 0x3F;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)((char *)a3 + 12);
    result = *(double *)((char *)a3 + 28);
    *(double *)(v4 + 28) = result;
    *(_DWORD *)(v4 + 36) = *((_DWORD *)a3 + 9);
    *((_DWORD *)a3 + 2) &= ~1u;
    *(_DWORD *)(v4 + 40) = 2;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFFE | a3[1] & 1;
  v9 = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v9 & 0xFFFFFFFE;
  v10 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFD | (2 * ((v9 >> 1) & 1));
  *(_DWORD *)(a2 + 8) = v10;
  v11 = v10 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a2 + 8) = v11;
  v12 = v11 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 8) = a3[1] & 0xFFFFFFC0 | v12 & 0x3F;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)((char *)a3 + 12);
  result = *(double *)((char *)a3 + 28);
  *(double *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF **result, WTF ***a2, WTF ***a3)
{
  WTF *v4;
  uint64_t v5;
  WTF **v6;
  WTF **v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *result;
  v5 = *((unsigned int *)*result + 10);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 3)
  {
    result = (WTF **)((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *((_DWORD *)v4 + 10) = 3;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      return (WTF **)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 4)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v13, v4);
LABEL_8:
    *(_DWORD *)(v4 + 40) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v9 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v9;
    *(_DWORD *)(v4 + 40) = 4;
    return result;
  }
  v7 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v7)
  {
    v10 = *(WTF::StringImpl ***)a2;
    v11 = 8 * v7;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *((_DWORD *)a2 + 2) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *((_DWORD *)a2 + 3) = v8;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF *result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_7:
    *(_DWORD *)(v4 + 40) = -1;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = 0;
    *(_DWORD *)(v4 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a3 + 3);
    *((_DWORD *)a3 + 3) = 0;
    *(_DWORD *)(v4 + 12) = v8;
    *(_DWORD *)(v4 + 40) = 5;
    return result;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  a2[2] = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  a2[3] = v7;
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 6)
  {
    result = (WTF *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v15, v4);
LABEL_11:
    *(_DWORD *)(v4 + 40) = -1;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = v12;
    v13 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v13;
    LODWORD(v13) = *((_DWORD *)a3 + 4);
    *((_DWORD *)a3 + 4) = 0;
    *(_DWORD *)(v4 + 16) = v13;
    LODWORD(v13) = *((_DWORD *)a3 + 5);
    *((_DWORD *)a3 + 5) = 0;
    *(_DWORD *)(v4 + 20) = v13;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    v14 = a3[3];
    a3[3] = 0;
    *(_QWORD *)(v4 + 24) = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 8);
    *((_DWORD *)a3 + 8) = 0;
    *(_DWORD *)(v4 + 32) = v14;
    LODWORD(v14) = *((_DWORD *)a3 + 9);
    *((_DWORD *)a3 + 9) = 0;
    *(_DWORD *)(v4 + 36) = v14;
    *(_DWORD *)(v4 + 40) = 6;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(const void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    CFRelease(v8);
  v9 = *(WTF **)(a2 + 8);
  if (v9)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v9, (void *)a2);
  }
  v10 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v10;
  result = *(WTF **)(a2 + 24);
  if (result)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)a2);
  }
  v11 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 8);
  *((_DWORD *)a3 + 8) = 0;
  *(_DWORD *)(a2 + 32) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 9) = 0;
  *(_DWORD *)(a2 + 36) = v11;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 7)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 40) = 7;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 8)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 40) = 8;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  char v9;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 9)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v9, v4);
LABEL_6:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 40) = 9;
    return;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
    CFRelease(v7);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 10)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v14, v4);
LABEL_11:
    *(_QWORD *)v4 = 0;
    if (*a3)
    {
      *(_QWORD *)v4 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v4 + 40) = 10;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v14 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v13 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v12 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
      a2 = v12;
      v6 = *v12;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v9 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v9;
    }
  }
  *a2 = *a3;
  *a3 = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 11)
  {
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v14, v4);
LABEL_11:
    *(_QWORD *)v4 = 0;
    if (*a3)
    {
      *(_QWORD *)v4 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v4 + 40) = 11;
    return result;
  }
  v6 = *a2;
  v7 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) != 0)
    {
      v14 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v13 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      v12 = a2;
      result = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
      a2 = v12;
      v6 = *v12;
      if ((_DWORD)result)
      {
        if (HIBYTE(v6) == HIBYTE(*a3) && BYTE6(v6) == BYTE6(*a3))
          return result;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v6 & 0x8000000000000) != 0)
  {
    v9 = a2;
    result = v6 & 0xFFFFFFFFFFFFLL;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      a2 = v9;
    }
  }
  *a2 = *a3;
  *a3 = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  char v23;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_18;
  if ((_DWORD)v5 != 12)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v23, v4);
LABEL_18:
    *(_DWORD *)(v4 + 40) = -1;
    v15 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v15;
    v16 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = v16;
    v17 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(v4 + 16) = v17;
    LODWORD(v17) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = 0;
    *(_DWORD *)(v4 + 24) = v17;
    LODWORD(v17) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = 0;
    *(_DWORD *)(v4 + 28) = v17;
    v18 = a3[4];
    a3[4] = 0;
    *(_QWORD *)(v4 + 32) = v18;
    *(_DWORD *)(v4 + 40) = 12;
    return;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  v10 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v11)
  {
    v12 = *(_DWORD ***)(a2 + 16);
    v13 = 16 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (v14[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        else
          --v14[2];
      }
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v19 = *(WTF **)(a2 + 16);
  if (v19)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    WTF::fastFree(v19, (void *)a2);
  }
  v20 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = 0;
  *(_DWORD *)(a2 + 24) = v20;
  LODWORD(v20) = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 7) = 0;
  *(_DWORD *)(a2 + 28) = v20;
  v21 = a3[4];
  a3[4] = 0;
  v22 = *(const void **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v21;
  if (v22)
    CFRelease(v22);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(WTF::StringImpl *result, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_12;
  if ((_DWORD)v5 != 13)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v5])(&v15, v4);
LABEL_12:
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    v13 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v13;
    v14 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 40) = 13;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *a2;
  *a2 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a3[1];
  a3[1] = 0;
  v10 = a2[1];
  a2[1] = v9;
  if (v10)
    CFRelease(v10);
  v11 = a3[2];
  a3[2] = 0;
  result = a2[2];
  a2[2] = v11;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJdN3WTF6StringENS8_3URLENS8_3RefIN7WebCore4FontENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIS9_Lm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSJ_IdLm0ESK_Lm16ESL_EENSC_16AttributedString33ParagraphStyleWithTableAndListIDsENS8_9RetainPtrI20NSPresentationIntentEENSQ_I8NSShadowEENSQ_I6NSDateEENSO_16ColorFromCGColorENSO_22ColorFromPlatformColorENSC_37MultiRepresentationHEICAttachmentDataENSC_25TextAttachmentFileWrapperENSC_26TextAttachmentMissingImageEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS12_LNS0_6_TraitE1EEEEEvOT_EUlRS18_OT0_E_JRNS0_6__baseILS16_1EJdS9_SA_SI_SM_SN_SP_SS_SU_SW_SX_SY_SZ_S10_S11_EEEOS1G_EEEDcS18_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 14)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJdN3WTF6StringENS6_3URLENS6_3RefIN7WebCore4FontENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS6_6VectorIS7_Lm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSH_IdLm0ESI_Lm16ESJ_EENSA_16AttributedString33ParagraphStyleWithTableAndListIDsENS6_9RetainPtrI20NSPresentationIntentEENSO_I8NSShadowEENSO_I6NSDateEENSM_16ColorFromCGColorENSM_22ColorFromPlatformColorENSA_37MultiRepresentationHEICAttachmentDataENSA_25TextAttachmentFileWrapperENSA_26TextAttachmentMissingImageEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS12_EEEDcOS13_DpOT0____fmatrix[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 40) = 14;
  return result;
}

unint64_t WTF::Vector<WebCore::DDQueryFragmentCore,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::DDQueryFragmentCore,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::DDQueryFragmentCore,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::DDQueryFragmentCore,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  WTF *v11;
  WTF *v12;
  unsigned int *v13;
  __int128 v14;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 32 * v8);
        v12 = v7;
        do
        {
          v13 = *(unsigned int **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v10 = v13;
          v14 = *(_OWORD *)((char *)v12 + 8);
          *((_QWORD *)v10 + 3) = *((_QWORD *)v12 + 3);
          *(_OWORD *)(v10 + 2) = v14;
          result = *(unsigned int **)v12;
          *(_QWORD *)v12 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
            else
              *result -= 2;
          }
          v12 = (WTF *)((char *)v12 + 32);
          v10 += 8;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *result, void *a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;

  v2 = result[3];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (_QWORD *)(*(_QWORD *)result + 16);
    v12 = result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          {
            v8 = v5;
            v10 = v4;
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
            v5 = v8;
            v4 = v10;
            result = v12;
          }
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      v7 = *(v5 - 2);
      *(v5 - 2) = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          {
            v9 = v5;
            v11 = v4;
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
            v5 = v9;
            v4 = v11;
            result = v12;
          }
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    result[2] = 0;
    v13 = result;
    WTF::fastFree(v3, a2);
    return v13;
  }
  return result;
}

unint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 27))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v4 + 32 * v5);
      v10 = v4;
      do
      {
        v11 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        *(_DWORD *)(v8 + 8) = *((_DWORD *)v10 + 2);
        v12 = *((_QWORD *)v10 + 2);
        *((_QWORD *)v10 + 2) = 0;
        *(_QWORD *)(v8 + 16) = v12;
        *(_DWORD *)(v8 + 24) = *((_DWORD *)v10 + 6);
        v13 = *((_QWORD *)v10 + 2);
        *((_QWORD *)v10 + 2) = 0;
        if (v13)
        {
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v14 = *(_QWORD *)v10;
        *(_QWORD *)v10 = 0;
        if (v14)
        {
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        v10 = (WTF *)((char *)v10 + 32);
        v8 += 32;
      }
      while (v10 != v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  WTF *v11;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        result = (unsigned int *)v7;
        do
        {
          *(_QWORD *)v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          v11 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v10 = v11;
          LODWORD(v11) = result[2];
          result[2] = 0;
          v10[2] = v11;
          LODWORD(v11) = result[3];
          result[3] = 0;
          v10[3] = v11;
          result = WTF::Vector<WebCore::SimpleRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, v9)
                 + 4;
          v10 += 4;
        }
        while (result != (unsigned int *)((char *)v7 + 16 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void _ZN7WebCore17callWithColorTypeIfZNS_17callWithColorTypeIfZNKS_5Color16toColorTypeLossyINS_4HSLAIfEEEET_vEUlRKS6_E_EEDcRKNS_15ColorComponentsIS6_Lm4EEENS_10ColorSpaceEOT0_EUlTyvE_EESA_SF_SH_(int a1, uint64_t a2)
{
  int8x8_t *v2;
  __int32 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float32x2_t v8;
  int8x8_t v9;
  float32x2_t v10;
  float32x2_t v11;
  int8x8_t v12;
  float v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int8x16_t v22;
  int8x8_t *v23;
  __int32 v24;
  float v25;
  float v26;
  float v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t *v32;
  __int32 v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  unsigned int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  float v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  int8x8_t v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  int32x2_t v111;
  int32x2_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int8x16_t v116;

  switch(a1)
  {
    case 0:
      v2 = *(int8x8_t **)(a2 + 8);
      v3 = v2[1].i32[1];
      v4 = *(float *)v2[1].i32;
      v5 = powf(fabsf(v4), 2.1992);
      if (v4 < 0.0)
        v5 = -v5;
      if (v5 > 0.0)
        v6 = v5;
      else
        v6 = 0.0;
      if (v5 >= 1.0)
        v7 = 1.0;
      else
        v7 = v6;
      v8 = (float32x2_t)vand_s8(*v2, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v2), (int8x8_t)vcgez_f32((float32x2_t)*v2)));
      v9 = (int8x8_t)vcltz_s32((int32x2_t)v8);
      v10 = vabs_f32(v8);
      v105 = v10.f32[0];
      v109 = powf(v10.f32[1], 2.1992);
      v11.f32[0] = powf(v105, 2.1992);
      v11.f32[1] = v109;
      v12 = vbsl_s8(v9, (int8x8_t)vneg_f32(v11), (int8x8_t)v11);
      __asm { FMOV            V1.2S, #1.0 }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcge_f32((float32x2_t)v12, (float32x2_t)_D1), _D1, vbic_s8(v12, (int8x8_t)vclez_f32((float32x2_t)v12)));
      v116.i64[1] = __PAIR64__(v3, LODWORD(v7));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 1:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 2:
      v23 = *(int8x8_t **)(a2 + 8);
      v24 = v23[1].i32[1];
      v25 = *(float *)v23[1].i32;
      v26 = powf(fabsf(v25), 2.1992);
      if (v25 >= 0.0)
        v27 = v26;
      else
        v27 = -v26;
      v28 = (float32x2_t)vand_s8(*v23, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v23), (int8x8_t)vcgez_f32((float32x2_t)*v23)));
      v29 = (int8x8_t)vcltz_s32((int32x2_t)v28);
      v30 = vabs_f32(v28);
      v106 = v30.f32[0];
      v110 = powf(v30.f32[1], 2.1992);
      v31.f32[0] = powf(v106, 2.1992);
      v31.f32[1] = v110;
      *(int8x8_t *)v116.i8 = vbsl_s8(v29, (int8x8_t)vneg_f32(v31), (int8x8_t)v31);
      v116.i64[1] = __PAIR64__(v24, LODWORD(v27));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 3:
      v32 = *(int8x8_t **)(a2 + 8);
      v33 = v32[1].i32[1];
      v34 = *(float *)v32[1].i32;
      v111 = (int32x2_t)vand_s8(*v32, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v32), (int8x8_t)vcgez_f32((float32x2_t)*v32)));
      v35 = fabsf(*(float *)v111.i32);
      if (v35 <= 0.04045)
        v107 = v35 / 12.92;
      else
        v107 = powf((float)(v35 + 0.055) / 1.055, 2.4);
      v79 = fabsf(*(float *)&v111.i32[1]);
      if (v79 <= 0.04045)
        v80 = v79 / 12.92;
      else
        v80 = powf((float)(v79 + 0.055) / 1.055, 2.4);
      v91 = fabsf(v34);
      if (v91 <= 0.04045)
      {
        v92 = v91 / 12.92;
      }
      else
      {
        v103 = v80;
        v92 = powf((float)(v91 + 0.055) / 1.055, 2.4);
        v80 = v103;
      }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcltz_s32(v111), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v80), LODWORD(v107))), (int8x8_t)__PAIR64__(LODWORD(v80), LODWORD(v107)));
      if (v34 < 0.0)
        v92 = -v92;
      v116.i64[1] = __PAIR64__(v33, LODWORD(v92));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v116);
      goto LABEL_126;
    case 4:
      v36 = *(_QWORD *)(a2 + 8);
      v37 = *(_DWORD *)(v36 + 12);
      v38 = *(float *)(v36 + 8);
      v112 = (int32x2_t)vand_s8(*(int8x8_t *)v36, vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v36), (int8x8_t)vcgez_f32(*(float32x2_t *)v36)));
      v39 = fabsf(*(float *)v112.i32);
      if (v39 >= 0.0031308)
        v40 = (float)(powf(v39, 0.41667) * 1.055) + -0.055;
      else
        v40 = v39 * 12.92;
      v108 = v40;
      v81 = fabsf(*(float *)&v112.i32[1]);
      if (v81 >= 0.0031308)
        v82 = (float)(powf(v81, 0.41667) * 1.055) + -0.055;
      else
        v82 = v81 * 12.92;
      v93 = fabsf(v38);
      if (v93 < 0.0031308)
        goto LABEL_111;
      goto LABEL_128;
    case 5:
      v41 = *(_QWORD *)(a2 + 8);
      v42 = *(float *)v41;
      v43 = *(_DWORD *)(v41 + 12);
      v44 = *(float *)(v41 + 4);
      v45 = *(float *)(v41 + 8);
      if (fabsf(*(float *)v41) <= 0.03125)
      {
        v48 = v42 * 0.0625;
      }
      else
      {
        v46 = *(float *)v41;
        v47 = powf(v42, 1.8);
        if (v46 >= 0.0)
          v48 = v47;
        else
          v48 = -v47;
      }
      if (fabsf(v44) <= 0.03125)
      {
        v84 = v44 * 0.0625;
      }
      else
      {
        v83 = powf(v44, 1.8);
        if (v44 >= 0.0)
          v84 = v83;
        else
          v84 = -v83;
      }
      if (fabsf(v45) <= 0.03125)
      {
        v94 = v45 * 0.0625;
      }
      else
      {
        v94 = powf(v45, 1.8);
        if (v45 < 0.0)
          v94 = -v94;
      }
      goto LABEL_125;
    case 6:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 7:
      v22 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
      goto LABEL_27;
    case 8:
      return;
    case 9:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      v18 = WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::HWBA<float>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 10:
      v113 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::Lab<float>,WebCore::LCHA<float>,void>::convert((uint64_t)&v113);
      *(_QWORD *)&v114 = __PAIR64__(v50, v49);
      *((_QWORD *)&v114 + 1) = __PAIR64__(v52, v51);
      goto LABEL_31;
    case 11:
      v114 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_31:
      LODWORD(v115) = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)0>,WebCore::Lab<float>,void>::convert((float *)&v114);
      *(_QWORD *)((char *)&v115 + 4) = __PAIR64__(v54, v53);
      HIDWORD(v115) = v55;
      goto LABEL_48;
    case 12:
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(float *)v56;
      v58 = *(_DWORD *)(v56 + 12);
      v59 = 0.0;
      v60 = *(float *)(v56 + 4);
      v61 = *(float *)(v56 + 8);
      if (*(float *)v56 >= 0.0031308)
      {
        v85 = (float)(powf(v57, 0.41667) * 1.055) + -0.055;
        if (v85 > 0.0)
          v86 = v85;
        else
          v86 = 0.0;
        if (v85 >= 1.0)
          v59 = 1.0;
        else
          v59 = v86;
      }
      else
      {
        v62 = v57 * 12.92;
        if (v62 >= 0.0)
          v59 = v62;
      }
      if (v60 >= 0.0031308)
      {
        v95 = (float)(powf(v60, 0.41667) * 1.055) + -0.055;
        v96 = 0.0;
        if (v95 > 0.0)
          v96 = v95;
        if (v95 >= 1.0)
          v87 = 1.0;
        else
          v87 = v96;
      }
      else if ((float)(v60 * 12.92) >= 0.0)
      {
        v87 = v60 * 12.92;
      }
      else
      {
        v87 = 0.0;
      }
      if (v61 >= 0.0031308)
      {
        v101 = (float)(powf(v61, 0.41667) * 1.055) + -0.055;
        v102 = 0.0;
        if (v101 > 0.0)
          v102 = v101;
        if (v101 >= 1.0)
          v97 = 1.0;
        else
          v97 = v102;
      }
      else
      {
        v97 = v61 * 12.92;
        if ((float)(v61 * 12.92) < 0.0)
          v97 = 0.0;
      }
      v116.i64[0] = __PAIR64__(LODWORD(v87), LODWORD(v59));
      v116.i64[1] = __PAIR64__(v58, LODWORD(v97));
      break;
    case 13:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::OKLab<float>,WebCore::OKLCHA<float>,void>::convert((uint64_t)&v115);
      v116.i64[0] = __PAIR64__(v64, v63);
      v116.i64[1] = __PAIR64__(v66, v65);
      goto LABEL_38;
    case 14:
      v116 = *(int8x16_t *)*(_QWORD *)(a2 + 8);
LABEL_38:
      WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::OKLab<float>,void>::convert((float *)v116.i32);
      return;
    case 15:
      v67 = *(_QWORD *)(a2 + 8);
      v68 = *(float *)v67;
      v43 = *(_DWORD *)(v67 + 12);
      v69 = *(float *)(v67 + 4);
      v70 = *(float *)(v67 + 8);
      if (*(float *)v67 <= 0.03125)
      {
        v48 = v68 * 0.0625;
      }
      else
      {
        v71 = powf(v68, 1.8);
        if (v71 > 0.0)
          v72 = v71;
        else
          v72 = 0.0;
        if (v71 >= 1.0)
          v48 = 1.0;
        else
          v48 = v72;
      }
      if (v69 <= 0.03125)
      {
        v84 = v69 * 0.0625;
      }
      else
      {
        v88 = powf(v69, 1.8);
        v89 = 0.0;
        if (v88 > 0.0)
          v89 = v88;
        if (v88 >= 1.0)
          v84 = 1.0;
        else
          v84 = v89;
      }
      if (v70 <= 0.03125)
      {
        v94 = v70 * 0.0625;
      }
      else
      {
        v98 = powf(v70, 1.8);
        v99 = 0.0;
        if (v98 > 0.0)
          v99 = v98;
        if (v98 >= 1.0)
          v94 = 1.0;
        else
          v94 = v99;
      }
LABEL_125:
      v116.i64[0] = __PAIR64__(LODWORD(v84), LODWORD(v48));
      v116.i64[1] = __PAIR64__(v43, LODWORD(v94));
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert((uint64_t)&v116);
      goto LABEL_126;
    case 16:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert((uint64_t)&v115);
      goto LABEL_126;
    case 18:
      v115 = *(_OWORD *)*(_QWORD *)(a2 + 8);
LABEL_48:
      WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert((uint64_t)&v115);
LABEL_126:
      v116.i64[0] = __PAIR64__(v19, LODWORD(v18));
      v116.i64[1] = __PAIR64__(v21, v20);
      break;
    case 19:
      v73 = *(_QWORD *)(a2 + 8);
      v74 = *(float *)(v73 + 4);
      v75 = *(float *)(v73 + 8);
      v37 = *(_DWORD *)(v73 + 12);
      v76 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, *(float *)v73), (float32x2_t)0x3FF01FB4BFC4C8F9, v74), (float32x2_t)0x3D2A35A3BEFF49E9, v75);
      v38 = (float)((float)((float)(*(float *)v73 * 0.05563) + 0.0) + (float)(v74 * -0.20398)) + (float)(v75 * 1.057);
      v112 = (int32x2_t)vand_s8(v76, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v76), (int8x8_t)vcgez_f32((float32x2_t)v76)));
      v77 = fabsf(*(float *)v112.i32);
      if (v77 >= 0.0031308)
        v78 = (float)(powf(v77, 0.41667) * 1.055) + -0.055;
      else
        v78 = v77 * 12.92;
      v108 = v78;
      v90 = fabsf(*(float *)&v112.i32[1]);
      if (v90 >= 0.0031308)
        v82 = (float)(powf(v90, 0.41667) * 1.055) + -0.055;
      else
        v82 = v90 * 12.92;
      v93 = fabsf(v38);
      if (v93 >= 0.0031308)
      {
LABEL_128:
        v104 = v82;
        v100 = (float)(powf(v93, 0.41667) * 1.055) + -0.055;
        v82 = v104;
      }
      else
      {
LABEL_111:
        v100 = v93 * 12.92;
      }
      *(int8x8_t *)v116.i8 = vbsl_s8((int8x8_t)vcltz_s32(v112), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v108))), (int8x8_t)__PAIR64__(LODWORD(v82), LODWORD(v108)));
      if (v38 < 0.0)
        v100 = -v100;
      v116.i64[1] = __PAIR64__(v37, LODWORD(v100));
      break;
    default:
      v22 = vandq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 8), vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8)), (int8x16_t)vcgezq_f32(*(float32x4_t *)*(_QWORD *)(a2 + 8))));
LABEL_27:
      v116 = v22;
      break;
  }
  WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v116);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::A98RGBDescriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _OWORD v9[2];
  int v10;
  _OWORD v11[2];
  int v12;
  int8x16_t v13;

  v13 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v12 = 1065207884;
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::A98RGBDescriptor>::linearToXYZ;
  v11[1] = unk_1968BFBBC;
  v10 = 1065831128;
  v9[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v9[1] = unk_1968BFBE0;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v13.i32, (float *)v11, (float *)v9);
  v3 = v2;
  v5 = v4;
  v6 = fabsf(v1);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v3);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

float WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(float *a1, float *a2, float *a3)
{
  float v4;
  float v5;
  float v6;

  v4 = WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>(a2, a1);
  return (float)((float)((float)(*a3 * v4) + 0.0) + (float)(a3[1] * v5)) + (float)(a3[2] * v6);
}

float WebCore::ColorMatrix<3ul,3ul>::transformedColorComponents<4ul>(float *a1, float *a2)
{
  return (float)((float)((float)(*a1 * *a2) + 0.0) + (float)(a1[1] * a2[1])) + (float)(a1[2] * a2[2]);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int8x16_t v15;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = 0.0;
  v4 = *(float *)(a1 + 4);
  v5 = *(float *)(a1 + 8);
  if (*(float *)a1 <= 0.04045)
  {
    v14 = v1 / 12.92;
    if (v14 >= 0.0)
      v3 = v14;
  }
  else
  {
    v6 = powf((float)(v1 + 0.055) / 1.055, 2.4);
    if (v6 > 0.0)
      v7 = v6;
    else
      v7 = 0.0;
    if (v6 >= 1.0)
      v3 = 1.0;
    else
      v3 = v7;
  }
  if (v4 <= 0.04045)
  {
    if ((float)(v4 / 12.92) >= 0.0)
      v10 = v4 / 12.92;
    else
      v10 = 0.0;
  }
  else
  {
    v8 = powf((float)(v4 + 0.055) / 1.055, 2.4);
    v9 = 0.0;
    if (v8 > 0.0)
      v9 = v8;
    if (v8 >= 1.0)
      v10 = 1.0;
    else
      v10 = v9;
  }
  if (v5 <= 0.04045)
  {
    v13 = v5 / 12.92;
    if ((float)(v5 / 12.92) < 0.0)
      v13 = 0.0;
  }
  else
  {
    v11 = powf((float)(v5 + 0.055) / 1.055, 2.4);
    v12 = 0.0;
    if (v11 > 0.0)
      v12 = v11;
    if (v11 >= 1.0)
      v13 = 1.0;
    else
      v13 = v12;
  }
  v15.i64[0] = __PAIR64__(LODWORD(v10), LODWORD(v3));
  v15.i64[1] = __PAIR64__(v2, LODWORD(v13));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(&v15);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedLinearEncoded<float,WebCore::DisplayP3Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _OWORD v9[2];
  int v10;
  _OWORD v11[2];
  int v12;
  int8x16_t v13;

  v13 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v12 = 1065721848;
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::DisplayP3Descriptor>::linearToXYZ;
  v11[1] = unk_1968BFC04;
  v10 = 1065831128;
  v9[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v9[1] = unk_1968BFBE0;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v13.i32, (float *)v11, (float *)v9);
  v3 = v2;
  v5 = v4;
  v6 = fabsf(v1);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v3);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::ProPhotoRGBDescriptor>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  _OWORD v13[2];
  int v14;
  _OWORD v15[2];
  int v16;
  float32x2_t v17;
  float v18;
  int v19;

  v1 = *(float *)a1;
  v2 = *(float *)(a1 + 4);
  v3 = *(float *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v15[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v15[1] = unk_1968BFC28;
  v16 = 1068124526;
  v13[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v13[1] = unk_1968BFBE0;
  v14 = 1065831128;
  v17 = vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0x3E937E8B3F4C3A6FLL, v1), (float32x2_t)0x3F363AD53E0A6CF7, v2), (float32x2_t)0x38BC9C873D00667BLL, v3);
  v18 = (float)((float)((float)(v1 * 0.0) + 0.0) + (float)(v2 * 0.0)) + (float)(v3 * 0.8251);
  v19 = v4;
  v5 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)&v17, (float *)v15, (float *)v13);
  v7 = v6;
  v9 = v8;
  v10 = fabsf(v5);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v7);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
  v12 = fabsf(v9);
  if (v12 >= 0.0031308)
    powf(v12, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  double v9;
  float v10;
  double v11;
  int8x16_t v12;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (fabsf(*(float *)a1) >= 0.081243)
  {
    v6 = *(float *)a1;
    v7 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 < 0.0)
      v7 = -v7;
    v5 = v7;
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (fabsf(v3) >= 0.081243)
  {
    v9 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v3 < 0.0)
      v9 = -v9;
    v8 = v9;
  }
  else
  {
    v8 = v3 / 4.5;
  }
  if (fabsf(v4) >= 0.081243)
  {
    v11 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v4 < 0.0)
      v11 = -v11;
    v10 = v11;
  }
  else
  {
    v10 = v4 / 4.5;
  }
  v12.i64[0] = __PAIR64__(LODWORD(v8), LODWORD(v5));
  v12.i64[1] = __PAIR64__(v2, LODWORD(v10));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v12);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(int8x16_t *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _OWORD v9[2];
  int v10;
  _OWORD v11[2];
  int v12;
  int8x16_t v13;

  v13 = vandq_s8(*a1, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)a1), (int8x16_t)vcgezq_f32(*(float32x4_t *)a1)));
  v12 = 1065864796;
  v11[0] = WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>::linearToXYZ;
  v11[1] = unk_1968BFC4C;
  v10 = 1065831128;
  v9[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v9[1] = unk_1968BFBE0;
  v1 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>((float *)v13.i32, (float *)v11, (float *)v9);
  v3 = v2;
  v5 = v4;
  v6 = fabsf(v1);
  if (v6 >= 0.0031308)
    powf(v6, 0.41667);
  v7 = fabsf(v3);
  if (v7 >= 0.0031308)
    powf(v7, 0.41667);
  v8 = fabsf(v5);
  if (v8 >= 0.0031308)
    powf(v8, 0.41667);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::XYZA<float,(WebCore::WhitePoint)0>,void>::convert(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  _OWORD v12[2];
  int v13;
  _OWORD v14[2];
  int v15;
  float v16[4];

  v16[0] = WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(a1);
  v16[1] = v1;
  v16[2] = v2;
  v16[3] = v3;
  v15 = 1068124526;
  v14[0] = WebCore::ChromaticAdaptation<(WebCore::WhitePoint)0,(WebCore::WhitePoint)1>::matrix;
  v14[1] = unk_1968BFC28;
  v13 = 1065831128;
  v12[0] = WebCore::ExtendedLinearEncoded<float,WebCore::SRGBADescriptor>::xyzToLinear;
  v12[1] = unk_1968BFBE0;
  v4 = WebCore::applyMatricesToColorComponents<float,WebCore::ColorMatrix<3ul,3ul>,WebCore::ColorMatrix<3ul,3ul>>(v16, (float *)v14, (float *)v12);
  v6 = v5;
  v8 = v7;
  v9 = fabsf(v4);
  if (v9 >= 0.0031308)
    powf(v9, 0.41667);
  v10 = fabsf(v6);
  if (v10 >= 0.0031308)
    powf(v10, 0.41667);
  v11 = fabsf(v8);
  if (v11 >= 0.0031308)
    powf(v11, 0.41667);
}

float WebCore::XYZA<float,(WebCore::WhitePoint)0>::resolved(uint64_t a1)
{
  return *(float *)a1;
}

void WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::OKLab<float>,void>::convert(float *a1)
{
  float v1;
  int v2;
  int v3;
  float v4;
  float v5;
  int8x8_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int32x2_t v16;
  int8x8_t v17;
  float v18;
  int v19;

  v1 = WebCore::ColorConversion<WebCore::XYZA<float,(WebCore::WhitePoint)1>,WebCore::OKLab<float>,void>::convert(a1);
  v3 = v2;
  v6 = (int8x8_t)vmla_n_f32(vmla_n_f32(vmla_n_f32(0, (float32x2_t)0xBF78205A404F6C0DLL, v1), (float32x2_t)0x3FF01FB4BFC4C8F9, v4), (float32x2_t)0x3D2A35A3BEFF49E9, v5);
  v7 = (float)((float)((float)(v1 * 0.05563) + 0.0) + (float)(v4 * -0.20398)) + (float)(v5 * 1.057);
  v16 = (int32x2_t)vand_s8(v6, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)v6), (int8x8_t)vcgez_f32((float32x2_t)v6)));
  v8 = fabsf(*(float *)v16.i32);
  if (v8 >= 0.0031308)
    v9 = (float)(powf(v8, 0.41667) * 1.055) + -0.055;
  else
    v9 = v8 * 12.92;
  v15 = v9;
  v10 = fabsf(*(float *)&v16.i32[1]);
  if (v10 >= 0.0031308)
    v11 = (float)(powf(v10, 0.41667) * 1.055) + -0.055;
  else
    v11 = v10 * 12.92;
  v12 = fabsf(v7);
  if (v12 >= 0.0031308)
  {
    v14 = v11;
    v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    v11 = v14;
  }
  else
  {
    v13 = v12 * 12.92;
  }
  v17 = vbsl_s8((int8x8_t)vcltz_s32(v16), (int8x8_t)vneg_f32((float32x2_t)__PAIR64__(LODWORD(v11), LODWORD(v15))), (int8x8_t)__PAIR64__(LODWORD(v11), LODWORD(v15)));
  if (v7 < 0.0)
    v13 = -v13;
  v18 = v13;
  v19 = v3;
  WebCore::ColorConversion<WebCore::HSLA<float>,WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,void>::convert((uint64_t)&v17);
}

void WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(uint64_t a1)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  double v10;
  int8x16_t v11;

  v1 = *(float *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(float *)(a1 + 4);
  v4 = *(float *)(a1 + 8);
  if (*(float *)a1 >= 0.081243)
  {
    v6 = pow(((float)(v1 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v6 >= 1.0)
    {
      v5 = 1.0;
    }
    else if (v6 <= 0.0)
    {
      v5 = 0.0;
    }
    else
    {
      v5 = v6;
    }
  }
  else
  {
    v5 = v1 / 4.5;
  }
  if (v3 >= 0.081243)
  {
    v8 = pow(((float)(v3 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v8 >= 1.0)
    {
      v7 = 1.0;
    }
    else if (v8 <= 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      v7 = v8;
    }
  }
  else
  {
    v7 = v3 / 4.5;
  }
  if (v4 >= 0.081243)
  {
    v10 = pow(((float)(v4 + 1.0993) + -1.0) / 1.09929681, 2.22222228);
    if (v10 >= 1.0)
    {
      v9 = 1.0;
    }
    else if (v10 <= 0.0)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = v4 / 4.5;
  }
  v11.i64[0] = __PAIR64__(LODWORD(v7), LODWORD(v5));
  v11.i64[1] = __PAIR64__(v2, LODWORD(v9));
  WebCore::ColorConversion<WebCore::ExtendedGammaEncoded<float,WebCore::SRGBADescriptor>,WebCore::ExtendedLinearEncoded<float,WebCore::Rec2020Descriptor>,void>::convert(&v11);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RetainPtr<DDScannerResult>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RetainPtr<DDScannerResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ImageOverlayDataDetectionResultIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = (const void *)v23[1];
          v23[1] = 0;
          if (v24)
            CFRelease(v24);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          CFRelease(v13);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(const void **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

PAL *std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::canCreateRevealItems(void)::$_0 &&>>()
{
  PAL *result;
  BOOL v1;

  result = (PAL *)PAL::RevealCoreLibrary((PAL *)1);
  if (result)
  {
    result = (PAL *)PAL::getRVItemClass(result);
    v1 = result != 0;
  }
  else
  {
    v1 = 0;
  }
  byte_1EE33573A = v1;
  return result;
}

WebCore::Node *WebCore::firstPositionInNode@<X0>(WebCore::Node *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::Node *v3;

  if ((*((_WORD *)this + 14) & 1) != 0)
  {
    *((_DWORD *)this + 6) += 2;
    v3 = this;
    WebCore::Position::Position(a2, (uint64_t *)&v3, 0, 0);
    this = v3;
    v3 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return (WebCore::Node *)WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 6) += 2;
    *(_QWORD *)a2 = this;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(a2 + 12) & 0xF0 | 3;
  }
  return this;
}

void sub_194B59D00(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10)
{
  if (a10)
  {
    if (*((_DWORD *)a10 + 6) == 2)
    {
      if ((*((_WORD *)a10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a10, a2);
    }
    else
    {
      *((_DWORD *)a10 + 6) -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_storage_base<WebCore::SimpleRange,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::SimpleRange,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      v4 = *a2;
      *a2 = 0;
      v5 = *(_QWORD *)result;
      *(_QWORD *)v3 = v4;
      if (v5)
      {
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
      }
      *(_DWORD *)(v3 + 8) = *((_DWORD *)a2 + 2);
      v6 = a2[2];
      a2[2] = 0;
      result = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v6;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 6);
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    v7 = *(_QWORD *)(result + 16);
    *(_QWORD *)(v3 + 16) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    result = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    *(_BYTE *)(v3 + 32) = 0;
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v8;
    *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(result + 16) = v9;
    *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

void WebCore::PasteboardWebContent::~PasteboardWebContent(WebCore::PasteboardWebContent *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  uint64_t v53;
  WTF *v54;
  WTF *v56;
  WTF *v58;
  WTF *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)this + 8);
    v5 = 16 * v3;
    do
    {
      v4 = std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(v4, a2)+ 16;
      v5 -= 16;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v22 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v9 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v70 = v24;
              v74 = v23;
              v66 = v9;
              atomic_store(1u, v25);
              v28 = v25;
              v29 = v25[6];
              if ((_DWORD)v29 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v29])(&v78, v25 + 2);
              v28[6] = -1;
              WTF::fastFree((WTF *)v28, a2);
              v9 = v66;
              v24 = v70;
              v23 = v74;
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v54 = *(WTF **)(v9 + 8);
      if ((WTF *)(v9 + 24) != v54 && v54 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        v62 = v9;
        WTF::fastFree(v54, a2);
        v9 = v62;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v30 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v12 + 8);
        v32 = v31 + 16 * v30;
        do
        {
          v33 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v71 = v32;
              v75 = v31;
              v67 = v12;
              atomic_store(1u, v33);
              v36 = v33;
              v37 = v33[6];
              if ((_DWORD)v37 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v37])(&v79, v33 + 2);
              v36[6] = -1;
              WTF::fastFree((WTF *)v36, a2);
              v12 = v67;
              v32 = v71;
              v31 = v75;
            }
          }
          v31 += 16;
        }
        while (v31 != v32);
      }
      v56 = *(WTF **)(v12 + 8);
      if ((WTF *)(v12 + 24) != v56 && v56 != 0)
      {
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 16) = 0;
        v63 = v12;
        WTF::fastFree(v56, a2);
        v12 = v63;
      }
      WTF::fastFree((WTF *)v12, a2);
    }
  }
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v38 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(_QWORD *)(v15 + 8);
        v40 = v39 + 16 * v38;
        do
        {
          v41 = *(unsigned int **)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
          {
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v72 = v40;
              v76 = v39;
              v68 = v15;
              atomic_store(1u, v41);
              v44 = v41;
              v45 = v41[6];
              if ((_DWORD)v45 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v45])(&v80, v41 + 2);
              v44[6] = -1;
              WTF::fastFree((WTF *)v44, a2);
              v15 = v68;
              v40 = v72;
              v39 = v76;
            }
          }
          v39 += 16;
        }
        while (v39 != v40);
      }
      v58 = *(WTF **)(v15 + 8);
      if ((WTF *)(v15 + 24) != v58 && v58 != 0)
      {
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 0;
        v64 = v15;
        WTF::fastFree(v58, a2);
        v15 = v64;
      }
      WTF::fastFree((WTF *)v15, a2);
    }
  }
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v46 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(v18 + 8);
        v48 = v47 + 16 * v46;
        do
        {
          v49 = *(unsigned int **)(v47 + 8);
          *(_QWORD *)(v47 + 8) = 0;
          if (v49)
          {
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              v73 = v48;
              v77 = v47;
              v69 = v18;
              atomic_store(1u, v49);
              v52 = v49;
              v53 = v49[6];
              if ((_DWORD)v53 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v53])(&v81, v49 + 2);
              v52[6] = -1;
              WTF::fastFree((WTF *)v52, a2);
              v18 = v69;
              v48 = v73;
              v47 = v77;
            }
          }
          v47 += 16;
        }
        while (v47 != v48);
      }
      v60 = *(WTF **)(v18 + 8);
      if ((WTF *)(v18 + 24) != v60 && v60 != 0)
      {
        *(_QWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 16) = 0;
        v65 = v18;
        WTF::fastFree(v60, a2);
        v18 = v65;
      }
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v21 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v21 -= 2;
  }
}

uint64_t std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>::~pair(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v8 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v3 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v10;
              v18 = v9;
              v19 = (WTF *)v11;
              v20 = v3;
              atomic_store(1u, v11);
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v14])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v3 = v20;
              v10 = v17;
              v9 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v21 = v3;
        WTF::fastFree(v15, a2);
        v3 = v21;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WebCore::PasteboardWriterData::WebContent::WebContent(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD **v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;

  v3 = result;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)result = v4;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(unsigned int **)(a2 + 16);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)(result + 16) = v5;
  v7 = *(unsigned int **)(a2 + 24);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(result + 24) = v7;
  v9 = *(unsigned int **)(a2 + 32);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_QWORD *)(result + 32) = v9;
  v11 = *(unsigned int **)(a2 + 40);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)(result + 40) = v11;
  v13 = *(_DWORD **)(a2 + 48);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(result + 48) = v13;
  v14 = *(_DWORD **)(a2 + 56);
  if (v14)
    *v14 += 2;
  v15 = *(unsigned int *)(a2 + 76);
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = v14;
  *(_DWORD *)(result + 76) = v15;
  if (!(_DWORD)v15)
    return v3;
  if (!(v15 >> 28))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v15));
    *(_DWORD *)(v3 + 72) = v15;
    *(_QWORD *)(v3 + 64) = v16;
    v17 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v17)
    {
      v18 = *(_DWORD ***)(a2 + 64);
      v19 = &v18[2 * v17];
      do
      {
        v20 = *v18;
        if (*v18)
          *v20 += 2;
        *v16 = v20;
        v21 = v18[1];
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v16[1] = v21;
        v16 += 2;
        v18 += 2;
      }
      while (v18 != v19);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void sub_194B5A5E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  uint64_t v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WTF *v63;
  WTF *v65;
  WTF *v67;
  WTF *v69;

  v16 = *(WTF::StringImpl **)(v14 + 56);
  *(_QWORD *)(v14 + 56) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(WTF::StringImpl **)(v14 + 48);
  *(_QWORD *)(v14 + 48) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *(unsigned int **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = 0;
  if (v18)
  {
    v19 = v18;
    do
    {
      v20 = __ldaxr(v18);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v18));
    if (!v21)
    {
      atomic_store(1u, v18);
      v35 = v18[5];
      if ((_DWORD)v35)
      {
        v36 = *((_QWORD *)v19 + 1);
        v37 = v36 + 16 * v35;
        do
        {
          v38 = *(unsigned int **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
          {
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              v41 = v38[6];
              if ((_DWORD)v41 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v41])(&a11, v38 + 2);
              v38[6] = -1;
              WTF::fastFree((WTF *)v38, a2);
            }
          }
          v36 += 16;
        }
        while (v36 != v37);
      }
      v63 = (WTF *)*((_QWORD *)v19 + 1);
      if (v19 + 6 != (unsigned int *)v63 && v63 != 0)
      {
        *((_QWORD *)v19 + 1) = 0;
        v19[4] = 0;
        WTF::fastFree(v63, a2);
      }
      WTF::fastFree((WTF *)v19, a2);
    }
  }
  v22 = *(unsigned int **)(v14 + 32);
  *(_QWORD *)(v14 + 32) = 0;
  if (v22)
  {
    v23 = v22;
    do
    {
      v24 = __ldaxr(v22);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v22));
    if (!v25)
    {
      atomic_store(1u, v22);
      v42 = v22[5];
      if ((_DWORD)v42)
      {
        v43 = *((_QWORD *)v23 + 1);
        v44 = v43 + 16 * v42;
        do
        {
          v45 = *(unsigned int **)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v45);
              v48 = v45[6];
              if ((_DWORD)v48 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v48])(&a12, v45 + 2);
              v45[6] = -1;
              WTF::fastFree((WTF *)v45, a2);
            }
          }
          v43 += 16;
        }
        while (v43 != v44);
      }
      v65 = (WTF *)*((_QWORD *)v23 + 1);
      if (v23 + 6 != (unsigned int *)v65 && v65 != 0)
      {
        *((_QWORD *)v23 + 1) = 0;
        v23[4] = 0;
        WTF::fastFree(v65, a2);
      }
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v26 = *(unsigned int **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = 0;
  if (v26)
  {
    v27 = v26;
    do
    {
      v28 = __ldaxr(v26);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v26));
    if (!v29)
    {
      atomic_store(1u, v26);
      v49 = v26[5];
      if ((_DWORD)v49)
      {
        v50 = *((_QWORD *)v27 + 1);
        v51 = v50 + 16 * v49;
        do
        {
          v52 = *(unsigned int **)(v50 + 8);
          *(_QWORD *)(v50 + 8) = 0;
          if (v52)
          {
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              atomic_store(1u, v52);
              v55 = v52[6];
              if ((_DWORD)v55 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v55])(&a13, v52 + 2);
              v52[6] = -1;
              WTF::fastFree((WTF *)v52, a2);
            }
          }
          v50 += 16;
        }
        while (v50 != v51);
      }
      v67 = (WTF *)*((_QWORD *)v27 + 1);
      if (v27 + 6 != (unsigned int *)v67 && v67 != 0)
      {
        *((_QWORD *)v27 + 1) = 0;
        v27[4] = 0;
        WTF::fastFree(v67, a2);
      }
      WTF::fastFree((WTF *)v27, a2);
    }
  }
  v30 = *(unsigned int **)(v14 + 16);
  *(_QWORD *)(v14 + 16) = 0;
  if (v30)
  {
    v31 = v30;
    do
    {
      v32 = __ldaxr(v30);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v30));
    if (!v33)
    {
      atomic_store(1u, v30);
      v56 = v30[5];
      if ((_DWORD)v56)
      {
        v57 = *((_QWORD *)v31 + 1);
        v58 = v57 + 16 * v56;
        do
        {
          v59 = *(unsigned int **)(v57 + 8);
          *(_QWORD *)(v57 + 8) = 0;
          if (v59)
          {
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
            {
              atomic_store(1u, v59);
              v62 = v59[6];
              if ((_DWORD)v62 != -1)
                ((void (*)(char *, unsigned int *))off_1E327F9E0[v62])(&a14, v59 + 2);
              v59[6] = -1;
              WTF::fastFree((WTF *)v59, a2);
            }
          }
          v57 += 16;
        }
        while (v57 != v58);
      }
      v69 = (WTF *)*((_QWORD *)v31 + 1);
      if (v31 + 6 != (unsigned int *)v69 && v69 != 0)
      {
        *((_QWORD *)v31 + 1) = 0;
        v31[4] = 0;
        WTF::fastFree(v69, a2);
      }
      WTF::fastFree((WTF *)v31, a2);
    }
  }
  v34 = *(WTF::StringImpl **)v14;
  *(_QWORD *)v14 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  _Unwind_Resume(exception_object);
}

