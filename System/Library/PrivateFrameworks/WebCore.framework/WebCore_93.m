unint64_t WebCore::LegacyInlineFlowBox::logicalVisualOverflowRect(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 20);
  }
  else
  {
    v4 = (float)a2;
    if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
    {
      v6 = v4 * 0.015625;
      v5 = *(float *)(a1 + 44);
    }
    else
    {
      v5 = v4 * 0.015625;
      v6 = *(float *)(a1 + 48);
    }
    v7 = floorf(v5 * 64.0);
    if (v7 > -2147500000.0)
      v8 = (int)v7;
    else
      v8 = 0x80000000;
    if (v7 < 2147500000.0)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFLL;
    v10 = floorf(v6 * 64.0);
    if (v10 > -2147500000.0)
      v11 = (int)v10;
    else
      v11 = 0x80000000;
    if (v10 < 2147500000.0)
      v12 = v11;
    else
      v12 = 0x7FFFFFFFLL;
    v3 = v9 | (v12 << 32);
  }
  v13 = *(_QWORD *)(a1 + 32);
  if (v13)
    v13 = *(_QWORD *)(v13 + 8);
  if ((*(_BYTE *)(v13 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196356688);
  }
  if ((*(_BYTE *)(v13 + 21) & 0x10) != 0)
    LODWORD(v14) = v3;
  else
    v14 = HIDWORD(v3);
  if ((*(_BYTE *)(v13 + 21) & 0x10) != 0)
    v15 = HIDWORD(v3);
  else
    LODWORD(v15) = v3;
  return v15 | ((unint64_t)v14 << 32);
}

uint64_t WebCore::LegacyInlineFlowBox::setOverflowFromLogicalRects(uint64_t result, unint64_t *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  int v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  signed int v29;
  BOOL v30;
  signed int v31;
  signed int v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = result;
  if ((*(_WORD *)(result + 52) & 0x800) != 0)
  {
    v5 = *a2;
    v7 = a2[1];
    v6 = HIDWORD(*a2);
    v9 = (float)a3 * 0.015625;
    v11 = *(float *)(result + 40);
    v8 = *(float *)(result + 44);
    v13 = a4 - a3;
    if (__OFSUB__(a4, a3))
      v13 = (a4 >> 31) + 0x7FFFFFFF;
    v12 = (float)v13 * 0.015625;
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)a2;
    LODWORD(v5) = *((_DWORD *)a2 + 1);
    v7 = *((unsigned int *)a2 + 3) | ((unint64_t)*((unsigned int *)a2 + 2) << 32);
    v8 = (float)a3 * 0.015625;
    v9 = *(float *)(result + 48);
    v10 = a4 - a3;
    if (__OFSUB__(a4, a3))
      v10 = (a4 >> 31) + 0x7FFFFFFF;
    v11 = (float)v10 * 0.015625;
    v12 = *(float *)(result + 40);
  }
  v14 = floorf(v8 * 64.0);
  if (v14 > -2147500000.0)
    v15 = (int)v14;
  else
    v15 = 0x80000000;
  if (v14 < 2147500000.0)
    v16 = v15;
  else
    v16 = 0x7FFFFFFFLL;
  v17 = floorf(v9 * 64.0);
  if (v17 > -2147500000.0)
    v18 = (int)v17;
  else
    v18 = 0x80000000;
  if (v17 < 2147500000.0)
    v19 = v18;
  else
    v19 = 0x7FFFFFFFLL;
  v20 = v9 + v12;
  v21 = ceilf((float)(v8 + v11) * 64.0);
  if (v21 >= 2147500000.0)
  {
    v22 = 0x7FFFFFFF;
  }
  else if (v21 <= -2147500000.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v21;
  }
  v23 = ceilf(v20 * 64.0);
  if (v23 >= 2147500000.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  v25 = __OFSUB__(v22, (_DWORD)v16);
  v26 = v22 - v16;
  LODWORD(v27) = (v22 >> 31) + 0x7FFFFFFF;
  if (v25)
    v27 = v27;
  else
    v27 = v26;
  LODWORD(v28) = (v24 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v24, (_DWORD)v19))
    v28 = v28;
  else
    v28 = v24 - v19;
  if ((int)v16 > (int)v5)
    goto LABEL_49;
  v29 = v16 + v27;
  if (__OFADD__((_DWORD)v16, (_DWORD)v27))
    v29 = (v16 >> 31) + 0x7FFFFFFF;
  v30 = 0;
  v31 = v5 + v7;
  if (__OFADD__((_DWORD)v5, (_DWORD)v7))
    v31 = (v5 >> 31) + 0x7FFFFFFF;
  if (v29 >= v31 && (int)v19 <= (int)v6)
  {
    v32 = v19 + v28;
    if (__OFADD__((_DWORD)v19, (_DWORD)v28))
      v32 = (v19 >> 31) + 0x7FFFFFFF;
    v33 = v6 + HIDWORD(v7);
    if (__OFADD__((_DWORD)v6, HIDWORD(v7)))
      v33 = (v6 >> 31) + 0x7FFFFFFF;
    v30 = v32 >= v33;
  }
  if (!v30)
  {
LABEL_49:
    if ((int)v7 >= 1 && SHIDWORD(v7) >= 1)
    {
      if (!*(_QWORD *)(result + 64))
      {
        v34 = v19 << 32;
        v35 = v27 | (v28 << 32);
        v37 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 4) = v34 | v16;
        *(_QWORD *)(v37 + 12) = v35;
        *(_QWORD *)(v37 + 20) = v34 | v16;
        *(_QWORD *)(v37 + 28) = v35;
        *(_DWORD *)(v37 + 36) = 0;
        result = *(_QWORD *)(v4 + 64);
        *(_QWORD *)(v4 + 64) = v37;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = WTF::fastFree((WTF *)result, v36);
          else
            --*(_DWORD *)result;
        }
      }
      v38 = *(_QWORD *)(v4 + 64);
      *(_QWORD *)(v38 + 20) = v5 | ((unint64_t)v6 << 32);
      *(_QWORD *)(v38 + 28) = v7;
    }
  }
  return result;
}

BOOL WebCore::LegacyInlineFlowBox::nodeAtPoint(WebCore::LegacyInlineBox *this, int *a2, WebCore::HitTestResult *a3, _DWORD *a4, int32x2_t *a5, int a6, unsigned int a7, int a8)
{
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  float v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  __int32 v38;
  unsigned int v39;
  int v40;
  _BOOL8 result;
  int v42;
  int v43;
  signed int v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  BOOL v52;
  int v53;
  _BOOL4 v54;
  int v55;
  int v56;
  _BOOL4 v57;
  int v58;
  WebCore::LegacyInlineBox *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  float32x2_t v66;
  uint64_t v67;
  unsigned int v68;
  float32x2_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  BOOL v77;
  float v78;
  float v79;
  BOOL v80;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  __int32 v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  __int32 v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  WebCore::ImageOverlay *v99;
  WebCore::Node *v100;
  void *v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int32 v106;
  float v107;
  float v108;
  WebCore::LegacyInlineBox *v109;
  WebCore::LegacyInlineBox *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  float *v114;
  float v115;
  float v116;
  float32x2_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  float32x2_t v122;
  float v123;
  float v124;

  if (a8 != 4)
    return 0;
  v15 = *((_QWORD *)this + 8);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 20);
    v17 = *(_QWORD *)(v15 + 28);
  }
  else
  {
    v18 = (float)a6;
    if ((*((_WORD *)this + 26) & 0x800) != 0)
    {
      v20 = v18 * 0.015625;
      v22 = *((float *)this + 10);
      v19 = *((float *)this + 11);
      v24 = a7 - a6;
      if (__OFSUB__(a7, a6))
        v24 = (a7 >> 31) + 0x7FFFFFFF;
      v23 = (float)v24 * 0.015625;
    }
    else
    {
      v19 = v18 * 0.015625;
      v20 = *((float *)this + 12);
      v21 = a7 - a6;
      if (__OFSUB__(a7, a6))
        v21 = (a7 >> 31) + 0x7FFFFFFF;
      v22 = (float)v21 * 0.015625;
      v23 = *((float *)this + 10);
    }
    v25 = floorf(v19 * 64.0);
    if (v25 > -2147500000.0)
      v26 = (int)v25;
    else
      v26 = 0x80000000;
    if (v25 < 2147500000.0)
      v27 = v26;
    else
      v27 = 0x7FFFFFFFLL;
    v28 = floorf(v20 * 64.0);
    if (v28 > -2147500000.0)
      v29 = (int)v28;
    else
      v29 = 0x80000000;
    if (v28 < 2147500000.0)
      v30 = v29;
    else
      v30 = 0x7FFFFFFFLL;
    v31 = v20 + v23;
    v32 = ceilf((float)(v19 + v22) * 64.0);
    if (v32 >= 2147500000.0)
    {
      v33 = 0x7FFFFFFF;
    }
    else if (v32 <= -2147500000.0)
    {
      v33 = 0x80000000;
    }
    else
    {
      v33 = (int)v32;
    }
    v34 = ceilf(v31 * 64.0);
    if (v34 >= 2147500000.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v34 <= -2147500000.0)
    {
      v35 = 0x80000000;
    }
    else
    {
      v35 = (int)v34;
    }
    v36 = v33 - v27;
    if (__OFSUB__(v33, (_DWORD)v27))
      v36 = (v33 >> 31) + 0x7FFFFFFF;
    v37 = v35 - v30;
    if (__OFSUB__(v35, (_DWORD)v30))
      v37 = (v35 >> 31) + 0x7FFFFFFF;
    v17 = v36 | (unint64_t)(v37 << 32);
    v16 = v27 | (v30 << 32);
  }
  v120 = v16;
  v121 = v17;
  WebCore::LegacyInlineBox::flipForWritingMode((uint64_t)this, (WebCore::LayoutRect *)&v120);
  v38 = a5->i32[1];
  v39 = (v120 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v120, a5->i32[0]))
    v39 = v120 + a5->i32[0];
  v40 = HIDWORD(v120) + v38;
  if (__OFADD__(HIDWORD(v120), v38))
    v40 = (HIDWORD(v120) >> 31) + 0x7FFFFFFF;
  v120 = __PAIR64__(v40, v39);
  if ((int)v121 < 1 || SHIDWORD(v121) < 1)
    return 0;
  result = 0;
  v42 = a4[4];
  if (v42 < 1)
    return result;
  v43 = a4[5];
  if (v43 < 1)
    return result;
  v44 = a4[2];
  v45 = v44 + v42;
  v46 = __OFADD__(v44, v42);
  v47 = (v44 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v44, v42))
    v47 = v44 + v42;
  if ((int)v39 >= v47)
    return 0;
  v48 = v39 + v121;
  v49 = (WTF::StringImpl *)__OFADD__(v39, (_DWORD)v121);
  v50 = (v39 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v39, (_DWORD)v121))
    v50 = v39 + v121;
  if (v44 >= v50)
    return 0;
  v51 = a4[3];
  v52 = __OFADD__(v51, v43);
  v53 = v51 + v43;
  v54 = __OFADD__(v51, v43);
  v55 = v53;
  if (v52)
    v55 = (v51 >> 31) + 0x7FFFFFFF;
  if (v40 >= v55)
    return 0;
  v56 = v40 + HIDWORD(v121);
  v57 = __OFADD__(v40, HIDWORD(v121));
  v58 = v40 + HIDWORD(v121);
  if (__OFADD__(v40, HIDWORD(v121)))
    v58 = (v40 >> 31) + 0x7FFFFFFF;
  if (v51 >= v58)
    return 0;
  if (*((_BYTE *)a4 + 65))
  {
LABEL_72:
    v59 = (WebCore::LegacyInlineBox *)*((_QWORD *)this + 10);
    if (v59)
    {
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v59 + 4) + 8) + 45) & 2) != 0
          || (v60 = *(_QWORD *)(WebCore::LegacyInlineBox::boxModelObject(v59) + 144)) == 0
          || (*(_BYTE *)(v60 + 25) & 8) == 0)
        {
          if ((*(unsigned int (**)(WebCore::LegacyInlineBox *, int *, WebCore::HitTestResult *, _DWORD *, int32x2_t *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v59 + 64))(v59, a2, a3, a4, a5, a6, a7, 4))
          {
            break;
          }
        }
        v59 = (WebCore::LegacyInlineBox *)*((_QWORD *)v59 + 2);
        if (!v59)
          goto LABEL_80;
      }
      v84 = *((_QWORD *)this + 4);
      if (v84)
        v85 = *(_BYTE **)(v84 + 8);
      else
        v85 = 0;
      if ((v85[45] & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19635702CLL);
      }
      v86 = a5->i32[1];
      v87 = a4[1];
      LODWORD(v88) = *a4 - a5->i32[0];
      if (__OFSUB__(*a4, a5->i32[0]))
        v88 = ((*a4 >> 31) + 0x7FFFFFFF);
      else
        v88 = v88;
      v52 = __OFSUB__(v87, v86);
      LODWORD(v89) = v87 - v86;
      if (v52)
        v89 = (v87 >> 31) + 0x7FFFFFFF;
      else
        v89 = v89;
      v122 = (float32x2_t)(v88 | (v89 << 32));
      (*(void (**)(_BYTE *, WebCore::HitTestResult *, float32x2_t *))(*(_QWORD *)v85 + 328))(v85, a3, &v122);
      return 1;
    }
LABEL_80:
    v61 = *((_QWORD *)this + 4);
    if (v61)
      v61 = *(_QWORD *)(v61 + 8);
    if ((*(_BYTE *)(v61 + 45) & 8) == 0)
      goto LABEL_215;
    if ((*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*(_QWORD *)(v61 + 104) + 239) & 4) != 0)
      return 0;
    if ((*(_BYTE *)(v61 + 120) & 0x30) != 0)
      return 0;
    v62 = *(_QWORD *)(v61 + 32);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 8);
      if (v63)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v63 + 104) + 239) & 0x18) != 0)
          return 0;
      }
    }
    if ((*(_QWORD *)a2 & 0x10) == 0)
    {
      v103 = *(_QWORD *)(*(_QWORD *)(v61 + 24) + 8);
      v104 = *(_QWORD *)(*(_QWORD *)(v103 + 40) + 8);
      if (*(_BYTE *)(v104 + 3441))
      {
        if (*(_QWORD *)(v104 + 1272) != v103)
          return 0;
      }
      v105 = *(_BYTE *)(v61 + 45) & 2;
      if ((*(_BYTE *)(v61 + 45) & 2) != 0)
        v61 = 0;
      if (v62 && v105)
        v61 = *(_QWORD *)(v62 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v61 + 104) + 239) & 1) != 0 || (*(_WORD *)(v61 + 124) & 0x3C0) == 0)
        return 0;
    }
    if ((*((_WORD *)this + 26) & 0x800) != 0)
    {
      v64 = *((float *)this + 10);
    }
    else
    {
      v64 = WebCore::LegacyInlineBox::logicalHeight(this, v49);
      if ((*((_WORD *)this + 26) & 0x800) == 0)
      {
        v65 = *((float *)this + 10);
        goto LABEL_95;
      }
    }
    v65 = WebCore::LegacyInlineBox::logicalHeight(this, v49);
LABEL_95:
    v66 = *(float32x2_t *)((char *)this + 44);
    v122 = v66;
    v123 = v64;
    v124 = v65;
    v67 = *((_QWORD *)this + 4);
    if (v67)
      v67 = *(_QWORD *)(v67 + 8);
    if ((*(_BYTE *)(v67 + 45) & 2) != 0)
      v67 = *(_QWORD *)(*(_QWORD *)(v67 + 32) + 8);
    v68 = (unsigned __int16)*(_DWORD *)(v67 + 124) >> 13;
    if (v68 > 5 || ((1 << v68) & 0x2A) == 0)
    {
LABEL_101:
      v69 = vadd_f32(vmul_f32(vcvt_f32_s32(*a5), (float32x2_t)vdup_n_s32(0x3C800000u)), v66);
      v122 = v69;
      if (v64 > 0.0 && v65 > 0.0)
      {
        v70 = (float)(int)a4[4] * 0.015625;
        if (v70 > 0.0)
        {
          v71 = (float)(int)a4[2] * 0.015625;
          v72 = (float)(int)a4[3] * 0.015625;
          v73 = (float)(int)a4[5] * 0.015625;
          v74 = v71 + v70;
          v75 = v69.f32[0] + v64;
          v76 = v73 > 0.0 && v69.f32[0] < v74;
          v77 = v76 && v71 < v75;
          v78 = v72 + v73;
          v79 = v69.f32[1] + v65;
          v80 = v77 && v69.f32[1] < v78;
          if (v80 && v72 < v79)
          {
            if (*((_BYTE *)a4 + 65)
              || (v69.f32[0] <= v71 ? (v90 = v75 < v74) : (v90 = 1),
                  !v90 ? (v91 = v69.f32[1] > v72) : (v91 = 1),
                  !v91 ? (v92 = v79 < v78) : (v92 = 1),
                  !v92
               || WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v122)))
            {
              v82 = *((_QWORD *)this + 4);
              if (v82)
                v83 = *(_BYTE **)(v82 + 8);
              else
                v83 = 0;
              if ((v83[45] & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19635704CLL);
              }
              v93 = a5->i32[1];
              v94 = *a4 - a5->i32[0];
              if (__OFSUB__(*a4, a5->i32[0]))
                v94 = (*a4 >> 31) + 0x7FFFFFFF;
              v95 = a4[1];
              v52 = __OFSUB__(v95, v93);
              v96 = v95 - v93;
              if (v52)
                v96 = (v95 >> 31) + 0x7FFFFFFF;
              v118 = v94 | (unint64_t)(v96 << 32);
              v119 = WebCore::LegacyInlineBox::flipForWritingMode(this, (const WebCore::LayoutPoint *)&v118);
              (*(void (**)(_BYTE *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)v83 + 328))(v83, a3, &v119);
              v97 = *((_QWORD *)this + 4);
              if (v97)
                v98 = *(_BYTE **)(v97 + 8);
              else
                v98 = 0;
              if ((v98[45] & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19635706CLL);
              }
              v99 = (WebCore::ImageOverlay *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v98 + 320))(v98);
              if (v99)
              {
                v100 = v99;
                *((_DWORD *)v99 + 6) += 2;
                v102 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, v99, a2, (uint64_t)a4, (float *)&v122);
                if (*((_DWORD *)v100 + 6) == 2)
                {
                  if ((*((_WORD *)v100 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v100, v101);
                }
                else
                {
                  *((_DWORD *)v100 + 6) -= 2;
                }
                if (!v102)
                  return 1;
              }
              else if (!WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, 0, a2, (uint64_t)a4, (float *)&v122))
              {
                return 1;
              }
            }
          }
        }
      }
      return 0;
    }
    v117 = v66;
    v116 = v65;
    v109 = (WebCore::LegacyInlineBox *)*((_QWORD *)this + 3);
    if (v109)
    {
      do
      {
        v110 = v109;
        v109 = (WebCore::LegacyInlineBox *)*((_QWORD *)v109 + 3);
      }
      while (v109);
      if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v110 + 88))(v110) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19635717CLL);
      }
      goto LABEL_198;
    }
    v110 = this;
    if (((*(uint64_t (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)this + 88))(this) & 1) != 0)
    {
LABEL_198:
      v111 = *((_QWORD *)v110 + 4);
      if (v111)
        v111 = *(_QWORD *)(v111 + 8);
      if ((*(_BYTE *)(v111 + 45) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963572C0);
      }
      if ((*(_BYTE *)(v111 + 52) & 7) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1963572E0);
      }
      v112 = (unsigned __int16)*(_DWORD *)(v111 + 124) >> 13;
      if (v112 > 5)
      {
        v65 = v116;
        v66 = v117;
      }
      else
      {
        v65 = v116;
        v66 = v117;
        if (((1 << v112) & 0x2A) != 0)
        {
          v113 = 160;
          if ((*(_DWORD *)(v111 + 20) & 0x1000) != 0)
          {
            v115 = v64;
          }
          else
          {
            v113 = 164;
            v115 = v116;
          }
          v114 = (float *)((unint64_t)&v122 | (4 * ((*(_DWORD *)(v111 + 20) & 0x1000) == 0)));
          *v114 = (float)((float)*(int *)(v111 + v113) * 0.015625) - (float)(*v114 + v115);
          v66 = v122;
        }
      }
      goto LABEL_101;
    }
LABEL_215:
    __break(0xC471u);
    JUMPOUT(0x19635700CLL);
  }
  if ((int)v39 <= v44)
  {
    if ((_DWORD)v49)
    {
      v48 = (v39 >> 31) + 0x7FFFFFFF;
      if (!v46)
        goto LABEL_180;
    }
    else if (!v46)
    {
LABEL_180:
      if (v48 < v45 || v40 > v51)
        goto LABEL_185;
      if (v57)
      {
        v56 = (v40 >> 31) + 0x7FFFFFFF;
        if (!v54)
          goto LABEL_184;
      }
      else if (!v54)
      {
        goto LABEL_184;
      }
      v53 = (v51 >> 31) + 0x7FFFFFFF;
LABEL_184:
      if (v56 >= v53)
        goto LABEL_72;
      goto LABEL_185;
    }
    v45 = (v44 >> 31) + 0x7FFFFFFF;
    goto LABEL_180;
  }
LABEL_185:
  v122.i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v120);
  v122.i32[1] = v106;
  v123 = v107;
  v124 = v108;
  result = WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v122);
  if (result)
    goto LABEL_72;
  return result;
}

void WebCore::LegacyInlineFlowBox::paint(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4, unsigned int a5)
{
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  int v21;
  float v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  WebCore::LegacyInlineBox *i;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD v78[2];
  int v79;
  char v80;

  v10 = *((unsigned __int16 *)a2 + 8);
  if (v10 > 0x1FF)
  {
    if (*((unsigned __int16 *)a2 + 8) > 0xFFFu)
    {
      if (v10 != 0x2000 && v10 != 4096)
        return;
    }
    else if (v10 != 512 && v10 != 1024)
    {
      return;
    }
  }
  else
  {
    v11 = v10 - 8 > 0x38 || ((1 << (v10 - 8)) & 0x100000001000101) == 0;
    if (v11 && v10 != 128)
      return;
  }
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 20);
    v14 = *(_QWORD *)(v12 + 28);
  }
  else
  {
    v15 = (float)a4;
    if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
    {
      v17 = v15 * 0.015625;
      v19 = *(float *)(a1 + 40);
      v16 = *(float *)(a1 + 44);
      v21 = a5 - a4;
      if (__OFSUB__(a5, a4))
        v21 = (a5 >> 31) + 0x7FFFFFFF;
      v20 = (float)v21 * 0.015625;
    }
    else
    {
      v16 = v15 * 0.015625;
      v17 = *(float *)(a1 + 48);
      v18 = a5 - a4;
      if (__OFSUB__(a5, a4))
        v18 = (a5 >> 31) + 0x7FFFFFFF;
      v19 = (float)v18 * 0.015625;
      v20 = *(float *)(a1 + 40);
    }
    v22 = floorf(v16 * 64.0);
    if (v22 >= 2147500000.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v22 <= -2147500000.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v22;
    }
    v24 = floorf(v17 * 64.0);
    if (v24 >= 2147500000.0)
    {
      v25 = 0x7FFFFFFFLL;
    }
    else if (v24 <= -2147500000.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v24;
    }
    v26 = v17 + v20;
    v27 = ceilf((float)(v16 + v19) * 64.0);
    if (v27 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFF;
    }
    else if (v27 <= -2147500000.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v27;
    }
    v29 = ceilf(v26 * 64.0);
    if (v29 >= 2147500000.0)
    {
      v30 = 0x7FFFFFFF;
    }
    else if (v29 <= -2147500000.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v29;
    }
    v31 = v28 - v23;
    if (__OFSUB__(v28, v23))
      v31 = (v28 >> 31) + 0x7FFFFFFF;
    v32 = v30 - v25;
    if (__OFSUB__(v30, (_DWORD)v25))
      v32 = (v30 >> 31) + 0x7FFFFFFF;
    v14 = v31 | (unint64_t)(v32 << 32);
    v13 = v23 | (unint64_t)(v25 << 32);
  }
  v76 = v13;
  v77 = v14;
  WebCore::LegacyInlineBox::flipForWritingMode(a1, (WebCore::LayoutRect *)&v76);
  v33 = *((_DWORD *)a3 + 1);
  v34 = v76;
  v35 = v76 + *(_DWORD *)a3;
  if (__OFADD__((_DWORD)v76, *(_DWORD *)a3))
    v35 = (v76 >> 31) + 0x7FFFFFFF;
  LODWORD(v76) = v35;
  v36 = __OFADD__(HIDWORD(v76), v33);
  v37 = HIDWORD(v76) + v33;
  if (v36)
    v37 = (HIDWORD(v76) >> 31) + 0x7FFFFFFF;
  HIDWORD(v76) = v37;
  v38 = v76 - (v34 & 0xFFFFFFC0);
  v39 = HIDWORD(v76) - (v34 & 0xFFFFFFC0);
  v40 = v38 + v77;
  if (__OFADD__(v38, (_DWORD)v77))
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  v41 = v39 + HIDWORD(v77);
  v42 = (v39 >> 31) + 0x7FFFFFFF;
  if (__OFADD__(v39, HIDWORD(v77)))
    v41 = (v39 >> 31) + 0x7FFFFFFF;
  v43 = v39 + 32;
  v44 = SHIDWORD(v76) / 64 + (v43 >> 6);
  v45 = v38 + 32;
  v46 = (int)v76 / 64 + (v45 >> 6);
  v47 = v40 / 64 - (v45 >> 6) + ((int)(v40 - (v42 & 0xFFFFFFC0) + 32) >> 6);
  v48 = v41 / 64 - (v43 >> 6) + ((int)(v41 - (v45 & 0xFFFFFFC0) + 32) >> 6);
  v49 = v46 << 6;
  if (v46 < -33554432)
    v49 = 0x80000000;
  if (v46 <= 0x1FFFFFF)
    v50 = v49;
  else
    v50 = 0x7FFFFFFF;
  v51 = v44 << 6;
  if (v44 < -33554432)
    v51 = 0x80000000;
  if (v44 > 0x1FFFFFF)
    v51 = 0x7FFFFFFF;
  v52 = v47 << 6;
  if (v47 < -33554432)
    v52 = 0x80000000;
  if (v47 <= 0x1FFFFFF)
    v53 = v52;
  else
    v53 = 0x7FFFFFFF;
  v54 = v48 << 6;
  if (v48 < -33554432)
    v54 = 0x80000000;
  if (v48 > 0x1FFFFFF)
    v54 = 0x7FFFFFFF;
  v55 = a2[2];
  if (v55 >= 1)
  {
    v56 = a2[3];
    if (v56 >= 1 && v53 >= 1 && v54 >= 1)
    {
      v57 = *a2;
      v36 = __OFADD__(v50, v53);
      v58 = v50 + v53;
      if (v36)
        v58 = (v50 >> 31) + 0x7FFFFFFF;
      if ((int)v57 < v58)
      {
        v36 = __OFADD__(v57, v55);
        v59 = v57 + v55;
        if (v36)
          v59 = (v57 >> 31) + 0x7FFFFFFF;
        if (v50 < v59)
        {
          v60 = a2[1];
          v36 = __OFADD__(v51, v54);
          v61 = v51 + v54;
          if (v36)
            v61 = (v51 >> 31) + 0x7FFFFFFF;
          if ((int)v60 < v61)
          {
            v36 = __OFADD__(v60, v56);
            v62 = v60 + v56;
            if (v36)
              v62 = (v60 >> 31) + 0x7FFFFFFF;
            if ((int)v51 < v62)
            {
              if (*((_WORD *)a2 + 8) == 32)
                goto LABEL_96;
              v78[0] = a1;
              v79 = 1;
              *(_QWORD *)&v70 = &v80;
              if ((_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_((uint64_t)&v70, v78) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19635785CLL);
              }
              WebCore::InlineBoxPainter::InlineBoxPainter((uint64_t)&v70, (uint64_t)v78, (uint64_t (**)())a2, a3);
              if (v79 != -1)
                ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v79])(&v80, v78);
              WebCore::InlineBoxPainter::paint((WebCore::InlineBoxPainter *)&v70, v63);
              if ((_DWORD)v71 != -1)
                ((void (*)(_QWORD *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v71])(v78, &v70);
              v64 = *((unsigned __int16 *)a2 + 8);
              if (v64 == 32)
              {
LABEL_96:
                v64 = 16;
              }
              else if (v64 == 1024)
              {
                return;
              }
              v65 = *((_OWORD *)a2 + 3);
              v72 = *((_OWORD *)a2 + 2);
              v73 = v65;
              v74 = *((_OWORD *)a2 + 4);
              v75 = *((_QWORD *)a2 + 10);
              v66 = *((_OWORD *)a2 + 1);
              v70 = *(_OWORD *)a2;
              v71 = v66;
              LOWORD(v71) = v64;
              v67 = *(_QWORD *)(a1 + 32);
              if (v67)
                v67 = *(_QWORD *)(v67 + 8);
              if ((*(_BYTE *)(v67 + 45) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19635783CLL);
              }
              if (*((_QWORD *)&v71 + 1) && *((_QWORD *)&v71 + 1) == v67)
                *((_QWORD *)&v71 + 1) = 0;
              if (v64 != 64)
              {
                for (i = *(WebCore::LegacyInlineBox **)(a1 + 72); i; i = (WebCore::LegacyInlineBox *)*((_QWORD *)i + 1))
                {
                  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)i + 4) + 8) + 45) & 2) == 0)
                  {
                    v69 = *(_QWORD *)(WebCore::LegacyInlineBox::boxModelObject(i) + 144);
                    if (v69)
                    {
                      if ((*(_BYTE *)(v69 + 25) & 8) != 0)
                        continue;
                    }
                  }
                  (*(void (**)(WebCore::LegacyInlineBox *, __int128 *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)i + 56))(i, &v70, a3, a4, a5);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::LegacyInlineFlowBox::selectionState(WebCore::LegacyInlineFlowBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineIterator::surrogateTextDirection(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v2 + 45) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_19;
  }
  v3 = *(_DWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v2 + 104);
  if ((a2 & 0xFC00) == 0xD800)
  {
    if (!v4)
      return 10;
    v5 = (v3 + 1);
    if (*(_DWORD *)(v4 + 4) <= v5)
      return 10;
    v6 = *(_QWORD *)(v4 + 8);
    v7 = (*(_BYTE *)(v4 + 16) & 4) != 0 ? *(unsigned __int8 *)(v6 + v5) : *(_WORD *)(v6 + 2 * v5);
    if ((v7 & 0xFC00) != 0xDC00)
      return 10;
LABEL_19:
    JUMPOUT(0x19AEA858CLL);
  }
  if (v4)
  {
    v8 = (v3 - 1);
    if (*(_DWORD *)(v4 + 4) > v8)
    {
      v9 = *(_QWORD *)(v4 + 8);
      v10 = (*(_BYTE *)(v4 + 16) & 4) != 0 ? *(unsigned __int8 *)(v9 + v8) : *(_WORD *)(v9 + 2 * v8);
      if ((v10 & 0xFC00) == 0xD800)
        goto LABEL_19;
    }
  }
  return 10;
}

uint64_t WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = (uint64_t *)(v2 + 24 * v7);
  v9 = *v8;
  if (*v8 != *a2)
  {
    v10 = 1;
    while (v9)
    {
      v7 = (v7 + v10) & v3;
      v8 = (uint64_t *)(v2 + 24 * v7);
      v9 = *v8;
      ++v10;
      if (*v8 == *a2)
        goto LABEL_8;
    }
    v8 = (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
LABEL_8:
  if ((uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4)) == v8)
    return 0;
  *v8 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v11 = *a1;
  if (*a1)
    v12 = *(_DWORD *)(v11 - 12) - 1;
  else
    v12 = -1;
  *(_DWORD *)(v11 - 12) = v12;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WebCore::LegacyInlineTextBox const*,WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>>,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>>::rehash(a1, v16 >> 1);
  }
  return 1;
}

void WebCore::LegacyInlineTextBox::~LegacyInlineTextBox(WebCore::LegacyInlineTextBox *this, void *a2)
{
  __int16 v3;
  WTF *v4;
  WebCore::LegacyInlineTextBox *v5;

  *(_QWORD *)this = off_1E341E7D0;
  v3 = *((_WORD *)this + 26);
  if ((v3 & 0x2000) == 0 && WebCore::gTextBoxesWithOverflow)
  {
    v5 = this;
    WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::remove((uint64_t *)WebCore::gTextBoxesWithOverflow, &v5);
    v3 = *((_WORD *)this + 26);
  }
  if ((v3 & 0x4000) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v5 = this;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v5);
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
}

{
  __int16 v3;
  WTF *v4;
  WebCore::LegacyInlineTextBox *v5;

  *(_QWORD *)this = off_1E341E7D0;
  v3 = *((_WORD *)this + 26);
  if ((v3 & 0x2000) == 0 && WebCore::gTextBoxesWithOverflow)
  {
    v5 = this;
    WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::remove((uint64_t *)WebCore::gTextBoxesWithOverflow, &v5);
    v3 = *((_WORD *)this + 26);
  }
  if ((v3 & 0x4000) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v5 = this;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v5);
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::LegacyInlineTextBox::markDirty(WebCore::LegacyInlineTextBox *this, int a2)
{
  __int16 v2;
  uint64_t result;
  int v4;
  unsigned int v5;

  if (a2)
  {
    *((_QWORD *)this + 9) = 0;
    v2 = 256;
  }
  else
  {
    v2 = 0;
  }
  v4 = *((unsigned __int16 *)this + 26);
  result = (uint64_t)this + 52;
  v5 = v4 & 0xFFFFFEFF | (*(unsigned __int8 *)(result + 2) << 16);
  *(_WORD *)result = v4 & 0xFEFF | v2;
  *(_BYTE *)(result + 2) = BYTE2(v5);
  return result;
}

uint64_t WebCore::LegacyInlineBox::markDirty(WebCore::LegacyInlineBox *this, int a2)
{
  uint64_t result;
  int v3;
  int v4;
  __int16 v5;
  unsigned int v6;

  v3 = *((unsigned __int16 *)this + 26);
  result = (uint64_t)this + 52;
  v4 = v3 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a2)
    v5 = 256;
  else
    v5 = 0;
  v6 = v4 & 0xFFFFFEFF;
  *(_WORD *)result = v6 | v5;
  *(_BYTE *)(result + 2) = BYTE2(v6);
  return result;
}

double WebCore::LegacyInlineTextBox::logicalOverflowRect(WebCore::LegacyInlineTextBox *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  int8x16_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WebCore::LegacyInlineTextBox *v9;
  int v10;
  int8x16_t v11;
  int8x16_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int8x16_t v42;
  int32x2_t v43;
  int8x16_t v44;
  double result;

  if ((*((_WORD *)this + 26) & 0x2000) != 0 || !WebCore::gTextBoxesWithOverflow)
  {
    v13 = *((float *)this + 10);
    v14 = 48;
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      v15 = 48;
    else
      v15 = 44;
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      v14 = 44;
    v16 = *(float *)((char *)this + v14);
    v17 = *(float *)((char *)this + v15);
    v18 = WebCore::LegacyInlineBox::logicalHeight(this, a2);
    v19 = floorf(v16);
    v20 = 2147500000.0;
    if (v19 < 2147500000.0)
    {
      v20 = -2147500000.0;
      if (v19 > -2147500000.0)
        v20 = (float)(int)v19;
    }
    v21 = floorf(v17);
    v22 = 2147500000.0;
    if (v21 < 2147500000.0)
    {
      v22 = -2147500000.0;
      if (v21 > -2147500000.0)
        v22 = (float)(int)v21;
    }
    v23 = v17 + v18;
    v24 = ceilf(v13 + v16);
    v25 = 2147500000.0;
    if (v24 < 2147500000.0)
    {
      v25 = -2147500000.0;
      if (v24 > -2147500000.0)
        v25 = (float)(int)v24;
    }
    v26 = ceilf(v23);
    v27 = 2147500000.0;
    if (v26 < 2147500000.0)
    {
      v27 = -2147500000.0;
      if (v26 > -2147500000.0)
        v27 = (float)(int)v26;
    }
    if (v20 >= 2147500000.0)
    {
      v28 = 0x7FFFFFFFLL;
    }
    else if (v20 <= -2147500000.0)
    {
      v28 = 0x80000000;
    }
    else
    {
      v28 = (int)v20;
    }
    if (v22 >= 2147500000.0)
    {
      v29 = 0x7FFFFFFF00000000;
    }
    else if (v22 <= -2147500000.0)
    {
      v29 = 0x8000000000000000;
    }
    else
    {
      v29 = (unint64_t)(int)v22 << 32;
    }
    v30 = v25 - v20;
    v31 = v27 - v22;
    if (v30 >= 2147500000.0)
    {
      v32 = 0x7FFFFFFFLL;
    }
    else if (v30 <= -2147500000.0)
    {
      v32 = 0x80000000;
    }
    else
    {
      v32 = (int)v30;
    }
    if (v31 >= 2147500000.0)
    {
      v33 = 0x7FFFFFFF00000000;
    }
    else if (v31 <= -2147500000.0)
    {
      v33 = 0x8000000000000000;
    }
    else
    {
      v33 = (unint64_t)(int)v31 << 32;
    }
    v34.i64[0] = v29;
    v34.i64[1] = v33;
    v35.i64[0] = v28;
    v35.i64[1] = v32;
    v36 = (int8x16_t)vshlq_n_s64(v34, 6uLL);
    v37 = vcgt_s32((int32x2_t)__PAIR64__(v32, v28), (int32x2_t)0xFE000000FE000000);
    v38.i64[0] = v37.i32[0];
    v38.i64[1] = v37.i32[1];
    v39 = v38;
    v40 = vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)__PAIR64__(v32, v28));
    v38.i64[0] = v40.i32[0];
    v38.i64[1] = v40.i32[1];
    v41 = vshrn_n_s64(v34, 0x20uLL);
    v3 = vbslq_s8(v39, (int8x16_t)vdupq_n_s64(0x7FFFFFFFuLL), vbslq_s8(v38, (int8x16_t)vdupq_n_s64(0x80000000uLL), (int8x16_t)vshlq_n_s64((int64x2_t)vorrq_s8((int8x16_t)v34, v35), 6uLL)));
    *(int32x2_t *)v35.i8 = vcgt_s32(v41, (int32x2_t)0xFE000000FE000000);
    v38.i64[0] = v35.i32[0];
    v38.i64[1] = v35.i32[1];
    v42 = v38;
    v43 = vcgt_s32((int32x2_t)0xFE000000FE000000, v41);
    v38.i64[0] = v43.i32[0];
    v38.i64[1] = v43.i32[1];
    v12 = vbslq_s8(v42, (int8x16_t)vdupq_n_s64(0x7FFFFFFF00000000uLL), vbslq_s8(v38, (int8x16_t)vdupq_n_s64(0x8000000000000000), v36));
  }
  else
  {
    v2 = *(_QWORD *)WebCore::gTextBoxesWithOverflow;
    v3 = 0uLL;
    if (*(_QWORD *)WebCore::gTextBoxesWithOverflow)
    {
      v4 = *(_DWORD *)(v2 - 8);
      v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      v9 = *(WebCore::LegacyInlineTextBox **)(v2 + 24 * v8);
      if (v9 == this)
      {
LABEL_8:
        v3 = *(int8x16_t *)(v2 + 24 * v8 + 8);
      }
      else
      {
        v10 = 1;
        while (v9)
        {
          v8 = (v8 + v10) & v4;
          v9 = *(WebCore::LegacyInlineTextBox **)(v2 + 24 * v8);
          ++v10;
          if (v9 == this)
            goto LABEL_8;
        }
      }
    }
    v11.i64[0] = 0xFFFFFFFF00000000;
    v11.i64[1] = 0xFFFFFFFF00000000;
    v12 = vandq_s8(v3, v11);
  }
  v44.i64[0] = 0xFFFFFFFFLL;
  v44.i64[1] = 0xFFFFFFFFLL;
  *(_QWORD *)&result = vorrq_s8(v12, vandq_s8(v3, v44)).u64[0];
  return result;
}

uint64_t WebCore::LegacyInlineTextBox::baselinePosition(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 24);
  if (!v2)
    return 0;
  v3 = v2[4];
  if (v3)
    v3 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 45) & 8) == 0)
    goto LABEL_25;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  if ((*(_BYTE *)(v5 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358128);
  }
  v7 = *(_QWORD *)(v5 + 32);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if (v3 == v7)
    return (*(uint64_t (**)(_QWORD))(*v2 + 144))(*(_QWORD *)(a1 + 24));
  if (v4)
    v8 = *(_QWORD *)(v4 + 8);
  else
    v8 = 0;
  if ((*(_BYTE *)(v8 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358148);
  }
  v9 = *(_QWORD *)(v8 + 32);
  if (v9)
    v9 = *(_QWORD *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 45) & 8) == 0)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x196358108);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)v9 + 1160))(v9, a2, *(_WORD *)(a1 + 52) & 1, (*(_WORD *)(a1 + 52) & 0x800) == 0, 0);
}

uint64_t WebCore::LegacyInlineTextBox::lineHeight(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  if ((*(_BYTE *)(v2 + 45) & 2) == 0)
    goto LABEL_31;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = v4[4];
  if (v5)
    v5 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358288);
  }
  if (v1)
    v6 = *(_QWORD *)(v1 + 8);
  else
    v6 = 0;
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963582A8);
  }
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    v8 = *(_QWORD *)(v8 + 8);
  if (v5 == v8)
    return (*(uint64_t (**)(_QWORD))(*v4 + 152))(*((_QWORD *)this + 3));
  if (v1)
    v9 = *(_QWORD *)(v1 + 8);
  else
    v9 = 0;
  if ((*(_BYTE *)(v9 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963582C8);
  }
  v10 = *(_QWORD *)(v9 + 32);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 8) == 0)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x196358268);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, BOOL, _QWORD))(*(_QWORD *)v10 + 1152))(v10, *((_WORD *)this + 26) & 1, (*((_WORD *)this + 26) & 0x800) == 0, 0);
}

uint64_t WebCore::LegacyInlineTextBox::selectionState(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v1;
  uint64_t v2;
  const WebCore::RenderText *v3;
  WebCore::RenderHighlight *v4;
  uint64_t v6;
  int v7;
  BOOL isLineBreak;
  char v9;
  char v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  if ((*(_BYTE *)(v2 + 45) & 2) == 0
    || (!v1 ? (v3 = 0) : (v3 = *(const WebCore::RenderText **)(v1 + 8)), (*((_BYTE *)v3 + 45) & 2) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1963583A0);
  }
  v4 = (WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                          + 8)
                                              + 1944)
                                  + 288);
  v6 = *((_QWORD *)this + 9);
  v7 = 0;
  isLineBreak = WebCore::LegacyInlineTextBox::isLineBreak(this);
  v9 = 0;
  v10 = 0;
  return WebCore::RenderHighlight::highlightStateForTextBox(v4, v3, (const WebCore::TextBoxSelectableRange *)&v6);
}

unint64_t WebCore::snappedSelectionRect(WebCore *this, const WebCore::LayoutRect *a2, float a3, float a4, float a5)
{
  int v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  double v11;
  int v12;

  v5 = *(_DWORD *)this;
  if ((_DWORD)a2)
  {
    v6 = v5 & 0xFFFFFFC0;
    v7 = a4 * 64.0;
    if (v7 > -2147483650.0)
      v8 = (int)v7;
    else
      v8 = 0x80000000;
    if (v7 < 2147483650.0)
      v9 = v8;
    else
      v9 = 0x7FFFFFFFLL;
  }
  else
  {
    v11 = a4 * 64.0;
    if (v11 > -2147483650.0)
      v12 = (int)v11;
    else
      v12 = 0x80000000;
    if (v11 < 2147483650.0)
      v6 = v12;
    else
      v6 = 0x7FFFFFFF;
    v9 = v5 & 0xFFFFFFC0;
  }
  return v6 | (unint64_t)(v9 << 32);
}

unint64_t WebCore::LegacyInlineTextBox::localSelectionRect(WebCore::LegacyInlineTextBox *this, unsigned int a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::LegacyInlineTextBox *v14;
  WebCore::LegacyInlineTextBox *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  WebCore::LegacyRootInlineBox *v24;
  WebCore::LegacyInlineTextBox *v25;
  WebCore::LegacyInlineTextBox *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  WebCore::LegacyRootInlineBox *v34;
  int v35;
  int v36;
  WTF::StringImpl *v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  double v41;
  int v42;
  float v43;
  double v44;
  int v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::RenderElement *v51;
  char *LineStyle;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  _DWORD v62[4];
  char v63[8];
  WTF::StringImpl *v64;

  v7 = *((_DWORD *)this + 18);
  v6 = *((_DWORD *)this + 19);
  WebCore::LegacyInlineTextBox::isLineBreak(this);
  v8 = v6 + v7;
  if (__CFADD__(v6, v7))
  {
    __break(1u);
    goto LABEL_97;
  }
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = v6 + v7;
  v10 = v9 - v7;
  if (v7 <= a2)
    v11 = v10;
  else
    v11 = 0;
  if (v8 >= a3)
    v8 = a3;
  v12 = v8 - v7;
  if (v7 <= a3)
    v13 = v12;
  else
    v13 = 0;
  if (v11 >= v13)
  {
    if (a2 != a3)
      return 0;
    v16 = *((_DWORD *)this + 18);
    if (v16 > a2 || *((_DWORD *)this + 19) + v16 < a2)
      return 0;
  }
  v14 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)this + 3);
  if (v14)
  {
    do
    {
      v15 = v14;
      v14 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)v14 + 3);
    }
    while (v14);
    if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)v15 + 88))(v15) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358650);
    }
  }
  else
  {
    v15 = this;
    if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358AE0);
    }
  }
  v18 = *((_QWORD *)v15 + 4);
  if (v18)
    v18 = *(_QWORD *)(v18 + 8);
  if ((*(_BYTE *)(v18 + 45) & 8) == 0)
  {
LABEL_97:
    __break(0xC471u);
    JUMPOUT(0x1963589F0);
  }
  v19 = *((_DWORD *)v15 + 29);
  v20 = (unsigned __int16)*(_DWORD *)(v18 + 124) >> 13;
  v21 = v20 > 4;
  v22 = (1 << v20) & 0x16;
  if (v21 || v22 == 0)
  {
    v24 = (WebCore::LegacyRootInlineBox *)*((_QWORD *)v15 + 11);
    if (v24)
    {
      if (((*(uint64_t (**)(WebCore::LegacyRootInlineBox *))(*(_QWORD *)v24 + 88))(v24) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196358A50);
      }
      v19 = WebCore::LegacyRootInlineBox::selectionBottom(v24);
    }
  }
  v25 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)this + 3);
  if (v25)
  {
    do
    {
      v26 = v25;
      v25 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)v25 + 3);
    }
    while (v25);
    if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)v26 + 88))(v26) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358744);
    }
  }
  else
  {
    v26 = this;
    if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358B00);
    }
  }
  v28 = WebCore::LegacyRootInlineBox::selectionBottom(v26);
  v29 = *((_QWORD *)v26 + 4);
  if (v29)
    v29 = *(_QWORD *)(v29 + 8);
  if ((*(_BYTE *)(v29 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358A10);
  }
  v30 = *((_DWORD *)v26 + 29);
  v31 = (unsigned __int16)*(_DWORD *)(v29 + 124) >> 13;
  v21 = v31 > 4;
  v32 = (1 << v31) & 0x16;
  if (v21 || v32 == 0)
  {
    v34 = (WebCore::LegacyRootInlineBox *)*((_QWORD *)v26 + 11);
    if (v34)
    {
      if (((*(uint64_t (**)(WebCore::LegacyRootInlineBox *))(*(_QWORD *)v34 + 88))(v34) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196358A70);
      }
      v30 = WebCore::LegacyRootInlineBox::selectionBottom(v34);
    }
  }
  v35 = v28 - v30;
  if (__OFSUB__(v28, v30))
    v35 = (v28 >> 31) + 0x7FFFFFFF;
  v36 = v35 & ~(v35 >> 31);
  WebCore::LegacyInlineTextBox::createTextRun(this, v27, (uint64_t)v63);
  v38 = *((_WORD *)this + 26);
  v39 = v38 & 0x800;
  v40 = 44;
  if (!v39)
    v40 = 48;
  v41 = *(float *)((char *)this + v40) * 64.0;
  if (v41 >= 2147483650.0)
  {
    v42 = 0x7FFFFFFF;
  }
  else if (v41 <= -2147483650.0)
  {
    v42 = 0x80000000;
  }
  else
  {
    v42 = (int)v41;
  }
  v43 = *((float *)this + 10);
  v44 = v43 * 64.0;
  if (v44 >= 2147483650.0)
  {
    v45 = 0x7FFFFFFF;
  }
  else if (v44 <= -2147483650.0)
  {
    v45 = 0x80000000;
  }
  else
  {
    v45 = (int)v44;
  }
  v62[0] = v42;
  v62[1] = v19;
  v62[2] = v45;
  v62[3] = v36;
  if (!v11)
  {
    v46 = v64;
    v47 = v64 ? *((_DWORD *)v64 + 1) : 0;
    if ((_DWORD)v13 == v47)
      goto LABEL_84;
  }
  v48 = *((_QWORD *)this + 4);
  if ((v38 & 1) != 0)
  {
    if (v48)
      v48 = *(_QWORD *)(v48 + 8);
    if ((*(_BYTE *)(v48 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358AA0);
    }
    v50 = *(_QWORD *)(v48 + 32);
    if (v50)
      v51 = *(WebCore::RenderElement **)(v50 + 8);
    else
      v51 = 0;
    LineStyle = WebCore::RenderElement::firstLineStyle(v51, v37);
    v48 = *((_QWORD *)this + 4);
    if (!v48)
      goto LABEL_80;
  }
  else
  {
    if (v48)
      v49 = *(_QWORD *)(v48 + 8);
    else
      v49 = 0;
    if ((*(_BYTE *)(v49 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358AC0);
    }
    v53 = *(_QWORD *)(v49 + 32);
    if (v53)
      v53 = *(_QWORD *)(v53 + 8);
    LineStyle = (char *)(v53 + 80);
    if (!v48)
      goto LABEL_80;
  }
  v48 = *(_QWORD *)(v48 + 8);
LABEL_80:
  if ((*(_BYTE *)(v48 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358A30);
  }
  v54 = *((_QWORD *)LineStyle + 4) + 32;
  v55 = *(unsigned __int16 *)(v48 + 112);
  if (v55 <= 0x100)
    LOBYTE(v55) = 0;
  WebCore::FontCascade::adjustSelectionRectForText(v54, (void *)(v55 != 0), (uint64_t)v63, (WebCore::LayoutRect *)v62, v11, v13 | 0x100000000);
  v43 = *((float *)this + 10);
  v39 = *((_WORD *)this + 26) & 0x800;
  v46 = v64;
LABEL_84:
  v56 = v39 == 0;
  v57 = 44;
  if (v56)
    v57 = 48;
  v58 = v43 + *(float *)((char *)this + v57);
  v59 = !v56;
  v17 = WebCore::snappedSelectionRect((WebCore *)v62, (const WebCore::LayoutRect *)v59, v58, (float)v19 * 0.015625, (float)v36 * 0.015625);
  v64 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v60);
    else
      *(_DWORD *)v46 -= 2;
  }
  return v17;
}

WTF::StringImpl *WebCore::LegacyInlineTextBox::createTextRun@<X0>(WebCore::LegacyInlineTextBox *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RenderElement *v8;
  char *LineStyle;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  WebCore::RenderElement *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  WebCore::LegacyInlineTextBox *v22;
  WebCore::LegacyInlineTextBox *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  WTF::StringImpl *result;
  char v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  v5 = *((_QWORD *)this + 4);
  if ((*((_WORD *)this + 26) & 1) != 0)
  {
    if (v5)
      v5 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358F0CLL);
    }
    v7 = *(_QWORD *)(v5 + 32);
    if (v7)
      v8 = *(WebCore::RenderElement **)(v7 + 8);
    else
      v8 = 0;
    LineStyle = WebCore::RenderElement::firstLineStyle(v8, a2);
    v5 = *((_QWORD *)this + 4);
    if (!v5)
      goto LABEL_16;
LABEL_10:
    v10 = *(_QWORD *)(v5 + 8);
    goto LABEL_17;
  }
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358F2CLL);
  }
  v11 = *(_QWORD *)(v6 + 32);
  if (v11)
    v11 = *(_QWORD *)(v11 + 8);
  LineStyle = (char *)(v11 + 80);
  if (v5)
    goto LABEL_10;
LABEL_16:
  v10 = 0;
LABEL_17:
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358ECCLL);
  }
  v12 = *(WTF::StringImpl **)(v10 + 104);
  if (v12)
  {
    a2 = (WTF::StringImpl *)*((unsigned int *)this + 18);
    if ((_DWORD)a2 || *((_DWORD *)v12 + 1) > *((_DWORD *)this + 19))
    {
      WTF::StringImpl::substring(v12);
      v5 = *((_QWORD *)this + 4);
    }
    else
    {
      *(_DWORD *)v12 += 2;
      v38 = v12;
    }
  }
  else
  {
    v38 = 0;
  }
  if ((*((_WORD *)this + 26) & 1) != 0)
  {
    if (v5)
      v5 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358F6CLL);
    }
    v15 = *(_QWORD *)(v5 + 32);
    if (v15)
      v16 = *(WebCore::RenderElement **)(v15 + 8);
    else
      v16 = 0;
    v14 = WebCore::RenderElement::firstLineStyle(v16, a2);
  }
  else
  {
    if (v5)
      v5 = *(_QWORD *)(v5 + 8);
    if ((*(_BYTE *)(v5 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196358F4CLL);
    }
    v13 = *(_QWORD *)(v5 + 32);
    if (v13)
      v13 = *(_QWORD *)(v13 + 8);
    v14 = (char *)(v13 + 80);
  }
  WebCore::RenderBlock::updateSecurityDiscCharacters((uint64_t)v14, (uint64_t *)&v38, &v37);
  v18 = v38;
  v38 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *((unsigned __int16 *)this + 26) | (*((unsigned __int8 *)this + 54) << 16);
  v20 = 44;
  if ((*((_WORD *)this + 26) & 0x800) == 0)
    v20 = 48;
  v21 = *(float *)((char *)this + v20);
  if (v21 == 0.0)
  {
    v24 = 0.0;
  }
  else
  {
    v22 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)this + 3);
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (WebCore::LegacyInlineTextBox *)*((_QWORD *)v22 + 3);
      }
      while (v22);
      if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)v23 + 88))(v23) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196358CD4);
      }
    }
    else
    {
      v23 = this;
      if (((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196358F8CLL);
      }
    }
    v25 = 44;
    if ((*((_WORD *)v23 + 26) & 0x800) == 0)
      v25 = 48;
    v24 = v21 - *(float *)((char *)v23 + v25);
    v19 = *((unsigned __int8 *)this + 52);
  }
  v26 = *((_QWORD *)this + 4);
  if (v26)
    v26 = *(_QWORD *)(v26 + 8);
  if ((*(_BYTE *)(v26 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196358EECLL);
  }
  v27 = *((_DWORD *)LineStyle + 11);
  v28 = *(unsigned __int16 *)(v26 + 118);
  *(_DWORD *)a3 = 0;
  result = v37;
  if (v37)
    *(_DWORD *)v37 += 2;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 20) = 1;
  *(float *)(a3 + 24) = v24;
  *(_QWORD *)(a3 + 28) = 1065353216;
  *(_BYTE *)(a3 + 36) = 0;
  v30 = ((v27 >> 2) & 4 | (v19 >> 1) & 2 | (v28 >> 5) & 8 | *(_BYTE *)(a3 + 37) & 0xE0) ^ 8;
  *(_BYTE *)(a3 + 37) = v30;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  v31 = *((_DWORD *)LineStyle + 10);
  v32 = (v31 >> 27) & 7;
  if ((v31 & 0x40000000) == 0 && v32 == 3)
  {
    v32 = 5;
  }
  else
  {
    if (v32)
      v33 = 0;
    else
      v33 = (v31 & 0x40000000) == 0;
    if (v33)
    {
      v32 = 0;
    }
    else if ((v31 & 0x40000000) == 0 || v32)
    {
      if ((v31 & 0x40000000) == 0 || v32 != 1)
      {
        if ((v31 & 0x40000000) == 0 && v32 == 2)
        {
          v32 = 3;
        }
        else if (v32 == 1 && (v31 & 0x40000000) == 0)
        {
          v32 = 2;
        }
        else
        {
          v32 = 0;
        }
      }
    }
    else
    {
      v32 = 4;
    }
  }
  v35 = v32 == 5 || (v32 - 1) < 2;
  v36 = *((_QWORD *)LineStyle + 3);
  *(_BYTE *)(a3 + 37) = v30 | v35;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v36 + 336);
  *(_BYTE *)(a3 + 20) = *(_BYTE *)(v36 + 340);
  return result;
}

uint64_t WebCore::LegacyInlineTextBox::deleteLine(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 2) != 0)
  {
    if (*(WebCore::LegacyInlineTextBox **)(v1 + 64) == this)
      *(_QWORD *)(v1 + 64) = *((_QWORD *)this + 8);
    if (*(WebCore::LegacyInlineTextBox **)(v1 + 72) == this)
      *(_QWORD *)(v1 + 72) = *((_QWORD *)this + 7);
    v2 = *((_QWORD *)this + 8);
    if (v2)
      *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
    v3 = *((_QWORD *)this + 7);
    if (v3)
      *(_QWORD *)(v3 + 64) = v2;
    return (*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)this + 8))(this);
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::LegacyInlineTextBox::extractLine(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  if ((*(_WORD *)(this + 52) & 0x200) == 0)
  {
    v1 = *(_QWORD *)(this + 32);
    if (v1)
      v1 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v1 + 45) & 2) != 0)
    {
      v2 = *(_QWORD *)(this + 56);
      *(_QWORD *)(v1 + 72) = v2;
      if (*(_QWORD *)(v1 + 64) == this)
        *(_QWORD *)(v1 + 64) = 0;
      if (v2)
        *(_QWORD *)(v2 + 64) = 0;
      *(_QWORD *)(this + 56) = 0;
      do
      {
        v4 = *(_WORD *)(this + 52);
        v3 = this + 52;
        *(_WORD *)v3 = v4 | 0x200;
        this = *(_QWORD *)(v3 + 12);
      }
      while (this);
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::LegacyInlineTextBox::attachLine(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if ((*(_WORD *)(this + 52) & 0x200) != 0)
  {
    v1 = *(_QWORD *)(this + 32);
    if (v1)
      v1 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v1 + 45) & 2) != 0)
    {
      v2 = *(_QWORD *)(v1 + 72);
      if (v2)
      {
        *(_QWORD *)(v2 + 64) = this;
        *(_QWORD *)(this + 56) = v2;
      }
      else
      {
        *(_QWORD *)(v1 + 64) = this;
      }
      do
      {
        v3 = this;
        v4 = *(_WORD *)(this + 52) & 0xFDFF | (*(unsigned __int8 *)(this + 54) << 16);
        *(_WORD *)(this + 52) &= ~0x200u;
        *(_BYTE *)(this + 54) = BYTE2(v4);
        this = *(_QWORD *)(this + 64);
      }
      while (this);
      *(_QWORD *)(v1 + 72) = v3;
    }
    else
    {
      this = 96;
      __break(0xC471u);
    }
  }
  return this;
}

BOOL WebCore::LegacyInlineTextBox::isLineBreak(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196359208);
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (v4)
    v4 = *(_QWORD *)(v4 + 8);
  if ((WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(v4 + 80)) & 0xFFFFFFFB) == 0
    || *((_DWORD *)this + 19) != 1)
  {
    return 0;
  }
  if (v2)
    v6 = *(_QWORD *)(v2 + 8);
  else
    v6 = 0;
  if ((*(_BYTE *)(v6 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196359228);
  }
  v7 = *(_QWORD *)(v6 + 104);
  if (v7 && (v8 = *((unsigned int *)this + 18), *(_DWORD *)(v7 + 4) > v8))
  {
    v9 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      v10 = *(unsigned __int8 *)(v9 + v8);
    else
      v10 = *(unsigned __int16 *)(v9 + 2 * v8);
  }
  else
  {
    v10 = 0;
  }
  return v10 == 10;
}

uint64_t WebCore::LegacyInlineTextBox::nodeAtPoint(WebCore::LegacyInlineTextBox *this, int *a2, WebCore::HitTestResult *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  BOOL v30;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  WebCore::ImageOverlay *v46;
  WebCore::Node *v47;
  void *v48;
  _BOOL4 v49;
  unint64_t v51;
  unint64_t v52;
  float v53[4];

  v10 = *((_QWORD *)this + 4);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if ((*(_BYTE *)(v10 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19635957CLL);
  }
  v11 = *(_QWORD *)(v10 + 32);
  if (v11)
    v11 = *(_QWORD *)(v11 + 8);
  if ((*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 4) != 0)
    return 0;
  if ((*(_BYTE *)(v11 + 120) & 0x30) != 0)
    return 0;
  v12 = *(_QWORD *)(v11 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v13 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)a2 & 0x10) == 0)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 8);
    if (*(_BYTE *)(v35 + 3441))
    {
      if (*(_QWORD *)(v35 + 1272) != v34)
        return 0;
    }
    v36 = *(_BYTE *)(v11 + 45) & 2;
    if ((*(_BYTE *)(v11 + 45) & 2) != 0)
      v11 = 0;
    if (v12 && v36)
      v11 = *(_QWORD *)(v12 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 104) + 239) & 1) != 0 || (*(_WORD *)(v11 + 124) & 0x3C0) == 0)
      return 0;
  }
  if (WebCore::LegacyInlineTextBox::isLineBreak(this))
    return 0;
  v15 = WebCore::LegacyInlineBox::locationIncludingFlipping(this);
  v17 = v16;
  if ((*((_WORD *)this + 26) & 0x800) != 0)
  {
    v18 = *((float *)this + 10);
  }
  else
  {
    v18 = WebCore::LegacyInlineBox::logicalHeight(this, v14);
    if ((*((_WORD *)this + 26) & 0x800) == 0)
    {
      v19 = *((float *)this + 10);
      goto LABEL_19;
    }
  }
  v19 = WebCore::LegacyInlineBox::logicalHeight(this, v14);
LABEL_19:
  v53[2] = v18;
  v53[3] = v19;
  v20 = v15 + (float)((float)(int)*a5 * 0.015625);
  v21 = v17 + (float)((float)(int)a5[1] * 0.015625);
  v53[0] = v20;
  v53[1] = v21;
  if (v18 <= 0.0)
    return 0;
  if (v19 <= 0.0)
    return 0;
  v22 = (float)*(int *)(a4 + 16) * 0.015625;
  if (v22 <= 0.0)
    return 0;
  v23 = (float)*(int *)(a4 + 20) * 0.015625;
  if (v23 <= 0.0)
    return 0;
  v24 = (float)*(int *)(a4 + 8) * 0.015625;
  v25 = (float)*(int *)(a4 + 12) * 0.015625;
  v26 = v24 + v22;
  v27 = v24 < (float)(v18 + v20) && v20 < v26;
  v28 = v25 + v23;
  v29 = v19 + v21;
  v30 = v27 && v21 < v28;
  if (!v30 || v25 >= v29)
    return 0;
  if (!*(_BYTE *)(a4 + 65))
  {
    if (v20 > v24
      || ((float)(v18 + v20) >= v26 ? (v37 = v21 > v25) : (v37 = 1), !v37 ? (v38 = v29 < v28) : (v38 = 1), v38))
    {
      if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 32), (const WebCore::FloatRect *)v53))
        return 0;
    }
  }
  v32 = *((_QWORD *)this + 4);
  if (v32)
    v33 = *(_BYTE **)(v32 + 8);
  else
    v33 = 0;
  if ((v33[45] & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19635959CLL);
  }
  v39 = a5[1];
  v40 = *(_DWORD *)a4 - *a5;
  if (__OFSUB__(*(_DWORD *)a4, *a5))
    v40 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
  v41 = *(_DWORD *)(a4 + 4);
  v42 = __OFSUB__(v41, v39);
  v43 = v41 - v39;
  if (v42)
    v43 = (v41 >> 31) + 0x7FFFFFFF;
  v51 = v40 | (unint64_t)(v43 << 32);
  v52 = WebCore::LegacyInlineBox::flipForWritingMode(this, (const WebCore::LayoutPoint *)&v51);
  (*(void (**)(_BYTE *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)v33 + 328))(v33, a3, &v52);
  v44 = *((_QWORD *)this + 4);
  if (v44)
    v45 = *(_BYTE **)(v44 + 8);
  else
    v45 = 0;
  if ((v45[45] & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963595BCLL);
  }
  v46 = (WebCore::ImageOverlay *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v45 + 320))(v45);
  if (v46)
  {
    v47 = v46;
    *((_DWORD *)v46 + 6) += 2;
    v49 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, v46, a2, a4, v53);
    if (*((_DWORD *)v47 + 6) == 2)
    {
      if ((*((_WORD *)v47 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v47, v48);
    }
    else
    {
      *((_DWORD *)v47 + 6) -= 2;
    }
    if (v49)
      return 0;
  }
  else if (WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::FloatRect>(a3, 0, a2, a4, v53))
  {
    return 0;
  }
  return 1;
}

void WebCore::LegacyInlineTextBox::paint(uint64_t a1, uint64_t a2, int *a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WebCore::LegacyInlineBox *v29[7];
  WTF::StringImpl *v30;
  uint64_t v31;

  if (!WebCore::LegacyInlineTextBox::isLineBreak((WebCore::LegacyInlineTextBox *)a1))
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      v8 = *(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    if ((*(_BYTE *)(v8 + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196359728);
    }
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9 || v9 == v8)
    {
      if (v7)
        v7 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 45) & 2) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196359748);
      }
      v10 = *(_QWORD *)(v7 + 32);
      if (v10)
        v10 = *(_QWORD *)(v10 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 239) & 4) == 0
        && (*(_BYTE *)(v10 + 120) & 0x30) == 0
        && *(_WORD *)(a2 + 16) != 16
        && *(_DWORD *)(a1 + 76))
      {
        WebCore::LegacyInlineTextBox::logicalOverflowRect((WebCore::LegacyInlineTextBox *)a1, v6);
        v12 = v11;
        WebCore::LegacyInlineTextBox::logicalOverflowRect((WebCore::LegacyInlineTextBox *)a1, v13);
        v16 = v14 + v15;
        if (__OFADD__(v14, v15))
          v16 = (v14 >> 31) + 0x7FFFFFFF;
        v17 = a3 + 1;
        if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
          v17 = a3;
        v18 = *v17;
        v19 = __OFADD__(v12, v18);
        v20 = v12 + v18;
        if (v19)
          v20 = (v12 >> 31) + 0x7FFFFFFF;
        v21 = v16 - v12;
        if (__OFSUB__(v16, v12))
        {
          v21 = (v16 >> 31) + 0x7FFFFFFF;
          if ((*(_WORD *)(a1 + 52) & 0x800) == 0)
            goto LABEL_25;
        }
        else if ((*(_WORD *)(a1 + 52) & 0x800) == 0)
        {
LABEL_25:
          v22 = *(_DWORD *)(a2 + 4);
          v23 = *(_DWORD *)(a2 + 12);
LABEL_32:
          v19 = __OFADD__(v22, v23);
          v24 = v22 + v23;
          if (v19)
            v24 = (v22 >> 31) + 0x7FFFFFFF;
          if (v20 < v24)
          {
            v19 = __OFADD__(v20, v21);
            v25 = v20 + v21;
            v26 = (v20 >> 31) + 0x7FFFFFFF;
            if (!v19)
              v26 = v25;
            if (v26 > v22)
            {
              v31 = a1;
              WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::TextBoxPainter(v29, (WTF::StringImpl *)&v31, (WebCore::LegacyInlineBox *)a2, a3);
              WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paint((uint64_t)v29);
              v28 = v30;
              v30 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v27);
                else
                  *(_DWORD *)v28 -= 2;
              }
            }
          }
          return;
        }
        v22 = *(_DWORD *)a2;
        v23 = *(_DWORD *)(a2 + 8);
        goto LABEL_32;
      }
    }
  }
}

unint64_t WebCore::LegacyInlineTextBox::selectionStartEnd(WebCore::LegacyInlineTextBox *this)
{
  uint64_t v1;
  uint64_t v2;
  const WebCore::RenderText *v3;
  WebCore::RenderHighlight *v4;
  uint64_t v6;
  int v7;
  BOOL isLineBreak;
  char v9;
  char v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  if ((*(_BYTE *)(v2 + 45) & 2) == 0
    || (!v1 ? (v3 = 0) : (v3 = *(const WebCore::RenderText **)(v1 + 8)), (*((_BYTE *)v3 + 45) & 2) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1963598B4);
  }
  v4 = (WebCore::RenderHighlight *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                          + 8)
                                              + 1944)
                                  + 288);
  v6 = *((_QWORD *)this + 9);
  v7 = 0;
  isLineBreak = WebCore::LegacyInlineTextBox::isLineBreak(this);
  v9 = 0;
  v10 = 0;
  return WebCore::RenderHighlight::rangeForTextBox(v4, v3, (const WebCore::TextBoxSelectableRange *)&v6);
}

uint64_t WebCore::LegacyInlineTextBox::caretMinOffset(WebCore::LegacyInlineTextBox *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t WebCore::LegacyInlineTextBox::caretMaxOffset(WebCore::LegacyInlineTextBox *this)
{
  return (*((_DWORD *)this + 19) + *((_DWORD *)this + 18));
}

WTF **WebCore::LegacyLineLayout::appendRunsForObject(WTF **result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  WebCore::BidiCharacterRun ***v16;
  WebCore::BidiCharacterRun **v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  WebCore::BidiCharacterRun **v41;

  v8 = (uint64_t)result;
  while (1)
  {
    if (a2 > (int)a3)
      return result;
    v9 = *(_DWORD *)(a4 + 20);
    if ((v9 & 0x800) != 0)
      return result;
    if ((v9 & 0x1800000) == 0x1000000)
    {
      v20 = a5;
      v21 = a4;
      if ((*(_BYTE *)(a4 + 45) & 2) != 0)
        v21 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8);
      v22 = (*(_DWORD *)(v21 + 96) >> 5) & 0x1F;
      v23 = v22 > 0x19;
      v24 = (1 << v22) & 0x3528029;
      if (v23 || v24 == 0)
      {
        result = (WTF **)WebCore::RenderObject::container((WebCore::RenderObject *)a4);
        a5 = v20;
        if ((*((_BYTE *)result + 45) & 0x20) == 0)
          return result;
      }
    }
    v10 = *(_QWORD *)(a5 + 288);
    if (v10 >= *(unsigned int *)(a5 + 284))
    {
      if (!v8 || (v10 & 1) != 0)
        return result;
LABEL_8:
      v11 = *(_QWORD *)(a5 + 144);
      v12 = *(_DWORD *)(a5 + 152);
      result = (WTF **)WTF::fastMalloc((WTF *)0x28);
      *result = 0;
      *((_DWORD *)result + 2) = a2;
      *((_DWORD *)result + 3) = a3;
      *((_BYTE *)result + 17) = *((_BYTE *)result + 17) & 0xFE | ((*(_WORD *)(v11 + 4) & 0x800) != 0);
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 == 10)
        v14 = (v13 >> 6) & 0x1F;
      else
        v14 = v12;
      v15 = v13 & 0x3F;
      *((_BYTE *)result + 16) = v13 & 0x3F;
      if ((v13 & 1) != 0)
      {
        if (v14 > 5)
          goto LABEL_18;
        v29 = 1 << v14;
        LOBYTE(v14) = 1;
        if ((v29 & 0x25) == 0)
          goto LABEL_18;
      }
      else if (v14 == 2 || v14 == 5)
      {
        LOBYTE(v14) = 2;
      }
      else if (v14 != 1)
      {
LABEL_18:
        result[3] = (WTF *)a4;
        result[4] = 0;
        if (*(_QWORD *)v8)
        {
          v16 = *(WebCore::BidiCharacterRun ****)(v8 + 8);
          v17 = *v16;
          *v16 = result;
          if (v17)
          {
            WebCore::BidiCharacterRun::~BidiCharacterRun(v17);
            result = (WTF **)WTF::fastFree(v18, v19);
          }
          *(_QWORD *)(v8 + 8) = **(_QWORD **)(v8 + 8);
        }
        else
        {
          *(_QWORD *)v8 = result;
          *(_QWORD *)(v8 + 8) = result;
        }
        ++*(_DWORD *)(v8 + 24);
        return result;
      }
      *((_BYTE *)result + 16) = v14 + v15;
      goto LABEL_18;
    }
    v40 = a5;
    v26 = *(_QWORD *)(a5 + 272) + 32 * v10;
    v27 = *(_QWORD *)(v26 + 8);
    v28 = *(_DWORD *)(v26 + 24);
    if ((v10 & 1) == 0)
      break;
    if (v27 == a4)
    {
      *(_QWORD *)(a5 + 288) = v10 + 1;
      a2 = v28;
      if (v28 < (int)a3)
        continue;
    }
    return result;
  }
  if (v27 != a4)
  {
    if (!v8)
      return result;
    goto LABEL_8;
  }
  v30 = (v28 + 1);
  if ((int)v30 <= (int)a3)
  {
    v35 = *(unsigned __int8 *)(v26 + 28);
    *(_QWORD *)(a5 + 288) = v10 + 1;
    if (!v35)
    {
      if (v8 && (int)v30 > a2)
      {
        v36 = *(_QWORD *)(a5 + 144);
        v37 = *(_DWORD *)(a5 + 152);
        v38 = WTF::fastMalloc((WTF *)0x28);
        v41 = (WebCore::BidiCharacterRun **)WebCore::BidiRun::BidiRun(v38, a2, v30, a4, v36, v37);
        WebCore::BidiRunList<WebCore::BidiRun>::appendRun(v8, &v41);
        std::unique_ptr<WebCore::BidiRun>::~unique_ptr[abi:sn180100]((WTF **)&v41, v39);
      }
      return (WTF **)WebCore::LegacyLineLayout::appendRunsForObject(v8, v30, a3, a4, v40);
    }
  }
  else if (v8)
  {
    v31 = *(_QWORD *)(a5 + 144);
    v32 = *(_DWORD *)(a5 + 152);
    v33 = WTF::fastMalloc((WTF *)0x28);
    v41 = (WebCore::BidiCharacterRun **)WebCore::BidiRun::BidiRun(v33, a2, a3, a4, v31, v32);
    WebCore::BidiRunList<WebCore::BidiRun>::appendRun(v8, &v41);
    return std::unique_ptr<WebCore::BidiRun>::~unique_ptr[abi:sn180100]((WTF **)&v41, v34);
  }
  return result;
}

BOOL WebCore::RenderBlock::shouldSkipCreatingRunsForObject(WebCore::RenderBlock *this, WebCore::RenderObject *a2)
{
  int v2;
  WebCore::RenderBlock *v4;
  unsigned int v5;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x800) != 0)
    return 1;
  if ((v2 & 0x1800000) != 0x1000000)
    return 0;
  v4 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v4 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
  v5 = (*((_DWORD *)v4 + 24) >> 5) & 0x1F;
  if (v5 < 0x1A && ((0x3528029u >> v5) & 1) != 0)
    return 0;
  return (*(_BYTE *)(WebCore::RenderObject::container(this) + 45) & 0x20) == 0;
}

WebCore::BidiCharacterRun **WebCore::BidiRunList<WebCore::BidiRun>::appendRun(uint64_t a1, WebCore::BidiCharacterRun ***a2)
{
  WebCore::BidiCharacterRun **v3;
  WebCore::BidiCharacterRun **result;
  WTF *v5;
  void *v6;
  WebCore::BidiCharacterRun ***v7;
  WebCore::BidiCharacterRun **v8;
  WTF *v9;
  void *v10;

  if (*(_QWORD *)a1)
  {
    v7 = *(WebCore::BidiCharacterRun ****)(a1 + 8);
    v8 = *a2;
    *a2 = 0;
    result = *v7;
    *v7 = v8;
    if (result)
    {
      WebCore::BidiCharacterRun::~BidiCharacterRun(result);
      result = (WebCore::BidiCharacterRun **)WTF::fastFree(v9, v10);
    }
    v3 = **(WebCore::BidiCharacterRun ****)(a1 + 8);
  }
  else
  {
    v3 = *a2;
    *a2 = 0;
    result = *(WebCore::BidiCharacterRun ***)a1;
    *(_QWORD *)a1 = v3;
    if (result)
    {
      WebCore::BidiRun::~BidiRun((WTF ***)result);
      result = (WebCore::BidiCharacterRun **)WTF::fastFree(v5, v6);
      v3 = *(WebCore::BidiCharacterRun ***)a1;
    }
  }
  *(_QWORD *)(a1 + 8) = v3;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

WTF **std::unique_ptr<WebCore::BidiRun>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WTF **v4;
  WTF *v6;
  WTF *v7;
  void *v8;
  WebCore::BidiCharacterRun **v9;
  WTF *v10;
  void *v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(WTF ***)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      do
      {
        v6 = *v4;
        *v4 = 0;
        WebCore::BidiCharacterRun::~BidiCharacterRun(v4);
        WTF::fastFree(v7, v8);
        v4 = (WTF **)v6;
      }
      while (v6);
      v9 = *(WebCore::BidiCharacterRun ***)v3;
      *(_QWORD *)v3 = 0;
      if (v9)
      {
        WebCore::BidiCharacterRun::~BidiCharacterRun(v9);
        WTF::fastFree(v10, v11);
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::SVGRootInlineBox *WebCore::LegacyLineLayout::createAndAppendRootInlineBox(WebCore::LegacyLineLayout *this)
{
  uint64_t v2;
  WebCore::SVGRootInlineBox *v3;
  WebCore::SVGRootInlineBox *v4;
  int v5;
  WebCore::SVGRootInlineBox **v6;
  unsigned __int8 v7;
  WebCore::SVGRootInlineBox *v9;
  uint64_t v10;
  uint64_t *v11;
  WebCore::Element *v12;
  uint64_t v13;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_BYTE *)(v2 + 46) == 85)
  {
    ++*(_DWORD *)(v2 + 16);
    v3 = (WebCore::SVGRootInlineBox *)bmalloc::api::isoAllocate();
    v4 = WebCore::SVGRootInlineBox::SVGRootInlineBox(v3, (WebCore::RenderSVGText *)v2);
    *((_WORD *)v4 + 26) |= 0x400u;
    v5 = *(_DWORD *)(v2 + 16);
    if (!v5)
      goto LABEL_18;
    *(_DWORD *)(v2 + 16) = v5 - 1;
  }
  else
  {
    v3 = (WebCore::SVGRootInlineBox *)WebCore::LegacyRootInlineBox::operator new(136);
    WebCore::LegacyRootInlineBox::LegacyRootInlineBox(v3, (WebCore::RenderBlockFlow *)v2);
  }
  if (*((_QWORD *)this + 1))
  {
    v6 = (WebCore::SVGRootInlineBox **)((char *)this + 16);
    v13 = *((_QWORD *)this + 2);
    *(_QWORD *)(v13 + 96) = v3;
    *((_QWORD *)v3 + 11) = v13;
  }
  else
  {
    *((_QWORD *)this + 1) = v3;
    v6 = (WebCore::SVGRootInlineBox **)((char *)this + 16);
  }
  *v6 = v3;
  v7 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v7 & 1) != 0)
  {
    v9 = (WebCore::SVGRootInlineBox *)*((_QWORD *)this + 1);
    if (!v9 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 88))(*((_QWORD *)this + 1)) & 1) != 0)
    {
      if (v9 == v3)
      {
        if (WebCore::Document::hasEverCreatedAnAXObjectCache)
        {
          v10 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8)
                                                                                               + 40)
                                                                                   + 8));
          if (v10)
          {
            v11 = (uint64_t *)v10;
            v12 = (WebCore::Element *)WebCore::RenderElement::element(*(WebCore::RenderElement **)this);
            WebCore::AXObjectCache::deferRecomputeIsIgnored(v11, v12);
          }
        }
      }
      return v3;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x196359E80);
  }
  return v3;
}

WebCore::SVGRootInlineBox *WebCore::LegacyLineLayout::createInlineBoxForRenderer(WebCore::LegacyLineLayout *this, WebCore::RenderObject *a2)
{
  WebCore::SVGRootInlineBox *result;
  int v4;

  if (*(WebCore::RenderObject **)this == a2)
    return WebCore::LegacyLineLayout::createAndAppendRootInlineBox(this);
  if (a2 && (*((_BYTE *)a2 + 45) & 2) != 0)
  {
    ++*((_DWORD *)a2 + 4);
    result = (WebCore::SVGRootInlineBox *)WebCore::RenderTextLineBoxes::createAndAppendLineBox((WebCore::RenderObject *)((char *)a2 + 64), a2);
    v4 = *((_DWORD *)a2 + 4);
    if (v4)
    {
LABEL_5:
      *((_DWORD *)a2 + 4) = v4 - 1;
      return result;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x196359F64);
  }
  result = 0;
  if (a2 && (*((_BYTE *)a2 + 45) & 0x20) != 0)
  {
    ++*((_DWORD *)a2 + 4);
    result = (WebCore::SVGRootInlineBox *)WebCore::RenderInline::createAndAppendInlineFlowBox(a2);
    v4 = *((_DWORD *)a2 + 4);
    if (v4)
      goto LABEL_5;
    goto LABEL_11;
  }
  return result;
}

uint64_t WebCore::LegacyInlineFlowBox::setConstructed(WebCore::LegacyInlineFlowBox *this)
{
  uint64_t result;
  __int16 v2;
  _QWORD *i;

  v2 = *((_WORD *)this + 26);
  result = (uint64_t)this + 52;
  *(_WORD *)result = v2 | 2;
  for (i = *(_QWORD **)(result + 20); i; i = (_QWORD *)i[1])
    result = (*(uint64_t (**)(_QWORD *))(*i + 128))(i);
  return result;
}

uint64_t WebCore::LegacyLineLayout::removeInlineBox(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  v4 = *(_QWORD **)(a1 + 32);
  v5 = v4[3];
  if (v5)
  {
    if ((*(_WORD *)(v5 + 52) & 0x100) == 0)
      (*(void (**)(_QWORD))(*(_QWORD *)v5 + 184))(v4[3]);
    if (*(_QWORD **)(v5 + 72) == v4)
      *(_QWORD *)(v5 + 72) = v4[1];
    if (*(_QWORD **)(v5 + 80) == v4)
      *(_QWORD *)(v5 + 80) = v4[2];
    v6 = v4[1];
    if (v6)
      *(_QWORD *)(v6 + 16) = v4[2];
    v7 = v4[2];
    if (v7)
      *(_QWORD *)(v7 + 8) = v6;
    v4[3] = 0;
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    v9 = (*(_BYTE *)(v8 + 45) & 2) == 0;
  else
    v9 = 1;
  if (!v9)
  {
    ++*(_DWORD *)(v8 + 16);
    if (((*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19635A148);
    }
    if (*(_QWORD **)(v8 + 64) == v4)
      *(_QWORD *)(v8 + 64) = v4[8];
    if (*(_QWORD **)(v8 + 72) == v4)
      *(_QWORD *)(v8 + 72) = v4[7];
    v10 = v4[8];
    if (v10)
      *(_QWORD *)(v10 + 56) = v4[7];
    v11 = v4[7];
    if (v11)
      *(_QWORD *)(v11 + 64) = v10;
    v12 = *(_DWORD *)(v8 + 16);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19635A168);
    }
    *(_DWORD *)(v8 + 16) = v12 - 1;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  for (*(_QWORD *)(a1 + 32) = 0; v5; v5 = *(_QWORD *)(v5 + 24))
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 176))(v5, 0);
    if (v5 == a2)
      break;
  }
  return result;
}

uint64_t WebCore::determineDirectionality(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _BYTE *v4;
  int v5;
  char v6;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v23;
  int v24;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;

  v2 = a2[1];
  if (!v2)
    return result;
  v4 = (_BYTE *)result;
  do
  {
    v5 = *(unsigned __int8 *)(v2 + 46);
    if (v5 == 17)
    {
      if ((*(_BYTE *)(v2 + 52) & 7) != 2 || (*(_BYTE *)(v2 + 53) & 1) == 0)
        return result;
      v6 = *(_BYTE *)(v2 + 45);
      if ((v6 & 2) == 0)
        goto LABEL_11;
    }
    else
    {
      v6 = *(_BYTE *)(v2 + 45);
      if (v5 == 72 || (v6 & 2) == 0)
        goto LABEL_11;
    }
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 120);
    v9 = (v8 >> 27) & 7;
    if ((v8 & 0x40000000) == 0 && v9 == 3
      || v9 && ((v27 = v8 & 0x40000000) != 0 ? (v28 = 1) : (v28 = 2), v9 == v28 || !((v9 != 1) | (v27 >> 30) & 1)))
    {
      v29 = *(_QWORD *)(v2 + 104);
      if (v29)
      {
        v30 = *((unsigned int *)a2 + 6);
        if (*(_DWORD *)(v29 + 4) > v30)
        {
          v31 = *(_QWORD *)(v29 + 8);
          v32 = (*(_BYTE *)(v29 + 16) & 4) != 0 ? *(unsigned __int8 *)(v31 + v30) : *(unsigned __int16 *)(v31 + 2 * v30);
          if (v32 == 10)
            return result;
        }
      }
    }
LABEL_11:
    if ((v6 & 2) != 0)
    {
      v10 = *(_QWORD *)(v2 + 104);
      if (v10)
      {
        v11 = *((unsigned int *)a2 + 6);
        if (*(_DWORD *)(v10 + 4) > v11)
        {
          v12 = *(_QWORD *)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          {
            result = *(unsigned __int8 *)(v12 + v11);
            if (*(_BYTE *)(v12 + v11))
              goto LABEL_16;
          }
          else
          {
            result = *(unsigned __int16 *)(v12 + 2 * v11);
            if (*(_WORD *)(v12 + 2 * v11))
            {
LABEL_16:
              result = MEMORY[0x19AEA858C]();
              if ((_DWORD)result)
              {
                if ((_DWORD)result != 1 && (_DWORD)result != 13)
                {
                  v2 = a2[1];
                  if (!v2)
                    return result;
                  v6 = *(_BYTE *)(v2 + 45);
                  goto LABEL_23;
                }
                v33 = 1;
              }
              else
              {
                v33 = 0;
              }
              *v4 = v33;
              return result;
            }
          }
        }
      }
    }
LABEL_23:
    if ((v6 & 2) != 0)
    {
      v14 = *((_DWORD *)a2 + 6) + 1;
      *((_DWORD *)a2 + 6) = v14;
      v15 = *(_QWORD *)(v2 + 104);
      if (v15)
      {
        if (v14 < *(_DWORD *)(v15 + 4))
          continue;
      }
    }
    v16 = *a2;
    while ((*(_BYTE *)(v2 + 45) & 2) == 0 && *(_BYTE *)(v2 + 46) != 17)
    {
      v21 = *(_DWORD *)(v2 + 20);
      if ((v21 & 0x802) != 0 || (v21 & 0x1800000) == 0x1000000)
        break;
      v23 = *(unsigned int *)(v2 + 64);
      if (!(v23 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)))
        break;
      v18 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8);
      if (!v18)
        break;
LABEL_45:
      if ((*(_BYTE *)(v18 + 45) & 2) == 0 && *(_BYTE *)(v18 + 46) != 17)
      {
        v24 = *(_DWORD *)(v18 + 20);
        if ((v24 & 0x802) == 0 && (v24 & 0x1800000) != 0x1000000)
        {
          v2 = v18;
          if ((*(_BYTE *)(v18 + 45) & 0x20) == 0)
            continue;
          result = WebCore::isEmptyInline((WebCore *)v18, (const WebCore::RenderInline *)a2);
          v2 = v18;
          if (!(_DWORD)result)
            continue;
        }
      }
      goto LABEL_55;
    }
    if (v2 != v16)
    {
      while (1)
      {
        v17 = *(unsigned int *)(v2 + 47);
        if (v17 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
        {
          v18 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
          if (v18)
            goto LABEL_45;
        }
        v19 = *(_QWORD *)(v2 + 32);
        if (v19)
        {
          v2 = *(_QWORD *)(v19 + 8);
          if (v2 && v2 != v16)
            continue;
        }
        break;
      }
    }
    v18 = 0;
LABEL_55:
    if (v18)
      v26 = 0;
    else
      v26 = 0x1FFFFFFFFLL;
    a2[1] = v18;
    *((_DWORD *)a2 + 6) = 0;
    *((_DWORD *)a2 + 4) = v26;
    *((_BYTE *)a2 + 20) = BYTE4(v26);
    v2 = v18;
  }
  while (v2);
  return result;
}

uint64_t WebCore::firstInlineRendererSkippingEmpty(uint64_t a1, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  char v5;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;

  if (!(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)))
    return 0;
  v2 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if (!v2)
    return v2;
  v5 = *(_BYTE *)(v2 + 45);
  if ((v5 & 0x20) != 0)
  {
    if (a2)
    {
      v9 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
      if ((*(_BYTE *)(v2 + 45) & 2) != 0)
      {
        v9 = *(_QWORD *)(v2 + 32);
        if (v9)
          v9 = *(_QWORD *)(v9 + 8);
      }
      v10 = (*(_DWORD *)(v9 + 96) >> 22) & 7;
      if (v10)
      {
        if ((v10 - 3) > 2)
        {
          if (!*((_DWORD *)a2 + 74))
          {
            v12 = (*(_DWORD *)(v9 + 120) & 0x4000000) == 0;
            if ((*(_DWORD *)(v9 + 120) & 0x4000000) != 0)
              v13 = 14;
            else
              v13 = 11;
            if (v12)
              v14 = 12;
            else
              v14 = 15;
            if (v10 == 1)
              v15 = v13;
            else
              v15 = v14;
            WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed((uint64_t)a2, v15, 0);
          }
        }
        else
        {
          WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding((uint64_t)a2, (uint64_t)a2);
          ++*((_DWORD *)a2 + 74);
        }
      }
      if ((WebCore::isEmptyInline((WebCore *)v2, a2) & 1) != 0)
        goto LABEL_6;
    }
    else if ((WebCore::isEmptyInline(*(WebCore **)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8), 0) & 1) != 0)
    {
      return v2;
    }
    v11 = WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(a1, v2, (uint64_t)a2);
    v2 = v11;
    if (!v11)
      goto LABEL_5;
    v5 = *(_BYTE *)(v11 + 45);
  }
  if ((v5 & 2) == 0 && *(_BYTE *)(v2 + 46) != 17)
  {
    v7 = *(_DWORD *)(v2 + 20);
    if ((v7 & 0x802) == 0 && (v7 & 0x1800000) != 0x1000000)
      v2 = WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(a1, v2, (uint64_t)a2);
  }
LABEL_5:
  if (a2)
LABEL_6:
    WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding((uint64_t)a2, (uint64_t)a2);
  return v2;
}

WTF **WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::setStatus(WTF **result, void *a2)
{
  WTF *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v8;

  v2 = *(WTF **)a2;
  *((_DWORD *)result + 34) = *((_DWORD *)a2 + 2);
  result[16] = v2;
  v3 = (unsigned int *)*((_QWORD *)a2 + 2);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (unsigned int *)result[18];
  result[18] = (WTF *)v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v8 = (WTF *)v5;
      return WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, a2);
    }
  }
  return result;
}

WTF ***WebCore::BidiRunList<WebCore::BidiRun>::clear(uint64_t a1)
{
  WTF ***result;
  WTF *v3;
  void *v4;

  result = *(WTF ****)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    WebCore::BidiRun::~BidiRun(result);
    result = (WTF ***)WTF::fastFree(v3, v4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void WebCore::LegacyLineLayout::layoutLineBoxes(WebCore::LegacyLineLayout *this)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  char v9;
  _QWORD *v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  char v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t InlineRendererSkippingEmpty;
  void *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WebCore::FontCascade *v33;
  WebCore::ComplexTextController *v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  char *v47;
  void *v48;
  float v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int *v54;
  int v55;
  WebCore::RenderObject *v56;
  unsigned int v57;
  WTF *v58;
  __int16 v59;
  int v60;
  _WORD *v61;
  _WORD *v62;
  __int16 v63;
  _QWORD *j;
  unsigned int *v65;
  int v66;
  int v67;
  WTF *k;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF **v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::LegacyInlineFlowBox *v77;
  WebCore::LegacyInlineBox *InlineBoxForRenderer;
  WebCore::LegacyInlineBox *v79;
  uint64_t v80;
  uint64_t v81;
  WebCore::LegacyInlineBox *v82;
  uint64_t v83;
  WebCore::SVGRootInlineBox *appended;
  int v85;
  char v86;
  __int16 v87;
  char v88;
  __int16 v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  WebCore::SVGRootInlineBox *v93;
  int v94;
  uint64_t v95;
  char *LineStyle;
  WTF::StringImpl *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  BOOL v107;
  int v108;
  WTF *v109;
  _BOOL4 v110;
  uint64_t v111;
  WebCore::Length *v112;
  int v113;
  float v114;
  uint64_t v115;
  float v116;
  BOOL v117;
  _BOOL4 v118;
  uint64_t v119;
  int v120;
  _BOOL4 v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  WebCore::SVGRootInlineBox *v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WebCore::SVGRootInlineBox *v140;
  uint64_t v141;
  uint64_t v142;
  WTF *v144;
  WTF *v145;
  void *v146;
  WebCore::BidiCharacterRun **v147;
  WTF *v148;
  void *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  WebCore::LegacyInlineBox *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl **v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  int v163;
  char v165;
  unsigned int *v166;
  void *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t m;
  uint64_t v171;
  uint64_t v172;
  uint64_t v174;
  WTF *v175;
  WTF *v176;
  WebCore::RenderElement *v177;
  int v178;
  WebCore::SVGRootInlineBox *v179;
  int v180;
  float v181;
  int v182;
  WebCore::SVGRootInlineBox *v183;
  int v184;
  int v185;
  int v186;
  WebCore::LegacyInlineBox *v187;
  int v188;
  WTF *v189;
  int v190;
  uint64_t v191;
  float v192;
  float v193;
  int v194;
  WebCore::LegacyInlineBox *v195;
  int v196;
  float v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  WebCore::RenderObject *v202;
  WebCore *v203;
  WebCore::BidiCharacterRun **v204;
  int v205;
  WebCore *v206;
  uint64_t v207;
  int v208;
  char v209;
  int v210;
  unsigned int v211;
  unsigned int *v213;
  void *v214;
  unsigned int v215;
  unsigned int v216;
  void *v217;
  unsigned int i;
  uint64_t v219;
  __int128 v220;
  uint64_t v221;
  _OWORD *v222;
  __int128 v223;
  WTF::StringImpl **v224;
  uint64_t v225;
  int v226;
  char v227;
  uint64_t v228;
  char v229;
  _BYTE v230[32];
  uint64_t v231;
  uint64_t v232;
  char v233;
  char v234;
  int v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  char v240;
  int v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  char v246;
  int v247;
  char v248;
  uint64_t v249;
  int v250;
  unsigned int *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  char v256;
  int v257;
  char v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  char v263;
  int v264;
  char v265;
  char v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  WTF *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275[3];
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279[2];
  char v280;
  char v281;
  int v282;
  char v283;
  BOOL v284;
  _DWORD v285[4];
  uint64_t v286;
  _OWORD v287[2];
  uint64_t v288;
  __int16 v289;
  unsigned __int8 v290;
  int v291;
  _BYTE v292[32];
  __int128 v293;
  __int128 v294;
  _DWORD v295[4];
  uint64_t v296;
  WTF *v297;
  WebCore *v298;
  char v299;
  char v300;
  int v301;
  char v302;
  BOOL v303;
  _BYTE v304[29];
  uint64_t v305;
  uint64_t v306;
  char v307;
  char v308;
  int v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  char v314;
  int v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  char v320;
  int v321;
  char v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  char v329;
  char v330;
  int v331;
  char v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  char v337;
  int v338;
  char v339;
  char v340;
  _QWORD v341[3];
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347[3];
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char v351[24];
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WebCore::FontCascade *v355;
  uint64_t v356;
  int v357;
  char v358;
  WTF::StringImpl *v359;
  char v360[88];
  char v361;
  uint64_t v362;
  __int16 v363;
  int v364;
  uint64_t v365;
  uint64_t v366;

  v366 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = (_DWORD *)(*(_QWORD *)this + 160);
  if (((*(_DWORD *)(*(_QWORD *)this + 124) >> 13) & 6u) - 2 >= 4)
    v3 = (_DWORD *)(*(_QWORD *)this + 164);
  *v3 = 0;
  v5 = (_QWORD *)((char *)this + 8);
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
  {
    do
    {
      v42 = (_QWORD *)v4[12];
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
      v4 = v42;
    }
    while (v42);
    *v5 = 0;
    v5[1] = 0;
    v2 = *(_QWORD *)this;
  }
  v6 = *(unsigned int *)(v2 + 64);
  if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)))
    goto LABEL_68;
  v7 = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8);
  if (!v7)
    goto LABEL_68;
  LOBYTE(v8) = 0;
  *(_QWORD *)v304 = v2;
  *(_QWORD *)&v304[8] = v7;
  do
  {
    v8 = v8 || (*(_BYTE *)(v7 + 20) & 1) == 0;
    v9 = *(_BYTE *)(v7 + 45);
    if ((v9 & 2) != 0)
    {
      v10 = *(_QWORD **)(v7 + 64);
      v11 = *(_DWORD *)(v7 + 16) + 1;
      *(_DWORD *)(v7 + 16) = v11;
      if (v10)
      {
        do
        {
          v13 = (_QWORD *)v10[8];
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
          v10 = v13;
        }
        while (v13);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        v11 = *(_DWORD *)(v7 + 16);
      }
      *(_WORD *)(v7 + 118) &= ~0x20u;
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x19635B74CLL);
      }
LABEL_12:
      *(_DWORD *)(v7 + 16) = v11 - 1;
      v9 = *(_BYTE *)(v7 + 45);
      goto LABEL_13;
    }
    if ((*(_BYTE *)(v7 + 45) & 0x20) != 0)
    {
      ++*(_DWORD *)(v7 + 16);
      WebCore::RenderInline::dirtyLineBoxes((WebCore::RenderInline *)v7, 1);
      v11 = *(_DWORD *)(v7 + 16);
      if (!v11)
      {
        __break(0xC471u);
        goto LABEL_499;
      }
      goto LABEL_12;
    }
LABEL_13:
    v12 = *(_DWORD *)(v7 + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(v7 + 20) = v12;
    if ((v9 & 2) == 0)
    {
      *(_WORD *)(v7 + 69) &= ~1u;
      *(_WORD *)(v7 + 76) = *(_WORD *)(v7 + 76) & 0xF | (16
                                                       * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 472));
    }
    *(_DWORD *)(v7 + 20) = v12 & 0xFFDFFE07;
    WebCore::InlineWalker::advance((WebCore::InlineWalker *)v304);
    v7 = *(_QWORD *)&v304[8];
  }
  while (*(_QWORD *)&v304[8]);
  v14 = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v198 = (_QWORD *)v14[12];
      v199 = (_QWORD *)v14[9];
      if (v199)
      {
        do
        {
          v200 = (_QWORD *)v199[1];
          (*(void (**)(_QWORD *))(*v199 + 16))(v199);
          v199 = v200;
        }
        while (v200);
      }
      (*(void (**)(_QWORD *))(*v14 + 216))(v14);
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
      v14 = v198;
    }
    while (v198);
  }
  *v5 = 0;
  v5[1] = 0;
  v15 = *(_QWORD *)this;
  v16 = (*(_DWORD *)(*(_QWORD *)this + 120) >> 26) & 1;
  v284 = (*(_DWORD *)(*(_QWORD *)this + 120) & 0x4000000) != 0;
  if ((*(_QWORD *)(v15 + 96) & 0x1C00000) == 0x1000000)
  {
    v279[0] = v15;
    v279[1] = WebCore::firstInlineRendererSkippingEmpty(v15, 0);
    v280 = 0;
    v281 = 0;
    v282 = 0;
    v283 = 0;
    WebCore::determineDirectionality((uint64_t)&v284, v279);
    v16 = v284;
    v15 = *(_QWORD *)this;
  }
  v230[20] = 0;
  *(_DWORD *)&v230[24] = 0;
  v230[28] = 0;
  memset(v230, 0, 17);
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 0;
  v240 = 0;
  v241 = 0;
  v242 = 0;
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v249 = 0xA0000000ALL;
  v250 = 10;
  v251 = 0;
  v252 = 10;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  v259 = 0;
  v263 = 0;
  v264 = 0;
  v265 = 0;
  v262 = 0;
  v260 = 0;
  v261 = 0;
  v266 = 1;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v267 = 0;
  v271 = 0;
  v272 = 0;
  v274 = 0;
  v273 = 0;
  v275[0] = 0;
  v275[1] = (uint64_t)&v276;
  v275[2] = 8;
  v277 = 0;
  v278 = 0;
  v17 = (*(_DWORD *)(v15 + 96) >> 22) & 7;
  v237 = 0;
  v238 = 0;
  v19 = v17 == 2 || v17 == 5;
  v239 = 0;
  WebCore::BidiContext::create(v16, v16, v19, 0, 0, (uint64_t *)v304);
  v21 = *(unsigned int **)v304;
  LODWORD(v249) = v16;
  HIDWORD(v249) = v16;
  v250 = v16;
  if (*(_QWORD *)v304)
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  v251 = v21;
  if (v21)
  {
    do
    {
      v23 = __ldaxr(v21);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v21));
    if (!v24)
    {
      atomic_store(1u, v21);
      *(_QWORD *)v304 = v21;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)v304, v20);
    }
  }
  v25 = *(_QWORD *)this;
  InlineRendererSkippingEmpty = WebCore::firstInlineRendererSkippingEmpty(*(_QWORD *)this, (const WebCore::RenderInline *)v230);
  v28 = 0;
  if (InlineRendererSkippingEmpty)
    v29 = InlineRendererSkippingEmpty == v25;
  else
    v29 = 1;
  if (!v29)
  {
    v141 = InlineRendererSkippingEmpty;
    do
    {
      if ((*(_BYTE *)(v141 + 45) & 0x20) != 0)
      {
        v157 = v141;
        if ((*(_BYTE *)(v141 + 45) & 2) != 0)
          v157 = *(_QWORD *)(*(_QWORD *)(v141 + 32) + 8);
        if (((*(_DWORD *)(v157 + 96) >> 22) & 7u) - 3 <= 2)
          ++v28;
      }
      v142 = *(_QWORD *)(v141 + 32);
      if (!v142)
        break;
      v141 = *(_QWORD *)(v142 + 8);
    }
    while (v141 && v141 != v25);
  }
  *(_QWORD *)v230 = v25;
  *(_QWORD *)&v230[8] = InlineRendererSkippingEmpty;
  v230[16] = 0;
  v230[20] = 0;
  *(_DWORD *)&v230[24] = 0;
  v230[28] = 0;
  v274 = v28;
  v30 = *(_QWORD *)this;
  if (v8)
  {
    v31 = *(_DWORD *)(v30 + 20);
    if ((v31 & 8) == 0)
    {
      *(_DWORD *)(v30 + 20) = v31 | 8;
      if ((v31 & 0x8000) != 0)
        WebCore::RenderObject::setLayerNeedsFullRepaint(v30);
      v30 = *(_QWORD *)this;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24)
                                                                                 + 8)
                                                                     + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 476))
      {
        WebCore::RenderLayerModelObject::cachedLayerClippedOverflowRect(*(_QWORD *)this, (uint64_t)v304);
        v30 = *(_QWORD *)this;
        if (v304[16])
        {
          WebCore::RenderObject::containerForRepaint(*(_QWORD **)this, (uint64_t)&v354);
          WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v297, (uint64_t)v355);
          WebCore::RenderLayerModelObject::cachedLayerClippedOverflowRect(*(_QWORD *)this, (uint64_t)v304);
          if (!v304[16])
          {
            __break(1u);
            goto LABEL_465;
          }
          WebCore::RenderObject::repaintUsingContainer(v30, (uint64_t *)&v297, (WebCore::LayoutRect *)v304, 1);
          v189 = v297;
          v297 = 0;
          if (v189)
          {
            if (*(_DWORD *)v189 == 1)
              WTF::fastFree(v189, v27);
            else
              --*(_DWORD *)v189;
          }
          if (v355)
          {
            v190 = *((_DWORD *)v355 + 4);
            if (v190)
            {
              *((_DWORD *)v355 + 4) = v190 - 1;
              goto LABEL_441;
            }
LABEL_465:
            __break(0xC471u);
            JUMPOUT(0x19635C0F0);
          }
LABEL_441:
          v30 = *(_QWORD *)this;
        }
      }
    }
  }
  *(_OWORD *)v292 = *(_OWORD *)v230;
  *(_OWORD *)&v292[16] = *(_OWORD *)&v230[16];
  v355 = 0;
  v354 = 0;
  v357 = 0;
  v356 = 0;
  v358 = 1;
  v359 = 0;
  v360[0] = 0;
  v361 = 0;
  v362 = 0;
  v363 = 256;
  v364 = 0;
  v365 = 0;
  v289 = 1;
  v290 = 1;
  v291 = 0;
  v288 = v30;
  if (*(_QWORD *)&v230[8])
  {
    v228 = v30;
    while (1)
    {
      if ((_DWORD)v272)
      {
        if (HIDWORD(v272))
          HIDWORD(v272) = 0;
        v175 = v271;
        v30 = v228;
        if (v271)
        {
          v271 = 0;
          LODWORD(v272) = 0;
          WTF::fastFree(v175, v27);
        }
      }
      v273 = 0;
      v290 = 1;
      v291 = 0;
      WebCore::LineBreaker::nextLineBreak(&v288, (uint64_t)v230, (const WebCore::RenderInline *)&v289, (uint64_t)&v354, (WebCore::BreakingContext *)v304);
      *(_OWORD *)v292 = *(_OWORD *)v304;
      *(_OWORD *)&v292[13] = *(_OWORD *)&v304[13];
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)this + 1936))(*(_QWORD *)this, &v356);
      v364 = 0;
      if (!*(_QWORD *)&v230[8])
        break;
      if (!v290)
      {
        if ((*(_BYTE *)(v30 + 124) & 0x10) != 0)
        {
          if ((*(_BYTE *)(v30 + 123) & 4) != 0)
            v55 = 2;
          else
            v55 = 1;
        }
        else
        {
          v55 = 0;
        }
        if ((*(_QWORD *)(v30 + 96) & 0x1C00000) == 0x1000000 && !*((_QWORD *)v251 + 1))
        {
          LOBYTE(v297) = (*(_DWORD *)(v30 + 120) & 0x4000000) != 0;
          v287[0] = *(_OWORD *)v230;
          v287[1] = *(_OWORD *)&v230[16];
          WebCore::determineDirectionality((uint64_t)&v297, (uint64_t *)v287);
          v163 = (*(_DWORD *)(v30 + 96) >> 22) & 7;
          v165 = v163 == 2 || v163 == 5;
          v285[0] = v297;
          v285[1] = v297;
          v285[2] = v297;
          WebCore::BidiContext::create(v297, (char)v297, v165, 0, 0, (uint64_t *)v304);
          v166 = *(unsigned int **)v304;
          v286 = *(_QWORD *)v304;
          WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::setStatus((WTF **)v230, v285);
          v286 = 0;
          if (v166)
          {
            do
            {
              v168 = __ldaxr(v166);
              v169 = v168 - 1;
            }
            while (__stlxr(v169, v166));
            if (!v169)
            {
              atomic_store(1u, v166);
              *(_QWORD *)v304 = v166;
              WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)v304, v167);
            }
          }
          v30 = v228;
        }
        WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::createBidiRunsForLine((uint64_t)v230, (uint64_t)v292, v55);
        v57 = HIDWORD(v278);
        if (HIDWORD(v278))
        {
          while (1)
          {
            v201 = v277 + 32 * v57;
            v203 = *(WebCore **)(v201 - 32);
            v202 = *(WebCore::RenderObject **)(v201 - 24);
            v204 = *(WebCore::BidiCharacterRun ***)(v201 - 16);
            v205 = *(_DWORD *)(v201 - 8);
            HIDWORD(v278) = v57 - 1;
            v206 = WebCore::highestContainingIsolateWithinRoot(v203, v202, v56);
            v207 = (uint64_t)v206;
            if (v206)
            {
              if ((*((_BYTE *)v206 + 45) & 0x20) == 0)
                break;
            }
            v304[20] = 0;
            *(_DWORD *)&v304[24] = 0;
            v304[28] = 0;
            memset(v304, 0, 17);
            v308 = 0;
            v309 = 0;
            v310 = 0;
            v306 = 0;
            v305 = 0;
            v307 = 0;
            v314 = 0;
            v315 = 0;
            v316 = 0;
            v312 = 0;
            v311 = 0;
            v313 = 0;
            v320 = 0;
            v321 = 0;
            v322 = 0;
            v318 = 0;
            v317 = 0;
            v319 = 0;
            v323 = 0xA0000000ALL;
            v324 = 10;
            v325 = 0;
            v326 = 10;
            v330 = 0;
            v331 = 0;
            v332 = 0;
            v328 = 0;
            v327 = 0;
            v329 = 0;
            v333 = 0;
            v337 = 0;
            v338 = 0;
            v339 = 0;
            v335 = 0;
            v334 = 0;
            v336 = 0;
            v340 = 1;
            v342 = 0;
            memset(v341, 0, sizeof(v341));
            v345 = 0;
            v346 = 0;
            v343 = 0;
            v344 = 0;
            v347[0] = 0;
            v347[1] = (uint64_t)&v348;
            v347[2] = 8;
            v349 = 0;
            v350 = 0;
            v208 = (*((_DWORD *)v206 + 24) >> 22) & 7;
            v303 = 0;
            if (v208 == 4)
            {
              v297 = v206;
              v298 = v203;
              v299 = 0;
              v300 = 0;
              v301 = 0;
              v302 = 0;
              WebCore::determineDirectionality((uint64_t)&v303, (uint64_t *)&v297);
              v209 = 0;
              v210 = v303;
            }
            else
            {
              v211 = *((_DWORD *)v206 + 30);
              v210 = (v211 >> 26) & 1;
              v303 = (v211 & 0x4000000) != 0;
              v209 = v208 == 2 || v208 == 5;
            }
            v295[0] = v210;
            v295[1] = v210;
            v295[2] = v210;
            WebCore::BidiContext::create(v210, v210, v209, 0, 0, (uint64_t *)&v293);
            v213 = (unsigned int *)v293;
            v296 = v293;
            WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::setStatus((WTF **)v304, v295);
            v296 = 0;
            if (v213)
            {
              do
              {
                v215 = __ldaxr(v213);
                v216 = v215 - 1;
              }
              while (__stlxr(v216, v213));
              if (!v216)
              {
                atomic_store(1u, v213);
                *(_QWORD *)&v293 = v213;
                WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((WTF **)&v293, v214);
              }
            }
            WebCore::setUpResolverToResumeInIsolate((uint64_t)v304, (uint64_t)v230, (uint64_t)v204, v207, (uint64_t)v203);
            *(_QWORD *)v304 = v207;
            *(_QWORD *)&v304[8] = v203;
            v304[16] = 0;
            v304[20] = 0;
            *(_DWORD *)&v304[24] = v205;
            v304[28] = 0;
            WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::createBidiRunsForLine((uint64_t)v304, (uint64_t)v292, 0);
            if (v342)
              WebCore::BidiRunList<WebCore::BidiRun>::replaceRunWithRuns((uint64_t)&v267, v204, (uint64_t)v341);
            for (i = HIDWORD(v350); HIDWORD(v350); i = HIDWORD(v350))
            {
              v219 = v349 + 32 * i;
              v220 = *(_OWORD *)(v219 - 16);
              v293 = *(_OWORD *)(v219 - 32);
              v294 = v220;
              HIDWORD(v350) = i - 1;
              v221 = v220;
              v353 = WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take(v347, v220);
              v352 = v221;
              WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>(v275, &v352, &v353, (uint64_t)v351);
              if (HIDWORD(v278) == (_DWORD)v278)
              {
                WTF::Vector<WebCore::BidiIsolatedRun,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BidiIsolatedRun>((uint64_t)&v277, (unint64_t)&v293);
              }
              else
              {
                v222 = (_OWORD *)(v277 + 32 * HIDWORD(v278));
                v223 = v294;
                *v222 = v293;
                v222[1] = v223;
                ++HIDWORD(v278);
              }
            }
            WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::~BidiResolverWithIsolate((uint64_t)v304, v217);
            v57 = HIDWORD(v278);
            v30 = v228;
            if (!HIDWORD(v278))
              goto LABEL_89;
          }
          __break(0xC471u);
LABEL_499:
          JUMPOUT(0x19635B72CLL);
        }
LABEL_89:
        if (v270)
        {
          v58 = v267;
          v59 = *((_WORD *)v251 + 2);
          HIBYTE(v289) = *(_QWORD *)&v292[8] == 0;
          if (v267)
          {
            v60 = v290;
            if (!v290)
            {
              v77 = 0;
              v227 = v59;
              while (1)
              {
                if (!v60)
                {
                  InlineBoxForRenderer = WebCore::LegacyLineLayout::createInlineBoxForRenderer(this, *((WebCore::RenderObject **)v58 + 3));
                  v79 = InlineBoxForRenderer;
                  *((_QWORD *)v58 + 4) = InlineBoxForRenderer;
                  if (!v77)
                  {
                    v80 = *(_QWORD *)(*((_QWORD *)v58 + 3) + 32);
LABEL_134:
                    if (v80)
                      v80 = *(_QWORD *)(v80 + 8);
                    v77 = 0;
                    v81 = *(_QWORD *)this;
                    v226 = 1;
                    v82 = InlineBoxForRenderer;
                    while (2)
                    {
                      v83 = v80;
                      if (v80 == v81)
                      {
                        if ((*(_BYTE *)(v81 + 52) & 7) != 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19635B98CLL);
                        }
                        if (*(_DWORD *)(v81 + 240) == 2)
                        {
                          v139 = *(_QWORD *)(v81 + 232);
                          if (v139)
                          {
                            appended = *(WebCore::SVGRootInlineBox **)(v139 + 16);
                            if (appended)
                            {
                              if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)appended + 88))(*(_QWORD *)(v139 + 16)) & 1) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19635BCECLL);
                              }
LABEL_273:
                              v140 = appended;
                              while ((*((_WORD *)v140 + 26) & 2) == 0 && !*((_QWORD *)v140 + 1))
                              {
                                v140 = (WebCore::SVGRootInlineBox *)*((_QWORD *)v140 + 3);
                                v86 = 1;
                                if (!v140)
                                  goto LABEL_150;
                              }
                              v81 = *(_QWORD *)this;
                            }
                          }
                        }
                      }
                      else
                      {
                        if ((*(_BYTE *)(v80 + 45) & 0x20) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19635BBE0);
                        }
                        appended = *(WebCore::SVGRootInlineBox **)(v80 + 160);
                        if (appended)
                          goto LABEL_273;
                      }
                      if (v81 == v83)
                      {
                        appended = WebCore::LegacyLineLayout::createAndAppendRootInlineBox(this);
                        goto LABEL_147;
                      }
                      if (v83 && (*(_BYTE *)(v83 + 45) & 2) != 0)
                      {
                        ++*(_DWORD *)(v83 + 16);
                        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v83 + 688))(v304, v83);
                        if (*(_QWORD *)(v83 + 64))
                        {
                          v191 = *(_QWORD *)(v83 + 72);
                          appended = *(WebCore::SVGRootInlineBox **)v304;
                          *(_QWORD *)(v191 + 64) = *(_QWORD *)v304;
                          *((_QWORD *)appended + 7) = v191;
                        }
                        else
                        {
                          appended = *(WebCore::SVGRootInlineBox **)v304;
                          *(_QWORD *)(v83 + 64) = *(_QWORD *)v304;
                        }
                        *(_QWORD *)(v83 + 72) = appended;
                        v85 = *(_DWORD *)(v83 + 16);
                        if (!v85)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19635BA3CLL);
                        }
                        goto LABEL_146;
                      }
                      appended = 0;
                      if (v83 && (*(_BYTE *)(v83 + 45) & 0x20) != 0)
                      {
                        ++*(_DWORD *)(v83 + 16);
                        v162 = WebCore::RenderInline::createAndAppendInlineFlowBox((WebCore::RenderInline *)v83);
                        v85 = *(_DWORD *)(v83 + 16);
                        if (!v85)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19635C064);
                        }
                        appended = (WebCore::SVGRootInlineBox *)v162;
LABEL_146:
                        *(_DWORD *)(v83 + 16) = v85 - 1;
LABEL_147:
                        if (appended
                          && ((*(uint64_t (**)(WebCore::SVGRootInlineBox *))(*(_QWORD *)appended + 72))(appended) & 1) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19635B96CLL);
                        }
                      }
                      v86 = 0;
                      v87 = *((_WORD *)appended + 26) & 0xFFFE | v289;
                      *((_WORD *)appended + 26) = v87;
                      *((_WORD *)appended + 26) = (v87 & 0xF7FF | (*(_DWORD *)(*(_QWORD *)this + 20) >> 1) & 0x800) ^ 0x800;
LABEL_150:
                      if (!v77)
                        v77 = appended;
                      if (v82)
                      {
                        *((_QWORD *)v82 + 3) = appended;
                        v229 = v86;
                        if (*((_QWORD *)appended + 9))
                        {
                          v138 = *((_QWORD *)appended + 10);
                          *(_QWORD *)(v138 + 8) = v82;
                          *((_QWORD *)v82 + 2) = v138;
                        }
                        else
                        {
                          *((_QWORD *)appended + 9) = v82;
                        }
                        v88 = *((_WORD *)appended + 26);
                        *((_QWORD *)appended + 10) = v82;
                        v89 = *((_WORD *)v82 + 26) & 0xFFFE | v88 & 1;
                        *((_WORD *)v82 + 26) = v89;
                        *((_WORD *)v82 + 26) = v89 & 0xF7FF | *((_WORD *)appended + 26) & 0x800;
                        if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v82 + 80))(v82))
                        {
                          v91 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v82 + 4) + 8) + 32);
                          if (v91)
                            v91 = *(_QWORD *)(v91 + 8);
                          v92 = *((_QWORD *)appended + 4);
                          if (v92)
                            v92 = *(_QWORD *)(v92 + 8);
                          if ((*(_BYTE *)(v92 + 45) & 8) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19635B9ACLL);
                          }
                          if (v91 == v92)
                            *((_DWORD *)appended + 14) |= 1u;
                          v93 = appended;
                          do
                          {
                            v94 = *((_DWORD *)v93 + 14);
                            if ((v94 & 2) != 0)
                              break;
                            *((_DWORD *)v93 + 14) = v94 | 2;
                            v93 = (WebCore::SVGRootInlineBox *)*((_QWORD *)v93 + 3);
                          }
                          while (v93);
                        }
                        else if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v82 + 72))(v82)
                               && (*((_BYTE *)v82 + 56) & 2) != 0)
                        {
                          v128 = appended;
                          do
                          {
                            v127 = *((_DWORD *)v128 + 14);
                            if ((v127 & 2) != 0)
                              break;
                            *((_DWORD *)v128 + 14) = v127 | 2;
                            v128 = (WebCore::SVGRootInlineBox *)*((_QWORD *)v128 + 3);
                          }
                          while (v128);
                        }
                        v95 = *((_QWORD *)v82 + 4);
                        if ((*((_WORD *)v82 + 26) & 1) != 0)
                        {
                          LineStyle = WebCore::RenderObject::firstLineStyle(*(WebCore::RenderObject **)(v95 + 8), v90);
                        }
                        else
                        {
                          if (v95)
                            v95 = *(_QWORD *)(v95 + 8);
                          if ((*(_BYTE *)(v95 + 45) & 2) != 0)
                          {
                            v95 = *(_QWORD *)(v95 + 32);
                            if (v95)
                              v95 = *(_QWORD *)(v95 + 8);
                          }
                          LineStyle = (char *)(v95 + 80);
                        }
                        if (!(*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v82 + 80))(v82))
                        {
                          v131 = *((_QWORD *)v82 + 4);
                          if (v131)
                          {
                            v131 = *(_QWORD *)(v131 + 8);
                            v132 = v131 + 45;
                          }
                          else
                          {
                            v132 = 45;
                          }
                          if ((*(_BYTE *)v132 & 8) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19635BC00);
                          }
                          v133 = *(_QWORD *)(v131 + 144);
                          if (v133 && (*(_BYTE *)(v133 + 25) & 8) != 0)
                          {
                            v154 = *((unsigned __int16 *)v82 + 26) | (*((unsigned __int8 *)v82 + 54) << 16);
                            v155 = v82;
                            do
                            {
                              *((_BYTE *)v155 + 54) = BYTE2(v154);
                              *((_WORD *)v155 + 26) = v154 & 0xDFFF;
                              v155 = (WebCore::LegacyInlineBox *)*((_QWORD *)v155 + 3);
                              if (!v155)
                                break;
                              v156 = *((unsigned __int16 *)v155 + 26);
                              v154 = v156 | (*((unsigned __int8 *)v155 + 54) << 16);
                            }
                            while ((v156 & 0x2000) != 0);
                          }
                          else if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 16) + 52) & 0xE) != 0)
                          {
                            v192 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)LineStyle);
                            if (v192 > 0.0)
                            {
                              v193 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)LineStyle);
                              if ((float)(v193 + WebCore::RenderStyle::outlineOffset((WebCore::RenderStyle *)LineStyle)) > 0.0)
                              {
                                v194 = *((unsigned __int16 *)v82 + 26) | (*((unsigned __int8 *)v82 + 54) << 16);
                                v195 = v82;
                                do
                                {
                                  *((_BYTE *)v195 + 54) = BYTE2(v194);
                                  *((_WORD *)v195 + 26) = v194 & 0xDFFF;
                                  v195 = (WebCore::LegacyInlineBox *)*((_QWORD *)v195 + 3);
                                  if (!v195)
                                    break;
                                  v196 = *((unsigned __int16 *)v195 + 26);
                                  v194 = v196 | (*((unsigned __int8 *)v195 + 54) << 16);
                                }
                                while ((v196 & 0x2000) != 0);
                              }
                            }
                          }
                          goto LABEL_218;
                        }
                        v98 = *((_QWORD *)v82 + 4);
                        if ((*((_WORD *)v82 + 26) & 1) != 0)
                        {
                          v99 = WebCore::RenderObject::firstLineStyle(*(WebCore::RenderObject **)(v98 + 8), v97);
                        }
                        else
                        {
                          if (v98)
                            v98 = *(_QWORD *)(v98 + 8);
                          if ((*(_BYTE *)(v98 + 45) & 2) != 0)
                          {
                            v98 = *(_QWORD *)(v98 + 32);
                            if (v98)
                              v98 = *(_QWORD *)(v98 + 8);
                          }
                          v99 = (char *)(v98 + 80);
                        }
                        if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v82 + 80))(v82))
                        {
                          v100 = *((_QWORD *)v82 + 4);
                          if (v100)
                            v101 = *(_QWORD *)(v100 + 8);
                          else
                            v101 = 0;
                          if ((*(_BYTE *)(v101 + 45) & 2) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19635B9CCLL);
                          }
                          v102 = *((unsigned int *)v82 + 18);
                          v103 = *((_DWORD *)v82 + 19);
                          *(_DWORD *)v304 = *((_DWORD *)v82 + 18);
                          *(_DWORD *)&v304[4] = v103;
                          *(_DWORD *)&v304[8] = 0;
                          if (v100)
                            v104 = *(_QWORD *)(v100 + 8);
                          else
                            v104 = 0;
                          if ((*(_BYTE *)(v104 + 45) & 2) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19635B9ECLL);
                          }
                          v105 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v104 + 32) + 8) + 120);
                          v106 = (v105 >> 27) & 7;
                          if ((v105 & 0x40000000) == 0 && v106 == 3)
                            goto LABEL_299;
                          if (!v106)
                            goto LABEL_187;
                          v150 = (v105 & 0x40000000) != 0 ? 1 : 2;
                          if (v106 == v150)
                          {
LABEL_299:
                            if (v103 == 1)
                              goto LABEL_300;
LABEL_187:
                            v107 = 0;
                          }
                          else
                          {
                            v107 = 0;
                            if ((v105 & 0x40000000) == 0 && v106 == 1 && v103 == 1)
                            {
LABEL_300:
                              if (v100)
                                v100 = *(_QWORD *)(v100 + 8);
                              if ((*(_BYTE *)(v100 + 45) & 2) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19635C028);
                              }
                              v151 = *(_QWORD *)(v100 + 104);
                              if (v151 && *(_DWORD *)(v151 + 4) > v102)
                              {
                                v152 = *(_QWORD *)(v151 + 8);
                                if ((*(_BYTE *)(v151 + 16) & 4) != 0)
                                  v153 = *(unsigned __int8 *)(v152 + v102);
                                else
                                  v153 = *(unsigned __int16 *)(v152 + 2 * v102);
                              }
                              else
                              {
                                v153 = 0;
                              }
                              v107 = v153 == 10;
                            }
                          }
                          v304[12] = v107;
                          v304[16] = 0;
                          v304[20] = 0;
                          WebCore::MarkedText::collectForDocumentMarkers(v101, (uint64_t)v304, 2, (uint64_t)&v297);
                          v108 = HIDWORD(v298);
                          v109 = v297;
                          if (HIDWORD(v298))
                          {
                            v159 = 40 * HIDWORD(v298);
                            v160 = (WTF::StringImpl **)((char *)v297 + 24);
                            do
                            {
                              v161 = *v160;
                              *v160 = 0;
                              if (v161)
                              {
                                if (*(_DWORD *)v161 == 2)
                                {
                                  v224 = v160;
                                  v225 = v159;
                                  WTF::StringImpl::destroy(v161, v97);
                                  v160 = v224;
                                  v159 = v225;
                                }
                                else
                                {
                                  *(_DWORD *)v161 -= 2;
                                }
                              }
                              v160 += 5;
                              v159 -= 40;
                            }
                            while (v159);
                            v109 = v297;
                          }
                          if (v109)
                          {
                            v297 = 0;
                            LODWORD(v298) = 0;
                            WTF::fastFree(v109, v97);
                          }
                          v110 = v108 != 0;
                        }
                        else
                        {
                          v110 = 0;
                        }
                        v111 = *((_QWORD *)v99 + 4);
                        v112 = (WebCore::Length *)(v111 + 232);
                        v113 = *(unsigned __int8 *)(v111 + 236);
                        if (v113 == 4)
                        {
                          if (*(_BYTE *)(v111 + 238))
                            v114 = *(float *)v112;
                          else
                            v114 = (float)*(int *)v112;
                          goto LABEL_195;
                        }
                        if (v113 != 3)
                        {
                          if (v113 == 11)
                          {
                            WebCore::Length::nonNanCalculatedValue(v112, *(float *)(v111 + 204));
                            goto LABEL_195;
                          }
                          goto LABEL_196;
                        }
                        if (*(_BYTE *)(v111 + 238))
                          v197 = *(float *)v112;
                        else
                          v197 = (float)*(int *)v112;
                        v114 = (float)(v197 / 100.0) * *(float *)(v111 + 204);
LABEL_195:
                        if (v114 >= 0.0)
                        {
LABEL_196:
                          v115 = *((_QWORD *)v99 + 3);
                          if (!*(_QWORD *)(v115 + 160) && (*(_BYTE *)(v115 + 231) & 0x1C) == 0)
                          {
                            if ((*(_BYTE *)(v115 + 238) & 4) == 0)
                            {
                              v116 = *(float *)(v115 + 4);
                              goto LABEL_200;
                            }
                            v185 = *(unsigned __int8 *)(v115 + 248);
                            if (v185 != 11)
                            {
                              if (v185 == 13)
                              {
                                v118 = 0;
                              }
                              else
                              {
                                if (*(_BYTE *)(v115 + 250))
                                {
                                  v116 = *(float *)(v115 + 244);
LABEL_200:
                                  v117 = v116 <= 0.0;
                                }
                                else
                                {
                                  v117 = *(_DWORD *)(v115 + 244) <= 0;
                                }
                                v118 = !v117;
                              }
                              if (!v110 && !v118 && !*(_BYTE *)(v115 + 192))
                              {
                                v119 = *(_QWORD *)(*((_QWORD *)v99 + 1) + 40);
                                v120 = *(unsigned __int8 *)(v119 + 448);
                                v304[0] = *(_BYTE *)(v119 + 448);
                                *(_DWORD *)&v304[4] = 0;
                                v304[10] = 0;
                                *(_WORD *)&v304[8] = *(_WORD *)(v119 + 456);
                                if (v304[8] - 2 >= 9)
                                {
                                  if (v304[8] == 11)
                                  {
                                    *(_DWORD *)&v304[4] = *(_DWORD *)(v119 + 452);
                                    WebCore::Length::ref((int *)&v304[4]);
                                    v120 = v304[0];
                                  }
                                }
                                else
                                {
                                  v304[10] = *(_BYTE *)(v119 + 458);
                                  *(_DWORD *)&v304[4] = *(_DWORD *)(v119 + 452);
                                }
                                if (v120)
                                  v121 = 1;
                                else
                                  v121 = (*(_BYTE *)(*((_QWORD *)v99 + 3) + 236) & 7) != 0;
                                if (v304[8] == 11)
                                  WebCore::Length::deref((WebCore::Length *)&v304[4]);
                                if (!v121)
                                {
LABEL_218:
                                  v122 = *((_QWORD *)appended + 4);
                                  if ((*((_WORD *)appended + 26) & 1) != 0)
                                  {
                                    if (v122)
                                      v177 = *(WebCore::RenderElement **)(v122 + 8);
                                    else
                                      v177 = 0;
                                    if ((*((_BYTE *)v177 + 45) & 8) == 0)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19635C0B4);
                                    }
                                    v123 = WebCore::RenderElement::firstLineStyle(v177, v97);
                                    v30 = v228;
                                  }
                                  else
                                  {
                                    v30 = v228;
                                    if (v122)
                                      v122 = *(_QWORD *)(v122 + 8);
                                    if ((*(_BYTE *)(v122 + 45) & 8) == 0)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19635B8F4);
                                    }
                                    v123 = (char *)(v122 + 80);
                                  }
                                  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v123 + 1) + 16) + 52) & 0xE) != 0
                                    && WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)v123) > 0.0)
                                  {
                                    v181 = WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)v123);
                                    if ((float)(v181 + WebCore::RenderStyle::outlineOffset((WebCore::RenderStyle *)v123)) > 0.0)
                                    {
                                      v182 = *((unsigned __int16 *)appended + 26) | (*((unsigned __int8 *)appended + 54) << 16);
                                      v183 = appended;
                                      do
                                      {
                                        *((_BYTE *)v183 + 54) = BYTE2(v182);
                                        *((_WORD *)v183 + 26) = v182 & 0xDFFF;
                                        v183 = (WebCore::SVGRootInlineBox *)*((_QWORD *)v183 + 3);
                                        if (!v183)
                                          break;
                                        v184 = *((unsigned __int16 *)v183 + 26);
                                        v182 = v184 | (*((unsigned __int8 *)v183 + 54) << 16);
                                      }
                                      while ((v184 & 0x2000) != 0);
                                    }
                                  }
                                  if ((*((_WORD *)appended + 26) & 0x2000) != 0
                                    && (*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v82 + 72))(v82)
                                    && (*((_WORD *)v82 + 26) & 0x2000) == 0)
                                  {
                                    v178 = *((unsigned __int16 *)appended + 26) | (*((unsigned __int8 *)appended + 54) << 16);
                                    v179 = appended;
                                    do
                                    {
                                      *((_BYTE *)v179 + 54) = BYTE2(v178);
                                      *((_WORD *)v179 + 26) = v178 & 0xDFFF;
                                      v179 = (WebCore::SVGRootInlineBox *)*((_QWORD *)v179 + 3);
                                      if (!v179)
                                        break;
                                      v180 = *((unsigned __int16 *)v179 + 26);
                                      v178 = v180 | (*((unsigned __int8 *)v179 + 54) << 16);
                                    }
                                    while ((v180 & 0x2000) != 0);
                                  }
                                  v124 = *((_QWORD *)v82 + 4);
                                  LOBYTE(v59) = v227;
                                  v86 = v229;
                                  if (v124)
                                  {
                                    v125 = *(_QWORD *)(v124 + 8);
                                    if (v125 && (*(_BYTE *)(v125 + 45) & 0x20) != 0)
                                    {
                                      v134 = *(_QWORD *)(v125 + 144);
                                      if (v134)
                                      {
                                        if ((*(_BYTE *)(v134 + 25) & 8) != 0)
                                          *((_DWORD *)appended + 14) |= 0x40000u;
                                      }
                                    }
                                  }
                                  goto LABEL_232;
                                }
                              }
                            }
                          }
                        }
                        v186 = *((unsigned __int16 *)v82 + 26) | (*((unsigned __int8 *)v82 + 54) << 16);
                        v187 = v82;
                        do
                        {
                          *((_BYTE *)v187 + 54) = BYTE2(v186);
                          *((_WORD *)v187 + 26) = v186 & 0xDFFF;
                          v187 = (WebCore::LegacyInlineBox *)*((_QWORD *)v187 + 3);
                          if (!v187)
                            break;
                          v188 = *((unsigned __int16 *)v187 + 26);
                          v186 = v188 | (*((unsigned __int8 *)v187 + 54) << 16);
                        }
                        while ((v188 & 0x2000) != 0);
                        goto LABEL_218;
                      }
LABEL_232:
                      if ((v86 & 1) != 0)
                        goto LABEL_239;
                      v81 = *(_QWORD *)this;
                      if (v83 == *(_QWORD *)this)
                        goto LABEL_239;
                      v82 = appended;
                      v80 = *(_QWORD *)this;
                      if (++v226 <= 0xC7)
                      {
                        v80 = 0;
                        v135 = *(_QWORD *)(v83 + 32);
                        v82 = appended;
                        if (v135)
                        {
                          v80 = *(_QWORD *)(v135 + 8);
                          v82 = appended;
                        }
                      }
                      continue;
                    }
                  }
                  v136 = *((_QWORD *)v77 + 4);
                  if (v136)
                    v136 = *(_QWORD *)(v136 + 8);
                  if ((*(_BYTE *)(v136 + 45) & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19635BCCCLL);
                  }
                  v80 = *(_QWORD *)(*((_QWORD *)v58 + 3) + 32);
                  if (v80)
                    v137 = *(_QWORD *)(v80 + 8);
                  else
                    v137 = 0;
                  if (v136 != v137)
                    goto LABEL_134;
                  WebCore::LegacyInlineFlowBox::addToLine(v77, InlineBoxForRenderer);
LABEL_239:
                  v129 = *((_WORD *)v79 + 26) & 0xFF03 | (*((unsigned __int8 *)v79 + 54) << 16);
                  *((_WORD *)v79 + 26) = *((_WORD *)v79 + 26) & 0xFF03 | (4 * (*((_BYTE *)v58 + 16) & 0x3F));
                  *((_BYTE *)v79 + 54) = BYTE2(v129);
                  if ((*(unsigned int (**)(WebCore::LegacyInlineBox *))(*(_QWORD *)v79 + 80))(v79))
                  {
                    v130 = *((_DWORD *)v58 + 2);
                    *((_DWORD *)v79 + 18) = v130;
                    *((_DWORD *)v79 + 19) = *((_DWORD *)v58 + 3) - v130;
                  }
                }
                v58 = *(WTF **)v58;
                if (!v58)
                  break;
                v60 = v290;
              }
            }
          }
          v61 = (_WORD *)*((_QWORD *)this + 2);
          if (v61 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v61 + 88))(*((_QWORD *)this + 2)) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19635B874);
          }
          v63 = v61[26];
          v62 = v61 + 26;
          *v62 = v63 | 2;
          for (j = *(_QWORD **)(v62 + 10); j; j = (_QWORD *)j[1])
            (*(void (**)(_QWORD *))(*j + 128))(j);
          v65 = (unsigned int *)*((_QWORD *)this + 2);
          if (v65)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v65 + 88))(*((_QWORD *)this + 2)) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19635B894);
            }
            v66 = v65[13] & 0xFF03 | (*((unsigned __int8 *)v65 + 54) << 16);
            *((_WORD *)v65 + 26) = v65[13] & 0xFF03 | (4 * (v59 & 0x3F));
            *((_BYTE *)v65 + 54) = BYTE2(v66);
            v67 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v65 + 112))(v65);
            for (k = v267; k; k = *(WTF **)k)
            {
              v69 = *((_QWORD *)k + 4);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 80))(v69))
              {
                v70 = *(_QWORD *)(v69 + 32);
                if (v70)
                  v70 = *(_QWORD *)(v70 + 8);
                if ((*(_BYTE *)(v70 + 45) & 2) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19635B834);
                }
                if (*(_DWORD *)(v69 + 76))
                {
                  if ((*(_WORD *)(v69 + 52) & 4) != 0)
                    *(_WORD *)(v70 + 118) |= 0x40u;
                }
                else
                {
                  WebCore::LegacyLineLayout::removeInlineBox((uint64_t)k, (uint64_t)v65);
                }
              }
            }
            if (v67)
            {
              if (*(_BYTE *)(*(_QWORD *)this + 46) != 85)
              {
                __break(0xC471u);
                JUMPOUT(0x19635B8B4);
              }
              if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v65 + 112))(v65) & 1) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19635B8D4);
              }
              WebCore::SVGRootInlineBox::computePerCharacterLayoutInformation((WebCore::SVGRootInlineBox *)v65);
            }
            *(_QWORD *)v304 = 0;
            WebCore::LegacyInlineFlowBox::computeOverflow((uint64_t)v65, (void *)v65[29], v65[30], (uint64_t **)v304);
          }
        }
        v71 = v267;
        v267 = 0;
        if (v71)
        {
          v72 = *(WTF ***)v71;
          *(_QWORD *)v71 = 0;
          if (v72)
          {
            do
            {
              v144 = *v72;
              *v72 = 0;
              WebCore::BidiCharacterRun::~BidiCharacterRun(v72);
              WTF::fastFree(v145, v146);
              v72 = (WTF **)v144;
            }
            while (v144);
            v147 = *(WebCore::BidiCharacterRun ***)v71;
            *(_QWORD *)v71 = 0;
            v30 = v228;
            if (v147)
            {
              WebCore::BidiCharacterRun::~BidiCharacterRun(v147);
              WTF::fastFree(v148, v149);
            }
          }
          WTF::fastFree(v71, v27);
        }
        v268 = 0;
        v269 = 0;
        v270 = 0;
        v266 = 1;
        if (!v290)
          LOBYTE(v289) = 0;
      }
      if ((_DWORD)v272)
      {
        if (HIDWORD(v272))
          HIDWORD(v272) = 0;
        v176 = v271;
        v30 = v228;
        if (v271)
        {
          v271 = 0;
          LODWORD(v272) = 0;
          WTF::fastFree(v176, v27);
        }
      }
      v73 = 0;
      v273 = 0;
      if (*(_QWORD *)&v292[8] && *(_QWORD *)&v292[8] != *(_QWORD *)v292)
      {
        v73 = 0;
        v74 = *(_QWORD *)&v292[8];
        do
        {
          if ((*(_BYTE *)(v74 + 45) & 0x20) != 0)
          {
            v158 = v74;
            if ((*(_BYTE *)(v74 + 45) & 2) != 0)
              v158 = *(_QWORD *)(*(_QWORD *)(v74 + 32) + 8);
            if (((*(_DWORD *)(v158 + 96) >> 22) & 7u) - 3 <= 2)
              ++v73;
          }
          v75 = *(_QWORD *)(v74 + 32);
          if (!v75)
            break;
          v74 = *(_QWORD *)(v75 + 8);
        }
        while (v74 && v74 != *(_QWORD *)v292);
      }
      *(_OWORD *)v230 = *(_OWORD *)v292;
      *(_OWORD *)&v230[13] = *(_OWORD *)&v292[13];
      v274 = v73;
      if (!*(_QWORD *)&v292[8])
        goto LABEL_43;
    }
    WebCore::BidiRunList<WebCore::BidiRun>::clear((uint64_t)&v267);
    v266 = 1;
    *(_QWORD *)&v230[8] = 0;
    v230[16] = 0;
    v230[20] = 0;
    *(_DWORD *)&v230[24] = 0;
    v230[28] = 0;
    v274 = 0;
  }
LABEL_43:
  if (v361)
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v360);
  v32 = v359;
  v359 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v27);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v355;
  v355 = 0;
  if (v33)
  {
    v34 = (WebCore::ComplexTextController *)*((_QWORD *)v33 + 42);
    *((_QWORD *)v33 + 42) = 0;
    if (v34)
    {
      WebCore::ComplexTextController::~ComplexTextController(v34, (WTF::StringImpl *)v27);
      WTF::fastFree(v35, v36);
    }
    v37 = (WTF::StringImpl *)*((_QWORD *)v33 + 38);
    *((_QWORD *)v33 + 38) = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v37 -= 2;
    }
    WebCore::FontCascade::~FontCascade(v33, v27);
    WTF::fastFree(v38, v39);
  }
  if (*v5)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 88))(*v5) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19635B854);
    }
    v40 = *v5;
    if (*v5 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v40 + 88))(*v5) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19635B914);
    }
    v41 = *((_QWORD *)this + 2);
    if (v41 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 88))(*((_QWORD *)this + 2)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19635B934);
    }
    while (1)
    {
      if ((*(_BYTE *)(v40 + 58) & 4) != 0)
      {
        for (m = *(_QWORD *)(v40 + 72); m; m = *(_QWORD *)(m + 8))
        {
          v171 = *(_QWORD *)(m + 32);
          if (v171)
          {
            v172 = *(_QWORD *)(v171 + 8);
            if (v172 && (*(_BYTE *)(v172 + 45) & 0x10) != 0)
            {
              v174 = *(_QWORD *)(v172 + 144);
              if (v174)
              {
                if ((*(_BYTE *)(v174 + 25) & 8) != 0)
                  WebCore::RenderObject::repaint(v172, 0);
              }
            }
          }
        }
      }
      if (v40 == v41)
        break;
      v40 = *(_QWORD *)(v40 + 96);
      if (!v40)
        break;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 88))(v40) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19635BC8CLL);
      }
    }
  }
  WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::~BidiResolverWithIsolate((uint64_t)v230, v27);
  if (*v5)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 88))(*v5) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19635B7BCLL);
    }
    return;
  }
LABEL_68:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 1712))(*(_QWORD *)this))
  {
    v44 = *(unsigned int **)this;
    if (((v44[31] >> 13) & 6) - 2 >= 4)
      v45 = v44 + 41;
    else
      v45 = v44 + 40;
    v46 = *v45;
    v47 = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v44, v43);
    v49 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v47, v48) * 64.0);
    if (v49 >= 2147500000.0)
    {
      v50 = 0x7FFFFFFF;
    }
    else if (v49 <= -2147500000.0)
    {
      v50 = 0x80000000;
    }
    else
    {
      v50 = (int)v49;
    }
    v51 = __OFADD__(v46, v50);
    v52 = v46 + v50;
    v53 = (v46 >> 31) + 0x7FFFFFFF;
    if (!v51)
      v53 = v52;
    if (((v44[31] >> 13) & 6) - 2 >= 4)
      v54 = (int *)(v44 + 41);
    else
      v54 = (int *)(v44 + 40);
    *v54 = v53;
  }
}

uint64_t *WebCore::LegacyLineLayout::addOverflowFromInlineChildren(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  int v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v1 = this[1];
  if (v1)
  {
    v2 = this;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(this[1]) & 1) != 0)
    {
      do
      {
        v3 = *(_QWORD *)(v1 + 64);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 20);
          v5 = *(_QWORD *)(v3 + 28);
        }
        else
        {
          v7 = *(_DWORD *)(v1 + 116);
          v6 = *(_DWORD *)(v1 + 120);
          v8 = (float)v7;
          if ((*(_WORD *)(v1 + 52) & 0x800) != 0)
          {
            v10 = v8 * 0.015625;
            v14 = *(float *)(v1 + 40);
            v9 = *(float *)(v1 + 44);
            v11 = __OFSUB__(v6, v7);
            v16 = v6 - v7;
            v17 = (v6 >> 31) + 0x7FFFFFFF;
            if (!v11)
              v17 = v16;
            v15 = (float)v17 * 0.015625;
          }
          else
          {
            v9 = v8 * 0.015625;
            v10 = *(float *)(v1 + 48);
            v11 = __OFSUB__(v6, v7);
            v12 = v6 - v7;
            v13 = (v6 >> 31) + 0x7FFFFFFF;
            if (!v11)
              v13 = v12;
            v14 = (float)v13 * 0.015625;
            v15 = *(float *)(v1 + 40);
          }
          v18 = floorf(v9 * 64.0);
          LODWORD(v19) = (int)v18;
          if (v18 <= -2147500000.0)
            LODWORD(v19) = 0x80000000;
          if (v18 < 2147500000.0)
            v19 = v19;
          else
            v19 = 0x7FFFFFFFLL;
          v20 = floorf(v10 * 64.0);
          LODWORD(v21) = (int)v20;
          if (v20 <= -2147500000.0)
            LODWORD(v21) = 0x80000000;
          if (v20 < 2147500000.0)
            v21 = v21;
          else
            v21 = 0x7FFFFFFFLL;
          v22 = ceilf((float)(v9 + v14) * 64.0);
          if (v22 >= 2147500000.0)
          {
            v23 = 0x7FFFFFFF;
          }
          else if (v22 <= -2147500000.0)
          {
            v23 = 0x80000000;
          }
          else
          {
            v23 = (int)v22;
          }
          v24 = ceilf((float)(v10 + v15) * 64.0);
          if (v24 >= 2147500000.0)
          {
            v25 = 0x7FFFFFFF;
          }
          else if (v24 <= -2147500000.0)
          {
            v25 = 0x80000000;
          }
          else
          {
            v25 = (int)v24;
          }
          v11 = __OFSUB__(v23, (_DWORD)v19);
          v26 = v23 - v19;
          LODWORD(v27) = (v23 >> 31) + 0x7FFFFFFF;
          if (v11)
            v27 = v27;
          else
            v27 = v26;
          v28 = v25 - v21;
          if (__OFSUB__(v25, (_DWORD)v21))
            v28 = (v25 >> 31) + 0x7FFFFFFF;
          v5 = v27 | (v28 << 32);
          v4 = v19 | (v21 << 32);
        }
        v29[0] = v4;
        v29[1] = v5;
        this = (uint64_t *)WebCore::RenderBox::addVisualOverflow(*v2, (const WebCore::LayoutRect *)v29);
        v1 = *(_QWORD *)(v1 + 96);
        if (!v1)
          return this;
      }
      while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1) & 1) != 0);
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x19635C67CLL);
  }
  return this;
}

uint64_t WebCore::LegacyLineLayout::lineCount(WebCore::LegacyLineLayout *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v1)
    return 0;
  if (!(*(unsigned int (**)(_QWORD))(*v1 + 88))(*((_QWORD *)this + 1)))
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x19635C708);
  }
  v2 = 1;
  while (1)
  {
    v1 = (_QWORD *)v1[12];
    if (!v1)
      return v2;
    ++v2;
    if (((*(uint64_t (**)(_QWORD *))(*v1 + 88))(v1) & 1) == 0)
      goto LABEL_9;
  }
}

BOOL WebCore::LegacyInlineBox::isLineBreak(WebCore::LegacyInlineBox *this)
{
  return *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 46) == 17;
}

uint64_t WebCore::LegacyInlineBox::isInlineFlowBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineBox::isInlineTextBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineBox::isRootInlineBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineBox::isSVGInlineTextBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineBox::isSVGInlineFlowBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

uint64_t WebCore::LegacyInlineBox::isSVGRootInlineBox(WebCore::LegacyInlineBox *this)
{
  return 0;
}

float WebCore::LegacyInlineBox::virtualLogicalHeight(WebCore::LegacyInlineBox *this)
{
  return 0.0;
}

_WORD *WebCore::LegacyInlineBox::setConstructed(WebCore::LegacyInlineBox *this)
{
  _WORD *result;
  __int16 v2;

  v2 = *((_WORD *)this + 26);
  result = (_WORD *)((char *)this + 52);
  *result = v2 | 2;
  return result;
}

uint64_t WebCore::LegacyInlineBox::isLeaf(WebCore::LegacyInlineBox *this)
{
  return 1;
}

uint64_t WebCore::LegacyInlineTextBox::isInlineTextBox(WebCore::LegacyInlineTextBox *this)
{
  return 1;
}

uint64_t WebCore::LegacyInlineTextBox::dirtyOwnLineBoxes(WebCore::LegacyInlineTextBox *this)
{
  return (*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)this + 184))(this);
}

void WebCore::LegacyInlineFlowBox::~LegacyInlineFlowBox(WebCore::LegacyInlineFlowBox *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E6E0;
  v3 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E341E6E0;
  v3 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v4 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::LegacyInlineFlowBox::isInlineFlowBox(WebCore::LegacyInlineFlowBox *this)
{
  return 1;
}

uint64_t WebCore::LegacyInlineFlowBox::isLeaf(WebCore::LegacyInlineFlowBox *this)
{
  return 0;
}

WebCore::OverlapMapContainer::ClippingScope *WebCore::OverlapMapContainer::ClippingScope::ClippingScope(WebCore::OverlapMapContainer::ClippingScope *this, const WebCore::OverlapMapContainer::ClippingScope *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  int v13;
  uint64_t v14;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  v5 = *((unsigned int *)a2 + 9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >= 0x38E38E4)
      goto LABEL_10;
    v13 = 72 * v5;
    v14 = WTF::fastMalloc((WTF *)(72 * v5));
    *((_DWORD *)this + 8) = (v13 & 0xFFFFFFF8) / 0x48;
    *((_QWORD *)this + 3) = v14;
    WTF::VectorCopier<false,WebCore::OverlapMapContainer::ClippingScope>::uninitializedCopy<WebCore::OverlapMapContainer::ClippingScope>(*((__int128 **)a2 + 3), (__int128 *)(*((_QWORD *)a2 + 3) + 72 * *((unsigned int *)a2 + 9)), v14);
  }
  v6 = *((unsigned int *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v6;
  if (!(_DWORD)v6)
    goto LABEL_7;
  if (v6 >> 28)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x19635C9CCLL);
  }
  v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
  *((_DWORD *)this + 12) = v6;
  *((_QWORD *)this + 5) = v7;
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8)
  {
    v9 = (__int128 *)*((_QWORD *)a2 + 5);
    v10 = 16 * v8;
    do
    {
      v11 = *v9++;
      *v7++ = v11;
      v10 -= 16;
    }
    while (v10);
  }
LABEL_7:
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  return this;
}

__n128 WTF::VectorCopier<false,WebCore::OverlapMapContainer::ClippingScope>::uninitializedCopy<WebCore::OverlapMapContainer::ClippingScope>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __n128 result;
  int v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a3 = v6;
      v7 = *((unsigned int *)v5 + 9);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      if ((_DWORD)v7)
      {
        if (v7 >= 0x38E38E4)
        {
LABEL_14:
          __break(0xC471u);
          JUMPOUT(0x19635CAFCLL);
        }
        v15 = 72 * v7;
        v16 = WTF::fastMalloc((WTF *)(72 * v7));
        *(_DWORD *)(a3 + 32) = (v15 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)(a3 + 24) = v16;
        WTF::VectorCopier<false,WebCore::OverlapMapContainer::ClippingScope>::uninitializedCopy<WebCore::OverlapMapContainer::ClippingScope>(*((_QWORD *)v5 + 3), *((_QWORD *)v5 + 3) + 72 * *((unsigned int *)v5 + 9), v16);
      }
      v8 = *((unsigned int *)v5 + 13);
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_DWORD *)(a3 + 52) = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 28)
          goto LABEL_14;
        v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v8));
        *(_DWORD *)(a3 + 48) = v8;
        *(_QWORD *)(a3 + 40) = v9;
        v10 = *((unsigned int *)v5 + 13);
        if ((_DWORD)v10)
        {
          v11 = (__int128 *)*((_QWORD *)v5 + 5);
          v12 = 16 * v10;
          do
          {
            v13 = *v11++;
            *v9++ = v13;
            v12 -= 16;
          }
          while (v12);
        }
      }
      result = *(__n128 *)((char *)v5 + 56);
      *(__n128 *)(a3 + 56) = result;
      a3 += 72;
      v5 = (__int128 *)((char *)v5 + 72);
    }
    while (v5 != a2);
  }
  return result;
}

__n128 WebCore::OverlapMapContainer::ClippingScope::ClippingScope(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v2 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 32) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 36) = v3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a1 + 48) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 52) = v4;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void WebCore::OverlapMapContainer::ClippingScope::~ClippingScope(WebCore::OverlapMapContainer::ClippingScope *this, void *a2)
{
  WTF *v3;
  unsigned int v4;
  WTF *v5;

  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_DWORD *)this + 9);
  if (v4)
    WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*((WTF **)this + 3), (WTF *)(*((_QWORD *)this + 3) + 72 * v4));
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

char *WebCore::RenderObject::firstLineStyle(WebCore::RenderObject *this, WTF::StringImpl *a2)
{
  WebCore::RenderObject *v2;
  char *v3;
  WTF::StringImpl *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t **v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t **v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
      v2 = *(WebCore::RenderObject **)(v10 + 8);
    else
      v2 = 0;
    if ((*((_BYTE *)v2 + 45) & 1) != 0)
    {
      v24 = (*((_BYTE *)v2 + 45) & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 4) + 8) + 96)
          : *((_QWORD *)v2 + 12);
      if (((v24 & 0x1F) == 1 || (v24 & 0x1F) == 14)
        && (*((_BYTE *)v2 + 45) & 0x40) != 0
        && (v24 & 0xF80000000000) == 0
        && ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v2 + 176))(v2) & 1) == 0)
      {
        v26 = *((unsigned __int8 *)v2 + 46);
        if (v26 != 20 && ((*((_BYTE *)v2 + 52) & 7) != 1 || (*((_BYTE *)v2 + 53) & 2) == 0) && v26 != 26 && v26 != 49)
        {
          v27 = *((unsigned int *)v2 + 10);
          if (v27 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32))
          {
            v28 = *(_QWORD *)((v27 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32)) + 8);
            if (v28)
            {
              while (1)
              {
                v36 = *(_DWORD *)(v28 + 20);
                if ((v36 & 0x800) == 0 && (v36 & 0x1800000) != 0x1000000)
                  return (char *)v2 + 80;
                v37 = *(unsigned int *)(v28 + 40) | ((unint64_t)*(unsigned __int8 *)(v28 + 44) << 32);
                if (v37)
                {
                  v28 = *(_QWORD *)(v37 + 8);
                  if (v28)
                    continue;
                }
                break;
              }
            }
          }
          v29 = *((_QWORD *)v2 + 4);
          if (v29)
            v29 = *(_QWORD *)(v29 + 8);
          v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
          if (*MEMORY[0x1E0CBF2F8])
          {
            *(_DWORD *)v23 += 2;
            v12 = *(uint64_t ***)(v29 + 128);
            if (!v12)
              goto LABEL_52;
            v30 = *((unsigned int *)v12 + 3);
            if ((_DWORD)v30)
            {
              v31 = *v12;
              v32 = 8 * v30;
              do
              {
                v12 = (uint64_t **)*v31;
                if ((*(_QWORD *)(*v31 + 16) & 0xF80000000000) == 0x80000000000
                  && *(WTF::StringImpl **)(v12[1][5] + 592) == v23)
                {
                  break;
                }
                v12 = 0;
                ++v31;
                v32 -= 8;
              }
              while (v32);
              goto LABEL_52;
            }
LABEL_104:
            v12 = 0;
            goto LABEL_52;
          }
          v53 = *(uint64_t ***)(v29 + 128);
          if (v53)
          {
            v54 = *((unsigned int *)v53 + 3);
            if ((_DWORD)v54)
            {
              v55 = *v53;
              v56 = 8 * v54;
              do
              {
                v33 = (uint64_t **)*v55;
                if ((*(_QWORD *)(*v55 + 16) & 0xF80000000000) == 0x80000000000 && !*(_QWORD *)(v33[1][5] + 592))
                  break;
                v33 = 0;
                ++v55;
                v56 -= 8;
              }
              while (v56);
              goto LABEL_85;
            }
          }
LABEL_132:
          v33 = 0;
          goto LABEL_85;
        }
      }
    }
    v3 = (char *)v2 + 80;
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v4 += 2;
      v11 = (uint64_t **)*((_QWORD *)v2 + 16);
      if (v11)
      {
        v14 = *((unsigned int *)v11 + 3);
        if ((_DWORD)v14)
        {
          v15 = *v11;
          v16 = 8 * v14;
          do
          {
            v9 = *v15;
            if ((*(_QWORD *)(*v15 + 16) & 0xF80000000000) == 0x80000000000
              && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40) + 592) == v4)
            {
              break;
            }
            v9 = 0;
            ++v15;
            v16 -= 8;
          }
          while (v16);
          goto LABEL_18;
        }
      }
      goto LABEL_17;
    }
    v45 = (uint64_t **)*((_QWORD *)v2 + 16);
    if (v45)
    {
      v46 = *((unsigned int *)v45 + 3);
      if ((_DWORD)v46)
      {
        v47 = *v45;
        v48 = 8 * v46;
        do
        {
          v9 = *v47;
          if ((*(_QWORD *)(*v47 + 16) & 0xF80000000000) == 0x80000000000
            && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40) + 592))
          {
            break;
          }
          v9 = 0;
          ++v47;
          v48 -= 8;
        }
        while (v48);
        goto LABEL_20;
      }
    }
LABEL_114:
    v9 = 0;
LABEL_20:
    if (v9)
      return (char *)v9;
    else
      return v3;
  }
  if ((*((_BYTE *)this + 45) & 1) == 0
    || ((v17 = *((_QWORD *)this + 12), (v17 & 0x1F) != 1) ? (v18 = (v17 & 0x1F) == 14) : (v18 = 1),
        !v18
     || (*((_BYTE *)this + 45) & 0x40) == 0
     || (v17 & 0xF80000000000) != 0
     || ((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 176))(this) & 1) != 0
     || (v19 = *((unsigned __int8 *)v2 + 46), v19 == 20)
     || (*((_BYTE *)v2 + 52) & 7) == 1 && (*((_BYTE *)v2 + 53) & 2) != 0
     || v19 == 26
     || v19 == 49))
  {
    v3 = (char *)v2 + 80;
    v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v4 += 2;
      v5 = (uint64_t **)*((_QWORD *)v2 + 16);
      if (v5)
      {
        v6 = *((unsigned int *)v5 + 3);
        if ((_DWORD)v6)
        {
          v7 = *v5;
          v8 = 8 * v6;
          do
          {
            v9 = *v7;
            if ((*(_QWORD *)(*v7 + 16) & 0xF80000000000) == 0x80000000000
              && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40) + 592) == v4)
            {
              break;
            }
            v9 = 0;
            ++v7;
            v8 -= 8;
          }
          while (v8);
          goto LABEL_18;
        }
      }
LABEL_17:
      v9 = 0;
LABEL_18:
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
      goto LABEL_20;
    }
    v41 = (uint64_t **)*((_QWORD *)v2 + 16);
    if (v41)
    {
      v42 = *((unsigned int *)v41 + 3);
      if ((_DWORD)v42)
      {
        v43 = *v41;
        v44 = 8 * v42;
        do
        {
          v9 = *v43;
          if ((*(_QWORD *)(*v43 + 16) & 0xF80000000000) == 0x80000000000
            && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 40) + 592))
          {
            break;
          }
          v9 = 0;
          ++v43;
          v44 -= 8;
        }
        while (v44);
        goto LABEL_20;
      }
    }
    goto LABEL_114;
  }
  v20 = *((unsigned int *)v2 + 10);
  if (v20 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32))
  {
    v21 = *(_QWORD *)((v20 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32)) + 8);
    if (v21)
    {
      while (1)
      {
        v34 = *(_DWORD *)(v21 + 20);
        if ((v34 & 0x800) == 0 && (v34 & 0x1800000) != 0x1000000)
          return (char *)v2 + 80;
        v35 = *(unsigned int *)(v21 + 40) | ((unint64_t)*(unsigned __int8 *)(v21 + 44) << 32);
        if (v35)
        {
          v21 = *(_QWORD *)(v35 + 8);
          if (v21)
            continue;
        }
        break;
      }
    }
  }
  v22 = *((_QWORD *)v2 + 4);
  if (v22)
    v22 = *(_QWORD *)(v22 + 8);
  v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (!*MEMORY[0x1E0CBF2F8])
  {
    v49 = *(uint64_t ***)(v22 + 128);
    if (v49)
    {
      v50 = *((unsigned int *)v49 + 3);
      if ((_DWORD)v50)
      {
        v51 = *v49;
        v52 = 8 * v50;
        do
        {
          v33 = (uint64_t **)*v51;
          if ((*(_QWORD *)(*v51 + 16) & 0xF80000000000) == 0x80000000000 && !*(_QWORD *)(v33[1][5] + 592))
            break;
          v33 = 0;
          ++v51;
          v52 -= 8;
        }
        while (v52);
        goto LABEL_85;
      }
    }
    goto LABEL_132;
  }
  *(_DWORD *)v23 += 2;
  v12 = *(uint64_t ***)(v22 + 128);
  if (v12)
  {
    v38 = *((unsigned int *)v12 + 3);
    if ((_DWORD)v38)
    {
      v39 = *v12;
      v40 = 8 * v38;
      do
      {
        v12 = (uint64_t **)*v39;
        if ((*(_QWORD *)(*v39 + 16) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(v12[1][5] + 592) == v23)
        {
          break;
        }
        v12 = 0;
        ++v39;
        v40 -= 8;
      }
      while (v40);
      goto LABEL_52;
    }
    goto LABEL_104;
  }
LABEL_52:
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_54;
  }
  v33 = v12;
  WTF::StringImpl::destroy(v23, a2);
LABEL_85:
  v12 = v33;
LABEL_54:
  if (!v12)
    return (char *)v2 + 80;
  return (char *)v12;
}

uint64_t WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t v18;
  int v19;
  int v20;
  int isEmptyInline;
  uint64_t v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  unsigned int v29;

  while ((*(_BYTE *)(a2 + 45) & 2) == 0 && *(_BYTE *)(a2 + 46) != 17)
  {
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x802) != 0 || (v14 & 0x1800000) == 0x1000000)
      break;
    v16 = *(unsigned int *)(a2 + 64);
    if (!(v16 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)))
      break;
    v6 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
    if (a3 && v6)
      goto LABEL_40;
    if (!v6)
      break;
LABEL_43:
    if ((*(_BYTE *)(v6 + 45) & 2) == 0 && *(_BYTE *)(v6 + 46) != 17)
    {
      v20 = *(_DWORD *)(v6 + 20);
      if ((v20 & 0x802) == 0 && (v20 & 0x1800000) != 0x1000000)
      {
        a2 = v6;
        if ((*(_BYTE *)(v6 + 45) & 0x20) == 0)
          continue;
        isEmptyInline = WebCore::isEmptyInline((WebCore *)v6, (const WebCore::RenderInline *)v6);
        a2 = v6;
        if (!isEmptyInline)
          continue;
      }
    }
    return v6;
  }
  if (a2 != a1)
  {
    if (a3)
    {
      while (1)
      {
        if ((*(_BYTE *)(a2 + 45) & 0x20) == 0)
          goto LABEL_5;
        v9 = a2;
        if ((*(_BYTE *)(a2 + 45) & 2) != 0)
          v9 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
        v10 = (*(_DWORD *)(v9 + 96) >> 22) & 7;
        if (!v10)
          goto LABEL_5;
        v23 = a2;
        v24 = v10 - 3;
        v25 = *(_DWORD *)(a3 + 296);
        if (v24 <= 2)
          break;
        if (!v25)
        {
          WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(a3, 0x10u, 0);
          goto LABEL_56;
        }
LABEL_5:
        v5 = *(unsigned int *)(a2 + 47);
        if (v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
        {
          v6 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8);
          if (v6)
            goto LABEL_39;
        }
        v7 = *(_QWORD *)(a2 + 32);
        if (!v7)
          return 0;
        v6 = 0;
        a2 = *(_QWORD *)(v7 + 8);
        if (a2)
          v8 = a2 == a1;
        else
          v8 = 1;
        if (v8)
          return v6;
      }
      *(_DWORD *)(a3 + 296) = v25 - 1;
LABEL_56:
      a2 = v23;
      goto LABEL_5;
    }
    while (1)
    {
      v11 = *(unsigned int *)(a2 + 47);
      if (v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
      {
        v6 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8);
        if (v6)
          break;
      }
      v12 = *(_QWORD *)(a2 + 32);
      if (!v12)
        return 0;
      v6 = 0;
      a2 = *(_QWORD *)(v12 + 8);
      if (a2)
        v13 = a2 == a1;
      else
        v13 = 1;
      if (v13)
        return v6;
    }
LABEL_39:
    if (!a3)
      goto LABEL_43;
LABEL_40:
    if ((*(_BYTE *)(v6 + 45) & 0x20) != 0)
    {
      v18 = v6;
      if ((*(_BYTE *)(v6 + 45) & 2) != 0)
      {
        v18 = *(_QWORD *)(v6 + 32);
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
      }
      v19 = (*(_DWORD *)(v18 + 96) >> 22) & 7;
      if (v19)
      {
        if ((v19 - 3) > 2)
        {
          if (!*(_DWORD *)(a3 + 296))
          {
            v26 = (*(_DWORD *)(v18 + 120) & 0x4000000) == 0;
            if ((*(_DWORD *)(v18 + 120) & 0x4000000) != 0)
              v27 = 14;
            else
              v27 = 11;
            if (v26)
              v28 = 12;
            else
              v28 = 15;
            if (v19 == 1)
              v29 = v27;
            else
              v29 = v28;
            WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(a3, v29, 0);
          }
        }
        else
        {
          WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(a3, a2);
          ++*(_DWORD *)(a3 + 296);
        }
      }
    }
    goto LABEL_43;
  }
  return 0;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v11;
  int isEmptyInline;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;

  while (1)
  {
    if ((*(_BYTE *)(a2 + 45) & 2) == 0 && *(_BYTE *)(a2 + 46) != 17)
    {
      v9 = *(_DWORD *)(a2 + 20);
      if ((v9 & 0x802) == 0 && (v9 & 0x1800000) != 0x1000000)
      {
        v14 = *(unsigned int *)(a2 + 64);
        if (v14 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32))
          break;
      }
    }
    if (a2 == a1)
      return 0;
    if (a3)
      goto LABEL_36;
LABEL_4:
    while (1)
    {
      v5 = *(unsigned int *)(a2 + 47);
      if (v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32))
      {
        v6 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(a2 + 51) << 32)) + 8);
        if (v6)
          break;
      }
      v7 = *(_QWORD *)(a2 + 32);
      if (v7)
      {
        a2 = *(_QWORD *)(v7 + 8);
        if (a2 && a2 != a1)
          continue;
      }
      return 0;
    }
LABEL_55:
    if (a3)
    {
LABEL_56:
      if ((*(_BYTE *)(v6 + 45) & 0x20) != 0)
      {
        v23 = v6;
        if ((*(_BYTE *)(v6 + 45) & 2) != 0)
        {
          v23 = *(_QWORD *)(v6 + 32);
          if (v23)
            v23 = *(_QWORD *)(v23 + 8);
        }
        v24 = (*(_DWORD *)(v23 + 96) >> 22) & 7;
        if (v24)
        {
          if ((v24 - 3) > 2)
          {
            if (!*(_DWORD *)(a3 + 296))
            {
              v25 = (*(_DWORD *)(v23 + 120) & 0x4000000) == 0;
              if ((*(_DWORD *)(v23 + 120) & 0x4000000) != 0)
                v26 = 14;
              else
                v26 = 11;
              if (v25)
                v27 = 12;
              else
                v27 = 15;
              if (v24 == 1)
                v28 = v26;
              else
                v28 = v27;
              WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(a3, v28, 0);
            }
          }
          else
          {
            WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(a3, a2);
            ++*(_DWORD *)(a3 + 296);
          }
        }
      }
    }
LABEL_20:
    if ((*(_BYTE *)(v6 + 45) & 2) == 0 && *(_BYTE *)(v6 + 46) != 17)
    {
      v11 = *(_DWORD *)(v6 + 20);
      if ((v11 & 0x802) == 0 && (v11 & 0x1800000) != 0x1000000)
      {
        a2 = v6;
        if ((*(_BYTE *)(v6 + 45) & 0x20) == 0)
          continue;
        isEmptyInline = WebCore::isEmptyInline((WebCore *)v6, (const WebCore::RenderInline *)v6);
        a2 = v6;
        if (!isEmptyInline)
          continue;
      }
    }
    return v6;
  }
  v6 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
  if (a3)
  {
    if (v6)
      goto LABEL_56;
    if (a2 == a1)
      return 0;
    while (1)
    {
LABEL_36:
      v29 = a2;
      if ((*(_BYTE *)(a2 + 45) & 0x20) != 0)
      {
        v18 = a2;
        if ((*(_BYTE *)(a2 + 45) & 2) != 0)
          v18 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
        v19 = (*(_DWORD *)(v18 + 96) >> 22) & 7;
        if (v19)
        {
          v20 = v19 - 3;
          v21 = *(_DWORD *)(a3 + 296);
          if (v20 > 2)
          {
            if (!v21)
              WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(a3, 0x10u, 0);
          }
          else
          {
            *(_DWORD *)(a3 + 296) = v21 - 1;
          }
        }
      }
      v15 = *(unsigned __int8 *)(v29 + 51);
      if (*(unsigned int *)(v29 + 47) | (unint64_t)(v15 << 32))
      {
        v6 = *(_QWORD *)((*(unsigned int *)(v29 + 47) | (unint64_t)(v15 << 32)) + 8);
        if (v6)
          break;
      }
      v16 = *(_QWORD *)(v29 + 32);
      if (!v16)
        return 0;
      v6 = 0;
      a2 = *(_QWORD *)(v16 + 8);
      if (a2)
        v17 = a2 == a1;
      else
        v17 = 1;
      if (v17)
        return v6;
    }
    goto LABEL_55;
  }
  if (v6)
    goto LABEL_20;
  if (a2 != a1)
    goto LABEL_4;
  return 0;
}

uint64_t WebCore::notifyObserverEnteredObject<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;

  if (result && a2 && (*(_BYTE *)(a2 + 45) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 45) & 2) != 0)
    {
      v3 = *(_QWORD *)(a2 + 32);
      if (v3)
        a2 = *(_QWORD *)(v3 + 8);
      else
        a2 = 0;
    }
    v2 = (*(_DWORD *)(a2 + 96) >> 22) & 7;
    if (v2)
    {
      if ((v2 - 3) > 2)
      {
        if (!*(_DWORD *)(result + 296))
        {
          if ((*(_DWORD *)(a2 + 120) & 0x4000000) != 0)
            v5 = 14;
          else
            v5 = 11;
          if ((*(_DWORD *)(a2 + 120) & 0x4000000) != 0)
            v6 = 15;
          else
            v6 = 12;
          if (v2 == 1)
            v7 = v5;
          else
            v7 = v6;
          return (uint64_t)WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(result, v7, 0);
        }
      }
      else
      {
        v4 = result;
        result = WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(result, a2);
        ++*(_DWORD *)(v4 + 296);
      }
    }
  }
  return result;
}

BOOL WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  WTF *v29;

  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(v3 + 4) & 0x3F;
  do
    v5 = __ldaxr((unsigned int *)v3);
  while (__stlxr(v5 + 1, (unsigned int *)v3));
  v6 = *(unsigned int *)(a1 + 324);
  if ((_DWORD)v6)
  {
    v14 = v3;
    v15 = *(int **)(a1 + 312);
    v16 = &v15[2 * v6];
    while (1)
    {
      v17 = *v15;
      if ((*v15 - 14) < 2)
        break;
      if (v17 != 16)
      {
        a2 = 0;
        v18 = v17 == 12;
        v19 = (*(_BYTE *)(v14 + 4) & 0x3E) + 2;
LABEL_20:
        if (v19 <= 0x3C)
        {
          WebCore::BidiContext::createUncached(v19, a2, v18, v15[1], (unsigned int *)v14, (uint64_t *)&v28);
          v3 = (uint64_t)v28;
          v28 = 0;
          do
          {
            v20 = __ldaxr((unsigned int *)v14);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, (unsigned int *)v14));
          if (!v21)
          {
            atomic_store(1u, (unsigned int *)v14);
            v29 = (WTF *)v14;
            WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, (void *)a2);
          }
          v22 = v28;
          v28 = 0;
          if (!v22)
            goto LABEL_34;
          do
          {
            v26 = __ldaxr(v22);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v22));
          if (v27)
            goto LABEL_34;
          atomic_store(1u, v22);
          v29 = (WTF *)v22;
LABEL_43:
          WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, (void *)a2);
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      v3 = *(_QWORD *)(v14 + 8);
      if (v3)
      {
        do
          v25 = __ldaxr((unsigned int *)v3);
        while (__stlxr(v25 + 1, (unsigned int *)v3));
        do
        {
          v23 = __ldaxr((unsigned int *)v14);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, (unsigned int *)v14));
        if (v24)
          goto LABEL_34;
        atomic_store(1u, (unsigned int *)v14);
        v29 = (WTF *)v14;
        goto LABEL_43;
      }
LABEL_33:
      v3 = v14;
LABEL_34:
      v15 += 2;
      v14 = v3;
      if (v15 == v16)
        goto LABEL_4;
    }
    v18 = v17 == 15;
    v19 = ((*(_BYTE *)(v14 + 4) & 0x3F) + 1) | 1;
    a2 = 1;
    goto LABEL_20;
  }
LABEL_4:
  v7 = *(_BYTE *)(v3 + 4);
  v8 = v7 & 0x3F;
  if (v8 > v4)
  {
    WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::raiseExplicitEmbeddingLevel(a1, (const WebCore::RenderInline *)(v4 & 1), v7 & 1);
  }
  else if (v8 < v4)
  {
    WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::lowerExplicitEmbeddingLevel(a1, (const WebCore::RenderInline *)(v4 & 1));
  }
  v9 = *(unsigned int **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v3;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v29 = (WTF *)v9;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v29, (void *)a2);
    }
  }
  if (*(_DWORD *)(a1 + 320))
  {
    if (*(_DWORD *)(a1 + 324))
      *(_DWORD *)(a1 + 324) = 0;
    v12 = *(WTF **)(a1 + 312);
    if ((WTF *)(a1 + 328) != v12)
    {
      if (!v12)
        goto LABEL_40;
      *(_QWORD *)(a1 + 312) = 0;
      *(_DWORD *)(a1 + 320) = 0;
      WTF::fastFree(v12, (void *)a2);
      v12 = *(WTF **)(a1 + 312);
    }
    if (v12)
      return v4 != v8;
LABEL_40:
    *(_QWORD *)(a1 + 312) = a1 + 328;
    *(_DWORD *)(a1 + 320) = 8;
  }
  return v4 != v8;
}

unint64_t *WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = (unint64_t *)(a1 + 312);
  v8 = __PAIR64__(a3, a2);
  v5 = *(unsigned int *)(a1 + 324);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 320))
  {
    result = (unint64_t *)WTF::Vector<WebCore::BidiEmbedding,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v5 + 1), (unint64_t)&v8);
    v5 = *(unsigned int *)(a1 + 324);
    v6 = *(_QWORD *)(a1 + 312);
    v7 = *result;
  }
  else
  {
    v6 = *result;
    v7 = v8;
  }
  *(_QWORD *)(v6 + 8 * v5) = v7;
  ++*(_DWORD *)(a1 + 324);
  return result;
}

WTF **WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::raiseExplicitEmbeddingLevel(uint64_t a1, const WebCore::RenderInline *a2, int a3)
{
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  WTF **result;

  if (!*(_BYTE *)(a1 + 232)
    && (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a1 + 120) || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 104)))
  {
    if (*(_DWORD *)(a1 + 152) == 10)
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a1 + 132) != 0;
    v6 = (_OWORD *)(a1 + 64);
    v7 = (_OWORD *)(a1 + 96);
    v8 = *(_DWORD *)(a1 + 128);
    if (a3)
    {
      if (v8 != 5)
      {
        if (v8 == 2)
        {
          if ((_DWORD)a2 != 1 && !*(_DWORD *)(a1 + 132))
            goto LABEL_22;
        }
        else if ((_DWORD)a2 != 1 || *(_DWORD *)(a1 + 132))
        {
          goto LABEL_22;
        }
      }
      WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
      *(_DWORD *)(a1 + 152) = 1;
LABEL_22:
      *v6 = *v7;
      *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
      goto LABEL_23;
    }
    if (v8 != 5)
    {
      if (v8 != 2)
      {
        if (!(_DWORD)a2 && *(_DWORD *)(a1 + 132))
        {
          WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
          *(_DWORD *)(a1 + 152) = 0;
        }
        goto LABEL_22;
      }
      if (!*(_DWORD *)(a1 + 132))
        goto LABEL_22;
      v8 = 2;
    }
    *(_DWORD *)(a1 + 152) = v8;
    WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
    goto LABEL_22;
  }
LABEL_23:
  result = WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
  *(_BYTE *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 132) = a3;
  *(_DWORD *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  return result;
}

WTF **WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::lowerExplicitEmbeddingLevel(uint64_t a1, const WebCore::RenderInline *a2)
{
  int v2;
  _OWORD *v5;
  _OWORD *v6;
  int v7;
  WTF **result;

  v2 = (int)a2;
  if (!*(_BYTE *)(a1 + 232)
    && (*(_DWORD *)(a1 + 88) != *(_DWORD *)(a1 + 120) || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 104)))
  {
    if (*(_DWORD *)(a1 + 152) == 10)
      *(_DWORD *)(a1 + 152) = *(_DWORD *)(a1 + 132) != 0;
    v5 = (_OWORD *)(a1 + 64);
    v6 = (_OWORD *)(a1 + 96);
    v7 = *(_DWORD *)(a1 + 128);
    if ((_DWORD)a2)
    {
      if (v7 == 2 || v7 == 5 || !*(_DWORD *)(a1 + 132))
      {
        WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
        *(_DWORD *)(a1 + 152) = 1;
      }
      goto LABEL_20;
    }
    if (v7 != 5)
    {
      if (v7 != 2)
      {
        if (*(_DWORD *)(a1 + 132))
        {
          WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
          *(_DWORD *)(a1 + 152) = 0;
        }
        goto LABEL_20;
      }
      if (!*(_DWORD *)(a1 + 132))
      {
LABEL_20:
        *v5 = *v6;
        *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
        goto LABEL_21;
      }
      v7 = 2;
    }
    *(_DWORD *)(a1 + 152) = v7;
    WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
    goto LABEL_20;
  }
LABEL_21:
  result = WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, a2);
  *(_BYTE *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 132) = v2;
  *(_DWORD *)(a1 + 136) = v2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  return result;
}

WTF **WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal(WTF **result, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v26;
  int v27;
  WTF *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  int v55;
  uint64_t v57;
  int v58;
  char v59;

  v2 = (uint64_t)result;
  if (*((_BYTE *)result + 232))
    goto LABEL_25;
  v3 = result[9];
  if (!v3 || *((_BYTE *)result + 192))
    goto LABEL_25;
  v4 = result[4];
  v5 = (uint64_t)result[5];
  v6 = (uint64_t *)(result + 4);
  v7 = 0;
  if (v5)
    v8 = v5 == (_QWORD)v4;
  else
    v8 = 1;
  if (!v8)
  {
    v29 = result[5];
    do
    {
      if ((*((_BYTE *)v29 + 45) & 0x20) != 0)
      {
        v54 = v29;
        if ((*((_BYTE *)v29 + 45) & 2) != 0)
          v54 = *(WTF **)(*((_QWORD *)v29 + 4) + 8);
        if (((*((_DWORD *)v54 + 24) >> 22) & 7u) - 3 <= 2)
          ++v7;
      }
      v30 = *((_QWORD *)v29 + 4);
      if (!v30)
        break;
      v29 = *(WTF **)(v30 + 8);
    }
    while (v29 && v29 != v4);
  }
  v58 = v7;
  v59 = 0;
  if (v5)
  {
    v9 = *((_DWORD *)result + 14);
    if ((WTF *)v5 == v3)
    {
      v5 = (uint64_t)v3;
      v10 = *((_DWORD *)result + 14);
LABEL_12:
      v11 = *(_DWORD *)(v2 + 88);
      if (v5 == *(_QWORD *)(v2 + 168))
      {
        v12 = *(_DWORD *)(v2 + 184);
        if (v12 <= v11)
        {
LABEL_14:
          *(_BYTE *)(v2 + 192) = 1;
          v11 = v12;
        }
      }
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 488))(v5);
      if (v58)
      {
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 488))(v5);
        result = WebCore::IsolateTracker::addFakeRunIfNecessary((uint64_t)&v58, (WebCore::RenderBlock *)v5, v10, v57, *(_QWORD *)(v2 + 32), v2);
      }
      else
      {
        if (v13)
          v14 = v11 + 1;
        else
          v14 = 0;
        result = WebCore::LegacyLineLayout::appendRunsForObject((WTF **)(v2 + 240), v10, v14, v5, v2);
      }
      goto LABEL_20;
    }
LABEL_65:
    if (v5 == *(_QWORD *)(v2 + 168))
    {
      v12 = *(_DWORD *)(v2 + 184);
      v10 = v9;
      goto LABEL_14;
    }
    v51 = v58;
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 488))(v5);
    if (v51)
      result = WebCore::IsolateTracker::addFakeRunIfNecessary((uint64_t)&v58, (WebCore::RenderBlock *)v5, v9, v52, *(_QWORD *)(v2 + 32), v2);
    else
      result = WebCore::LegacyLineLayout::appendRunsForObject((WTF **)(v2 + 240), v9, v52, v5, v2);
    v53 = *v6;
    while ((*(_BYTE *)(v5 + 45) & 2) == 0 && *(_BYTE *)(v5 + 46) != 17)
    {
      v44 = *(_DWORD *)(v5 + 20);
      if ((v44 & 0x802) != 0 || (v44 & 0x1800000) == 0x1000000)
        break;
      v46 = *(unsigned int *)(v5 + 64);
      v47 = v46 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32);
      if (!v47)
        break;
      v48 = *(_QWORD *)((v46 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8);
      if (!v48)
        break;
      v41 = *(_BYTE *)(v48 + 45);
      if ((v41 & 0x20) != 0)
      {
        v49 = *(_QWORD *)(v47 + 8);
        if ((*(_BYTE *)(v48 + 45) & 2) != 0)
          v49 = *(_QWORD *)(*(_QWORD *)(v48 + 32) + 8);
        v50 = (*(_DWORD *)(v49 + 96) >> 22) & 7;
        if (v50)
        {
          if ((v50 - 3) <= 2)
          {
            v33 = v58;
            v5 = v48;
LABEL_125:
            v58 = v33 + 1;
            goto LABEL_87;
          }
        }
      }
      v5 = v48;
LABEL_87:
      if ((v41 & 2) == 0 && *(_BYTE *)(v5 + 46) != 17)
      {
        v55 = *(_DWORD *)(v5 + 20);
        if ((v55 & 0x802) == 0 && (v55 & 0x1800000) != 0x1000000)
        {
          if ((v41 & 0x20) == 0)
            continue;
          result = (WTF **)WebCore::isEmptyInline((WebCore *)v5, a2);
          if (!(_DWORD)result)
            continue;
        }
      }
      v9 = 0;
      v10 = 0;
      if (v5 == *(_QWORD *)(v2 + 72))
        goto LABEL_12;
      goto LABEL_65;
    }
    if (v5 == v53)
      goto LABEL_20;
    v33 = v58;
    v34 = v5;
    while (1)
    {
      if ((*(_BYTE *)(v34 + 45) & 0x20) != 0)
      {
        v35 = v34;
        if ((*(_BYTE *)(v34 + 45) & 2) != 0)
          v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8);
        v36 = (*(_DWORD *)(v35 + 96) >> 22) & 7;
        if (v36)
        {
          if ((v36 - 3) <= 2)
          {
            v58 = --v33;
            if (!v33)
              v59 = 0;
          }
        }
      }
      v37 = *(unsigned int *)(v34 + 47);
      v38 = v37 | ((unint64_t)*(unsigned __int8 *)(v34 + 51) << 32);
      if (v38)
      {
        v5 = *(_QWORD *)((v37 | ((unint64_t)*(unsigned __int8 *)(v34 + 51) << 32)) + 8);
        if (v5)
          break;
      }
      v39 = *(_QWORD *)(v34 + 32);
      if (v39)
      {
        v34 = *(_QWORD *)(v39 + 8);
        if (v34 && v34 != v53)
          continue;
      }
      goto LABEL_20;
    }
    v41 = *(_BYTE *)(v5 + 45);
    if ((v41 & 0x20) == 0)
      goto LABEL_87;
    v42 = *(_QWORD *)(v38 + 8);
    if ((*(_BYTE *)(v5 + 45) & 2) != 0)
      v42 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
    v43 = (*(_DWORD *)(v42 + 96) >> 22) & 7;
    if (!v43 || (v43 - 3) >= 3)
      goto LABEL_87;
    goto LABEL_125;
  }
LABEL_20:
  v15 = (uint64_t *)(v2 + 64);
  v16 = *(_QWORD *)(v2 + 72);
  if (!v16)
    goto LABEL_24;
  if ((*(_BYTE *)(v16 + 45) & 2) != 0)
  {
    v17 = *(_DWORD *)(v2 + 88) + 1;
    *(_DWORD *)(v2 + 88) = v17;
    v18 = *(_QWORD *)(v16 + 104);
    if (v18)
    {
      if (v17 < *(_DWORD *)(v18 + 4))
        goto LABEL_24;
    }
  }
  v19 = *v15;
  while ((*(_BYTE *)(v16 + 45) & 2) == 0 && *(_BYTE *)(v16 + 46) != 17)
  {
    v24 = *(_DWORD *)(v16 + 20);
    if ((v24 & 0x802) != 0 || (v24 & 0x1800000) == 0x1000000)
      break;
    v26 = *(unsigned int *)(v16 + 64);
    if (!(v26 | ((unint64_t)*(unsigned __int8 *)(v16 + 68) << 32)))
      break;
    v21 = *(_QWORD *)((v26 | ((unint64_t)*(unsigned __int8 *)(v16 + 68) << 32)) + 8);
    if (!v21)
      break;
LABEL_45:
    if ((*(_BYTE *)(v21 + 45) & 2) == 0 && *(_BYTE *)(v21 + 46) != 17)
    {
      v27 = *(_DWORD *)(v21 + 20);
      if ((v27 & 0x802) == 0 && (v27 & 0x1800000) != 0x1000000)
      {
        v16 = v21;
        if ((*(_BYTE *)(v21 + 45) & 0x20) == 0)
          continue;
        result = (WTF **)WebCore::isEmptyInline((WebCore *)v21, a2);
        v16 = v21;
        if (!(_DWORD)result)
          continue;
      }
    }
    goto LABEL_62;
  }
  if (v16 != v19)
  {
    while (1)
    {
      v20 = *(unsigned int *)(v16 + 47);
      if (v20 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32))
      {
        v21 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
        if (v21)
          goto LABEL_45;
      }
      v22 = *(_QWORD *)(v16 + 32);
      if (v22)
      {
        v16 = *(_QWORD *)(v22 + 8);
        if (v16 && v16 != v19)
          continue;
      }
      break;
    }
  }
  v21 = 0;
LABEL_62:
  v32 = 0x1FFFFFFFFLL;
  if (v21)
    v32 = 0;
  *(_QWORD *)(v2 + 72) = v21;
  *(_DWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 80) = v32;
  *(_BYTE *)(v2 + 84) = BYTE4(v32);
LABEL_24:
  *(_OWORD *)v6 = *(_OWORD *)v15;
  *(_OWORD *)(v2 + 45) = *(_OWORD *)(v2 + 77);
LABEL_25:
  *(_DWORD *)(v2 + 152) = 10;
  *(_DWORD *)(v2 + 128) = 10;
  return result;
}

WTF **WebCore::IsolateTracker::addFakeRunIfNecessary(uint64_t a1, WebCore::RenderBlock *this, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WTF **result;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  WTF *v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  WebCore::BidiCharacterRun **v32;
  WTF *v33;
  void *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;

  result = (WTF **)WebCore::RenderBlock::shouldSkipCreatingRunsForObject(this, this);
  if ((result & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 4))
    {
LABEL_19:
      *(_BYTE *)(a1 + 4) = 1;
      return WebCore::LegacyLineLayout::appendRunsForObject(0, a3, a4, (uint64_t)this, a6);
    }
    v13 = *(_QWORD *)(a6 + 144);
    v14 = *(_DWORD *)(a6 + 152);
    v15 = WTF::fastMalloc((WTF *)0x28);
    v16 = v15;
    *(_QWORD *)v15 = 0;
    *(_DWORD *)(v15 + 8) = a3;
    *(_DWORD *)(v15 + 12) = a3;
    *(_BYTE *)(v15 + 17) = *(_BYTE *)(v15 + 17) & 0xFE | ((*(_WORD *)(v13 + 4) & 0x800) != 0);
    v17 = *(unsigned __int16 *)(v13 + 4);
    if (v14 == 10)
      v18 = (v17 >> 6) & 0x1F;
    else
      v18 = v14;
    v19 = v17 & 0x3F;
    *(_BYTE *)(v15 + 16) = v17 & 0x3F;
    if ((v17 & 1) != 0)
    {
      if (v18 > 5)
        goto LABEL_13;
      v35 = 1 << v18;
      LOBYTE(v18) = 1;
      if ((v35 & 0x25) == 0)
        goto LABEL_13;
    }
    else if (v18 == 2 || v18 == 5)
    {
      LOBYTE(v18) = 2;
    }
    else if (v18 != 1)
    {
      goto LABEL_13;
    }
    *(_BYTE *)(v15 + 16) = v18 + v19;
LABEL_13:
    *(_QWORD *)(v15 + 24) = this;
    *(_QWORD *)(v15 + 32) = 0;
    v38 = (WTF *)v15;
    v39 = v15;
    v40 = *(_QWORD *)(a6 + 288);
    WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>((uint64_t *)(a6 + 304), &v39, &v40, (uint64_t)&v36);
    v20 = (_QWORD *)(a6 + 392);
    *(_QWORD *)&v36 = this;
    *((_QWORD *)&v36 + 1) = a5;
    *(_QWORD *)&v37 = v16;
    DWORD2(v37) = a3;
    v21 = *(unsigned int *)(a6 + 404);
    if ((_DWORD)v21 == *(_DWORD *)(a6 + 400))
    {
      v22 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v36);
      v23 = (_OWORD *)(*(_QWORD *)(a6 + 392) + 32 * *(unsigned int *)(a6 + 404));
      v24 = *(_OWORD *)v22;
      v25 = *((_OWORD *)v22 + 1);
    }
    else
    {
      v23 = (_OWORD *)(*v20 + 32 * v21);
      v24 = v36;
      v25 = v37;
    }
    *v23 = v24;
    v23[1] = v25;
    ++*(_DWORD *)(a6 + 404);
    WebCore::BidiRunList<WebCore::BidiRun>::appendRun(a6 + 240, (WebCore::BidiCharacterRun ***)&v38);
    v27 = v38;
    if (v38)
    {
      v28 = *(WTF ***)v38;
      *(_QWORD *)v38 = 0;
      if (v28)
      {
        do
        {
          v29 = *v28;
          *v28 = 0;
          WebCore::BidiCharacterRun::~BidiCharacterRun(v28);
          WTF::fastFree(v30, v31);
          v28 = (WTF **)v29;
        }
        while (v29);
        v32 = *(WebCore::BidiCharacterRun ***)v27;
        *(_QWORD *)v27 = 0;
        if (v32)
        {
          WebCore::BidiCharacterRun::~BidiCharacterRun(v32);
          WTF::fastFree(v33, v34);
        }
      }
      WTF::fastFree(v27, v26);
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned long &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, v27, v16);
    v16 = result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

__n128 WTF::Vector<WebCore::BidiIsolatedRun,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BidiIsolatedRun>(uint64_t a1, unint64_t a2)
{
  char *v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *((_OWORD *)v3 + 1);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

WTF *WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::createBidiRunsForLine(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  int *v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  _OWORD *v46;
  _OWORD *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  __int128 v52;
  _OWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  WTF *result;
  int v60;
  int v61;
  int v62;
  _BOOL4 v63;
  int v64;
  __int128 v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t **v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v77;
  WTF *v78;
  WTF **v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  WTF *v83;
  WTF *v84;
  void *v85;
  WebCore::BidiCharacterRun **v86;
  WTF *v87;
  void *v88;
  uint64_t **v89;
  uint64_t v90;
  __int128 v91;
  _OWORD *v92;
  _BYTE v93[96];
  uint64_t v94;
  int v95;
  unsigned int *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  int v102;
  char v103;
  char v104;
  _BYTE v105[29];
  char v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  WTF *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  _BYTE v118[64];
  WTF *v119[2];

  v3 = a2;
  if (a3)
  {
    *(_BYTE *)(a1 + 232) = 0;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;
    v52 = *(_OWORD *)(a1 + 13);
    *(_QWORD *)(a1 + 64) = 0;
    v53 = (_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 45) = v52;
    *(_QWORD *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 84) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 92) = 0;
    v54 = *(_QWORD *)(a1 + 8);
    v55 = v54 == *(_QWORD *)(a2 + 8) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
    if (!v55 && v54)
    {
      do
      {
        *v53 = *(_OWORD *)a1;
        *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
        WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::increment(a1);
        v56 = *(_QWORD *)(a1 + 8);
      }
      while ((v56 != *(_QWORD *)(v3 + 8) || *(_DWORD *)(a1 + 24) != *(_DWORD *)(v3 + 24)) && v56 != 0);
    }
    *(_DWORD *)(a1 + 152) = a3 != 1;
    result = (WTF *)WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
    if (a3 == 2)
    {
      v60 = *(_DWORD *)(a1 + 264);
      if (v60)
        return WebCore::BidiRunList<WebCore::BidiRun>::reverseRuns((WebCore::BidiCharacterRun *)(a1 + 240), 0, v60 - 1);
    }
    return result;
  }
  v5 = 0;
  *(_BYTE *)(a1 + 232) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  v7 = (_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a1;
  *(_OWORD *)(a1 + 109) = *(_OWORD *)(a1 + 13);
  v93[20] = 0;
  *(_DWORD *)&v93[24] = 0;
  v93[28] = 0;
  memset(v93, 0, 17);
  v93[52] = 0;
  *(_DWORD *)&v93[56] = 0;
  v93[60] = 0;
  memset(&v93[32], 0, 17);
  v93[84] = 0;
  *(_DWORD *)&v93[88] = 0;
  v93[92] = 0;
  memset(&v93[64], 0, 17);
  v94 = 0xA0000000ALL;
  v95 = 10;
  v96 = 0;
  v97 = 10;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v104 = 0;
  v105[20] = 0;
  *(_DWORD *)&v105[24] = 0;
  v105[28] = 0;
  memset(v105, 0, 17);
  v106 = 1;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v107 = 0;
  v8 = (int *)(a1 + 128);
  v111 = 0;
  v112 = 0;
  v92 = (_OWORD *)(a1 + 200);
  v9 = (_OWORD *)(a1 + 32);
  v114 = 0;
  v10 = (_OWORD *)(a1 + 160);
  v113 = 0;
  v115 = 0;
  v116 = (WTF *)v118;
  v117 = 8;
  while (2)
  {
    v11 = v5;
    v12 = *(_QWORD *)(a1 + 8);
    if ((v11 & 1) != 0)
    {
      if (!v12)
      {
        v19 = *(_QWORD *)(a1 + 144);
        v29 = v19;
        do
        {
          v30 = v29;
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29);
        v20 = *(unsigned __int16 *)(v30 + 4);
LABEL_39:
        v18 = (v20 >> 6) & 0x1F;
        goto LABEL_16;
      }
    }
    else if (!v12)
    {
      goto LABEL_113;
    }
    if ((*(_BYTE *)(v12 + 45) & 2) != 0)
    {
      v13 = *(_QWORD *)(v12 + 104);
      if (v13 && (v14 = *(unsigned int *)(a1 + 24), *(_DWORD *)(v13 + 4) > v14))
      {
        v15 = *(_QWORD *)(v13 + 8);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
          v16 = *(unsigned __int8 *)(v15 + v14);
        else
          v16 = *(unsigned __int16 *)(v15 + 2 * v14);
        if ((v16 & 0xF800) == 0xD800)
        {
          v17 = WebCore::LegacyInlineIterator::surrogateTextDirection(a1, v16);
          goto LABEL_12;
        }
      }
      else
      {
        v16 = 0;
      }
      v17 = MEMORY[0x19AEA858C](v16);
LABEL_12:
      v18 = v17;
      goto LABEL_13;
    }
    if (*(_BYTE *)(v12 + 46) == 20)
    {
      v18 = (*(_DWORD *)(v12 + 120) >> 26) & 1;
      goto LABEL_13;
    }
LABEL_113:
    v18 = 10;
LABEL_13:
    v19 = *(_QWORD *)(a1 + 144);
    v20 = *(unsigned __int16 *)(v19 + 4);
    if ((v20 & 0x800) != 0)
    {
      if (v18 <= 0x10 && ((1 << v18) & 0x1D800) != 0)
        goto LABEL_16;
      goto LABEL_39;
    }
    if (v18 == 17)
      v18 = *(_DWORD *)(a1 + 136);
LABEL_16:
    if (v18 - 19 >= 4 && *(_DWORD *)(a1 + 296) == 0)
      v22 = v18;
    else
      v22 = 10;
    switch(v22)
    {
      case 0u:
        v23 = *(_DWORD *)(a1 + 136);
        if (v23 > 0x12)
          goto LABEL_42;
        if (v23 == 2)
        {
          if (!*(_DWORD *)(a1 + 132))
            goto LABEL_42;
        }
        else
        {
          v24 = 1 << v23;
          if ((v24 & 0x407D8) != 0)
          {
            if (*v8 == 2)
            {
              if (!*(_DWORD *)(a1 + 132))
                goto LABEL_42;
              v44 = 2;
            }
            else
            {
              if (*v8 != 5)
              {
                if (!*(_DWORD *)(a1 + 132))
                  goto LABEL_42;
                if ((*(_WORD *)(v19 + 4) & 0x7C0) == 0x40)
                  goto LABEL_212;
                goto LABEL_213;
              }
              v44 = 5;
            }
            *(_DWORD *)(a1 + 152) = v44;
            WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
            if ((*(_WORD *)(*(_QWORD *)(a1 + 144) + 4) & 0x7C0) == 0)
              goto LABEL_42;
LABEL_212:
            *v6 = *v7;
            *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
            *(_DWORD *)(a1 + 152) = 1;
            goto LABEL_213;
          }
          if ((v24 & 0x2022) == 0)
            goto LABEL_42;
        }
LABEL_213:
        WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
LABEL_42:
        v22 = 0;
        *v6 = *(_OWORD *)a1;
        *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
        *(_QWORD *)(a1 + 128) = 0;
        *(_DWORD *)(a1 + 152) = 0;
LABEL_43:
        if ((v11 & 1) == 0
          || ((v41 = *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 88) != *(_DWORD *)(a1 + 24)) || *(_QWORD *)(a1 + 72) != v41)
          && v41 == *(_QWORD *)(a1 + 168))
        {
          if (v22 > 0x12)
            goto LABEL_48;
          if (((1 << v22) & 0x748) != 0)
          {
            v42 = *(_DWORD *)(a1 + 136);
            if (v42 >= 3 && v42 != 5 && v42 != 13)
              v22 = 10;
LABEL_48:
            *(_DWORD *)(a1 + 136) = v22;
            goto LABEL_49;
          }
          if (v22 == 4)
          {
            if (*(_DWORD *)(a1 + 136) == 2)
              goto LABEL_49;
            v22 = 4;
            goto LABEL_48;
          }
          if (((1 << v22) & 0x7D800) == 0)
            goto LABEL_48;
LABEL_49:
          *v7 = *(_OWORD *)a1;
          *(_OWORD *)(a1 + 109) = *(_OWORD *)(a1 + 13);
          if (*(_BYTE *)(a1 + 232))
          {
            *v9 = *(_OWORD *)a1;
            *(_OWORD *)(a1 + 45) = *(_OWORD *)(a1 + 13);
            *(_BYTE *)(a1 + 232) = 0;
          }
          a2 = *(_QWORD *)(a1 + 8);
          if (a2)
          {
            if ((*(_BYTE *)(a2 + 45) & 2) == 0
              || (v31 = *(_DWORD *)(a1 + 24) + 1, *(_DWORD *)(a1 + 24) = v31, (v32 = *(_QWORD *)(a2 + 104)) == 0)
              || v31 >= *(_DWORD *)(v32 + 4))
            {
              v33 = WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(*(_QWORD *)a1, a2, a1);
              a2 = v33;
              v34 = 0x1FFFFFFFFLL;
              if (v33)
                v34 = 0;
              *(_QWORD *)(a1 + 8) = v33;
              *(_DWORD *)(a1 + 24) = 0;
              *(_DWORD *)(a1 + 16) = v34;
              *(_BYTE *)(a1 + 20) = BYTE4(v34);
            }
          }
          if (*(_DWORD *)(a1 + 324))
          {
            if ((v11 & WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(a1, a2)) == 1)
            {
              v91 = *(_OWORD *)v3;
              *(_OWORD *)(a1 + 13) = *(_OWORD *)(v3 + 13);
              *(_OWORD *)a1 = v91;
              WebCore::BidiStatus::operator=(a1 + 128, &v94);
              goto LABEL_174;
            }
            v5 = 1;
            if ((v11 & 1) == 0)
            {
              a2 = *(_QWORD *)(a1 + 8);
              goto LABEL_60;
            }
          }
          else
          {
            v5 = 1;
            if ((v11 & 1) == 0)
            {
LABEL_60:
              v35 = a2 == *(_QWORD *)(v3 + 8) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(v3 + 24);
              if (v35 || (v5 = 0, !a2))
              {
                if (*(_BYTE *)(a1 + 232))
                  goto LABEL_175;
                v94 = *(_QWORD *)v8;
                v95 = *(_DWORD *)(a1 + 136);
                v36 = *(unsigned int **)(a1 + 144);
                if (v36)
                {
                  do
                    v37 = __ldaxr(v36);
                  while (__stlxr(v37 + 1, v36));
                }
                v38 = v96;
                v96 = v36;
                if (v38)
                {
                  do
                  {
                    v39 = __ldaxr(v38);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, v38));
                  if (!v40)
                  {
                    atomic_store(1u, v38);
                    v119[0] = (WTF *)v38;
                    WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v119, (void *)a2);
                  }
                }
                *(_OWORD *)v93 = *v9;
                *(_OWORD *)&v93[13] = *(_OWORD *)(a1 + 45);
                *(_OWORD *)&v93[32] = *v6;
                *(_OWORD *)&v93[45] = *(_OWORD *)(a1 + 77);
                *(_OWORD *)&v93[64] = *v7;
                *(_OWORD *)&v93[77] = *(_OWORD *)(a1 + 109);
                v104 = *(_BYTE *)(a1 + 192);
                *(_OWORD *)&v105[13] = *(_OWORD *)((char *)v92 + 13);
                *(_OWORD *)v105 = *v92;
                v106 = *(_BYTE *)(a1 + 232);
                *v10 = *v7;
                v5 = 1;
                *(_OWORD *)(a1 + 173) = *(_OWORD *)(a1 + 109);
              }
            }
          }
          continue;
        }
        if (!*(_BYTE *)(a1 + 192))
        {
          *v6 = *v10;
          *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 173);
          v64 = *v8;
          if (*v8 < 2 || v64 == 5)
          {
LABEL_166:
            *(_DWORD *)(a1 + 152) = v64;
          }
          else if (v64 == 2)
          {
            v64 = 2 * (*(_DWORD *)(a1 + 132) != 0);
            goto LABEL_166;
          }
          WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
        }
        v65 = *(_OWORD *)v3;
        *(_OWORD *)(a1 + 13) = *(_OWORD *)(v3 + 13);
        *(_OWORD *)a1 = v65;
        *(_QWORD *)v8 = v94;
        *(_DWORD *)(a1 + 136) = v95;
        if (v96)
        {
          do
            v66 = __ldaxr(v96);
          while (__stlxr(v66 + 1, v96));
        }
        v67 = *(unsigned int **)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v96;
        if (v67)
        {
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            atomic_store(1u, v67);
            v119[0] = (WTF *)v67;
            WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v119, (void *)a2);
          }
        }
LABEL_174:
        *v9 = *(_OWORD *)v93;
        *(_OWORD *)(a1 + 45) = *(_OWORD *)&v93[13];
        *v6 = *(_OWORD *)&v93[32];
        *(_OWORD *)(a1 + 77) = *(_OWORD *)&v93[45];
        *v7 = *(_OWORD *)&v93[64];
        *(_OWORD *)(a1 + 109) = *(_OWORD *)&v93[77];
        *(_BYTE *)(a1 + 192) = v104;
        *(_OWORD *)((char *)v92 + 13) = *(_OWORD *)&v105[13];
        *v92 = *(_OWORD *)v105;
        *(_BYTE *)(a1 + 232) = v106;
        *(_DWORD *)(a1 + 152) = 10;
LABEL_175:
        v70 = *(uint64_t ***)(a1 + 240);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
        if (v70)
        {
          LOBYTE(v71) = 0;
          LOBYTE(v72) = 0x80;
          do
          {
            v73 = *((unsigned __int8 *)v70 + 16);
            if (v73 <= v71)
              v71 = v71;
            else
              v71 = *((unsigned __int8 *)v70 + 16);
            v72 = v72;
            if (v72 >= v73)
              v72 = *((unsigned __int8 *)v70 + 16);
            v70 = (uint64_t **)*v70;
          }
          while (v70);
          v74 = v72 | 1;
          v75 = *(_DWORD *)(a1 + 264) - 1;
          if (v71 >= (v72 | 1u) && *(_DWORD *)(a1 + 264) != 1)
          {
            do
            {
              a2 = 0;
              v89 = *(uint64_t ***)(a1 + 240);
              do
              {
                if (!v89)
                  goto LABEL_227;
                do
                {
                  if (*((unsigned __int8 *)v89 + 16) >= v71)
                    break;
                  v89 = (uint64_t **)*v89;
                  a2 = (a2 + 1);
                  if (a2 >= v75)
                    break;
                }
                while (v89);
                if (a2 <= v75 && v89)
                {
                  v90 = a2;
                  do
                  {
                    if (*((unsigned __int8 *)v89 + 16) < v71)
                      break;
                    v89 = (uint64_t **)*v89;
                    v90 = (v90 + 1);
                    if (v90 > v75)
                      break;
                  }
                  while (v89);
                }
                else
                {
LABEL_227:
                  v90 = a2;
                }
                WebCore::BidiRunList<WebCore::BidiRun>::reverseRuns((WebCore::BidiCharacterRun *)(a1 + 240), (void *)a2, v90 - 1);
                a2 = v90;
              }
              while (v90 < v75);
              LOBYTE(v71) = v71 - 1;
            }
            while (v74 <= v71);
          }
        }
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(a1 + 168) = 0;
        *(_BYTE *)(a1 + 176) = 0;
        *(_BYTE *)(a1 + 180) = 0;
        *(_DWORD *)(a1 + 184) = 0;
        *(_BYTE *)(a1 + 188) = 0;
        v77 = v116;
        if (v118 != (_BYTE *)v116 && v116)
        {
          v116 = 0;
          LODWORD(v117) = 0;
          WTF::fastFree(v77, (void *)a2);
        }
        if (v115)
          WTF::fastFree((WTF *)(v115 - 16), (void *)a2);
        result = v111;
        if (v111)
        {
          v111 = 0;
          LODWORD(v112) = 0;
          result = (WTF *)WTF::fastFree(result, (void *)a2);
        }
        v78 = v107;
        v107 = 0;
        if (v78)
        {
          v79 = *(WTF ***)v78;
          *(_QWORD *)v78 = 0;
          if (v79)
          {
            do
            {
              v83 = *v79;
              *v79 = 0;
              WebCore::BidiCharacterRun::~BidiCharacterRun(v79);
              WTF::fastFree(v84, v85);
              v79 = (WTF **)v83;
            }
            while (v83);
            v86 = *(WebCore::BidiCharacterRun ***)v78;
            *(_QWORD *)v78 = 0;
            if (v86)
            {
              WebCore::BidiCharacterRun::~BidiCharacterRun(v86);
              WTF::fastFree(v87, v88);
            }
          }
          result = (WTF *)WTF::fastFree(v78, (void *)a2);
        }
        v80 = v96;
        v96 = 0;
        if (v80)
        {
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (!v82)
          {
            atomic_store(1u, v80);
            v119[0] = (WTF *)v80;
            return (WTF *)WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v119, (void *)a2);
          }
        }
        return result;
      case 1u:
      case 0xDu:
        v49 = *(_DWORD *)(a1 + 136);
        if (v49 > 0x12)
          goto LABEL_233;
        v50 = 1 << v49;
        if ((v50 & 0x407D8) == 0)
        {
          if ((v50 & 0x25) == 0)
            goto LABEL_233;
          goto LABEL_232;
        }
        if (*v8 == 5)
          goto LABEL_232;
        if (*v8 == 2)
        {
          if (!*(_DWORD *)(a1 + 132))
          {
LABEL_235:
            if ((*(_WORD *)(v19 + 4) & 0x7C0) == 0)
            {
              *v6 = *v7;
              *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
            }
          }
LABEL_232:
          WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
          goto LABEL_233;
        }
        if (!*(_DWORD *)(a1 + 132))
          goto LABEL_235;
LABEL_233:
        *v6 = *(_OWORD *)a1;
        *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
        *(_DWORD *)(a1 + 128) = 1;
        *(_DWORD *)(a1 + 132) = v22;
        *(_DWORD *)(a1 + 152) = 1;
        goto LABEL_43;
      case 2u:
        v26 = *(_DWORD *)(a1 + 132);
        v25 = *(_DWORD *)(a1 + 136);
        if (v26 == 13)
          goto LABEL_145;
        if (v25 > 0x12)
          goto LABEL_33;
        v27 = 1 << v25;
        if (((1 << v25) & 0x48) != 0)
        {
          v43 = *v8;
          if (*v8 == 2)
            goto LABEL_33;
        }
        else
        {
          if ((v27 & 0x40790) == 0)
          {
            if ((v27 & 0x2022) == 0)
              goto LABEL_33;
            *v6 = *v7;
            *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
LABEL_117:
            WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
            v22 = 2;
            *(_DWORD *)(a1 + 152) = 2;
            *v6 = *(_OWORD *)a1;
            *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
            goto LABEL_118;
          }
          v43 = *v8;
        }
        if (v43 == 2)
        {
          if (v26 == 1)
          {
            WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
LABEL_98:
            v45 = *(_DWORD *)(a1 + 136) == 4;
            goto LABEL_99;
          }
        }
        else
        {
          if (v43 == 5)
          {
            WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
            if (*(_DWORD *)(a1 + 132) == 1 || (*(_WORD *)(*(_QWORD *)(a1 + 144) + 4) & 0x7C0) == 0x40)
              goto LABEL_98;
            goto LABEL_33;
          }
          if (v26 == 1)
          {
            v45 = v25 == 4;
LABEL_99:
            v46 = v92;
            if (!v45)
              v46 = (_OWORD *)(a1 + 96);
            *v6 = *v46;
            *(_OWORD *)(a1 + 77) = *(_OWORD *)((char *)v46 + 13);
            *(_DWORD *)(a1 + 152) = 1;
            goto LABEL_117;
          }
        }
LABEL_33:
        v28 = *(_DWORD *)(a1 + 152);
        *v6 = *(_OWORD *)a1;
        *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
        v22 = 2;
        *(_DWORD *)(a1 + 128) = 2;
        if (v28 == 10)
        {
          *(_DWORD *)(a1 + 152) = 0;
          v22 = 2;
        }
        goto LABEL_43;
      case 4u:
        v22 = *(_DWORD *)(a1 + 136);
        if (v22 == 2)
        {
          *v6 = *(_OWORD *)a1;
          *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
          v22 = 2;
LABEL_118:
          *(_DWORD *)(a1 + 128) = 2;
        }
        else if (v22 != 4)
        {
          if (*(_BYTE *)(a1 + 232))
            v47 = (_OWORD *)(a1 + 64);
          else
            v47 = (_OWORD *)(a1 + 96);
          *v92 = *v47;
          *(_OWORD *)((char *)v92 + 13) = *(_OWORD *)((char *)v47 + 13);
          v22 = 4;
        }
        goto LABEL_43;
      case 5u:
        v25 = *(_DWORD *)(a1 + 136);
LABEL_145:
        switch(v25)
        {
          case 0u:
            if ((*(_WORD *)(v19 + 4) & 0x7C0) == 0)
              goto LABEL_154;
            goto LABEL_155;
          case 1u:
          case 2u:
          case 0xDu:
            goto LABEL_153;
          case 3u:
          case 4u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0x12u:
            v61 = *v8;
            goto LABEL_147;
          case 6u:
            v61 = *v8;
            if (*v8 == 5)
              goto LABEL_155;
LABEL_147:
            if (v61 == 5)
              goto LABEL_151;
            if (v61 == 2)
            {
              v62 = *(_DWORD *)(a1 + 132);
              if (v62 == 1 || (*(_WORD *)(v19 + 4) & 0x7C0) == 0x40)
              {
LABEL_151:
                WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
                v63 = 1;
                goto LABEL_152;
              }
            }
            else
            {
              v62 = *(_DWORD *)(a1 + 132);
              if (!v62)
              {
                if ((*(_WORD *)(v19 + 4) & 0x7C0) == 0x40)
                  goto LABEL_151;
                v62 = 0;
              }
            }
            if (*(_DWORD *)(a1 + 152) != 10)
            {
LABEL_153:
              *v6 = *v7;
              *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 109);
LABEL_154:
              WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::appendRunInternal((WTF **)a1, (const WebCore::RenderInline *)a2);
LABEL_155:
              *v6 = *(_OWORD *)a1;
              *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
              v22 = 5;
              *(_DWORD *)(a1 + 128) = 5;
              if (*(_DWORD *)(a1 + 152) == 10)
                *(_DWORD *)(a1 + 152) = 5;
              goto LABEL_43;
            }
            v63 = v62 != 0;
LABEL_152:
            *(_DWORD *)(a1 + 152) = v63;
            goto LABEL_153;
          default:
            goto LABEL_155;
        }
      case 0xBu:
      case 0xCu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::embed(a1, v22, 1u);
        WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::commitExplicitEmbedding(a1, v48);
        v22 = v18;
        goto LABEL_43;
      case 0x12u:
        v22 = 18;
        if (*(_DWORD *)(a1 + 88) == *(_DWORD *)(a1 + 120) && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 104))
        {
          *v6 = *(_OWORD *)a1;
          *(_OWORD *)(a1 + 77) = *(_OWORD *)(a1 + 13);
          v22 = 18;
        }
        goto LABEL_43;
      default:
        goto LABEL_43;
    }
  }
}

WebCore *WebCore::highestContainingIsolateWithinRoot(WebCore *this, WebCore::RenderObject *a2, WebCore::RenderObject *a3)
{
  WebCore *v3;
  WebCore *result;
  uint64_t v5;
  WebCore *v7;

  if (this == a2)
    return 0;
  v3 = this;
  result = 0;
  do
  {
    if ((*((_BYTE *)v3 + 45) & 0x20) != 0)
    {
      v7 = v3;
      if ((*((_BYTE *)v3 + 45) & 2) != 0)
        v7 = *(WebCore **)(*((_QWORD *)v3 + 4) + 8);
      if (((*((_QWORD *)v7 + 12) >> 22) & 7) - 3 < 3)
        result = v3;
    }
    v5 = *((_QWORD *)v3 + 4);
    if (!v5)
      break;
    v3 = *(WebCore **)(v5 + 8);
  }
  while (v3 && v3 != a2);
  return result;
}

uint64_t WebCore::setUpResolverToResumeInIsolate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  _OWORD *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  if (a2 == a1)
  {
LABEL_19:
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 288) = WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)(a2 + 304), a3);
    return WebCore::notifyResolverToResumeInIsolate(a1, a4, a5);
  }
  v10 = (void **)(a1 + 272);
  v11 = *(_DWORD *)(a2 + 284);
  if (*(_DWORD *)(a1 + 284) > v11)
  {
    *(_DWORD *)(a1 + 284) = v11;
LABEL_12:
    v22 = (char *)*v10;
    if (v11)
    {
      memmove(v22, *(const void **)(a2 + 272), 32 * v11 - 3);
      v11 = *(_DWORD *)(a1 + 284);
      v22 = *(char **)(a1 + 272);
    }
    v23 = *(unsigned int *)(a2 + 284);
    if (v11 != (_DWORD)v23)
    {
      v24 = v11;
      v25 = &v22[32 * v11];
      v26 = (__int128 *)(*(_QWORD *)(a2 + 272) + 32 * v24);
      v27 = 32 * v23 - 32 * v24;
      do
      {
        v28 = *v26;
        v29 = v26[1];
        v26 += 2;
        *(_OWORD *)v25 = v28;
        *((_OWORD *)v25 + 1) = v29;
        v25 += 32;
        v27 -= 32;
      }
      while (v27);
      v11 = *(_DWORD *)(a2 + 284);
    }
    *(_DWORD *)(a1 + 284) = v11;
    goto LABEL_19;
  }
  if (v11 <= *(_DWORD *)(a1 + 280)
    || (result = WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1 + 272, (void *)a2),
        v13 = *(unsigned int *)(a2 + 284),
        *(_DWORD *)(a1 + 280) >= v13))
  {
LABEL_11:
    v11 = *(_DWORD *)(a1 + 284);
    goto LABEL_12;
  }
  if (!(v13 >> 27))
  {
    v14 = *(WTF **)(a1 + 272);
    v15 = *(unsigned int *)(a1 + 284);
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v13));
    *(_DWORD *)(a1 + 280) = v13;
    *(_QWORD *)(a1 + 272) = v16;
    if ((_DWORD)v15)
    {
      v18 = 32 * v15;
      v19 = v14;
      do
      {
        v20 = *(_OWORD *)v19;
        v21 = *((_OWORD *)v19 + 1);
        v19 = (WTF *)((char *)v19 + 32);
        *v16 = v20;
        v16[1] = v21;
        v16 += 2;
        v18 -= 32;
      }
      while (v18);
    }
    if (v14)
    {
      if (*v10 == v14)
      {
        *(_QWORD *)(a1 + 272) = 0;
        *(_DWORD *)(a1 + 280) = 0;
      }
      WTF::fastFree(v14, v17);
    }
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

WTF **WebCore::BidiRunList<WebCore::BidiRun>::replaceRunWithRuns(uint64_t a1, WebCore::BidiCharacterRun **a2, uint64_t a3)
{
  WTF *v5;
  WebCore::BidiCharacterRun ***v6;
  BOOL v7;
  WebCore::BidiCharacterRun *v8;
  WTF **v9;
  WTF *v10;
  void *v11;
  WebCore::BidiCharacterRun ***v12;
  WebCore::BidiCharacterRun *v13;
  void *v14;
  WTF **v15;
  WTF *v16;
  void *v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  void *v21;
  WebCore::BidiCharacterRun ***v22;
  WebCore::BidiCharacterRun *v23;
  WTF **result;
  WTF *v25;
  void *v26;
  WebCore::BidiCharacterRun *v27;
  WTF **v28;
  WTF *v29;
  WTF **v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  WebCore::BidiCharacterRun **v34;
  WTF *v35;
  void *v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  WebCore::BidiCharacterRun **v40;
  WTF *v41;
  void *v42;
  WebCore::BidiCharacterRun *v43;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a1 + 24) - 1;
  if (*(WebCore::BidiCharacterRun ***)(a1 + 8) == a2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
  if (*(WebCore::BidiCharacterRun ***)(a1 + 16) == a2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
  v5 = *(WTF **)a1;
  if (*(WebCore::BidiCharacterRun ***)a1 != a2)
  {
    do
    {
      v6 = (WebCore::BidiCharacterRun ***)v5;
      v5 = *(WTF **)v5;
      if (v5)
        v7 = v5 == (WTF *)a2;
      else
        v7 = 1;
    }
    while (!v7);
    *v6 = 0;
    v8 = *(WebCore::BidiCharacterRun **)a3;
    *(_QWORD *)a3 = 0;
    v43 = v8;
    WebCore::BidiCharacterRun::setNext(v6, (WebCore::BidiCharacterRun ***)&v43);
    v9 = (WTF **)v43;
    v43 = 0;
    if (v9)
    {
      WebCore::BidiCharacterRun::~BidiCharacterRun(v9);
      WTF::fastFree(v10, v11);
    }
    v12 = *(WebCore::BidiCharacterRun ****)(a3 + 8);
    v13 = *(WebCore::BidiCharacterRun **)v5;
    *(_QWORD *)v5 = 0;
    v43 = v13;
    WebCore::BidiCharacterRun::setNext(v12, (WebCore::BidiCharacterRun ***)&v43);
    v15 = (WTF **)v43;
    v43 = 0;
    if (v15)
    {
      WebCore::BidiCharacterRun::~BidiCharacterRun(v15);
      WTF::fastFree(v16, v17);
    }
    v18 = *(WTF ***)v5;
    *(_QWORD *)v5 = 0;
    if (!v18)
      goto LABEL_22;
    do
    {
      v19 = *v18;
      *v18 = 0;
      WebCore::BidiCharacterRun::~BidiCharacterRun(v18);
      WTF::fastFree(v20, v21);
      v18 = (WTF **)v19;
    }
    while (v19);
    goto LABEL_31;
  }
  v22 = *(WebCore::BidiCharacterRun ****)(a3 + 8);
  v23 = *a2;
  *a2 = 0;
  v43 = v23;
  WebCore::BidiCharacterRun::setNext(v22, (WebCore::BidiCharacterRun ***)&v43);
  result = (WTF **)v43;
  v43 = 0;
  if (result)
  {
    WebCore::BidiCharacterRun::~BidiCharacterRun(result);
    result = (WTF **)WTF::fastFree(v25, v26);
  }
  v27 = *(WebCore::BidiCharacterRun **)a3;
  *(_QWORD *)a3 = 0;
  v5 = *(WTF **)a1;
  *(_QWORD *)a1 = v27;
  if (v5)
  {
    v28 = *(WTF ***)v5;
    *(_QWORD *)v5 = 0;
    if (!v28)
    {
LABEL_22:
      result = (WTF **)WTF::fastFree(v5, v14);
      goto LABEL_23;
    }
    do
    {
      v37 = *v28;
      *v28 = 0;
      WebCore::BidiCharacterRun::~BidiCharacterRun(v28);
      WTF::fastFree(v38, v39);
      v28 = (WTF **)v37;
    }
    while (v37);
LABEL_31:
    v40 = *(WebCore::BidiCharacterRun ***)v5;
    *(_QWORD *)v5 = 0;
    if (v40)
    {
      WebCore::BidiCharacterRun::~BidiCharacterRun(v40);
      WTF::fastFree(v41, v42);
    }
    goto LABEL_22;
  }
LABEL_23:
  v29 = *(WTF **)a3;
  *(_QWORD *)a3 = 0;
  if (v29)
  {
    v30 = *(WTF ***)v29;
    *(_QWORD *)v29 = 0;
    if (v30)
    {
      do
      {
        v31 = *v30;
        *v30 = 0;
        WebCore::BidiCharacterRun::~BidiCharacterRun(v30);
        WTF::fastFree(v32, v33);
        v30 = (WTF **)v31;
      }
      while (v31);
      v34 = *(WebCore::BidiCharacterRun ***)v29;
      *(_QWORD *)v29 = 0;
      if (v34)
      {
        WebCore::BidiCharacterRun::~BidiCharacterRun(v34);
        WTF::fastFree(v35, v36);
      }
    }
    result = (WTF **)WTF::fastFree(v29, v14);
  }
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t WebCore::BidiResolverBase<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>::increment(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = result;
    if ((*(_BYTE *)(v1 + 45) & 2) == 0
      || (v3 = *(_DWORD *)(result + 24) + 1, *(_DWORD *)(result + 24) = v3, (v4 = *(_QWORD *)(v1 + 104)) == 0)
      || v3 >= *(_DWORD *)(v4 + 4))
    {
      result = WebCore::nextInlineRendererSkippingEmpty<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(*(_QWORD *)result, v1, result);
      v5 = 0x1FFFFFFFFLL;
      if (result)
        v5 = 0;
      *(_QWORD *)(v2 + 8) = result;
      *(_DWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 16) = v5;
      *(_BYTE *)(v2 + 20) = BYTE4(v5);
    }
  }
  return result;
}

WebCore::BidiCharacterRun *WebCore::BidiRunList<WebCore::BidiRun>::reverseRuns(WebCore::BidiCharacterRun *result, void *a2, unsigned int a3)
{
  WebCore::BidiCharacterRun *v3;
  WebCore::BidiCharacterRun *v4;
  unsigned int v5;
  WTF ****v6;
  WebCore::BidiCharacterRun ***v7;
  int v8;
  WebCore::BidiCharacterRun *v9;
  WebCore::BidiCharacterRun ***v10;
  WebCore::BidiCharacterRun **v11;
  WebCore::BidiCharacterRun *v12;
  WebCore::BidiCharacterRun ***v13;
  WebCore::BidiCharacterRun **v14;
  WebCore::BidiCharacterRun ***v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  WTF ***v19;
  WTF **v20;
  WTF *v21;
  WTF *v22;
  void *v23;
  WebCore::BidiCharacterRun **v24;
  WTF *v25;
  void *v26;
  WebCore::BidiCharacterRun *v27[7];

  v5 = a3 - (_DWORD)a2;
  if (a3 > a2)
  {
    v27[5] = v3;
    v27[6] = v4;
    v6 = (WTF ****)result;
    v7 = 0;
    v8 = (_DWORD)a2 + 1;
    v9 = result;
    do
    {
      v10 = v7;
      v9 = *(WebCore::BidiCharacterRun **)v9;
      v7 = (WebCore::BidiCharacterRun ***)v9;
      --v8;
    }
    while (v8);
    v11 = (WebCore::BidiCharacterRun **)v9;
    do
    {
      v11 = (WebCore::BidiCharacterRun **)*v11;
      --v5;
    }
    while (v5);
    v12 = *v11;
    if (!*v11)
    {
      *((_QWORD *)result + 1) = v9;
      v12 = *v11;
    }
    *v11 = 0;
    if (v10)
      v13 = v10;
    else
      v13 = (WebCore::BidiCharacterRun ***)result;
    v14 = *v13;
    *v13 = 0;
    if (v14)
    {
      do
      {
        v15 = (WebCore::BidiCharacterRun ***)v14;
        v14 = (WebCore::BidiCharacterRun **)*v14;
        *v15 = 0;
        v27[0] = v12;
        WebCore::BidiCharacterRun::setNext(v15, (WebCore::BidiCharacterRun ***)v27);
        result = v27[0];
        v27[0] = 0;
        if (result)
        {
          WebCore::BidiCharacterRun::~BidiCharacterRun((WTF **)result);
          result = (WebCore::BidiCharacterRun *)WTF::fastFree(v16, v17);
        }
        v12 = (WebCore::BidiCharacterRun *)v15;
      }
      while (v14);
      if (v10)
        goto LABEL_16;
    }
    else
    {
      v15 = (WebCore::BidiCharacterRun ***)v12;
      if (v10)
      {
LABEL_16:
        v27[0] = (WebCore::BidiCharacterRun *)v15;
        WebCore::BidiCharacterRun::setNext(v10, (WebCore::BidiCharacterRun ***)v27);
        result = v27[0];
        v27[0] = 0;
        if (!result)
          return result;
        WebCore::BidiCharacterRun::~BidiCharacterRun((WTF **)result);
        return (WebCore::BidiCharacterRun *)WTF::fastFree(v18, a2);
      }
    }
    v19 = *v6;
    *v6 = v15;
    if (!v19)
      return result;
    v20 = *v19;
    *v19 = 0;
    if (v20)
    {
      do
      {
        v21 = *v20;
        *v20 = 0;
        WebCore::BidiCharacterRun::~BidiCharacterRun(v20);
        WTF::fastFree(v22, v23);
        v20 = (WTF **)v21;
      }
      while (v21);
      v24 = *v19;
      *v19 = 0;
      if (v24)
      {
        WebCore::BidiCharacterRun::~BidiCharacterRun(v24);
        WTF::fastFree(v25, v26);
      }
    }
    v18 = (WTF *)v19;
    return (WebCore::BidiCharacterRun *)WTF::fastFree(v18, a2);
  }
  return result;
}

uint64_t WebCore::notifyResolverToResumeInIsolate(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a2 != a3)
  {
    v4 = result;
    WebCore::notifyResolverToResumeInIsolate(result);
    return WebCore::notifyObserverEnteredObject<WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>>(v4, a3);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::BidiRun *,unsigned int,WTF::DefaultHash<WebCore::BidiRun *>,WTF::HashTraits<WebCore::BidiRun *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + 16 * v7;
  v10 = *(unsigned int *)(v12 + 8);
  *(_QWORD *)v12 = -1;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(a1, v17 >> 1, 0);
  }
  return v10;
}

void WTF::HashTable<WebCore::LegacyInlineTextBox const*,WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect>>,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashMap<WebCore::LegacyInlineTextBox const*,WebCore::LayoutRect,WTF::DefaultHash<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>,WTF::HashTraits<WebCore::LayoutRect>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::LegacyInlineTextBox const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int128 v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (_QWORD *)(v4 + 24 * i);
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (~(*v12 << 32) + *v12) ^ ((~(*v12 << 32) + *v12) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v13 + 24 * v18;
          v8 = *(void **)v20;
          v18 = (v18 + v19++) & v14;
        }
        while (*(_QWORD *)v20);
        v21 = *(_OWORD *)v12;
        *(_QWORD *)(v20 + 16) = v12[2];
        *(_OWORD *)v20 = v21;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::BidiResolverWithIsolate<WebCore::LegacyInlineIterator,WebCore::BidiRun,WebCore::BidiIsolatedRun>::~BidiResolverWithIsolate(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v14;
  WTF *v15;
  void *v16;
  WebCore::BidiCharacterRun **v17;
  WTF *v18;
  void *v19;
  WTF *v20;

  v3 = *(WTF **)(a1 + 392);
  if (v3)
  {
    *(_QWORD *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 400) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 312);
  if ((WTF *)(a1 + 328) != v4 && v4 != 0)
  {
    *(_QWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = *(_QWORD *)(a1 + 304);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = *(WTF **)(a1 + 272);
  if (v7)
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 280) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(WTF **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v8)
  {
    v9 = *(WTF ***)v8;
    *(_QWORD *)v8 = 0;
    if (v9)
    {
      do
      {
        v14 = *v9;
        *v9 = 0;
        WebCore::BidiCharacterRun::~BidiCharacterRun(v9);
        WTF::fastFree(v15, v16);
        v9 = (WTF **)v14;
      }
      while (v14);
      v17 = *(WebCore::BidiCharacterRun ***)v8;
      *(_QWORD *)v8 = 0;
      if (v17)
      {
        WebCore::BidiCharacterRun::~BidiCharacterRun(v17);
        WTF::fastFree(v18, v19);
      }
    }
    WTF::fastFree(v8, a2);
  }
  v10 = *(unsigned int **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v20 = (WTF *)v10;
      WTF::ThreadSafeRefCounted<WebCore::BidiContext,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v20, a2);
    }
  }
  return a1;
}

uint64_t WebCore::LegacyRootInlineBox::operator new(uint64_t this)
{
  if (this == 136)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::LegacyRootInlineBox *WebCore::LegacyRootInlineBox::LegacyRootInlineBox(WebCore::LegacyRootInlineBox *this, WebCore::RenderBlockFlow *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  void *v9;
  WTF *v10;

  *(_QWORD *)this = off_1E341E8B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = a2;
    v10 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WTF::fastFree(v10, v9);
        v4 = *((_QWORD *)a2 + 1);
        if (!v4)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  ++*(_DWORD *)v4;
LABEL_3:
  *((_QWORD *)this + 4) = v4;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  v5 = (*((unsigned __int16 *)this + 26) | (*((unsigned __int8 *)this + 54) << 16)) & 0xFFFE5000;
  *((_WORD *)this + 26) = *((_WORD *)this + 26) & 0x5000 | 0x2800;
  v6 = HIWORD(v5);
  *((_BYTE *)this + 54) = BYTE2(v5);
  *((_DWORD *)this + 14) &= 0xFFFBFFF8;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1E341E990;
  *(_QWORD *)((char *)this + 124) = 0;
  *(_QWORD *)((char *)this + 116) = 0;
  v7 = (v5 | (*((_DWORD *)a2 + 5) >> 1) & 0x800) ^ 0x2800;
  *((_BYTE *)this + 54) = v6;
  *((_WORD *)this + 26) = v7;
  return this;
}

void WebCore::LegacyRootInlineBox::~LegacyRootInlineBox(WebCore::LegacyRootInlineBox *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *(_QWORD *)this = off_1E341E6E0;
  v7 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v8 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF *v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *(_QWORD *)this = off_1E341E6E0;
  v7 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E341E8B8;
  v8 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::fastFree(v8, a2);
    else
      --*(_DWORD *)v8;
  }
  if (*((_DWORD *)this + 28))
  {
    *((_QWORD *)this + 16) = 0;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, a2);
  }
}

uint64_t WebCore::LegacyRootInlineBox::baselinePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 45) & 8) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, BOOL, uint64_t))(*(_QWORD *)v2 + 1160))(v2, a2, *(_WORD *)(a1 + 52) & 1, (*(_WORD *)(a1 + 52) & 0x800) == 0, 1);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LegacyRootInlineBox::lineHeight(WebCore::LegacyRootInlineBox *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, BOOL, uint64_t))(*(_QWORD *)v1 + 1152))(v1, *((_WORD *)this + 26) & 1, (*((_WORD *)this + 26) & 0x800) == 0, 1);
  result = 96;
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::LegacyRootInlineBox::adjustPosition(WebCore::LegacyRootInlineBox *this, float a2, float a3)
{
  float v6;
  _QWORD *i;
  _DWORD *result;
  float v9;
  double v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;
  int v30;

  v6 = *((float *)this + 12) + a3;
  *((float *)this + 11) = *((float *)this + 11) + a2;
  *((float *)this + 12) = v6;
  for (i = (_QWORD *)*((_QWORD *)this + 9); i; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, float, float))(*i + 48))(i, a2, a3);
  result = (_DWORD *)*((_QWORD *)this + 8);
  if (result)
  {
    v25 = a2 * 64.0;
    v26 = 0x80000000;
    if (v25 > -2147483650.0)
      v26 = (int)v25;
    if (v25 < 2147483650.0)
      v27 = v26;
    else
      v27 = 0x7FFFFFFF;
    v28 = a3 * 64.0;
    v29 = 0x80000000;
    if (v28 > -2147483650.0)
      v29 = (int)v28;
    if (v28 < 2147483650.0)
      v30 = v29;
    else
      v30 = 0x7FFFFFFF;
    result = WebCore::RenderOverflow::move(result, v27, v30);
  }
  if ((*((_WORD *)this + 26) & 0x800) != 0)
    v9 = a3;
  else
    v9 = a2;
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  v12 = *((_DWORD *)this + 29);
  v13 = *((_DWORD *)this + 30);
  v14 = __OFADD__(v12, v11);
  v15 = v12 + v11;
  v16 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v16 = v15;
  v14 = __OFADD__(v13, v11);
  v17 = v13 + v11;
  v18 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v18 = v17;
  *((_DWORD *)this + 29) = v16;
  *((_DWORD *)this + 30) = v18;
  v19 = *((_DWORD *)this + 31);
  v20 = *((_DWORD *)this + 32);
  v14 = __OFADD__(v19, v11);
  v21 = v19 + v11;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v22 = v21;
  v14 = __OFADD__(v20, v11);
  v23 = v20 + v11;
  v24 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v24 = v23;
  *((_DWORD *)this + 31) = v22;
  *((_DWORD *)this + 32) = v24;
  return result;
}

uint64_t WebCore::LegacyRootInlineBox::selectionState(WebCore::LegacyRootInlineBox *this)
{
  uint64_t LeafDescendant;
  _QWORD *v2;
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v7;

  LeafDescendant = WebCore::LegacyInlineFlowBox::firstLeafDescendant(this);
  if (!LeafDescendant)
  {
    LOBYTE(v3) = 0;
    return v3;
  }
  v2 = (_QWORD *)LeafDescendant;
  v3 = 0;
  while (1)
  {
LABEL_3:
    v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 192))(v2);
    if (v4 == 1)
    {
      if (v3 == 3)
        goto LABEL_22;
      if (!v3)
      {
        v3 = 1;
        goto LABEL_7;
      }
      goto LABEL_24;
    }
    if (v4 != 3)
      break;
    if (v3 == 1)
      goto LABEL_22;
    if (!v3)
    {
      v3 = 3;
      goto LABEL_7;
    }
LABEL_24:
    if (v3 == 2)
      v3 = v4;
LABEL_7:
    while (1)
    {
      v5 = (_QWORD *)v2[1];
      if (v5)
        break;
LABEL_8:
      v2 = (_QWORD *)v2[3];
      if (!v2)
        return v3;
    }
    do
    {
      if (((*(uint64_t (**)(_QWORD *))(*v5 + 136))(v5) & 1) != 0)
      {
        v2 = v5;
        goto LABEL_3;
      }
      if (((*(uint64_t (**)(_QWORD *))(*v5 + 72))(v5) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196360034);
      }
      v7 = WebCore::LegacyInlineFlowBox::firstLeafDescendant((WebCore::LegacyInlineFlowBox *)v5);
      v5 = (_QWORD *)v5[1];
    }
    while (v5 && !v7);
    if (!v7)
      goto LABEL_8;
    v2 = (_QWORD *)v7;
  }
  if (v3)
  {
    if (v3 != 1 || v4)
      goto LABEL_7;
LABEL_22:
    LOBYTE(v3) = 4;
    return v3;
  }
  v3 = v4;
  if (v4 != 4)
    goto LABEL_7;
  return v3;
}

uint64_t WebCore::RenderStyle::isFlippedLinesWritingMode(WebCore::RenderStyle *this)
{
  int v1;
  int v2;

  v1 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  v2 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_3;
    case 3:
    case 5:
      v1 = 3;
      goto LABEL_3;
    case 4:
      return ((v2 & 0xFFFFFFFD) == 1) ^ ((v2 & 6) == 2);
    default:
      v1 = 0;
LABEL_3:
      v2 = v1;
      return ((v2 & 0xFFFFFFFD) == 1) ^ ((v2 & 6) == 2);
  }
}

uint64_t WebCore::LegacyRootInlineBox::selectionBottom(WebCore::LegacyRootInlineBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  while (1)
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
      v2 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19636020CLL);
    }
    v3 = *((unsigned int *)this + 30);
    if (!WebCore::RenderStyle::isFlippedLinesWritingMode((WebCore::RenderStyle *)(v2 + 80)))
      return v3;
    v4 = *((_QWORD *)this + 12);
    if (!v4)
      return v3;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19636022CLL);
    }
    v5 = *((_QWORD *)this + 12);
    if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5) & 1) == 0)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x1963601D8);
    }
    v6 = *(_QWORD *)(v5 + 32);
    if (v6)
      v6 = *(_QWORD *)(v6 + 8);
    if ((*(_BYTE *)(v6 + 45) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19636024CLL);
    }
    v3 = *(unsigned int *)(v5 + 116);
    v7 = (unsigned __int16)*(_DWORD *)(v6 + 124) >> 13;
    if (v7 <= 4 && ((1 << v7) & 0x16) != 0)
      return v3;
    this = *(WebCore::LegacyRootInlineBox **)(v5 + 88);
    if (!this)
      return v3;
    if (((*(uint64_t (**)(WebCore::LegacyRootInlineBox *))(*(_QWORD *)this + 88))(this) & 1) == 0)
      goto LABEL_21;
  }
}

WebCore::LegacyInlineFlowBox **WebCore::LegacyRootInlineBox::removeLineBoxFromRenderObject(WebCore::LegacyInlineFlowBox **this)
{
  WebCore::LegacyInlineFlowBox *v1;
  uint64_t v2;

  v1 = this[4];
  if (v1)
    v1 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v1 + 1);
  if ((*((_BYTE *)v1 + 45) & 8) == 0 || (*((_BYTE *)v1 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1963602D4);
  }
  if (*((_DWORD *)v1 + 60) == 2)
  {
    v2 = *((_QWORD *)v1 + 29);
    if (v2)
      return WebCore::RenderLineBoxList::removeLineBox((WebCore::LegacyInlineFlowBox **)(v2 + 8), (WebCore::LegacyInlineFlowBox *)this);
  }
  return this;
}

uint64_t WebCore::LegacyRootInlineBox::extractLineBoxFromRenderObject(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) == 0 || (*(_BYTE *)(v1 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196360378);
  }
  v2 = *(_QWORD *)(v1 + 232);
  v3 = *(_QWORD *)(this + 88);
  *(_QWORD *)(v2 + 16) = v3;
  if (*(_QWORD *)(v2 + 8) == this)
    *(_QWORD *)(v2 + 8) = 0;
  if (v3)
    *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(this + 88) = 0;
  do
  {
    v5 = *(_WORD *)(this + 52);
    v4 = this + 52;
    *(_WORD *)v4 = v5 | 0x200;
    this = *(_QWORD *)(v4 + 44);
  }
  while (this);
  return this;
}

uint64_t WebCore::LegacyRootInlineBox::attachLineBoxToRenderObject(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v1 = *(_QWORD *)(v1 + 8);
  if ((*(_BYTE *)(v1 + 45) & 8) == 0 || (*(_BYTE *)(v1 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19636042CLL);
  }
  v2 = *(_QWORD *)(v1 + 232);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    *(_QWORD *)(v3 + 96) = this;
    *(_QWORD *)(this + 88) = v3;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = this;
  }
  do
  {
    v4 = this;
    v5 = *(_WORD *)(this + 52) & 0xFDFF | (*(unsigned __int8 *)(this + 54) << 16);
    *(_WORD *)(this + 52) &= ~0x200u;
    *(_BYTE *)(this + 54) = BYTE2(v5);
    this = *(_QWORD *)(this + 96);
  }
  while (this);
  *(_QWORD *)(v2 + 16) = v4;
  return this;
}

uint64_t WebCore::RenderBlock::availableLogicalWidthForLine(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  v5 = a2;
  v6 = WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)a1, a2);
  v7 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1816))(a1, v5, v7, a3);
  v9 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine(a1, (void *)v8);
  v10 = *(_QWORD *)a1;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 1000))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 1016))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  }
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1824))(a1, v5, v13, a3);
  v15 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(a1, (void *)v14);
  v16 = v9 - v15;
  if (__OFSUB__(v9, v15))
    v16 = (v9 >> 31) + 0x7FFFFFFF;
  return v16 & ~(v16 >> 31);
}

uint64_t WebCore::MarkedText::subdivide@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  int v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int *v72;
  int *v73;
  WTF::StringImpl *v74;
  void *v75;
  uint64_t v76;
  __int128 v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  uint64_t v80;
  __int128 v81;
  WTF::StringImpl *v82;
  _BYTE v85[24];
  WTF::StringImpl *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v4 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v4)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  v5 = result;
  v89 = 0;
  v90 = 0;
  v6 = (2 * v4);
  if (!(_DWORD)v6)
  {
    v9 = *(_DWORD **)result;
    v10 = *(_QWORD *)result + 40 * v4;
    while (1)
    {
LABEL_8:
      *(_DWORD *)v85 = 0;
      *(_DWORD *)&v85[4] = v9[1];
      *(_QWORD *)&v85[8] = v9;
      ++*v9;
      v11 = HIDWORD(v90);
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset>((uint64_t)&v89, (unint64_t)v85);
      }
      else
      {
        v12 = (_QWORD *)(v89 + 16 * HIDWORD(v90));
        *v12 = *(_QWORD *)v85;
        v13 = *(_QWORD *)&v85[8];
        *(_QWORD *)&v85[8] = 0;
        v12[1] = v13;
        HIDWORD(v90) = v11 + 1;
      }
      if (*(_QWORD *)&v85[8])
      {
        if (!**(_DWORD **)&v85[8])
        {
          __break(0xC471u);
          goto LABEL_106;
        }
        --**(_DWORD **)&v85[8];
      }
      *(_DWORD *)v85 = 1;
      *(_DWORD *)&v85[4] = v9[2];
      *(_QWORD *)&v85[8] = v9;
      ++*v9;
      v14 = HIDWORD(v90);
      if (HIDWORD(v90) == (_DWORD)v90)
      {
        WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset>((uint64_t)&v89, (unint64_t)v85);
      }
      else
      {
        v15 = (_QWORD *)(v89 + 16 * HIDWORD(v90));
        *v15 = *(_QWORD *)v85;
        v16 = *(_QWORD *)&v85[8];
        *(_QWORD *)&v85[8] = 0;
        v15[1] = v16;
        HIDWORD(v90) = v14 + 1;
      }
      if (*(_QWORD *)&v85[8])
      {
        if (!**(_DWORD **)&v85[8])
        {
          __break(0xC471u);
          JUMPOUT(0x196360C00);
        }
        --**(_DWORD **)&v85[8];
      }
      v9 += 10;
      if (v9 == (_DWORD *)v10)
      {
        v7 = v89;
        v17 = HIDWORD(v90);
        goto LABEL_22;
      }
    }
  }
  if (v6 >> 28)
  {
    __break(0xC471u);
LABEL_106:
    JUMPOUT(0x196360BE0);
  }
  v7 = WTF::fastMalloc((WTF *)(16 * v6));
  LODWORD(v90) = 2 * v4;
  v89 = v7;
  v8 = *(_DWORD *)(v5 + 12);
  if (v8)
  {
    v9 = *(_DWORD **)v5;
    v10 = (uint64_t)&v9[10 * v8];
    goto LABEL_8;
  }
  v17 = 0;
LABEL_22:
  std::sort[abi:sn180100]<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0>(v7, v7 + 16 * v17);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (v4 >= 0x6666667)
  {
    __break(0xC471u);
    JUMPOUT(0x196360C70);
  }
  v18 = (WTF *)(40 * v4);
  v19 = WTF::fastMalloc(v18);
  *(_DWORD *)(a3 + 8) = (v18 & 0xFFFFFFF8) / 0x28;
  *(_QWORD *)a3 = v19;
  v88 = 0;
  v21 = HIDWORD(v90);
  if (!HIDWORD(v90))
  {
    __break(0xC471u);
    JUMPOUT(0x196360C78);
  }
  if ((_DWORD)v6)
  {
    v22 = v89;
    v23 = *(_DWORD *)(v89 + 4);
    if (a2 == 1)
    {
      v24 = 0;
      v25 = 1;
      while (1)
      {
        if (v25 == v21)
          goto LABEL_101;
        v26 = v22 + 16 * v25;
        v29 = *(_DWORD *)(v26 + 4);
        v28 = (int *)(v26 + 4);
        v27 = v29;
        if (v29 > *(v28 - 4))
        {
          if (!v88)
          {
            if (v25 == 1)
            {
              v3 = 0;
            }
            else
            {
              v45 = 0;
              v3 = 0;
              v46 = (uint64_t *)(v22 + 24);
              do
              {
                if (v21 <= v3)
                {
LABEL_100:
                  __break(0xC471u);
                  JUMPOUT(0x196360C58);
                }
                v47 = *v46;
                v46 += 2;
                ++v45;
                if (*(unsigned __int8 *)(v47 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v22 + 16 * v3 + 8)
                                                                                       + 12))
                  v3 = v45;
              }
              while (v24 != v45);
            }
LABEL_43:
            if (v21 <= v3)
            {
              __break(0xC471u);
              JUMPOUT(0x196360C68);
            }
            v40 = *(_QWORD *)(v22 + 16 * v3 + 8);
            v41 = *(_BYTE *)(v40 + 12);
            *(_DWORD *)v85 = 0;
            *(_DWORD *)&v85[4] = v23;
            *(_DWORD *)&v85[8] = v27;
            v85[12] = v41;
            v42 = *(WTF::StringImpl **)(v40 + 24);
            *(_QWORD *)&v85[16] = *(_QWORD *)(v40 + 16);
            if (v42)
              *(_DWORD *)v42 += 2;
            v86 = v42;
            v87 = 0;
            v43 = *(_DWORD *)(a3 + 12);
            if (v43 == *(_DWORD *)(a3 + 8))
            {
              WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>(a3, (unint64_t)v85);
            }
            else
            {
              v79 = v43 + 1;
              v80 = *(_QWORD *)a3 + 40 * v43;
              *(_DWORD *)v80 = 0;
              v81 = *(_OWORD *)&v85[4];
              *(_DWORD *)(v80 + 20) = *(_DWORD *)&v85[20];
              *(_OWORD *)(v80 + 4) = v81;
              v82 = v86;
              v86 = 0;
              *(_QWORD *)(v80 + 24) = v82;
              *(_DWORD *)(v80 + 32) = v87;
              *(_DWORD *)(a3 + 12) = v79;
            }
            v44 = v86;
            v86 = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
                WTF::StringImpl::destroy(v44, v20);
              else
                *(_DWORD *)v44 -= 2;
            }
            v23 = *v28;
            goto LABEL_52;
          }
          v30 = 0;
          v31 = 0;
          v3 &= 0xFFFFFF00;
          v32 = *(_DWORD *)(v88 - 8);
          do
          {
            v33 = *(_QWORD *)(v22 + 16 * v30 + 8);
            v34 = (~(v33 << 32) + v33) ^ ((unint64_t)(~(v33 << 32) + v33) >> 22);
            v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
            v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
            v37 = v32 & ((v36 >> 31) ^ v36);
            v38 = *(_QWORD *)(v88 + 8 * v37);
            if (v38 != v33)
            {
              v39 = 1;
              while (v38)
              {
                v37 = (v37 + v39) & v32;
                v38 = *(_QWORD *)(v88 + 8 * v37);
                ++v39;
                if (v38 == v33)
                  goto LABEL_35;
              }
              if (!v31)
                goto LABEL_40;
              if (v21 <= v3)
                goto LABEL_100;
              if (*(unsigned __int8 *)(v33 + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v22 + 16 * v3 + 8)
                                                                                      + 12))
              {
                v31 = 1;
              }
              else
              {
LABEL_40:
                v31 = 1;
                v3 = v30;
              }
            }
LABEL_35:
            ++v30;
          }
          while (v30 != v25);
          if (v31)
            goto LABEL_43;
          v23 = v27;
        }
LABEL_52:
        if (*(_DWORD *)(v22 + 16 * v25) == 1)
          WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::add(&v88, (_DWORD **)(v22 + 16 * v25 + 8), (uint64_t)v85);
        ++v25;
        ++v24;
        if (v25 == v6)
          goto LABEL_91;
      }
    }
    v48 = 1;
    while (1)
    {
      if (v48 == v21)
      {
LABEL_101:
        __break(0xC471u);
        JUMPOUT(0x196360C60);
      }
      v49 = v22 + 16 * v48;
      v51 = *(_DWORD *)(v49 + 4);
      v50 = (int *)(v49 + 4);
      if (v51 > *(v50 - 4))
        break;
LABEL_88:
      if (*(_DWORD *)(v22 + 16 * v48) == 1)
        WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::add(&v88, (_DWORD **)(v22 + 16 * v48 + 8), (uint64_t)v85);
      if (++v48 == v6)
        goto LABEL_91;
    }
    v52 = 0;
    while (1)
    {
      if (v52 == v21)
      {
        __break(0xC471u);
        JUMPOUT(0x196360C50);
      }
      v53 = *(_QWORD *)(v22 + 16 * v52 + 8);
      if (!v88)
        goto LABEL_78;
      v54 = *(_DWORD *)(v88 - 8);
      v55 = (~(v53 << 32) + v53) ^ ((unint64_t)(~(v53 << 32) + v53) >> 22);
      v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
      v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
      v58 = v54 & ((v57 >> 31) ^ v57);
      v59 = *(_QWORD *)(v88 + 8 * v58);
      if (v59 != v53)
        break;
LABEL_85:
      if (++v52 == v48)
      {
        v23 = *v50;
        goto LABEL_88;
      }
    }
    v60 = 1;
    while (v59)
    {
      v58 = (v58 + v60) & v54;
      v59 = *(_QWORD *)(v88 + 8 * v58);
      ++v60;
      if (v59 == v53)
        goto LABEL_85;
    }
LABEL_78:
    v61 = *v50;
    v62 = *(_BYTE *)(v53 + 12);
    v63 = *(_DWORD *)(v53 + 32);
    *(_DWORD *)v85 = 0;
    *(_DWORD *)&v85[4] = v23;
    *(_DWORD *)&v85[8] = v61;
    v85[12] = v62;
    v65 = *(_QWORD *)(v53 + 16);
    v64 = *(WTF::StringImpl **)(v53 + 24);
    *(_QWORD *)&v85[16] = v65;
    if (v64)
      *(_DWORD *)v64 += 2;
    v86 = v64;
    v87 = v63;
    v66 = a3;
    v67 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v67 == *(_DWORD *)(a3 + 8))
    {
      v68 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v67 + 1, (unint64_t)v85);
      v66 = a3;
      LODWORD(v67) = *(_DWORD *)(a3 + 12);
      v69 = *(_QWORD *)a3 + 40 * v67;
      *(_DWORD *)v69 = 0;
      v70 = *(_DWORD *)(v68 + 20);
      *(_OWORD *)(v69 + 4) = *(_OWORD *)(v68 + 4);
      *(_DWORD *)(v69 + 20) = v70;
      v71 = *(_QWORD *)(v68 + 24);
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v69 + 24) = v71;
      v72 = (int *)(v69 + 32);
      v73 = (int *)(v68 + 32);
    }
    else
    {
      v76 = *(_QWORD *)a3 + 40 * v67;
      *(_DWORD *)v76 = 0;
      v77 = *(_OWORD *)&v85[4];
      *(_DWORD *)(v76 + 20) = *(_DWORD *)&v85[20];
      *(_OWORD *)(v76 + 4) = v77;
      v78 = v86;
      v86 = 0;
      *(_QWORD *)(v76 + 24) = v78;
      v72 = (int *)(v76 + 32);
      v73 = &v87;
    }
    *v72 = *v73;
    *(_DWORD *)(v66 + 12) = v67 + 1;
    v74 = v86;
    v86 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v20);
      else
        *(_DWORD *)v74 -= 2;
    }
    goto LABEL_85;
  }
LABEL_91:
  if (!a2)
    std::sort[abi:sn180100]<WebCore::MarkedText *,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1>(*(_QWORD *)a3, *(_QWORD *)a3 + 40 * *(unsigned int *)(a3 + 12));
  WTF::HashSet<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTableTraits>::~HashSet(&v88, v20);
  return WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v89, v75);
}

uint64_t std::sort[abi:sn180100]<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz((uint64_t)(a2 - a1) >> 4);
  if (a2 == a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,false>(a1, a2, v3, 1);
}

void WebCore::MarkedText::~MarkedText(WebCore::MarkedText *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

uint64_t std::sort[abi:sn180100]<WebCore::MarkedText *,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - a1) >> 3));
  if (a2 == a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,false>(a1, a2, v3, 1);
}

uint64_t WTF::HashSet<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTableTraits>::~HashSet(_QWORD *a1, void *a2)
{
  _DWORD **v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  uint64_t result;

  v3 = (_DWORD **)*a1;
  if (!*a1)
    return (uint64_t)a1;
  v4 = *((unsigned int *)v3 - 1);
  if (!(_DWORD)v4)
  {
LABEL_8:
    WTF::fastFree((WTF *)(v3 - 2), a2);
    return (uint64_t)a1;
  }
  v5 = (_DWORD **)*a1;
  while (1)
  {
    v6 = *v5;
    if ((unint64_t)*v5 + 1 >= 2)
      break;
LABEL_7:
    ++v5;
    if (!--v4)
      goto LABEL_8;
  }
  if (*v6)
  {
    --*v6;
    goto LABEL_7;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    v6 = (_DWORD **)((char *)v4 + 8);
    do
    {
      v7 = *v6;
      if (*v6)
      {
        if (!*v7)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        --*v7;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WebCore::MarkedText::collectForHighlights@<X0>(const WebCore::RenderText *a1@<X0>, const WebCore::TextBoxSelectableRange *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *result;
  const WebCore::TextBoxSelectableRange *v18;
  const WebCore::TextBoxSelectableRange *v19;
  const WebCore::TextBoxSelectableRange *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WebCore::HighlightRange **v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  const WebCore::TextBoxSelectableRange *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  const WebCore::HighlightRange **v43;
  const WebCore::HighlightRange **v44;
  uint64_t v45;
  void *v46;
  WebCore::Node *v47;
  WebCore::Node *v48;
  int v49;
  WebCore::Node *v50;
  WebCore::Node *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  WTF::StringImpl *v70;
  WebCore::Node *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  const WebCore::TextBoxSelectableRange *v74;
  const WebCore::TextBoxSelectableRange *v75;
  const WebCore::TextBoxSelectableRange *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const WebCore::HighlightRange **v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  WTF::StringImpl *v90;
  const WebCore::TextBoxSelectableRange *v91;
  uint64_t v92;
  __int128 v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  __int128 v96;
  WTF::StringImpl *v97;
  unsigned int v98;
  uint64_t v99;
  __int128 v100;
  WTF::StringImpl *v101;
  uint64_t *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  uint64_t v105;
  _BYTE v106[24];
  WTF::StringImpl *v107;
  int v108;
  WebCore::RenderStyle *v109;
  WTF *v110;
  WTF *v111;
  uint64_t v112;
  char v113;
  WebCore::Node *v114;
  WebCore::Node *v115;
  WebCore::Node *v116;
  int v117;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v113 = 0;
  v111 = 0;
  v112 = 0;
  v110 = 0;
  v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8);
  v8 = v7[85];
  v9 = *(_QWORD *)(v8 + 688);
  if ((*(_QWORD *)(v8 + 680) & 0x40000) != 0)
  {
    v11 = *((_QWORD *)a1 + 4);
    v12 = v11 ? *(_QWORD *)(v11 + 8) : 0;
    v13 = v7[308];
    if (v13)
    {
      v36 = *(unsigned int *)(v13 + 28);
      if ((_DWORD)v36)
      {
        v37 = *(WTF::StringImpl ***)(v13 + 16);
        v104 = &v37[v36];
        v102 = (uint64_t *)(v13 + 8);
        while (1)
        {
          *(_DWORD *)v106 = 4;
          v38 = *v37;
          if (*v37)
            *(_DWORD *)v38 += 2;
          *(_QWORD *)&v106[8] = v38;
          v106[16] = 0;
          LOBYTE(v108) = 0;
          WebCore::RenderElement::getUncachedPseudoStyle(v12, (int *)v106, v12 + 80, 0, &v109);
          v40 = *(WTF::StringImpl **)&v106[8];
          *(_QWORD *)&v106[8] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (!v109 || a3 == 2 && (*((_DWORD *)v109 + 10) & 0x78000) == 0)
            goto LABEL_53;
          v41 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v102, (uint64_t)v37);
          v42 = *(unsigned int *)(v41 + 20);
          if (!(_DWORD)v42)
            goto LABEL_53;
          v43 = *(const WebCore::HighlightRange ***)(v41 + 8);
          v44 = &v43[v42];
          do
          {
            if (!WebCore::RenderHighlight::setRenderRange(&v110, *v43))
              goto LABEL_112;
            v45 = *((_QWORD *)*v43 + 2);
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 56))(v45) & 1) == 0)
            {
              if (!WebCore::StaticRange::computeValidity((WebCore::StaticRange *)v45))
                goto LABEL_112;
              if (*(_QWORD *)(v45 + 16) == *(_QWORD *)(v45 + 32) && *(_DWORD *)(v45 + 24) == *(_DWORD *)(v45 + 40))
                goto LABEL_112;
            }
            WebCore::makeSimpleRange(*((_QWORD *)*v43 + 2), (uint64_t)&v114);
            v47 = v114;
            *((_DWORD *)v114 + 6) += 2;
            *(_QWORD *)v106 = v47;
            *(_DWORD *)&v106[8] = (_DWORD)v115;
            v48 = v116;
            v49 = *((_DWORD *)v116 + 6);
            *((_DWORD *)v116 + 6) = v49 + 2;
            *(_QWORD *)&v106[16] = v48;
            LODWORD(v107) = v117;
            v116 = 0;
            if (v49)
            {
              *((_DWORD *)v48 + 6) = v49;
LABEL_61:
              v114 = 0;
LABEL_62:
              if (*((_DWORD *)v47 + 6) == 2)
              {
                if ((*((_WORD *)v47 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v47, v46);
              }
              else
              {
                *((_DWORD *)v47 + 6) -= 2;
              }
              goto LABEL_64;
            }
            if ((*((_WORD *)v48 + 15) & 0x400) != 0)
              goto LABEL_61;
            WebCore::Node::removedLastRef(v48, v46);
            v47 = v114;
            v114 = 0;
            if (v47)
              goto LABEL_62;
LABEL_64:
            WebCore::IntersectingNodeIterator::IntersectingNodeIterator((WebCore::IntersectingNodeIterator *)&v114, (const WebCore::SimpleRange *)v106);
            while (1)
            {
              v50 = v114;
              if (!v114)
              {
                v52 = v115;
                v115 = 0;
                if (v52)
                {
                  v53 = *((_DWORD *)v52 + 6) - 2;
                  if (*((_DWORD *)v52 + 6) != 2)
                    goto LABEL_77;
                  if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v52, v39);
                    v52 = v114;
                    v114 = 0;
                    if (v52)
                    {
                      v53 = *((_DWORD *)v52 + 6) - 2;
                      if (*((_DWORD *)v52 + 6) == 2)
                      {
                        if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v52, v39);
                      }
                      else
                      {
LABEL_77:
                        *((_DWORD *)v52 + 6) = v53;
                      }
                    }
                  }
                }
                v54 = 0;
                goto LABEL_79;
              }
              if ((*((_QWORD *)v114 + 8) & 0xFFFFFFFFFFFFLL) != 0)
                break;
              WebCore::IntersectingNodeIterator::advance((WebCore::IntersectingNodeIterator *)&v114);
            }
            v71 = v115;
            v115 = 0;
            if (!v71)
              goto LABEL_101;
            if (*((_DWORD *)v71 + 6) != 2)
            {
              *((_DWORD *)v71 + 6) -= 2;
              goto LABEL_101;
            }
            if ((*((_WORD *)v71 + 15) & 0x400) != 0)
            {
LABEL_101:
              v114 = 0;
LABEL_102:
              if (*((_DWORD *)v50 + 6) == 2)
              {
                if ((*((_WORD *)v50 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v50, v39);
              }
              else
              {
                *((_DWORD *)v50 + 6) -= 2;
              }
              goto LABEL_104;
            }
            WebCore::Node::removedLastRef(v71, v39);
            v50 = v114;
            v114 = 0;
            if (v50)
              goto LABEL_102;
LABEL_104:
            v54 = 1;
LABEL_79:
            v55 = *(_QWORD *)&v106[16];
            *(_QWORD *)&v106[16] = 0;
            if (v55)
            {
              if (*(_DWORD *)(v55 + 24) == 2)
              {
                if ((*(_WORD *)(v55 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v55, v39);
              }
              else
              {
                *(_DWORD *)(v55 + 24) -= 2;
              }
            }
            v56 = *(_QWORD *)v106;
            *(_QWORD *)v106 = 0;
            if (v56)
            {
              if (*(_DWORD *)(v56 + 24) == 2)
              {
                if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v56, v39);
              }
              else
              {
                *(_DWORD *)(v56 + 24) -= 2;
              }
            }
            if (v54)
            {
              v57 = WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)&v110, a1, a2);
              v58 = v57;
              v59 = HIDWORD(v57);
              if (v57 < HIDWORD(v57))
              {
                v60 = *(_DWORD *)(WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v102, (uint64_t)v37)+ 28);
                v61 = *(_DWORD *)(a4 + 12);
                if (v61
                  && (v62 = *(_QWORD *)a4,
                      v63 = *(unsigned int *)(a4 + 12),
                      v64 = *(_QWORD *)a4,
                      *(_DWORD *)(*(_QWORD *)a4 + 40 * v61 - 8) > v60))
                {
                  do
                  {
                    v65 = v63 >> 1;
                    v66 = v64 + 40 * (v63 >> 1);
                    v67 = *(_DWORD *)(v66 + 32);
                    v68 = v66 + 40;
                    v63 += ~(v63 >> 1);
                    if (v67 < v60)
                      v63 = v65;
                    else
                      v64 = v68;
                  }
                  while (v63);
                  if (v64 == v62 + 40 * v61)
                    v69 = 0;
                  else
                    v69 = -1 - 858993459 * ((v64 - v62) >> 3);
                  *(_DWORD *)v106 = 0;
                  *(_DWORD *)&v106[4] = v58;
                  *(_DWORD *)&v106[8] = v59;
                  v106[12] = 7;
                  *(_QWORD *)&v106[16] = 0;
                  v70 = *v37;
                  if (*v37)
                    *(_DWORD *)v70 += 2;
                  v107 = v70;
                  v108 = v60;
                  WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(a4, (WTF::StringImpl *)v69, (unint64_t)v106);
                }
                else
                {
                  *(_DWORD *)v106 = 0;
                  *(_DWORD *)&v106[4] = v58;
                  *(_DWORD *)&v106[8] = v59;
                  v106[12] = 7;
                  *(_QWORD *)&v106[16] = 0;
                  v72 = *v37;
                  if (*v37)
                    *(_DWORD *)v72 += 2;
                  v107 = v72;
                  v108 = v60;
                  if (v61 == *(_DWORD *)(a4 + 8))
                  {
                    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>(a4, (unint64_t)v106);
                  }
                  else
                  {
                    v98 = v61 + 1;
                    v99 = *(_QWORD *)a4 + 40 * v61;
                    *(_DWORD *)v99 = 0;
                    v100 = *(_OWORD *)&v106[4];
                    *(_DWORD *)(v99 + 20) = *(_DWORD *)&v106[20];
                    *(_OWORD *)(v99 + 4) = v100;
                    v101 = v107;
                    v107 = 0;
                    *(_QWORD *)(v99 + 24) = v101;
                    *(_DWORD *)(v99 + 32) = v108;
                    *(_DWORD *)(a4 + 12) = v98;
                  }
                }
                v73 = v107;
                v107 = 0;
                if (v73)
                {
                  if (*(_DWORD *)v73 == 2)
                    WTF::StringImpl::destroy(v73, v39);
                  else
                    *(_DWORD *)v73 -= 2;
                }
              }
            }
LABEL_112:
            ++v43;
          }
          while (v43 != v44);
LABEL_53:
          std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v109, v39);
          if (++v37 == v104)
          {
            v7 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8);
            v9 = *(_QWORD *)(v7[85] + 688);
            break;
          }
        }
      }
    }
  }
  if ((v9 & 0x100000000000000) != 0)
  {
    v14 = v7[309];
    if (v14)
    {
      v74 = (const WebCore::TextBoxSelectableRange *)WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin((_QWORD **)(v14 + 8));
      v75 = v74;
      v76 = a2;
      v77 = *(_QWORD *)(v14 + 8);
      v78 = v77 ? v77 + 16 * *(unsigned int *)(v77 - 4) : 0;
      if ((const WebCore::TextBoxSelectableRange *)v78 != v74)
      {
        v105 = v78;
        do
        {
          v79 = *((_QWORD *)v75 + 1);
          v80 = *(unsigned int *)(v79 + 20);
          if ((_DWORD)v80)
          {
            v81 = *(const WebCore::HighlightRange ***)(v79 + 8);
            v82 = 8 * v80;
            do
            {
              if (WebCore::RenderHighlight::setRenderRange(&v110, *v81))
              {
                v83 = WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)&v110, a1, a2);
                if (v83 < HIDWORD(v83))
                {
                  *(_DWORD *)v106 = 0;
                  *(_QWORD *)&v106[4] = v83;
                  v106[12] = 8;
                  *(_QWORD *)&v106[16] = 0;
                  v107 = 0;
                  v108 = 0;
                  v84 = *(unsigned int *)(a4 + 12);
                  if ((_DWORD)v84 == *(_DWORD *)(a4 + 8))
                  {
                    v85 = (_BYTE *)WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v84 + 1, (unint64_t)v106);
                    LODWORD(v84) = *(_DWORD *)(a4 + 12);
                    v86 = *(_QWORD *)a4 + 40 * v84;
                    *(_DWORD *)v86 = 0;
                    v87 = *((_DWORD *)v85 + 5);
                    *(_OWORD *)(v86 + 4) = *(_OWORD *)(v85 + 4);
                    *(_DWORD *)(v86 + 20) = v87;
                    v88 = *((_QWORD *)v85 + 3);
                    *((_QWORD *)v85 + 3) = 0;
                    *(_QWORD *)(v86 + 24) = v88;
                    v89 = (_DWORD *)(v86 + 32);
                  }
                  else
                  {
                    v92 = *(_QWORD *)a4 + 40 * v84;
                    *(_DWORD *)v92 = 0;
                    v93 = *(_OWORD *)&v106[4];
                    *(_DWORD *)(v92 + 20) = *(_DWORD *)&v106[20];
                    *(_OWORD *)(v92 + 4) = v93;
                    v94 = v107;
                    v107 = 0;
                    *(_QWORD *)(v92 + 24) = v94;
                    v89 = (_DWORD *)(v92 + 32);
                    v85 = v106;
                  }
                  *v89 = *((_DWORD *)v85 + 8);
                  *(_DWORD *)(a4 + 12) = v84 + 1;
                  v90 = v107;
                  v107 = 0;
                  if (v90)
                  {
                    if (*(_DWORD *)v90 == 2)
                      WTF::StringImpl::destroy(v90, a2);
                    else
                      *(_DWORD *)v90 -= 2;
                  }
                }
              }
              ++v81;
              v82 -= 8;
            }
            while (v82);
          }
          v75 = (const WebCore::TextBoxSelectableRange *)((char *)v75 + 16);
          if (v75 == v76)
          {
            v75 = v76;
            v91 = (const WebCore::TextBoxSelectableRange *)v105;
          }
          else
          {
            v91 = (const WebCore::TextBoxSelectableRange *)v105;
            while ((unint64_t)(*(_QWORD *)v75 + 1) <= 1)
            {
              v75 = (const WebCore::TextBoxSelectableRange *)((char *)v75 + 16);
              if (v75 == v76)
              {
                v75 = v76;
                break;
              }
            }
          }
        }
        while (v75 != v91);
      }
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 2480);
  if (v15 && *(_BYTE *)(v15 + 32))
  {
    v18 = (const WebCore::TextBoxSelectableRange *)WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin((_QWORD **)(v15 + 8));
    v19 = v18;
    v20 = a2;
    v21 = *(_QWORD *)(v15 + 8);
    v22 = v21 ? v21 + 16 * *(unsigned int *)(v21 - 4) : 0;
    if ((const WebCore::TextBoxSelectableRange *)v22 != v18)
    {
      v103 = v22;
      do
      {
        v23 = *((_QWORD *)v19 + 1);
        v24 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v24)
        {
          v25 = *(const WebCore::HighlightRange ***)(v23 + 8);
          v26 = 8 * v24;
          do
          {
            if (WebCore::RenderHighlight::setRenderRange(&v110, *v25))
            {
              v27 = WebCore::RenderHighlight::rangeForTextBox((WebCore::RenderHighlight *)&v110, a1, a2);
              if (v27 < HIDWORD(v27))
              {
                *(_DWORD *)v106 = 0;
                *(_QWORD *)&v106[4] = v27;
                v106[12] = 9;
                *(_QWORD *)&v106[16] = 0;
                v107 = 0;
                v108 = 0;
                v28 = *(unsigned int *)(a4 + 12);
                if ((_DWORD)v28 == *(_DWORD *)(a4 + 8))
                {
                  v29 = (_BYTE *)WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v28 + 1, (unint64_t)v106);
                  LODWORD(v28) = *(_DWORD *)(a4 + 12);
                  v30 = *(_QWORD *)a4 + 40 * v28;
                  *(_DWORD *)v30 = 0;
                  v31 = *((_DWORD *)v29 + 5);
                  *(_OWORD *)(v30 + 4) = *(_OWORD *)(v29 + 4);
                  *(_DWORD *)(v30 + 20) = v31;
                  v32 = *((_QWORD *)v29 + 3);
                  *((_QWORD *)v29 + 3) = 0;
                  *(_QWORD *)(v30 + 24) = v32;
                  v33 = (_DWORD *)(v30 + 32);
                }
                else
                {
                  v95 = *(_QWORD *)a4 + 40 * v28;
                  *(_DWORD *)v95 = 0;
                  v96 = *(_OWORD *)&v106[4];
                  *(_DWORD *)(v95 + 20) = *(_DWORD *)&v106[20];
                  *(_OWORD *)(v95 + 4) = v96;
                  v97 = v107;
                  v107 = 0;
                  *(_QWORD *)(v95 + 24) = v97;
                  v33 = (_DWORD *)(v95 + 32);
                  v29 = v106;
                }
                *v33 = *((_DWORD *)v29 + 8);
                *(_DWORD *)(a4 + 12) = v28 + 1;
                v34 = v107;
                v107 = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                    WTF::StringImpl::destroy(v34, a2);
                  else
                    *(_DWORD *)v34 -= 2;
                }
              }
            }
            ++v25;
            v26 -= 8;
          }
          while (v26);
        }
        v19 = (const WebCore::TextBoxSelectableRange *)((char *)v19 + 16);
        if (v19 == v20)
        {
          v19 = v20;
          v35 = (const WebCore::TextBoxSelectableRange *)v103;
        }
        else
        {
          v35 = (const WebCore::TextBoxSelectableRange *)v103;
          while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
          {
            v19 = (const WebCore::TextBoxSelectableRange *)((char *)v19 + 16);
            if (v19 == v20)
            {
              v19 = v20;
              break;
            }
          }
        }
      }
      while (v19 != v35);
    }
  }
  v16 = v111;
  v111 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, a2);
    else
      --*(_DWORD *)v16;
  }
  result = v110;
  v110 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

__n128 WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert(uint64_t a1, WTF::StringImpl *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v3 = a3;
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 8))
  {
    v3 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
  }
  v7 = *(_QWORD *)a1;
  v8 = (_DWORD *)(*(_QWORD *)a1 + 40 * (_QWORD)a2);
  if ((WTF::StringImpl *)v6 != a2)
  {
    v12 = 0;
    v13 = 5 * v6;
    v14 = v7 + 8 * v13;
    v15 = 40 * (_QWORD)a2 - 8 * v13;
    do
    {
      v16 = v7 + 40 * ((v14 - (uint64_t)v8) / 40) + 40 * (_QWORD)a2 + v12;
      *(_DWORD *)v16 = 0;
      v17 = v14 + v12;
      v18 = *(_OWORD *)(v14 + v12 - 36);
      *(_DWORD *)(v16 + 20) = *(_DWORD *)(v14 + v12 - 20);
      *(_OWORD *)(v16 + 4) = v18;
      v19 = *(_QWORD *)(v14 + v12 - 16);
      *(_QWORD *)(v17 - 16) = 0;
      *(_QWORD *)(v16 + 24) = v19;
      *(_DWORD *)(v16 + 32) = *(_DWORD *)(v14 + v12 - 8);
      v20 = *(WTF::StringImpl **)(v14 + v12 - 16);
      *(_QWORD *)(v17 - 16) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      v12 -= 40;
    }
    while (v15 != v12);
  }
  *v8 = 0;
  v9 = v7 + 40 * (_QWORD)a2;
  result = *(__n128 *)(v3 + 4);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v3 + 20);
  *(__n128 *)(v9 + 4) = result;
  v11 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v9 + 24) = v11;
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

_QWORD *WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[2 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[2 * v2];
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 2;
      v4 -= 16;
      if (!v4)
        return v3;
    }
  }
  return result;
}

void WebCore::MarkedText::collectForDocumentMarkers(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  void *v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int *v35;
  int *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  uint64_t v39;
  __int128 v40;
  WTF::StringImpl *v41;
  WebCore::Editor *v42;
  WebCore::Editor *v43;
  WebCore::Editor *v44;
  _DWORD *v45;
  WebCore::Editor *v46;
  WebCore::Editor *v47;
  WebCore::Editor *v48;
  _DWORD *v49;
  WTF *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF *v54;
  WTF *v55;
  WebCore::Document *v56;
  WebCore::Document *v57;
  int v58;
  _BYTE v59[20];
  WTF::StringImpl *v60;
  int v61;
  WTF *v62;
  int v63;
  unsigned int v64;

  if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    goto LABEL_11;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (!v7)
    goto LABEL_11;
  if ((*(_WORD *)(v7 + 28) & 2) == 0)
  {
    __break(0xC471u);
    goto LABEL_128;
  }
  v8 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1496);
  if (!v8)
  {
LABEL_11:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return;
  }
  ++*v8;
  WebCore::DocumentMarkerController::markersFor((uint64_t)v8, v7, 229375, (uint64_t)&v62);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (!v64)
    goto LABEL_6;
  if (v64 >= 0x6666667)
    goto LABEL_127;
  v12 = 40 * v64;
  v13 = WTF::fastMalloc((WTF *)(40 * v64));
  *(_DWORD *)(a4 + 8) = (v12 & 0xFFFFFFF8) / 0x28;
  *(_QWORD *)a4 = v13;
  v11 = v62;
  if (!v64)
    goto LABEL_7;
  v14 = 8 * v64;
  do
  {
    v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 8);
    if (v15 > 511)
    {
      if (v15 > 2047)
      {
        if (v15 != 2048 && v15 != 0x10000)
          goto LABEL_91;
      }
      else if (v15 != 512)
      {
        if (v15 != 1024)
          goto LABEL_91;
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 528)
                                                + 8)
                                    + 296)
                        + 3056);
        if (v16)
        {
          if (a3)
            goto LABEL_91;
        }
        else
        {
          v56 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                  + 8)
                                                                                      + 40)
                                                                          + 8)
                                                              + 528)
                                                  + 8)
                                      + 296);
          v42 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          v43 = WebCore::Editor::Editor(v42, v56);
          v44 = (WebCore::Editor *)*((_QWORD *)v56 + 382);
          *((_QWORD *)v56 + 382) = v43;
          v54 = v44;
          if (v44)
          {
            WebCore::Editor::~Editor(v44, v10);
            if (*v45)
            {
              *((_QWORD *)v54 + 62) = 0;
              *((_OWORD *)v54 + 29) = 0u;
              *((_OWORD *)v54 + 30) = 0u;
              *((_OWORD *)v54 + 27) = 0u;
              *((_OWORD *)v54 + 28) = 0u;
              *((_OWORD *)v54 + 25) = 0u;
              *((_OWORD *)v54 + 26) = 0u;
              *((_OWORD *)v54 + 23) = 0u;
              *((_OWORD *)v54 + 24) = 0u;
              *((_OWORD *)v54 + 21) = 0u;
              *((_OWORD *)v54 + 22) = 0u;
              *((_OWORD *)v54 + 19) = 0u;
              *((_OWORD *)v54 + 20) = 0u;
              *((_OWORD *)v54 + 17) = 0u;
              *((_OWORD *)v54 + 18) = 0u;
              *((_OWORD *)v54 + 15) = 0u;
              *((_OWORD *)v54 + 16) = 0u;
              *((_OWORD *)v54 + 13) = 0u;
              *((_OWORD *)v54 + 14) = 0u;
              *((_OWORD *)v54 + 11) = 0u;
              *((_OWORD *)v54 + 12) = 0u;
              *((_OWORD *)v54 + 9) = 0u;
              *((_OWORD *)v54 + 10) = 0u;
              *((_OWORD *)v54 + 7) = 0u;
              *((_OWORD *)v54 + 8) = 0u;
              *((_OWORD *)v54 + 5) = 0u;
              *((_OWORD *)v54 + 6) = 0u;
              *((_OWORD *)v54 + 3) = 0u;
              *((_OWORD *)v54 + 4) = 0u;
              *((_OWORD *)v54 + 1) = 0u;
              *((_OWORD *)v54 + 2) = 0u;
              *(_OWORD *)v54 = 0u;
            }
            else
            {
              WTF::fastFree(v54, v10);
            }
          }
          v16 = *((_QWORD *)v56 + 382);
          if (a3)
            goto LABEL_91;
        }
        goto LABEL_42;
      }
LABEL_37:
      if (a3 != 2)
        goto LABEL_91;
      goto LABEL_43;
    }
    if (v15 > 7)
    {
      if (v15 != 8 && v15 != 16)
        goto LABEL_91;
      goto LABEL_37;
    }
    if ((v15 - 1) >= 2)
    {
      if (v15 != 4)
        goto LABEL_91;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 296)
                      + 3056);
      if (!v16)
      {
        v57 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 528)
                                                + 8)
                                    + 296);
        v46 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        v47 = WebCore::Editor::Editor(v46, v57);
        v48 = (WebCore::Editor *)*((_QWORD *)v57 + 382);
        *((_QWORD *)v57 + 382) = v47;
        v55 = v48;
        if (v48)
        {
          WebCore::Editor::~Editor(v48, v10);
          if (*v49)
          {
            *((_QWORD *)v55 + 62) = 0;
            *((_OWORD *)v55 + 29) = 0u;
            *((_OWORD *)v55 + 30) = 0u;
            *((_OWORD *)v55 + 27) = 0u;
            *((_OWORD *)v55 + 28) = 0u;
            *((_OWORD *)v55 + 25) = 0u;
            *((_OWORD *)v55 + 26) = 0u;
            *((_OWORD *)v55 + 23) = 0u;
            *((_OWORD *)v55 + 24) = 0u;
            *((_OWORD *)v55 + 21) = 0u;
            *((_OWORD *)v55 + 22) = 0u;
            *((_OWORD *)v55 + 19) = 0u;
            *((_OWORD *)v55 + 20) = 0u;
            *((_OWORD *)v55 + 17) = 0u;
            *((_OWORD *)v55 + 18) = 0u;
            *((_OWORD *)v55 + 15) = 0u;
            *((_OWORD *)v55 + 16) = 0u;
            *((_OWORD *)v55 + 13) = 0u;
            *((_OWORD *)v55 + 14) = 0u;
            *((_OWORD *)v55 + 11) = 0u;
            *((_OWORD *)v55 + 12) = 0u;
            *((_OWORD *)v55 + 9) = 0u;
            *((_OWORD *)v55 + 10) = 0u;
            *((_OWORD *)v55 + 7) = 0u;
            *((_OWORD *)v55 + 8) = 0u;
            *((_OWORD *)v55 + 5) = 0u;
            *((_OWORD *)v55 + 6) = 0u;
            *((_OWORD *)v55 + 3) = 0u;
            *((_OWORD *)v55 + 4) = 0u;
            *((_OWORD *)v55 + 1) = 0u;
            *((_OWORD *)v55 + 2) = 0u;
            *(_OWORD *)v55 = 0u;
          }
          else
          {
            WTF::fastFree(v55, v10);
          }
        }
        v16 = *((_QWORD *)v57 + 382);
      }
      if (a3 == 2)
        goto LABEL_91;
LABEL_42:
      if (!*(_BYTE *)(v16 + 304))
        goto LABEL_91;
      goto LABEL_43;
    }
    if (a3 != 2
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 680) & 0x4000) == 0)
    {
      goto LABEL_91;
    }
LABEL_43:
    if (*(_QWORD *)v11)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      v19 = *(_DWORD *)(v18 + 16);
      v20 = *(_DWORD *)a2;
      if (v19 <= *(_DWORD *)a2)
        goto LABEL_91;
      v21 = *(_DWORD *)(v18 + 12);
      v22 = *(_DWORD *)(a2 + 4);
      v23 = v22 + v20;
      if (v21 >= v22 + v20)
        break;
      v24 = *(_DWORD *)(v18 + 8);
      if (v24 <= 511)
      {
        if (v24 > 0x10 || ((1 << v24) & 0x10016) == 0)
          goto LABEL_91;
LABEL_51:
        if (v23 >= v20)
        {
          v26 = v21 >= v20;
          v27 = v21 - v20;
          if (!v26)
            v27 = 0;
          if (*(_BYTE *)(a2 + 20))
          {
            v38 = *(_DWORD *)(a2 + 16);
            if (v38)
            {
              if (v38 < v27)
                v27 = *(_DWORD *)(a2 + 16);
              if (v23 < v19)
                v19 = v22 + v20;
              v28 = v19 - v20;
              goto LABEL_100;
            }
          }
          if (v27 == v22)
            v27 = *(_DWORD *)(a2 + 8) + v22;
          if (v23 < v19)
            v19 = v22 + v20;
          v28 = v19 - v20;
          if (*(_BYTE *)(a2 + 20) && (v38 = *(_DWORD *)(a2 + 16)) != 0)
          {
LABEL_100:
            if (v38 < v28)
              v28 = v38;
          }
          else if (v28 == v22)
          {
            v28 = *(_DWORD *)(a2 + 8) + v22;
          }
          if (v24 <= 15)
          {
            switch(v24)
            {
              case 1:
                v29 = 4;
                break;
              case 2:
                v29 = 1;
                break;
              case 4:
                v29 = 5;
                break;
              default:
                goto LABEL_82;
            }
          }
          else
          {
            if (v24 > 2047)
            {
              if (v24 == 2048)
                v29 = 10;
              else
                v29 = 3;
              goto LABEL_86;
            }
            if (v24 == 16)
            {
              v29 = 2;
            }
            else
            {
              if (v24 == 512)
              {
                v29 = 6;
                goto LABEL_86;
              }
LABEL_82:
              v29 = 0;
            }
          }
LABEL_86:
          v58 = 0;
          *(_DWORD *)v59 = v27;
          *(_DWORD *)&v59[4] = v28;
          v59[8] = v29;
          *(_QWORD *)&v59[12] = v18;
          v60 = 0;
          v61 = 0;
          v30 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v30 == *(_DWORD *)(a4 + 8))
          {
            v31 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v30 + 1, (unint64_t)&v58);
            LODWORD(v30) = *(_DWORD *)(a4 + 12);
            v32 = *(_QWORD *)a4 + 40 * v30;
            *(_DWORD *)v32 = 0;
            v33 = *(_DWORD *)(v31 + 20);
            *(_OWORD *)(v32 + 4) = *(_OWORD *)(v31 + 4);
            *(_DWORD *)(v32 + 20) = v33;
            v34 = *(_QWORD *)(v31 + 24);
            *(_QWORD *)(v31 + 24) = 0;
            *(_QWORD *)(v32 + 24) = v34;
            v35 = (int *)(v32 + 32);
            v36 = (int *)(v31 + 32);
          }
          else
          {
            v39 = *(_QWORD *)a4 + 40 * v30;
            *(_DWORD *)v39 = 0;
            v40 = *(_OWORD *)v59;
            *(_DWORD *)(v39 + 20) = *(_DWORD *)&v59[16];
            *(_OWORD *)(v39 + 4) = v40;
            v41 = v60;
            v60 = 0;
            *(_QWORD *)(v39 + 24) = v41;
            v35 = (int *)(v39 + 32);
            v36 = &v61;
          }
          *v35 = *v36;
          *(_DWORD *)(a4 + 12) = v30 + 1;
          v37 = v60;
          v60 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v37 -= 2;
          }
          goto LABEL_91;
        }
        __break(1u);
LABEL_126:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_127:
        __break(0xC471u);
LABEL_128:
        JUMPOUT(0x196361A30);
      }
      if (v24 == 512 || v24 == 2048)
        goto LABEL_51;
      if (v24 == 0x10000)
      {
        if (*(_DWORD *)(v18 + 96) != 5)
          goto LABEL_126;
        if (!*(_BYTE *)(v18 + 80))
          goto LABEL_51;
      }
    }
    else if (MEMORY[0x10] > *(_DWORD *)a2)
    {
      break;
    }
LABEL_91:
    v11 = (WTF *)((char *)v11 + 8);
    v14 -= 8;
  }
  while (v14);
  v11 = v62;
  if (v64)
  {
    v50 = (WTF *)((char *)v62 + 8 * v64);
    do
    {
      v51 = *(unsigned int **)v11;
      *(_QWORD *)v11 = 0;
      if (v51)
      {
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v51);
          WTF::fastFree((WTF *)v51, v10);
        }
      }
      v11 = (WTF *)((char *)v11 + 8);
    }
    while (v11 != v50);
LABEL_6:
    v11 = v62;
  }
LABEL_7:
  if (v11)
  {
    v62 = 0;
    v63 = 0;
    WTF::fastFree(v11, v10);
  }
  if (!*v8)
  {
    __break(0xC471u);
    JUMPOUT(0x196361A50);
  }
  --*v8;
}

uint64_t WebCore::MarkedText::collectForDraggedAndTransparentContent@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  void *v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  WTF *v28;
  int v29;
  unsigned int v30;

  if ((_DWORD)result == 0x20000)
    v5 = 13;
  else
    v5 = 0;
  if ((_DWORD)result == 0x4000)
    v6 = 12;
  else
    v6 = v5;
  if (!v6)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
  result = WebCore::RenderText::contentRangesBetweenOffsetsForType(a2, result, *a3, a3[1] + *a3, (uint64_t)&v28);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (!v30)
    goto LABEL_9;
  v27 = v6;
  if (v30 < 0x6666667)
  {
    v9 = 40 * v30;
    result = WTF::fastMalloc((WTF *)(40 * v30));
    *(_DWORD *)(a4 + 8) = (v9 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)a4 = result;
    v10 = v27;
    if (!v30)
    {
LABEL_9:
      result = (uint64_t)v28;
      if (v28)
      {
        v28 = 0;
        v29 = 0;
        return WTF::fastFree((WTF *)result, v8);
      }
      return result;
    }
    v11 = 0;
    v12 = result + 8;
    v13 = 4;
    while (1)
    {
      v15 = *a3;
      v14 = a3[1];
      v16 = v14 + *a3;
      if (__CFADD__(v14, *a3))
        goto LABEL_51;
      v17 = *(_DWORD *)((char *)v28 + v13 - 4);
      v18 = *(_DWORD *)((char *)v28 + v13);
      if (v16 >= v17)
        v19 = *(_DWORD *)((char *)v28 + v13 - 4);
      else
        v19 = v14 + *a3;
      v20 = v19 - v15;
      if (v15 <= v17)
        v21 = v20;
      else
        v21 = 0;
      result = *((unsigned __int8 *)a3 + 20);
      if (*((_BYTE *)a3 + 20) && (v24 = a3[4]) != 0)
      {
        if (v24 < v21)
          v21 = a3[4];
        if (v16 >= v18)
          v25 = *(_DWORD *)((char *)v28 + v13);
        else
          v25 = v14 + *a3;
        v26 = v25 - v15;
        if (v15 <= v18)
          v23 = v26;
        else
          v23 = 0;
      }
      else
      {
        if (v21 == v14)
          v21 = a3[2] + v14;
        if (v16 >= v18)
          v16 = *(_DWORD *)((char *)v28 + v13);
        v22 = v16 - v15;
        if (v15 <= v18)
          v23 = v22;
        else
          v23 = 0;
        if (!*((_BYTE *)a3 + 20) || (v24 = a3[4]) == 0)
        {
          if (v23 == v14)
            v23 = a3[2] + v14;
          goto LABEL_34;
        }
      }
      if (v24 < v23)
        v23 = v24;
      v10 = v27;
LABEL_34:
      *(_DWORD *)(v12 - 8) = 0;
      *(_DWORD *)(v12 - 4) = v21;
      *(_DWORD *)v12 = v23;
      *(_BYTE *)(v12 + 4) = v10;
      ++v11;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      *(_DWORD *)(a4 + 12) = v11;
      v12 += 40;
      v13 += 8;
      if (v11 >= v30)
        goto LABEL_9;
    }
  }
  __break(0xC471u);
LABEL_51:
  __break(1u);
  return result;
}

void WebCore::containingBlockRectForRenderer(float32x4_t *a1, const WebCore::FloatRect *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  const WebCore::RenderLayerModelObject *v10;
  __int32 v11;
  float v12;
  float v13;
  float v14;
  float v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  int v23;
  double v24;
  int v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  _DWORD v29[4];
  int32x4_t v30[3];

  v30[0].i32[0] = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 752))(a3, *(unsigned __int8 *)(a4 + 16));
  *(uint64_t *)((char *)v30[0].i64 + 4) = __PAIR64__(v9, v8);
  v30[0].i32[3] = v11;
  if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
  {
    WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)v30, a2, v10);
    if (*(_DWORD *)(a4 + 12) == 2)
    {
      v16 = v12 * 64.0;
      if (v16 > -2147483650.0)
        v17 = (int)v16;
      else
        v17 = 0x80000000;
      if (v16 < 2147483650.0)
        v18 = v17;
      else
        v18 = 0x7FFFFFFF;
      v19 = v13 * 64.0;
      if (v19 > -2147483650.0)
        v20 = (int)v19;
      else
        v20 = 0x80000000;
      if (v19 >= 2147483650.0)
        v20 = 0x7FFFFFFF;
      v29[0] = v18;
      v29[1] = v20;
      v21 = v14 * 64.0;
      if (v21 > -2147483650.0)
        v22 = (int)v21;
      else
        v22 = 0x80000000;
      if (v21 < 2147483650.0)
        v23 = v22;
      else
        v23 = 0x7FFFFFFF;
      v24 = v15 * 64.0;
      if (v24 > -2147483650.0)
        v25 = (int)v24;
      else
        v25 = 0x80000000;
      if (v24 >= 2147483650.0)
        v25 = 0x7FFFFFFF;
      v29[2] = v23;
      v29[3] = v25;
      WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(a3 + 80), (const WebCore::LayoutRect *)v29, (const WebCore::LayoutSize *)1, 1, (uint64_t)v30);
      v26 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      v27 = vmulq_f32(vcvtq_f32_s32(v30[1]), v26);
      *a1 = vmulq_f32(vcvtq_f32_s32(v30[0]), v26);
      a1[1] = v27;
      v28 = vmulq_f32(vcvtq_f32_s32(v30[2]), v26);
    }
    else
    {
      a1->f32[0] = v12;
      a1->f32[1] = v13;
      a1->f32[2] = v14;
      a1->f32[3] = v15;
      v28 = 0uLL;
      a1[1] = 0u;
    }
    a1[2] = v28;
  }
  else
  {
    __break(0xC471u);
  }
}

float WebCore::offsetFromContainer(WebCore *this, const WebCore::RenderObject *a2, WebCore::RenderBlock *a3, const WebCore::FloatRect *a4)
{
  uint64_t v5;

  v5 = 0;
  return (float)((float)(*(int (**)(WebCore *, const WebCore::RenderObject *, uint64_t *, _QWORD))(*(_QWORD *)this + 360))(this, a2, &v5, 0)* 0.015625)- *(float *)a3;
}

WebCore::Length *WebCore::LengthPoint::LengthPoint(WebCore::Length *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;

  *(_DWORD *)this = 0;
  *(_WORD *)((char *)this + 5) = 0;
  v4 = *(unsigned __int8 *)(a2 + 4);
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
  if (v4 <= 0xD)
  {
    v5 = 1 << v4;
    if ((v5 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
      *(_DWORD *)this = *(_DWORD *)a2;
    }
    else if ((v5 & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
    }
    else
    {
      *(_DWORD *)this = *(_DWORD *)a2;
      WebCore::Length::ref((int *)this);
    }
  }
  *((_DWORD *)this + 2) = 0;
  v6 = (int *)((char *)this + 8);
  *(_WORD *)((char *)this + 13) = 0;
  v7 = *(unsigned __int8 *)(a2 + 12);
  *((_BYTE *)this + 12) = v7;
  *((_BYTE *)this + 13) = *(_BYTE *)(a2 + 13);
  if (v7 <= 0xD)
  {
    v8 = 1 << v7;
    if ((v8 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 14) = *(_BYTE *)(a2 + 14);
      *v6 = *(_DWORD *)(a2 + 8);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v6 = 0;
    }
    else
    {
      *v6 = *(_DWORD *)(a2 + 8);
      WebCore::Length::ref(v6);
    }
  }
  return this;
}

float WebCore::MotionPath::motionPathDataForRenderer(WebCore::RenderElement const&)::$_0::operator()(uint64_t a1, uint64_t a2, _BYTE *a3, float32x2_t *a4, uint64_t a5)
{
  float result;
  float32x2_t v6;

  if (a3[4])
  {
    if (a3[4] == 1)
    {
      result = 0.0;
      if (a1)
      {
        if ((*(_DWORD *)(a1 + 12) | 2) == 3)
          LODWORD(result) = vadd_f32(*a4, vmul_f32(a4[1], (float32x2_t)0x3F0000003F000000)).u32[0];
      }
    }
    else
    {
      v6 = a4[1];
      return WebCore::floatPointForLengthPoint(a3, (float *)&v6);
    }
  }
  else
  {
    v6 = 0;
    return (float)((float)(*(int (**)(uint64_t, uint64_t, float32x2_t *, _QWORD))(*(_QWORD *)a2 + 360))(a2, a5, &v6, 0)* 0.015625)- a4->f32[0];
  }
  return result;
}

void WebCore::MotionPath::applyMotionPathTransform(float64x2_t *a1, uint64_t a2, float *a3, uint64_t a4, _BYTE *a5, WebCore::Length *a6, uint64_t a7, int a8)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  float v38;
  _BOOL4 v39;
  _BOOL4 v40;
  float v41;
  float v42;
  float v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float v50;
  long double v51;
  long double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double sinval;
  double cosval;
  __double2 v61;
  const double *v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  float v75;
  double v76;
  double v77;
  double v78;
  float v79;
  float v80;
  float v81;
  _BYTE v82[8];
  float v83;
  float v84;
  float v85;
  _QWORD v86[8];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[6];
  int v95;
  int v96;
  char v97;
  uint64_t v98;
  float64x2x4_t v99;
  float64x2x4_t v100;
  float64x2x4_t v101;
  float64x2x4_t v102;

  v98 = *MEMORY[0x1E0C80C00];
  if (a5[4])
  {
    v86[0] = *(_QWORD *)(a2 + 8);
    v15 = WebCore::floatPointForLengthPoint(a5, (float *)v86) + *(float *)a2;
    v17 = v16 + *(float *)(a2 + 4);
  }
  else
  {
    v15 = *a3;
    v17 = a3[1];
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 48))(&v93, a4, a2);
  if (!v97)
    return;
  WebCore::Path::length((WebCore::Path *)&v93);
  v19 = v18;
  v20 = v18;
  switch(*((_BYTE *)a6 + 4))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v21 = *(float *)a6;
      if (!*((_BYTE *)a6 + 6))
        v21 = (float)*(int *)a6;
      v20 = (float)(v19 * v21) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)a6 + 6))
        v20 = *(float *)a6;
      else
        v20 = (float)*(int *)a6;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(a6, v18);
      v20 = v75;
      break;
    default:
      v20 = 0.0;
      break;
  }
  v80 = v15;
  if (v96 == 2)
  {
    if (!v94[0] || !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v94[0] + 208))(v94[0]))
      goto LABEL_22;
LABEL_19:
    if (v19 == 0.0)
    {
      v22 = 0.0;
    }
    else
    {
      v22 = fmodf(v20, v19);
      if (v22 < 0.0)
        v22 = v19 + v22;
    }
    goto LABEL_26;
  }
  if (v96 == 1 && (v95 == 6 || v95 == 15))
    goto LABEL_19;
LABEL_22:
  v22 = 0.0;
  if (v20 > 0.0)
    v22 = v20;
  if (v20 >= v19)
    v22 = v19;
LABEL_26:
  WebCore::Path::traversalStateAtLength((WebCore::Path *)&v93, v22, (uint64_t)v82);
  v23 = v83;
  v24 = v84;
  v25 = a1[2].f64[0];
  v26 = a1->f64[0];
  v27 = a1[6].f64[0] + v25 * v84 + v83 * a1->f64[0];
  v28 = a1[2].f64[1];
  v29 = a1->f64[1];
  v30 = a1[6].f64[1] + v28 * v84 + v83 * v29;
  a1[6].f64[0] = v27;
  a1[6].f64[1] = v30;
  v31 = a1[3].f64[1];
  v32 = a1[3].f64[0];
  v34 = a1[1].f64[0];
  v33 = a1[1].f64[1];
  v35 = a1[7].f64[0] + v32 * v24 + v23 * v34;
  v36 = a1[7].f64[1] + v31 * v24 + v23 * v33;
  a1[7].f64[0] = v35;
  a1[7].f64[1] = v36;
  v37 = v80 - *a3;
  v38 = v17 - a3[1];
  v39 = *(_BYTE *)(a2 + 84) != 0;
  v40 = a8 != 4;
  v41 = *(float *)a2;
  v42 = *(float *)(a2 + 4);
  if (!v40 || !v39)
    v41 = -0.0;
  v43 = v80 + v41;
  if (!v40 || !v39)
    v42 = -0.0;
  v44 = (float)-v43;
  v45 = (float)-(float)(v17 + v42);
  v77 = v28;
  v78 = v29;
  v76 = v32;
  v79 = v80 - *a3;
  v81 = v17 - a3[1];
  v46 = v25 * v38 + v37 * v26 + v27 + v25 * v45 + v44 * v26;
  v47 = v28 * v38 + v37 * v29 + v30 + v28 * v45 + v44 * v29;
  a1[6].f64[0] = v46;
  a1[6].f64[1] = v47;
  v48 = v32 * v38 + v37 * v34 + v35 + v32 * v45 + v44 * v34;
  v49 = v31 * v38 + v37 * v33 + v36 + v31 * v45 + v44 * v33;
  a1[7].f64[0] = v48;
  a1[7].f64[1] = v49;
  v50 = v85;
  if (!*(_BYTE *)(a7 + 4))
    v50 = -0.0;
  v51 = (float)(*(float *)a7 + v50);
  v52 = fmod(v51, 360.0);
  v53 = v49;
  v54 = v48;
  v55 = v46;
  v56 = v76;
  v57 = v77;
  v58 = v78;
  if (v52 != 0.0)
  {
    v61 = __sincos_stret(v51 * 0.0174532925);
    cosval = v61.__cosval;
    sinval = v61.__sinval;
    if (v61.__sinval < 2.22044605e-16 && v61.__sinval > -2.22044605e-16)
      sinval = 0.0;
    if (v61.__cosval < 2.22044605e-16 && v61.__cosval > -2.22044605e-16)
      cosval = 0.0;
    *(double *)v86 = cosval;
    *(double *)&v86[1] = sinval;
    v86[2] = 0;
    v86[3] = 0;
    *(double *)&v86[4] = -sinval;
    *(double *)&v86[5] = cosval;
    v86[6] = 0;
    v86[7] = 0;
    v87 = constinit_39;
    v88 = unk_1969F8FA0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0x3FF0000000000000;
    v64 = (const double *)v86;
    v65 = *a1;
    v66 = a1[1];
    v67 = a1[2];
    v68 = a1[3];
    v69 = a1[4];
    v70 = a1[5];
    v71 = a1[6];
    v72 = a1[7];
    v101 = vld4q_dup_f64(v64);
    v64 += 4;
    v99 = vld4q_dup_f64(v64);
    v64 += 4;
    *a1 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v101.val[0], *a1), v101.val[1], v67), v101.val[2], v69), v101.val[3], v71);
    a1[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v101.val[0], v66), v101.val[1], v68), v101.val[2], v70), v101.val[3], v72);
    v102 = vld4q_dup_f64(v64);
    v64 += 4;
    a1[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v99.val[0], v65), v99.val[1], v67), v99.val[2], v69), v99.val[3], v71);
    a1[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v99.val[0], v66), v99.val[1], v68), v99.val[2], v70), v99.val[3], v72);
    v100 = vld4q_dup_f64(v64);
    a1[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v102.val[0], v65), v102.val[1], v67), v102.val[2], v69), v102.val[3], v71);
    a1[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v102.val[0], v66), v102.val[1], v68), v102.val[2], v70), v102.val[3], v72);
    a1[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v100.val[0], v65), v100.val[1], v67), v100.val[2], v69), v100.val[3], v71);
    a1[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v100.val[0], v66), v100.val[1], v68), v100.val[2], v70), v100.val[3], v72);
    v55 = a1[6].f64[0];
    v47 = a1[6].f64[1];
    v58 = a1->f64[1];
    v34 = a1[1].f64[0];
    v57 = a1[2].f64[1];
    v56 = a1[3].f64[0];
    v33 = a1[1].f64[1];
    v31 = a1[3].f64[1];
    v54 = a1[7].f64[0];
    v53 = a1[7].f64[1];
  }
  v73 = (float)-v79;
  v74 = (float)-v81;
  a1[6].f64[0] = v55 + a1[2].f64[0] * v74 + v73 * a1->f64[0];
  a1[6].f64[1] = v47 + v57 * v74 + v73 * v58;
  a1[7].f64[0] = v54 + v56 * v74 + v73 * v34;
  a1[7].f64[1] = v53 + v31 * v74 + v73 * v33;
  if (v97)
  {
    if (v96 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v96])(v86, v94);
  }
}

BOOL WebCore::MotionPath::needsUpdateAfterContainingBlockLayout(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 12) - 1) < 3;
}

void WebCore::MotionPath::computePathForBox(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  double v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD v7[3];
  _BYTE v8[8];
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 80))
  {
    v10 = 0;
    v3 = *(_OWORD *)(a1 + 32);
    v7[0] = *(_OWORD *)(a1 + 16);
    v7[1] = v3;
    v7[2] = *(_OWORD *)(a1 + 48);
    *(float32x2_t *)&v7[0] = vneg_f32(*(float32x2_t *)(a1 + 64));
    v4 = WebCore::Path::addRoundedRect((WebCore::Path *)v8, (WebCore::FloatRect *)v7, 1);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 64) = -1;
    v5 = v10;
    if (v10 == -1)
    {
      *(_BYTE *)(a2 + 72) = 1;
    }
    else
    {
      ((void (*)(_OWORD *, double))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v10])(v7, v4);
      *(_DWORD *)(a2 + 64) = v5;
      v6 = v10;
      *(_BYTE *)(a2 + 72) = 1;
      if ((_DWORD)v6 != -1)
        ((void (*)(_OWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v6])(v7, &v9);
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
}

uint64_t WebCore::MotionPath::computePathForShape@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  float32x2_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  if (a2[10].i8[0])
  {
    v5 = a2[9].f32[0];
    v6 = a2[9].f32[1];
    v7 = a2[3];
    v8 = *(_BYTE **)(a1 + 24);
    v11[0] = vneg_f32(a2[8]);
    v11[1] = v7;
    if (((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8) == 2
       || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8) == 3)
      && v8[12])
    {
      result = (*(uint64_t (**)(_BYTE *, _QWORD *, float, float))(*(_QWORD *)v8 + 80))(v8, v11, v5, v6);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v11);
    }
    *(_DWORD *)(a3 + 64) = 0;
    v10 = *(unsigned int *)(result + 64);
    if ((_DWORD)v10 != -1)
    {
      v12 = a3 + 8;
      result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v10])(&v12);
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)(a3 + 64) = v10;
    goto LABEL_12;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  *(_DWORD *)(a3 + 64) = 0;
  v10 = *(unsigned int *)(result + 64);
  if ((_DWORD)v10 == -1)
    goto LABEL_11;
  v11[0] = a3 + 8;
  result = ((uint64_t (*)(_QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v10])(v11);
LABEL_12:
  *(_BYTE *)(a3 + 72) = 1;
  return result;
}

uint64_t WebCore::OrderIterator::first(WebCore::OrderIterator *this)
{
  uint64_t v1;
  char *v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;

  v1 = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (char *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 5) = v2;
  v3 = 1;
  *((_BYTE *)this + 48) = 1;
  v4 = (char *)this + 24;
  while (1)
  {
    while (v1)
    {
      if (*((_BYTE *)this + 49))
      {
        v5 = *(unsigned __int8 *)(v1 + 44);
        v6 = *(unsigned int *)(v1 + 40);
      }
      else
      {
        v5 = *(unsigned __int8 *)(v1 + 51);
        v6 = *(unsigned int *)(v1 + 47);
      }
      v7 = v6 | (v5 << 32);
      if (v7)
      {
        v1 = *(_QWORD *)(v7 + 8);
        if (v1)
          goto LABEL_9;
      }
LABEL_3:
      v1 = 0;
      *((_QWORD *)this + 1) = 0;
    }
    if (v2 == v4)
      return 0;
    if (!v3)
      break;
    *((_BYTE *)this + 48) = 0;
LABEL_15:
    v8 = *(_QWORD *)this;
    if (*((_BYTE *)this + 49))
    {
      v9 = *(unsigned __int8 *)(v8 + 75);
      v10 = *(unsigned int *)(v8 + 71);
    }
    else
    {
      v9 = *(unsigned __int8 *)(v8 + 68);
      v10 = *(unsigned int *)(v8 + 64);
    }
    v11 = v10 | (v9 << 32);
    if (!v11 || (v1 = *(_QWORD *)(v11 + 8)) == 0)
    {
      v3 = 0;
      goto LABEL_3;
    }
    v3 = 0;
LABEL_9:
    if ((*(_BYTE *)(v1 + 45) & 4) == 0)
      goto LABEL_3;
    *((_QWORD *)this + 1) = v1;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 32) + 144) == *((_DWORD *)v2 + 7))
      return v1;
  }
  v12 = (char *)*((_QWORD *)v2 + 1);
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = *(char **)v12;
    }
    while (v12);
  }
  else
  {
    do
    {
      v13 = (char *)*((_QWORD *)v2 + 2);
      v14 = *(_QWORD *)v13 == (_QWORD)v2;
      v2 = v13;
    }
    while (!v14);
  }
  *((_QWORD *)this + 5) = v13;
  v2 = v13;
  if (v13 != v4)
    goto LABEL_15;
  return 0;
}

uint64_t WebCore::OrderIterator::reverse@<X0>(int **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  WTF ***v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  BOOL v11;
  WTF *v12;
  WTF **v13;
  WTF **v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  WTF **v20;
  WTF **v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  WTF **v30;
  WTF *v31;
  WTF **v32;
  WTF *v33;
  WTF *v34;
  WTF *i;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  WTF **v42;
  WTF *v43;
  WTF **v44;
  WTF *v46;
  WTF **v47;
  WTF *v48;
  uint64_t v49;

  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = (uint64_t *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = a2 + 24;
  v5 = (WTF ***)(a2 + 16);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = (int *)(this + 3);
  std::set<int,std::less<int>,WTF::FastAllocator<int>>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((_QWORD *)(a2 + 16), this[2], (int *)this + 6);
  *(_QWORD *)(a2 + 40) = this[5];
  *(_WORD *)(a2 + 48) = *((_WORD *)this + 24);
  v48 = 0;
  v49 = 0;
  v47 = &v48;
  if (v6 != this[2])
  {
    do
    {
      v7 = *(int **)v6;
      v8 = *(int **)v6;
      v9 = v6;
      if (*(_QWORD *)v6)
      {
        do
        {
          v10 = v8;
          v8 = (int *)*((_QWORD *)v8 + 1);
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (int *)*((_QWORD *)v9 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v9;
          v9 = v10;
        }
        while (v11);
      }
      v12 = v48;
      v13 = &v48;
      v14 = &v48;
      if (v48)
      {
        v15 = v10[7];
        do
        {
          while (1)
          {
            v14 = (WTF **)v12;
            v16 = *((_DWORD *)v12 + 7);
            if (v15 >= v16)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_15;
          }
          if (v16 >= v15)
            goto LABEL_18;
          v12 = v14[1];
        }
        while (v12);
        v13 = v14 + 1;
      }
LABEL_15:
      v17 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v17 + 28) = v10[7];
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = v14;
      *v13 = (WTF *)v17;
      if (*v47)
      {
        v47 = (WTF **)*v47;
        v18 = (uint64_t)*v13;
      }
      else
      {
        v18 = v17;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t)v48, v18);
      ++v49;
      v7 = *(int **)v6;
LABEL_18:
      if (v7)
      {
        do
        {
          v19 = v7;
          v7 = (int *)*((_QWORD *)v7 + 1);
        }
        while (v7);
      }
      else
      {
        do
        {
          v19 = (int *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (v11);
      }
      v6 = v19;
    }
    while (v19 != this[2]);
  }
  if (v5 != &v47)
  {
    v20 = v47;
    if (*(_QWORD *)(a2 + 32)
      && ((v21 = *v5, *v5 = (WTF **)v4, *(_QWORD *)(*v4 + 16) = 0, *v4 = 0, v4[1] = 0, v21[1])
        ? (v22 = (uint64_t)v21[1])
        : (v22 = (uint64_t)v21),
          v22))
    {
      v23 = *(WTF **)(v22 + 16);
      if (v23)
      {
        v24 = *(WTF **)v23;
        if (*(_QWORD *)v23 == v22)
        {
          *(_QWORD *)v23 = 0;
          while (1)
          {
            v46 = (WTF *)*((_QWORD *)v23 + 1);
            if (!v46)
              break;
            do
            {
              v23 = v46;
              v46 = *(WTF **)v46;
            }
            while (v46);
          }
        }
        else
        {
          for (*((_QWORD *)v23 + 1) = 0; v24; v24 = (WTF *)*((_QWORD *)v23 + 1))
          {
            do
            {
              v23 = v24;
              v24 = *(WTF **)v24;
            }
            while (v24);
          }
        }
      }
      if (v20 == &v48)
      {
        v25 = (WTF *)v22;
        v32 = &v48;
      }
      else
      {
        do
        {
          v25 = v23;
          v26 = *((_DWORD *)v20 + 7);
          *(_DWORD *)(v22 + 28) = v26;
          v27 = (uint64_t *)*v4;
          v28 = v4;
          v29 = v4;
          if (*v4)
          {
            do
            {
              while (1)
              {
                v28 = v27;
                if (v26 >= *((_DWORD *)v27 + 7))
                  break;
                v27 = (uint64_t *)*v27;
                v29 = v28;
                if (!*v28)
                  goto LABEL_43;
              }
              v27 = (uint64_t *)v27[1];
            }
            while (v27);
            v29 = v28 + 1;
          }
LABEL_43:
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v22 + 16) = v28;
          *v29 = v22;
          v30 = (WTF **)**v5;
          if (v30)
          {
            *v5 = v30;
            v22 = *v29;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a2 + 24), v22);
          ++*(_QWORD *)(a2 + 32);
          if (v23)
          {
            v23 = (WTF *)*((_QWORD *)v23 + 2);
            if (v23)
            {
              v33 = *(WTF **)v23;
              if (*(WTF **)v23 == v25)
              {
                *(_QWORD *)v23 = 0;
                while (1)
                {
                  v34 = (WTF *)*((_QWORD *)v23 + 1);
                  if (!v34)
                    break;
                  do
                  {
                    v23 = v34;
                    v34 = *(WTF **)v34;
                  }
                  while (v34);
                }
              }
              else
              {
                for (*((_QWORD *)v23 + 1) = 0; v33; v33 = (WTF *)*((_QWORD *)v23 + 1))
                {
                  do
                  {
                    v23 = v33;
                    v33 = *(WTF **)v33;
                  }
                  while (v33);
                }
              }
            }
          }
          else
          {
            v23 = 0;
          }
          v31 = v20[1];
          if (v31)
          {
            do
            {
              v32 = (WTF **)v31;
              v31 = *(WTF **)v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              v32 = (WTF **)v20[2];
              v11 = *v32 == (WTF *)v20;
              v20 = v32;
            }
            while (!v11);
          }
          if (!v25)
            break;
          v20 = v32;
          v22 = (uint64_t)v25;
        }
        while (v32 != &v48);
      }
      std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)v5, v25);
      if (v23)
      {
        for (i = (WTF *)*((_QWORD *)v23 + 2); i; i = (WTF *)*((_QWORD *)i + 2))
          v23 = i;
        std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)v5, v23);
      }
    }
    else
    {
      v32 = v20;
    }
    if (v32 != &v48)
    {
      do
      {
        v36 = WTF::fastMalloc((WTF *)0x20);
        v37 = v36;
        v38 = *((_DWORD *)v32 + 7);
        *(_DWORD *)(v36 + 28) = v38;
        v39 = (uint64_t *)*v4;
        v40 = v4;
        v41 = v4;
        if (*v4)
        {
          do
          {
            while (1)
            {
              v40 = v39;
              if (v38 >= *((_DWORD *)v39 + 7))
                break;
              v39 = (uint64_t *)*v39;
              v41 = v40;
              if (!*v40)
                goto LABEL_78;
            }
            v39 = (uint64_t *)v39[1];
          }
          while (v39);
          v41 = v40 + 1;
        }
LABEL_78:
        *(_QWORD *)v36 = 0;
        *(_QWORD *)(v36 + 8) = 0;
        *(_QWORD *)(v36 + 16) = v40;
        *v41 = v36;
        v42 = (WTF **)**v5;
        if (v42)
        {
          *v5 = v42;
          v37 = *v41;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(a2 + 24), v37);
        ++*(_QWORD *)(a2 + 32);
        v43 = v32[1];
        if (v43)
        {
          do
          {
            v44 = (WTF **)v43;
            v43 = *(WTF **)v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (WTF **)v32[2];
            v11 = *v44 == (WTF *)v32;
            v32 = v44;
          }
          while (!v11);
        }
        v32 = v44;
      }
      while (v44 != &v48);
    }
  }
  *(_BYTE *)(a2 + 49) = *((_BYTE *)this + 49) ^ 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 48) = 1;
  return std::__tree<int,std::less<int>,WTF::FastAllocator<int>>::destroy((uint64_t)&v47, v48);
}

uint64_t WebCore::ReferencePathOperation::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  const WebCore::SVGElement *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  char v14;
  _BYTE v15[8];
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = WTF::fastMalloc((WTF *)0x78);
  v10 = result;
  v11 = *a3;
  if (v11)
    *(_DWORD *)(v11 + 24) += 2;
  *(_QWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = off_1E341EA80;
  v12 = *a1;
  if (*a1)
    *v12 += 2;
  *(_QWORD *)(result + 24) = v12;
  v13 = *a2;
  if (*a2)
    *v13 += 2;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 32) = v13;
  *(_BYTE *)(result + 112) = 0;
  if (v11)
  {
    if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::pathTag + 24)
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1192))(v11), (_DWORD)result))
    {
      WebCore::pathFromGraphicsElement((WebCore *)v11, v9, (uint64_t)v15);
      result = std::optional<WebCore::Path>::operator=[abi:sn180100]<WebCore::Path,void>(v10 + 40, (uint64_t)v15);
      if (v17 != -1)
        result = ((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v17])(&v14, &v16);
    }
    *a4 = v10;
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  else
  {
    *a4 = result;
  }
  return result;
}

uint64_t WebCore::ReferencePathOperation::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = WTF::fastMalloc((WTF *)0x78);
  v5 = result;
  *(_QWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = off_1E341EA80;
  *(_BYTE *)(result + 112) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(result + 48) = 0;
    *(_DWORD *)(result + 104) = -1;
    v6 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v6 != -1)
    {
      result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v6])(&v7);
      *(_DWORD *)(v5 + 104) = v6;
    }
    *(_BYTE *)(v5 + 112) = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t WebCore::ReferencePathOperation::clone@<X0>(WebCore::ReferencePathOperation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  _BYTE *v10;
  _BYTE v11[56];
  int v12;
  unsigned __int8 v13;
  _BYTE v14[56];
  unsigned int v15;
  char v16;
  _BYTE v17[56];
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v19 = 0;
  if (!*((_BYTE *)this + 112))
  {
    result = WTF::fastMalloc((WTF *)0x78);
    *(_QWORD *)(result + 8) = 1;
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = off_1E341EA80;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 40) = 0;
    *a2 = result;
    return result;
  }
  v18 = 0;
  v3 = *((unsigned int *)this + 26);
  if ((_DWORD)v3 == -1)
  {
    v18 = -1;
    v19 = 1;
  }
  else
  {
    v10 = v17;
    ((void (*)(_BYTE **, _BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v10, v17, (char *)this + 48);
    v19 = 1;
    v15 = 0;
    if (v18 != -1)
    {
      v10 = v14;
      ((void (*)(_BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v18])(&v10);
      goto LABEL_8;
    }
  }
  v15 = -1;
LABEL_8:
  result = WTF::fastMalloc((WTF *)0x78);
  v5 = result;
  v11[0] = 0;
  v12 = -1;
  v6 = v15;
  if (v15 != -1)
  {
    result = ((uint64_t (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v15])(&v9, v11, v14);
    v12 = v6;
  }
  v13 = 1;
  *(_QWORD *)(v5 + 8) = 1;
  *(_BYTE *)(v5 + 16) = 0;
  *(_QWORD *)v5 = off_1E341EA80;
  *(_BYTE *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 104) = -1;
  if ((_DWORD)v6 == -1)
  {
    *(_BYTE *)(v5 + 112) = 1;
    *a2 = v5;
    v8 = -1;
LABEL_14:
    if (v8 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v8])(&v9, v11);
    goto LABEL_16;
  }
  result = ((uint64_t (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v6])(&v9, v5 + 48, v11);
  *(_DWORD *)(v5 + 104) = v6;
  v7 = v13;
  *(_BYTE *)(v5 + 112) = 1;
  *a2 = v5;
  if (v7)
  {
    v8 = v12;
    goto LABEL_14;
  }
LABEL_16:
  if (v15 != -1)
    result = ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v15])(&v10, v14);
  if (v19)
  {
    if (v18 != -1)
      return ((uint64_t (*)(_BYTE **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v18])(&v10, v17);
  }
  return result;
}

uint64_t std::optional<WebCore::Path>::operator=[abi:sn180100]<WebCore::Path,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v4 = a1 + 8;
  if (*(_BYTE *)(a1 + 72))
  {
    v5 = *(unsigned int *)(a1 + 64);
    v6 = *(unsigned int *)(a2 + 64);
    if ((_DWORD)v5 == -1)
    {
      if ((_DWORD)v6 == -1)
        return a1;
    }
    else if ((_DWORD)v6 == -1)
    {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v5])(&v10, v4);
      *(_DWORD *)(a1 + 64) = -1;
      return a1;
    }
    v9 = a1 + 8;
    ((void (*)(uint64_t *))off_1E341EB60[v6])(&v9);
    return a1;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v7 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v7])(&v11, v4, a2 + 8);
    *(_DWORD *)(a1 + 64) = v7;
  }
  *(_BYTE *)(a1 + 72) = 1;
  return a1;
}

uint64_t WebCore::RayPathOperation::create@<X0>(char a1@<W0>, char a2@<W1>, int *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t result;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;

  result = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(result + 8) = 0x300000001;
  *(_BYTE *)(result + 16) = a4;
  *(_QWORD *)result = off_1E341EAC8;
  *(float *)(result + 20) = a6;
  *(_BYTE *)(result + 24) = a1;
  *(_BYTE *)(result + 25) = a2;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 33) = 0;
  v13 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(result + 32) = v13;
  *(_BYTE *)(result + 33) = *((_BYTE *)a3 + 5);
  if (v13 - 2 < 9)
  {
    v14 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(result + 34) = v14;
    if (v14)
    {
      *(_DWORD *)(result + 28) = *a3;
      goto LABEL_4;
    }
    v17 = *a3;
    goto LABEL_9;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 28) = 0;
    }
    else if (v13 == 11)
    {
      v17 = *a3;
      *a3 = 0;
LABEL_9:
      *(_DWORD *)(result + 28) = v17;
    }
  }
LABEL_4:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_WORD *)(result + 41) = 0;
  v15 = *((unsigned __int8 *)a3 + 12);
  *(_BYTE *)(result + 40) = v15;
  *(_BYTE *)(result + 41) = *((_BYTE *)a3 + 13);
  if (v15 - 2 >= 9)
  {
    if (v15 > 0xD)
      goto LABEL_7;
    if (((1 << v15) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 36) = 0;
      goto LABEL_7;
    }
    if (v15 != 11)
      goto LABEL_7;
    v18 = a3[2];
    a3[2] = 0;
    goto LABEL_11;
  }
  v16 = *((unsigned __int8 *)a3 + 14);
  *(_BYTE *)(result + 42) = v16;
  if (!v16)
  {
    v18 = a3[2];
LABEL_11:
    *(_DWORD *)(result + 36) = v18;
    goto LABEL_7;
  }
  *(_DWORD *)(result + 36) = a3[2];
LABEL_7:
  *((_BYTE *)a3 + 12) = 0;
  *a5 = result;
  return result;
}

uint64_t WebCore::RayPathOperation::clone@<X0>(WebCore::RayPathOperation *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  char v5;
  unsigned int v6;
  int v7;
  int v8;
  char v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t result;
  int v14;
  __int16 v15;
  char v16;
  char v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  int v22;
  unsigned __int8 v23;
  char v24;
  char v25;

  v18 = 0;
  v21 = 0;
  v19 = *((_BYTE *)this + 32);
  v4 = v19;
  v5 = *((_BYTE *)this + 33);
  v20 = v5;
  v6 = v19 - 2;
  if (v6 >= 9)
  {
    if (v19 == 11)
    {
      v18 = *((_DWORD *)this + 7);
      v7 = v18;
      WebCore::Length::ref(&v18);
      v17 = 0;
    }
    else
    {
      v17 = 0;
      v7 = 0;
    }
  }
  else
  {
    v21 = *((_BYTE *)this + 34);
    if (v21)
    {
      v7 = *((_DWORD *)this + 7);
      v18 = v7;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v18 = *((_DWORD *)this + 7);
      v7 = v18;
    }
  }
  v25 = 0;
  v23 = *((_BYTE *)this + 40);
  v8 = v23;
  v9 = *((_BYTE *)this + 41);
  v24 = v9;
  v10 = v23 - 2;
  if (v10 >= 9)
  {
    if (v23 == 11)
    {
      v22 = *((_DWORD *)this + 9);
      v12 = v22;
      WebCore::Length::ref(&v22);
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  else if (*((_BYTE *)this + 42))
  {
    v12 = *((_DWORD *)this + 9);
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = *((_DWORD *)this + 9);
  }
  result = WTF::fastMalloc((WTF *)0x30);
  v14 = *((_DWORD *)this + 5);
  v15 = *((_WORD *)this + 12);
  v16 = *((_BYTE *)this + 16);
  *(_QWORD *)(result + 8) = 0x300000001;
  *(_BYTE *)(result + 16) = v16;
  *(_QWORD *)result = off_1E341EAC8;
  *(_DWORD *)(result + 20) = v14;
  *(_WORD *)(result + 24) = v15;
  *(_DWORD *)(result + 28) = 0;
  *(_BYTE *)(result + 34) = 0;
  *(_BYTE *)(result + 32) = v4;
  *(_BYTE *)(result + 33) = v5;
  if (v6 < 9)
  {
    *(_BYTE *)(result + 34) = v17;
LABEL_15:
    *(_DWORD *)(result + 28) = v7;
    goto LABEL_16;
  }
  if (v4 == 11)
    goto LABEL_15;
LABEL_16:
  *(_DWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 42) = 0;
  *(_BYTE *)(result + 40) = v8;
  *(_BYTE *)(result + 41) = v9;
  if (v10 >= 9)
  {
    if (v8 != 11)
      goto LABEL_19;
  }
  else
  {
    *(_BYTE *)(result + 42) = v11;
  }
  *(_DWORD *)(result + 36) = v12;
LABEL_19:
  *a2 = result;
  return result;
}

BOOL WebCore::RayPathOperation::canBlend(unsigned __int8 *a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 12) == 3
      && a1[24] == *(unsigned __int8 *)(a2 + 24)
      && a1[25] == *(unsigned __int8 *)(a2 + 25)
      && a1[16] == *(unsigned __int8 *)(a2 + 16);
}

uint64_t WebCore::RayPathOperation::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  float v9;
  float v10;
  double v11;
  char v12;
  char v13;
  __n128 v14;
  int v15;
  unsigned int v16;
  int v17;
  float v18;
  char v19;
  int v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  char v25;
  uint64_t result;
  uint64_t *v27;
  double v28;
  float v29;
  char v30;
  uint64_t *v31;
  char v32;
  int v33;
  unsigned __int8 v34;
  char v35;
  char v36;
  int v37;
  unsigned __int8 v38;
  char v39;
  char v40;

  if (*(_DWORD *)(a2 + 12) != 3)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  a5.n128_u32[0] = *(_DWORD *)(a1 + 20);
  v9 = *(float *)(a2 + 20);
  if (*(_BYTE *)(a3 + 10) == 1)
  {
    v28 = *(double *)(a3 + 16);
    if (v28 != 0.0)
    {
      v29 = v28 * v9;
      a5.n128_f32[0] = a5.n128_f32[0] + v29;
      v9 = v9 + v29;
    }
  }
  v10 = a5.n128_f32[0] + a5.n128_f32[0];
  if (!*(_BYTE *)(a3 + 9))
    v10 = a5.n128_f32[0];
  a5.n128_f64[0] = (float)(v9 - a5.n128_f32[0]);
  v11 = v10 + a5.n128_f64[0] * *(double *)a3;
  v12 = *(_BYTE *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 25);
  WebCore::blend((unsigned __int8 *)(a1 + 28), (unsigned __int8 *)(a2 + 28), a3, (uint64_t)&v37, a5);
  WebCore::blend((unsigned __int8 *)(a1 + 36), (unsigned __int8 *)(a2 + 36), a3, (uint64_t)&v33, v14);
  v15 = v38;
  v16 = v38 - 2;
  v32 = v13;
  if (v16 < 9)
  {
    if (v40)
    {
      v30 = 1;
LABEL_8:
      v17 = v37;
      goto LABEL_9;
    }
LABEL_21:
    v30 = 0;
    goto LABEL_8;
  }
  if (v38 == 11)
    goto LABEL_21;
  v30 = 0;
  v17 = 0;
LABEL_9:
  v18 = v11;
  v19 = v39;
  v20 = v34;
  v21 = v34 - 2;
  v31 = a4;
  if (v21 < 9)
  {
    if (v36)
    {
      v22 = 1;
LABEL_12:
      v23 = v33;
      goto LABEL_13;
    }
LABEL_24:
    v22 = 0;
    goto LABEL_12;
  }
  if (v34 == 11)
    goto LABEL_24;
  v22 = 0;
  v23 = 0;
LABEL_13:
  v24 = v35;
  v25 = *(_BYTE *)(a1 + 16);
  result = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)(result + 8) = 0x300000001;
  *(_BYTE *)(result + 16) = v25;
  *(_QWORD *)result = off_1E341EAC8;
  *(float *)(result + 20) = v18;
  *(_BYTE *)(result + 24) = v12;
  *(_BYTE *)(result + 25) = v32;
  *(_DWORD *)(result + 28) = 0;
  *(_BYTE *)(result + 34) = 0;
  *(_BYTE *)(result + 32) = v15;
  *(_BYTE *)(result + 33) = v19;
  if (v16 >= 9)
  {
    if (v15 != 11)
      goto LABEL_16;
  }
  else
  {
    *(_BYTE *)(result + 34) = v30;
  }
  *(_DWORD *)(result + 28) = v17;
LABEL_16:
  *(_DWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 42) = 0;
  *(_BYTE *)(result + 40) = v20;
  *(_BYTE *)(result + 41) = v24;
  if (v21 >= 9)
  {
    v27 = v31;
    if (v20 == 11)
      *(_DWORD *)(result + 36) = v23;
  }
  else
  {
    *(_BYTE *)(result + 42) = v22;
    *(_DWORD *)(result + 36) = v23;
    v27 = v31;
  }
  *v27 = result;
  return result;
}

uint64_t WebCore::RayPathOperation::getPath@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  long double v15;
  float v16;
  double v17;
  float v18;
  long double v19;
  double v20;
  BOOL v21;
  int v22;
  int v23;
  double v24;
  double v25;
  float v26;
  float v27;
  float i;
  __double2 v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  float v36;
  float v37;
  _OWORD v38[3];
  __int128 v39;
  int v40;
  uint64_t v41;
  int v42[14];
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 64);
  v38[2] = *(_OWORD *)(a2 + 48);
  v39 = v4;
  v40 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 32);
  v38[0] = *(_OWORD *)(a2 + 16);
  v38[1] = v5;
  if (!(_BYTE)v40)
    goto LABEL_4;
  v6 = result;
  v7 = *(float *)(a2 + 8);
  v8 = *(float *)(a2 + 12);
  if (*((float *)v38 + 2) == 0.0)
    goto LABEL_3;
  v10 = *((float *)v38 + 2);
  if (*((float *)v38 + 2) < 0.0)
    v10 = -*((float *)v38 + 2);
  if (v10 < 0.00000011921)
  {
LABEL_3:
    v9 = *((float *)v38 + 3);
    if (*((float *)v38 + 3) != 0.0)
    {
      v11 = *((float *)v38 + 3);
      if (*((float *)v38 + 3) < 0.0)
        v11 = -*((float *)v38 + 3);
      if (v11 >= 0.00000011921)
        goto LABEL_13;
    }
LABEL_4:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 72) = 0;
    return result;
  }
  v9 = *((float *)v38 + 3);
LABEL_13:
  v12 = *((_QWORD *)&v39 + 1);
  v13 = fabsf(*((float *)&v39 + 3));
  v14 = vabds_f32(*((float *)&v39 + 3), v9);
  v15 = v14;
  v16 = fabsf(*((float *)&v39 + 2));
  v17 = v16;
  v18 = vabds_f32(*((float *)&v39 + 2), *((float *)v38 + 2));
  v19 = v18;
  switch(*(_BYTE *)(result + 24))
  {
    case 0:
      if (v14 >= v13)
        v15 = v13;
      if (v15 > v17)
        v15 = v16;
      if (v15 <= v19)
        v20 = v15;
      else
        v20 = v18;
      break;
    case 1:
      if (v18 >= v16)
        v19 = v16;
      v21 = v14 < v13;
      goto LABEL_34;
    case 2:
      if (v13 >= v14)
        v15 = v13;
      if (v15 < v17)
        v15 = v16;
      if (v15 >= v19)
        v20 = v15;
      else
        v20 = v18;
      break;
    case 3:
      if (v16 >= v18)
        v19 = v16;
      v21 = v13 < v14;
LABEL_34:
      if (!v21)
        v15 = v13;
      v20 = hypot(v19, v15);
      break;
    case 4:
      v22 = *(_DWORD *)(result + 20);
      v41 = *((_QWORD *)&v39 + 1);
      v42[0] = v22;
      v23 = v22;
      WebCore::lengthOfPointToSideOfIntersection((uint64_t)v38, (float *)&v41, v22);
      v25 = v24;
      WebCore::angleOfPointToSideOfIntersection((uint64_t)v38, (uint64_t)&v41, v23);
      v20 = v25 / cosf(v26 * 0.017453);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x196364258);
  }
  if (*(_BYTE *)(v6 + 25))
  {
    if (v7 >= v8)
      v27 = v7;
    else
      v27 = v8;
    v20 = fmax(v20 + (float)(v27 * -0.5), 0.0);
  }
  for (i = fmodf(*(float *)(v6 + 20), 360.0); i < 0.0; i = i + 360.0)
    ;
  v29 = __sincos_stret((i + -90.0) * 0.0174532925);
  v30 = v20 * v29.__cosval;
  v31 = v20 * v29.__sinval;
  v43 = 0;
  v32 = *(float *)&v12 - *(float *)&v39;
  v33 = *((float *)&v12 + 1) - *((float *)&v39 + 1);
  v36 = *(float *)&v12 - *(float *)&v39;
  v37 = *((float *)&v12 + 1) - *((float *)&v39 + 1);
  WebCore::Path::moveTo((WebCore::Path *)&v41, (const WebCore::FloatPoint *)&v36);
  v36 = v32 + v30;
  v37 = v33 + v31;
  result = WebCore::Path::addLineTo((uint64_t)&v41, (const WebCore::FloatPoint *)&v36);
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 64) = -1;
  v34 = v43;
  if (v43 == -1)
  {
    *(_BYTE *)(a3 + 72) = 1;
  }
  else
  {
    result = ((uint64_t (*)(float *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JSJ_SI_EEEDcmSL_DpOT0____fdiagonal_0[v43])(&v36);
    *(_DWORD *)(a3 + 64) = v34;
    v35 = v43;
    *(_BYTE *)(a3 + 72) = 1;
    if ((_DWORD)v35 != -1)
      return ((uint64_t (*)(float *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v35])(&v36, v42);
  }
  return result;
}

uint64_t WebCore::CSSSVGResourceElementClient::resourceChanged(WebCore::CSSSVGResourceElementClient *this, WebCore::SVGElement *a2)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[20];
  __int128 v6;
  char v7;

  result = *((_QWORD *)this + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8);
  if (!*(_BYTE *)(v4 + 3405))
  {
    if ((*(_QWORD *)(*(_QWORD *)(v4 + 680) + 680) & 0x800000000000) != 0)
    {
      if (*(_BYTE *)(result + 46) == 73
        && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
      {
        WebCore::RenderSVGPath::updateMarkerPositions((WebCore::RenderSVGPath *)result, a2);
        result = *((_QWORD *)this + 2);
      }
      return WebCore::RenderElement::repaintOldAndNewPositionsForSVGRenderer(result, a2);
    }
    else if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 1944) + 24) + 8) + 40)
                                    + 8)
                        + 3382))
    {
      LOBYTE(v6) = 0;
      v7 = 0;
      v5[0] = 0;
      v5[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v6, 0, 0, (uint64_t)v5);
    }
  }
  return result;
}

void WebCore::ReferencedSVGResources::~ReferencedSVGResources(WebCore::ReferencedSVGResources *this, void *a2)
{
  WebCore::TreeScope *v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  unsigned int v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const WTF::AtomString *v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t i;
  char *v28;
  bmalloc::api *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24) + 8) + 40);
  v4 = *(_QWORD *)v3;
  v5 = *(_WORD *)(*(_QWORD *)v3 + 28);
  if (*(_QWORD *)v3)
    v6 = (v5 & 0x80) == 0;
  else
    v6 = 1;
  if (!v6 && !*(_BYTE *)(v4 + 193))
  {
    v35 = *(_QWORD *)(v4 + 200);
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 8);
      if (v36)
      {
        if (*(_WORD *)(*(_QWORD *)(v36 + 96) + 10) == 242)
        {
          v3 = (WebCore::TreeScope *)*((_QWORD *)v3 + 2);
          v4 = *(_QWORD *)v3;
          v5 = *(_WORD *)(*(_QWORD *)v3 + 28);
        }
      }
    }
  }
  if ((v5 & 0xF000) != 0x9000 && (v5 & 0x80) == 0)
    goto LABEL_66;
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *((unsigned int *)this + 5);
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1);
    v9 = *((unsigned int *)this + 4);
    v10 = &v8[2 * v9];
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      while (!*v8)
      {
        v8 += 2;
        v11 -= 16;
        if (!v11)
        {
          v8 = v10;
          break;
        }
      }
    }
    if (v7 >> 29)
    {
LABEL_66:
      __break(0xC471u);
      JUMPOUT(0x1963645B0);
    }
    v12 = WTF::fastMalloc((WTF *)(8 * v7));
    v14 = (WTF *)v12;
    if (v8 != v10)
    {
      v15 = 0;
      v16 = (_DWORD *)*v8;
      v17 = 1;
LABEL_16:
      v18 = v17;
      if (v16)
        *v16 += 2;
      v19 = v15 + 1;
      *(_QWORD *)(v12 + 8 * v15) = v16;
      while (1)
      {
        v8 += 2;
        if (v8 == v10)
          break;
        v16 = (_DWORD *)*v8;
        if (*v8)
        {
          ++v17;
          ++v15;
          if (v8 != v10)
            goto LABEL_16;
          break;
        }
      }
      if (v19)
      {
        v20 = 8 * v18;
        v21 = (const WTF::AtomString *)v12;
        do
        {
          WebCore::ReferencedSVGResources::removeClientForTarget((uint64_t)this, v3, v21);
          v21 = (const WTF::AtomString *)((char *)v21 + 8);
          v20 -= 8;
        }
        while (v20);
        v22 = 8 * v18;
        v23 = (WTF::StringImpl **)v14;
        do
        {
          v24 = *v23;
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v13);
            else
              *(_DWORD *)v24 -= 2;
          }
          ++v23;
          v22 -= 8;
        }
        while (v22);
      }
    }
    WTF::fastFree(v14, v13);
    v4 = *(_QWORD *)v3;
    v5 = *(_WORD *)(*(_QWORD *)v3 + 28);
  }
  if ((v5 & 0xF000) != 0x9000 && (v5 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963645D4);
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  v25 = (WTF *)*((_QWORD *)this + 1);
  if (v25)
  {
    v26 = *((unsigned int *)this + 4);
    if ((_DWORD)v26)
    {
      for (i = 0; i != v26; ++i)
      {
        v28 = (char *)v25 + 16 * i;
        v29 = (bmalloc::api *)*((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = 0;
        if (v29)
        {
          v30 = *((_QWORD *)v29 + 1);
          if (v30)
          {
            *(_QWORD *)(v30 + 8) = 0;
            v31 = (unsigned int *)*((_QWORD *)v29 + 1);
            *((_QWORD *)v29 + 1) = 0;
            if (v31)
            {
              do
              {
                v32 = __ldaxr(v31);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, v31));
              if (!v33)
              {
                atomic_store(1u, v31);
                WTF::fastFree((WTF *)v31, a2);
              }
            }
          }
          else
          {
            *((_QWORD *)v29 + 1) = 0;
          }
          bmalloc::api::isoDeallocate(v29, a2);
        }
        v34 = *(WTF::StringImpl **)v28;
        *(_QWORD *)v28 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v34 -= 2;
        }
      }
    }
    WTF::fastFree(v25, a2);
  }
}

uint64_t WebCore::ReferencedSVGResources::removeClientForTarget(uint64_t this, WebCore::TreeScope *a2, const WTF::AtomString *a3)
{
  WebCore::TreeScope *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  bmalloc::api *v18;
  bmalloc::api *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WebCore::Node *v37;
  __int16 v38;
  int v39;
  void *v40;
  WebCore::Node *v41;

  v4 = a2;
  v5 = this;
  v7 = (_QWORD *)(this + 8);
  v6 = *(_QWORD *)(this + 8);
  v8 = *(unsigned int *)(this + 16);
  if (v6)
  {
    v9 = v8 - 1;
    v10 = *(_DWORD *)(this + 24);
    v11 = *(_DWORD *)(*(_QWORD *)a3 + 16);
    v12 = (v10 ^ (v11 >> 8)) & ((_DWORD)v8 - 1);
    v13 = *(_QWORD *)(v6 + 16 * v12);
    if (v13)
    {
      v14 = v11 >> 8;
      v15 = -1;
      do
      {
        v16 = *(_DWORD *)(v13 + 16);
        a2 = (WebCore::TreeScope *)(v12 + v8);
        this = ((_DWORD)a2 - ((v10 ^ (v16 >> 8)) & v9)) & v9;
        if (++v15 > this)
          break;
        if (v13 == *(_QWORD *)a3 && v16 >> 8 == v14)
        {
          v17 = (uint64_t *)(v6 + 16 * v12);
          goto LABEL_8;
        }
        v12 = ((_DWORD)v12 + 1) & v9;
        v13 = *(_QWORD *)(v6 + 16 * v12);
      }
      while (v13);
    }
    v17 = (uint64_t *)(v6 + 16 * v8);
  }
  else
  {
    v17 = (uint64_t *)(16 * v8);
  }
LABEL_8:
  if ((uint64_t *)(v6 + 16 * v8) == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = (bmalloc::api *)v17[1];
    v17[1] = 0;
    if ((uint64_t *)(*v7 + 16 * v8) != v17)
    {
      this = *v17;
      *v17 = -1;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v19 = (bmalloc::api *)v17[1];
      v17[1] = 0;
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 1);
        if (v20)
        {
          *(_QWORD *)(v20 + 8) = 0;
          v21 = (unsigned int *)*((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (v21)
          {
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, v21);
              WTF::fastFree((WTF *)v21, a2);
            }
          }
        }
        else
        {
          *((_QWORD *)v19 + 1) = 0;
        }
        this = bmalloc::api::isoDeallocate(v19, a2);
      }
      *v17 = 0;
      v17[1] = 0;
      v24 = *(_DWORD *)(v5 + 16);
      v25 = *(_DWORD *)(v5 + 20) - 1;
      *(_DWORD *)(v5 + 20) = v25;
      v26 = v24 - 1;
      v27 = *(_QWORD *)(v5 + 8);
      v28 = (unint64_t)v17 - v27;
      v29 = ((((unint64_t)v17 - v27) >> 4) + 1) & (v24 - 1);
      v30 = (WTF::StringImpl *)(v27 + 16 * v29);
      v31 = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
      {
        v39 = *(_DWORD *)(v5 + 24);
        this = v27 + (v28 & 0xFFFFFFFF0);
        do
        {
          if (((v29 + v24 - ((v39 ^ (*(_DWORD *)(v31 + 16) >> 8)) & v26)) & v26) == 0)
            break;
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>((WTF::StringImpl **)this, v30);
          WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>::~KeyValuePair((WTF::StringImpl **)v30, v40);
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          this = *v7 + 16 * v29;
          v29 = (v29 + 1) & v26;
          v30 = (WTF::StringImpl *)(*v7 + 16 * v29);
          v31 = *(_QWORD *)v30;
        }
        while (*(_QWORD *)v30);
        v24 = *(_DWORD *)(v5 + 16);
        v25 = *(_DWORD *)(v5 + 20);
      }
      if (v24 >= 9 && 6 * v25 < v24)
        this = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v7, v24 >> 1);
    }
  }
  if (*(_QWORD *)a3
    && *(_DWORD *)(*(_QWORD *)a3 + 4)
    && (this = *((_QWORD *)v4 + 3)) != 0
    && (this = (uint64_t)WebCore::TreeScopeOrderedMap::getElementById((unsigned int *)this, a3, v4, (uint64_t *)&v41),
        (v37 = v41) != 0))
  {
    v38 = *((_WORD *)v41 + 14);
    v41 = 0;
    if ((v38 & 0x20) != 0)
      this = WebCore::SVGElement::removeReferencingCSSClient((uint64_t)v37, v18);
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        this = WebCore::Node::removedLastRef(v37);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  else
  {
    v41 = 0;
  }
  if (v18)
  {
    v33 = *((_QWORD *)v18 + 1);
    if (v33)
    {
      *(_QWORD *)(v33 + 8) = 0;
      v34 = (unsigned int *)*((_QWORD *)v18 + 1);
      *((_QWORD *)v18 + 1) = 0;
      if (v34)
      {
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          atomic_store(1u, v34);
          WTF::fastFree((WTF *)v34, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v18 + 1) = 0;
    }
    return bmalloc::api::isoDeallocate(v18, a2);
  }
  return this;
}

void WebCore::ReferencedSVGResources::referencedSVGResourceIDs(WebCore::ReferencedSVGResources *this@<X0>, const WebCore::RenderStyle *a2@<X1>, const WebCore::Document *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  void (*v36)(uint64_t, const WebCore::RenderStyle *, const WebCore::Document *);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  double v44;
  double v45;
  float v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  WebCore::SVGRenderStyle *v49;
  WTF::StringImpl *v50;
  double v51;
  double v52;
  float v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl **v73;
  WTF::StringImpl **v74;
  void *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  unsigned int v78;
  void *v79;
  WTF::StringImpl *v80;
  void *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl **v83;
  unsigned int v84;
  void *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  WTF::StringImpl **v88;
  WTF::StringImpl **v89;
  void *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  unsigned int v93;
  void *v94;
  _DWORD *v95;
  void *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl **v98;
  unsigned int v99;
  void *v100;
  _DWORD *v101;
  void *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl **v104;
  unsigned int v105;
  void *v106;
  _DWORD *v107;
  void *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl **v110;
  unsigned int v111;
  void *v112;
  _DWORD *v113;
  void *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl **v116;
  unsigned int v117;
  void *v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  WTF *v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  WTF::StringImpl **v132;
  uint64_t v133;
  _QWORD *v134;
  WTF *v135;
  unsigned int *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF *v139;
  uint64_t v140;
  _DWORD *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl **v145;
  WTF::StringImpl **v146[2];

  v146[1] = *(WTF::StringImpl ***)MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v7 = *((_QWORD *)this + 1);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 264);
  if (v8)
  {
    if (!*(_DWORD *)(v8 + 12))
    {
      v11 = *(_QWORD *)(v8 + 32);
      if (v11)
      {
        if (*(_DWORD *)(v11 + 4))
        {
          v12 = (WTF::StringImpl **)WebCore::SVGNames::clipPathTag;
          if (WebCore::SVGNames::clipPathTag)
          {
            ++*(_DWORD *)WebCore::SVGNames::clipPathTag;
            v13 = (WTF *)WTF::fastMalloc((WTF *)8);
            ++*(_DWORD *)v12;
          }
          else
          {
            v13 = (WTF *)WTF::fastMalloc((WTF *)8);
          }
          *(_QWORD *)v13 = v12;
          v14 = *(WTF::StringImpl **)(v8 + 32);
          if (v14)
            *(_DWORD *)v14 += 2;
          v138 = v14;
          v139 = v13;
          v140 = 0x100000001;
          v15 = WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, 1uLL, (unint64_t)&v138);
          v16 = *(_DWORD *)(a4 + 12);
          v17 = *(_QWORD *)a4 + 24 * v16;
          v18 = *(_QWORD *)v15;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v17 + 8) = 0;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)v17 = v18;
          v19 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          LODWORD(v19) = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v17 + 16) = v19;
          LODWORD(v19) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = 0;
          *(_DWORD *)(v17 + 20) = v19;
          v20 = HIDWORD(v140);
          v21 = v139;
          *(_DWORD *)(a4 + 12) = v16 + 1;
          if ((_DWORD)v20)
          {
            v30 = 8 * v20;
            do
            {
              v31 = *(WTF::StringImpl ***)v21;
              *(_QWORD *)v21 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 1)
                {
                  v133 = v30;
                  v135 = v21;
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v31);
                  WTF::fastFree(v32, v33);
                  v30 = v133;
                  v21 = v135;
                }
                else
                {
                  --*(_DWORD *)v31;
                }
              }
              v21 = (WTF *)((char *)v21 + 8);
              v30 -= 8;
            }
            while (v30);
            v21 = v139;
          }
          if (v21)
          {
            v139 = 0;
            LODWORD(v140) = 0;
            WTF::fastFree(v21, a2);
          }
          v22 = v138;
          v138 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, a2);
            else
              *(_DWORD *)v22 -= 2;
          }
          if (v12)
          {
            if (*(_DWORD *)v12 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v12;
            }
          }
          v7 = *((_QWORD *)this + 1);
        }
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 32);
  v10 = *(unsigned int *)(v9 + 20);
  if ((_DWORD)v10)
  {
    v23 = *(_QWORD **)(v9 + 8);
    v24 = &v23[v10];
    do
    {
      v25 = *v23;
      v26 = (unsigned int *)(*v23 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      if (*(_BYTE *)(v25 + 12))
      {
        do
        {
          v28 = __ldaxr(v26);
          v29 = --v28 == 0;
        }
        while (__stlxr(v28, v26));
      }
      else
      {
        v134 = v24;
        v136 = v26;
        v39 = *(_QWORD *)(v25 + 24);
        if (v39 && *(_DWORD *)(v39 + 4))
        {
          v80 = (WTF::StringImpl *)WebCore::SVGNames::filterTag;
          if (WebCore::SVGNames::filterTag)
            ++*(_DWORD *)WebCore::SVGNames::filterTag;
          v142 = v80;
          WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v144, (_DWORD **)&v142, 1uLL);
          v82 = *(WTF::StringImpl **)(v25 + 24);
          if (v82)
            *(_DWORD *)v82 += 2;
          v138 = v82;
          v139 = v144;
          v83 = v145;
          v144 = 0;
          v145 = 0;
          v140 = (uint64_t)v83;
          v84 = *(_DWORD *)(a4 + 12);
          if (v84 == *(_DWORD *)(a4 + 8))
          {
            WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
          }
          else
          {
            v119 = *(_QWORD *)a4 + 24 * v84;
            v138 = 0;
            *(_QWORD *)(v119 + 8) = 0;
            *(_QWORD *)(v119 + 16) = 0;
            *(_QWORD *)v119 = v82;
            v120 = v139;
            v139 = 0;
            *(_QWORD *)(v119 + 8) = v120;
            LODWORD(v120) = v140;
            LODWORD(v140) = 0;
            *(_DWORD *)(v119 + 16) = (_DWORD)v120;
            LODWORD(v120) = HIDWORD(v140);
            HIDWORD(v140) = 0;
            *(_DWORD *)(v119 + 20) = (_DWORD)v120;
            *(_DWORD *)(a4 + 12) = v84 + 1;
          }
          std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v81);
          WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v144, v85);
          WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v142);
        }
        do
        {
          v40 = v136;
          v41 = __ldaxr(v136);
          v29 = --v41 == 0;
        }
        while (__stlxr(v41, v40));
        v24 = v134;
      }
      if (v29)
      {
        atomic_store(1u, (unsigned int *)(v25 + 8));
        v36 = *(void (**)(uint64_t, const WebCore::RenderStyle *, const WebCore::Document *))(*(_QWORD *)v25 + 8);
        v37 = v25;
        v38 = v24;
        v36(v37, a2, a3);
        v24 = v38;
      }
      ++v23;
    }
    while (v23 != v24);
  }
  if ((*(_QWORD *)(*((_QWORD *)a2 + 85) + 680) & 0x800000000000) != 0)
  {
    if (!WebCore::RenderStyle::hasPositionedMask(this))
      goto LABEL_48;
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 48) + 16);
    if (v42)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, const WebCore::RenderStyle *))(*(_QWORD *)v42 + 88))(&v138, v42, a2);
    }
    else
    {
      v138 = 0;
      WTF::URL::invalidate((WTF::URL *)&v138);
    }
    v47 = v138;
    if (!v138)
    {
LABEL_48:
      v48 = (_QWORD *)*((_QWORD *)this + 7);
      v49 = (WebCore::SVGRenderStyle *)v48[5];
      if (!WebCore::SVGRenderStyle::hasMarkers(v49))
        goto LABEL_70;
      v54 = (WTF::StringImpl *)*((_QWORD *)v49 + 1);
      if (!v54)
      {
LABEL_56:
        v58 = *(WTF::StringImpl **)(v48[5] + 16);
        if (!v58)
          goto LABEL_63;
        v59 = *(_DWORD *)v58 + 2;
        *(_DWORD *)v58 = v59;
        v142 = v58;
        if (!*((_DWORD *)v58 + 1))
        {
          v142 = 0;
          goto LABEL_61;
        }
        WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v142, a2, &v137, v51, v52, v53);
        v60 = v137;
        if (v137)
        {
          if (*((_DWORD *)v137 + 1))
          {
            v101 = (_DWORD *)WebCore::SVGNames::markerTag;
            if (WebCore::SVGNames::markerTag)
              ++*(_DWORD *)WebCore::SVGNames::markerTag;
            v141 = v101;
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v144, &v141, 1uLL);
            v103 = v137;
            if (v137)
              *(_DWORD *)v137 += 2;
            v138 = v103;
            v139 = v144;
            v104 = v145;
            v144 = 0;
            v145 = 0;
            v140 = (uint64_t)v104;
            v105 = *(_DWORD *)(a4 + 12);
            if (v105 == *(_DWORD *)(a4 + 8))
            {
              WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
            }
            else
            {
              v127 = *(_QWORD *)a4 + 24 * v105;
              v138 = 0;
              *(_QWORD *)(v127 + 8) = 0;
              *(_QWORD *)(v127 + 16) = 0;
              *(_QWORD *)v127 = v103;
              v128 = v139;
              v139 = 0;
              *(_QWORD *)(v127 + 8) = v128;
              LODWORD(v128) = v140;
              LODWORD(v140) = 0;
              *(_DWORD *)(v127 + 16) = (_DWORD)v128;
              LODWORD(v128) = HIDWORD(v140);
              HIDWORD(v140) = 0;
              *(_DWORD *)(v127 + 20) = (_DWORD)v128;
              *(_DWORD *)(a4 + 12) = v105 + 1;
            }
            std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v102);
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v144, v106);
            WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v141);
            v60 = v137;
            v137 = 0;
            if (!v60)
              goto LABEL_59;
          }
          else
          {
            v137 = 0;
          }
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v50);
          else
            *(_DWORD *)v60 -= 2;
        }
LABEL_59:
        v58 = v142;
        v142 = 0;
        if (!v58)
          goto LABEL_63;
        v59 = *(_DWORD *)v58;
LABEL_61:
        v61 = v59 - 2;
        if (v61)
          *(_DWORD *)v58 = v61;
        else
          WTF::StringImpl::destroy(v58, v50);
LABEL_63:
        v62 = *(WTF::StringImpl **)(v48[5] + 24);
        if (!v62)
          goto LABEL_70;
        v63 = *(_DWORD *)v62 + 2;
        *(_DWORD *)v62 = v63;
        v142 = v62;
        if (!*((_DWORD *)v62 + 1))
        {
          v142 = 0;
LABEL_68:
          v65 = v63 - 2;
          if (v65)
            *(_DWORD *)v62 = v65;
          else
            WTF::StringImpl::destroy(v62, v50);
LABEL_70:
          v66 = v48[2];
          if (*(unsigned __int8 *)(v66 + 56) < 3u)
            goto LABEL_72;
          WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)(v66 + 40), a2, &v137, v51, v52, v53);
          v68 = v137;
          if (!v137)
            goto LABEL_72;
          if (*((_DWORD *)v137 + 1))
          {
            v87 = (WTF *)WebCore::SVGNames::linearGradientTag;
            if (WebCore::SVGNames::linearGradientTag)
              ++*(_DWORD *)WebCore::SVGNames::linearGradientTag;
            v144 = v87;
            v88 = (WTF::StringImpl **)WebCore::SVGNames::radialGradientTag;
            if (WebCore::SVGNames::radialGradientTag)
              ++*(_DWORD *)WebCore::SVGNames::radialGradientTag;
            v145 = v88;
            v89 = (WTF::StringImpl **)WebCore::SVGNames::patternTag;
            if (WebCore::SVGNames::patternTag)
              ++*(_DWORD *)WebCore::SVGNames::patternTag;
            v146[0] = v89;
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v142, (_DWORD **)&v144, 3uLL);
            v91 = v137;
            if (v137)
              *(_DWORD *)v137 += 2;
            v138 = v91;
            v139 = v142;
            v92 = (uint64_t)v143;
            v142 = 0;
            v143 = 0;
            v140 = v92;
            v93 = *(_DWORD *)(a4 + 12);
            if (v93 == *(_DWORD *)(a4 + 8))
            {
              WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
            }
            else
            {
              v123 = *(_QWORD *)a4 + 24 * v93;
              v138 = 0;
              *(_QWORD *)(v123 + 8) = 0;
              *(_QWORD *)(v123 + 16) = 0;
              *(_QWORD *)v123 = v91;
              v124 = v139;
              v139 = 0;
              *(_QWORD *)(v123 + 8) = v124;
              LODWORD(v124) = v140;
              LODWORD(v140) = 0;
              *(_DWORD *)(v123 + 16) = (_DWORD)v124;
              LODWORD(v124) = HIDWORD(v140);
              HIDWORD(v140) = 0;
              *(_DWORD *)(v123 + 20) = (_DWORD)v124;
              *(_DWORD *)(a4 + 12) = v93 + 1;
            }
            std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v90);
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v142, v94);
            WebCore::QualifiedName::~QualifiedName(v146);
            WebCore::QualifiedName::~QualifiedName(&v145);
            WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v144);
            v68 = v137;
            v137 = 0;
            if (!v68)
            {
LABEL_72:
              v69 = v48[3];
              if (*(unsigned __int8 *)(v69 + 80) < 3u)
                return;
              WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)(v69 + 40), a2, &v137, v51, v52, v53);
              v71 = v137;
              if (!v137)
                return;
              if (*((_DWORD *)v137 + 1))
              {
                v72 = (WTF *)WebCore::SVGNames::linearGradientTag;
                if (WebCore::SVGNames::linearGradientTag)
                  ++*(_DWORD *)WebCore::SVGNames::linearGradientTag;
                v144 = v72;
                v73 = (WTF::StringImpl **)WebCore::SVGNames::radialGradientTag;
                if (WebCore::SVGNames::radialGradientTag)
                  ++*(_DWORD *)WebCore::SVGNames::radialGradientTag;
                v145 = v73;
                v74 = (WTF::StringImpl **)WebCore::SVGNames::patternTag;
                if (WebCore::SVGNames::patternTag)
                  ++*(_DWORD *)WebCore::SVGNames::patternTag;
                v146[0] = v74;
                WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v142, (_DWORD **)&v144, 3uLL);
                v76 = v137;
                if (v137)
                  *(_DWORD *)v137 += 2;
                v138 = v76;
                v139 = v142;
                v77 = (uint64_t)v143;
                v142 = 0;
                v143 = 0;
                v140 = v77;
                v78 = *(_DWORD *)(a4 + 12);
                if (v78 == *(_DWORD *)(a4 + 8))
                {
                  WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
                }
                else
                {
                  v121 = *(_QWORD *)a4 + 24 * v78;
                  v138 = 0;
                  *(_QWORD *)(v121 + 8) = 0;
                  *(_QWORD *)(v121 + 16) = 0;
                  *(_QWORD *)v121 = v76;
                  v122 = v139;
                  v139 = 0;
                  *(_QWORD *)(v121 + 8) = v122;
                  LODWORD(v122) = v140;
                  LODWORD(v140) = 0;
                  *(_DWORD *)(v121 + 16) = (_DWORD)v122;
                  LODWORD(v122) = HIDWORD(v140);
                  HIDWORD(v140) = 0;
                  *(_DWORD *)(v121 + 20) = (_DWORD)v122;
                  *(_DWORD *)(a4 + 12) = v78 + 1;
                }
                std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v75);
                WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v142, v79);
                WebCore::QualifiedName::~QualifiedName(v146);
                WebCore::QualifiedName::~QualifiedName(&v145);
                WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v144);
                v71 = v137;
                v137 = 0;
                if (!v71)
                  return;
              }
              else
              {
                v137 = 0;
              }
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v70);
              else
                *(_DWORD *)v71 -= 2;
              return;
            }
          }
          else
          {
            v137 = 0;
          }
          if (*(_DWORD *)v68 == 2)
            WTF::StringImpl::destroy(v68, v67);
          else
            *(_DWORD *)v68 -= 2;
          goto LABEL_72;
        }
        WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v142, a2, &v137, v51, v52, v53);
        v64 = v137;
        if (v137)
        {
          if (*((_DWORD *)v137 + 1))
          {
            v107 = (_DWORD *)WebCore::SVGNames::markerTag;
            if (WebCore::SVGNames::markerTag)
              ++*(_DWORD *)WebCore::SVGNames::markerTag;
            v141 = v107;
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v144, &v141, 1uLL);
            v109 = v137;
            if (v137)
              *(_DWORD *)v137 += 2;
            v138 = v109;
            v139 = v144;
            v110 = v145;
            v144 = 0;
            v145 = 0;
            v140 = (uint64_t)v110;
            v111 = *(_DWORD *)(a4 + 12);
            if (v111 == *(_DWORD *)(a4 + 8))
            {
              WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
            }
            else
            {
              v129 = *(_QWORD *)a4 + 24 * v111;
              v138 = 0;
              *(_QWORD *)(v129 + 8) = 0;
              *(_QWORD *)(v129 + 16) = 0;
              *(_QWORD *)v129 = v109;
              v130 = v139;
              v139 = 0;
              *(_QWORD *)(v129 + 8) = v130;
              LODWORD(v130) = v140;
              LODWORD(v140) = 0;
              *(_DWORD *)(v129 + 16) = (_DWORD)v130;
              LODWORD(v130) = HIDWORD(v140);
              HIDWORD(v140) = 0;
              *(_DWORD *)(v129 + 20) = (_DWORD)v130;
              *(_DWORD *)(a4 + 12) = v111 + 1;
            }
            std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v108);
            WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v144, v112);
            WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v141);
            v64 = v137;
            v137 = 0;
            if (!v64)
              goto LABEL_66;
          }
          else
          {
            v137 = 0;
          }
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v50);
          else
            *(_DWORD *)v64 -= 2;
        }
LABEL_66:
        v62 = v142;
        v142 = 0;
        if (!v62)
          goto LABEL_70;
        v63 = *(_DWORD *)v62;
        goto LABEL_68;
      }
      v55 = *(_DWORD *)v54 + 2;
      *(_DWORD *)v54 = v55;
      v142 = v54;
      if (!*((_DWORD *)v54 + 1))
      {
        v142 = 0;
LABEL_54:
        v57 = v55 - 2;
        if (v57)
          *(_DWORD *)v54 = v57;
        else
          WTF::StringImpl::destroy(v54, v50);
        goto LABEL_56;
      }
      WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v142, a2, &v137, v51, v52, v53);
      v56 = v137;
      if (v137)
      {
        if (*((_DWORD *)v137 + 1))
        {
          v95 = (_DWORD *)WebCore::SVGNames::markerTag;
          if (WebCore::SVGNames::markerTag)
            ++*(_DWORD *)WebCore::SVGNames::markerTag;
          v141 = v95;
          WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v144, &v141, 1uLL);
          v97 = v137;
          if (v137)
            *(_DWORD *)v137 += 2;
          v138 = v97;
          v139 = v144;
          v98 = v145;
          v144 = 0;
          v145 = 0;
          v140 = (uint64_t)v98;
          v99 = *(_DWORD *)(a4 + 12);
          if (v99 == *(_DWORD *)(a4 + 8))
          {
            WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v138);
          }
          else
          {
            v125 = *(_QWORD *)a4 + 24 * v99;
            v138 = 0;
            *(_QWORD *)(v125 + 8) = 0;
            *(_QWORD *)(v125 + 16) = 0;
            *(_QWORD *)v125 = v97;
            v126 = v139;
            v139 = 0;
            *(_QWORD *)(v125 + 8) = v126;
            LODWORD(v126) = v140;
            LODWORD(v140) = 0;
            *(_DWORD *)(v125 + 16) = (_DWORD)v126;
            LODWORD(v126) = HIDWORD(v140);
            HIDWORD(v140) = 0;
            *(_DWORD *)(v125 + 20) = (_DWORD)v126;
            *(_DWORD *)(a4 + 12) = v99 + 1;
          }
          std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v138, v96);
          WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v144, v100);
          WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v141);
          v56 = v137;
          v137 = 0;
          if (!v56)
            goto LABEL_52;
        }
        else
        {
          v137 = 0;
        }
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v50);
        else
          *(_DWORD *)v56 -= 2;
      }
LABEL_52:
      v54 = v142;
      v142 = 0;
      if (!v54)
        goto LABEL_56;
      v55 = *(_DWORD *)v54;
      goto LABEL_54;
    }
    if (!*((_DWORD *)v138 + 1))
    {
      v138 = 0;
LABEL_103:
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v43);
      else
        *(_DWORD *)v47 -= 2;
      goto LABEL_48;
    }
    WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)&v138, a2, &v137, v44, v45, v46);
    v86 = v137;
    if (!v137)
    {
LABEL_102:
      v47 = v138;
      v138 = 0;
      if (!v47)
        goto LABEL_48;
      goto LABEL_103;
    }
    if (*((_DWORD *)v137 + 1))
    {
      v113 = (_DWORD *)WebCore::SVGNames::maskTag;
      if (WebCore::SVGNames::maskTag)
        ++*(_DWORD *)WebCore::SVGNames::maskTag;
      v141 = v113;
      WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v142, &v141, 1uLL);
      v115 = v137;
      if (v137)
        *(_DWORD *)v137 += 2;
      v144 = v115;
      v145 = (WTF::StringImpl **)v142;
      v116 = v143;
      v142 = 0;
      v143 = 0;
      v146[0] = v116;
      v117 = *(_DWORD *)(a4 + 12);
      if (v117 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a4, (unint64_t)&v144);
      }
      else
      {
        v131 = *(_QWORD *)a4 + 24 * v117;
        v144 = 0;
        *(_QWORD *)(v131 + 8) = 0;
        *(_QWORD *)(v131 + 16) = 0;
        *(_QWORD *)v131 = v115;
        v132 = v145;
        v145 = 0;
        *(_QWORD *)(v131 + 8) = v132;
        LODWORD(v132) = v146[0];
        LODWORD(v146[0]) = 0;
        *(_DWORD *)(v131 + 16) = (_DWORD)v132;
        LODWORD(v132) = HIDWORD(v146[0]);
        HIDWORD(v146[0]) = 0;
        *(_DWORD *)(v131 + 20) = (_DWORD)v132;
        *(_DWORD *)(a4 + 12) = v117 + 1;
      }
      std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair((uint64_t)&v144, v114);
      WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v142, v118);
      WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)&v141);
      v86 = v137;
      v137 = 0;
      if (!v86)
        goto LABEL_102;
    }
    else
    {
      v137 = 0;
    }
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v43);
    else
      *(_DWORD *)v86 -= 2;
    goto LABEL_102;
  }
}

uint64_t *WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2;
      if (*a2)
        ++*v9;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl ***v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF *v10;
  void *v11;

  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v7 = *(WTF::StringImpl ****)(a1 + 8);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF *v9;
  void *v10;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ****)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
          WTF::fastFree(v9, v10);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

BOOL WebCore::RenderStyle::hasPositionedMask(WebCore::RenderStyle *this)
{
  WebCore::FillLayer *v1;
  uint64_t (*v2)();

  v1 = *(WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 48);
  if (*((_QWORD *)v1 + 1))
    return WebCore::FillLayer::hasImageInAnyLayer(v1);
  v2 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)v1 + 2))
    v2 = 0;
  return v2 != 0;
}

BOOL WebCore::SVGRenderStyle::hasMarkers(WebCore::SVGRenderStyle *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (v1 && *(_DWORD *)(v1 + 4))
    return 1;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 4))
      return 1;
  }
  v3 = *((_QWORD *)this + 3);
  return v3 && *(_DWORD *)(v3 + 4) != 0;
}

uint64_t WebCore::ReferencedSVGResources::updateReferencedResources(uint64_t this, WebCore::TreeScope *a2, uint64_t a3)
{
  WebCore::TreeScope *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::AtomString *v12;
  uint64_t v13;
  WTF::AtomString *v14;
  WTF::AtomString *v15;
  uint64_t v16;
  WTF::AtomString *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  bmalloc::api *v39;
  bmalloc::api *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  bmalloc::api *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int i;
  uint64_t v52;
  uint64_t v53;
  int v55;
  unsigned int v56;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::AtomString *v61;
  BOOL v62;
  bmalloc::api *v63;
  bmalloc::api *v64;
  WebCore::TreeScope *v65;
  uint64_t *v66;
  WebCore::Node *v67;
  uint64_t *v68;
  WTF::StringImpl *v69;
  bmalloc::api *v70;
  WTF::AtomString *v71;
  uint64_t *v72[2];

  v4 = a2;
  v5 = this;
  v71 = 0;
  v6 = (uint64_t *)(this + 8);
  if (*(_DWORD *)(this + 20))
  {
    v7 = *(unsigned int *)(this + 16);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = *(WTF::StringImpl **)(this + 8);
      while (!*(_QWORD *)v9)
      {
        v9 = (WTF::StringImpl *)((char *)v9 + 16);
        v8 -= 16;
        if (!v8)
          goto LABEL_10;
      }
    }
    else
    {
      v9 = *(WTF::StringImpl **)(this + 8);
    }
    v10 = *(_QWORD *)(this + 8) + 16 * v7;
LABEL_9:
    if (v9 != (WTF::StringImpl *)v10)
    {
      this = (uint64_t)WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)&v71, v9, (uint64_t)&v69);
      while (1)
      {
        v9 = (WTF::StringImpl *)((char *)v9 + 16);
        if (v9 == (WTF::StringImpl *)v10)
          break;
        if (*(_QWORD *)v9)
          goto LABEL_9;
      }
    }
  }
LABEL_10:
  v11 = *(_DWORD *)(a3 + 12);
  if (v11)
  {
    v18 = *(uint64_t **)a3;
    v66 = &v18[3 * v11];
    do
    {
      this = (uint64_t)WebCore::ReferencedSVGResources::elementForResourceIDs((unsigned int *)&v68, v4, (WTF::AtomString *)v18, v18 + 1);
      if (v68)
      {
        v72[0] = (uint64_t *)v5;
        v72[1] = v68;
        v20 = *(unsigned int *)(v5 + 16);
        v19 = *(unsigned int *)(v5 + 20);
        v67 = (WebCore::Node *)v68;
        if (10 * v19 >= (unint64_t)(9 * v20)
          || (v20 <= 2 * (int)v19 ? (v62 = *(_BYTE *)(v5 + 28) == 0) : (v62 = 1), !v62))
        {
          if ((_DWORD)v20)
            v21 = 2 * v20;
          else
            v21 = 8;
          WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v6, v21);
          LODWORD(v20) = *(_DWORD *)(v5 + 16);
        }
        v22 = v20 - 1;
        v23 = *(_DWORD *)(v5 + 24);
        a2 = (WebCore::TreeScope *)*v18;
        v24 = *(_DWORD *)(*v18 + 16);
        LODWORD(v25) = (v23 ^ (v24 >> 8)) & (v20 - 1);
        v26 = *(_QWORD *)(v5 + 8);
        this = v26 + 16 * v25;
        v27 = *(WTF::StringImpl **)this;
        if (*(_QWORD *)this)
        {
          v28 = 0;
          v29 = v24 >> 8;
          v30 = *((_DWORD *)v27 + 4) >> 8;
          while (v30 != v29 || v27 != a2)
          {
            v25 = ((_DWORD)v25 + 1) & v22;
            ++v28;
            v27 = *(WTF::StringImpl **)(v26 + 16 * v25);
            if (!v27)
            {
              this = v26 + 16 * v25;
              if (v28 >= 0x80)
                *(_BYTE *)(v5 + 28) = 1;
              goto LABEL_62;
            }
            v30 = *((_DWORD *)v27 + 4) >> 8;
            v31 = (v25 + v20 - ((v23 ^ v30) & v22)) & v22;
            if (v28 > v31)
            {
              v65 = v4;
              if (v28 >= 0x80)
                *(_BYTE *)(v5 + 28) = 1;
              v32 = (WTF::StringImpl **)(v26 + 16 * v25);
              v69 = v27;
              v70 = v32[1];
              *v32 = 0;
              v32[1] = 0;
              WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::AtomString const&,WebCore::ReferencedSVGResources::addClientForTarget(WebCore::SVGElement &,WTF::AtomString const&)::$_0>(v32, (WTF::StringImpl *)*v18, v72);
              v33 = ((_DWORD)v25 + 1) & v22;
              v34 = *v6;
              a2 = (WebCore::TreeScope *)(*v6 + 16 * v33);
              v35 = *(_QWORD *)a2;
              if (*(_QWORD *)a2)
              {
                do
                {
                  ++v31;
                  v36 = (v33 + v20 - ((v23 ^ (*(_DWORD *)(v35 + 16) >> 8)) & v22)) & v22;
                  if (v31 > v36)
                  {
                    std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>(&v69, a2);
                    v34 = *v6;
                    v31 = v36;
                  }
                  v33 = ((_DWORD)v33 + 1) & v22;
                  a2 = (WebCore::TreeScope *)(v34 + 16 * v33);
                  v35 = *(_QWORD *)a2;
                }
                while (*(_QWORD *)a2);
                v27 = v69;
              }
              v69 = 0;
              v37 = *(WTF::StringImpl **)a2;
              *(_QWORD *)a2 = v27;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, a2);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = v34 + 16 * v33;
              v39 = v70;
              v70 = 0;
              v40 = *(bmalloc::api **)(v38 + 8);
              *(_QWORD *)(v38 + 8) = v39;
              v4 = v65;
              if (v40)
              {
                v41 = *((_QWORD *)v40 + 1);
                if (v41)
                {
                  *(_QWORD *)(v41 + 8) = 0;
                  v42 = (unsigned int *)*((_QWORD *)v40 + 1);
                  *((_QWORD *)v40 + 1) = 0;
                  if (v42)
                  {
                    do
                    {
                      v43 = __ldaxr(v42);
                      v44 = v43 - 1;
                    }
                    while (__stlxr(v44, v42));
                    if (!v44)
                    {
                      atomic_store(1u, v42);
                      v63 = v40;
                      WTF::fastFree((WTF *)v42, a2);
                      v40 = v63;
                    }
                  }
                }
                else
                {
                  *((_QWORD *)v40 + 1) = 0;
                }
                bmalloc::api::isoDeallocate(v40, a2);
              }
              v45 = v70;
              v70 = 0;
              if (v45)
              {
                v46 = *((_QWORD *)v45 + 1);
                if (v46)
                {
                  *(_QWORD *)(v46 + 8) = 0;
                  v47 = (unsigned int *)*((_QWORD *)v45 + 1);
                  *((_QWORD *)v45 + 1) = 0;
                  if (v47)
                  {
                    do
                    {
                      v48 = __ldaxr(v47);
                      v49 = v48 - 1;
                    }
                    while (__stlxr(v49, v47));
                    if (!v49)
                    {
                      atomic_store(1u, v47);
                      v64 = v45;
                      WTF::fastFree((WTF *)v47, a2);
                      v45 = v64;
                    }
                  }
                }
                else
                {
                  *((_QWORD *)v45 + 1) = 0;
                }
                bmalloc::api::isoDeallocate(v45, a2);
              }
              this = (uint64_t)v69;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2)
                  this = WTF::StringImpl::destroy(v69, a2);
                else
                  *(_DWORD *)v69 -= 2;
              }
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_62:
          this = (uint64_t)WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::AtomString const&,WebCore::ReferencedSVGResources::addClientForTarget(WebCore::SVGElement &,WTF::AtomString const&)::$_0>((WTF::StringImpl **)this, a2, v72);
LABEL_63:
          ++*(_DWORD *)(v5 + 20);
        }
        if (v71)
        {
          v50 = 0;
          this = *v18;
          for (i = *(_DWORD *)(*v18 + 16) >> 8; ; i = v50 + v52)
          {
            v52 = i & *((_DWORD *)v71 - 2);
            v53 = *((_QWORD *)v71 + v52);
            if (!v53)
              break;
            if (v53 != -1 && v53 == this)
            {
              if ((_DWORD)v52 != *((_DWORD *)v71 - 1))
              {
                *((_QWORD *)v71 + v52) = -1;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                  else
                    *(_DWORD *)this -= 2;
                }
                ++*((_DWORD *)v71 - 4);
                if (v71)
                  v55 = *((_DWORD *)v71 - 3) - 1;
                else
                  v55 = -1;
                *((_DWORD *)v71 - 3) = v55;
                if (v71)
                {
                  v56 = *((_DWORD *)v71 - 1);
                  if (6 * *((_DWORD *)v71 - 3) < v56 && v56 >= 9)
                    this = (uint64_t)WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)&v71, v56 >> 1, 0);
                }
              }
              break;
            }
            ++v50;
          }
        }
        if (*((_DWORD *)v67 + 6) == 2)
        {
          if ((*((_WORD *)v67 + 15) & 0x400) == 0)
            this = (uint64_t)WebCore::Node::removedLastRef(v67, a2);
        }
        else
        {
          *((_DWORD *)v67 + 6) -= 2;
        }
      }
      v18 += 3;
    }
    while (v18 != v66);
  }
  v12 = v71;
  if (!v71)
  {
    v15 = 0;
    v13 = 0;
LABEL_94:
    v14 = (WTF::AtomString *)((char *)v71 + 8 * v13);
    goto LABEL_18;
  }
  v13 = *((unsigned int *)v71 - 1);
  v14 = (WTF::AtomString *)((char *)v71 + 8 * v13);
  if (!*((_DWORD *)v71 - 3))
  {
    v15 = (WTF::AtomString *)((char *)v71 + 8 * v13);
    goto LABEL_94;
  }
  v15 = v71;
  if ((_DWORD)v13)
  {
    v16 = 8 * v13;
    v15 = v71;
    while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
    {
      v15 = (WTF::AtomString *)((char *)v15 + 8);
      v16 -= 8;
      if (!v16)
      {
        v15 = v14;
        break;
      }
    }
  }
LABEL_18:
  if (v71)
    v17 = (WTF::AtomString *)((char *)v71 + 8 * *((unsigned int *)v71 - 1));
  else
    v17 = 0;
  if (v17 != v15)
  {
    do
    {
      this = WebCore::ReferencedSVGResources::removeClientForTarget(v5, v4, v15);
      v61 = (WTF::AtomString *)((char *)v15 + 8);
      v15 = v14;
      if (v61 != v14)
      {
        v15 = v61;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 = (WTF::AtomString *)((char *)v15 + 8);
          if (v15 == v14)
          {
            v15 = v14;
            break;
          }
        }
      }
    }
    while (v15 != v17);
    v12 = v71;
  }
  if (v12)
  {
    v58 = *((unsigned int *)v12 - 1);
    if ((_DWORD)v58)
    {
      v59 = (WTF::StringImpl **)v12;
      do
      {
        v60 = *v59;
        if (*v59 != (WTF::StringImpl *)-1)
        {
          *v59 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, a2);
            else
              *(_DWORD *)v60 -= 2;
          }
        }
        ++v59;
        --v58;
      }
      while (v58);
    }
    return WTF::fastFree((WTF::AtomString *)((char *)v12 - 16), a2);
  }
  return this;
}

unsigned int *WebCore::ReferencedSVGResources::elementForResourceIDs(unsigned int *result, WebCore::TreeScope *a2, WTF::AtomString *a3, uint64_t *a4)
{
  unsigned int *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;

  v4 = result;
  if (!*(_QWORD *)a3)
    goto LABEL_2;
  if (!*(_DWORD *)(*(_QWORD *)a3 + 4))
    goto LABEL_2;
  result = (unsigned int *)*((_QWORD *)a2 + 3);
  if (!result)
    goto LABEL_2;
  WebCore::TreeScopeOrderedMap::getElementById(result, a3, a2, (uint64_t *)&v10);
  result = (unsigned int *)v10;
  if (!v10)
    goto LABEL_2;
  if ((*((_WORD *)v10 + 14) & 0x20) == 0)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef(v10, v6);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
LABEL_2:
    *(_QWORD *)v4 = 0;
    return result;
  }
  v7 = *((unsigned int *)a4 + 3);
  if ((_DWORD)v7)
  {
    v8 = *a4;
    v9 = 8 * v7;
    while (*(_QWORD *)(*((_QWORD *)v10 + 12) + 24) != *(_QWORD *)(*(_QWORD *)v8 + 24))
    {
      v8 += 8;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    *(_QWORD *)v4 = v10;
  }
  else
  {
LABEL_17:
    *(_QWORD *)v4 = 0;
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::ReferencedSVGResources::referencedClipPathElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, WebCore::Node **a3@<X8>)
{
  const WTF::AtomString *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *result;
  unsigned int *v10;
  WebCore::Node *v11;

  v7 = *((_QWORD *)a2 + 4);
  v5 = (WebCore::TreeScope *)((char *)a2 + 32);
  v6 = v7;
  if (!v7
    || !*(_DWORD *)(v6 + 4)
    || (v10 = (unsigned int *)*((_QWORD *)this + 3)) == 0
    || (WebCore::TreeScopeOrderedMap::getElementById(v10, v5, this, (uint64_t *)&v11), (result = v11) == 0))
  {
LABEL_2:
    result = 0;
    goto LABEL_3;
  }
  if ((*((_WORD *)v11 + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)v11 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    goto LABEL_2;
  }
LABEL_3:
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::ReferencedSVGResources::referencedMarkerElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, WTF::StringImpl **a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebCore::Node *v15;

  v9 = *((_QWORD *)this + 1);
  *(_DWORD *)(v9 + 24) += 2;
  result = WebCore::SVGURIReference::fragmentIdentifierFromIRIString(a2, (const WTF::String *)v9, &v14, a4, a5, a6);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  if (!v14)
  {
    *a3 = 0;
    return result;
  }
  if (!*((_DWORD *)v14 + 1))
    goto LABEL_11;
  v12 = (unsigned int *)*((_QWORD *)this + 3);
  if (!v12)
    goto LABEL_11;
  WebCore::TreeScopeOrderedMap::getElementById(v12, (const WTF::AtomString *)&v14, this, (uint64_t *)&v15);
  result = v15;
  if (!v15)
    goto LABEL_11;
  if ((*((_WORD *)v15 + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)v15 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
LABEL_11:
    result = 0;
  }
  v13 = v14;
  *a3 = result;
  v14 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::ReferencedSVGResources::referencedMaskElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, const WebCore::StyleImage *a3@<X2>, WebCore::Node **a4@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  double v8;
  double v9;
  float v10;
  WTF::StringImpl *result;
  uint64_t v12;
  unsigned int *v13;
  WebCore::Node *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];
  WebCore::Node *v18;

  v6 = *((_QWORD *)this + 1);
  *(_DWORD *)(v6 + 24) += 2;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TreeScope *, uint64_t, const WebCore::StyleImage *))(*(_QWORD *)a2 + 88))(v17, a2, v6, a3);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  result = v17[0];
  if (!v17[0] || !*((_DWORD *)v17[0] + 1))
  {
    *a4 = 0;
    goto LABEL_5;
  }
  v12 = *((_QWORD *)this + 1);
  *(_DWORD *)(v12 + 24) += 2;
  WebCore::SVGURIReference::fragmentIdentifierFromIRIString((WTF::StringImpl *)v17, (const WTF::String *)v12, &v16, v8, v9, v10);
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (v16)
  {
    if (*((_DWORD *)v16 + 1))
    {
      v13 = (unsigned int *)*((_QWORD *)this + 3);
      if (v13)
      {
        WebCore::TreeScopeOrderedMap::getElementById(v13, (const WTF::AtomString *)&v16, this, (uint64_t *)&v18);
        v14 = v18;
        if (v18)
        {
          if ((*((_WORD *)v18 + 14) & 0x20) != 0
            && *(_QWORD *)(*((_QWORD *)v18 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
          {
LABEL_22:
            v15 = v16;
            *a4 = v14;
            v16 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v7);
              else
                *(_DWORD *)v15 -= 2;
            }
            goto LABEL_25;
          }
          if (*((_DWORD *)v18 + 6) == 2)
          {
            if ((*((_WORD *)v18 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v18);
          }
          else
          {
            *((_DWORD *)v18 + 6) -= 2;
          }
        }
      }
    }
    v14 = 0;
    goto LABEL_22;
  }
  *a4 = 0;
LABEL_25:
  result = v17[0];
LABEL_5:
  v17[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Node *WebCore::ReferencedSVGResources::referencedMaskElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, WebCore::Node **a3@<X8>)
{
  unsigned int *v6;
  void *v7;
  WebCore::Node *result;
  WebCore::Node *v9;

  if (!*(_QWORD *)a2
    || !*(_DWORD *)(*(_QWORD *)a2 + 4)
    || (v6 = (unsigned int *)*((_QWORD *)this + 3)) == 0
    || (WebCore::TreeScopeOrderedMap::getElementById(v6, a2, this, (uint64_t *)&v9), (result = v9) == 0))
  {
LABEL_8:
    result = 0;
    goto LABEL_9;
  }
  if ((*((_WORD *)v9 + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)v9 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    if (*((_DWORD *)v9 + 6) == 2)
    {
      if ((*((_WORD *)v9 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9, v7);
    }
    else
    {
      *((_DWORD *)v9 + 6) -= 2;
    }
    goto LABEL_8;
  }
LABEL_9:
  *a3 = result;
  return result;
}

WTF::StringImpl *WebCore::ReferencedSVGResources::referencedPaintServerElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, unsigned int *a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  uint64_t v9;
  void *v10;
  WTF::StringImpl *result;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl ***v16;
  void *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl ***v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;

  v9 = *((_QWORD *)this + 1);
  *(_DWORD *)(v9 + 24) += 2;
  WebCore::SVGURIReference::fragmentIdentifierFromIRIString(a2, (const WTF::String *)v9, &v36, a4, a5, a6);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
  result = v36;
  if (!v36 || !*((_DWORD *)v36 + 1))
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_5;
  }
  v12 = (WTF::StringImpl **)WebCore::SVGNames::linearGradientTag;
  if (WebCore::SVGNames::linearGradientTag)
    ++*(_DWORD *)WebCore::SVGNames::linearGradientTag;
  v13 = (WTF::StringImpl **)WebCore::SVGNames::radialGradientTag;
  if (WebCore::SVGNames::radialGradientTag)
    ++*(_DWORD *)WebCore::SVGNames::radialGradientTag;
  v14 = (WTF::StringImpl **)WebCore::SVGNames::patternTag;
  if (WebCore::SVGNames::patternTag)
    ++*(_DWORD *)WebCore::SVGNames::patternTag;
  v15 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)0x18);
  v16 = v15;
  v34 = 3;
  v33 = v15;
  if (v12)
    ++*(_DWORD *)v12;
  *v15 = v12;
  if (v13)
    ++*(_DWORD *)v13;
  v15[1] = v13;
  if (v14)
    ++*(_DWORD *)v14;
  v15[2] = v14;
  v35 = 3;
  WebCore::ReferencedSVGResources::elementForResourceIDs(a3, this, (WTF::AtomString *)&v36, (uint64_t *)&v33);
  v18 = *v16;
  *v16 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
  v19 = v16[1];
  v16[1] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  v20 = v16[2];
  v16[2] = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
      WTF::fastFree(v25, v26);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  WTF::fastFree((WTF *)v16, v17);
  if (!v14)
  {
LABEL_34:
    if (v13)
      goto LABEL_35;
    goto LABEL_37;
  }
  if (*(_DWORD *)v14 != 1)
  {
    --*(_DWORD *)v14;
    goto LABEL_34;
  }
  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
  WTF::fastFree(v27, v28);
  if (v13)
  {
LABEL_35:
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v13);
      WTF::fastFree(v29, v30);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
LABEL_37:
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
      WTF::fastFree(v31, v32);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  result = v36;
LABEL_5:
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Node *WebCore::ReferencedSVGResources::referencedFilterElement@<X0>(WebCore::ReferencedSVGResources *this@<X0>, WebCore::TreeScope *a2@<X1>, WebCore::Node **a3@<X8>)
{
  const WTF::AtomString *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *result;
  unsigned int *v10;
  WebCore::Node *v11;

  v7 = *((_QWORD *)a2 + 3);
  v5 = (WebCore::TreeScope *)((char *)a2 + 24);
  v6 = v7;
  if (!v7
    || !*(_DWORD *)(v6 + 4)
    || (v10 = (unsigned int *)*((_QWORD *)this + 3)) == 0
    || (WebCore::TreeScopeOrderedMap::getElementById(v10, v5, this, (uint64_t *)&v11), (result = v11) == 0))
  {
LABEL_2:
    result = 0;
    goto LABEL_3;
  }
  if ((*((_WORD *)v11 + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)v11 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
    goto LABEL_2;
  }
LABEL_3:
  *a3 = result;
  return result;
}

uint64_t WebCore::ReferencedSVGResources::referencedClipperRenderer(WebCore::ReferencedSVGResources *this, WebCore::TreeScope *a2, const WebCore::ReferencePathOperation *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  v3 = *((_QWORD *)a2 + 4);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 4))
    {
      v6 = WebCore::TreeScope::svgResourcesMap(this);
      v7 = *(_QWORD *)(v6 + 48);
      if (v7)
      {
        v8 = *(_DWORD *)(v6 + 56);
        v9 = v8 - 1;
        v10 = *(_DWORD *)(v6 + 64);
        v11 = *((_QWORD *)a2 + 4);
        v12 = *(_DWORD *)(v11 + 16);
        v13 = (v10 ^ (v12 >> 8)) & (v8 - 1);
        v14 = *(_QWORD *)(v7 + 16 * v13);
        if (v14)
        {
          v15 = v12 >> 8;
          v16 = -1;
          while (1)
          {
            v17 = *(_DWORD *)(v14 + 16);
            if (++v16 > (((_DWORD)v13 + v8 - ((v10 ^ (v17 >> 8)) & v9)) & v9))
              break;
            if (v14 == v11 && v17 >> 8 == v15)
            {
              v18 = *(_QWORD *)(v7 + 16 * v13 + 8);
              if (!v18)
                return 0;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v18 + 216) + 56))(v18 + 216) == 7)
                return v18;
              else
                return 0;
            }
            result = 0;
            v13 = ((_DWORD)v13 + 1) & v9;
            v14 = *(_QWORD *)(v7 + 16 * v13);
            if (!v14)
              return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RegionContext::popTransform(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  if (v1)
    *(_DWORD *)(this + 28) = v1 - 1;
  return this;
}

__int128 *WebCore::RegionContext::pushClip(WebCore::RegionContext *this, const WebCore::Path *a2)
{
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v28[2];

  v3 = *((_DWORD *)a2 + 16);
  v4 = 0.0;
  if (v3 == 2)
  {
    v8 = *((_QWORD *)a2 + 1);
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    if (v8)
      v7 = (*(float (**)(uint64_t, float, float, float, float))(*(_QWORD *)v8 + 240))(v8, 0.0, 0.0, 0.0, 0.0);
  }
  else
  {
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    if (v3 == 1)
      v7 = WebCore::PathStream::computeBoundingRect((uint64_t)a2 + 8, 1);
  }
  v9 = floorf(v7);
  v10 = 2147500000.0;
  if (v9 < 2147500000.0)
  {
    v10 = -2147500000.0;
    if (v9 > -2147500000.0)
      v10 = (float)(int)v9;
  }
  v11 = floorf(v6);
  v12 = 2147500000.0;
  if (v11 < 2147500000.0)
  {
    v12 = -2147500000.0;
    if (v11 > -2147500000.0)
      v12 = (float)(int)v11;
  }
  v13 = v5 + v6;
  v14 = ceilf(v4 + v7);
  v15 = 2147500000.0;
  if (v14 < 2147500000.0)
  {
    v15 = -2147500000.0;
    if (v14 > -2147500000.0)
      v15 = (float)(int)v14;
  }
  v16 = ceilf(v13);
  v17 = 2147500000.0;
  if (v16 < 2147500000.0)
  {
    v17 = -2147500000.0;
    if (v16 > -2147500000.0)
      v17 = (float)(int)v16;
  }
  v18 = 0x7FFFFFFFLL;
  v19 = 0x80000000;
  if (v10 > -2147500000.0)
    v19 = (int)v10;
  if (v10 < 2147500000.0)
    v18 = v19;
  v20 = 0x7FFFFFFF00000000;
  v21 = 0x8000000000000000;
  if (v12 > -2147500000.0)
    v21 = (unint64_t)(int)v12 << 32;
  if (v12 < 2147500000.0)
    v20 = v21;
  v22 = v15 - v10;
  v23 = v17 - v12;
  v24 = 0x7FFFFFFFLL;
  v25 = 0x80000000;
  if (v22 > -2147500000.0)
    v25 = (int)v22;
  if (v22 < 2147500000.0)
    v24 = v25;
  if (v23 >= 2147500000.0)
  {
    v26 = 0x7FFFFFFF00000000;
  }
  else if (v23 <= -2147500000.0)
  {
    v26 = 0x8000000000000000;
  }
  else
  {
    v26 = (unint64_t)(int)v23 << 32;
  }
  v28[0] = v20 | v18;
  v28[1] = v26 | v24;
  return WebCore::RegionContext::pushClip(this, (const WebCore::IntRect *)v28);
}

uint64_t WebCore::RegionContext::popClip(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 44);
  if (v1)
    *(_DWORD *)(this + 44) = v1 - 1;
  return this;
}

void WebCore::RayPathOperation::~RayPathOperation(WebCore::RayPathOperation *this)
{
  if (*((_BYTE *)this + 40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 9));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
}

void WebCore::RayPathOperation::~RayPathOperation(WebCore::RayPathOperation *this, void *a2)
{
  if (*((_BYTE *)this + 40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 9));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::RayPathOperation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char isCalculatedEqual;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 12))
    return 0;
  if (*(float *)(a1 + 20) != *(float *)(a2 + 20))
    return 0;
  if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    return 0;
  if (*(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != *(unsigned __int8 *)(a2 + 32) || (*(_BYTE *)(a1 + 33) != 0) != (*(_BYTE *)(a2 + 33) != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v10 = a2;
      v11 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 28), (const WebCore::Length *)(a2 + 28));
      a2 = v10;
      a1 = v11;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v3 = *(float *)(a1 + 28);
      if (!*(_BYTE *)(a1 + 34))
        v3 = (float)SLODWORD(v3);
      v4 = *(float *)(a2 + 28);
      if (!*(_BYTE *)(a2 + 34))
        v4 = (float)SLODWORD(v4);
      if (v3 != v4)
        return 0;
    }
  }
  v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != *(unsigned __int8 *)(a2 + 40) || (*(_BYTE *)(a1 + 41) != 0) != (*(_BYTE *)(a2 + 41) != 0))
    return 0;
  if (v5 == 13)
    return 1;
  if (v5 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 36), (const WebCore::Length *)(a2 + 36));
  v6 = *(float *)(a1 + 36);
  if (!*(_BYTE *)(a1 + 42))
    v6 = (float)*(int *)(a1 + 36);
  v7 = *(float *)(a2 + 36);
  if (!*(_BYTE *)(a2 + 42))
    v7 = (float)SLODWORD(v7);
  return v6 == v7;
}

uint64_t WebCore::LegacyRootInlineBox::isRootInlineBox(WebCore::LegacyRootInlineBox *this)
{
  return 1;
}

void WebCore::ReferencePathOperation::~ReferencePathOperation(WebCore::ReferencePathOperation *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;

  if (*((_BYTE *)this + 112))
  {
    v3 = *((unsigned int *)this + 26);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v3])(&v6, (char *)this + 48);
    *((_DWORD *)this + 26) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v6;

  if (*((_BYTE *)this + 112))
  {
    v3 = *((unsigned int *)this + 26);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_9[v3])(&v6, (char *)this + 48);
    *((_DWORD *)this + 26) = -1;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ReferencePathOperation::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12))
    return WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), a3);
  else
    return 0;
}

uint64_t WebCore::ReferencePathOperation::getPath@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(result + 112))
  {
    *(_DWORD *)(a2 + 64) = 0;
    v3 = *(unsigned int *)(result + 104);
    if ((_DWORD)v3 == -1)
    {
      *(_DWORD *)(a2 + 64) = -1;
    }
    else
    {
      v4 = a2 + 8;
      result = ((uint64_t (*)(uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v3])(&v4);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  return result;
}

void WebCore::CSSSVGResourceElementClient::~CSSSVGResourceElementClient(WebCore::CSSSVGResourceElementClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CSSSVGResourceElementClient::renderer(WebCore::CSSSVGResourceElementClient *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  _QWORD *v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  _DWORD *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  int64_t v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  unint64_t *v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  BOOL v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  _DWORD *v148;
  _DWORD *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _DWORD *v159;
  unsigned int v160;
  _QWORD *v161;
  uint64_t v162;
  _DWORD *v163;
  unsigned int v164;
  int *v165;
  int v166;
  int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  unsigned int v191;
  BOOL v192;
  _QWORD *v193;
  _DWORD **v194;
  _DWORD *v195;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v68 = *(_DWORD *)(a2 - 12);
        v69 = *(_DWORD *)(v8 + 4);
        if (v68 >= v69)
        {
          if (v68 != v69)
            return result;
          v169 = *(_DWORD *)(a2 - 16);
          if (*(_DWORD *)v8 | v169
            || (v70 = *(_QWORD *)(v8 + 8),
                *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12) >= *(unsigned __int8 *)(v70 + 12)))
          {
            if (v169 != 1)
              return result;
            if (*(_DWORD *)v8 != 1)
              return result;
            v70 = *(_QWORD *)(v8 + 8);
            if (*(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12) <= *(unsigned __int8 *)(v70 + 12))
              return result;
          }
        }
        else
        {
          v70 = *(_QWORD *)(v8 + 8);
        }
        v71 = *(_QWORD *)v8;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
        v72 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = 0;
        v73 = *(_DWORD **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v72;
        if (v73)
        {
          if (!*v73)
          {
            __break(0xC471u);
            JUMPOUT(0x1963686ACLL);
          }
          --*v73;
        }
        v74 = *(_DWORD **)(a2 - 8);
        *(_QWORD *)(a2 - 16) = v71;
        *(_QWORD *)(a2 - 8) = v70;
        if (v74)
        {
          if (!*v74)
          {
            __break(0xC471u);
            JUMPOUT(0x1963686CCLL);
          }
          --*v74;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(a2 - 16));
      case 4uLL:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5uLL:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,0>(v8, v8 + 16, v8 + 32, v8 + 48, a2 - 16);
      default:
        if (v9 <= 383)
        {
          v75 = (_QWORD *)(v8 + 16);
          v76 = v8 == a2 || v75 == (_QWORD *)a2;
          v77 = v76;
          if ((a4 & 1) == 0)
          {
            if ((v77 & 1) == 0)
            {
              v170 = 0;
              v171 = v8 - 16;
              v172 = -1;
              v173 = 1;
              v174 = v8;
              do
              {
                v175 = v170;
                v170 = v173;
                v176 = *(_DWORD *)(v174 + 20);
                v177 = *(_DWORD *)(v8 + 16 * v175 + 4);
                if (v176 < v177
                  || v176 == v177
                  && (!(*(_DWORD *)v174 | *(_DWORD *)v75)
                   && *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v170 + 8) + 12) < *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v175 + 8) + 12)
                   || (*(_DWORD *)v75 == 1 ? (v192 = *(_DWORD *)v174 == 1) : (v192 = 0),
                       v192
                    && *(unsigned __int8 *)(*(_QWORD *)(v174 + 24) + 12) > *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v175 + 8) + 12))))
                {
                  v178 = *v75;
                  v179 = v172;
                  v180 = *(_QWORD *)(v174 + 24);
                  *(_QWORD *)(v174 + 24) = 0;
                  v181 = v171;
                  v182 = v172;
                  v183 = v171;
                  if ((_DWORD)v178 == 1)
                  {
                    while (1)
                    {
                      v184 = *(_QWORD *)(v183 + 16);
                      v185 = *(_QWORD *)(v183 + 24);
                      *(_QWORD *)(v183 + 24) = 0;
                      *(_QWORD *)(v183 + 32) = v184;
                      v186 = *(_DWORD **)(v183 + 40);
                      *(_QWORD *)(v183 + 40) = v185;
                      if (v186)
                      {
                        if (!*v186)
                          goto LABEL_454;
                        --*v186;
                      }
                      if (!v182)
                        goto LABEL_450;
                      v187 = *(_DWORD *)(v183 + 4);
                      if (v187 <= HIDWORD(v178)
                        && (v187 != HIDWORD(v178)
                         || *(_DWORD *)v183 != 1
                         || *(unsigned __int8 *)(v180 + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v183 + 8)
                                                                                                + 12)))
                      {
                        break;
                      }
                      v183 -= 16;
                      ++v182;
                    }
                    v193 = (_QWORD *)(v183 + 16);
                    v194 = (_DWORD **)(v183 + 24);
                  }
                  else
                  {
                    while (1)
                    {
                      v188 = *(_QWORD *)(v181 + 16);
                      v189 = *(_QWORD *)(v181 + 24);
                      *(_QWORD *)(v181 + 24) = 0;
                      *(_QWORD *)(v181 + 32) = v188;
                      v190 = *(_DWORD **)(v181 + 40);
                      *(_QWORD *)(v181 + 40) = v189;
                      if (v190)
                      {
                        if (!*v190)
                        {
LABEL_454:
                          __break(0xC471u);
                          JUMPOUT(0x19636848CLL);
                        }
                        --*v190;
                      }
                      if (!v179)
                        goto LABEL_450;
                      v191 = *(_DWORD *)(v181 + 4);
                      if (v191 <= HIDWORD(v178)
                        && (v191 != HIDWORD(v178)
                         || *(_DWORD *)v181 | v178
                         || *(unsigned __int8 *)(v180 + 12) >= *(unsigned __int8 *)(*(_QWORD *)(v181 + 8)
                                                                                                + 12)))
                      {
                        break;
                      }
                      v181 -= 16;
                      ++v179;
                    }
                    v193 = (_QWORD *)(v181 + 16);
                    v194 = (_DWORD **)(v181 + 24);
                  }
                  *v193 = v178;
                  v195 = *v194;
                  *v194 = (_DWORD *)v180;
                  if (v195)
                  {
                    if (!*v195)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19636866CLL);
                    }
                    --*v195;
                  }
                }
                v174 = v8 + 16 * v170;
                v173 = v170 + 1;
                v75 = (_QWORD *)(v8 + 16 * (v170 + 1));
                v171 += 16;
                --v172;
              }
              while (v75 != (_QWORD *)a2);
            }
            return result;
          }
          if ((v77 & 1) != 0)
            return result;
          v78 = 0;
          v79 = (_QWORD *)v8;
          while (1)
          {
            v80 = v79;
            v79 = v75;
            v81 = *((_DWORD *)v80 + 5);
            v82 = *((_DWORD *)v80 + 1);
            if (v81 < v82)
              break;
            if (v81 == v82)
            {
              if (!(*(_DWORD *)v80 | *(_DWORD *)v79))
              {
                v83 = v80[3];
                if (*(unsigned __int8 *)(v83 + 12) < *(unsigned __int8 *)(v80[1] + 12))
                  goto LABEL_229;
              }
              if (*(_DWORD *)v79 == 1 && *(_DWORD *)v80 == 1)
              {
                v83 = v80[3];
                if (*(unsigned __int8 *)(v83 + 12) > *(unsigned __int8 *)(v80[1] + 12))
                  goto LABEL_229;
              }
            }
LABEL_281:
            v75 = v79 + 2;
            v78 += 16;
            if (v79 + 2 == (_QWORD *)a2)
              return result;
          }
          v83 = v80[3];
LABEL_229:
          v84 = *v79;
          v80[3] = 0;
          v85 = (_DWORD *)v79[1];
          *v79 = *v80;
          v86 = v80[1];
          v80[1] = 0;
          v79[1] = v86;
          if ((_DWORD)v84 == 1)
          {
            if (v85)
            {
              if (!*v85)
                goto LABEL_465;
              --*v85;
            }
            v87 = (_QWORD *)v8;
            if (v80 == (_QWORD *)v8)
              goto LABEL_278;
            v88 = v80 - 2;
            v89 = *((_DWORD *)v80 - 3);
            if (v89 > HIDWORD(v84))
            {
              v90 = *(v80 - 1);
              goto LABEL_236;
            }
            if (v89 == HIDWORD(v84) && *v88 == 1)
            {
              v90 = *(v80 - 1);
              if (*(unsigned __int8 *)(v83 + 12) > *(unsigned __int8 *)(v90 + 12))
              {
LABEL_236:
                v91 = *(v80 - 2);
                *(v80 - 1) = 0;
                *v80 = v91;
                v80[1] = v90;
                v92 = v78;
                v87 = (_QWORD *)v8;
                if (v88 != (_DWORD *)v8)
                {
                  while (1)
                  {
                    v93 = v8 + v92;
                    v94 = *(_DWORD *)(v8 + v92 - 28);
                    if (v94 <= HIDWORD(v84))
                    {
                      if (v94 != HIDWORD(v84) || *(_DWORD *)(v93 - 32) != 1)
                        goto LABEL_276;
                      result = *(unsigned __int8 *)(v83 + 12);
                      v96 = v8 + v92;
                      v95 = *(_QWORD *)(v8 + v92 - 24);
                      if (result <= *(unsigned __int8 *)(v95 + 12))
                        goto LABEL_277;
                    }
                    else
                    {
                      v95 = *(_QWORD *)(v93 - 24);
                    }
                    v88 -= 4;
                    *(_QWORD *)(v93 - 16) = *(_QWORD *)(v93 - 32);
                    v97 = v8 + v92;
                    *(_QWORD *)(v97 - 24) = 0;
                    *(_QWORD *)(v97 - 8) = v95;
                    v92 -= 16;
                    if (v92 == 16)
                      goto LABEL_267;
                  }
                }
                goto LABEL_278;
              }
            }
LABEL_275:
            v87 = v80;
LABEL_278:
            v107 = (_DWORD *)v87[1];
            *v87 = v84;
            v87[1] = v83;
            if (v107)
            {
              if (!*v107)
              {
                __break(0xC471u);
                JUMPOUT(0x19636860CLL);
              }
              --*v107;
            }
            goto LABEL_281;
          }
          if (v85)
          {
            if (!*v85)
            {
LABEL_465:
              __break(0xC471u);
              JUMPOUT(0x1963685ECLL);
            }
            --*v85;
          }
          v87 = (_QWORD *)v8;
          if (v80 == (_QWORD *)v8)
            goto LABEL_278;
          v88 = v80 - 2;
          v99 = *((_DWORD *)v80 - 3);
          if (v99 <= HIDWORD(v84))
          {
            if (v99 != HIDWORD(v84))
              goto LABEL_275;
            if (*v88 | v84)
              goto LABEL_275;
            v100 = *(v80 - 1);
            if (*(unsigned __int8 *)(v83 + 12) >= *(unsigned __int8 *)(v100 + 12))
              goto LABEL_275;
          }
          else
          {
            v100 = *(v80 - 1);
          }
          v101 = *(v80 - 2);
          *(v80 - 1) = 0;
          *v80 = v101;
          v80[1] = v100;
          v102 = v78;
          v87 = (_QWORD *)v8;
          if (v88 != (_DWORD *)v8)
          {
            while (1)
            {
              v103 = v8 + v102;
              v104 = *(_DWORD *)(v8 + v102 - 28);
              if (v104 <= HIDWORD(v84))
              {
                if (v104 != HIDWORD(v84) || *(_DWORD *)(v103 - 32) | v84)
                {
LABEL_276:
                  v87 = v88;
                  goto LABEL_278;
                }
                result = *(unsigned __int8 *)(v83 + 12);
                v96 = v8 + v102;
                v105 = *(_QWORD *)(v8 + v102 - 24);
                if (result >= *(unsigned __int8 *)(v105 + 12))
                {
LABEL_277:
                  v87 = (_QWORD *)(v96 - 16);
                  goto LABEL_278;
                }
              }
              else
              {
                v105 = *(_QWORD *)(v103 - 24);
              }
              v88 -= 4;
              *(_QWORD *)(v103 - 16) = *(_QWORD *)(v103 - 32);
              v106 = v8 + v102;
              *(_QWORD *)(v106 - 24) = 0;
              *(_QWORD *)(v106 - 8) = v105;
              v102 -= 16;
              if (v102 == 16)
              {
LABEL_267:
                v87 = (_QWORD *)v8;
                goto LABEL_278;
              }
            }
          }
          goto LABEL_278;
        }
        if (a3)
        {
          v11 = v10 >> 1;
          v12 = (unint64_t *)(v8 + 16 * (v10 >> 1));
          if ((unint64_t)v9 < 0x801)
          {
            result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)(v7 + 16 * (v10 >> 1)), (unint64_t *)v7, (unint64_t *)(a2 - 16));
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)v7, (unint64_t *)(v7 + 16 * (v10 >> 1)), (unint64_t *)(a2 - 16));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)(v7 + 16), v12 - 2, (unint64_t *)(a2 - 32));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)(v7 + 32), (unint64_t *)(v7 + 16 + 16 * v11), (unint64_t *)(a2 - 48));
            result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(v12 - 2, v12, (unint64_t *)(v7 + 16 + 16 * v11));
            v13 = *(_QWORD *)v7;
            v14 = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)v7 = *v12;
            v15 = (_QWORD *)(v7 + 8 + 16 * v11);
            v16 = (_DWORD *)*v15;
            *v15 = 0;
            v17 = *(_DWORD **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v16;
            if (v17)
            {
              if (!*v17)
              {
                __break(0xC471u);
                JUMPOUT(0x19636850CLL);
              }
              --*v17;
            }
            *v12 = v13;
            v18 = (_DWORD *)*v15;
            *v15 = v14;
            if (v18)
            {
              if (!*v18)
              {
                __break(0xC471u);
                JUMPOUT(0x19636852CLL);
              }
              --*v18;
            }
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v19 = *(_DWORD *)(v7 - 12);
            v20 = *(_DWORD *)(v7 + 4);
            if (v19 >= v20)
            {
              if (v19 != v20
                || ((v21 = *(_DWORD *)(v7 - 16), *(_DWORD *)v7 | v21)
                 || *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 12) >= *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + 12))
                && (v21 != 1
                 || *(_DWORD *)v7 != 1
                 || *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + 12)))
              {
                v47 = *(_QWORD *)v7;
                v48 = *(_QWORD *)(v7 + 8);
                *(_QWORD *)(v7 + 8) = 0;
                v49 = *(_DWORD *)(a2 - 12);
                if (v49 > HIDWORD(v47)
                  || v49 == HIDWORD(v47)
                  && ((v52 = *(_DWORD *)(a2 - 16), !(v52 | v47))
                   && *(unsigned __int8 *)(v48 + 12) < *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12)
                   || (_DWORD)v47 == 1
                   && v52 == 1
                   && *(unsigned __int8 *)(v48 + 12) > *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12)))
                {
                  v8 = v7 + 16;
                  if (v7 + 16 == a2)
                    goto LABEL_450;
                  if ((_DWORD)v47 == 1)
                  {
                    while (1)
                    {
                      v50 = *(_DWORD *)(v8 + 4);
                      if (v50 > HIDWORD(v47)
                        || v50 == HIDWORD(v47)
                        && *(_DWORD *)v8 == 1
                        && *(unsigned __int8 *)(v48 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12))
                      {
                        break;
                      }
                      v8 += 16;
                      if (v8 == a2)
                        goto LABEL_450;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v51 = *(_DWORD *)(v8 + 4);
                      if (v51 > HIDWORD(v47)
                        || v51 == HIDWORD(v47)
                        && !(*(_DWORD *)v8 | v47)
                        && *(unsigned __int8 *)(v48 + 12) < *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12))
                      {
                        break;
                      }
                      v8 += 16;
                      if (v8 == a2)
                        goto LABEL_450;
                    }
                  }
                }
                else
                {
                  v8 = v7 + 16;
                  if (v7 + 16 < a2)
                  {
                    if ((_DWORD)v47 == 1)
                    {
                      do
                      {
                        v53 = *(_DWORD *)(v8 + 4);
                        if (v53 > HIDWORD(v47)
                          || v53 == HIDWORD(v47)
                          && *(_DWORD *)v8 == 1
                          && *(unsigned __int8 *)(v48 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v8 + 8)
                                                                                               + 12))
                        {
                          break;
                        }
                        v8 += 16;
                      }
                      while (v8 < a2);
                    }
                    else
                    {
                      do
                      {
                        v54 = *(_DWORD *)(v8 + 4);
                        if (v54 > HIDWORD(v47)
                          || v54 == HIDWORD(v47)
                          && !(*(_DWORD *)v8 | v47)
                          && *(unsigned __int8 *)(v48 + 12) < *(unsigned __int8 *)(*(_QWORD *)(v8 + 8)
                                                                                               + 12))
                        {
                          break;
                        }
                        v8 += 16;
                      }
                      while (v8 < a2);
                    }
                  }
                }
                v55 = a2;
                if (v8 >= a2)
                  goto LABEL_163;
                if (a2 == v7)
                  goto LABEL_450;
                v55 = a2 - 16;
                while (1)
                {
                  v56 = *(_DWORD *)(v55 + 4);
                  if (v56 <= HIDWORD(v47)
                    && (v56 != HIDWORD(v47)
                     || (*(_DWORD *)v55 | v47
                      || *(unsigned __int8 *)(v48 + 12) >= *(unsigned __int8 *)(*(_QWORD *)(v55 + 8) + 12))
                     && ((_DWORD)v47 != 1
                      || *(_DWORD *)v55 != 1
                      || *(unsigned __int8 *)(v48 + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v55 + 8) + 12))))
                  {
                    break;
                  }
                  v76 = v55 == v7;
                  v55 -= 16;
                  if (v76)
                    goto LABEL_450;
                }
LABEL_163:
                while (v8 < v55)
                {
                  v58 = *(_QWORD *)v8;
                  v57 = *(_QWORD *)(v8 + 8);
                  *(_QWORD *)(v8 + 8) = 0;
                  *(_QWORD *)v8 = *(_QWORD *)v55;
                  v59 = *(_QWORD *)(v55 + 8);
                  *(_QWORD *)(v55 + 8) = 0;
                  v60 = *(_DWORD **)(v8 + 8);
                  *(_QWORD *)(v8 + 8) = v59;
                  if (v60)
                  {
                    if (!*v60)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963685ACLL);
                    }
                    --*v60;
                  }
                  v61 = *(_DWORD **)(v55 + 8);
                  *(_QWORD *)v55 = v58;
                  *(_QWORD *)(v55 + 8) = v57;
                  if (v61)
                  {
                    if (!*v61)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1963685CCLL);
                    }
                    --*v61;
                  }
                  v8 += 16;
                  if (v8 == a2)
                    goto LABEL_450;
                  if ((_DWORD)v47 == 1)
                  {
                    while (1)
                    {
                      v62 = *(_DWORD *)(v8 + 4);
                      if (v62 > HIDWORD(v47)
                        || v62 == HIDWORD(v47)
                        && *(_DWORD *)v8 == 1
                        && *(unsigned __int8 *)(v48 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12))
                      {
                        break;
                      }
                      v8 += 16;
                      if (v8 == a2)
                        goto LABEL_450;
                    }
                  }
                  else
                  {
                    while (1)
                    {
                      v63 = *(_DWORD *)(v8 + 4);
                      if (v63 > HIDWORD(v47)
                        || v63 == HIDWORD(v47)
                        && !(*(_DWORD *)v8 | v47)
                        && *(unsigned __int8 *)(v48 + 12) < *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12))
                      {
                        break;
                      }
                      v8 += 16;
                      if (v8 == a2)
                        goto LABEL_450;
                    }
                  }
                  if (v55 == v7)
                    goto LABEL_450;
                  v55 -= 16;
                  while (1)
                  {
                    v64 = *(_DWORD *)(v55 + 4);
                    if (v64 <= HIDWORD(v47)
                      && (v64 != HIDWORD(v47)
                       || (*(_DWORD *)v55 | v47
                        || *(unsigned __int8 *)(v48 + 12) >= *(unsigned __int8 *)(*(_QWORD *)(v55 + 8)
                                                                                              + 12))
                       && ((_DWORD)v47 != 1
                        || *(_DWORD *)v55 != 1
                        || *(unsigned __int8 *)(v48 + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v55 + 8)
                                                                                              + 12))))
                    {
                      break;
                    }
                    v76 = v55 == v7;
                    v55 -= 16;
                    if (v76)
                      goto LABEL_450;
                  }
                }
                if (v8 - 16 != v7)
                {
                  *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
                  v65 = *(_QWORD *)(v8 - 8);
                  *(_QWORD *)(v8 - 8) = 0;
                  v66 = *(_DWORD **)(v7 + 8);
                  *(_QWORD *)(v7 + 8) = v65;
                  if (v66)
                  {
                    if (!*v66)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19636870CLL);
                    }
                    --*v66;
                  }
                }
                a4 = 0;
                v67 = *(_DWORD **)(v8 - 8);
                *(_QWORD *)(v8 - 16) = v47;
                *(_QWORD *)(v8 - 8) = v48;
                if (v67)
                {
                  if (!*v67)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1963686ECLL);
                  }
                  a4 = 0;
                  --*v67;
                }
                continue;
              }
            }
          }
          v23 = *(_QWORD *)v7;
          v22 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          v24 = v7 + 16;
          if (v7 + 16 == a2)
            goto LABEL_450;
          if ((_DWORD)v23 == 1)
          {
            while (1)
            {
              v25 = *(_DWORD *)(v24 + 4);
              if (v25 >= HIDWORD(v23)
                && (v25 != HIDWORD(v23)
                 || *(_DWORD *)v24 != 1
                 || *(unsigned __int8 *)(*(_QWORD *)(v24 + 8) + 12) <= *(unsigned __int8 *)(v22 + 12)))
              {
                break;
              }
              v24 += 16;
              if (v24 == a2)
                goto LABEL_450;
            }
          }
          else
          {
            while (1)
            {
              v26 = *(_DWORD *)(v24 + 4);
              if (v26 >= HIDWORD(v23)
                && (v26 != HIDWORD(v23)
                 || *(_DWORD *)v24 | v23
                 || *(unsigned __int8 *)(*(_QWORD *)(v24 + 8) + 12) >= *(unsigned __int8 *)(v22 + 12)))
              {
                break;
              }
              v24 += 16;
              if (v24 == a2)
                goto LABEL_450;
            }
          }
          if (v24 - 16 == v7)
          {
            v27 = a2;
            if (v24 < a2)
            {
              v30 = *(_DWORD *)(a2 - 12);
              v27 = a2 - 16;
              if (v30 >= HIDWORD(v23))
              {
                v31 = a2 - 8;
                v27 = a2 - 16;
                while (1)
                {
                  v32 = (_DWORD *)(v31 - 8);
                  if (v30 != HIDWORD(v23))
                    goto LABEL_67;
                  if (!(*v32 | v23)
                    && *(unsigned __int8 *)(*(_QWORD *)v31 + 12) < *(unsigned __int8 *)(v22 + 12))
                  {
                    v27 = v31 - 8;
                    break;
                  }
                  if ((_DWORD)v23 == 1 && *v32 == 1)
                  {
                    if (*(unsigned __int8 *)(*(_QWORD *)v31 + 12) > *(unsigned __int8 *)(v22 + 12)
                      || v24 >= (unint64_t)v32)
                    {
                      break;
                    }
                  }
                  else
                  {
LABEL_67:
                    if (v24 >= (unint64_t)v32)
                      break;
                  }
                  v27 -= 16;
                  v30 = *(_DWORD *)(v31 - 20);
                  v31 -= 16;
                  if (v30 < HIDWORD(v23))
                  {
                    v27 = v31 - 8;
                    break;
                  }
                }
              }
            }
          }
          else
          {
            if (a2 == v7)
              goto LABEL_450;
            v27 = a2 - 16;
            if ((_DWORD)v23 == 1)
            {
              while (1)
              {
                v28 = *(_DWORD *)(v27 + 4);
                if (v28 < HIDWORD(v23)
                  || v28 == HIDWORD(v23)
                  && *(_DWORD *)v27 == 1
                  && *(unsigned __int8 *)(*(_QWORD *)(v27 + 8) + 12) > *(unsigned __int8 *)(v22 + 12))
                {
                  break;
                }
                v76 = v27 == v7;
                v27 -= 16;
                if (v76)
                  goto LABEL_450;
              }
            }
            else
            {
              while (1)
              {
                v29 = *(_DWORD *)(v27 + 4);
                if (v29 < HIDWORD(v23)
                  || v29 == HIDWORD(v23)
                  && !(*(_DWORD *)v27 | v23)
                  && *(unsigned __int8 *)(*(_QWORD *)(v27 + 8) + 12) < *(unsigned __int8 *)(v22 + 12))
                {
                  break;
                }
                v76 = v27 == v7;
                v27 -= 16;
                if (v76)
                  goto LABEL_450;
              }
            }
          }
          v8 = v24;
          if (v24 < v27)
          {
            v8 = v24;
            v34 = v27;
            while (1)
            {
              v36 = *(_QWORD *)v8;
              v35 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = 0;
              *(_QWORD *)v8 = *(_QWORD *)v34;
              v37 = *(_QWORD *)(v34 + 8);
              *(_QWORD *)(v34 + 8) = 0;
              v38 = *(_DWORD **)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v37;
              if (v38)
              {
                if (!*v38)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19636844CLL);
                }
                --*v38;
              }
              v39 = *(_DWORD **)(v34 + 8);
              *(_QWORD *)v34 = v36;
              *(_QWORD *)(v34 + 8) = v35;
              if (v39)
              {
                if (!*v39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19636846CLL);
                }
                --*v39;
              }
              v8 += 16;
              if (v8 == a2)
                break;
              if ((_DWORD)v23 == 1)
              {
                while (1)
                {
                  v40 = *(_DWORD *)(v8 + 4);
                  if (v40 >= HIDWORD(v23)
                    && (v40 != HIDWORD(v23)
                     || *(_DWORD *)v8 != 1
                     || *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12) <= *(unsigned __int8 *)(v22 + 12)))
                  {
                    break;
                  }
                  v8 += 16;
                  if (v8 == a2)
                    goto LABEL_450;
                }
              }
              else
              {
                while (1)
                {
                  v41 = *(_DWORD *)(v8 + 4);
                  if (v41 >= HIDWORD(v23)
                    && (v41 != HIDWORD(v23)
                     || *(_DWORD *)v8 | v23
                     || *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + 12) >= *(unsigned __int8 *)(v22 + 12)))
                  {
                    break;
                  }
                  v8 += 16;
                  if (v8 == a2)
                    goto LABEL_450;
                }
              }
              if (v34 == v7)
                break;
              v34 -= 16;
              while (1)
              {
                v42 = *(_DWORD *)(v34 + 4);
                if (v42 < HIDWORD(v23)
                  || v42 == HIDWORD(v23)
                  && (!(*(_DWORD *)v34 | v23)
                   && *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + 12) < *(unsigned __int8 *)(v22 + 12)
                   || (_DWORD)v23 == 1
                   && *(_DWORD *)v34 == 1
                   && *(unsigned __int8 *)(*(_QWORD *)(v34 + 8) + 12) > *(unsigned __int8 *)(v22 + 12)))
                {
                  break;
                }
                v76 = v34 == v7;
                v34 -= 16;
                if (v76)
                  goto LABEL_450;
              }
              if (v8 >= v34)
                goto LABEL_105;
            }
LABEL_450:
            __break(1u);
LABEL_451:
            __break(0xC471u);
            JUMPOUT(0x19636842CLL);
          }
LABEL_105:
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            v43 = *(_QWORD *)(v8 - 8);
            *(_QWORD *)(v8 - 8) = 0;
            v44 = *(_DWORD **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v43;
            if (v44)
            {
              if (!*v44)
              {
                __break(0xC471u);
                JUMPOUT(0x19636854CLL);
              }
              --*v44;
            }
          }
          v45 = *(_DWORD **)(v8 - 8);
          *(_QWORD *)(v8 - 16) = v23;
          *(_QWORD *)(v8 - 8) = v22;
          if (v45)
          {
            if (!*v45)
            {
              __break(0xC471u);
              JUMPOUT(0x1963684ECLL);
            }
            --*v45;
          }
          if (v24 < v27)
          {
LABEL_115:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,false>(v7, v8 - 16, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v46 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(v7, v8 - 16);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(v8, a2);
          if (!(_DWORD)result)
          {
            if (!v46)
              goto LABEL_115;
            continue;
          }
          a2 = v8 - 16;
          if (v46)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v108 = (v10 - 2) >> 1;
          v109 = v108;
          do
          {
            v110 = v109;
            if (v108 >= v109)
            {
              v111 = (2 * v109) | 1;
              v112 = (unsigned int *)(v8 + 16 * v111);
              if (2 * v110 + 2 < (uint64_t)v10)
              {
                v113 = v112[1];
                v114 = v112[5];
                if (v113 < v114
                  || v113 == v114
                  && ((v115 = v112[4], !(v115 | *v112))
                   && (result = *(unsigned __int8 *)(*((_QWORD *)v112 + 3) + 12),
                       *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v111 + 8) + 12) < result)
                   || (*v112 == 1 ? (v116 = v115 == 1) : (v116 = 0),
                       v116
                    && *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v111 + 8) + 12) > *(unsigned __int8 *)(*((_QWORD *)v112 + 3) + 12))))
                {
                  v112 += 4;
                  v111 = 2 * v110 + 2;
                }
              }
              v117 = v112[1];
              v118 = *(_DWORD *)(v8 + 16 * v110 + 4);
              v119 = v117 == v118;
              if (v117 >= v118)
              {
                v120 = (unint64_t *)(v8 + 16 * v110);
                if (!v119
                  || (*(_DWORD *)v120 | *v112
                   || (result = *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v110 + 8) + 12),
                       *(unsigned __int8 *)(*((_QWORD *)v112 + 1) + 12) >= result))
                  && (*v112 == 1 ? (v121 = *(_DWORD *)v120 == 1) : (v121 = 0),
                      !v121
                   || *(unsigned __int8 *)(*((_QWORD *)v112 + 1) + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v110 + 8) + 12)))
                {
                  v122 = *v120;
                  v123 = v8 + 16 * v110;
                  v124 = *(_QWORD *)(v123 + 8);
                  *(_QWORD *)(v123 + 8) = 0;
                  while (1)
                  {
                    result = (uint64_t)v120;
                    v120 = (unint64_t *)v112;
                    *(_QWORD *)result = *(_QWORD *)v112;
                    v125 = *((_QWORD *)v112 + 1);
                    *((_QWORD *)v112 + 1) = 0;
                    v126 = *(_DWORD **)(result + 8);
                    *(_QWORD *)(result + 8) = v125;
                    if (v126)
                    {
                      if (!*v126)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1963684ACLL);
                      }
                      result = (*v126 - 1);
                      *v126 = result;
                    }
                    if (v108 < v111)
                    {
LABEL_335:
                      v133 = (_DWORD *)v120[1];
                      *v120 = v122;
                      v120[1] = v124;
                      if (v133)
                      {
                        if (!*v133)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19636864CLL);
                        }
                        --*v133;
                      }
                      break;
                    }
                    v127 = (2 * v111) | 1;
                    v112 = (unsigned int *)(v8 + 16 * v127);
                    v128 = 2 * v111 + 2;
                    if (v128 >= (uint64_t)v10)
                      goto LABEL_324;
                    v129 = v112[1];
                    v130 = v112[5];
                    if (v129 < v130)
                      goto LABEL_316;
                    if (v129 != v130)
                      goto LABEL_324;
                    v131 = v112[4];
                    if (!(v131 | *v112)
                      && *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v127 + 8) + 12) < *(unsigned __int8 *)(*((_QWORD *)v112 + 3) + 12))
                    {
LABEL_316:
                      v112 += 4;
                      v111 = v128;
                      goto LABEL_325;
                    }
                    if (*v112 == 1 && v131 == 1)
                    {
                      v111 = v127;
                      if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v127 + 8) + 12) > *(unsigned __int8 *)(*((_QWORD *)v112 + 3) + 12))
                        goto LABEL_316;
                    }
                    else
                    {
LABEL_324:
                      v111 = v127;
                    }
LABEL_325:
                    result = v112[1];
                    if (result >= HIDWORD(v122))
                    {
                      if ((_DWORD)result != HIDWORD(v122))
                        continue;
                      result = *v112;
                      if (result | v122
                        || *(unsigned __int8 *)(*((_QWORD *)v112 + 1) + 12) >= *(unsigned __int8 *)(v124 + 12))
                      {
                        if ((_DWORD)v122 != 1)
                          continue;
                        if ((_DWORD)result != 1)
                          continue;
                        result = *(unsigned __int8 *)(*((_QWORD *)v112 + 1) + 12);
                        if (result <= *(unsigned __int8 *)(v124 + 12))
                          continue;
                      }
                    }
                    goto LABEL_335;
                  }
                }
              }
            }
            v109 = v110 - 1;
          }
          while (v110);
          v134 = (unint64_t)v9 >> 4;
          while (1)
          {
            v135 = 0;
            v137 = *(_QWORD *)v8;
            v136 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = 0;
            v138 = (_QWORD *)v8;
            do
            {
              v139 = v135 + 1;
              v140 = &v138[2 * v135 + 2];
              v141 = 2 * v135;
              v135 = (2 * v135) | 1;
              v142 = v141 + 2;
              if (v142 < v134)
              {
                v143 = *((_DWORD *)v140 + 1);
                result = *((unsigned int *)v140 + 5);
                if (v143 < result
                  || v143 == (_DWORD)result
                  && ((result = *((unsigned int *)v140 + 4), !(result | *(_DWORD *)v140))
                   && *(unsigned __int8 *)(v138[2 * v139 + 1] + 12) < *(unsigned __int8 *)(v140[3] + 12)
                   || (*(_DWORD *)v140 == 1 ? (v144 = (_DWORD)result == 1) : (v144 = 0),
                       v144
                    && *(unsigned __int8 *)(v138[2 * v139 + 1] + 12) > *(unsigned __int8 *)(v140[3] + 12))))
                {
                  v140 += 2;
                  v135 = v142;
                }
              }
              *v138 = *v140;
              v145 = v140[1];
              v140[1] = 0;
              v146 = (_DWORD *)v138[1];
              v138[1] = v145;
              if (v146)
              {
                if (!*v146)
                  goto LABEL_451;
                --*v146;
              }
              v138 = v140;
            }
            while (v135 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
            if (v140 != (_QWORD *)(a2 - 16))
              break;
            v165 = (int *)v140[1];
            *v140 = v137;
            v140[1] = v136;
            if (v165)
            {
              v166 = *v165;
              if (!*v165)
              {
                __break(0xC471u);
                JUMPOUT(0x19636862CLL);
              }
LABEL_390:
              *v165 = v166 - 1;
            }
LABEL_391:
            a2 -= 16;
            if (v134-- <= 2)
              return result;
          }
          *v140 = *(_QWORD *)(a2 - 16);
          v147 = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = 0;
          v148 = (_DWORD *)v140[1];
          v140[1] = v147;
          if (v148)
          {
            if (!*v148)
            {
              __break(0xC471u);
              JUMPOUT(0x19636856CLL);
            }
            --*v148;
          }
          v149 = *(_DWORD **)(a2 - 8);
          *(_QWORD *)(a2 - 16) = v137;
          *(_QWORD *)(a2 - 8) = v136;
          if (v149)
          {
            if (!*v149)
            {
              __break(0xC471u);
              JUMPOUT(0x19636858CLL);
            }
            --*v149;
          }
          v150 = (uint64_t)v140 - v8 + 16;
          if (v150 < 17)
            goto LABEL_391;
          v151 = (((unint64_t)v150 >> 4) - 2) >> 1;
          v152 = v8 + 16 * v151;
          v153 = *(_DWORD *)(v152 + 4);
          v154 = *((_DWORD *)v140 + 1);
          if (v153 >= v154)
          {
            if (v153 != v154)
              goto LABEL_391;
            if (*(_DWORD *)v140 | *(_DWORD *)v152
              || (v155 = v140[1],
                  *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v151 + 8) + 12) >= *(unsigned __int8 *)(v155 + 12)))
            {
              if (*(_DWORD *)v152 != 1 || *(_DWORD *)v140 != 1)
                goto LABEL_391;
              v155 = v140[1];
              if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v151 + 8) + 12) <= *(unsigned __int8 *)(v155 + 12))
                goto LABEL_391;
            }
          }
          else
          {
            v155 = v140[1];
          }
          v156 = *v140;
          v140[1] = 0;
          if ((_DWORD)v156 == 1)
          {
            do
            {
              v157 = v140;
              v140 = (_QWORD *)v152;
              *v157 = *(_QWORD *)v152;
              v158 = *(_QWORD *)(v152 + 8);
              *(_QWORD *)(v152 + 8) = 0;
              v159 = (_DWORD *)v157[1];
              v157[1] = v158;
              if (v159)
              {
                if (!*v159)
                  goto LABEL_456;
                --*v159;
              }
              if (!v151)
                break;
              v151 = (v151 - 1) >> 1;
              v152 = v8 + 16 * v151;
              v160 = *(_DWORD *)(v152 + 4);
            }
            while (v160 < HIDWORD(v156)
                 || v160 == HIDWORD(v156)
                 && *(_DWORD *)v152 == 1
                 && *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v151 + 8) + 12) > *(unsigned __int8 *)(v155 + 12));
          }
          else
          {
            do
            {
              v161 = v140;
              v140 = (_QWORD *)v152;
              *v161 = *(_QWORD *)v152;
              v162 = *(_QWORD *)(v152 + 8);
              *(_QWORD *)(v152 + 8) = 0;
              v163 = (_DWORD *)v161[1];
              v161[1] = v162;
              if (v163)
              {
                if (!*v163)
                {
LABEL_456:
                  __break(0xC471u);
                  JUMPOUT(0x1963684CCLL);
                }
                --*v163;
              }
              if (!v151)
                break;
              v151 = (v151 - 1) >> 1;
              v152 = v8 + 16 * v151;
              v164 = *(_DWORD *)(v152 + 4);
            }
            while (v164 < HIDWORD(v156)
                 || v164 == HIDWORD(v156)
                 && !(*(_DWORD *)v152 | v156)
                 && *(unsigned __int8 *)(*(_QWORD *)(v8 + 16 * v151 + 8) + 12) < *(unsigned __int8 *)(v155 + 12));
          }
          v165 = (int *)v140[1];
          *v140 = v156;
          v140[1] = v155;
          if (!v165)
            goto LABEL_391;
          v166 = *v165;
          if (!*v165)
          {
            __break(0xC471u);
            JUMPOUT(0x19636868CLL);
          }
          goto LABEL_390;
        }
        return result;
    }
  }
}

unint64_t *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 4);
  v12 = *(_DWORD *)(a4 + 4);
  if (v11 >= v12)
  {
    if (v11 != v12)
      return result;
    if (*(_DWORD *)a4 | *(_DWORD *)a5
      || (v13 = *(_QWORD *)(a4 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a5 + 8) + 12) >= *(unsigned __int8 *)(v13 + 12)))
    {
      if (*(_DWORD *)a5 != 1)
        return result;
      if (*(_DWORD *)a4 != 1)
        return result;
      v13 = *(_QWORD *)(a4 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a5 + 8) + 12) <= *(unsigned __int8 *)(v13 + 12))
        return result;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
  }
  v14 = *(_QWORD *)a4;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  v15 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v16 = *(_DWORD **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v15;
  if (v16)
  {
    if (!*v16)
      goto LABEL_68;
    --*v16;
  }
  v17 = *(_DWORD **)(a5 + 8);
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = v13;
  if (v17)
  {
    if (!*v17)
    {
      __break(0xC471u);
      JUMPOUT(0x196368A94);
    }
    --*v17;
  }
  v18 = *(_DWORD *)(a4 + 4);
  v19 = *(_DWORD *)(a3 + 4);
  if (v18 >= v19)
  {
    if (v18 != v19)
      return result;
    if (*(_DWORD *)a3 | *(_DWORD *)a4
      || (v20 = *(_QWORD *)(a3 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 12) >= *(unsigned __int8 *)(v20 + 12)))
    {
      if (*(_DWORD *)a4 != 1)
        return result;
      if (*(_DWORD *)a3 != 1)
        return result;
      v20 = *(_QWORD *)(a3 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 12) <= *(unsigned __int8 *)(v20 + 12))
        return result;
    }
  }
  else
  {
    v20 = *(_QWORD *)(a3 + 8);
  }
  v21 = *(_QWORD *)a3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v22 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  v23 = *(_DWORD **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v22;
  if (v23)
  {
    if (!*v23)
    {
      __break(0xC471u);
      JUMPOUT(0x196368AB4);
    }
    --*v23;
  }
  v24 = *(_DWORD **)(a4 + 8);
  *(_QWORD *)a4 = v21;
  *(_QWORD *)(a4 + 8) = v20;
  if (v24)
  {
    if (!*v24)
    {
      __break(0xC471u);
      JUMPOUT(0x196368AD4);
    }
    --*v24;
  }
  v25 = *(_DWORD *)(a3 + 4);
  v26 = *(_DWORD *)(a2 + 4);
  if (v25 >= v26)
  {
    if (v25 != v26)
      return result;
    if (*(_DWORD *)a2 | *(_DWORD *)a3
      || (v27 = *(_QWORD *)(a2 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 12) >= *(unsigned __int8 *)(v27 + 12)))
    {
      if (*(_DWORD *)a3 != 1)
        return result;
      if (*(_DWORD *)a2 != 1)
        return result;
      v27 = *(_QWORD *)(a2 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 12) <= *(unsigned __int8 *)(v27 + 12))
        return result;
    }
  }
  else
  {
    v27 = *(_QWORD *)(a2 + 8);
  }
  v28 = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v29 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v30 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v29;
  if (v30)
  {
    if (!*v30)
    {
      __break(0xC471u);
      JUMPOUT(0x196368AF4);
    }
    --*v30;
  }
  v31 = *(_DWORD **)(a3 + 8);
  *(_QWORD *)a3 = v28;
  *(_QWORD *)(a3 + 8) = v27;
  if (v31)
  {
    if (!*v31)
    {
      __break(0xC471u);
      JUMPOUT(0x196368B14);
    }
    --*v31;
  }
  v32 = *(_DWORD *)(a2 + 4);
  v33 = *(_DWORD *)(a1 + 4);
  if (v32 >= v33)
  {
    if (v32 != v33)
      return result;
    if (*(_DWORD *)a1 | *(_DWORD *)a2
      || (v34 = *(_QWORD *)(a1 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 12) >= *(unsigned __int8 *)(v34 + 12)))
    {
      if (*(_DWORD *)a2 != 1)
        return result;
      if (*(_DWORD *)a1 != 1)
        return result;
      v34 = *(_QWORD *)(a1 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 12) <= *(unsigned __int8 *)(v34 + 12))
        return result;
    }
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 8);
  }
  v35 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v36 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v37 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v36;
  if (v37)
  {
    if (!*v37)
    {
      __break(0xC471u);
      JUMPOUT(0x196368B34);
    }
    --*v37;
  }
  v38 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v34;
  if (v38)
  {
    if (*v38)
    {
      --*v38;
      return result;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x196368A74);
  }
  return result;
}

unint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)result + 1);
  if (v3 < v4
    || v3 == v4
    && (!(*(_DWORD *)result | *(_DWORD *)a2)
     && *(unsigned __int8 *)(a2[1] + 12) < *(unsigned __int8 *)(result[1] + 12)
     || (*(_DWORD *)a2 == 1 ? (v12 = *(_DWORD *)result == 1) : (v12 = 0),
         v12 && *(unsigned __int8 *)(a2[1] + 12) > *(unsigned __int8 *)(result[1] + 12))))
  {
    v5 = *((_DWORD *)a3 + 1);
    if (v5 < v3
      || v5 == v3
      && (!(*(_DWORD *)a2 | *(_DWORD *)a3)
       && *(unsigned __int8 *)(a3[1] + 12) < *(unsigned __int8 *)(a2[1] + 12)
       || *(_DWORD *)a3 == 1
       && *(_DWORD *)a2 == 1
       && *(unsigned __int8 *)(a3[1] + 12) > *(unsigned __int8 *)(a2[1] + 12)))
    {
      v7 = *result;
      v6 = result[1];
      result[1] = 0;
      *result = *a3;
      v8 = a3[1];
      a3[1] = 0;
      v9 = (_DWORD *)result[1];
      result[1] = v8;
      if (v9)
      {
        if (!*v9)
        {
          __break(0xC471u);
          JUMPOUT(0x196368F2CLL);
        }
        --*v9;
      }
      v10 = (int *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (!v10)
        return result;
      v11 = *v10;
      if (*v10)
      {
LABEL_52:
        *v10 = v11 - 1;
        return result;
      }
    }
    else
    {
      v26 = *result;
      v25 = result[1];
      result[1] = 0;
      *result = *a2;
      v27 = a2[1];
      a2[1] = 0;
      v28 = (_DWORD *)result[1];
      result[1] = v27;
      if (v28)
      {
        if (!*v28)
        {
          __break(0xC471u);
          JUMPOUT(0x196368F8CLL);
        }
        --*v28;
      }
      v29 = (_DWORD *)a2[1];
      *a2 = v26;
      a2[1] = v25;
      if (v29)
      {
        if (!*v29)
        {
          __break(0xC471u);
          JUMPOUT(0x196368FACLL);
        }
        --*v29;
      }
      v30 = HIDWORD(v26);
      v31 = *((_DWORD *)a3 + 1);
      if (v31 >= v30
        && (v31 != (_DWORD)v30
         || (*(_DWORD *)a2 | *(_DWORD *)a3
          || *(unsigned __int8 *)(a3[1] + 12) >= *(unsigned __int8 *)(v25 + 12))
         && (*(_DWORD *)a3 != 1
          || *(_DWORD *)a2 != 1
          || *(unsigned __int8 *)(a3[1] + 12) <= *(unsigned __int8 *)(v25 + 12))))
      {
        return result;
      }
      v32 = *a2;
      a2[1] = 0;
      *a2 = *a3;
      v33 = a3[1];
      a3[1] = 0;
      v34 = (_DWORD *)a2[1];
      a2[1] = v33;
      if (v34)
      {
        if (!*v34)
        {
          __break(0xC471u);
          JUMPOUT(0x196368FECLL);
        }
        --*v34;
      }
      v10 = (int *)a3[1];
      *a3 = v32;
      a3[1] = v25;
      if (!v10)
        return result;
      v11 = *v10;
      if (*v10)
        goto LABEL_52;
    }
    __break(0xC471u);
    JUMPOUT(0x196368BD8);
  }
  v13 = *((_DWORD *)a3 + 1);
  if (v13 >= v3)
  {
    if (v13 != v3)
      return result;
    if (*(_DWORD *)a2 | *(_DWORD *)a3
      || (v14 = a2[1], *(unsigned __int8 *)(a3[1] + 12) >= *(unsigned __int8 *)(v14 + 12)))
    {
      if (*(_DWORD *)a3 != 1)
        return result;
      if (*(_DWORD *)a2 != 1)
        return result;
      v14 = a2[1];
      if (*(unsigned __int8 *)(a3[1] + 12) <= *(unsigned __int8 *)(v14 + 12))
        return result;
    }
  }
  else
  {
    v14 = a2[1];
  }
  v15 = *a2;
  a2[1] = 0;
  *a2 = *a3;
  v16 = a3[1];
  a3[1] = 0;
  v17 = (_DWORD *)a2[1];
  a2[1] = v16;
  if (v17)
  {
    if (!*v17)
    {
      __break(0xC471u);
      JUMPOUT(0x196368F4CLL);
    }
    --*v17;
  }
  v18 = (_DWORD *)a3[1];
  *a3 = v15;
  a3[1] = v14;
  if (v18)
  {
    if (!*v18)
    {
      __break(0xC471u);
      JUMPOUT(0x196368F6CLL);
    }
    --*v18;
  }
  v19 = *((_DWORD *)a2 + 1);
  v20 = *((_DWORD *)result + 1);
  if (v19 >= v20)
  {
    if (v19 != v20)
      return result;
    if (*(_DWORD *)result | *(_DWORD *)a2
      || (v21 = result[1], *(unsigned __int8 *)(a2[1] + 12) >= *(unsigned __int8 *)(v21 + 12)))
    {
      if (*(_DWORD *)a2 != 1)
        return result;
      if (*(_DWORD *)result != 1)
        return result;
      v21 = result[1];
      if (*(unsigned __int8 *)(a2[1] + 12) <= *(unsigned __int8 *)(v21 + 12))
        return result;
    }
  }
  else
  {
    v21 = result[1];
  }
  v22 = *result;
  result[1] = 0;
  *result = *a2;
  v23 = a2[1];
  a2[1] = 0;
  v24 = (_DWORD *)result[1];
  result[1] = v23;
  if (v24)
  {
    if (!*v24)
    {
      __break(0xC471u);
      JUMPOUT(0x196368FCCLL);
    }
    --*v24;
  }
  v10 = (int *)a2[1];
  *a2 = v22;
  a2[1] = v21;
  if (v10)
  {
    v11 = *v10;
    if (!*v10)
    {
      __break(0xC471u);
      JUMPOUT(0x196368D04);
    }
    goto LABEL_52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 12);
      v7 = *(_DWORD *)(a1 + 4);
      if (v6 >= v7)
      {
        if (v6 != v7)
          return result;
        v35 = *(_DWORD *)(a2 - 16);
        if (*(_DWORD *)a1 | v35
          || (v8 = *(_QWORD *)(a1 + 8),
              *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12) >= *(unsigned __int8 *)(v8 + 12)))
        {
          if (v35 != 1)
            return result;
          if (*(_DWORD *)a1 != 1)
            return result;
          v8 = *(_QWORD *)(a1 + 8);
          if (*(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 12) <= *(unsigned __int8 *)(v8 + 12))
            return result;
        }
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      v9 = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
      v10 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 8) = 0;
      v11 = *(_DWORD **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v10;
      if (v11)
      {
        if (!*v11)
        {
          __break(0xC471u);
          JUMPOUT(0x1963693ACLL);
        }
        --*v11;
      }
      v12 = *(_DWORD **)(a2 - 8);
      *(_QWORD *)(a2 - 16) = v9;
      *(_QWORD *)(a2 - 8) = v8;
      if (v12)
      {
        if (!*v12)
        {
          __break(0xC471u);
          JUMPOUT(0x1963693CCLL);
        }
        --*v12;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,0>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v13 = a1 + 32;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v14 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_DWORD *)(v14 + 4);
    v18 = *(_DWORD *)(v13 + 4);
    if (v17 < v18)
      break;
    if (v17 == v18)
    {
      if (!(*(_DWORD *)v13 | *(_DWORD *)v14))
      {
        v19 = *(_QWORD *)(v14 + 8);
        if (*(unsigned __int8 *)(v19 + 12) < *(unsigned __int8 *)(*(_QWORD *)(v13 + 8) + 12))
          goto LABEL_14;
      }
      if (*(_DWORD *)v14 == 1 && *(_DWORD *)v13 == 1)
      {
        v19 = *(_QWORD *)(v14 + 8);
        if (*(unsigned __int8 *)(v19 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v13 + 8) + 12))
          goto LABEL_14;
      }
    }
LABEL_47:
    v13 = v14;
    v15 += 16;
    v14 += 16;
    if (v14 == a2)
      return 1;
  }
  v19 = *(_QWORD *)(v14 + 8);
LABEL_14:
  v20 = *(_QWORD *)v14;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)v14 = *(_QWORD *)v13;
  v21 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v14 + 8) = v21;
  v22 = v15;
  v23 = (_QWORD *)a1;
  if ((_DWORD)v20 != 1)
  {
    if (v13 == a1)
      goto LABEL_43;
    while (1)
    {
      v30 = a1 + v22;
      v31 = *(_DWORD *)(a1 + v22 + 20);
      if (v31 <= HIDWORD(v20))
      {
        if (v31 != HIDWORD(v20) || *(_DWORD *)(v30 + 16) | v20)
        {
LABEL_41:
          v23 = (_QWORD *)v13;
          goto LABEL_43;
        }
        v27 = a1 + v22;
        v32 = *(_QWORD *)(a1 + v22 + 24);
        if (*(unsigned __int8 *)(v19 + 12) >= *(unsigned __int8 *)(v32 + 12))
        {
LABEL_42:
          v23 = (_QWORD *)(v27 + 32);
          goto LABEL_43;
        }
      }
      else
      {
        v32 = *(_QWORD *)(v30 + 24);
      }
      v13 -= 16;
      *(_QWORD *)(v30 + 32) = *(_QWORD *)(v30 + 16);
      v33 = a1 + v22;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 40) = v32;
      v22 -= 16;
      if (v22 == -32)
      {
LABEL_40:
        v23 = (_QWORD *)a1;
        goto LABEL_43;
      }
    }
  }
  if (v13 != a1)
  {
    while (1)
    {
      v24 = a1 + v22;
      v25 = *(_DWORD *)(a1 + v22 + 20);
      if (v25 <= HIDWORD(v20))
      {
        if (v25 != HIDWORD(v20) || *(_DWORD *)(v24 + 16) != 1)
          goto LABEL_41;
        v27 = a1 + v22;
        v26 = *(_QWORD *)(a1 + v22 + 24);
        if (*(unsigned __int8 *)(v19 + 12) <= *(unsigned __int8 *)(v26 + 12))
          goto LABEL_42;
      }
      else
      {
        v26 = *(_QWORD *)(v24 + 24);
      }
      v13 -= 16;
      *(_QWORD *)(v24 + 32) = *(_QWORD *)(v24 + 16);
      v28 = a1 + v22;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 40) = v26;
      v22 -= 16;
      if (v22 == -32)
        goto LABEL_40;
    }
  }
LABEL_43:
  v34 = (_DWORD *)v23[1];
  *v23 = v20;
  v23[1] = v19;
  if (v34)
  {
    if (!*v34)
    {
      __break(0xC471u);
      JUMPOUT(0x19636938CLL);
    }
    --*v34;
  }
  if (++v16 != 8)
    goto LABEL_47;
  return v14 + 16 == a2;
}

unint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0 &,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *(_DWORD *)(a3 + 4);
  if (v9 >= v10)
  {
    if (v9 != v10)
      return result;
    if (*(_DWORD *)a3 | *(_DWORD *)a4
      || (v11 = *(_QWORD *)(a3 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 12) >= *(unsigned __int8 *)(v11 + 12)))
    {
      if (*(_DWORD *)a4 != 1)
        return result;
      if (*(_DWORD *)a3 != 1)
        return result;
      v11 = *(_QWORD *)(a3 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 12) <= *(unsigned __int8 *)(v11 + 12))
        return result;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
  }
  v12 = *(_QWORD *)a3;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  v13 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  v14 = *(_DWORD **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v13;
  if (v14)
  {
    if (!*v14)
      goto LABEL_51;
    --*v14;
  }
  v15 = *(_DWORD **)(a4 + 8);
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v11;
  if (v15)
  {
    if (!*v15)
    {
      __break(0xC471u);
      JUMPOUT(0x19636968CLL);
    }
    --*v15;
  }
  v16 = *(_DWORD *)(a3 + 4);
  v17 = *(_DWORD *)(a2 + 4);
  if (v16 >= v17)
  {
    if (v16 != v17)
      return result;
    if (*(_DWORD *)a2 | *(_DWORD *)a3
      || (v18 = *(_QWORD *)(a2 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 12) >= *(unsigned __int8 *)(v18 + 12)))
    {
      if (*(_DWORD *)a3 != 1)
        return result;
      if (*(_DWORD *)a2 != 1)
        return result;
      v18 = *(_QWORD *)(a2 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 12) <= *(unsigned __int8 *)(v18 + 12))
        return result;
    }
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 8);
  }
  v19 = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  v20 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v21 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v20;
  if (v21)
  {
    if (!*v21)
    {
      __break(0xC471u);
      JUMPOUT(0x1963696ACLL);
    }
    --*v21;
  }
  v22 = *(_DWORD **)(a3 + 8);
  *(_QWORD *)a3 = v19;
  *(_QWORD *)(a3 + 8) = v18;
  if (v22)
  {
    if (!*v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1963696CCLL);
    }
    --*v22;
  }
  v23 = *(_DWORD *)(a2 + 4);
  v24 = *(_DWORD *)(a1 + 4);
  if (v23 >= v24)
  {
    if (v23 != v24)
      return result;
    if (*(_DWORD *)a1 | *(_DWORD *)a2
      || (v25 = *(_QWORD *)(a1 + 8),
          *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 12) >= *(unsigned __int8 *)(v25 + 12)))
    {
      if (*(_DWORD *)a2 != 1)
        return result;
      if (*(_DWORD *)a1 != 1)
        return result;
      v25 = *(_QWORD *)(a1 + 8);
      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 12) <= *(unsigned __int8 *)(v25 + 12))
        return result;
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 8);
  }
  v26 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v27 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v28 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v27;
  if (v28)
  {
    if (!*v28)
    {
      __break(0xC471u);
      JUMPOUT(0x1963696ECLL);
    }
    --*v28;
  }
  v29 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v25;
  if (v29)
  {
    if (*v29)
    {
      --*v29;
      return result;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x19636966CLL);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  __int128 v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  BOOL v47;
  char *v48;
  unint64_t v49;
  unsigned int v50;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v60;
  uint64_t v62;
  int v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v70;
  int v72;
  __int128 v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v80;
  __int128 *v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v96;
  uint64_t v97;
  uint64_t j;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  uint64_t v104;
  int64_t v105;
  int64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int v130;
  BOOL v131;
  WTF::StringImpl *v132;
  int64_t v133;
  int v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  __int128 v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  _OWORD *v149;
  WTF::StringImpl *v150;
  __int128 v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  BOOL v161;
  int v162;
  unint64_t v163;
  __int128 v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  unsigned int v167;
  BOOL v168;
  uint64_t v170;
  unint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v176;
  unint64_t i;
  uint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  _BYTE v195[11];
  _BYTE v196[11];
  _BYTE v197[11];
  __int128 v198;
  _BYTE v199[11];
  _BYTE v200[11];
  __int128 v201;
  int v202;
  int v203;

  v6 = (WTF::StringImpl *)a2;
  v7 = result;
LABEL_2:
  v191 = (uint64_t)v6 - 40;
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (uint64_t)v6 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v6 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v11 = (unint64_t)v6 - 36;
        v80 = *((_DWORD *)v6 - 9);
        v81 = (__int128 *)(v8 + 4);
        v82 = *(_DWORD *)(v8 + 4);
        if (v80 < v82
          || (v80 == v82
            ? (v83 = *((unsigned __int8 *)v6 - 28) >= *(unsigned __int8 *)(v8 + 12))
            : (v83 = 1),
              !v83))
        {
          v202 = *(_DWORD *)(v8 + 20);
          v198 = *v81;
          v4 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = 0;
          LODWORD(v9) = *(_DWORD *)(v8 + 32);
          v84 = *((_DWORD *)v6 - 5);
          *v81 = *(_OWORD *)v11;
          *(_DWORD *)(v8 + 20) = v84;
          v85 = *((_QWORD *)v6 - 2);
          *((_QWORD *)v6 - 2) = 0;
          v18 = *(WTF::StringImpl **)(v8 + 24);
          *(_QWORD *)(v8 + 24) = v85;
          if (!v18)
            goto LABEL_165;
          if (*(_DWORD *)v18 != 2)
          {
            *(_DWORD *)v18 -= 2;
            goto LABEL_165;
          }
          goto LABEL_332;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8, v8 + 40, v191);
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8, v8 + 40, v8 + 80, v191);
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,0>(v8, v8 + 40, v8 + 80, v8 + 120, v191);
      default:
        if (v9 <= 959)
        {
          v86 = (WTF::StringImpl *)(v8 + 40);
          v87 = (WTF::StringImpl *)v8 == v6 || v86 == v6;
          v88 = v87;
          if ((a4 & 1) == 0)
          {
            if ((v88 & 1) == 0)
            {
              v11 = v8 - 36;
              v170 = -1;
              v4 = 1;
              v171 = v8;
              while (1)
              {
                v172 = *(_DWORD *)(v171 + 44);
                v173 = *(_DWORD *)(v171 + 4);
                if (v172 < v173)
                  break;
                v174 = *(unsigned __int8 *)(v171 + 52);
                if (v172 == v173 && v174 < *(unsigned __int8 *)(v171 + 12))
                  goto LABEL_314;
LABEL_328:
                v171 = v7 + 40 * v4++;
                v11 += 40;
                --v170;
                if ((WTF::StringImpl *)(v171 + 40) == v6)
                  return result;
              }
              v174 = *(unsigned __int8 *)(v171 + 52);
LABEL_314:
              v176 = *(_DWORD *)(v171 + 48);
              *(_QWORD *)&v198 = *(_QWORD *)(v171 + 53);
              *(_DWORD *)((char *)&v198 + 7) = *(_DWORD *)(v171 + 60);
              v190 = *(_QWORD *)(v171 + 64);
              *(_QWORD *)(v171 + 64) = 0;
              v194 = *(_DWORD *)(v171 + 72);
              v9 = v170;
              for (i = v11; ; i -= 40)
              {
                *(_OWORD *)(i + 80) = *(_OWORD *)(i + 40);
                *(_DWORD *)(i + 96) = *(_DWORD *)(i + 56);
                v178 = *(_QWORD *)(i + 60);
                *(_QWORD *)(i + 60) = 0;
                v18 = *(WTF::StringImpl **)(i + 100);
                *(_QWORD *)(i + 100) = v178;
                if (v18)
                {
                  if (*(_DWORD *)v18 == 2)
                    v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v18 -= 2;
                }
                *(_DWORD *)(i + 108) = *(_DWORD *)(i + 68);
                if (!v9)
                  break;
                if (v172 >= *(_DWORD *)i && (v172 != *(_DWORD *)i || v174 >= *(unsigned __int8 *)(i + 8)))
                {
                  *(_DWORD *)(i + 40) = v172;
                  *(_DWORD *)(i + 44) = v176;
                  *(_BYTE *)(i + 48) = v174;
                  *(_DWORD *)(i + 56) = *(_DWORD *)((char *)&v198 + 7);
                  *(_QWORD *)(i + 49) = v198;
                  result = *(_QWORD *)(i + 60);
                  *(_QWORD *)(i + 60) = v190;
                  if (result)
                  {
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)result -= 2;
                  }
                  *(_DWORD *)(i + 68) = v194;
                  goto LABEL_328;
                }
                ++v9;
              }
LABEL_331:
              __break(1u);
LABEL_332:
              WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
LABEL_165:
              *(_DWORD *)(v7 + 32) = *((_DWORD *)v6 - 2);
              *(_DWORD *)(v11 + 16) = v202;
              *(_OWORD *)v11 = v198;
              result = *((_QWORD *)v6 - 2);
              *((_QWORD *)v6 - 2) = v4;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)result -= 2;
              }
              *((_DWORD *)v6 - 2) = v9;
            }
            return result;
          }
          if ((v88 & 1) != 0)
            return result;
          v89 = 0;
          v90 = v8;
          while (1)
          {
            v91 = v86;
            v92 = *(_DWORD *)(v90 + 44);
            v93 = *(_DWORD *)(v90 + 4);
            if (v92 < v93)
              break;
            v94 = *(unsigned __int8 *)(v90 + 52);
            if (v92 == v93 && v94 < *(unsigned __int8 *)(v90 + 12))
              goto LABEL_187;
LABEL_205:
            v86 = (WTF::StringImpl *)((char *)v91 + 40);
            v89 += 40;
            v90 = (unint64_t)v91;
            if ((WTF::StringImpl *)((char *)v91 + 40) == v6)
              return result;
          }
          v94 = *(unsigned __int8 *)(v90 + 52);
LABEL_187:
          v96 = *(_DWORD *)(v90 + 48);
          *(_QWORD *)v199 = *(_QWORD *)(v90 + 53);
          *(_DWORD *)&v199[7] = *(_DWORD *)(v90 + 60);
          v97 = *(_QWORD *)(v90 + 64);
          *(_QWORD *)(v90 + 64) = 0;
          v192 = *(_DWORD *)(v90 + 72);
          for (j = v89; ; j -= 40)
          {
            v99 = v7 + j;
            *(_OWORD *)(v99 + 44) = *(_OWORD *)(v7 + j + 4);
            *(_DWORD *)(v99 + 60) = *(_DWORD *)(v7 + j + 20);
            v100 = *(_QWORD *)(v7 + j + 24);
            *(_QWORD *)(v99 + 24) = 0;
            v101 = *(WTF::StringImpl **)(v7 + j + 64);
            *(_QWORD *)(v99 + 64) = v100;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
                WTF::StringImpl::destroy(v101, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v101 -= 2;
            }
            *(_DWORD *)(v99 + 72) = *(_DWORD *)(v99 + 32);
            if (!j)
            {
              v104 = v7;
              goto LABEL_201;
            }
            v102 = *(_DWORD *)(v7 + j - 36);
            if (v92 >= v102 && (v92 != v102 || v94 >= *(unsigned __int8 *)(v7 + j - 28)))
              break;
          }
          v104 = v7 + j;
LABEL_201:
          *(_DWORD *)(v7 + j + 4) = v92;
          *(_DWORD *)(v104 + 8) = v96;
          *(_BYTE *)(v104 + 12) = v94;
          *(_QWORD *)(v104 + 13) = *(_QWORD *)v199;
          *(_DWORD *)(v104 + 20) = *(_DWORD *)&v199[7];
          result = *(_QWORD *)(v104 + 24);
          *(_QWORD *)(v104 + 24) = v97;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
          *(_DWORD *)(v104 + 32) = v192;
          goto LABEL_205;
        }
        if (!a3)
        {
          if ((WTF::StringImpl *)v8 != v6)
          {
            v105 = (unint64_t)(v10 - 2) >> 1;
            v106 = v105;
            do
            {
              v107 = v106;
              if (v105 >= v106)
              {
                v108 = (2 * v106) | 1;
                v109 = v7 + 40 * v108;
                if (2 * v107 + 2 < v10)
                {
                  v110 = *(_DWORD *)(v109 + 4);
                  v111 = *(_DWORD *)(v109 + 44);
                  if (v110 < v111
                    || (v110 == v111
                      ? (v112 = *(unsigned __int8 *)(v109 + 12) >= *(unsigned __int8 *)(v109 + 52))
                      : (v112 = 1),
                        !v112))
                  {
                    v109 += 40;
                    v108 = 2 * v107 + 2;
                  }
                }
                v113 = v7 + 40 * v107;
                v114 = *(_DWORD *)(v109 + 4);
                v115 = *(_DWORD *)(v113 + 4);
                if (v114 >= v115)
                {
                  v116 = *(unsigned __int8 *)(v113 + 12);
                  if (v114 != v115 || *(unsigned __int8 *)(v109 + 12) >= v116)
                  {
                    v118 = v7 + 40 * v107;
                    a2 = *(unsigned int *)(v118 + 8);
                    *(_DWORD *)&v200[7] = *(_DWORD *)(v118 + 20);
                    *(_QWORD *)v200 = *(_QWORD *)(v118 + 13);
                    v119 = *(_QWORD *)(v118 + 24);
                    *(_QWORD *)(v118 + 24) = 0;
                    v120 = *(_DWORD *)(v118 + 32);
                    do
                    {
                      v121 = v109;
                      v122 = *(_OWORD *)(v109 + 4);
                      *(_DWORD *)(v113 + 20) = *(_DWORD *)(v109 + 20);
                      *(_OWORD *)(v113 + 4) = v122;
                      v123 = *(_QWORD *)(v109 + 24);
                      *(_QWORD *)(v121 + 24) = 0;
                      v124 = *(WTF::StringImpl **)(v113 + 24);
                      *(_QWORD *)(v113 + 24) = v123;
                      if (v124)
                      {
                        if (*(_DWORD *)v124 == 2)
                        {
                          v193 = v120;
                          v188 = v119;
                          v184 = a2;
                          WTF::StringImpl::destroy(v124, (WTF::StringImpl *)a2);
                          a2 = v184;
                          v119 = v188;
                          v120 = v193;
                          v105 = (unint64_t)(v10 - 2) >> 1;
                        }
                        else
                        {
                          *(_DWORD *)v124 -= 2;
                        }
                      }
                      *(_DWORD *)(v113 + 32) = *(_DWORD *)(v121 + 32);
                      if (v105 < v108)
                        break;
                      v125 = 2 * v108;
                      v108 = (2 * v108) | 1;
                      v109 = v7 + 40 * v108;
                      v126 = v125 + 2;
                      if (v126 < v10)
                      {
                        v127 = *(_DWORD *)(v109 + 4);
                        v128 = *(_DWORD *)(v109 + 44);
                        if (v127 < v128
                          || (v127 == v128
                            ? (v129 = *(unsigned __int8 *)(v109 + 12) >= *(unsigned __int8 *)(v109 + 52))
                            : (v129 = 1),
                              !v129))
                        {
                          v109 += 40;
                          v108 = v126;
                        }
                      }
                      v130 = *(_DWORD *)(v109 + 4);
                      if (v130 < v115)
                        break;
                      v131 = v130 != v115 || *(unsigned __int8 *)(v109 + 12) >= v116;
                      v113 = v121;
                    }
                    while (v131);
                    *(_DWORD *)(v121 + 4) = v115;
                    *(_DWORD *)(v121 + 8) = a2;
                    *(_BYTE *)(v121 + 12) = v116;
                    *(_QWORD *)(v121 + 13) = *(_QWORD *)v200;
                    *(_DWORD *)(v121 + 20) = *(_DWORD *)&v200[7];
                    v132 = *(WTF::StringImpl **)(v121 + 24);
                    *(_QWORD *)(v121 + 24) = v119;
                    if (v132)
                    {
                      if (*(_DWORD *)v132 == 2)
                      {
                        v133 = v105;
                        v134 = v120;
                        WTF::StringImpl::destroy(v132, (WTF::StringImpl *)a2);
                        v120 = v134;
                        v105 = v133;
                      }
                      else
                      {
                        *(_DWORD *)v132 -= 2;
                      }
                    }
                    *(_DWORD *)(v121 + 32) = v120;
                  }
                }
              }
              v106 = v107 - 1;
            }
            while (v107);
            v135 = v9 / 0x28uLL;
            do
            {
              v136 = 0;
              v203 = *(_DWORD *)(v7 + 20);
              v201 = *(_OWORD *)(v7 + 4);
              v137 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)(v7 + 24) = 0;
              v138 = *(_DWORD *)(v7 + 32);
              v139 = v7;
              do
              {
                v140 = v139;
                v139 += 40 * v136 + 40;
                v141 = 2 * v136;
                v136 = (2 * v136) | 1;
                v142 = v141 + 2;
                if (v142 < v135)
                {
                  v143 = *(_DWORD *)(v139 + 4);
                  v144 = *(_DWORD *)(v139 + 44);
                  if (v143 < v144
                    || (v143 == v144
                      ? (v145 = *(unsigned __int8 *)(v139 + 12) >= *(unsigned __int8 *)(v139 + 52))
                      : (v145 = 1),
                        !v145))
                  {
                    v139 += 40;
                    v136 = v142;
                  }
                }
                v146 = *(_OWORD *)(v139 + 4);
                *(_DWORD *)(v140 + 20) = *(_DWORD *)(v139 + 20);
                *(_OWORD *)(v140 + 4) = v146;
                v147 = *(_QWORD *)(v139 + 24);
                *(_QWORD *)(v139 + 24) = 0;
                v148 = *(WTF::StringImpl **)(v140 + 24);
                *(_QWORD *)(v140 + 24) = v147;
                if (v148)
                {
                  if (*(_DWORD *)v148 == 2)
                    WTF::StringImpl::destroy(v148, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v148 -= 2;
                }
                *(_DWORD *)(v140 + 32) = *(_DWORD *)(v139 + 32);
              }
              while (v136 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
              v149 = (_OWORD *)(v139 + 4);
              v150 = (WTF::StringImpl *)((char *)v6 - 40);
              if ((WTF::StringImpl *)v139 == (WTF::StringImpl *)((char *)v6 - 40))
              {
                *(_DWORD *)(v139 + 20) = v203;
                *v149 = v201;
                result = *(_QWORD *)(v139 + 24);
                *(_QWORD *)(v139 + 24) = v137;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                *(_DWORD *)(v139 + 32) = v138;
              }
              else
              {
                v151 = *(_OWORD *)((char *)v6 - 36);
                *(_DWORD *)(v139 + 20) = *((_DWORD *)v6 - 5);
                *v149 = v151;
                v152 = *((_QWORD *)v6 - 2);
                *((_QWORD *)v6 - 2) = 0;
                v153 = *(WTF::StringImpl **)(v139 + 24);
                *(_QWORD *)(v139 + 24) = v152;
                if (v153)
                {
                  if (*(_DWORD *)v153 == 2)
                    WTF::StringImpl::destroy(v153, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v153 -= 2;
                }
                v154 = (char *)v6 - 36;
                *(_DWORD *)(v139 + 32) = *((_DWORD *)v6 - 2);
                *((_DWORD *)v154 + 4) = v203;
                *(_OWORD *)v154 = v201;
                result = *((_QWORD *)v6 - 2);
                *((_QWORD *)v6 - 2) = v137;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)result -= 2;
                }
                *((_DWORD *)v6 - 2) = v138;
                v155 = v139 + 40 - v7;
                if (v155 >= 41)
                {
                  v156 = (v155 / 0x28uLL - 2) >> 1;
                  v157 = v7 + 40 * v156;
                  v158 = *(_DWORD *)(v157 + 4);
                  v159 = *(_DWORD *)(v139 + 4);
                  v160 = *(unsigned __int8 *)(v139 + 12);
                  if (v158 < v159
                    || (v158 == v159 ? (v161 = *(unsigned __int8 *)(v157 + 12) >= v160) : (v161 = 1), !v161))
                  {
                    v185 = *(_DWORD *)(v139 + 8);
                    *(_DWORD *)&v197[7] = *(_DWORD *)(v139 + 20);
                    *(_QWORD *)v197 = *(_QWORD *)(v139 + 13);
                    v189 = *(_QWORD *)(v139 + 24);
                    *(_QWORD *)(v139 + 24) = 0;
                    v162 = *(_DWORD *)(v139 + 32);
                    while (1)
                    {
                      v163 = v157;
                      v164 = *(_OWORD *)(v157 + 4);
                      *(_DWORD *)(v139 + 20) = *(_DWORD *)(v157 + 20);
                      *(_OWORD *)(v139 + 4) = v164;
                      v165 = *(_QWORD *)(v157 + 24);
                      *(_QWORD *)(v163 + 24) = 0;
                      v166 = *(WTF::StringImpl **)(v139 + 24);
                      *(_QWORD *)(v139 + 24) = v165;
                      if (v166)
                      {
                        if (*(_DWORD *)v166 == 2)
                          WTF::StringImpl::destroy(v166, (WTF::StringImpl *)a2);
                        else
                          *(_DWORD *)v166 -= 2;
                      }
                      *(_DWORD *)(v139 + 32) = *(_DWORD *)(v163 + 32);
                      if (!v156)
                        break;
                      v156 = (v156 - 1) >> 1;
                      v157 = v7 + 40 * v156;
                      v167 = *(_DWORD *)(v157 + 4);
                      v139 = v163;
                      if (v167 >= v159)
                      {
                        v168 = v167 != v159 || *(unsigned __int8 *)(v157 + 12) >= v160;
                        v139 = v163;
                        if (v168)
                          break;
                      }
                    }
                    *(_DWORD *)(v163 + 4) = v159;
                    *(_DWORD *)(v163 + 8) = v185;
                    *(_BYTE *)(v163 + 12) = v160;
                    *(_QWORD *)(v163 + 13) = *(_QWORD *)v197;
                    *(_DWORD *)(v163 + 20) = *(_DWORD *)&v197[7];
                    result = *(_QWORD *)(v163 + 24);
                    *(_QWORD *)(v163 + 24) = v189;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    *(_DWORD *)(v163 + 32) = v162;
                  }
                }
              }
              v6 = v150;
            }
            while (v135-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        if ((unint64_t)v9 < 0x1401)
        {
          v18 = (WTF::StringImpl *)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8 + 40 * v11, v8, v191);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8, v8 + 40 * v11, v191);
          v12 = v8 + 40 * v11;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8 + 40, v12 - 40, (uint64_t)v6 - 80);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8 + 80, v8 + 40 + 40 * v11, (uint64_t)v6 - 120);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v12 - 40, v12, v8 + 40 + 40 * v11);
          v202 = *(_DWORD *)(v8 + 20);
          v198 = *(_OWORD *)(v8 + 4);
          v13 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = 0;
          v4 = *(unsigned int *)(v8 + 32);
          v14 = *(_QWORD *)(v12 + 24);
          v9 = v12 + 24;
          v15 = *(_OWORD *)(v9 - 20);
          *(_DWORD *)(v8 + 20) = *(_DWORD *)(v9 - 4);
          *(_OWORD *)(v8 + 4) = v15;
          *(_QWORD *)v9 = 0;
          v16 = *(WTF::StringImpl **)(v8 + 24);
          *(_QWORD *)(v8 + 24) = v14;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = v9 - 20;
          v11 = v8 + 32 + 40 * v11;
          *(_DWORD *)(v8 + 32) = *(_DWORD *)v11;
          *(_DWORD *)(v17 + 16) = v202;
          *(_OWORD *)v17 = v198;
          v18 = *(WTF::StringImpl **)v9;
          *(_QWORD *)v9 = v13;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v18 -= 2;
          }
          *(_DWORD *)v11 = v4;
        }
        v183 = a3 - 1;
        if ((a4 & 1) != 0)
        {
          v19 = *(_DWORD *)(v8 + 4);
          goto LABEL_21;
        }
        v19 = *(_DWORD *)(v8 - 36);
        v20 = *(_DWORD *)(v8 + 4);
        if (v19 >= v20)
        {
          v4 = *(unsigned __int8 *)(v8 + 12);
          if (v19 == v20 && *(unsigned __int8 *)(v8 - 28) < v4)
            goto LABEL_21;
          v52 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)&v196[7] = *(_DWORD *)(v8 + 20);
          *(_QWORD *)v196 = *(_QWORD *)(v8 + 13);
          v53 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = 0;
          v54 = *(_DWORD *)(v8 + 32);
          v55 = *((_DWORD *)v6 - 9);
          if (v20 < v55 || v20 == v55 && v4 < *((unsigned __int8 *)v6 - 28))
          {
            v56 = v8 + 40;
            while ((WTF::StringImpl *)v56 != v6)
            {
              v8 = v56;
              v57 = *(_DWORD *)(v56 + 4);
              if (v20 >= v57)
              {
                v58 = *(unsigned __int8 *)(v56 + 12);
                v56 += 40;
                if (v20 != v57 || v4 >= v58)
                  continue;
              }
              goto LABEL_99;
            }
            goto LABEL_331;
          }
          v76 = v8 + 40;
          do
          {
            v8 = v76;
            if (v76 >= (unint64_t)v6)
              break;
            v77 = *(_DWORD *)(v76 + 4);
            if (v20 < v77)
              break;
            v78 = *(unsigned __int8 *)(v76 + 12);
            v76 += 40;
          }
          while (v20 != v77 || v4 >= v78);
LABEL_99:
          v187 = v52;
          v11 = (unint64_t)v6;
          if (v8 >= (unint64_t)v6)
            goto LABEL_109;
          v11 = (unint64_t)v6 - 40;
          if (v6 == (WTF::StringImpl *)v7)
            goto LABEL_331;
          while (1)
          {
            v60 = *(_DWORD *)(v11 + 4);
            if (v20 >= v60 && (v20 != v60 || v4 >= *(unsigned __int8 *)(v11 + 12)))
              break;
            v87 = v11 == v7;
            v11 -= 40;
            if (v87)
              goto LABEL_331;
          }
LABEL_109:
          while (v8 < v11)
          {
            v198 = *(_OWORD *)(v8 + 4);
            v202 = *(_DWORD *)(v8 + 20);
            v62 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = 0;
            LODWORD(v9) = *(_DWORD *)(v8 + 32);
            v63 = *(_DWORD *)(v11 + 20);
            *(_OWORD *)(v8 + 4) = *(_OWORD *)(v11 + 4);
            *(_DWORD *)(v8 + 20) = v63;
            v64 = *(_QWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 24) = 0;
            v65 = *(WTF::StringImpl **)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v64;
            if (v65)
            {
              if (*(_DWORD *)v65 == 2)
                WTF::StringImpl::destroy(v65, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v65 -= 2;
            }
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v11 + 32);
            *(_OWORD *)(v11 + 4) = v198;
            *(_DWORD *)(v11 + 20) = v202;
            v18 = *(WTF::StringImpl **)(v11 + 24);
            *(_QWORD *)(v11 + 24) = v62;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v18 -= 2;
            }
            *(_DWORD *)(v11 + 32) = v9;
            v66 = v8 + 40;
            do
            {
              if ((WTF::StringImpl *)v66 == v6)
                goto LABEL_331;
              v8 = v66;
              v67 = *(_DWORD *)(v66 + 4);
              if (v20 < v67)
                break;
              v68 = *(unsigned __int8 *)(v66 + 12);
              v66 += 40;
            }
            while (v20 != v67 || v4 >= v68);
            if (v11 == v7)
              goto LABEL_331;
            v11 -= 40;
            while (1)
            {
              v70 = *(_DWORD *)(v11 + 4);
              if (v20 >= v70 && (v20 != v70 || v4 >= *(unsigned __int8 *)(v11 + 12)))
                break;
              v87 = v11 == v7;
              v11 -= 40;
              if (v87)
                goto LABEL_331;
            }
          }
          v72 = v54;
          if (v8 - 40 != v7)
          {
            v73 = *(_OWORD *)(v8 - 36);
            *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 - 20);
            *(_OWORD *)(v7 + 4) = v73;
            v74 = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v8 - 16) = 0;
            v75 = *(WTF::StringImpl **)(v7 + 24);
            *(_QWORD *)(v7 + 24) = v74;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
                WTF::StringImpl::destroy(v75, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v75 -= 2;
            }
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 - 8);
          }
          *(_DWORD *)(v8 - 36) = v20;
          *(_DWORD *)(v8 - 32) = v187;
          *(_BYTE *)(v8 - 28) = v4;
          *(_DWORD *)(v8 - 20) = *(_DWORD *)&v196[7];
          *(_QWORD *)(v8 - 27) = *(_QWORD *)v196;
          result = *(_QWORD *)(v8 - 16);
          *(_QWORD *)(v8 - 16) = v53;
          a3 = v183;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)result -= 2;
          }
          a4 = 0;
          *(_DWORD *)(v8 - 8) = v72;
          continue;
        }
        v19 = *(_DWORD *)(v8 + 4);
LABEL_21:
        v21 = *(_DWORD *)(v8 + 8);
        v22 = *(unsigned __int8 *)(v8 + 12);
        *(_QWORD *)v195 = *(_QWORD *)(v8 + 13);
        *(_DWORD *)&v195[7] = *(_DWORD *)(v8 + 20);
        v23 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        if ((WTF::StringImpl *)(v8 + 40) == v6)
          goto LABEL_331;
        v24 = 0;
        while (1)
        {
          v25 = *(_DWORD *)(v8 + v24 + 44);
          if (v25 >= v19 && (v25 != v19 || *(unsigned __int8 *)(v8 + v24 + 52) >= v22))
            break;
          v24 += 40;
          if ((WTF::StringImpl *)(v8 + v24 + 40) == v6)
            goto LABEL_331;
        }
        v11 = v8 + v24 + 40;
        v27 = v6;
        v182 = *(_DWORD *)(v8 + 32);
        v181 = v23;
        v180 = v21;
        v179 = v8 + 4;
        if (v24)
        {
          do
          {
            if (v27 == (WTF::StringImpl *)v8)
              goto LABEL_331;
            v28 = v27;
            v29 = *((_DWORD *)v27 - 9);
            if (v29 < v19)
              break;
            v30 = *((unsigned __int8 *)v27 - 28);
            v27 = (WTF::StringImpl *)((char *)v27 - 40);
          }
          while (v29 != v19 || v30 >= v22);
          v4 = (unint64_t)v28 - 40;
        }
        else
        {
          v48 = (char *)v6 - 40;
          while (1)
          {
            v4 = (unint64_t)v48;
            v49 = (unint64_t)(v48 + 40);
            if (v11 >= v49)
              break;
            v50 = *(_DWORD *)(v4 + 4);
            if (v50 >= v19)
            {
              v48 = (char *)(v4 - 40);
              if (v50 != v19 || *(unsigned __int8 *)(v4 + 12) >= v22)
                continue;
            }
            goto LABEL_38;
          }
          v4 = v49;
        }
LABEL_38:
        v8 = v11;
        if (v11 < v4)
        {
          v32 = v4;
          do
          {
            v198 = *(_OWORD *)(v8 + 4);
            v202 = *(_DWORD *)(v8 + 20);
            v9 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = 0;
            v33 = *(_DWORD *)(v8 + 32);
            v34 = *(_DWORD *)(v32 + 20);
            *(_OWORD *)(v8 + 4) = *(_OWORD *)(v32 + 4);
            *(_DWORD *)(v8 + 20) = v34;
            v35 = *(_QWORD *)(v32 + 24);
            *(_QWORD *)(v32 + 24) = 0;
            v36 = *(WTF::StringImpl **)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v35;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v36 -= 2;
            }
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v32 + 32);
            *(_OWORD *)(v32 + 4) = v198;
            *(_DWORD *)(v32 + 20) = v202;
            v18 = *(WTF::StringImpl **)(v32 + 24);
            *(_QWORD *)(v32 + 24) = v9;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                v18 = (WTF::StringImpl *)WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v18 -= 2;
            }
            *(_DWORD *)(v32 + 32) = v33;
            do
            {
              v8 += 40;
              if ((WTF::StringImpl *)v8 == v6)
                goto LABEL_331;
              v37 = *(_DWORD *)(v8 + 4);
            }
            while (v37 < v19 || v37 == v19 && *(unsigned __int8 *)(v8 + 12) < v22);
            do
            {
              if (v32 == v7)
                goto LABEL_331;
              v39 = v32;
              v40 = *(_DWORD *)(v32 - 36);
              if (v40 < v19)
                break;
              v41 = *(unsigned __int8 *)(v32 - 28);
              v32 -= 40;
            }
            while (v40 != v19 || v41 >= v22);
            v32 = v39 - 40;
          }
          while (v8 < v39 - 40);
        }
        if (v8 - 40 != v7)
        {
          v43 = *(_OWORD *)(v8 - 36);
          *(_DWORD *)(v179 + 16) = *(_DWORD *)(v8 - 20);
          *(_OWORD *)v179 = v43;
          v44 = *(_QWORD *)(v8 - 16);
          *(_QWORD *)(v8 - 16) = 0;
          v45 = *(WTF::StringImpl **)(v7 + 24);
          *(_QWORD *)(v7 + 24) = v44;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v45 -= 2;
          }
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 36) = v19;
        *(_DWORD *)(v8 - 32) = v180;
        *(_BYTE *)(v8 - 28) = v22;
        *(_DWORD *)(v8 - 20) = *(_DWORD *)&v195[7];
        *(_QWORD *)(v8 - 27) = *(_QWORD *)v195;
        v46 = *(WTF::StringImpl **)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v181;
        a3 = v183;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v46 -= 2;
        }
        *(_DWORD *)(v8 - 8) = v182;
        if (v11 < v4)
        {
LABEL_75:
          result = std::__introsort<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,false>(v7, v8 - 40, v183, a4 & 1);
          a4 = 0;
          continue;
        }
        v47 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v7, (WTF::StringImpl *)(v8 - 40));
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(v8, v6);
        if (!(_DWORD)result)
        {
          if (v47)
            continue;
          goto LABEL_75;
        }
        v6 = (WTF::StringImpl *)(v8 - 40);
        if (!v47)
          goto LABEL_2;
        return result;
    }
  }
}

WTF::StringImpl *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  unsigned int v12;
  __int128 *v13;
  unsigned int v14;
  __int128 *v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  __int128 *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  __int128 *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(a1, a2, a3, a4);
  v13 = (__int128 *)(a5 + 4);
  v12 = *(_DWORD *)(a5 + 4);
  v15 = (__int128 *)(a4 + 4);
  v14 = *(_DWORD *)(a4 + 4);
  if (v12 < v14
    || (v12 == v14 ? (v16 = *(unsigned __int8 *)(a5 + 12) >= *(unsigned __int8 *)(a4 + 12)) : (v16 = 1),
        !v16))
  {
    v43 = *v15;
    v47 = *(_DWORD *)(a4 + 20);
    v17 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    v18 = *(_DWORD *)(a4 + 32);
    v19 = *(_DWORD *)(a5 + 20);
    *v15 = *v13;
    *(_DWORD *)(a4 + 20) = v19;
    v20 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = 0;
    v21 = *(WTF::StringImpl **)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v11);
      else
        *(_DWORD *)v21 -= 2;
    }
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    *v13 = v43;
    *(_DWORD *)(a5 + 20) = v47;
    result = *(WTF::StringImpl **)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a5 + 32) = v18;
    v23 = (__int128 *)(a3 + 4);
    v22 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)v15 < v22
      || *(_DWORD *)v15 == v22 && *(unsigned __int8 *)(a4 + 12) < *(unsigned __int8 *)(a3 + 12))
    {
      v44 = *v23;
      v48 = *(_DWORD *)(a3 + 20);
      v24 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      v25 = *(_DWORD *)(a3 + 32);
      v26 = *(_DWORD *)(a4 + 20);
      *v23 = *v15;
      *(_DWORD *)(a3 + 20) = v26;
      v27 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = 0;
      v28 = *(WTF::StringImpl **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v11);
        else
          *(_DWORD *)v28 -= 2;
      }
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      *v15 = v44;
      *(_DWORD *)(a4 + 20) = v48;
      result = *(WTF::StringImpl **)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v24;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a4 + 32) = v25;
      v30 = (__int128 *)(a2 + 4);
      v29 = *(_DWORD *)(a2 + 4);
      if (*(_DWORD *)v23 < v29
        || *(_DWORD *)v23 == v29 && *(unsigned __int8 *)(a3 + 12) < *(unsigned __int8 *)(a2 + 12))
      {
        v45 = *v30;
        v49 = *(_DWORD *)(a2 + 20);
        v31 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v32 = *(_DWORD *)(a2 + 32);
        v33 = *(_DWORD *)(a3 + 20);
        *v30 = *v23;
        *(_DWORD *)(a2 + 20) = v33;
        v34 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
        v35 = *(WTF::StringImpl **)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v34;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v11);
          else
            *(_DWORD *)v35 -= 2;
        }
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        *v23 = v45;
        *(_DWORD *)(a3 + 20) = v49;
        result = *(WTF::StringImpl **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v31;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
          else
            *(_DWORD *)result -= 2;
        }
        *(_DWORD *)(a3 + 32) = v32;
        v36 = (__int128 *)(a1 + 4);
        v37 = *(_DWORD *)(a1 + 4);
        if (*(_DWORD *)v30 < v37
          || *(_DWORD *)v30 == v37 && *(unsigned __int8 *)(a2 + 12) < *(unsigned __int8 *)(a1 + 12))
        {
          v46 = *v36;
          v50 = *(_DWORD *)(a1 + 20);
          v38 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
          v39 = *(_DWORD *)(a1 + 32);
          v40 = *(_DWORD *)(a2 + 20);
          *v36 = *v30;
          *(_DWORD *)(a1 + 20) = v40;
          v41 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = 0;
          v42 = *(WTF::StringImpl **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v41;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v11);
            else
              *(_DWORD *)v42 -= 2;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *v30 = v46;
          *(_DWORD *)(a2 + 20) = v50;
          result = *(WTF::StringImpl **)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v38;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            else
              *(_DWORD *)result -= 2;
          }
          *(_DWORD *)(a2 + 32) = v39;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  __int128 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  __int128 *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  __int128 *v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;

  v5 = result;
  v7 = (__int128 *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 4);
  v8 = *(unsigned __int8 *)(a2 + 12);
  v10 = result + 4;
  v9 = *(_DWORD *)(result + 4);
  if (v6 >= v9 && (v6 == v9 ? (v11 = v8 >= *(unsigned __int8 *)(result + 12)) : (v11 = 1), v11))
  {
    v13 = (__int128 *)(a3 + 4);
    v12 = *(_DWORD *)(a3 + 4);
    if (v12 < v6 || (v12 == v6 ? (v14 = *(unsigned __int8 *)(a3 + 12) >= v8) : (v14 = 1), !v14))
    {
      v43 = *v7;
      v48 = *(_DWORD *)(a2 + 20);
      v15 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v16 = *(_DWORD *)(a2 + 32);
      v17 = *(_DWORD *)(a3 + 20);
      *v7 = *v13;
      *(_DWORD *)(a2 + 20) = v17;
      v18 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      v19 = *(WTF::StringImpl **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v18;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *v13 = v43;
      *(_DWORD *)(a3 + 20) = v48;
      result = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v15;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a3 + 32) = v16;
      if (*(_DWORD *)v7 < *(_DWORD *)v10
        || *(_DWORD *)v7 == *(_DWORD *)v10
        && *(unsigned __int8 *)(a2 + 12) < *(unsigned __int8 *)(v5 + 12))
      {
        v44 = *(_OWORD *)v10;
        v49 = *(_DWORD *)(v10 + 16);
        v20 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        v21 = *(_DWORD *)(v5 + 32);
        v22 = *((_DWORD *)v7 + 4);
        *(_OWORD *)v10 = *v7;
        *(_DWORD *)(v10 + 16) = v22;
        v23 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v24 = *(WTF::StringImpl **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = v23;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
        *v7 = v44;
        *((_DWORD *)v7 + 4) = v49;
        result = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v20;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        *(_DWORD *)(a2 + 32) = v21;
      }
    }
  }
  else
  {
    v26 = (__int128 *)(a3 + 4);
    v25 = *(_DWORD *)(a3 + 4);
    if (v25 >= v6 && (v25 == v6 ? (v27 = *(unsigned __int8 *)(a3 + 12) >= v8) : (v27 = 1), v27))
    {
      v45 = *(_OWORD *)v10;
      v50 = *(_DWORD *)(result + 20);
      v28 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 24) = 0;
      v29 = *(_DWORD *)(result + 32);
      v30 = *(_DWORD *)(a2 + 20);
      *(_OWORD *)v10 = *v7;
      *(_DWORD *)(result + 20) = v30;
      v31 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v32 = *(WTF::StringImpl **)(result + 24);
      *(_QWORD *)(v5 + 24) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
      *v7 = v45;
      *((_DWORD *)v7 + 4) = v50;
      result = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v28;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a2 + 32) = v29;
      v33 = *(_DWORD *)(a2 + 4);
      if (*(_DWORD *)v26 < v33
        || *(_DWORD *)v26 == v33 && *(unsigned __int8 *)(a3 + 12) < *(unsigned __int8 *)(a2 + 12))
      {
        v46 = *v7;
        v51 = *((_DWORD *)v7 + 4);
        v34 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v35 = *v26;
        *((_DWORD *)v7 + 4) = *(_DWORD *)(a3 + 20);
        *v7 = v35;
        v36 = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
        v37 = *(WTF::StringImpl **)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v37 -= 2;
        }
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        *v26 = v46;
        *(_DWORD *)(a3 + 20) = v51;
        result = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v34;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        *(_DWORD *)(a3 + 32) = v29;
      }
    }
    else
    {
      v47 = *(_OWORD *)v10;
      v52 = *(_DWORD *)(result + 20);
      v38 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 24) = 0;
      v39 = *(_DWORD *)(result + 32);
      v40 = *(_DWORD *)(a3 + 20);
      *(_OWORD *)v10 = *v26;
      *(_DWORD *)(result + 20) = v40;
      v41 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      v42 = *(WTF::StringImpl **)(result + 24);
      *(_QWORD *)(v5 + 24) = v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v42 -= 2;
      }
      *(_DWORD *)(v5 + 32) = *(_DWORD *)(a3 + 32);
      *v26 = v47;
      *(_DWORD *)(a3 + 20) = v52;
      result = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v38;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a3 + 32) = v39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  __int128 *v7;
  __int128 *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  __int128 v37;
  _BYTE v38[11];
  int v39;

  v2 = a2;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__int128 *)((char *)a2 - 36);
      v6 = *((_DWORD *)a2 - 9);
      v8 = (__int128 *)(a1 + 4);
      v9 = *(_DWORD *)(a1 + 4);
      if (v6 < v9 || v6 == v9 && *((unsigned __int8 *)a2 - 28) < *(unsigned __int8 *)(a1 + 12))
      {
        v37 = *v8;
        v39 = *(_DWORD *)(a1 + 20);
        v10 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        v11 = *(_DWORD *)(a1 + 32);
        v12 = *((_DWORD *)a2 - 5);
        *v8 = *v7;
        *(_DWORD *)(a1 + 20) = v12;
        v13 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = 0;
        v14 = *(WTF::StringImpl **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v13;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, a2);
          else
            *(_DWORD *)v14 -= 2;
        }
        *(_DWORD *)(a1 + 32) = *((_DWORD *)v2 - 2);
        *v7 = v37;
        *((_DWORD *)v2 - 5) = v39;
        v15 = (WTF::StringImpl *)*((_QWORD *)v2 - 2);
        *((_QWORD *)v2 - 2) = v10;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
            *(_DWORD *)v15 -= 2;
        }
        *((_DWORD *)v2 - 2) = v11;
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(a1, a1 + 40, (uint64_t)a2 - 40);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(a1, a1 + 40, a1 + 80, (uint64_t)a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*,0>(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)a2 - 40);
      return 1;
    default:
      v16 = a1 + 80;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(a1, a1 + 40, a1 + 80);
      v18 = a1 + 120;
      if ((WTF::StringImpl *)(a1 + 120) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v35 = v2;
      break;
  }
  while (1)
  {
    v21 = *(_DWORD *)(v18 + 4);
    v22 = *(_DWORD *)(v16 + 4);
    if (v21 < v22)
      break;
    v23 = *(unsigned __int8 *)(v18 + 12);
    if (v21 == v22 && v23 < *(unsigned __int8 *)(v16 + 12))
      goto LABEL_20;
LABEL_38:
    v16 = v18;
    v19 += 40;
    v18 += 40;
    if ((WTF::StringImpl *)v18 == v2)
      return 1;
  }
  v23 = *(unsigned __int8 *)(v18 + 12);
LABEL_20:
  v25 = 0;
  v26 = *(_DWORD *)(v18 + 8);
  *(_QWORD *)v38 = *(_QWORD *)(v18 + 13);
  *(_DWORD *)&v38[7] = *(_DWORD *)(v18 + 20);
  v27 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v18 + 24) = 0;
  v36 = *(_DWORD *)(v18 + 32);
  for (i = v19; ; i -= 40)
  {
    v29 = a1 + i;
    *(_OWORD *)(v29 + 124) = *(_OWORD *)(a1 + i + 84);
    *(_DWORD *)(v29 + 140) = *(_DWORD *)(a1 + i + 100);
    v30 = *(_QWORD *)(a1 + i + 104);
    *(_QWORD *)(v29 + 104) = 0;
    *(_QWORD *)(v29 + 144) = v30;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    *(_DWORD *)(v29 + 152) = *(_DWORD *)(v29 + 112);
    if (i == -80)
    {
      v33 = a1;
      goto LABEL_34;
    }
    v31 = *(_DWORD *)(a1 + i + 44);
    if (v21 >= v31 && (v21 != v31 || v23 >= *(unsigned __int8 *)(a1 + i + 52)))
      break;
    v25 = *(WTF::StringImpl **)(v29 + 104);
  }
  v33 = a1 + i + 80;
LABEL_34:
  *(_DWORD *)(a1 + i + 84) = v21;
  *(_DWORD *)(v33 + 8) = v26;
  *(_BYTE *)(v33 + 12) = v23;
  *(_QWORD *)(v33 + 13) = *(_QWORD *)v38;
  *(_DWORD *)(v33 + 20) = *(_DWORD *)&v38[7];
  v34 = *(WTF::StringImpl **)(v33 + 24);
  *(_QWORD *)(v33 + 24) = v27;
  v2 = v35;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v17);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_DWORD *)(v33 + 32) = v36;
  if (++v20 != 8)
    goto LABEL_38;
  return v18 + 40 == (_QWORD)v35;
}

WTF::StringImpl *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  __int128 *v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  __int128 *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  int v39;

  result = (WTF::StringImpl *)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_1 &,WebCore::MarkedText*>(a1, a2, a3);
  v11 = (__int128 *)(a4 + 4);
  v10 = *(_DWORD *)(a4 + 4);
  v13 = (__int128 *)(a3 + 4);
  v12 = *(_DWORD *)(a3 + 4);
  if (v10 < v12
    || (v10 == v12 ? (v14 = *(unsigned __int8 *)(a4 + 12) >= *(unsigned __int8 *)(a3 + 12)) : (v14 = 1),
        !v14))
  {
    v34 = *v13;
    v37 = *(_DWORD *)(a3 + 20);
    v15 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    v16 = *(_DWORD *)(a3 + 32);
    v17 = *(_DWORD *)(a4 + 20);
    *v13 = *v11;
    *(_DWORD *)(a3 + 20) = v17;
    v18 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    v19 = *(WTF::StringImpl **)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    *v11 = v34;
    *(_DWORD *)(a4 + 20) = v37;
    result = *(WTF::StringImpl **)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v15;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
    *(_DWORD *)(a4 + 32) = v16;
    v21 = (__int128 *)(a2 + 4);
    v20 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)v13 < v20
      || *(_DWORD *)v13 == v20 && *(unsigned __int8 *)(a3 + 12) < *(unsigned __int8 *)(a2 + 12))
    {
      v35 = *v21;
      v38 = *(_DWORD *)(a2 + 20);
      v22 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      v23 = *(_DWORD *)(a2 + 32);
      v24 = *(_DWORD *)(a3 + 20);
      *v21 = *v13;
      *(_DWORD *)(a2 + 20) = v24;
      v25 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      v26 = *(WTF::StringImpl **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v9);
        else
          *(_DWORD *)v26 -= 2;
      }
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *v13 = v35;
      *(_DWORD *)(a3 + 20) = v38;
      result = *(WTF::StringImpl **)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v22;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
      *(_DWORD *)(a3 + 32) = v23;
      v27 = (__int128 *)(a1 + 4);
      v28 = *(_DWORD *)(a1 + 4);
      if (*(_DWORD *)v21 < v28
        || *(_DWORD *)v21 == v28 && *(unsigned __int8 *)(a2 + 12) < *(unsigned __int8 *)(a1 + 12))
      {
        v36 = *v27;
        v39 = *(_DWORD *)(a1 + 20);
        v29 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        v30 = *(_DWORD *)(a1 + 32);
        v31 = *(_DWORD *)(a2 + 20);
        *v27 = *v21;
        *(_DWORD *)(a1 + 20) = v31;
        v32 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = 0;
        v33 = *(WTF::StringImpl **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v32;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v9);
          else
            *(_DWORD *)v33 -= 2;
        }
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *v21 = v36;
        *(_DWORD *)(a2 + 20) = v39;
        result = *(WTF::StringImpl **)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v29;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          else
            *(_DWORD *)result -= 2;
        }
        *(_DWORD *)(a2 + 32) = v30;
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>::~KeyValuePair(WTF::StringImpl **a1, void *a2)
{
  bmalloc::api *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF::StringImpl *v8;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 0;
      v5 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  v8 = *a1;
  *a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

_QWORD *WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;

  result = (_QWORD *)WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  *v4 = *result;
  v5 = result[1];
  result[1] = 0;
  v4[1] = v5;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x19636B734);
    }
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    result = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = result;
    if ((_DWORD)v8)
    {
      v10 = v7;
      do
      {
        *(_QWORD *)result = *(_QWORD *)v10;
        v11 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *(_QWORD *)(result + 8) = v11;
        v12 = (_DWORD *)*((_QWORD *)v10 + 1);
        if (v12)
        {
          if (!*v12)
            goto LABEL_20;
          --*v12;
        }
        v10 = (WTF *)((char *)v10 + 16);
        result += 16;
      }
      while (v10 != (WTF *)((char *)v7 + 16 * v8));
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      return WTF::fastFree(v7, v9);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  *(_DWORD *)v4 = 0;
  v5 = *(_OWORD *)(v3 + 4);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v3 + 20);
  *(_OWORD *)(v4 + 4) = v5;
  v6 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v4 + 24) = v6;
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 32);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x6666667)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 40 * v4;
    v9 = WTF::fastMalloc((WTF *)(40 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v11 = v9;
      v12 = 40 * v7;
      v13 = v6;
      do
      {
        *(_DWORD *)v11 = 0;
        v14 = *(_OWORD *)((char *)v13 + 4);
        *(_DWORD *)(v11 + 20) = *((_DWORD *)v13 + 5);
        *(_OWORD *)(v11 + 4) = v14;
        v15 = *((_QWORD *)v13 + 3);
        *((_QWORD *)v13 + 3) = 0;
        *(_QWORD *)(v11 + 24) = v15;
        *(_DWORD *)(v11 + 32) = *((_DWORD *)v13 + 8);
        WebCore::MarkedText::~MarkedText(v13, v10);
        v13 = (WTF *)(v16 + 40);
        v11 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::add@<X0>(uint64_t *result@<X0>, _DWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  _DWORD *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = (unint64_t)*a2 + ~((_QWORD)*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = (_DWORD *)*v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_35;
      }
      if (v15 == (_DWORD *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = (_DWORD *)*v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  if (v9)
    ++*v9;
  *v14 = (uint64_t)v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_30;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_31:
    result = (uint64_t *)WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::rehash(v4, v25, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_35:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (_QWORD *)(v6 + 8 * v11);
      v14 = (_DWORD *)*v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v13 = 0;
        *v24 = v14;
        v25 = (_DWORD *)*v13;
        if (*v13)
        {
          if (!*v25)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          --*v25;
        }
        if (v13 == a3)
          v12 = v24;
      }
      if (++v11 == v7)
        goto LABEL_20;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v12;
  }
  return result;
}

unsigned int *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::AtomString const&,WebCore::ReferencedSVGResources::addClientForTarget(WebCore::SVGElement &,WTF::AtomString const&)::$_0>(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t **a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int *result;
  void *v9;
  bmalloc::api *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *a1;
  *a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = **a3;
  v7 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
  *(_QWORD *)v7 = off_1E341EB10;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  result = WebCore::SVGElement::addReferencingCSSClient((uint64_t)a3[1], v7);
  v10 = a1[1];
  a1[1] = v7;
  if (v10)
  {
    v11 = *((_QWORD *)v10 + 1);
    if (v11)
    {
      *(_QWORD *)(v11 + 8) = 0;
      v12 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v9);
        }
      }
    }
    else
    {
      *((_QWORD *)v10 + 1) = 0;
    }
    return (unsigned int *)bmalloc::api::isoDeallocate(v10, v9);
  }
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::StringImpl **v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v11 = (WTF::StringImpl **)v5;
    do
    {
      if (*v11)
        WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t *)a1, (uint64_t)v11);
      WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>::~KeyValuePair(v11, v7);
      v11 += 2;
      --v4;
    }
    while (v4);
    return WTF::fastFree(v5, v7);
  }
  if (v5)
    return WTF::fastFree(v5, v7);
  return result;
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *result;
  uint64_t v15;
  uint64_t v16;
  bmalloc::api *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *(WTF::StringImpl **)a2;
  v7 = (v5 ^ (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl *)(*a1 + 16 * v7);
  v10 = *(WTF::StringImpl **)v9;
  if (*(_QWORD *)v9)
  {
    v12 = 0;
    do
    {
      v13 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v12 > v13)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>((WTF::StringImpl **)a2, v9);
        v8 = *a1;
        v12 = v13;
      }
      v7 = ((_DWORD)v7 + 1) & v4;
      ++v12;
      v9 = (WTF::StringImpl *)(v8 + 16 * v7);
      v10 = *(WTF::StringImpl **)v9;
    }
    while (*(_QWORD *)v9);
    v6 = *(WTF::StringImpl **)a2;
  }
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = v8 + 16 * v7;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v17 = *(bmalloc::api **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v16;
  if (v17)
  {
    v18 = *((_QWORD *)v17 + 1);
    if (v18)
    {
      *(_QWORD *)(v18 + 8) = 0;
      v19 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v9);
        }
      }
    }
    else
    {
      *((_QWORD *)v17 + 1) = 0;
    }
    return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v17, v9);
  }
  return result;
}

WTF::StringImpl *WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  bmalloc::api *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  result = *a1;
  *a1 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    v8 = *((_QWORD *)v7 + 1);
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 0;
      v9 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v7 + 1) = 0;
    }
    return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v7, a2);
  }
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WebCore::CSSSVGResourceElementClient>>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  bmalloc::api *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *result;
  bmalloc::api *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 1);
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = 0;
      v11 = (unsigned int *)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v9 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v9, a2);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v15 = (bmalloc::api *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (v16)
    {
      *(_QWORD *)(v16 + 8) = 0;
      v17 = (unsigned int *)*((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v15 + 1) = 0;
    }
    return (WTF::StringImpl *)bmalloc::api::isoDeallocate(v15, a2);
  }
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = v5;
  v6 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = v8;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 8) = v9;
          LODWORD(v9) = *(_DWORD *)(result + 16);
          *(_DWORD *)(result + 16) = 0;
          *(_DWORD *)(v7 + 16) = v9;
          LODWORD(v9) = *(_DWORD *)(result + 20);
          *(_DWORD *)(result + 20) = 0;
          *(_DWORD *)(v7 + 20) = v9;
          result = std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~pair(result, v6)+ 24;
          v7 += 24;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 24 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 48 * v4;
      result = WTF::fastMalloc((WTF *)(48 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 48 * v7;
        v11 = v6;
        do
        {
          v12 = *(_OWORD *)v11;
          v13 = *((_OWORD *)v11 + 2);
          *(_OWORD *)(result + 16) = *((_OWORD *)v11 + 1);
          *(_OWORD *)(result + 32) = v13;
          *(_OWORD *)result = v12;
          result += 48;
          v11 = (WTF *)((char *)v11 + 48);
          v10 -= 48;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AffineTransform>(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v3 = (_OWORD *)WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
  v6 = v3[1];
  v5 = v3[2];
  *v4 = *v3;
  v4[1] = v6;
  v4[2] = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntRect>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WebCore::RenderAttachment::~RenderAttachment(WebCore::RenderAttachment *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

unint64_t WebCore::RenderAttachment::layout(WebCore::RenderAttachment *this)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t result;
  void (**v10)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v11;
  void (**v12)(WebCore::RenderThemeIOS *__hidden);
  int v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v2 = *(_WORD *)(v1 + 28);
  if ((v2 & 0x10) == 0
    || (v2 & 0x110) == 0x110
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19636C7F8);
  }
  v4 = *(_QWORD *)(v1 + 200);
  if (!v4)
    goto LABEL_17;
  v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v5)
    goto LABEL_17;
  v6 = *(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D);
  if ((v6 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19636C818);
  }
  if ((v6 & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19636C838);
  }
  if ((*(_BYTE *)(v5 + 20) & 0xF8) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 688))(v5);
  v7 = *(_QWORD *)(v5 + 160);
  if ((int)v7 >= 1 && SHIDWORD(v7) >= 1)
  {
    *((_QWORD *)this + 25) = v7;
    result = WebCore::RenderReplaced::layout(this);
    if (*((_BYTE *)this + 221) || *((_BYTE *)this + 222))
    {
      v15 = WebCore::RenderReplaced::intrinsicSize((unint64_t)this);
      return WebCore::RenderAttachment::layoutShadowContent(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32), (const WebCore::LayoutSize *)&v15);
    }
  }
  else
  {
LABEL_17:
    {
      v10 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v14 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v14 + 40) = 0u;
      *(_OWORD *)(v14 + 24) = 0u;
      v10 = &off_1E335BC30;
      *(_QWORD *)v14 = &off_1E335BC30;
    }
    v11 = ((uint64_t (*)(uint64_t *, WebCore::RenderAttachment *))v10[58])(&WebCore::RenderTheme::singleton(void)::theme, this);
    v15 = v11;
    {
      v12 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      unk_1ECE88AD0 = 0u;
      unk_1ECE88AC0 = 0u;
      v12 = &off_1E335BC30;
      WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
    }
    if ((((uint64_t (*)(uint64_t *, WebCore::RenderAttachment *))v12[60])(&WebCore::RenderTheme::singleton(void)::theme, this) & 1) == 0)
    {
      v13 = *((_DWORD *)this + 54);
      if (v13 <= (int)v11)
        v13 = v11;
      *((_DWORD *)this + 54) = v13;
      LODWORD(v15) = v13;
      v11 = v15;
    }
    *((_QWORD *)this + 25) = v11;
    result = WebCore::RenderReplaced::layout(this);
    if (*((_BYTE *)this + 221) || *((_BYTE *)this + 222))
      return WebCore::RenderAttachment::layoutShadowContent(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32), (const WebCore::LayoutSize *)&v15);
  }
  return result;
}

uint64_t WebCore::RenderAttachment::layoutShadowContent(uint64_t this, const WebCore::LayoutSize *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  __int16 v10;
  char v11;

  if ((this & 0xFFFFFFFFFFLL) != 0)
  {
    v2 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
    if (v2)
    {
      while ((*(_BYTE *)(v2 + 45) & 4) == 0)
      {
        v4 = *(unsigned int *)(v2 + 47);
        if (v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
        {
          v2 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
          if (v2)
            continue;
        }
        return this;
      }
LABEL_7:
      *(float *)&v9 = (float)*((int *)a2 + 1) * 0.015625;
      v10 = 4;
      v11 = 1;
      WebCore::RenderStyle::setHeight(v2 + 80, (WebCore::Length *)&v9);
      if (v10 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
      }
      *(float *)&v9 = (float)*(int *)a2 * 0.015625;
      v10 = 4;
      v11 = 1;
      WebCore::RenderStyle::setWidth(v2 + 80, (WebCore::Length *)&v9);
      if (v10 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
      }
      v5 = *(_DWORD *)(v2 + 20);
      if ((v5 & 8) == 0)
      {
        *(_DWORD *)(v2 + 20) = v5 | 8;
        if ((v5 & 0x8000) != 0)
        {
          if ((*(_BYTE *)(v2 + 45) & 0x10) == 0
            || ((v6 = *(_QWORD *)(v2 + 144)) == 0
              ? (v7 = MEMORY[8])
              : (v7 = *(_DWORD *)(v6 + 8) + 1, *(_DWORD *)(v6 + 8) = v7),
                *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                !v7))
          {
            __break(0xC471u);
            JUMPOUT(0x19636CA8CLL);
          }
          *(_DWORD *)(v6 + 8) = v7 - 1;
        }
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 688))(v2);
      while (1)
      {
        v8 = *(unsigned int *)(v2 + 47);
        if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
          break;
        v2 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
        if (!v2)
          break;
        if ((*(_BYTE *)(v2 + 45) & 4) != 0)
          goto LABEL_7;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderAttachment::baselinePosition(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(WebCore::RenderThemeIOS *__hidden);
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v2 = *(_WORD *)(v1 + 28);
  if ((v2 & 0x10) == 0
    || (v2 & 0x110) == 0x110
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19636CBC8);
  }
  v3 = a1;
  v4 = *(_QWORD *)(v1 + 192);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL;
    if (v5 && (*(_BYTE *)(v5 + 45) & 4) != 0)
    {
      v10 = *(_DWORD *)(a1 + 164);
      v11 = *(_DWORD *)(v5 + 164);
      v12 = __OFADD__(v10, v11);
      v13 = v10 + v11;
      v14 = (v10 >> 31) + 0x7FFFFFFF;
      if (v12)
        v13 = v14;
      return (v13 / 2);
    }
    else
    {
      return *(unsigned int *)(a1 + 164);
    }
  }
  else
  {
    {
      v7 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v15 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      v3 = a1;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      v7 = &off_1E335BC30;
      *(_QWORD *)v15 = &off_1E335BC30;
    }
    v8 = ((uint64_t (*)(uint64_t *, uint64_t))v7[59])(&WebCore::RenderTheme::singleton(void)::theme, v3);
    v9 = v8 << 6;
    if (v8 < -33554432)
      v9 = 0x80000000;
    if (v8 <= 0x1FFFFFF)
      return v9;
    else
      return 0x7FFFFFFFLL;
  }
}

uint64_t WebCore::RenderAttachment::paintReplaced(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  const WebCore::PaintInfo *v3;
  const WebCore::RenderBox *v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::PaintInfo *v7;
  _QWORD v8[2];

  v3 = a2;
  if (*((_WORD *)a2 + 8) == 128)
  {
    v4 = (const WebCore::RenderBox *)this;
    if ((*(_BYTE *)(this + 23) & 0x60) != 0
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 32) + 148) & 0x1FC000) != 0)
    {
      v8[1] = *(_QWORD *)(this + 160);
      v8[0] = *(_QWORD *)a3;
      {
        v6 = this;
        v7 = v3;
        v5 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        v4 = (const WebCore::RenderBox *)v6;
        v3 = v7;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_QWORD *)v5 = &off_1E335BC30;
      }
      return WebCore::RenderTheme::paint((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, v4, v3, (const WebCore::LayoutRect *)v8);
    }
  }
  return this;
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderBox>::begin(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;

  result = *a1;
  v2 = *(unsigned int *)(result + 64);
  if (v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v4 + 8))
    {
      if ((*(_BYTE *)(i + 45) & 4) != 0)
        break;
      v4 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v4)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildIterator<WebCore::RenderBox>::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while ((*(_BYTE *)(v1 + 45) & 4) == 0)
    {
      v3 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v3)
        goto LABEL_3;
      v2 = 0;
      v1 = *(_QWORD *)(v3 + 8);
      if (!v1)
        goto LABEL_4;
    }
    v2 = v1;
  }
  else
  {
LABEL_3:
    v2 = 0;
  }
LABEL_4:
  *(_QWORD *)(result + 8) = v2;
  return result;
}

uint64_t WebCore::RenderAttachment::paintWideLayoutAttachmentOnly(WebCore::RenderAttachment *this, const WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v3;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  int v14;
  BOOL v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v3 = *((unsigned __int16 *)a2 + 8);
  if (v3 != 128 && v3 != 8)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 0x10) == 0)
    goto LABEL_23;
  v8 = v7 & 0x110;
  if (v8 == 272 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    goto LABEL_23;
  v9 = *(_QWORD *)(v6 + 200);
  if (!v9)
    return 0;
  v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v10)
  {
    v14 = v7 & 0x10;
    goto LABEL_13;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x19636CF38);
  }
  v12 = *((_OWORD *)a2 + 3);
  v19 = *((_OWORD *)a2 + 2);
  v20 = v12;
  v21 = *((_OWORD *)a2 + 4);
  v22 = *((_QWORD *)a2 + 10);
  v13 = *((_OWORD *)a2 + 1);
  v17 = *(_OWORD *)a2;
  v18 = v13;
  LOWORD(v18) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 680))(v10, &v17);
  LOWORD(v18) = 2;
  (*(void (**)(uint64_t, __int128 *, const WebCore::LayoutPoint *))(*(_QWORD *)v10 + 680))(v10, &v17, a3);
  LOWORD(v18) = 4;
  (*(void (**)(uint64_t, __int128 *, const WebCore::LayoutPoint *))(*(_QWORD *)v10 + 680))(v10, &v17, a3);
  LOWORD(v18) = 8;
  (*(void (**)(uint64_t, __int128 *, const WebCore::LayoutPoint *))(*(_QWORD *)v10 + 680))(v10, &v17, a3);
  LOWORD(v18) = 16;
  (*(void (**)(uint64_t, __int128 *, const WebCore::LayoutPoint *))(*(_QWORD *)v10 + 680))(v10, &v17, a3);
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v14 = *(_WORD *)(v6 + 28) & 0x10;
  v8 = *(_WORD *)(v6 + 28) & 0x110;
LABEL_13:
  v15 = v8 == 272 || v14 == 0;
  if (v15 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19636CF58);
  }
  WebCore::HTMLAttachmentElement::requestWideLayoutIconIfNeeded(v6);
  return 1;
}

void WebCore::RenderBlock::~RenderBlock(WebCore::RenderBlock *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
  {
    v4 = *(_QWORD *)WebCore::gRareDataMap;
    if (*(_QWORD *)WebCore::gRareDataMap)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = v9;
        v12 = *(_QWORD *)(v4 + 16 * v9);
        if (v12 != -1)
        {
          if (!v12)
            goto LABEL_2;
          if (*(WebCore::RenderBlock **)(v12 + 8) == this)
            break;
        }
        v9 = (v11 + i) & v5;
      }
      if ((_DWORD)v11 != *(_DWORD *)(v4 - 4))
        WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::remove((uint64_t *)WebCore::gRareDataMap, (WTF **)(v4 + 16 * v11));
    }
  }
LABEL_2:
  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlock::~RenderBlock(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 192) = 0;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
    }
  }
  if ((_DWORD)v9 == *(_DWORD *)(v2 - 4))
    return 0;
  WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::remove(a1, (WTF **)(v2 + 16 * v9));
  return 1;
}

WebCore::RenderObject *WebCore::RenderBlock::removePositionedObjects(WebCore::RenderObject *result, WebCore::RenderObject *a2, int a3)
{
  WebCore::RenderObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  WebCore::RenderObject *v23;
  WebCore::RenderObject *v24;
  const WebCore::RenderBox **v25;
  uint64_t v26;
  const WebCore::RenderBox *v27;
  const WebCore::RenderBox **v28;
  uint64_t v29;
  uint64_t v30;

  v5 = result;
  {
    v6 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v6 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v6;
  v7 = *((_QWORD *)result + 1);
  if (v7 && *(_QWORD *)(v7 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
  {
    v8 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
    v9 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    for (i = 1; ; ++i)
    {
      v14 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v12);
      if (!v14)
        break;
      if (v14 != -1 && v14 == v7)
      {
        v16 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v12 + 8);
        if (v16)
        {
          v28 = (const WebCore::RenderBox **)&v30;
          v29 = 16;
          v17 = *(_QWORD **)(v16 + 8);
          if (v17)
          {
            while (1)
            {
              v18 = *(_QWORD *)(*v17 + 8);
              if (v18)
                break;
              v17 = (_QWORD *)v17[2];
              if (!v17)
                return (WebCore::RenderObject *)WTF::Vector<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
            }
LABEL_17:
            if (!a2 || WebCore::RenderObject::isDescendantOf((WebCore::RenderObject *)v18, a2))
            {
              if (HIDWORD(v29) == (_DWORD)v29)
              {
                WTF::Vector<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox&>((uint64_t)&v28, (_DWORD *)v18);
              }
              else
              {
                v19 = HIDWORD(v29) + 1;
                v28[HIDWORD(v29)] = (const WebCore::RenderBox *)v18;
                ++*(_DWORD *)(v18 + 16);
                HIDWORD(v29) = v19;
              }
              if (!a3)
              {
                v22 = *(_DWORD *)(v18 + 20);
                if ((v22 & 0x20) == 0)
                  *(_DWORD *)(v18 + 20) = v22 | 0x20;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 1520))(v18))
                  WebCore::RenderObject::setPreferredLogicalWidthsDirty(v18, 1, 0);
              }
              v20 = *(_QWORD *)(v18 + 32);
              if (v20)
              {
                while (1)
                {
                  v21 = *(_QWORD *)(v20 + 8);
                  if (!v21)
                    goto LABEL_33;
                  if ((*(_BYTE *)(v21 + 45) & 0x40) != 0)
                    break;
                  v20 = *(_QWORD *)(v21 + 32);
                  if (!v20)
                    goto LABEL_33;
                }
                WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)v21, 1);
              }
              if ((*(_DWORD *)(v18 + 20) & 0x1800000) != 0x1000000)
                goto LABEL_34;
LABEL_33:
              if ((*(_BYTE *)(v18 + 45) & 2) != 0)
                v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
              if ((*(_QWORD *)(v18 + 96) & 0x380000) == 0x300000)
              {
                v24 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40)
                                                            + 8)
                                                + 1944);
              }
              else
              {
LABEL_34:
                v23 = WebCore::RenderObject::containingBlock(v5);
                if (!v23)
                  goto LABEL_44;
                v24 = v23;
                while (!WebCore::RenderElement::canContainAbsolutelyPositionedObjects(v24))
                {
                  v24 = WebCore::RenderObject::containingBlock(v24);
                  if (!v24)
                    goto LABEL_44;
                }
              }
              WebCore::RenderObject::setNeedsLayout(v24, 1);
            }
LABEL_44:
            while (1)
            {
              v17 = (_QWORD *)v17[2];
              if (!v17)
                break;
              v18 = *(_QWORD *)(*v17 + 8);
              if (v18)
              {
                ++*(_DWORD *)(v16 + 24);
                goto LABEL_17;
              }
            }
            ++*(_DWORD *)(v16 + 24);
            if (HIDWORD(v29))
            {
              v25 = v28;
              v26 = 8 * HIDWORD(v29);
              do
              {
                v27 = *v25;
                {
                  WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
                  unk_1ECE91358 = 0u;
                }
                WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v27);
                ++v25;
                v26 -= 8;
              }
              while (v26);
            }
          }
          return (WebCore::RenderObject *)WTF::Vector<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
        }
        return result;
      }
      v12 = (v12 + i) & v8;
    }
  }
  return result;
}

uint64_t *WebCore::RenderBlock::deleteLines(uint64_t *this)
{
  uint64_t *v1;
  WebCore::Element *v2;
  WebCore::RenderElement *v3;

  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v3 = (WebCore::RenderElement *)this;
    v1 = (uint64_t *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(this[3] + 8) + 40)
                                                                                       + 8));
    this = (uint64_t *)v3;
    if (v1)
    {
      v2 = (WebCore::Element *)WebCore::RenderElement::element(v3);
      return WebCore::AXObjectCache::deferRecomputeIsIgnored(v1, v2);
    }
  }
  return this;
}

uint64_t WebCore::RenderBlock::childrenPreventSelfCollapsing(WebCore::RenderBlock *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  v1 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v1 || (*(_BYTE *)(v1 + 45) & 4) == 0)
    return 0;
  while (1)
  {
    v3 = *(_DWORD *)(v1 + 20);
    if ((v3 & 0x800) == 0
      && (v3 & 0x1800000) != 0x1000000
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 1240))(v1))
    {
      break;
    }
    v4 = *(unsigned int *)(v1 + 47);
    if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)))
      return 0;
    v1 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8);
    if (!v1)
      return 0;
    result = 0;
    if ((*(_BYTE *)(v1 + 45) & 4) == 0)
      return result;
  }
  return 1;
}

WTF *WTF::WeakHashSet<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderBlock>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  void *v9;
  WTF *result;
  void *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF **v19;
  unsigned int v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF *v28;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v13 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_12:
      v14 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_13:
      v15 = v14;
LABEL_14:
      *(_DWORD *)(a1 + 12) = 2 * v15;
      goto LABEL_2;
    }
    v16 = *(unsigned int *)(v13 - 4);
    if (!(_DWORD)v16)
      goto LABEL_29;
    v17 = 0;
    v18 = v16 - 1;
    do
    {
      v19 = (WTF **)(v13 + 8 * v18);
      if ((unint64_t)*v19 + 1 >= 2 && !*((_QWORD *)*v19 + 1))
      {
        v27 = v17;
        v26 = v18;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v19, a2);
        v18 = v26;
        v17 = v27 + 1;
      }
    }
    while ((unint64_t)v18--);
    v13 = *(_QWORD *)a1;
    if (v17)
    {
      v23 = v17;
      *(_DWORD *)(v13 - 16) += v17;
      v24 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      *(_DWORD *)(v24 - 12) = v25 - v23;
      v13 = *(_QWORD *)a1;
    }
    if (!v13)
      goto LABEL_12;
    v21 = *(_DWORD *)(v13 - 4);
    if (v21 < 9 || 6 * *(_DWORD *)(v13 - 12) >= v21)
    {
LABEL_29:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v13 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v13)
      {
        v14 = 0;
        goto LABEL_13;
      }
    }
    v14 = *(_DWORD *)(v13 - 12);
    v15 = 0x7FFFFFFF;
    if (v14 >= 0x7FFFFFFF)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_2:
  v8 = (WTF *)a2[1];
  if (!v8)
  {
    v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = a2;
    v12 = (WTF *)a2[1];
    a2[1] = v8;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WTF::fastFree(v12, v11);
        v8 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  *(_DWORD *)v8 += 2;
  v28 = v8;
  WTF::HashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::add((uint64_t *)a1, &v28, a3);
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v9);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v8 == 1)
    return (WTF *)WTF::fastFree(v8, v9);
  --*(_DWORD *)v8;
  return result;
}

WTF *WebCore::RenderBlock::clearLayoutOverflow(WTF *this, void *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 20);
    if (*(_OWORD *)(v2 + 20) == __PAIR128__(v3, 0))
    {
      return WebCore::RenderBox::clearOverflow(this, a2);
    }
    else
    {
      *(_QWORD *)(v2 + 4) = 0;
      *(_QWORD *)(v2 + 12) = v3;
    }
  }
  return this;
}

uint64_t WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(_QWORD *)(v10 + 8) == a2)
        break;
    }
    v7 = (v9 + i) & v3;
  }
  return *(_QWORD *)(v2 + 16 * v9 + 8);
}

uint64_t WebCore::RenderBlock::ensureBlockRareData(WebCore::RenderBlock *this, void *a2)
{
  uint64_t *v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  WTF *v30;

  v3 = (uint64_t *)WebCore::gRareDataMap;
  if (!WebCore::gRareDataMap)
  {
    v3 = (uint64_t *)WTF::fastMalloc((WTF *)8);
    *v3 = 0;
    WebCore::gRareDataMap = (uint64_t)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *((_QWORD *)v4 + 1) = this;
    v30 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        WTF::fastFree(v30, a2);
        v4 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
  }
  ++*(_DWORD *)v4;
  v5 = *v3;
  if (*v3
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, 8u, 0), (v5 = *v3) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
  v8 = *((_QWORD *)v4 + 1);
  v9 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v6;
    v15 = (WTF **)(v5 + 16 * v14);
    v16 = *v15;
    if (*v15 != (WTF *)-1)
      break;
    v7 = v5 + 16 * v14;
LABEL_13:
    v12 = i + v14;
  }
  if (!v16)
  {
    if (v7)
    {
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      --*(_DWORD *)(*v3 - 16);
      *(_QWORD *)v7 = v4;
    }
    else
    {
      *v15 = v4;
      v7 = v5 + 16 * v14;
    }
    *(_WORD *)((char *)this + 69) |= 0x400u;
    v18 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 24) = 0;
    v20 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = v18;
    if (v20)
    {
      if (*(_BYTE *)(v20 + 24))
      {
        v21 = *(WTF **)(v20 + 16);
        *(_QWORD *)(v20 + 16) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v19);
          else
            --*(_DWORD *)v21;
        }
      }
      WTF::fastFree((WTF *)v20, v19);
    }
    v22 = *v3;
    if (*v3)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v24 = *v3;
    if (*v3)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26)
        return *(_QWORD *)(v7 + 8);
    }
    else
    {
      if (3 * v27 > 4 * v26)
        return *(_QWORD *)(v7 + 8);
      if (!(_DWORD)v27)
      {
        v28 = 8;
        goto LABEL_37;
      }
    }
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_37:
    v7 = WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, v28, (WTF **)v7);
    return *(_QWORD *)(v7 + 8);
  }
  if (*((_QWORD *)v16 + 1) != v8)
    goto LABEL_13;
  v17 = *(_QWORD *)(v5 + 16 * v14 + 8);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree(v4, a2);
  else
    --*(_DWORD *)v4;
  return v17;
}

const WebCore::RenderBlock *WebCore::RenderBlock::preparePaginationBeforeBlockLayout(const WebCore::RenderBlock *this, BOOL *a2)
{
  const WebCore::RenderBlock *v2;

  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v2 = this;
    this = (const WebCore::RenderBlock *)(*(uint64_t (**)(void))(*(_QWORD *)this + 648))();
    if (this)
      return (const WebCore::RenderBlock *)WebCore::RenderFragmentedFlow::logicalWidthChangedInFragmentsForBlock((uint64_t)this, v2, a2);
  }
  return this;
}

uint64_t WebCore::RenderBlock::layoutBlock(uint64_t result)
{
  unsigned int v1;

  v1 = *(_DWORD *)(result + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(result + 20) = v1;
  if (result && (*(_BYTE *)(result + 45) & 2) == 0)
  {
    *(_WORD *)(result + 69) &= ~1u;
    *(_WORD *)(result + 76) = *(_WORD *)(result + 76) & 0xF | (16
                                                             * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                                                                                                + 1944)
                                                                                    + 248)
                                                                        + 472));
  }
  *(_DWORD *)(result + 20) = v1 & 0xFFDFFE07;
  return result;
}

WTF *WebCore::RenderBox::clearOverflow(WebCore::RenderBox *this, void *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    result = (WTF *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this);
    if (result)
      return WebCore::RenderFragmentedFlow::clearFragmentsOverflow(result, this);
  }
  return result;
}

uint64_t WebCore::RenderBlock::positionedObjects(WebCore::RenderBlock *this)
{
  int v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  {
    v1 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v1 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v1;
  v2 = *((_QWORD *)this + 1);
  if (v2 && *(_QWORD *)(v2 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
  {
    v3 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
    v4 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v7);
      if (!v9)
        break;
      if (v9 != -1 && v9 == v2)
        return *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v7 + 8);
      v7 = (v7 + i) & v3;
    }
  }
  return 0;
}

void WebCore::RenderBox::addOverflowFromChild(WebCore::RenderBox *this, unint64_t a2, const WebCore::LayoutSize *a3, const WebCore::LayoutRect *a4, __n128 a5)
{
  WTF::StringImpl *v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  signed int v34;
  uint64_t v35;
  uint64_t v36;
  signed int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  signed int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int16 *v85;
  int v86;
  int v87;
  char v88;
  unsigned __int16 *v89;
  char v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  float v98;
  float v99;
  float v100;
  float64x2_t v102;
  WTF *v103;
  double v104;
  double v105;
  float v106;
  float v107;
  float v108;
  float v109;
  double v110;
  double v111;
  float v112;
  double v113;
  double v114;
  float v115;
  float v116;
  double v117;
  double v118;
  float v119;
  double v120;
  double v121;
  float v122;
  float v123;
  float v124;
  int v125;
  uint64_t v126;
  float v128;
  int v129;
  uint64_t v130;
  float v132;
  float v133;
  int v134;
  unsigned int v135;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  _DWORD *v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  _DWORD *v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  float v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  signed int v205;
  unsigned int v206;
  int v207;
  int v208;
  int v209;
  signed int v210;
  int v211;
  int v212;
  int v213;
  BOOL v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  WTF *v221;
  unsigned int v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v230;
  WTF *v231;
  int isCurrentlyAffectingProperty;
  WTF::StringImpl *v233;
  void *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  float v239;
  double v240;
  double v241;
  uint64_t v242;
  WTF *v243;
  WebCore::KeyframeEffect *v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  float v251;
  double v252;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  float v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  float v273;
  float v274;
  float v275;
  double v276;
  double v277;
  double v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v287;
  float v288;
  float v290;
  float v292;
  float v293;
  unsigned int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  int v299;
  int v300;
  WTF::StringImpl *v301;
  int v302;
  _BOOL4 v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  _BOOL4 v312;
  int v313;
  int v314;
  unsigned int v315;
  int v316;
  int v317;
  signed int v318;
  unsigned __int16 **v319;
  uint64_t v320;
  WTF *v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  int v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v333;
  int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  double v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  int v344;
  WTF *v345;
  WebCore::RenderFragmentedFlow *v346;
  unsigned int *v347;
  char v348;
  WTF *v350[2];
  _BYTE v351[96];
  __int128 v352;
  unint64_t v353;
  unint64_t v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  char v357;

  if ((*(_BYTE *)(a2 + 52) & 7) == 1 && (*(_BYTE *)(a2 + 53) & 2) != 0)
    return;
  if ((*((_BYTE *)this + 23) & 0x10) != 0
    && (v346 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this)) != 0)
  {
    WebCore::RenderFragmentedFlow::addFragmentsOverflowFromChild(v346, this, (const WebCore::RenderBox *)a2, a3);
    v348 = 0;
  }
  else
  {
    v346 = 0;
    v348 = 1;
  }
  v9 = *(_QWORD *)(a2 + 160);
  v353 = 0;
  v354 = v9;
  v347 = (unsigned int *)(a2 + 160);
  v10 = *(_QWORD *)(a2 + 32);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0 || *(_BYTE *)(v11 + 46) != 12 || (*(_BYTE *)(a2 + 21) & 4) != 0)
  {
    v12 = v9;
    goto LABEL_9;
  }
  v222 = *(_DWORD *)(a2 + 120);
  v223 = (v222 >> 26) & 1;
  v224 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if ((v224 - 2) < 2)
    goto LABEL_629;
  if (v224 == 4)
  {
    v223 = (v222 & 0x4000000) == 0;
LABEL_629:
    _ZF = v223 == 0;
    v225 = 2;
    if (!_ZF)
      v225 = 0;
    goto LABEL_376;
  }
  if (v224 == 5)
    goto LABEL_629;
  v225 = 3;
  if ((v222 & 0x4000000) == 0)
    v225 = 1;
LABEL_376:
  v226 = *(_DWORD *)(a2 + 4 * v225 + 168) & ~(*(int *)(a2 + 4 * v225 + 168) >> 31);
  v12 = v9 + v226;
  if (__OFADD__((_DWORD)v9, v226))
    v12 = (v9 >> 31) + 0x7FFFFFFF;
  LODWORD(v354) = v12;
LABEL_9:
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 40);
  _ZF = (*(_BYTE *)(v13 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v13 + 462) & 1) == 0;
  v15 = _ZF && (*(_DWORD *)(v13 + 636) & 0xC0000) == 0;
  if (!v15
    && ((*(_BYTE *)(a2 + 20) & 1) != 0
     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)a2))
    && (*(_QWORD *)(a2 + 96) & 0x1FLL) != 0x19
    && (*(unsigned __int8 *)(a2 + 46) - 36 > 4 || (*(_BYTE *)(a2 + 52) & 7) == 1))
  {
    goto LABEL_51;
  }
  v16 = HIDWORD(v9);
  if ((*(_BYTE *)(a2 + 22) & 1) != 0)
  {
    v215 = (*(_QWORD *)(a2 + 96) >> 10) & 7;
    v216 = *(_QWORD *)(a2 + 96) & 0xE000;
    if (v215 == 2)
    {
      if (v216)
        goto LABEL_51;
      HIDWORD(v350[0]) = WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)a2) >> 32;
      LODWORD(v350[0]) = 0;
      v350[1] = (WTF *)__PAIR64__(v297, v12);
    }
    else
    {
      if (v216 != 0x4000 || v215)
        goto LABEL_51;
      v350[0] = (WTF *)WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)a2);
      v350[1] = (WTF *)__PAIR64__(HIDWORD(v9), v217);
    }
    a5.n128_u64[0] = WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v353, (const WebCore::LayoutRect *)v350).n128_u64[0];
    goto LABEL_51;
  }
  v17 = *(_QWORD *)(a2 + 192);
  if (v17)
  {
    v29 = *(_QWORD *)(v17 + 4);
    v30 = *(_QWORD *)(v17 + 12);
  }
  else
  {
    v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 992))(a2);
    v19 = v18;
    v20 = HIDWORD(a2);
    v21 = *(_DWORD *)(a2 + 160);
    v22 = v21 - HIDWORD(a2);
    if (__OFSUB__(v21, HIDWORD(a2)))
      v22 = (v21 >> 31) + 0x7FFFFFFF;
    v23 = v22 - HIDWORD(v18);
    if (__OFSUB__(v22, HIDWORD(v18)))
      v23 = (v22 >> 31) + 0x7FFFFFFF;
    v24 = *(_DWORD *)(a2 + 164);
    v25 = v24 - v18;
    if (__OFSUB__(v24, (_DWORD)v18))
      v25 = (v24 >> 31) + 0x7FFFFFFF;
    v26 = v25 - a2;
    if (__OFSUB__(v25, (_DWORD)a2))
      v26 = (v25 >> 31) + 0x7FFFFFFF;
    v27 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
    if (v27 <= 5 && ((1 << v27) & 0x2A) != 0)
    {
      v28 = *(_DWORD *)(a2 + 20);
      if ((v28 & 0x1000) != 0)
      {
        v323 = HIDWORD(a2) + v23;
        if (__OFADD__(HIDWORD(a2), v23))
          v323 = (HIDWORD(a2) >> 31) + 0x7FFFFFFF;
        LODWORD(v20) = v21 - v323;
        if (__OFSUB__(v21, v323))
          LODWORD(v20) = (v21 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v322 = v18 + v26;
        if (__OFADD__((_DWORD)v18, (_DWORD)v26))
          v322 = (v18 >> 31) + 0x7FFFFFFF;
        v19 = v24 - v322;
        if (__OFSUB__(v24, v322))
          v19 = (v24 >> 31) + 0x7FFFFFFF;
      }
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 20);
    }
    if ((v28 & 0x10000) != 0)
    {
      v5 = (WTF::StringImpl *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 1352))(a2);
      v168 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 1360))(a2);
      if ((int)v5 <= 0x2000000)
        v169 = -64 * (_DWORD)v5;
      else
        v169 = 0x80000000;
      if ((int)v5 < -33554431)
        v169 = 0x7FFFFFFF;
      _VF = __OFADD__(v23, v169);
      v170 = v23 + v169;
      if (_VF)
        v23 = (v23 >> 31) + 0x7FFFFFFF;
      else
        v23 = v170;
      if (v168 <= 0x2000000)
        v171 = -64 * v168;
      else
        v171 = 0x80000000;
      if (v168 < -33554431)
        v171 = 0x7FFFFFFF;
      _VF = __OFADD__((_DWORD)v26, v171);
      v172 = (v26 + v171);
      if (_VF)
        v26 = (v26 >> 31) + 0x7FFFFFFF;
      else
        v26 = v172;
    }
    v29 = v20 | (unint64_t)(v19 << 32);
    v30 = v23 | (unint64_t)(v26 << 32);
  }
  v31 = HIDWORD(v30);
  if ((int)v30 >= 1 && SHIDWORD(v30) >= 1)
  {
    if (v12 < 1 || (int)v16 <= 0)
    {
      v353 = v29;
      v354 = v30;
    }
    else
    {
      v33 = HIDWORD(v29);
      v34 = v29 + v30;
      if (__OFADD__((_DWORD)v29, (_DWORD)v30))
        v34 = (v29 >> 31) + 0x7FFFFFFF;
      v35 = v29 & ((int)v29 >> 31);
      v36 = HIDWORD(v29) & (SHIDWORD(v29) >> 31);
      if (v12 > v34)
        v34 = v12;
      _VF = __OFADD__((_DWORD)v33, (_DWORD)v31);
      v38 = v33 + v31;
      if (_VF)
        v38 = (v33 >> 31) + 0x7FFFFFFF;
      if ((int)v16 > v38)
        v38 = v16;
      v353 = v35 | (v36 << 32);
      _VF = __OFSUB__(v34, (_DWORD)v35);
      v39 = v34 - v35;
      if (_VF)
        v39 = 0x7FFFFFFF;
      LODWORD(v354) = v39;
      _VF = __OFSUB__(v38, (_DWORD)v36);
      v40 = v38 - v36;
      if (_VF)
        v40 = 0x7FFFFFFF;
      HIDWORD(v354) = v40;
    }
  }
LABEL_51:
  v41 = *(_DWORD *)(a2 + 20);
  if ((v41 & 0x20000) != 0)
  {
    v79 = a2;
    if ((*(_BYTE *)(a2 + 45) & 2) != 0)
      v79 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    v80 = *(_QWORD *)(v79 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 32) + 40) + 20)
      || (v185 = *(_QWORD **)(v80 + 40), v185[41])
      || v185[38]
      || v185[39]
      || v185[40]
      || (v41 & 0x100000) != 0)
    {
      v81 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
      if (v81 <= 5 && ((1 << v81) & 0x2A) != 0)
      {
        if ((v41 & 0x1000) != 0)
        {
          v330 = *v347;
          v331 = v353 + v354;
          if (__OFADD__((_DWORD)v353, (_DWORD)v354))
            v331 = (v353 >> 31) + 0x7FFFFFFF;
          _VF = __OFSUB__(v330, v331);
          v332 = v330 - v331;
          if (_VF)
            v332 = (v330 >> 31) + 0x7FFFFFFF;
          LODWORD(v353) = v332;
        }
        else
        {
          v324 = *(_DWORD *)(a2 + 164);
          v325 = HIDWORD(v353) + HIDWORD(v354);
          if (__OFADD__(HIDWORD(v353), HIDWORD(v354)))
            v325 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
          _VF = __OFSUB__(v324, v325);
          v326 = v324 - v325;
          if (_VF)
            v326 = (v324 >> 31) + 0x7FFFFFFF;
          HIDWORD(v353) = v326;
        }
      }
      if ((v41 & 0x8000) == 0)
        goto LABEL_238;
      v82 = *(_QWORD *)(a2 + 144);
      if (!*(_QWORD *)(v82 + 200))
      {
        *(_OWORD *)&v351[48] = xmmword_1969FCC00;
        *(float64x2_t *)&v351[64] = xmmword_1969FCC10;
        *(_OWORD *)&v351[80] = xmmword_1969FCC20;
        v352 = unk_1969FCC30;
        *(_OWORD *)v350 = constinit_103;
        *(_OWORD *)v351 = *(_OWORD *)algn_1969FCBD0;
        a5.n128_u32[1] = 0;
        *(_OWORD *)&v351[16] = xmmword_1969FCBE0;
        *(float64x2_t *)&v351[32] = xmmword_1969FCBF0;
        goto LABEL_123;
      }
      v83 = *(_QWORD *)(v82 + 32);
      v84 = (*(_QWORD *)(v83 + 96) >> 43) & 0x1FLL;
      if ((_DWORD)v84)
      {
        v87 = 0;
        v90 = 1;
        switch((int)v84)
        {
          case 5:
            v227 = *(_QWORD *)(v83 + 32);
            if (!v227)
              goto LABEL_384;
            v228 = *(_QWORD *)(v227 + 8);
            if (!v228)
              goto LABEL_384;
            while (1)
            {
              if (*(_BYTE *)(v228 + 46) == 19)
              {
                if (WebCore::RenderElement::element((WebCore::RenderElement *)v228))
                {
                  v249 = *(_QWORD *)(v228 + 248);
                  if (v249)
                  {
                    if (*(_QWORD *)(v249 + 8) == v83)
                      break;
                  }
                }
              }
              v250 = *(_QWORD *)(v228 + 32);
              if (!v250)
                goto LABEL_384;
              v87 = 0;
              v228 = *(_QWORD *)(v250 + 8);
              v90 = 1;
              if (!v228)
                goto LABEL_117;
            }
            v89 = (unsigned __int16 *)WebCore::RenderElement::element((WebCore::RenderElement *)v228);
            v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v5 += 4;
            LODWORD(v84) = 5;
            goto LABEL_527;
          case 6:
          case 7:
            goto LABEL_110;
          case 9:
            v319 = *(unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 24) + 8) + 40) + 8)
                                         + 3096);
            if (!v319)
              goto LABEL_384;
            break;
          case 12:
            v89 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 24) + 8) + 40) + 8)
                                       + 1272);
            if (!v89)
              goto LABEL_384;
            v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v5 += 4;
            LODWORD(v84) = 12;
            goto LABEL_527;
          case 13:
          case 14:
          case 15:
          case 16:
            v89 = *(unsigned __int16 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 24) + 8) + 40) + 8)
                                       + 1272);
            if (!v89)
              goto LABEL_384;
            v5 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v83 + 88) + 40) + 592);
            if (v5)
              *(_DWORD *)v5 += 4;
            goto LABEL_527;
          default:
            goto LABEL_117;
        }
        while (1)
        {
          v320 = *((_QWORD *)*v319 + 8) & 0xFFFFFFFFFFFFLL;
          if (v320)
          {
            if ((*(_BYTE *)((*((_QWORD *)*v319 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              goto LABEL_623;
            WebCore::RenderElement::backdropRenderer(v320, v350);
            v321 = v350[0];
            if (v350[0])
            {
              v5 = (WTF::StringImpl *)*((_QWORD *)v350[0] + 1);
              v350[0] = 0;
              if (*(_DWORD *)v321 == 1)
                WTF::fastFree(v321, (void *)a2);
              else
                --*(_DWORD *)v321;
              if (v5 == (WTF::StringImpl *)v83)
                break;
            }
          }
          v87 = 0;
          v319 = (unsigned __int16 **)v319[2];
          v90 = 1;
          if (!v319)
            goto LABEL_117;
        }
        v89 = *v319;
        v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v5 += 4;
        LODWORD(v84) = 9;
LABEL_527:
        LODWORD(v355) = v84;
        v356 = (unint64_t)v5;
        v357 = 1;
        v350[0] = (WTF *)v89;
        LODWORD(v350[1]) = v84;
        v351[8] = 1;
        *(_QWORD *)v351 = 0;
        WebCore::Styleable::~Styleable((WebCore::Styleable *)v350, (WTF::StringImpl *)a2);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v355, v301);
        v87 = 1;
        v88 = 0;
        if ((*((_QWORD *)v89 + 9) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_116;
        v186 = *(unsigned int *)((*((_QWORD *)v89 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4);
        if (!(_DWORD)v186)
          goto LABEL_116;
LABEL_115:
        v187 = *(uint64_t **)((*((_QWORD *)v89 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
        v188 = 8 * v186;
        if ((v88 & 1) != 0)
        {
          while (1)
          {
            v189 = *v187;
            if (!*(_BYTE *)(*v187 + 96))
              break;
            ++v187;
            v188 -= 8;
            if (!v188)
              goto LABEL_116;
          }
        }
        else
        {
          while (1)
          {
            v189 = *v187;
            if (*(_BYTE *)(*v187 + 96))
            {
              if (*(_DWORD *)(v189 + 80) == (_DWORD)v84 && *(_QWORD *)(v189 + 88) == (_QWORD)v5)
                break;
            }
            ++v187;
            v188 -= 8;
            if (!v188)
              goto LABEL_116;
          }
        }
        if (*(_QWORD *)v189)
        {
          v230 = v87;
          WebCore::KeyframeEffectStack::sortedEffects((unsigned int ***)v350, *(unsigned int ***)v189);
          v231 = v350[0];
          if (HIDWORD(v350[1]))
          {
            v345 = (WTF *)((char *)v350[0] + 8 * HIDWORD(v350[1]));
            v242 = 8 * HIDWORD(v350[1]) - 8;
            v243 = v350[0];
            do
            {
              if (*(_QWORD *)v243)
                v244 = *(WebCore::KeyframeEffect **)(*(_QWORD *)v243 + 8);
              else
                v244 = 0;
              isCurrentlyAffectingProperty = WebCore::KeyframeEffect::isCurrentlyAffectingProperty(v244, 273, 1);
              if ((isCurrentlyAffectingProperty & 1) != 0)
                break;
              v243 = (WTF *)((char *)v243 + 8);
              v245 = v242;
              v242 -= 8;
            }
            while (v245);
            do
            {
              v246 = *(unsigned int **)v231;
              *(_QWORD *)v231 = 0;
              if (v246)
              {
                do
                {
                  v247 = __ldaxr(v246);
                  v248 = v247 - 1;
                }
                while (__stlxr(v248, v246));
                if (!v248)
                {
                  atomic_store(1u, v246);
                  WTF::fastFree((WTF *)v246, (void *)a2);
                }
              }
              v231 = (WTF *)((char *)v231 + 8);
            }
            while (v231 != v345);
            v231 = v350[0];
          }
          else
          {
            isCurrentlyAffectingProperty = 0;
          }
          if (v231)
            WTF::fastFree(v231, (void *)a2);
          if (isCurrentlyAffectingProperty)
          {
            WebCore::RenderElement::animatedStyle(*(WebCore::RenderElement **)(v82 + 32), (const WebCore::RenderElement *)a2, &v355);
            *(_OWORD *)&v351[48] = xmmword_1969FCC00;
            *(float64x2_t *)&v351[64] = xmmword_1969FCC10;
            *(_OWORD *)&v351[80] = xmmword_1969FCC20;
            v352 = unk_1969FCC30;
            *(_OWORD *)v350 = constinit_103;
            *(_OWORD *)v351 = *(_OWORD *)algn_1969FCBD0;
            *(_OWORD *)&v351[16] = xmmword_1969FCBE0;
            *(float64x2_t *)&v351[32] = xmmword_1969FCBF0;
            v233 = v355;
            WebCore::RenderLayer::updateTransformFromStyle(v82, (uint64_t)v350, (uint64_t)v355, 0x1Fu);
            WebCore::RenderStyle::~RenderStyle(v233, v234);
            if (*(_DWORD *)v233)
            {
              a5.n128_u8[4] = 0;
              a5.n128_u8[5] = 0;
              a5.n128_u8[6] = 0;
              a5.n128_u8[7] = 0;
              *((_OWORD *)v233 + 2) = 0u;
              *((_OWORD *)v233 + 3) = 0u;
              *(_OWORD *)v233 = 0u;
              *((_OWORD *)v233 + 1) = 0u;
            }
            else
            {
              WTF::fastFree(v233, (void *)a2);
            }
            v90 = 0;
            v87 = v230;
LABEL_118:
            if (v5 && (v90 & 1) == 0 && v87)
            {
              if (*(_DWORD *)v5 == 2)
                WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v5 -= 2;
            }
LABEL_123:
            v98 = (float)(int)v353 * 0.015625;
            v99 = (float)SHIDWORD(v353) * 0.015625;
            v100 = (float)(int)v354 * 0.015625;
            a5.n128_f32[0] = (float)SHIDWORD(v354) * 0.015625;
            _V21.D[1] = *(_QWORD *)&v351[40];
            v102.f64[0] = *(float64_t *)&v351[8];
            v102.f64[1] = *(float64_t *)v351;
            if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v102), (int32x4_t)vceqzq_f64(*(float64x2_t *)&v351[32])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(*(int8x16_t *)&v351[64], *(int8x16_t *)&v351[48], 8uLL)), (int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)&v351[48], *(int8x16_t *)&v351[64], 8uLL), (float64x2_t)xmmword_1968A14C0)))))) & 1) != 0|| *((double *)&v352 + 1) != 1.0)
            {
              v104 = *(double *)&v351[24];
              v105 = *(double *)&v351[16];
              v103 = v350[1];
            }
            else
            {
              v103 = v350[1];
              v104 = *(double *)&v351[24];
              v105 = *(double *)&v351[16];
              if (*(double *)&v350[1] == 0.0
                && *(double *)&v351[16] == 0.0
                && *(double *)v350 == 1.0
                && *(double *)&v351[24] == 1.0)
              {
                v190 = *(double *)&v351[80];
                v191 = *(double *)&v351[88];
                v122 = v98 + v190;
                v123 = v99 + v191;
                goto LABEL_153;
              }
              if (*(double *)&v352 == 0.0)
              {
                v106 = v98 + v100;
                v107 = v99 + a5.n128_f32[0];
                if (*(double *)v350 <= 0.0)
                  v108 = v106;
                else
                  v108 = (float)(int)v353 * 0.015625;
                if (*(double *)v350 <= 0.0)
                  v109 = (float)(int)v353 * 0.015625;
                else
                  v109 = v106;
                v110 = *(double *)v350 * v109;
                v111 = *(double *)v350 * v108;
                if (*(double *)&v350[1] <= 0.0)
                  v112 = v106;
                else
                  v112 = (float)(int)v353 * 0.015625;
                if (*(double *)&v350[1] <= 0.0)
                  v106 = (float)(int)v353 * 0.015625;
                v113 = *(double *)&v350[1] * v106;
                v114 = *(double *)&v350[1] * v112;
                if (*(double *)&v351[16] <= 0.0)
                  v115 = (float)SHIDWORD(v353) * 0.015625;
                else
                  v115 = v107;
                if (*(double *)&v351[16] <= 0.0)
                  v116 = v107;
                else
                  v116 = (float)SHIDWORD(v353) * 0.015625;
                v117 = v110 + *(double *)&v351[16] * v115;
                v118 = v111 + *(double *)&v351[16] * v116;
                if (*(double *)&v351[24] <= 0.0)
                  v119 = (float)SHIDWORD(v353) * 0.015625;
                else
                  v119 = v107;
                if (*(double *)&v351[24] > 0.0)
                  v107 = (float)SHIDWORD(v353) * 0.015625;
                v120 = v113 + *(double *)&v351[24] * v119;
                v121 = v114 + *(double *)&v351[24] * v107;
                v122 = *(double *)&v351[80] + v118;
                v123 = *(double *)&v351[88] + v121;
                v100 = v117 - v118;
                a5.n128_f64[0] = v120 - v121;
                a5.n128_f32[0] = a5.n128_f64[0];
                goto LABEL_153;
              }
            }
            v251 = v98 + v100;
            v252 = v98;
            _D23 = v99;
            v254 = *(double *)&v351[80] + v98 * *(double *)v350;
            v255 = v254 + v99 * v105;
            v256 = *(double *)&v351[88] + v98 * *(double *)&v103;
            v257 = v256 + v99 * v104;
            v258 = *((double *)&v352 + 1) + v252 * *(double *)&v351[8];
            __asm { FMLA            D27, D23, V21.D[1] }
            if (_D27 != 1.0 && _D27 != 0.0)
            {
              v255 = v255 / _D27;
              v257 = v257 / _D27;
            }
            v262 = v99 + a5.n128_f32[0];
            v263 = v251;
            v264 = *(double *)&v351[80] + v251 * *(double *)v350;
            v265 = v264 + _D23 * v105;
            v266 = *(double *)&v351[88] + v263 * *(double *)&v103;
            v267 = v266 + _D23 * v104;
            v268 = *((double *)&v352 + 1) + v263 * *(double *)&v351[8];
            v269 = v268 + _D23 * *(double *)&v351[40];
            if (v269 != 1.0 && v269 != 0.0)
            {
              v265 = v265 / v269;
              v267 = v267 / v269;
            }
            v270 = v262;
            v271 = v264 + v262 * v105;
            v272 = v266 + v262 * v104;
            a5.n128_f64[0] = v268 + v262 * *(double *)&v351[40];
            if (a5.n128_f64[0] != 1.0 && a5.n128_f64[0] != 0.0)
            {
              v271 = v271 / a5.n128_f64[0];
              v272 = v272 / a5.n128_f64[0];
            }
            v273 = v255;
            v274 = v265;
            v275 = v271;
            v276 = v254 + v270 * v105;
            v277 = v256 + v270 * v104;
            v278 = v258 + v270 * *(double *)&v351[40];
            if (v278 != 1.0 && v278 != 0.0)
            {
              v276 = v276 / v278;
              v277 = v277 / v278;
            }
            v279 = v257;
            v280 = v267;
            v281 = v272;
            v282 = v276;
            v283 = v277;
            if (v282 >= v275)
              v122 = v271;
            else
              v122 = v276;
            if (v274 >= v273)
              v284 = v255;
            else
              v284 = v274;
            if (v122 >= v284)
              v122 = v284;
            v285 = fabsf(v122);
            if (v285 == INFINITY || v285 > 2147500000.0)
              v122 = (float)((SLODWORD(v122) >> 31) ^ 0x7FFFFFFF);
            if (v283 >= v281)
              v123 = v281;
            else
              v123 = v283;
            if (v280 >= v279)
              v287 = v279;
            else
              v287 = v280;
            if (v123 >= v287)
              v123 = v287;
            v288 = fabsf(v123);
            if (v288 == INFINITY || v288 > 2147500000.0)
              v123 = (float)((SLODWORD(v123) >> 31) ^ 0x7FFFFFFF);
            if (v273 < v274)
              v273 = v274;
            if (v275 < v282)
              v275 = v282;
            if (v273 < v275)
              v273 = v275;
            v290 = fabsf(v273);
            if (v290 == INFINITY || v290 > 2147500000.0)
              v273 = (float)((SLODWORD(v273) >> 31) ^ 0x7FFFFFFF);
            if (v279 < v280)
              v279 = v280;
            if (v281 >= v283)
              v292 = v281;
            else
              v292 = v283;
            if (v279 >= v292)
              v292 = v279;
            v293 = fabsf(v292);
            if (v293 == INFINITY || v293 > 2147500000.0)
              v292 = (float)((SLODWORD(v292) >> 31) ^ 0x7FFFFFFF);
            v100 = v273 - v122;
            a5.n128_f32[0] = v292 - v123;
LABEL_153:
            v124 = floorf(v122 * 64.0);
            if (v124 > -2147500000.0)
              v125 = (int)v124;
            else
              v125 = 0x80000000;
            if (v124 < 2147500000.0)
              LODWORD(v126) = v125;
            else
              LODWORD(v126) = 0x7FFFFFFF;
            if (v124 >= 2147500000.0 || v124 <= -2147500000.0)
              v126 = v126;
            else
              v126 = (int)v124;
            v128 = floorf(v123 * 64.0);
            if (v128 > -2147500000.0)
              v129 = (int)v128;
            else
              v129 = 0x80000000;
            if (v128 < 2147500000.0)
              LODWORD(v130) = v129;
            else
              LODWORD(v130) = 0x7FFFFFFF;
            if (v128 >= 2147500000.0 || v128 <= -2147500000.0)
              v130 = v130;
            else
              v130 = (int)v128;
            v132 = v123 + a5.n128_f32[0];
            v133 = ceilf((float)(v122 + v100) * 64.0);
            if (v133 > -2147500000.0)
              v134 = (int)v133;
            else
              v134 = 0x80000000;
            if (v133 < 2147500000.0)
              v135 = v134;
            else
              v135 = 0x7FFFFFFF;
            if (v133 < 2147500000.0 && v133 > -2147500000.0)
              v135 = (int)v133;
            a5.n128_f32[0] = ceilf(v132 * 64.0);
            if (a5.n128_f32[0] < 2147500000.0 && a5.n128_f32[0] > -2147500000.0)
              goto LABEL_192;
            if (a5.n128_f32[0] >= 2147500000.0)
            {
              v138 = 0x7FFFFFFF;
            }
            else
            {
              if (a5.n128_f32[0] > -2147500000.0)
              {
LABEL_192:
                v138 = (int)a5.n128_f32[0];
                goto LABEL_193;
              }
              v138 = 0x80000000;
            }
LABEL_193:
            v139 = v135 - v126;
            if (__OFSUB__(v135, (_DWORD)v126))
              v139 = (v135 >> 31) + 0x7FFFFFFF;
            v140 = v138 - v130;
            if (__OFSUB__(v138, (_DWORD)v130))
              v140 = (v138 >> 31) + 0x7FFFFFFF;
            v353 = v126 | (v130 << 32);
            v354 = v139 | (unint64_t)(v140 << 32);
            v41 = *(_DWORD *)(a2 + 20);
            if ((v41 & 0x800000) == 0)
              goto LABEL_239;
            goto LABEL_310;
          }
          v90 = 0;
          v87 = v230;
        }
        else
        {
LABEL_116:
          v90 = 0;
        }
LABEL_117:
        v91 = *(__int128 **)(v82 + 200);
        v92 = v91[3];
        v94 = *v91;
        v93 = v91[1];
        *(_OWORD *)&v351[16] = v91[2];
        *(_OWORD *)&v351[32] = v92;
        *(_OWORD *)v350 = v94;
        *(_OWORD *)v351 = v93;
        a5 = (__n128)v91[6];
        v95 = v91[7];
        v97 = v91[4];
        v96 = v91[5];
        *(__n128 *)&v351[80] = a5;
        v352 = v95;
        *(_OWORD *)&v351[48] = v97;
        *(_OWORD *)&v351[64] = v96;
        goto LABEL_118;
      }
LABEL_110:
      if ((*(_BYTE *)(v83 + 45) & 1) != 0 || (v85 = *(unsigned __int16 **)(*(_QWORD *)(v83 + 24) + 8)) == 0)
      {
LABEL_384:
        v87 = 0;
        v90 = 1;
        goto LABEL_117;
      }
      v86 = v85[14];
      if ((v86 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19636ED38);
      }
      if ((~v86 & 0x408) != 0 || !(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v85 + 368))(v85))
      {
        v87 = 0;
        LODWORD(v84) = 0;
        v88 = 1;
        v89 = v85;
        goto LABEL_115;
      }
      v165 = *((_QWORD *)v85 + 14);
      if (v165)
        v89 = *(unsigned __int16 **)(v165 + 8);
      else
        v89 = 0;
      if ((~v85[14] & 0x408) != 0)
        LODWORD(v84) = 0;
      else
        LODWORD(v84) = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v85 + 368))(v85);
      v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        v166 = *(_DWORD *)v5;
        *(_DWORD *)v5 += 4;
        v167 = v166 + 2;
        if (v166 != -2
          || (WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2), v167 = *(_DWORD *)v5, *(_DWORD *)v5 += 2, v167))
        {
          v88 = 0;
          *(_DWORD *)v5 = v167;
LABEL_257:
          v87 = 1;
          goto LABEL_115;
        }
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      v88 = 0;
      goto LABEL_257;
    }
  }
  if ((v41 & 0x800000) == 0 || (v41 & 0x1800000) == 0x1800000)
    goto LABEL_54;
  v160 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if (v160 <= 5 && ((1 << v160) & 0x2A) != 0)
  {
    if ((v41 & 0x1000) != 0)
    {
      v336 = *v347;
      v337 = v353 + v354;
      if (__OFADD__((_DWORD)v353, (_DWORD)v354))
        v337 = (v353 >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v336, v337);
      v338 = v336 - v337;
      if (_VF)
        v338 = (v336 >> 31) + 0x7FFFFFFF;
      LODWORD(v353) = v338;
    }
    else
    {
      v333 = *(_DWORD *)(a2 + 164);
      v334 = HIDWORD(v353) + HIDWORD(v354);
      if (__OFADD__(HIDWORD(v353), HIDWORD(v354)))
        v334 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v333, v334);
      v335 = v333 - v334;
      if (_VF)
        v335 = (v333 >> 31) + 0x7FFFFFFF;
      HIDWORD(v353) = v335;
    }
  }
LABEL_238:
  if ((v41 & 0x800000) != 0)
  {
LABEL_310:
    v192 = v41 & 0x1800000;
    if (v192 == 0x800000)
    {
      v193 = WebCore::RenderBoxModelObject::relativePositionOffset((WebCore::RenderBoxModelObject *)a2);
      v194 = HIDWORD(v193);
    }
    else if (v192 == 25165824)
    {
      WebCore::RenderBoxModelObject::constrainingRectForStickyPosition((WebCore::RenderBoxModelObject *)a2, a5.n128_f64[0]);
      v355 = (WTF::StringImpl *)__PAIR64__(v236, v235);
      v356 = __PAIR64__(v238, v237);
      memset(v351, 0, 84);
      v350[0] = (WTF *)off_1E34043D0;
      v350[1] = 0;
      WebCore::RenderBoxModelObject::computeStickyPositionConstraints((WebCore::RenderBoxModelObject *)a2, (WebCore::StickyPositionViewportConstraints *)v350, (const WebCore::FloatRect *)&v355);
      v240 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v350, (const WebCore::FloatRect *)&v355)* 64.0;
      v241 = v239 * 64.0;
      if (v241 >= 2147483650.0 || v240 <= -2147483650.0 || v241 <= -2147483650.0 || v240 >= 2147483650.0)
      {
        if (v240 >= 2147483650.0)
        {
          LODWORD(v193) = 0x7FFFFFFF;
        }
        else if (v240 <= -2147483650.0)
        {
          LODWORD(v193) = 0x80000000;
        }
        else
        {
          LODWORD(v193) = (int)v240;
        }
        v339 = v239 * 64.0;
        if (v339 >= 2147483650.0)
        {
          LODWORD(v194) = 0x7FFFFFFF;
        }
        else if (v339 <= -2147483650.0)
        {
          LODWORD(v194) = 0x80000000;
        }
        else
        {
          LODWORD(v194) = (int)v339;
        }
      }
      else
      {
        LODWORD(v193) = (int)v240;
        LODWORD(v194) = (int)v241;
      }
    }
    else
    {
      LODWORD(v194) = 0;
      LODWORD(v193) = 0;
    }
    v195 = v353 + v193;
    if (__OFADD__((_DWORD)v353, (_DWORD)v193))
      v195 = (v353 >> 31) + 0x7FFFFFFF;
    LODWORD(v353) = v195;
    _VF = __OFADD__(HIDWORD(v353), (_DWORD)v194);
    v196 = HIDWORD(v353) + v194;
    if (_VF)
      v196 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
    HIDWORD(v353) = v196;
  }
LABEL_239:
  v161 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if (v161 <= 5 && ((1 << v161) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
    {
      v327 = *v347;
      v328 = v353 + v354;
      if (__OFADD__((_DWORD)v353, (_DWORD)v354))
        v328 = (v353 >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v327, v328);
      v329 = v327 - v328;
      if (_VF)
        v329 = (v327 >> 31) + 0x7FFFFFFF;
      LODWORD(v353) = v329;
    }
    else
    {
      v162 = *(_DWORD *)(a2 + 164);
      v163 = HIDWORD(v353) + HIDWORD(v354);
      if (__OFADD__(HIDWORD(v353), HIDWORD(v354)))
        v163 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v162, v163);
      v164 = v162 - v163;
      if (_VF)
        v164 = (v162 >> 31) + 0x7FFFFFFF;
      HIDWORD(v353) = v164;
    }
  }
LABEL_54:
  v42 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v43 = 0x30203020100uLL >> (8 * v42);
  if (v42 >= 6)
    LOBYTE(v43) = 0;
  v44 = v43 & 3;
  v45 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  v46 = 0x30203020100uLL >> (8 * v45);
  if (v45 >= 6)
    LOBYTE(v46) = 0;
  if (v44 != (v46 & 3))
  {
    if (v45 == 3 || v45 == 5 || v42 == 5 || v42 == 3)
    {
      v342 = *v347;
      v343 = v353 + v354;
      if (__OFADD__((_DWORD)v353, (_DWORD)v354))
        v343 = (v353 >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v342, v343);
      v344 = v342 - v343;
      if (_VF)
        v344 = (v342 >> 31) + 0x7FFFFFFF;
      LODWORD(v353) = v344;
    }
    else if (v42 == 1 || v45 == 1)
    {
      v298 = *(_DWORD *)(a2 + 164);
      v299 = HIDWORD(v353) + HIDWORD(v354);
      if (__OFADD__(HIDWORD(v353), HIDWORD(v354)))
        v299 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
      _VF = __OFSUB__(v298, v299);
      v300 = v298 - v299;
      if (_VF)
        v300 = (v298 >> 31) + 0x7FFFFFFF;
      HIDWORD(v353) = v300;
    }
  }
  v47 = v354;
  v48 = *((_DWORD *)a3 + 1);
  v49 = v353 + *(_DWORD *)a3;
  if (__OFADD__((_DWORD)v353, *(_DWORD *)a3))
    v49 = (v353 >> 31) + 0x7FFFFFFF;
  v50 = HIDWORD(v353) + v48;
  if (__OFADD__(HIDWORD(v353), v48))
    v50 = (HIDWORD(v353) >> 31) + 0x7FFFFFFF;
  v51 = *(_DWORD *)a4;
  v52 = HIDWORD(v354);
  if (*(_DWORD *)a4 > (signed int)v49)
    goto LABEL_358;
  v53 = *((_DWORD *)a4 + 2);
  _VF = __OFADD__(v51, v53);
  v54 = v51 + v53;
  if (_VF)
    v54 = (v51 >> 31) + 0x7FFFFFFF;
  v55 = v49 + v354;
  if (__OFADD__(v49, (_DWORD)v354))
    v55 = (v49 >> 31) + 0x7FFFFFFF;
  if (v54 < v55)
    goto LABEL_358;
  v56 = *((_DWORD *)a4 + 1);
  if (v56 > (int)v50)
    goto LABEL_358;
  v57 = *((_DWORD *)a4 + 3);
  _VF = __OFADD__(v56, v57);
  v58 = v56 + v57;
  if (_VF)
    v58 = (v56 >> 31) + 0x7FFFFFFF;
  v59 = v50 + HIDWORD(v354);
  if (__OFADD__(v50, HIDWORD(v354)))
    v59 = (v50 >> 31) + 0x7FFFFFFF;
  if (v58 < v59)
  {
LABEL_358:
    if ((int)v354 >= 1 && SHIDWORD(v354) >= 1)
    {
      if ((*((_BYTE *)this + 22) & 1) == 0
        || ((*((_BYTE *)this + 45) & 2) != 0
          ? (v197 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
          : (v197 = *((_QWORD *)this + 12)),
            (v198 = v197 & 0x1C00, v198 == 2048) || !v198))
      {
        if (*((_BYTE *)this + 46) != 49)
          goto LABEL_673;
      }
      (*(void (**)(WTF **__return_ptr, WebCore::RenderBox *))(*(_QWORD *)this + 1184))(v350, this);
      if (BYTE4(v350[0]))
      {
        v199 = *((_DWORD *)a4 + 1);
        v200 = v199 - LODWORD(v350[0]);
        if (__OFSUB__(v199, v350[0]))
          v200 = (v199 >> 31) + 0x7FFFFFFF;
        if ((int)v50 > v200)
          v200 = v50;
        v201 = v200 - v50;
        if (__OFSUB__(v200, v50))
          v201 = (v200 >> 31) + 0x7FFFFFFF;
        _VF = __OFSUB__((_DWORD)v52, v201);
        v202 = v52 - v201;
        if (_VF)
          v202 = 0x7FFFFFFF;
        v47 = v47 | ((unint64_t)(v202 & ~(v202 >> 31)) << 32);
        v50 = v200;
      }
      if (v351[4])
      {
        v302 = v50 + HIDWORD(v47);
        v303 = __OFADD__(v50, HIDWORD(v47));
        v304 = v50 + HIDWORD(v47);
        if (__OFADD__(v50, HIDWORD(v47)))
          v304 = (v50 >> 31) + 0x7FFFFFFF;
        v305 = *((_DWORD *)a4 + 1);
        v306 = *((_DWORD *)a4 + 3);
        _VF = __OFADD__(v305, v306);
        v307 = v305 + v306;
        if (_VF)
          v307 = (v305 >> 31) + 0x7FFFFFFF;
        v308 = v307 + *(_DWORD *)v351;
        if (__OFADD__(v307, *(_DWORD *)v351))
          v308 = (v307 >> 31) + 0x7FFFFFFF;
        if (v308 < v304)
          v304 = v308;
        if (v303)
          v302 = (v50 >> 31) + 0x7FFFFFFF;
        _VF = __OFSUB__(v304, v302);
        v309 = v304 - v302;
        if (_VF)
          v309 = (v304 >> 31) + 0x7FFFFFFF;
        _VF = __OFADD__(HIDWORD(v47), v309);
        v310 = HIDWORD(v47) + v309;
        if (_VF)
          v310 = (HIDWORD(v47) >> 31) + 0x7FFFFFFF;
        v47 = v47 | ((unint64_t)(v310 & ~(v310 >> 31)) << 32);
      }
      if (v351[12])
      {
        v203 = *(_DWORD *)a4 - *(_DWORD *)&v351[8];
        if (__OFSUB__(*(_DWORD *)a4, *(_DWORD *)&v351[8]))
          v203 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
        if ((int)v49 > v203)
          v203 = v49;
        v204 = v203 - v49;
        if (__OFSUB__(v203, v49))
          v204 = (v203 >> 31) + 0x7FFFFFFF;
        _VF = __OFSUB__((_DWORD)v47, v204);
        v205 = v47 - v204;
        if (_VF)
          v205 = (v47 >> 31) + 0x7FFFFFFF;
        v47 = v47 & 0xFFFFFFFF00000000 | v205 & ~(v205 >> 31);
        v49 = v203;
      }
      if (BYTE4(v350[1]))
      {
        v311 = v49 + v47;
        v312 = __OFADD__(v49, (_DWORD)v47);
        v313 = v49 + v47;
        if (__OFADD__(v49, (_DWORD)v47))
          v313 = (v49 >> 31) + 0x7FFFFFFF;
        v206 = *(_DWORD *)a4;
        v314 = *((_DWORD *)a4 + 2);
        _VF = __OFADD__(*(_DWORD *)a4, v314);
        v315 = *(_DWORD *)a4 + v314;
        if (_VF)
          v315 = (v206 >> 31) + 0x7FFFFFFF;
        v316 = v315 + LODWORD(v350[1]);
        if (__OFADD__(v315, v350[1]))
          v316 = (v315 >> 31) + 0x7FFFFFFF;
        if (v316 < v313)
          v313 = v316;
        if (v312)
          v311 = (v49 >> 31) + 0x7FFFFFFF;
        _VF = __OFSUB__(v313, v311);
        v317 = v313 - v311;
        if (_VF)
          v317 = (v313 >> 31) + 0x7FFFFFFF;
        _VF = __OFADD__((_DWORD)v47, v317);
        v318 = v47 + v317;
        if (_VF)
          v318 = (v47 >> 31) + 0x7FFFFFFF;
        v47 = v47 & 0xFFFFFFFF00000000 | v318 & ~(v318 >> 31);
      }
      else
      {
        v206 = *(_DWORD *)a4;
      }
      if ((int)v206 > (int)v49)
        goto LABEL_379;
      v207 = *((_DWORD *)a4 + 2);
      _VF = __OFADD__(v206, v207);
      v208 = v206 + v207;
      if (_VF)
        v208 = (v206 >> 31) + 0x7FFFFFFF;
      v209 = v49 + v47;
      if (__OFADD__(v49, (_DWORD)v47))
        v209 = (v49 >> 31) + 0x7FFFFFFF;
      if (v208 < v209 || (v210 = *((_DWORD *)a4 + 1), v210 > (int)v50))
      {
LABEL_379:
        v214 = 0;
      }
      else
      {
        v211 = *((_DWORD *)a4 + 3);
        _VF = __OFADD__(v210, v211);
        v212 = v210 + v211;
        if (_VF)
          v212 = (v210 >> 31) + 0x7FFFFFFF;
        v213 = v50 + HIDWORD(v47);
        if (__OFADD__(v50, HIDWORD(v47)))
          v213 = (v50 >> 31) + 0x7FFFFFFF;
        v214 = v212 >= v213;
      }
      if (!v214 && (int)v47 >= 1 && SHIDWORD(v47) >= 1)
      {
LABEL_673:
        if (!*((_QWORD *)this + 24))
        {
          v142 = WTF::fastMalloc((WTF *)0x28);
          v143 = *((_QWORD *)this + 20);
          *(_DWORD *)v142 = 1;
          *(_OWORD *)(v142 + 4) = *(_OWORD *)a4;
          *(_QWORD *)(v142 + 20) = 0;
          *(_QWORD *)(v142 + 28) = v143;
          *(_DWORD *)(v142 + 36) = 0;
          v144 = (WTF *)*((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = v142;
          if (v144)
          {
            if (*(_DWORD *)v144 == 1)
              WTF::fastFree(v144, v141);
            else
              --*(_DWORD *)v144;
          }
        }
        v145 = (_DWORD *)*((_QWORD *)this + 24);
        v146 = v49 + v47;
        if (__OFADD__(v49, (_DWORD)v47))
          v146 = (v49 >> 31) + 0x7FFFFFFF;
        v147 = v145[1];
        v148 = v145[3];
        _VF = __OFADD__(v147, v148);
        v149 = v147 + v148;
        if (_VF)
          v149 = (v147 >> 31) + 0x7FFFFFFF;
        if ((int)v146 <= v149)
          v146 = v149;
        v150 = v50 + HIDWORD(v47);
        if (__OFADD__(v50, HIDWORD(v47)))
          v150 = (v50 >> 31) + 0x7FFFFFFF;
        v151 = v145[2];
        v152 = v145[4];
        _VF = __OFADD__(v151, v152);
        v153 = v151 + v152;
        if (_VF)
          v153 = (v151 >> 31) + 0x7FFFFFFF;
        if ((int)v150 <= v153)
          v150 = v153;
        if ((int)v147 >= (int)v49)
          v147 = v49;
        if ((int)v151 >= (int)v50)
          v151 = v50;
        _VF = __OFSUB__(v146, v147);
        v154 = v146 - v147;
        if (_VF)
          v154 = (v146 >> 31) + 0x7FFFFFFF;
        v145[3] = v154;
        _VF = __OFSUB__(v150, v151);
        v155 = v150 - v151;
        if (_VF)
          v155 = (v150 >> 31) + 0x7FFFFFFF;
        v145[4] = v155;
        _VF = __OFSUB__(v146, v154);
        v156 = v146 - v154;
        if (_VF)
          v156 = (v146 >> 31) + 0x7FFFFFFF;
        v145[1] = v156;
        v157 = v150 - v155;
        if (__OFSUB__(v150, v155))
          v157 = (v150 >> 31) + 0x7FFFFFFF;
        v145[2] = v157;
      }
    }
  }
  v60 = *((_DWORD *)this + 5);
  if ((v60 & 0x80000) == 0)
  {
    if ((v60 & 0x10000) == 0
      || ((*((_BYTE *)this + 45) & 2) != 0
        ? (v158 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
        : (v158 = *((_QWORD *)this + 12)),
          (v159 = v158 & 0x1C00, v159 == 2048) || !v159))
    {
      LOBYTE(v355) = 0;
      v357 = 0;
      v350[0] = (WTF *)&v355;
      v350[1] = (WTF *)a2;
      *(_QWORD *)v351 = this;
      *(_QWORD *)&v351[8] = a3;
      if ((v348 & 1) != 0)
      {
        v61 = *(_QWORD *)(a2 + 144);
        if (v61 && (*(_BYTE *)(v61 + 25) & 8) != 0)
          return;
      }
      else
      {
        WebCore::RenderBox::addOverflowFromChild(WebCore::RenderBox const&,WebCore::LayoutSize const&,WebCore::LayoutRect const&)::$_0::operator()(v350);
        if (!v357)
        {
          __break(1u);
LABEL_623:
          __break(0xC471u);
          JUMPOUT(0x19636F6D0);
        }
        WebCore::RenderFragmentedFlow::addFragmentsVisualOverflow(v346, this, (const WebCore::LayoutRect *)&v355);
        if (v357)
        {
          v73 = v355;
          goto LABEL_93;
        }
      }
      v62 = *(_QWORD *)(a2 + 192);
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 20);
        v64 = (unint64_t *)(v62 + 28);
      }
      else
      {
        v63 = 0;
        v64 = (unint64_t *)(a2 + 160);
      }
      v65 = *v64;
      v66 = HIDWORD(v63);
      v67 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      v68 = 0x30203020100uLL >> (8 * v67);
      if (v67 >= 6)
        LOBYTE(v68) = 0;
      v69 = v68;
      v70 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
      v71 = 0x30203020100uLL >> (8 * v70);
      if (v70 >= 6)
        LOBYTE(v71) = 0;
      if (v69 != v71)
      {
        if (v70 == 3 || v70 == 5 || v67 == 5 || v67 == 3)
        {
          v340 = *v347;
          v341 = v63 + v65;
          if (__OFADD__((_DWORD)v63, (_DWORD)v65))
            v341 = (v63 >> 31) + 0x7FFFFFFF;
          LODWORD(v63) = v340 - v341;
          if (__OFSUB__(v340, v341))
            LODWORD(v63) = (v340 >> 31) + 0x7FFFFFFF;
        }
        else if (v67 == 1 || v70 == 1)
        {
          v295 = *(_DWORD *)(a2 + 164);
          v296 = HIDWORD(v63) + HIDWORD(v65);
          if (__OFADD__(HIDWORD(v63), HIDWORD(v65)))
            v296 = (HIDWORD(v63) >> 31) + 0x7FFFFFFF;
          LODWORD(v66) = v295 - v296;
          if (__OFSUB__(v295, v296))
            LODWORD(v66) = (v295 >> 31) + 0x7FFFFFFF;
        }
      }
      v356 = v65;
      v357 = 1;
      v72 = *((_DWORD *)a3 + 1);
      v73 = v63 + *(_DWORD *)a3;
      if (__OFADD__((_DWORD)v63, *(_DWORD *)a3))
        v73 = (v63 >> 31) + 0x7FFFFFFF;
      LODWORD(v355) = v73;
      v74 = v66 + v72;
      if (__OFADD__((_DWORD)v66, v72))
        v74 = (v66 >> 31) + 0x7FFFFFFF;
      HIDWORD(v355) = v74;
LABEL_93:
      v75 = *((_QWORD *)this + 20);
      if ((v73 & 0x80000000) != 0)
      {
        v76 = v356;
      }
      else
      {
        v76 = v356;
        v77 = v73 + v356;
        if (__OFADD__(v73, (_DWORD)v356))
          v77 = 0x7FFFFFFF;
        if (v77 <= (int)v75 && (HIDWORD(v355) & 0x80000000) == 0)
        {
          v78 = HIDWORD(v355) + HIDWORD(v356);
          if (__OFADD__(HIDWORD(v355), HIDWORD(v356)))
            v78 = 0x7FFFFFFF;
          if (v78 <= SHIDWORD(v75))
            return;
        }
      }
      if (v76 >= 1 && SHIDWORD(v356) >= 1)
      {
        if (!*((_QWORD *)this + 24))
        {
          v218 = WTF::fastMalloc((WTF *)0x28);
          v219 = WebCore::RenderBox::flippedClientBoxRect(this);
          *(_DWORD *)v218 = 1;
          *(_QWORD *)(v218 + 4) = v219;
          *(_QWORD *)(v218 + 12) = v220;
          *(_QWORD *)(v218 + 20) = 0;
          *(_QWORD *)(v218 + 28) = v75;
          *(_DWORD *)(v218 + 36) = 0;
          v221 = (WTF *)*((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = v218;
          if (v221)
          {
            if (*(_DWORD *)v221 == 1)
              WTF::fastFree(v221, v220);
            else
              --*(_DWORD *)v221;
          }
        }
        v173 = (_DWORD *)*((_QWORD *)this + 24);
        v174 = (_DWORD)v355 + v356;
        if (__OFADD__((_DWORD)v355, (_DWORD)v356))
          v174 = (v355 >> 31) + 0x7FFFFFFF;
        v175 = v173[5];
        v176 = v173[7];
        _VF = __OFADD__(v175, v176);
        v177 = v175 + v176;
        if (_VF)
          v177 = (v175 >> 31) + 0x7FFFFFFF;
        if ((int)v174 <= v177)
          v174 = v177;
        v178 = HIDWORD(v355) + HIDWORD(v356);
        if (__OFADD__(HIDWORD(v355), HIDWORD(v356)))
          v178 = (HIDWORD(v355) >> 31) + 0x7FFFFFFF;
        v179 = v173[6];
        v180 = v173[8];
        _VF = __OFADD__(v179, v180);
        v181 = v179 + v180;
        if (_VF)
          v181 = (v179 >> 31) + 0x7FFFFFFF;
        if (v178 <= v181)
          v178 = v181;
        if (v175 >= (int)v355)
          v175 = (int)v355;
        if (v179 >= SHIDWORD(v355))
          v182 = HIDWORD(v355);
        else
          v182 = v173[6];
        v173[5] = v175;
        v173[6] = v182;
        _VF = __OFSUB__(v174, v175);
        v183 = v174 - v175;
        if (_VF)
          v183 = (v174 >> 31) + 0x7FFFFFFF;
        v173[7] = v183;
        _VF = __OFSUB__(v178, v182);
        v184 = v178 - v182;
        if (_VF)
          v184 = (v178 >> 31) + 0x7FFFFFFF;
        v173[8] = v184;
      }
    }
  }
}

uint64_t WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  ++*((_DWORD *)a1 + 2);
  if (a2)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      v2 = *a1;
      if (*a1)
      {
        v3 = *(_DWORD *)(v2 - 8);
        v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
        v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
        v7 = v3 & ((v6 >> 31) ^ v6);
        for (i = 1; ; ++i)
        {
          v9 = *(_QWORD *)(v2 + 16 * v7);
          if (!v9)
            break;
          if (v9 != -1 && v9 == a2)
            return *(_QWORD *)(v2 + 16 * v7 + 8);
          v7 = (v7 + i) & v3;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RenderBox::clientLogicalBottom(WebCore::RenderBox *this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;

  v2 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
  v3 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v16 = *((_DWORD *)this + 40);
    v17 = (*(uint64_t (**)(WebCore::RenderBox *))(v3 + 1016))(this);
    if (__OFSUB__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v18 = v16 - v17;
    v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v18, v19))
      v8 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v8 = v18 - v19;
    v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  }
  else
  {
    v4 = *((_DWORD *)this + 41);
    v5 = (*(uint64_t (**)(WebCore::RenderBox *))(v3 + 1000))(this);
    if (__OFSUB__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 - v5;
    v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v8 = v6 - v7;
    v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  v10 = v9 << 6;
  if (v9 < -33554432)
    v10 = 0x80000000;
  if (v9 > 0x1FFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = __OFSUB__(v8, v10);
  v12 = v8 - v10;
  if (v11)
    v12 = (v8 >> 31) + 0x7FFFFFFF;
  v13 = v12 & ~(v12 >> 31);
  v11 = __OFADD__(v2, v13);
  v14 = v2 + v13;
  if (v11)
    return (v2 >> 31) + 0x7FFFFFFF;
  else
    return v14;
}

uint64_t WebCore::RenderBlockFlow::adjustSizeContainmentChildForPagination(_BYTE *a1, signed int *a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  signed int v11;
  int v12;
  signed int *v13;
  signed int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;

  result = WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)a2);
  if ((_DWORD)result)
  {
    v7 = a2[5];
    v8 = WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)a2);
    v11 = v8 + v10;
    if (__OFADD__((_DWORD)v8, v10))
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    v12 = (HIDWORD(v8) >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(HIDWORD(v8), v9))
      v12 = HIDWORD(v8) + v9;
    if ((v7 & 0x1000) == 0)
      v11 = v12;
    v13 = a2 + 40;
    if (((a2[31] >> 13) & 6) - 2 >= 4)
      v13 = a2 + 41;
    v14 = *v13;
    if (v14 <= v11)
      v15 = v11;
    else
      v15 = v14;
    result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1);
    if (__OFADD__(a3, (_DWORD)result))
      v16 = (a3 >> 31) + 0x7FFFFFFF;
    else
      v16 = a3 + result;
    if ((a1[23] & 0x10) != 0
      && (v23 = v16,
          result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1),
          LODWORD(v16) = v23,
          result))
    {
      v32 = v15;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 2000))(result, 0, v23, 0);
      if (result)
      {
        v24 = result;
        v25 = v23;
        v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 1992))(result, v23);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 1976))(v24);
        v27 = v26 + result;
        if (__OFADD__(v26, (_DWORD)result))
          v27 = (v26 >> 31) + 0x7FFFFFFF;
        v18 = __OFSUB__(v27, v25);
        v28 = v27 - v25;
        v20 = (v27 >> 31) + 0x7FFFFFFF;
        if (!v18)
          v20 = v28;
        if (!v20)
          v20 = result;
      }
      else
      {
        v20 = 0;
      }
      v15 = v32;
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 496) + 8 * *(unsigned int *)(v17 + 508) - 8) + 72);
      v18 = __OFSUB__((_DWORD)v17, (int)v16 % (int)v17);
      v19 = v17 - (int)v16 % (int)v17;
      v20 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v18)
        v20 = v19;
    }
    v18 = __OFSUB__(v15, v20);
    v21 = v15 - v20;
    if (v18)
      v22 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v22 = v21;
    if ((int)v22 >= 1 && (a1[23] & 0x10) != 0)
    {
      result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1);
      if (result)
      {
        v29 = result;
        v30 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1);
        if (__OFADD__(v30, a3))
          v31 = (v30 >> 31) + 0x7FFFFFFF;
        else
          v31 = v30 + a3;
        return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v29 + 1992))(v29, a1, v31, v22);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBlock::pageLogicalOffset(WebCore::RenderBlock *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0)
    return 0;
  v2 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(WebCore::RenderBlock **)(v10 + 8) == this)
        break;
    }
  }
  v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
  if (v11)
    return *(unsigned int *)(v11 + 4);
  else
    return 0;
}

uint64_t WebCore::RenderBox::pushContentsClip(WebCore::RenderBox *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  unint64_t v32;
  WebCore::RegionContext *v33;
  float v34;
  float v35;
  unsigned int v36;
  unint64_t v37;
  __int16 v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _QWORD v47[6];
  unint64_t v48;
  unint64_t v49;

  v6 = 0;
  v7 = *((unsigned __int16 *)a2 + 8);
  if (v7 <= 0x3F)
  {
    if (!*((_WORD *)a2 + 8))
      return v6;
    goto LABEL_7;
  }
  if (v7 == 4096)
    goto LABEL_8;
  if (v7 != 64 && v7 != 1024)
  {
LABEL_7:
    LODWORD(v6) = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1432))(this);
LABEL_8:
    v8 = (*((_BYTE *)this + 22) & 1) != 0 && (*(_BYTE *)(*((_QWORD *)this + 18) + 25) & 8) == 0;
    if ((v6 | v8) != 1)
      return 0;
    v10 = *((unsigned __int16 *)a2 + 8);
    if (v10 == 16)
    {
      v38 = 32;
    }
    else
    {
      if (v10 != 1)
      {
LABEL_16:
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
        v12 = 1.0;
        if (v11)
        {
          v13 = *(_QWORD *)(v11 + 8);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 24);
            if (v14)
            {
              v15 = *(float **)(v14 + 8);
              if (v15)
              {
                v16 = (*(_DWORD *)v15)++;
                v12 = v15[91];
                if (v16)
                {
                  *(_DWORD *)v15 = v16;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v15);
                  WTF::fastFree(v39, v40);
                }
              }
            }
          }
        }
        if ((_DWORD)v6)
          v17 = (*(uint64_t (**)(WebCore::RenderBox *, const WebCore::LayoutPoint *))(*(_QWORD *)this + 1440))(this, a3);
        else
          v17 = (*(uint64_t (**)(WebCore::RenderBox *, const WebCore::LayoutPoint *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 1416))(this, a3, 0, 0, *((unsigned __int16 *)a2 + 8));
        v48 = v17;
        v49 = v18;
        v43 = WebCore::snapRectToDevicePixels((int *)&v48, v12);
        v44 = v19;
        v45 = v20;
        v46 = v21;
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
        if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80)))
        {
          v41 = *((_QWORD *)a2 + 10);
          v42 = *((_QWORD *)this + 20);
          v47[0] = *(_QWORD *)a3;
          v47[1] = v42;
          WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderBox *)((char *)this + 80), (const WebCore::LayoutRect *)v47, 1, 1, (uint64_t)&v48);
          WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v48, v12, (uint64_t)v47);
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v41 + 464))(v41, v47);
        }
        (*(void (**)(_QWORD, float *))(**((_QWORD **)a2 + 10) + 456))(*((_QWORD *)a2 + 10), &v43);
        v22 = *((unsigned __int16 *)a2 + 8);
        if (v22 != 4096 && v22 != 0x2000)
          return 1;
        v23 = floorf(v43);
        if (v23 < 2147500000.0 && v23 > -2147500000.0
          || (v24 = 2147500000.0, v23 < 2147500000.0) && (v24 = -2147500000.0, v23 > -2147500000.0))
        {
          v24 = (float)(int)v23;
        }
        v25 = floorf(v44);
        if (v25 < 2147500000.0 && v25 > -2147500000.0
          || (v26 = 2147500000.0, v25 < 2147500000.0) && (v26 = -2147500000.0, v25 > -2147500000.0))
        {
          v26 = (float)(int)v25;
        }
        v27 = ceilf(v43 + v45);
        if (v27 < 2147500000.0 && v27 > -2147500000.0
          || (v28 = 2147500000.0, v27 < 2147500000.0) && (v28 = -2147500000.0, v27 > -2147500000.0))
        {
          v28 = (float)(int)v27;
        }
        v29 = ceilf(v44 + v46);
        if (v29 < 2147500000.0 && v29 > -2147500000.0
          || (v30 = 2147500000.0, v29 < 2147500000.0) && (v30 = -2147500000.0, v29 > -2147500000.0))
        {
          v30 = (float)(int)v29;
        }
        if (v24 < 2147500000.0 && v24 > -2147500000.0)
          goto LABEL_43;
        if (v24 >= 2147500000.0)
        {
          v31 = 0x7FFFFFFF;
        }
        else
        {
          if (v24 > -2147500000.0)
          {
LABEL_43:
            v31 = (int)v24;
            goto LABEL_44;
          }
          v31 = 0x80000000;
        }
LABEL_44:
        if (v26 < 2147500000.0 && v26 > -2147500000.0)
          goto LABEL_46;
        if (v26 >= 2147500000.0)
        {
          v32 = 0x7FFFFFFF00000000;
          goto LABEL_47;
        }
        if (v26 > -2147500000.0)
LABEL_46:
          v32 = (unint64_t)(int)v26 << 32;
        else
          v32 = 0x8000000000000000;
LABEL_47:
        v33 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
        v34 = v28 - v24;
        v35 = v30 - v26;
        if (v34 < 2147500000.0 && v34 > -2147500000.0)
          goto LABEL_49;
        if (v34 >= 2147500000.0)
        {
          v36 = 0x7FFFFFFF;
        }
        else
        {
          if (v34 > -2147500000.0)
          {
LABEL_49:
            v36 = (int)v34;
            goto LABEL_50;
          }
          v36 = 0x80000000;
        }
LABEL_50:
        if (v35 < 2147500000.0 && v35 > -2147500000.0)
          goto LABEL_52;
        if (v35 >= 2147500000.0)
        {
          v37 = 0x7FFFFFFF00000000;
          goto LABEL_53;
        }
        if (v35 > -2147500000.0)
LABEL_52:
          v37 = (unint64_t)(int)v35 << 32;
        else
          v37 = 0x8000000000000000;
LABEL_53:
        v48 = v32 | v31;
        v49 = v37 | v36;
        WebCore::RegionContext::pushClip(v33, (const WebCore::IntRect *)&v48);
        return 1;
      }
      *((_WORD *)a2 + 8) = 0;
      (*(void (**)(WebCore::RenderBox *, WebCore::PaintInfo *, const WebCore::LayoutPoint *))(*(_QWORD *)this + 1448))(this, a2, a3);
      v38 = 2;
    }
    *((_WORD *)a2 + 8) = v38;
    goto LABEL_16;
  }
  return v6;
}

uint64_t WebCore::RenderBox::popContentsClip(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;

  v8 = *(unsigned __int16 *)(a2 + 16);
  if (v8 == 4096 || v8 == 0x2000)
  {
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_DWORD *)(v10 + 44);
    if (v11)
      *(_DWORD *)(v10 + 44) = v11 - 1;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 80) + 104))(*(_QWORD *)(a2 + 80), 1);
  if (a3 == 16)
  {
    *(_WORD *)(a2 + 16) = 64;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1448))(a1, a2, a4);
    goto LABEL_9;
  }
  if (a3 == 1)
LABEL_9:
    *(_WORD *)(a2 + 16) = a3;
  return result;
}

unint64_t WebCore::RenderBox::flipForWritingModeForChild(WebCore::RenderBox *this, const WebCore::RenderBox *a2, const WebCore::LayoutPoint *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;

  v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v4 = v3 > 5;
  v5 = (1 << v3) & 0x2A;
  if (v4 || v5 == 0)
  {
    v7 = *(_DWORD *)a3;
LABEL_7:
    v8 = *((unsigned int *)a3 + 1);
    return v7 | (unint64_t)(v8 << 32);
  }
  v7 = *(_DWORD *)a3;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v23 = *((_DWORD *)this + 40);
    v12 = __OFADD__(v7, v23);
    v24 = v7 + v23;
    v25 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v25 = v24;
    v26 = *((_DWORD *)a2 + 40);
    v12 = __OFSUB__(v25, v26);
    v27 = v25 - v26;
    v28 = (v25 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v28 = v27;
    v29 = *((_DWORD *)a2 + 38);
    v30 = 2 * v29;
    v31 = v29 ^ (2 * v29);
    v32 = (v29 >> 31) + 0x7FFFFFFF;
    if (v31 >= 0)
      v32 = v30;
    v12 = __OFSUB__(v28, v32);
    v33 = v28 - v32;
    v7 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v7 = v33;
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a3 + 1);
  v11 = *((_DWORD *)this + 41);
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  v14 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v14 = v13;
  v15 = *((_DWORD *)a2 + 41);
  v12 = __OFSUB__(v14, v15);
  v16 = v14 - v15;
  v17 = (v14 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v17 = v16;
  v18 = *((_DWORD *)a2 + 39);
  v19 = 2 * v18;
  v20 = v18 ^ (2 * v18);
  v21 = (v18 >> 31) + 0x7FFFFFFF;
  if (v20 >= 0)
    v21 = v19;
  v12 = __OFSUB__(v17, v21);
  v22 = v17 - v21;
  LODWORD(v8) = (v17 >> 31) + 0x7FFFFFFF;
  if (v12)
    v8 = v8;
  else
    v8 = v22;
  return v7 | (unint64_t)(v8 << 32);
}

uint64_t WebCore::RenderBox::scrollPosition(WebCore::RenderBox *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  v2 = (*((_BYTE *)this + 45) & 2) != 0
     ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
     : *((_QWORD *)this + 12);
  v3 = v2 & 0x1C00;
  if (v3 == 2048)
    return 0;
  if (v3)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 18) + 264);
    if (v3)
      return *(_QWORD *)(v3 + 104);
  }
  return v3;
}

uint64_t WebCore::RenderBoxModelObject::inlineContinuation(WebCore::RenderBoxModelObject *this)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) != 0)
  {
    {
      v2 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v2 = 1;
    }
    dword_1ECE91378 = v2;
    v3 = *((_QWORD *)this + 1);
    v4 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v5 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      v11 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v8);
      if (v11 != -1 && v11 == v3)
        break;
      v8 = (v10 + i) & v4;
    }
    v13 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v10 + 8);
    while (1)
    {
      v13 = (_QWORD *)v13[2];
      if (!v13)
        break;
      if (*v13)
        result = *(_QWORD *)(*v13 + 8);
      else
        result = 0;
      if (result && (*(_BYTE *)(result + 45) & 0x20) != 0)
        return result;
    }
  }
  return 0;
}

uint64_t WebCore::RenderBlock::addContinuationWithOutline(uint64_t this, WTF **a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  WTF **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int j;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v3 = this;
  if ((byte_1ECE841F9 & 1) != 0)
  {
    if (qword_1ECE84208)
    {
      v4 = *(_DWORD *)(qword_1ECE84208 - 8);
      v5 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = v8;
        v11 = *(_QWORD *)(qword_1ECE84208 + 16 * v8);
        if (v11 != -1)
        {
          if (!v11)
            goto LABEL_9;
          if (*(_QWORD *)(v11 + 8) == this)
            break;
        }
        v8 = (v10 + i) & v4;
      }
      v12 = *(uint64_t **)(qword_1ECE84208 + 16 * v10 + 8);
      if (v12)
        goto LABEL_60;
    }
  }
  else
  {
    qword_1ECE84208 = 0;
    byte_1ECE841F9 = 1;
  }
LABEL_9:
  v12 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  v13 = *(WTF **)(v3 + 8);
  if (!v13)
  {
    v13 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *((_QWORD *)v13 + 1) = v3;
    v61 = *(WTF **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v13;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
      {
        WTF::fastFree(v61, a2);
        v13 = *(WTF **)(v3 + 8);
      }
      else
      {
        --*(_DWORD *)v61;
      }
    }
  }
  ++*(_DWORD *)v13;
  v14 = qword_1ECE84208;
  if (qword_1ECE84208
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>>::rehash(8u),
        (v14 = qword_1ECE84208) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = 0;
  v17 = *((_QWORD *)v13 + 1);
  v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = (v20 >> 31) ^ v20;
  for (j = 1; ; ++j)
  {
    v23 = v21 & v15;
    v24 = (uint64_t *)(v14 + 16 * v23);
    this = *v24;
    if (*v24 != -1)
      break;
    v16 = (WTF **)(v14 + 16 * v23);
LABEL_19:
    v21 = j + v23;
  }
  if (!this)
  {
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(v14 - 16);
      *v16 = v13;
    }
    else
    {
      *v24 = (uint64_t)v13;
      v16 = (WTF **)(v14 + 16 * v23);
    }
    v30 = v16[1];
    v16[1] = (WTF *)v12;
    if (v30)
    {
      v31 = (WTF *)*((_QWORD *)v30 + 1);
      while (v31)
      {
        v32 = v31;
        v31 = (WTF *)*((_QWORD *)v31 + 2);
        v33 = *(WTF **)v32;
        *(_QWORD *)v32 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 1)
            WTF::fastFree(v33, a2);
          else
            --*(_DWORD *)v33;
        }
        WTF::fastFree(v32, a2);
      }
      if (*(_QWORD *)v30)
        WTF::fastFree((WTF *)(*(_QWORD *)v30 - 16), a2);
      this = WTF::fastFree(v30, a2);
    }
    if (qword_1ECE84208)
      v34 = *(_DWORD *)(qword_1ECE84208 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(qword_1ECE84208 - 12) = v34;
    if (qword_1ECE84208)
      v35 = *(_DWORD *)(qword_1ECE84208 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(qword_1ECE84208 - 16) + v35);
    v37 = *(unsigned int *)(qword_1ECE84208 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_60;
    }
    else
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_60;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_59;
      }
    }
    v38 = (_DWORD)v37 << (6 * *(_DWORD *)(qword_1ECE84208 - 12) >= (2 * v37));
LABEL_59:
    this = (uint64_t)WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>>::rehash(v38);
    goto LABEL_60;
  }
  if (*(_QWORD *)(this + 8) != v17)
    goto LABEL_19;
  v25 = v14 + 16 * v23;
  v26 = *(WTF **)(v25 + 8);
  *(_QWORD *)(v25 + 8) = v12;
  if (v26)
  {
    v27 = (WTF *)*((_QWORD *)v26 + 1);
    while (v27)
    {
      v28 = v27;
      v27 = (WTF *)*((_QWORD *)v27 + 2);
      v29 = *(WTF **)v28;
      *(_QWORD *)v28 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
          WTF::fastFree(v29, a2);
        else
          --*(_DWORD *)v29;
      }
      WTF::fastFree(v28, a2);
    }
    if (*(_QWORD *)v26)
      WTF::fastFree((WTF *)(*(_QWORD *)v26 - 16), a2);
    this = WTF::fastFree(v26, a2);
  }
  if (*(_DWORD *)v13 == 1)
    this = WTF::fastFree(v13, a2);
  else
    --*(_DWORD *)v13;
LABEL_60:
  v39 = a2[1];
  if (!v39)
  {
    v39 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v39 = 1;
    *((_QWORD *)v39 + 1) = a2;
    this = (uint64_t)a2[1];
    a2[1] = v39;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        this = WTF::fastFree((WTF *)this, a2);
        v39 = a2[1];
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  ++*(_DWORD *)v39;
  v40 = *v12;
  if (*v12
    || (this = (uint64_t)WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(v12, 8u, 0), (v40 = *v12) != 0))
  {
    v41 = *(_DWORD *)(v40 - 8);
  }
  else
  {
    v41 = 0;
  }
  v42 = 0;
  v43 = *((_QWORD *)v39 + 1);
  v44 = (~(v43 << 32) + v43) ^ ((unint64_t)(~(v43 << 32) + v43) >> 22);
  v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
  v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
  v47 = (v46 >> 31) ^ v46;
  v48 = 1;
  while (2)
  {
    v49 = v47 & v41;
    v50 = (uint64_t *)(v40 + 8 * v49);
    v51 = *v50;
    if (*v50 == -1)
    {
      v42 = (uint64_t *)(v40 + 8 * v49);
LABEL_70:
      v47 = v48 + v49;
      ++v48;
      continue;
    }
    break;
  }
  if (v51)
  {
    if (*(_QWORD *)(*(_QWORD *)v51 + 8) == v43)
    {
      if (*(_DWORD *)v39 == 1)
        return WTF::fastFree(v39, a2);
      --*(_DWORD *)v39;
      return this;
    }
    goto LABEL_70;
  }
  if (v42)
  {
    *v42 = 0;
    --*(_DWORD *)(*v12 - 16);
    v50 = v42;
  }
  this = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = v39;
  *v50 = this;
  v52 = *v12;
  if (*v12)
    v53 = *(_DWORD *)(v52 - 12) + 1;
  else
    v53 = 1;
  *(_DWORD *)(v52 - 12) = v53;
  v54 = *v12;
  if (*v12)
    v55 = *(_DWORD *)(v54 - 12);
  else
    v55 = 0;
  v56 = (*(_DWORD *)(v54 - 16) + v55);
  v57 = *(unsigned int *)(v54 - 4);
  if (v57 > 0x400)
  {
    if (v57 <= 2 * v56)
    {
LABEL_84:
      v58 = (_DWORD)v57 << (6 * *(_DWORD *)(v54 - 12) >= (2 * v57));
      goto LABEL_87;
    }
  }
  else if (3 * v57 <= 4 * v56)
  {
    if ((_DWORD)v57)
      goto LABEL_84;
    v58 = 8;
LABEL_87:
    this = *WTF::HashTable<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::WeakRef<WebCore::RenderEmbeddedObject,WTF::SingleThreadWeakPtrImpl>> *>>::rehash(v12, v58, v50);
  }
  v59 = v12[2];
  *(_QWORD *)(this + 8) = v59;
  *(_QWORD *)(this + 16) = 0;
  if (v59)
    v60 = (_QWORD *)(v59 + 16);
  else
    v60 = v12 + 1;
  *v60 = this;
  v12[2] = this;
  return this;
}

uint64_t WebCore::RenderBlock::shouldPaintSelectionGaps(WebCore::RenderBlock *this)
{
  if ((*((_BYTE *)this + 23) & 0xE) == 0
    || (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0
    || (*((_BYTE *)this + 120) & 0x30) != 0)
  {
    return 0;
  }
  else
  {
    return WebCore::RenderBlock::isSelectionRoot(this);
  }
}

uint64_t WebCore::RenderBlock::isSelectionRoot(WebCore::RenderBlock *this)
{
  unsigned __int16 *v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  WebCore::RenderBlock *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int i;
  uint64_t v32;
  uint64_t v33;

  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v2 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v2)
    {
      if ((~v2[14] & 0x408) == 0 && (*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v2 + 368))(v2))
        return 0;
    }
  }
  result = 0;
  v4 = *((unsigned __int8 *)this + 46);
  if (v4 != 35 && v4 != 63)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*((_BYTE *)this + 45) & 1) != 0
      || (*(_WORD *)(v5 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
      if (*(_QWORD *)(v6 + 1272) != v5)
      {
        v7 = *((_DWORD *)this + 5);
        result = 1;
        if ((v7 & 3) == 2 || v4 == 37 || (v7 & 0x1810800) != 0)
          return result;
        if ((v7 & 0x20000) != 0)
        {
          v15 = this;
          if ((*((_BYTE *)this + 45) & 2) != 0)
            v15 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
          v16 = *((_QWORD *)v15 + 11);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 40) + 20))
            return result;
          v17 = *(_QWORD **)(v16 + 40);
          if (v17[41] || v17[38] || v17[39] || v17[40] || (v7 & 0x100000) != 0)
            return result;
        }
        if ((v7 & 0x4000) == 0)
          goto LABEL_17;
        v26 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
        v27 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        for (i = 1; ; ++i)
        {
          v32 = v30;
          v33 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v30);
          if (v33 != -1 && *(WebCore::RenderBlock **)(v33 + 8) == this)
            break;
          v30 = (v32 + i) & v26;
        }
        if (!**(_BYTE **)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v32 + 8))
        {
LABEL_17:
          v8 = *((_QWORD *)this + 11);
          v9 = *(_QWORD *)(v8 + 32);
          v10 = *(_QWORD *)(v9 + 48);
          if (*(_QWORD *)(v10 + 8))
          {
            while (!*(_QWORD *)(v10 + 16))
            {
              v10 = *(_QWORD *)(v10 + 8);
              if (!v10)
                goto LABEL_22;
            }
          }
          else
          {
            if (*(_QWORD *)(v10 + 16))
              v11 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v11 = 0;
            if (!v11)
            {
LABEL_22:
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 216) + 8))
                v12 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
              else
                v12 = 0;
              if (!v12)
              {
                v13 = *((_QWORD *)this + 4);
                if (v13)
                {
                  v14 = *(_QWORD *)(v13 + 8);
                  if (v14)
                  {
                    if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v14 + 124)) & 0xE000) == 0
                      && ((*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 2) == 0)
                      && (*(_BYTE *)(*(_QWORD *)(v9 + 24) + 56) & 8) == 0
                      && ((v7 & 1) == 0
                       || (v7 & 0x800) != 0
                       || (v7 & 0x1800000) == 0x1000000
                       || (*(char *)(v14 + 45) & 0x80000000) == 0 && *(_BYTE *)(v14 + 46) != 5)
                      && ((v7 & 0x400) != 0 || *(_BYTE *)(v14 + 46) != 12))
                    {
                      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 1944) + 288);
                      if (!v18)
                        return 0;
                      v19 = *(_QWORD *)(v18 + 8);
                      if (!v19)
                        return 0;
                      if ((*(_BYTE *)(v19 + 45) & 1) != 0)
                        return 0;
                      v20 = *(_QWORD *)(v19 + 24);
                      v21 = *(_QWORD *)(v20 + 8);
                      if (!v21)
                        return 0;
                      v22 = 0;
                      v23 = *(_QWORD *)(v20 + 8);
                      do
                      {
                        if (!WebCore::Node::hasEditableStyle(v23, 0))
                          break;
                        if ((*(_WORD *)(v23 + 28) & 8) != 0)
                          v22 = v23;
                        j = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 8) + 1272);
                        if (j)
                        {
                          if ((*(_WORD *)(j + 28) & 0x10) != 0
                            && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
                          {
                            for (j = *(_QWORD *)(j + 80); j; j = *(_QWORD *)(j + 56))
                            {
                              if ((*(_WORD *)(j + 28) & 0x10) != 0
                                && *(_QWORD *)(*(_QWORD *)(j + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag
                                                                                        + 24))
                              {
                                break;
                              }
                            }
                          }
                          else
                          {
                            j = 0;
                          }
                        }
                        if (j == v23)
                          break;
                        v23 = *(_QWORD *)(v23 + 32);
                      }
                      while (v23);
                      if ((*((_BYTE *)this + 45) & 1) != 0)
                      {
                        v25 = 0;
                      }
                      else
                      {
                        v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                        if (v25 && (*(_WORD *)(v25 + 28) & 8) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x196371088);
                        }
                      }
                      if (v22 != v25)
                        return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL WebCore::RenderObject::isBody(WebCore::RenderObject *this)
{
  uint64_t v1;

  return (*((_BYTE *)this + 45) & 1) == 0
      && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
      && (*(_WORD *)(v1 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
}

uint64_t WebCore::RenderBlock::selectionGapRectsForRepaint@<X0>(uint64_t this@<X0>, const WebCore::RenderLayerModelObject *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  float v8;
  float v9;
  float v10;
  double v11;
  int v12;
  int v13;
  double v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderBlock *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::RenderBlock *v28;
  unsigned int v29[3];
  int v30;
  int v31;
  int v32;
  _DWORD v33[2];
  _OWORD v34[4];
  char v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  char v39;
  __int16 v40;
  int v41;
  int v42;

  if ((*(_BYTE *)(this + 23) & 0xE) == 0
    || (*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) != 0
    || (*(_BYTE *)(this + 120) & 0x30) != 0
    || (v27 = (uint64_t)a3,
        v28 = (WebCore::RenderBlock *)this,
        this = WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)this),
        a3 = (_OWORD *)v27,
        (this & 1) == 0))
  {
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  else
  {
    v35 = 0;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    v39 = 0;
    memset(v34, 0, 41);
    v40 = 1;
    v41 = 0;
    v42 = 0;
    (*(void (**)(WebCore::RenderBlock *, const WebCore::RenderLayerModelObject *, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v28 + 576))(v28, a2, v34, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v34, 0);
    v5 = *(_QWORD *)&v34[0];
    v6 = v37;
    v37 = 0;
    if (v6)
      WTF::fastFree(v6, v4);
    v7 = v36;
    v36 = 0;
    if (v7)
      WTF::fastFree(v7, v4);
    v8 = 0.0;
    if ((*((_BYTE *)v28 + 22) & 1) != 0
      && ((*((_BYTE *)v28 + 45) & 2) != 0 ? (v24 = *(WebCore::RenderBlock **)(*((_QWORD *)v28 + 4) + 8)) : (v24 = v28),
          (v25 = *((_QWORD *)v24 + 12) & 0x1C00, v25 != 2048) && v25))
    {
      v26 = *(_QWORD *)(*((_QWORD *)v28 + 18) + 264);
      v9 = 0.0;
      if (v26)
      {
        v9 = (float)*(int *)(v26 + 104);
        v8 = (float)*(int *)(v26 + 108);
      }
    }
    else
    {
      v9 = 0.0;
    }
    v10 = *((float *)&v5 + 1) - v8;
    v11 = (float)(*(float *)&v5 - v9) * 64.0;
    if (v11 > -2147483650.0)
      v12 = (int)v11;
    else
      v12 = 0x80000000;
    if (v11 < 2147483650.0)
      v13 = v12;
    else
      v13 = 0x7FFFFFFF;
    v14 = v10 * 64.0;
    if (v14 > -2147483650.0)
      v15 = (int)v14;
    else
      v15 = 0x80000000;
    if (v14 >= 2147483650.0)
      v15 = 0x7FFFFFFF;
    v33[0] = v13;
    v33[1] = v15;
    WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches((WebCore::LogicalSelectionOffsetCaches *)v34, v28);
    v32 = 0;
    v16 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)v28, 0);
    v17 = (*(uint64_t (**)(WebCore::RenderBlock *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v28 + 1824))(v28, 0, v16, 0);
    v18 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)v28, (void *)v17);
    if ((*((_DWORD *)v28 + 5) & 0x1000) != 0)
      v19 = 1000;
    else
      v19 = 1016;
    if ((*((_DWORD *)v28 + 5) & 0x1000) != 0)
      v20 = 928;
    else
      v20 = 944;
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)v28 + v19))(v28);
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)v28 + v20))(v28);
    v31 = v18;
    v21 = WebCore::RenderBlock::logicalRightOffsetForLine(v28, 0, 0);
    if ((*((_DWORD *)v28 + 5) & 0x1000) != 0)
      v22 = 1000;
    else
      v22 = 1016;
    if ((*((_DWORD *)v28 + 5) & 0x1000) != 0)
      v23 = 928;
    else
      v23 = 944;
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)v28 + v22))(v28);
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)v28 + v23))(v28);
    WebCore::RenderBox::contentLogicalWidth(v28);
    v30 = v21;
    *(_QWORD *)v29 = 0;
    return WebCore::RenderBlock::selectionGaps(v27, (uint64_t)v28, v28, (const WebCore::LayoutSize *)v33, v29, (WebCore::LayoutUnit *)&v32, (WebCore::LayoutUnit *)&v31, (const WebCore::LogicalSelectionOffsetCaches *)&v30, (uint64_t)v34);
  }
  return this;
}

uint64_t WebCore::RenderBlock::logicalLeftSelectionOffset(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  uint64_t *v17;
  int *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  int *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;

  v7 = (uint64_t)a1;
  v8 = a3;
  v9 = WebCore::RenderBlock::logicalLeftOffsetForContent(a1, a3);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 1824))(v7, v8, v9, 0);
  v11 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(v7, (void *)v10);
  v12 = *(_QWORD *)v7;
  if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
  {
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 1000))(v7);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 928))(v7);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 1016))(v7);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
  }
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  if ((_DWORD)v11 == v15)
  {
    if (a2 != v7)
    {
      v16 = (*(_DWORD *)(v7 + 96) >> 19) & 7;
      v17 = a4 + 8;
      if (v16 == 2)
        v17 = a4 + 4;
      if (v16 != 6)
        a4 = v17;
      v18 = (int *)(v7 + 152);
      if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
        v18 = (int *)(v7 + 156);
      v19 = *v18;
      v20 = __OFADD__(a3, v19);
      v21 = a3 + v19;
      if (v20)
        v22 = (a3 >> 31) + 0x7FFFFFFF;
      else
        v22 = v21;
      v23 = *((_BYTE *)a4 + 16);
      if ((v23 & 3) == 2)
      {
        return *((unsigned int *)a4 + 5);
      }
      else
      {
        *((_BYTE *)a4 + 16) = v23 | 2;
        if (*a4)
          v11 = WebCore::RenderBlock::logicalLeftSelectionOffset(*a4, a2, v22, a4[1]);
        else
          v11 = 0;
        *((_DWORD *)a4 + 5) = v11;
      }
    }
  }
  else
  {
    for (; v7 != a2; a4 = (uint64_t *)v29[1])
    {
      v24 = (int *)(v7 + 156);
      if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
        v24 = (int *)(v7 + 152);
      v25 = *v24;
      v20 = __OFADD__((_DWORD)v11, v25);
      v26 = v11 + v25;
      if (v20)
        v11 = (v11 >> 31) + 0x7FFFFFFF;
      else
        v11 = v26;
      v27 = (*(_DWORD *)(v7 + 96) >> 19) & 7;
      v28 = a4 + 8;
      if (v27 == 2)
        v28 = a4 + 4;
      if (v27 == 6)
        v29 = a4;
      else
        v29 = v28;
      v7 = *v29;
      if (!*v29)
        break;
    }
  }
  return v11;
}

uint64_t WebCore::RenderBlock::logicalRightSelectionOffset(WebCore::RenderBox *a1, WebCore::RenderBox *a2, unsigned int a3, uint64_t a4)
{
  WebCore::RenderBox *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v7 = a1;
  v8 = WebCore::RenderBlock::logicalRightOffsetForLine(a1, a3, 0);
  v9 = *(_QWORD *)v7;
  if ((*((_BYTE *)v7 + 21) & 0x10) != 0)
  {
    v10 = (*(uint64_t (**)(WebCore::RenderBox *))(v9 + 1000))(v7);
    v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v7 + 928))(v7);
  }
  else
  {
    v10 = (*(uint64_t (**)(WebCore::RenderBox *))(v9 + 1016))(v7);
    v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v7 + 944))(v7);
  }
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 + v11;
  v13 = WebCore::RenderBox::contentLogicalWidth(v7);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  if ((_DWORD)v8 == v14)
  {
    if (a2 != v7)
    {
      v15 = (*((_DWORD *)v7 + 24) >> 19) & 7;
      v16 = a4 + 64;
      if (v15 == 2)
        v16 = a4 + 32;
      if (v15 != 6)
        a4 = v16;
      v17 = (int *)((char *)v7 + 152);
      if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 >= 4)
        v17 = (int *)((char *)v7 + 156);
      v18 = *v17;
      v19 = __OFADD__(a3, v18);
      v20 = a3 + v18;
      if (v19)
        v21 = (a3 >> 31) + 0x7FFFFFFF;
      else
        v21 = v20;
      v22 = *(_BYTE *)(a4 + 16);
      if ((v22 & 5) == 4)
      {
        return *(unsigned int *)(a4 + 24);
      }
      else
      {
        *(_BYTE *)(a4 + 16) = v22 | 4;
        if (*(_QWORD *)a4)
          v8 = WebCore::RenderBlock::logicalRightSelectionOffset(*(_QWORD *)a4, a2, v21, *(_QWORD *)(a4 + 8));
        else
          v8 = 0;
        *(_DWORD *)(a4 + 24) = v8;
      }
    }
  }
  else
  {
    for (; v7 != a2; a4 = *(_QWORD *)(v28 + 8))
    {
      v23 = (int *)((char *)v7 + 156);
      if (((*((_DWORD *)v7 + 31) >> 13) & 6u) - 2 >= 4)
        v23 = (int *)((char *)v7 + 152);
      v24 = *v23;
      v19 = __OFADD__((_DWORD)v8, v24);
      v25 = v8 + v24;
      if (v19)
        v8 = (v8 >> 31) + 0x7FFFFFFF;
      else
        v8 = v25;
      v26 = (*((_DWORD *)v7 + 24) >> 19) & 7;
      v27 = a4 + 64;
      if (v26 == 2)
        v27 = a4 + 32;
      if (v26 == 6)
        v28 = a4;
      else
        v28 = v27;
      v7 = *(WebCore::RenderBox **)v28;
      if (!*(_QWORD *)v28)
        break;
    }
  }
  return v8;
}

uint64_t WebCore::RenderBlock::selectionGaps(uint64_t result, uint64_t a2, WebCore::RenderBox *a3, const WebCore::LayoutSize *a4, unsigned int *a5, WebCore::LayoutUnit *a6, WebCore::LayoutUnit *a7, const WebCore::LogicalSelectionOffsetCaches *a8, uint64_t a9)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int v26;
  int *v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  signed int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  BOOL v51;
  char v52;
  BOOL v53;
  char v54;
  BOOL v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  signed int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _BOOL4 v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int *v122;
  unsigned int *v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  signed int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int *v140;
  _DWORD *v141;
  unsigned int v142;
  int v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  signed int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  _DWORD *v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int *v167;
  _DWORD *v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int *v171;
  _DWORD *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v177;
  int v178;
  int v180;
  _OWORD *v181;
  _OWORD *v182;
  unsigned int v183;
  int v184;
  int v185;
  char v186;
  char v187;
  char v188;
  unsigned int v189;
  _DWORD v190[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  int v201;
  int v202;

  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  if ((*(_BYTE *)(a2 + 52) & 7) == 1)
  {
    v16 = result;
    v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x20000) != 0)
    {
      v22 = a2;
      if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        v22 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
      v23 = *(_QWORD *)(v22 + 88);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 40) + 20))
        goto LABEL_16;
      v24 = *(_QWORD **)(v23 + 40);
      if (v24[41] || v24[38] || v24[39] || v24[40] || (v17 & 0x100000) != 0)
        goto LABEL_16;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 32) + 24) + 56) & 8) != 0
      || (*(_BYTE *)(a2 + 53) & 2) != 0)
    {
LABEL_16:
      v25 = a5 + 1;
      if ((*((_BYTE *)a3 + 21) & 0x10) != 0)
        v25 = a5;
      v26 = *v25;
      if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
        v27 = (int *)(a2 + 164);
      else
        v27 = (int *)(a2 + 160);
      v28 = *v27;
      v29 = __OFADD__(v26, v28);
      v30 = v26 + v28;
      v31 = (v26 >> 31) + 0x7FFFFFFF;
      if (!v29)
        v31 = v30;
      *(_DWORD *)a6 = v31;
      if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
        v32 = (unsigned int *)(a2 + 164);
      else
        v32 = (unsigned int *)(a2 + 160);
      *(_DWORD *)a7 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)a2, (uint64_t)a3, *v32, (uint64_t *)a9);
      if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
        v33 = (unsigned int *)(a2 + 164);
      else
        v33 = (unsigned int *)(a2 + 160);
      result = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a2, a3, *v33, a9);
      *(_DWORD *)a8 = result;
    }
    else
    {
      if ((v17 & 0x40000) == 0)
      {
        v18 = *(unsigned __int8 *)(a2 + 68);
        for (i = *(unsigned int *)(a2 + 64); ; i = *(unsigned int *)(v21 + 47))
        {
          v20 = i | (v18 << 32);
          if (!v20)
            goto LABEL_32;
          v21 = *(_QWORD *)(v20 + 8);
          if (!v21 || (*(_BYTE *)(v21 + 45) & 4) == 0)
            goto LABEL_32;
          if ((*(_BYTE *)(v21 + 23) & 0xE) != 0)
            break;
          v18 = *(unsigned __int8 *)(v21 + 51);
        }
        v49 = *(_OWORD *)(a9 + 16);
        v194 = *(_OWORD *)a9;
        v195 = v49;
        v50 = *(_OWORD *)(a9 + 48);
        v196 = *(_OWORD *)(a9 + 32);
        v197 = v50;
        v201 = 0;
        v202 = 0;
        v199 = 0;
        v200 = 0;
        if (WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)a2))
        {
          v186 = *(_BYTE *)(a9 + 16);
          *(_QWORD *)&v194 = a2;
          v51 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1672))(a2) & 1) != 0
             || (*(_BYTE *)(a2 + 23) & 0x10) != 0
             && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 648))(a2) != 0;
          if ((v186 & 1) != 0)
            v52 = 1;
          else
            v52 = v195 | v51;
          *((_QWORD *)&v194 + 1) = a9;
          LOBYTE(v195) = v195 & 0xF8 | v52 & 1;
        }
        if (!WebCore::RenderElement::canContainAbsolutelyPositionedObjects((WebCore::RenderElement *)a2)
          || (*(_BYTE *)(a2 + 45) & 0x20) != 0)
        {
          goto LABEL_89;
        }
        if ((*(_BYTE *)(a2 + 45) & 1) == 0)
          goto LABEL_81;
        if ((*(_BYTE *)(a2 + 45) & 2) != 0)
        {
          v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 96);
          if ((v177 & 0x1F) != 1 && (v177 & 0x1F) != 14)
            goto LABEL_81;
        }
        else
        {
          v177 = *(_QWORD *)(a2 + 96);
          if ((v177 & 0x1F) != 1 && (v177 & 0x1F) != 0xE)
            goto LABEL_81;
        }
        if ((*(_BYTE *)(a2 + 45) & 0x40) != 0
          && (v177 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2) & 1) == 0)
        {
          v178 = *(unsigned __int8 *)(a2 + 46);
          if (v178 != 20)
          {
            if ((*(_BYTE *)(a2 + 52) & 7) == 1)
            {
              if ((*(_BYTE *)(a2 + 53) & 2) == 0 && v178 != 26 && v178 != 49)
                goto LABEL_89;
            }
            else if (v178 != 49 && v178 != 26)
            {
LABEL_89:
              v188 = *(_BYTE *)(a9 + 80);
              v198 = a2;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1672))(a2);
              if ((result & 1) != 0)
              {
                v55 = 1;
              }
              else if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
              {
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 648))(a2);
                v55 = result != 0;
              }
              else
              {
                v55 = 0;
              }
              v199 = a9;
              v200 = (v188 | v55) & 1;
              v181 = (_OWORD *)(v16 + 16);
              v182 = (_OWORD *)(v16 + 32);
              while (1)
              {
                v56 = *(_DWORD *)(v21 + 20);
                v189 = ((v56 >> 25) & 7) - 3;
                if ((v56 & 0x800) == 0
                  && (v56 & 0x1800000) != 0x1000000
                  && ((~v56 & 0x808000) != 0 || !*(_QWORD *)(*(_QWORD *)(v21 + 144) + 148)))
                {
                  break;
                }
LABEL_314:
                v175 = *(unsigned int *)(v21 + 47);
                if (v175 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32))
                {
                  v21 = *(_QWORD *)((v175 | ((unint64_t)*(unsigned __int8 *)(v21 + 51) << 32)) + 8);
                  if (v21)
                  {
                    if (v189 >= 2 && (*(_BYTE *)(v21 + 45) & 4) != 0)
                      continue;
                  }
                }
                goto LABEL_32;
              }
              v183 = *(_DWORD *)(v21 + 20);
              v184 = (v56 >> 25) & 7;
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 520))(v21) & 1) != 0)
              {
                v57 = 1;
              }
              else
              {
                v58 = *(unsigned __int8 *)(v21 + 46);
                v57 = 1;
                if (v58 != 35 && v58 != 63)
                {
                  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 512))(v21);
                  if (!v184 || !(_DWORD)result)
                  {
                    if (v184 && (*(_BYTE *)(v21 + 45) & 0x40) != 0)
                    {
                      v78 = *(_DWORD *)(v21 + 152);
                      v29 = __OFADD__(*a5, v78);
                      v79 = *a5 + v78;
                      if (v29)
                        v79 = (*a5 >> 31) + 0x7FFFFFFF;
                      v80 = a5[1];
                      v81 = *(_DWORD *)(v21 + 156);
                      v29 = __OFADD__(v80, v81);
                      v82 = v80 + v81;
                      if (v29)
                        v82 = (v80 >> 31) + 0x7FFFFFFF;
                      v190[0] = v79;
                      v190[1] = v82;
                      result = WebCore::RenderBlock::selectionGaps((WebCore::RenderBlock *)&v191, (WebCore::RenderBlock *)v21, a3, a4, (WebCore::LayoutUnit *)v190, a6, a7, a8, (const WebCore::PaintInfo *)&v194);
                      if (SDWORD2(v191) >= 1 && SHIDWORD(v191) >= 1)
                      {
                        v83 = *(_DWORD *)(v16 + 8);
                        if (v83 < 1 || (v84 = *(_DWORD *)(v16 + 12), v84 <= 0))
                        {
                          *(_OWORD *)v16 = v191;
                        }
                        else
                        {
                          v86 = *(_DWORD *)v16;
                          v85 = *(_DWORD *)(v16 + 4);
                          if ((int)v191 >= *(_DWORD *)v16)
                            v87 = v86;
                          else
                            v87 = v191;
                          if (SDWORD1(v191) >= (int)v85)
                            v88 = v85;
                          else
                            v88 = DWORD1(v191);
                          v29 = __OFADD__(v86, v83);
                          v89 = v86 + v83;
                          if (v29)
                            v89 = (v86 >> 31) + 0x7FFFFFFF;
                          v90 = v191 + DWORD2(v191);
                          if (__OFADD__((_DWORD)v191, DWORD2(v191)))
                            v90 = (v191 >> 31) + 0x7FFFFFFF;
                          if (v89 > (int)v90)
                            v90 = v89;
                          v29 = __OFADD__(v85, v84);
                          v91 = v85 + v84;
                          if (v29)
                            v91 = (v85 >> 31) + 0x7FFFFFFF;
                          v92 = DWORD1(v191) + HIDWORD(v191);
                          if (__OFADD__(DWORD1(v191), HIDWORD(v191)))
                            v92 = (DWORD1(v191) >> 31) + 0x7FFFFFFF;
                          if (v91 > v92)
                            v92 = v91;
                          *(_QWORD *)v16 = v87 | (v88 << 32);
                          v29 = __OFSUB__(v90, (_DWORD)v87);
                          v93 = v90 - v87;
                          if (v29)
                            v93 = (v90 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 8) = v93;
                          v29 = __OFSUB__(v92, (_DWORD)v88);
                          v94 = v92 - v88;
                          if (v29)
                            v94 = (v92 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 12) = v94;
                        }
                      }
                      if (SDWORD2(v192) >= 1 && SHIDWORD(v192) >= 1)
                      {
                        v95 = *(_DWORD *)(v16 + 24);
                        if (v95 < 1 || (v96 = *(_DWORD *)(v16 + 28), v96 <= 0))
                        {
                          *v181 = v192;
                        }
                        else
                        {
                          v98 = *(_DWORD *)(v16 + 16);
                          v97 = *(_DWORD *)(v16 + 20);
                          if ((int)v192 >= (int)v98)
                            v99 = v98;
                          else
                            v99 = v192;
                          if (SDWORD1(v192) >= (int)v97)
                            v100 = v97;
                          else
                            v100 = DWORD1(v192);
                          v29 = __OFADD__(v98, v95);
                          v101 = v98 + v95;
                          if (v29)
                            v101 = (v98 >> 31) + 0x7FFFFFFF;
                          v102 = v192 + DWORD2(v192);
                          if (__OFADD__((_DWORD)v192, DWORD2(v192)))
                            v102 = (v192 >> 31) + 0x7FFFFFFF;
                          if (v101 > (int)v102)
                            v102 = v101;
                          v29 = __OFADD__(v97, v96);
                          v103 = v97 + v96;
                          if (v29)
                            v103 = (v97 >> 31) + 0x7FFFFFFF;
                          v104 = DWORD1(v192) + HIDWORD(v192);
                          if (__OFADD__(DWORD1(v192), HIDWORD(v192)))
                            v104 = (DWORD1(v192) >> 31) + 0x7FFFFFFF;
                          if (v103 > v104)
                            v104 = v103;
                          *(_QWORD *)v181 = v99 | (v100 << 32);
                          v29 = __OFSUB__(v102, (_DWORD)v99);
                          v105 = v102 - v99;
                          if (v29)
                            v105 = (v102 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 24) = v105;
                          v29 = __OFSUB__(v104, (_DWORD)v100);
                          v106 = v104 - v100;
                          if (v29)
                            v106 = (v104 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 28) = v106;
                        }
                      }
                      if (SDWORD2(v193) >= 1 && SHIDWORD(v193) >= 1)
                      {
                        v107 = *(_DWORD *)(v16 + 40);
                        if (v107 < 1 || (v108 = *(_DWORD *)(v16 + 44), v108 <= 0))
                        {
                          *v182 = v193;
                        }
                        else
                        {
                          v110 = *(_DWORD *)(v16 + 32);
                          v109 = *(_DWORD *)(v16 + 36);
                          if ((int)v193 >= (int)v110)
                            v111 = v110;
                          else
                            v111 = v193;
                          if (SDWORD1(v193) >= (int)v109)
                            v112 = v109;
                          else
                            v112 = DWORD1(v193);
                          v29 = __OFADD__(v110, v107);
                          v113 = v110 + v107;
                          if (v29)
                            v113 = (v110 >> 31) + 0x7FFFFFFF;
                          v114 = v193 + DWORD2(v193);
                          if (__OFADD__((_DWORD)v193, DWORD2(v193)))
                            v114 = (v193 >> 31) + 0x7FFFFFFF;
                          if (v113 > (int)v114)
                            v114 = v113;
                          v29 = __OFADD__(v109, v108);
                          v115 = v109 + v108;
                          if (v29)
                            v115 = (v109 >> 31) + 0x7FFFFFFF;
                          v116 = DWORD1(v193) + HIDWORD(v193);
                          if (__OFADD__(DWORD1(v193), HIDWORD(v193)))
                            v116 = (DWORD1(v193) >> 31) + 0x7FFFFFFF;
                          if (v115 > v116)
                            v116 = v115;
                          *(_QWORD *)v182 = v111 | (v112 << 32);
                          v29 = __OFSUB__(v114, (_DWORD)v111);
                          v117 = v114 - v111;
                          if (v29)
                            v117 = (v114 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 40) = v117;
                          v29 = __OFSUB__(v116, (_DWORD)v112);
                          v118 = v116 - v112;
                          if (v29)
                            v118 = (v116 >> 31) + 0x7FFFFFFF;
                          *(_DWORD *)(v16 + 44) = v118;
                        }
                      }
                    }
                    goto LABEL_314;
                  }
                  v57 = 0;
                }
              }
              if (((v183 >> 25) & 6) == 2)
              {
                v180 = v57;
                v59 = (unsigned int *)(((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4 ? v21 + 152 : v21 + 156);
                v60 = WebCore::RenderBlock::blockSelectionGap((uint64_t *)a2, (uint64_t)a3, a4, *a5, a5[1], *(_DWORD *)a6, *(_DWORD *)a7, *(_DWORD *)a8, *v59, (uint64_t *)a9, 0);
                v57 = v180;
                if ((int)v61 >= 1 && SHIDWORD(v61) >= 1)
                {
                  v62 = *(_DWORD *)(v16 + 24);
                  if (v62 < 1 || (v63 = *(_DWORD *)(v16 + 28), v63 <= 0))
                  {
                    *(_QWORD *)(v16 + 16) = v60;
                    *(_QWORD *)(v16 + 24) = v61;
                    if (v180)
                    {
LABEL_136:
                      v74 = v184;
                      if (v189 < 2)
                      {
LABEL_139:
                        v75 = 0;
                        v76 = 0;
                        v77 = (*(unsigned __int8 *)(a2 + 123) >> 2) & 1;
                        goto LABEL_233;
                      }
                      if (v184 != 2)
                      {
                        if (v184 == 1)
                          goto LABEL_139;
                        goto LABEL_230;
                      }
                      goto LABEL_229;
                    }
LABEL_228:
                    v74 = v184;
                    if (v184 != 2)
                    {
LABEL_230:
                      v120 = *(_DWORD *)(a2 + 120);
                      v121 = v120 & 0x4000000;
                      v75 = v74 == 3;
                      if (v74 == 3 && !v121)
                      {
                        v77 = 0;
                        v76 = 1;
                        goto LABEL_233;
                      }
                      v77 = (v120 >> 26) & 1;
                      if (v74 == 1)
                        v76 = (v120 >> 26) & 1;
                      else
                        v76 = 0;
                      if (v74 != 1 || v121)
                      {
LABEL_233:
                        v119 = v75 & v77;
                        if (!v76)
                          goto LABEL_263;
                        goto LABEL_234;
                      }
                      v119 = 1;
                      if (!v76)
                        goto LABEL_263;
LABEL_234:
                      v185 = v119;
                      if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4)
                      {
                        v122 = (int *)(v21 + 156);
                        v123 = (unsigned int *)(v21 + 152);
                        v124 = (unsigned int *)(v21 + 160);
                      }
                      else
                      {
                        v122 = (int *)(v21 + 152);
                        v123 = (unsigned int *)(v21 + 156);
                        v124 = (unsigned int *)(v21 + 164);
                      }
                      v125 = WebCore::RenderBlock::logicalLeftSelectionGap((uint64_t *)a2, (uint64_t)a3, a4, a5, (WebCore::RenderElement *)a2, *v122, *v123, *v124, (uint64_t *)a9, 0);
                      if ((int)v126 >= 1 && SHIDWORD(v126) >= 1)
                      {
                        v127 = *(_DWORD *)(v16 + 8);
                        if (v127 >= 1)
                        {
                          v128 = *(_DWORD *)(v16 + 12);
                          if (v128 > 0)
                          {
                            v130 = *(_DWORD *)v16;
                            v129 = *(_DWORD *)(v16 + 4);
                            if ((int)v125 >= *(_DWORD *)v16)
                              v131 = v130;
                            else
                              v131 = v125;
                            if (SHIDWORD(v125) >= (int)v129)
                              v132 = v129;
                            else
                              v132 = HIDWORD(v125);
                            v29 = __OFADD__(v130, v127);
                            v133 = v130 + v127;
                            if (v29)
                              v133 = (v130 >> 31) + 0x7FFFFFFF;
                            v134 = v125 + v126;
                            if (__OFADD__((_DWORD)v125, (_DWORD)v126))
                              v134 = (v125 >> 31) + 0x7FFFFFFF;
                            if (v133 <= v134)
                              v133 = v134;
                            v29 = __OFADD__(v129, v128);
                            v135 = v129 + v128;
                            if (v29)
                              v135 = (v129 >> 31) + 0x7FFFFFFF;
                            v136 = HIDWORD(v125) + HIDWORD(v126);
                            if (__OFADD__(HIDWORD(v125), HIDWORD(v126)))
                              v136 = (HIDWORD(v125) >> 31) + 0x7FFFFFFF;
                            if (v135 > v136)
                              v136 = v135;
                            *(_QWORD *)v16 = v131 | (v132 << 32);
                            v29 = __OFSUB__(v133, (_DWORD)v131);
                            v137 = v133 - v131;
                            if (v29)
                              v137 = (v133 >> 31) + 0x7FFFFFFF;
                            v119 = v185;
                            *(_DWORD *)(v16 + 8) = v137;
                            v29 = __OFSUB__(v136, (_DWORD)v132);
                            v138 = v136 - v132;
                            if (v29)
                              v138 = (v136 >> 31) + 0x7FFFFFFF;
                            *(_DWORD *)(v16 + 12) = v138;
                            goto LABEL_263;
                          }
                        }
                        *(_QWORD *)v16 = v125;
                        *(_QWORD *)(v16 + 8) = v126;
                      }
                      v119 = v185;
LABEL_263:
                      if (v119)
                      {
                        v139 = ((*(_DWORD *)(v21 + 124) >> 13) & 6) - 2;
                        if (v139 < 4)
                        {
                          v140 = (unsigned int *)(v21 + 156);
                          v141 = (_DWORD *)(v21 + 164);
                        }
                        else
                        {
                          v140 = (unsigned int *)(v21 + 152);
                          v141 = (_DWORD *)(v21 + 160);
                        }
                        v142 = *v140;
                        v143 = *v140 + *v141;
                        if (__OFADD__(v142, *v141))
                          v143 = (v142 >> 31) + 0x7FFFFFFF;
                        if (v139 < 4)
                        {
                          v144 = (unsigned int *)(v21 + 152);
                          v145 = (unsigned int *)(v21 + 160);
                        }
                        else
                        {
                          v144 = (unsigned int *)(v21 + 156);
                          v145 = (unsigned int *)(v21 + 164);
                        }
                        v146 = WebCore::RenderBlock::logicalRightSelectionGap((uint64_t *)a2, a3, a4, *a5, a5[1], (WebCore::RenderElement *)a2, v143, *v144, *v145, (uint64_t *)a9, 0);
                        if ((int)v147 >= 1 && SHIDWORD(v147) >= 1)
                        {
                          v148 = *(_DWORD *)(v16 + 40);
                          if (v148 < 1 || (v149 = *(_DWORD *)(v16 + 44), v149 <= 0))
                          {
                            *(_QWORD *)(v16 + 32) = v146;
                            *(_QWORD *)(v16 + 40) = v147;
                          }
                          else
                          {
                            v151 = *(_DWORD *)(v16 + 32);
                            v150 = *(_DWORD *)(v16 + 36);
                            if ((int)v146 >= (int)v151)
                              v152 = v151;
                            else
                              v152 = v146;
                            if (SHIDWORD(v146) >= (int)v150)
                              v153 = v150;
                            else
                              v153 = HIDWORD(v146);
                            v29 = __OFADD__(v151, v148);
                            v154 = v151 + v148;
                            if (v29)
                              v154 = (v151 >> 31) + 0x7FFFFFFF;
                            v155 = v146 + v147;
                            if (__OFADD__((_DWORD)v146, (_DWORD)v147))
                              v155 = (v146 >> 31) + 0x7FFFFFFF;
                            if (v154 <= v155)
                              v154 = v155;
                            v29 = __OFADD__(v150, v149);
                            v156 = v150 + v149;
                            if (v29)
                              v156 = (v150 >> 31) + 0x7FFFFFFF;
                            v157 = HIDWORD(v146) + HIDWORD(v147);
                            if (__OFADD__(HIDWORD(v146), HIDWORD(v147)))
                              v157 = (HIDWORD(v146) >> 31) + 0x7FFFFFFF;
                            if (v156 > v157)
                              v157 = v156;
                            *(_QWORD *)v182 = v152 | (v153 << 32);
                            v29 = __OFSUB__(v154, (_DWORD)v152);
                            v158 = v154 - v152;
                            if (v29)
                              v158 = (v154 >> 31) + 0x7FFFFFFF;
                            *(_DWORD *)(v16 + 40) = v158;
                            v29 = __OFSUB__(v157, (_DWORD)v153);
                            v159 = v157 - v153;
                            if (v29)
                              v159 = (v157 >> 31) + 0x7FFFFFFF;
                            *(_DWORD *)(v16 + 44) = v159;
                          }
                        }
                      }
                      v160 = a5 + 1;
                      if ((*((_BYTE *)a3 + 21) & 0x10) != 0)
                        v160 = a5;
                      v161 = *v160;
                      if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4)
                      {
                        v162 = (unsigned int *)(v21 + 152);
                        v163 = (_DWORD *)(v21 + 160);
                      }
                      else
                      {
                        v162 = (unsigned int *)(v21 + 156);
                        v163 = (_DWORD *)(v21 + 164);
                      }
                      v164 = *v162;
                      v165 = *v162 + *v163;
                      if (__OFADD__(v164, *v163))
                        v165 = (v164 >> 31) + 0x7FFFFFFF;
                      v29 = __OFADD__(v161, v165);
                      v166 = v161 + v165;
                      if (v29)
                        v166 = (v161 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)a6 = v166;
                      if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4)
                      {
                        v167 = (unsigned int *)(v21 + 152);
                        v168 = (_DWORD *)(v21 + 160);
                      }
                      else
                      {
                        v167 = (unsigned int *)(v21 + 156);
                        v168 = (_DWORD *)(v21 + 164);
                      }
                      v169 = *v167;
                      v170 = *v167 + *v168;
                      if (__OFADD__(v169, *v168))
                        v170 = (v169 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)a7 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)a2, (uint64_t)a3, v170, (uint64_t *)a9);
                      if (((*(_DWORD *)(v21 + 124) >> 13) & 6u) - 2 < 4)
                      {
                        v171 = (unsigned int *)(v21 + 152);
                        v172 = (_DWORD *)(v21 + 160);
                      }
                      else
                      {
                        v171 = (unsigned int *)(v21 + 156);
                        v172 = (_DWORD *)(v21 + 164);
                      }
                      v173 = *v171;
                      v174 = *v171 + *v172;
                      if (__OFADD__(v173, *v172))
                        v174 = (v173 >> 31) + 0x7FFFFFFF;
                      result = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a2, a3, v174, a9);
                      *(_DWORD *)a8 = result;
                      goto LABEL_314;
                    }
LABEL_229:
                    v119 = 1;
                    goto LABEL_234;
                  }
                  v65 = *(_DWORD *)(v16 + 16);
                  v64 = *(_DWORD *)(v16 + 20);
                  if ((int)v60 >= (int)v65)
                    v66 = v65;
                  else
                    v66 = v60;
                  if (SHIDWORD(v60) >= (int)v64)
                    v67 = v64;
                  else
                    v67 = HIDWORD(v60);
                  v29 = __OFADD__(v65, v62);
                  v68 = v65 + v62;
                  if (v29)
                    v68 = (v65 >> 31) + 0x7FFFFFFF;
                  v69 = v60 + v61;
                  if (__OFADD__((_DWORD)v60, (_DWORD)v61))
                    v69 = (v60 >> 31) + 0x7FFFFFFF;
                  if (v68 <= v69)
                    v68 = v69;
                  v29 = __OFADD__(v64, v63);
                  v70 = v64 + v63;
                  if (v29)
                    v70 = (v64 >> 31) + 0x7FFFFFFF;
                  v71 = HIDWORD(v60) + HIDWORD(v61);
                  if (__OFADD__(HIDWORD(v60), HIDWORD(v61)))
                    v71 = (HIDWORD(v60) >> 31) + 0x7FFFFFFF;
                  if (v70 > v71)
                    v71 = v70;
                  *(_QWORD *)v181 = v66 | (v67 << 32);
                  v29 = __OFSUB__(v68, (_DWORD)v66);
                  v72 = v68 - v66;
                  if (v29)
                    v72 = (v68 >> 31) + 0x7FFFFFFF;
                  *(_DWORD *)(v16 + 24) = v72;
                  v29 = __OFSUB__(v71, (_DWORD)v67);
                  v73 = v71 - v67;
                  if (v29)
                    v73 = (v71 >> 31) + 0x7FFFFFFF;
                  *(_DWORD *)(v16 + 28) = v73;
                }
              }
              if (v57)
                goto LABEL_136;
              goto LABEL_228;
            }
          }
        }
LABEL_81:
        v187 = *(_BYTE *)(a9 + 48);
        *(_QWORD *)&v196 = a2;
        v53 = ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1672))(a2) & 1) != 0
           || (*(_BYTE *)(a2 + 23) & 0x10) != 0 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 648))(a2) != 0;
        if ((v187 & 1) != 0)
          v54 = 1;
        else
          v54 = v197 | v53;
        *((_QWORD *)&v196 + 1) = a9;
        LOBYTE(v197) = v197 & 0xF8 | v54 & 1;
        goto LABEL_89;
      }
      result = (*(uint64_t (**)(uint64_t, WebCore::RenderBox *, const WebCore::LayoutSize *, unsigned int *, WebCore::LayoutUnit *, WebCore::LayoutUnit *, const WebCore::LogicalSelectionOffsetCaches *, uint64_t, _QWORD))(*(_QWORD *)a2 + 1896))(a2, a3, a4, a5, a6, a7, a8, a9, 0);
LABEL_32:
      if (a3 == (WebCore::RenderBox *)a2 && ((*(_DWORD *)(a2 + 20) >> 25) & 7u) - 3 >= 2)
      {
        v34 = (unsigned int *)(a2 + 160);
        if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
          v34 = (unsigned int *)(a2 + 164);
        result = WebCore::RenderBlock::blockSelectionGap((uint64_t *)a2, a2, a4, *a5, a5[1], *(_DWORD *)a6, *(_DWORD *)a7, *(_DWORD *)a8, *v34, (uint64_t *)a9, 0);
        if ((int)v35 >= 1 && SHIDWORD(v35) >= 1)
        {
          v36 = *(_DWORD *)(v16 + 24);
          if (v36 < 1 || (v37 = *(_DWORD *)(v16 + 28), v37 <= 0))
          {
            *(_QWORD *)(v16 + 16) = result;
            *(_QWORD *)(v16 + 24) = v35;
          }
          else
          {
            v39 = *(_DWORD *)(v16 + 16);
            v38 = *(_DWORD *)(v16 + 20);
            if ((int)result >= (int)v39)
              v40 = v39;
            else
              v40 = result;
            if (SHIDWORD(result) >= (int)v38)
              v41 = v38;
            else
              v41 = HIDWORD(result);
            v29 = __OFADD__(v39, v36);
            v42 = v39 + v36;
            if (v29)
              v42 = (v39 >> 31) + 0x7FFFFFFF;
            v43 = result + v35;
            if (__OFADD__((_DWORD)result, (_DWORD)v35))
              v43 = (result >> 31) + 0x7FFFFFFF;
            if (v42 <= v43)
              v42 = v43;
            v29 = __OFADD__(v38, v37);
            v44 = v38 + v37;
            if (v29)
              v44 = (v38 >> 31) + 0x7FFFFFFF;
            v45 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(HIDWORD(result), HIDWORD(v35)))
              v45 = HIDWORD(result) + HIDWORD(v35);
            if (v44 > v45)
              v45 = v44;
            *(_QWORD *)(v16 + 16) = v40 | (v41 << 32);
            v29 = __OFSUB__(v42, (_DWORD)v40);
            v46 = v42 - v40;
            if (v29)
              v46 = (v42 >> 31) + 0x7FFFFFFF;
            v29 = __OFSUB__(v45, (_DWORD)v41);
            v47 = v45 - v41;
            v48 = (v45 >> 31) + 0x7FFFFFFF;
            if (!v29)
              v48 = v47;
            *(_DWORD *)(v16 + 24) = v46;
            *(_DWORD *)(v16 + 28) = v48;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::flipForWritingMode(uint64_t this, WebCore::LayoutRect *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v2 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (!v3 && v4 != 0)
  {
    if ((*(_BYTE *)(this + 21) & 0x10) != 0)
    {
      v14 = *(_DWORD *)(this + 160);
      v15 = *((_DWORD *)a2 + 2);
      v9 = __OFADD__(*(_DWORD *)a2, v15);
      v16 = *(_DWORD *)a2 + v15;
      v17 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v17 = v16;
      v9 = __OFSUB__(v14, v17);
      v18 = v14 - v17;
      v19 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v19 = v18;
      *(_DWORD *)a2 = v19;
    }
    else
    {
      v6 = *(_DWORD *)(this + 164);
      v7 = *((_DWORD *)a2 + 1);
      v8 = *((_DWORD *)a2 + 3);
      v9 = __OFADD__(v7, v8);
      v10 = v7 + v8;
      v11 = (v7 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v11 = v10;
      v9 = __OFSUB__(v6, v11);
      v12 = v6 - v11;
      v13 = (v6 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v13 = v12;
      *((_DWORD *)a2 + 1) = v13;
    }
  }
  return this;
}

uint64_t WebCore::RenderBlock::blockSelectionGap(uint64_t *a1, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned int a6, signed int a7, int a8, unsigned int a9, uint64_t *a10, uint64_t a11)
{
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  signed int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  void *v53;
  WTF *v54;
  void *v55;
  int v56;
  _BOOL4 v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  _DWORD v66[4];
  _QWORD v67[2];

  if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
    a5 = a4;
  v13 = __OFADD__(a5, a9);
  v14 = a5 + a9;
  v15 = (a5 >> 31) + 0x7FFFFFFF;
  if (!v13)
    v15 = v14;
  v13 = __OFSUB__(v15, a6);
  v16 = v15 - a6;
  v17 = (v15 >> 31) + 0x7FFFFFFF;
  if (v13)
    v18 = v17;
  else
    v18 = v16;
  if (v18 < 1)
    return 0;
  v24 = WebCore::RenderBlock::logicalLeftSelectionOffset(a1, a2, a9, a10);
  if (v24 > a7)
    a7 = v24;
  v25 = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a1, (WebCore::RenderBox *)a2, a9, (uint64_t)a10);
  if (v25 >= a8)
    v26 = a8;
  else
    v26 = v25;
  v13 = __OFSUB__(v26, a7);
  v27 = v26 - a7;
  v28 = (v26 >> 31) + 0x7FFFFFFF;
  if (v13)
    v27 = v28;
  if (v27 < 1)
    return 0;
  v29 = *(_DWORD *)(a2 + 20);
  if ((v29 & 0x1000) != 0)
    v30 = v18;
  else
    v30 = v27;
  if ((v29 & 0x1000) != 0)
    v31 = v27;
  else
    v31 = v18;
  if ((v29 & 0x1000) != 0)
    v32 = a6;
  else
    v32 = a7;
  if ((v29 & 0x1000) != 0)
    v33 = a7;
  else
    v33 = a6;
  v34 = v30 | (v31 << 32);
  v35 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if (v35 <= 5 && ((1 << v35) & 0x2A) != 0)
  {
    v56 = a6 + v18;
    v57 = __OFADD__(a6, v18);
    if ((v29 & 0x1000) != 0)
    {
      v60 = *(_DWORD *)(a2 + 160);
      if (v57)
        v56 = (a6 >> 31) + 0x7FFFFFFF;
      v13 = __OFSUB__(v60, v56);
      v61 = v60 - v56;
      v32 = (v60 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v32 = v61;
      v33 = a7;
    }
    else
    {
      v58 = *(_DWORD *)(a2 + 164);
      if (v57)
        v56 = (a6 >> 31) + 0x7FFFFFFF;
      v13 = __OFSUB__(v58, v56);
      v33 = v58 - v56;
      v59 = (v58 >> 31) + 0x7FFFFFFF;
      if (v13)
        v33 = v59;
      v32 = a7;
    }
  }
  v36 = a3[1];
  v13 = __OFADD__(v32, *a3);
  v37 = v32 + *a3;
  LODWORD(v38) = (v32 >> 31) + 0x7FFFFFFF;
  if (v13)
    v38 = v38;
  else
    v38 = v37;
  v13 = __OFADD__(v33, v36);
  v39 = v33 + v36;
  LODWORD(v40) = (v33 >> 31) + 0x7FFFFFFF;
  if (v13)
    v40 = v40;
  else
    v40 = v39;
  result = v38 | (v40 << 32);
  v67[0] = result;
  v67[1] = v34;
  if (a11)
  {
    v42 = *(_QWORD *)(a11 + 80);
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 528);
    v44 = 1.0;
    if (v43)
    {
      v45 = *(_QWORD *)(v43 + 8);
      if (v45)
      {
        v46 = *(_QWORD *)(v45 + 24);
        if (v46)
        {
          v47 = *(float **)(v46 + 8);
          if (v47)
          {
            v48 = (*(_DWORD *)v47)++;
            v44 = v47[91];
            if (v48)
            {
              *(_DWORD *)v47 = v48;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v47);
              WTF::fastFree(v54, v55);
            }
          }
        }
      }
    }
    v66[0] = WebCore::snapRectToDevicePixels((int *)v67, v44);
    v66[1] = v49;
    v66[2] = v50;
    v66[3] = v51;
    v52 = WebCore::RenderElement::selectionBackgroundColor((WebCore::RenderElement *)a1, &v65);
    (*(void (**)(uint64_t, _DWORD *, unint64_t *, double))(*(_QWORD *)v42 + 224))(v42, v66, &v65, v52);
    if ((v65 & 0x8000000000000) != 0)
    {
      v62 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (!v64)
      {
        atomic_store(1u, v62);
        WTF::fastFree((WTF *)v62, v53);
      }
    }
    return v67[0];
  }
  return result;
}

double WebCore::RenderBlock::inlineSelectionGaps@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t WebCore::RenderBlock::logicalLeftSelectionGap(uint64_t *a1, uint64_t a2, _DWORD *a3, unsigned int *a4, WebCore::RenderElement *a5, int a6, unsigned int a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  int v19;
  signed int v21;
  BOOL v22;
  unsigned int v23;
  _BOOL4 v24;
  int v25;
  unsigned int v26;
  signed int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  double v63;
  void *v64;
  WTF *v65;
  void *v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v78;
  uint64_t v79;
  _BOOL4 v81;
  unint64_t v83;
  _DWORD v84[4];
  _QWORD v85[2];

  v15 = a4 + 1;
  if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
    v16 = a4;
  else
    v16 = a4 + 1;
  v17 = *v16;
  v22 = __OFADD__(v17, a7);
  v18 = v17 + a7;
  v19 = (v17 >> 31) + 0x7FFFFFFF;
  if (!v22)
    v19 = v18;
  v78 = v19;
  v21 = WebCore::RenderBlock::logicalLeftSelectionOffset(a1, a2, a7, a9);
  v79 = a8;
  v22 = __OFADD__(a7, (_DWORD)a8);
  v23 = a7 + a8;
  v24 = __OFADD__(a7, (_DWORD)a8);
  v81 = v24;
  v25 = (a7 >> 31) + 0x7FFFFFFF;
  if (v22)
    v26 = (a7 >> 31) + 0x7FFFFFFF;
  else
    v26 = v23;
  v27 = WebCore::RenderBlock::logicalLeftSelectionOffset(a1, a2, v26, a9);
  if (v21 <= v27)
    v28 = v27;
  else
    v28 = v21;
  if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
    v29 = v15;
  else
    v29 = a4;
  v30 = *v29;
  v22 = __OFADD__(v30, a6);
  v31 = v30 + a6;
  v32 = (v30 >> 31) + 0x7FFFFFFF;
  if (v22)
    v33 = v32;
  else
    v33 = v31;
  v34 = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a1, (WebCore::RenderBox *)a2, a7, (uint64_t)a9);
  if (v81)
    v35 = v25;
  else
    v35 = v23;
  v36 = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a1, (WebCore::RenderBox *)a2, v35, (uint64_t)a9);
  if (v36 >= v34)
    v37 = v34;
  else
    v37 = v36;
  if (v37 >= v33)
    v37 = v33;
  v22 = __OFSUB__(v37, v28);
  LODWORD(v38) = v37 - v28;
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (v22)
    v38 = v39;
  else
    v38 = v38;
  if ((int)v38 < 1)
    return 0;
  v40 = *(_DWORD *)(a2 + 20);
  v41 = v79;
  if ((v40 & 0x1000) != 0)
  {
    v41 = v38;
    v42 = v79;
  }
  else
  {
    v42 = v38;
  }
  v43 = v78;
  if ((v40 & 0x1000) != 0)
    v44 = v28;
  else
    v44 = v78;
  if ((v40 & 0x1000) == 0)
    v43 = v28;
  v45 = v42 | (v41 << 32);
  v46 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
  if (v46 <= 5 && ((1 << v46) & 0x2A) != 0)
  {
    if ((v40 & 0x1000) != 0)
    {
      v70 = *(_DWORD *)(a2 + 160);
      v22 = __OFADD__(v43, (_DWORD)v42);
      v71 = v43 + v42;
      v72 = (v43 >> 31) + 0x7FFFFFFF;
      if (!v22)
        v72 = v71;
      v22 = __OFSUB__(v70, v72);
      v43 = v70 - v72;
      v73 = (v70 >> 31) + 0x7FFFFFFF;
      if (v22)
        v43 = v73;
    }
    else
    {
      v67 = *(_DWORD *)(a2 + 164);
      v22 = __OFADD__(v44, (_DWORD)v41);
      v68 = v44 + v41;
      v69 = (v44 >> 31) + 0x7FFFFFFF;
      if (!v22)
        v69 = v68;
      v22 = __OFSUB__(v67, v69);
      v44 = v67 - v69;
      if (v22)
        v44 = (v67 >> 31) + 0x7FFFFFFF;
    }
  }
  v47 = a3[1];
  v22 = __OFADD__(v43, *a3);
  v48 = v43 + *a3;
  LODWORD(v49) = (v43 >> 31) + 0x7FFFFFFF;
  if (v22)
    v49 = v49;
  else
    v49 = v48;
  v22 = __OFADD__(v44, v47);
  v50 = v44 + v47;
  LODWORD(v51) = (v44 >> 31) + 0x7FFFFFFF;
  if (v22)
    v51 = v51;
  else
    v51 = v50;
  result = v49 | (v51 << 32);
  v85[0] = result;
  v85[1] = v45;
  if (a10)
  {
    v53 = *(_QWORD *)(a10 + 80);
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 528);
    v55 = 1.0;
    if (v54)
    {
      v56 = *(_QWORD *)(v54 + 8);
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 24);
        if (v57)
        {
          v58 = *(float **)(v57 + 8);
          if (v58)
          {
            v59 = (*(_DWORD *)v58)++;
            v55 = v58[91];
            if (v59)
            {
              *(_DWORD *)v58 = v59;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v58);
              WTF::fastFree(v65, v66);
            }
          }
        }
      }
    }
    v84[0] = WebCore::snapRectToDevicePixels((int *)v85, v55);
    v84[1] = v60;
    v84[2] = v61;
    v84[3] = v62;
    v63 = WebCore::RenderElement::selectionBackgroundColor(a5, &v83);
    (*(void (**)(uint64_t, _DWORD *, unint64_t *, double))(*(_QWORD *)v53 + 224))(v53, v84, &v83, v63);
    if ((v83 & 0x8000000000000) != 0)
    {
      v74 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v74);
        WTF::fastFree((WTF *)v74, v64);
      }
    }
    return v85[0];
  }
  return result;
}

uint64_t WebCore::RenderBlock::logicalRightSelectionGap(uint64_t *a1, WebCore::RenderBox *a2, _DWORD *a3, unsigned int a4, unsigned int a5, WebCore::RenderElement *a6, int a7, unsigned int a8, uint64_t a9, uint64_t *a10, uint64_t a11)
{
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  signed int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  unsigned int v28;
  signed int v29;
  signed int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double v61;
  void *v62;
  WTF *v63;
  void *v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v76;
  unint64_t v78;
  _DWORD v79[4];
  _QWORD v80[2];

  v14 = *((_DWORD *)a2 + 5);
  if ((v14 & 0x1000) != 0)
    v15 = a4;
  else
    v15 = a5;
  v16 = __OFADD__(v15, a8);
  v17 = v15 + a8;
  v18 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v16)
    v18 = v17;
  v76 = v18;
  if ((v14 & 0x1000) != 0)
    v19 = a5;
  else
    v19 = a4;
  v16 = __OFADD__(v19, a7);
  v20 = v19 + a7;
  v21 = (v19 >> 31) + 0x7FFFFFFF;
  if (v16)
    v22 = v21;
  else
    v22 = v20;
  v24 = WebCore::RenderBlock::logicalLeftSelectionOffset(a1, (uint64_t)a2, a8, a10);
  v25 = a8 + a9;
  v26 = __OFADD__(a8, (_DWORD)a9);
  v27 = (a8 >> 31) + 0x7FFFFFFF;
  if (__OFADD__(a8, (_DWORD)a9))
    v28 = (a8 >> 31) + 0x7FFFFFFF;
  else
    v28 = a8 + a9;
  v29 = WebCore::RenderBlock::logicalLeftSelectionOffset(a1, (uint64_t)a2, v28, a10);
  if (v24 <= v29)
    v30 = v29;
  else
    v30 = v24;
  if (v22 <= v30)
    v31 = v30;
  else
    v31 = v22;
  v32 = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a1, a2, a8, (uint64_t)a10);
  if (v26)
    v33 = v27;
  else
    v33 = v25;
  v34 = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)a1, a2, v33, (uint64_t)a10);
  if (v34 >= v32)
    v35 = v32;
  else
    v35 = v34;
  v16 = __OFSUB__(v35, v31);
  LODWORD(v36) = v35 - v31;
  v37 = (v35 >> 31) + 0x7FFFFFFF;
  if (v16)
    v36 = v37;
  else
    v36 = v36;
  if ((int)v36 < 1)
    return 0;
  v38 = *((_DWORD *)a2 + 5);
  v39 = a9;
  if ((v38 & 0x1000) != 0)
  {
    v39 = v36;
    v40 = a9;
  }
  else
  {
    v40 = v36;
  }
  v41 = v76;
  if ((v38 & 0x1000) != 0)
    v42 = v31;
  else
    v42 = v76;
  if ((v38 & 0x1000) == 0)
    v41 = v31;
  v43 = v40 | (v39 << 32);
  v44 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
  if (v44 <= 5 && ((1 << v44) & 0x2A) != 0)
  {
    if ((v38 & 0x1000) != 0)
    {
      v68 = *((_DWORD *)a2 + 40);
      v16 = __OFADD__(v41, (_DWORD)v40);
      v69 = v41 + v40;
      v70 = (v41 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v70 = v69;
      v16 = __OFSUB__(v68, v70);
      v41 = v68 - v70;
      v71 = (v68 >> 31) + 0x7FFFFFFF;
      if (v16)
        v41 = v71;
    }
    else
    {
      v65 = *((_DWORD *)a2 + 41);
      v16 = __OFADD__(v42, (_DWORD)v39);
      v66 = v42 + v39;
      v67 = (v42 >> 31) + 0x7FFFFFFF;
      if (!v16)
        v67 = v66;
      v16 = __OFSUB__(v65, v67);
      v42 = v65 - v67;
      if (v16)
        v42 = (v65 >> 31) + 0x7FFFFFFF;
    }
  }
  v45 = a3[1];
  v16 = __OFADD__(v41, *a3);
  v46 = v41 + *a3;
  LODWORD(v47) = (v41 >> 31) + 0x7FFFFFFF;
  if (v16)
    v47 = v47;
  else
    v47 = v46;
  v16 = __OFADD__(v42, v45);
  v48 = v42 + v45;
  LODWORD(v49) = (v42 >> 31) + 0x7FFFFFFF;
  if (v16)
    v49 = v49;
  else
    v49 = v48;
  result = v47 | (v49 << 32);
  v80[0] = result;
  v80[1] = v43;
  if (a11)
  {
    v51 = *(_QWORD *)(a11 + 80);
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 528);
    v53 = 1.0;
    if (v52)
    {
      v54 = *(_QWORD *)(v52 + 8);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 24);
        if (v55)
        {
          v56 = *(float **)(v55 + 8);
          if (v56)
          {
            v57 = (*(_DWORD *)v56)++;
            v53 = v56[91];
            if (v57)
            {
              *(_DWORD *)v56 = v57;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v56);
              WTF::fastFree(v63, v64);
            }
          }
        }
      }
    }
    v79[0] = WebCore::snapRectToDevicePixels((int *)v80, v53);
    v79[1] = v58;
    v79[2] = v59;
    v79[3] = v60;
    v61 = WebCore::RenderElement::selectionBackgroundColor(a6, &v78);
    (*(void (**)(uint64_t, _DWORD *, unint64_t *, double))(*(_QWORD *)v51 + 224))(v51, v79, &v78, v61);
    if ((v78 & 0x8000000000000) != 0)
    {
      v72 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFLL);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        atomic_store(1u, v72);
        WTF::fastFree((WTF *)v72, v62);
      }
    }
    return v80[0];
  }
  return result;
}

uint64_t WebCore::RenderBlock::logicalLeftOffsetForContent(WebCore::RenderBlock *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;

  v2 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v3 = (*(uint64_t (**)(WebCore::RenderBlock *))(v2 + 1000))(this);
    v4 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 928))(this);
  }
  else
  {
    v3 = (*(uint64_t (**)(WebCore::RenderBlock *))(v2 + 1016))(this);
    v4 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 944))(this);
  }
  if (__OFADD__(v3, v4))
    return (v3 >> 31) + 0x7FFFFFFF;
  else
    return v3 + v4;
}

uint64_t WebCore::RenderBlock::logicalRightOffsetForLine(WebCore::RenderBox *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v16 = a2;
    v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    if (!v10
      || (v12 = v10, (*(_BYTE *)(v10 + 328) & 1) != 0)
      || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v10 + 248), v11) & 1) != 0)
    {
      v5 = 0;
      a2 = v16;
    }
    else
    {
      v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1288))(a1);
      if (__OFADD__(v13, v16))
        v14 = (v13 >> 31) + 0x7FFFFFFF;
      else
        v14 = v13 + v16;
      v15 = (*(uint64_t (**)(uint64_t, WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v12 + 2000))(v12, a1, v14, 1);
      a2 = v16;
      v5 = v15;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = a2;
  v7 = WebCore::RenderBlock::logicalRightOffsetForContent(a1, v5);
  v8 = (void *)(*(unsigned int (**)(WebCore::RenderBox *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1816))(a1, v6, v7, a3);
  return WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)a1, v8);
}

void WebCore::PositionedDescendantsMap::addDescendant(WebCore::PositionedDescendantsMap *this, const WebCore::RenderBlock *a2, WebCore::RenderBox *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  WTF *v17;
  const WebCore::RenderBlock *v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;
  WTF **v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int j;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int k;
  unsigned int v54;
  _QWORD **v55;
  _QWORD *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  WTF *v104;
  WTF *v105;
  unsigned int v106;
  WTF *v107;
  WTF *v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  WebCore::RenderBox *v118;
  uint64_t v119;
  WTF *v120;
  WTF *v121;
  int v122;
  uint64_t v123;
  _QWORD *v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF *v130[2];
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE v136[24];

  v6 = (uint64_t *)((char *)this + 16);
  ++*((_DWORD *)this + 6);
  v7 = *((_QWORD *)a3 + 1);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = *(_QWORD *)(v8 + 16 * v13);
          if (!v15)
            break;
          if (v15 != -1 && v15 == v7)
          {
            v17 = *(WTF **)(v8 + 16 * v13 + 8);
            if (!v17)
              goto LABEL_70;
            ++*(_DWORD *)v17;
            v18 = (const WebCore::RenderBlock *)*((_QWORD *)v17 + 1);
            if (v18)
              v19 = v18 == a2;
            else
              v19 = 1;
            if (!v19)
            {
              v123 = WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::get((uint64_t *)this, *((_QWORD *)v18 + 1));
              if (v123)
                WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderBox>(v123, (uint64_t)a3);
            }
            v20 = 0;
            goto LABEL_18;
          }
          v13 = (v13 + i) & v9;
        }
      }
    }
  }
  v17 = 0;
LABEL_70:
  v20 = 1;
LABEL_18:
  v21 = *((_DWORD *)this + 2);
  v22 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 2) = v21 + 1;
  if (v21 > v22)
    WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((WTF **)this, a2);
  v23 = *((_QWORD *)a2 + 1);
  if (!v23)
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    *(_QWORD *)(v23 + 8) = a2;
    v104 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v23;
    if (v104)
    {
      if (*(_DWORD *)v104 == 1)
      {
        WTF::fastFree(v104, a2);
        v23 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v104;
      }
    }
  }
  v24 = *(_DWORD *)v23;
  *(_DWORD *)v23 += 2;
  v25 = __CFADD__(v24, 1);
  v26 = v24 + 1;
  if (v25)
    WTF::fastFree((WTF *)v23, a2);
  else
    *(_DWORD *)v23 = v26;
  v27 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)this),
        (v27 = *(_QWORD *)this) != 0))
  {
    v28 = 0;
    v29 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v29 = 0;
    v28 = 1;
  }
  v30 = 0;
  v31 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
  v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  v34 = (v33 >> 31) ^ v33;
  for (j = 1; ; ++j)
  {
    v36 = v34 & v29;
    v37 = (_QWORD *)(v27 + 16 * v36);
    v38 = *v37;
    if (!*v37)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(*(_QWORD *)this - 16);
        *v30 = (WTF *)v23;
      }
      else
      {
        *v37 = v23;
        v30 = (WTF **)(v27 + 16 * v36);
      }
      v95 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v95 = 0u;
      *((_OWORD *)v95 + 1) = 0u;
      v96 = v30[1];
      v30[1] = v95;
      if (v96)
      {
        v97 = (WTF *)*((_QWORD *)v96 + 1);
        while (v97)
        {
          v127 = v97;
          v97 = (WTF *)*((_QWORD *)v97 + 2);
          v128 = *(WTF **)v127;
          *(_QWORD *)v127 = 0;
          if (v128)
          {
            if (*(_DWORD *)v128 == 1)
              WTF::fastFree(v128, a2);
            else
              --*(_DWORD *)v128;
          }
          WTF::fastFree(v127, a2);
        }
        if (*(_QWORD *)v96)
          WTF::fastFree((WTF *)(*(_QWORD *)v96 - 16), a2);
        WTF::fastFree(v96, a2);
      }
      v98 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v99 = *(_DWORD *)(v98 - 12) + 1;
      else
        v99 = 1;
      *(_DWORD *)(v98 - 12) = v99;
      v100 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v101 = *(_DWORD *)(v100 - 12);
      else
        v101 = 0;
      v102 = (*(_DWORD *)(v100 - 16) + v101);
      v103 = *(unsigned int *)(v100 - 4);
      if (v103 > 0x400)
      {
        if (v103 > 2 * v102)
          goto LABEL_119;
      }
      else
      {
        if (3 * v103 > 4 * v102)
        {
LABEL_119:
          v40 = (_QWORD *)(v100 + 16 * v103);
          v37 = v30;
          goto LABEL_34;
        }
        if (!(_DWORD)v103)
        {
          v109 = 8;
          goto LABEL_161;
        }
      }
      v109 = (_DWORD)v103 << (6 * *(_DWORD *)(v100 - 12) >= (2 * v103));
LABEL_161:
      v30 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)this, v109, v30);
      v100 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v103 = *(unsigned int *)(v100 - 4);
      else
        v103 = 0;
      goto LABEL_119;
    }
    if (v38 != -1)
      break;
    v30 = (WTF **)(v27 + 16 * v36);
LABEL_29:
    v34 = j + v36;
  }
  if (v38 != v23)
    goto LABEL_29;
  if ((v28 & 1) != 0)
    v39 = 0;
  else
    v39 = *(unsigned int *)(v27 - 4);
  v40 = (_QWORD *)(v27 + 16 * v39);
  if (*(_DWORD *)v23 == 1)
    WTF::fastFree((WTF *)v23, a2);
  else
    --*(_DWORD *)v23;
LABEL_34:
  v41 = *(_QWORD **)this;
  if (*(_QWORD *)this)
    v41 += 2 * *((unsigned int *)v41 - 1);
  if (v37 != v41)
  {
    while (!*(_QWORD *)(*v37 + 8))
    {
      v124 = v37 + 2;
      v37 = v40;
      if (v124 != v40)
      {
        v37 = v124;
        while ((unint64_t)(*v37 + 1) <= 1)
        {
          v37 += 2;
          if (v37 == v40)
          {
            v37 = v40;
            break;
          }
        }
      }
      if (v37 == v41)
      {
        v37 = v41;
        break;
      }
    }
  }
  v42 = v37[1];
  if (*((_BYTE *)a2 + 46) == 49)
  {
    v110 = *(_QWORD *)v42;
    if (*(_QWORD *)v42)
    {
      if (*(_DWORD *)(v110 - 12))
      {
        v112 = (_QWORD *)(v42 + 8);
        v111 = *(_QWORD *)(v42 + 8);
        if (v111)
        {
          v114 = *(_QWORD **)(v42 + 8);
          do
          {
            if (*(_QWORD *)(*v114 + 8))
            {
              if ((*((_DWORD *)a3 + 5) & 0x1800000) != 0x1000000)
                goto LABEL_180;
              v118 = a3;
              if ((*((_BYTE *)a3 + 45) & 2) != 0)
                v118 = *(WebCore::RenderBox **)(*((_QWORD *)a3 + 4) + 8);
              if ((*((_QWORD *)v118 + 12) & 0x380000) != 0x300000)
              {
LABEL_180:
                if ((*((_BYTE *)a3 + 45) & 1) != 0)
                  goto LABEL_247;
                v115 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
                if (!v115)
                  goto LABEL_247;
                if ((*(_WORD *)(v115 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196373D40);
                }
                if ((*(_BYTE *)(v115 + 23) & 0x20) == 0)
                {
LABEL_247:
                  if ((*((_QWORD *)a3 + 12) & 0xF80000000000) != 0x480000000000)
                  {
                    v116 = *(_QWORD **)(v42 + 8);
                    while (1)
                    {
                      v117 = *(_QWORD *)(*v116 + 8);
                      if (v117)
                        break;
                      v116 = (_QWORD *)v116[2];
                      if (!v116)
                        goto LABEL_196;
                    }
LABEL_183:
                    if ((*(_DWORD *)(v117 + 20) & 0x1800000) == 0x1000000)
                    {
                      if ((*(_BYTE *)(v117 + 45) & 2) != 0)
                        v117 = *(_QWORD *)(*(_QWORD *)(v117 + 32) + 8);
                      if ((*(_QWORD *)(v117 + 96) & 0x380000) == 0x300000)
                      {
                        v130[0] = (WTF *)v42;
                        v130[1] = (WTF *)v42;
                        v131 = v116;
                        v132 = v42;
                        v133 = v111;
                        v134 = v42;
                        v135 = 0;
                        WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::insertBefore<WebCore::RenderBox>((uint64_t)v136, v42, (uint64_t)v130, (uint64_t)a3);
                        v57 = v136[16];
                        goto LABEL_52;
                      }
                    }
                    while (1)
                    {
                      v116 = (_QWORD *)v116[2];
                      if (!v116)
                        break;
                      v117 = *(_QWORD *)(*v116 + 8);
                      if (v117)
                      {
                        ++*(_DWORD *)(v42 + 24);
                        goto LABEL_183;
                      }
                    }
                    ++*(_DWORD *)(v42 + 24);
                  }
                }
              }
LABEL_196:
              WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::appendOrMoveToLast<WebCore::RenderBox>((uint64_t)v130, (_QWORD *)v42, (uint64_t)a3);
              v57 = v131;
              goto LABEL_52;
            }
            v114 = (_QWORD *)v114[2];
          }
          while (v114);
          v129 = *(WTF **)(v42 + 8);
          do
          {
            v125 = v129;
            v129 = (WTF *)*((_QWORD *)v129 + 2);
            v126 = *(WTF **)v125;
            *(_QWORD *)v125 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 1)
                WTF::fastFree(v126, a2);
              else
                --*(_DWORD *)v126;
            }
            WTF::fastFree(v125, a2);
          }
          while (v129);
          v110 = *(_QWORD *)v42;
          if (!*(_QWORD *)v42)
          {
            LODWORD(v113) = 0;
            *v112 = 0;
            *(_QWORD *)(v42 + 16) = 0;
            *(_DWORD *)(v42 + 24) = 0;
            goto LABEL_169;
          }
        }
        *(_QWORD *)v42 = 0;
        WTF::fastFree((WTF *)(v110 - 16), a2);
        v113 = *(_QWORD *)v42;
        *v112 = 0;
        *(_QWORD *)(v42 + 16) = 0;
        *(_DWORD *)(v42 + 24) = 0;
        if (v113)
        {
          LODWORD(v113) = *(_DWORD *)(v113 - 12);
          if (v113 > 0x7FFFFFFE)
            LODWORD(v113) = 0x7FFFFFFF;
        }
LABEL_169:
        *(_DWORD *)(v42 + 28) = 2 * v113;
        v42 = v37[1];
      }
    }
  }
  v43 = *(_DWORD *)(v42 + 28);
  v44 = *(_DWORD *)(v42 + 24) + 1;
  *(_DWORD *)(v42 + 24) = v44;
  if (v44 > v43)
  {
    v67 = *(WTF **)(v42 + 8);
    if (v67)
    {
      do
      {
        v68 = (WTF *)*((_QWORD *)v67 + 2);
        if (!*(_QWORD *)(*(_QWORD *)v67 + 8))
          WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)v42, (void *)v42, v67);
        v67 = v68;
      }
      while (v68);
    }
    *(_DWORD *)(v42 + 24) = 0;
    v69 = *(_QWORD *)v42;
    if (*(_QWORD *)v42)
    {
      LODWORD(v69) = *(_DWORD *)(v69 - 12);
      if (v69 > 0x7FFFFFFE)
        LODWORD(v69) = 0x7FFFFFFF;
    }
    *(_DWORD *)(v42 + 28) = 2 * v69;
  }
  v45 = *((_QWORD *)a3 + 1);
  if (!v45)
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = a3;
    v105 = (WTF *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v45;
    if (v105)
    {
      if (*(_DWORD *)v105 == 1)
      {
        WTF::fastFree(v105, a2);
        v45 = *((_QWORD *)a3 + 1);
      }
      else
      {
        --*(_DWORD *)v105;
      }
    }
  }
  *(_DWORD *)v45 += 2;
  v46 = *(_QWORD *)v42;
  if (*(_QWORD *)v42
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash((uint64_t *)v42, 8u, 0), (v46 = *(_QWORD *)v42) != 0))
  {
    v47 = *(_DWORD *)(v46 - 8);
  }
  else
  {
    v47 = 0;
  }
  v48 = 0;
  v49 = (~(v45 << 32) + v45) ^ ((unint64_t)(~(v45 << 32) + v45) >> 22);
  v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
  v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
  v52 = (v51 >> 31) ^ v51;
  for (k = 1; ; ++k)
  {
    v54 = v52 & v47;
    v55 = (_QWORD **)(v46 + 8 * v54);
    v56 = *v55;
    if (!*v55)
      break;
    if (v56 != (_QWORD *)-1)
    {
      v55 = (_QWORD **)v48;
      if (*v56 == v45)
      {
        if (*(_DWORD *)v45 == 1)
        {
          WTF::fastFree((WTF *)v45, a2);
          v57 = 0;
        }
        else
        {
          v57 = 0;
          --*(_DWORD *)v45;
        }
        goto LABEL_50;
      }
    }
    v52 = k + v54;
    v48 = v55;
  }
  if (v48)
  {
    *v48 = 0;
    --*(_DWORD *)(*(_QWORD *)v42 - 16);
    v55 = (_QWORD **)v48;
  }
  v58 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v58[1] = 0;
  v58[2] = 0;
  *v58 = v45;
  *v55 = v58;
  v59 = *(_QWORD *)v42;
  if (*(_QWORD *)v42)
    v60 = *(_DWORD *)(v59 - 12) + 1;
  else
    v60 = 1;
  *(_DWORD *)(v59 - 12) = v60;
  v61 = *(_QWORD *)v42;
  if (*(_QWORD *)v42)
    v62 = *(_DWORD *)(v61 - 12);
  else
    v62 = 0;
  v63 = (*(_DWORD *)(v61 - 16) + v62);
  v64 = *(unsigned int *)(v61 - 4);
  if (v64 > 0x400)
  {
    if (v64 > 2 * v63)
      goto LABEL_65;
LABEL_136:
    v106 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
    goto LABEL_153;
  }
  if (3 * v64 > 4 * v63)
    goto LABEL_65;
  if ((_DWORD)v64)
    goto LABEL_136;
  v106 = 8;
LABEL_153:
  v58 = (_QWORD *)*WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash((uint64_t *)v42, v106, v55);
LABEL_65:
  v65 = *(_QWORD *)(v42 + 16);
  v58[1] = v65;
  v58[2] = 0;
  if (v65)
    v66 = (_QWORD *)(v65 + 16);
  else
    v66 = (_QWORD *)(v42 + 8);
  *v66 = v58;
  *(_QWORD *)(v42 + 16) = v58;
  v57 = 1;
LABEL_50:
  if (*(_DWORD *)v45 == 1)
    WTF::fastFree((WTF *)v45, a2);
  else
    --*(_DWORD *)v45;
LABEL_52:
  if (!v57)
    goto LABEL_53;
  v70 = *((_DWORD *)this + 6);
  v71 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v70 + 1;
  if (v70 > v71)
    WTF::WeakHashMap<WebCore::RenderBox const,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v6, a2);
  v72 = *((_QWORD *)a3 + 1);
  if (!v72)
  {
    v72 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v72 = 1;
    *(_QWORD *)(v72 + 8) = a3;
    v107 = (WTF *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v72;
    if (v107)
    {
      if (*(_DWORD *)v107 == 1)
      {
        WTF::fastFree(v107, a2);
        v72 = *((_QWORD *)a3 + 1);
      }
      else
      {
        --*(_DWORD *)v107;
      }
    }
  }
  v73 = *(_DWORD *)v72;
  *(_DWORD *)v72 += 2;
  v25 = __CFADD__(v73, 1);
  v74 = v73 + 1;
  if (v25)
    WTF::fastFree((WTF *)v72, a2);
  else
    *(_DWORD *)v72 = v74;
  v75 = *v6;
  if (*v6
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(v6),
        (v75 = *v6) != 0))
  {
    v76 = *(_DWORD *)(v75 - 8);
  }
  else
  {
    v76 = 0;
  }
  v77 = 0;
  v78 = (~(v72 << 32) + v72) ^ ((unint64_t)(~(v72 << 32) + v72) >> 22);
  v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
  v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
  v81 = (v80 >> 31) ^ v80;
  v82 = 1;
  while (2)
  {
    v83 = v81 & v76;
    v84 = (uint64_t *)(v75 + 16 * v83);
    v85 = *v84;
    if (!*v84)
    {
      if (v77)
      {
        *v77 = 0;
        v77[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        *v77 = v72;
      }
      else
      {
        *v84 = v72;
        v77 = (uint64_t *)(v75 + 16 * v83);
      }
      v86 = *((_QWORD *)a2 + 1);
      if (!v86)
      {
        v86 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v86 = 1;
        *(_QWORD *)(v86 + 8) = a2;
        v108 = (WTF *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v86;
        if (v108)
        {
          if (*(_DWORD *)v108 == 1)
          {
            WTF::fastFree(v108, a2);
            v86 = *((_QWORD *)a2 + 1);
            if (!v86)
            {
LABEL_95:
              v87 = (WTF *)v77[1];
              v77[1] = v86;
              if (v87)
              {
                if (*(_DWORD *)v87 == 1)
                  WTF::fastFree(v87, a2);
                else
                  --*(_DWORD *)v87;
              }
              v88 = *v6;
              if (*v6)
                v89 = *(_DWORD *)(v88 - 12) + 1;
              else
                v89 = 1;
              *(_DWORD *)(v88 - 12) = v89;
              v90 = *v6;
              if (*v6)
                v91 = *(_DWORD *)(v90 - 12);
              else
                v91 = 0;
              v92 = (*(_DWORD *)(v90 - 16) + v91);
              v93 = *(unsigned int *)(v90 - 4);
              if (v93 > 0x400)
              {
                if (v93 > 2 * v92)
                  goto LABEL_53;
              }
              else
              {
                if (3 * v93 > 4 * v92)
                  goto LABEL_53;
                if (!(_DWORD)v93)
                {
                  v94 = 8;
LABEL_139:
                  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v6, v94);
                  goto LABEL_53;
                }
              }
              v94 = (_DWORD)v93 << (6 * *(_DWORD *)(v90 - 12) >= (2 * v93));
              goto LABEL_139;
            }
          }
          else
          {
            --*(_DWORD *)v108;
          }
        }
      }
      ++*(_DWORD *)v86;
      goto LABEL_95;
    }
    if (v85 == -1 || (v84 = v77, v85 != v72))
    {
      v81 = v82 + v83;
      ++v82;
      v77 = v84;
      continue;
    }
    break;
  }
  WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v130, (uint64_t)a2);
  v119 = v75 + 16 * v83;
  v120 = v130[0];
  v130[0] = 0;
  v121 = *(WTF **)(v119 + 8);
  *(_QWORD *)(v119 + 8) = v120;
  if (v121)
  {
    v122 = *(_DWORD *)v121 - 1;
    if (*(_DWORD *)v121 != 1)
      goto LABEL_208;
    WTF::fastFree(v121, a2);
    v121 = v130[0];
    v130[0] = 0;
    if (v121)
    {
      v122 = *(_DWORD *)v121 - 1;
      if (*(_DWORD *)v121 == 1)
        WTF::fastFree(v121, a2);
      else
LABEL_208:
        *(_DWORD *)v121 = v122;
    }
  }
  if (*(_DWORD *)v72 == 1)
    WTF::fastFree((WTF *)v72, a2);
  else
    --*(_DWORD *)v72;
LABEL_53:
  if ((v20 & 1) == 0)
  {
    if (*(_DWORD *)v17 == 1)
      WTF::fastFree(v17, a2);
    else
      --*(_DWORD *)v17;
  }
}

uint64_t WTF::Vector<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t result;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    for (i = 8 * v3; i; i -= 8)
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = *(_DWORD *)(v6 + 16);
        if (!v7)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v6 + 16) = v7 - 1;
      }
      v4 = (WTF *)((char *)v4 + 8);
    }
  }
  v8 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v8 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v8, a2);
  }
  return a1;
}

uint64_t WebCore::RenderBlock::percentHeightDescendants(WebCore::RenderBlock *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  v1 = (uint64_t *)WebCore::percentHeightDescendantsMap;
  if (WebCore::percentHeightDescendantsMap)
  {
    ++*(_DWORD *)(WebCore::percentHeightDescendantsMap + 8);
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8))
      {
        v3 = *v1;
        if (v3)
        {
          v4 = *(_DWORD *)(v3 - 8);
          v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
          v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
          v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
          v8 = v4 & ((v7 >> 31) ^ v7);
          for (i = 1; ; ++i)
          {
            v10 = *(_QWORD *)(v3 + 16 * v8);
            if (!v10)
              break;
            if (v10 != -1 && v10 == v2)
              return *(_QWORD *)(v3 + 16 * v8 + 8);
            v8 = (v8 + i) & v4;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RenderBlock::hasPercentHeightDescendant(uint64_t this, WebCore::RenderBox *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  v2 = (uint64_t *)WebCore::percentHeightContainerMap;
  ++*(_DWORD *)(WebCore::percentHeightContainerMap + 8);
  if (this)
  {
    if (*(_QWORD *)(this + 8))
    {
      v3 = *v2;
      if (v3)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 24 * v8);
          if (!v10)
            break;
          if (v10 != -1 && v10 == this)
            return 1;
          v8 = (v8 + i) & v4;
        }
      }
    }
    return 0;
  }
  return this;
}

uint64_t WebCore::RenderBlock::clearPercentHeightDescendantsFrom(uint64_t this, WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v2 = this;
    this = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (this)
    {
      while (1)
      {
        v3 = this;
        if ((*(_BYTE *)(this + 45) & 4) != 0)
        {
          ++*(_DWORD *)(this + 16);
          if (WebCore::RenderBlock::hasPercentHeightDescendant(*(_QWORD *)(this + 8), a2))
            WebCore::RenderBlock::removePercentHeightDescendant((WTF ***)v3, a2);
          v4 = *(_DWORD *)(v3 + 16);
          if (!v4)
          {
            this = 286;
            __break(0xC471u);
            return this;
          }
          *(_DWORD *)(v3 + 16) = v4 - 1;
        }
        this = (*(uint64_t (**)(uint64_t, WebCore::RenderBox *))(*(_QWORD *)v3 + 112))(v3, a2);
        if (!this)
        {
          if (v3 == v2)
            return this;
          while (1)
          {
            v5 = *(unsigned int *)(v3 + 47);
            if (v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
            {
              this = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
              if (this)
                break;
            }
            v6 = *(_QWORD *)(v3 + 32);
            if (v6)
            {
              v3 = *(_QWORD *)(v6 + 8);
              if (v3 && v3 != v2)
                continue;
            }
            return this;
          }
        }
      }
    }
  }
  return this;
}

BOOL WebCore::RenderBlock::isContainingBlockAncestorFor(WebCore::RenderBlock *this, WebCore::RenderObject *a2)
{
  WebCore::RenderObject *v3;
  _BOOL8 i;

  v3 = WebCore::RenderObject::containingBlock(a2);
  for (i = v3 != 0; v3 != this && v3; i = v3 != 0)
    v3 = WebCore::RenderObject::containingBlock(v3);
  return i;
}

uint64_t WebCore::RenderBlock::textIndentOffset(WebCore::RenderBlock *this)
{
  unsigned __int8 *v1;
  int v2;
  float v3;
  float v4;
  double v5;
  float v7;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 13);
  v2 = v1[180];
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v3 = (float)(int)WebCore::RenderBox::contentLogicalWidth(this) * 0.015625;
    v1 = (unsigned __int8 *)*((_QWORD *)this + 13);
    v2 = v1[180];
  }
  else
  {
    v3 = 0.0;
  }
  switch(v2)
  {
    case 4:
      v4 = *((float *)v1 + 44);
      if (!v1[182])
        v4 = (float)SLODWORD(v4);
      break;
    case 3:
      v7 = *((float *)v1 + 44);
      if (!v1[182])
        v7 = (float)SLODWORD(v7);
      v4 = (float)(v3 * v7) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 176), v3);
      break;
    default:
      return 0;
  }
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v5 <= -2147483650.0)
    return 0x80000000;
  return (int)v5;
}

uint64_t WebCore::RenderBlock::logicalRightOffsetForContent(WebCore::RenderBox *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(_QWORD *)a1;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBox *))(v4 + 1000))(a1);
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 928))(a1);
  }
  else
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBox *))(v4 + 1016))(a1);
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 944))(a1);
  }
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  v8 = WebCore::RenderBox::contentLogicalWidth(a1);
  if (__OFADD__(v7, v8))
    result = (v7 >> 31) + 0x7FFFFFFF;
  else
    result = v7 + v8;
  if (a2)
  {
    v10 = *((_QWORD *)a1 + 20);
    if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 <= 3)
      v11 = HIDWORD(v10);
    else
      v11 = *((_QWORD *)a1 + 20);
    if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
      LODWORD(v10) = HIDWORD(*((_QWORD *)a1 + 20));
    v12 = __OFSUB__((_DWORD)v11, (_DWORD)v10);
    v13 = v11 - v10;
    v14 = (v11 >> 31) + 0x7FFFFFFF;
    if (v12)
      v13 = v14;
    v12 = __OFSUB__((_DWORD)result, v13);
    v15 = result - v13;
    if (v12)
      return (result >> 31) + 0x7FFFFFFF;
    else
      return v15;
  }
  return result;
}

uint64_t WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  int v15;
  float v16;
  double v17;
  void *v18;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 234) & 0x20) != 0)
  {
    v18 = a2;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
    v4 = *(unsigned int *)(v3 + 508);
    if ((_DWORD)v4
      && (v5 = *(_QWORD *)(*(_QWORD *)(v3 + 496) + 8 * v4 - 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 24)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && ((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v7 + 124)) & 0xE000) == 0
      && (v8 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v7 + 112) + 32), a2),
          v9 = *(float *)(v8 + 80),
          v9 != 0.0))
    {
      v10 = *(_QWORD *)(v5 + 84);
      if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
      {
        v10 >>= 32;
        LODWORD(v11) = *(_DWORD *)(v5 + 60);
      }
      else
      {
        v11 = *(_QWORD *)(v5 + 56);
      }
      v12 = __OFADD__((_DWORD)v18, (_DWORD)v11);
      v13 = (_DWORD)v18 + v11;
      if (v12)
        v13 = (v18 >> 31) + 0x7FFFFFFF;
      v12 = __OFSUB__(v13, (_DWORD)v10);
      v14 = v13 - v10;
      v15 = (v13 >> 31) + 0x7FFFFFFF;
      if (v12)
        v14 = v15;
      v16 = fmodf((float)v14 * 0.015625, *(float *)(v8 + 80));
      v17 = (float)((float)((float)(int)v18 * 0.015625) + fmodf(v9 - v16, v9)) * 64.0;
      if (v17 >= 2147483650.0)
      {
        return 0x7FFFFFFFLL;
      }
      else if (v17 <= -2147483650.0)
      {
        return 0x80000000;
      }
      else
      {
        return (int)v17;
      }
    }
    else
    {
      return (uint64_t)v18;
    }
  }
  return (uint64_t)a2;
}

uint64_t WebCore::RenderBlock::adjustLogicalRightOffsetForLine(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  int v15;
  float v16;
  double v17;
  void *v18;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 234) & 0x20) != 0)
  {
    v18 = a2;
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
    v4 = *(unsigned int *)(v3 + 508);
    if ((_DWORD)v4
      && (v5 = *(_QWORD *)(*(_QWORD *)(v3 + 496) + 8 * v4 - 8)) != 0
      && (v6 = *(_QWORD *)(v5 + 24)) != 0
      && (v7 = *(_QWORD *)(v6 + 8)) != 0
      && ((*(_DWORD *)(a1 + 124) ^ *(_DWORD *)(v7 + 124)) & 0xE000) == 0
      && (v8 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v7 + 112) + 32), a2),
          v9 = *(float *)(v8 + 80),
          v9 != 0.0))
    {
      v10 = *(_QWORD *)(v5 + 84);
      if ((*(_BYTE *)(v7 + 21) & 0x10) != 0)
      {
        v10 >>= 32;
        LODWORD(v11) = *(_DWORD *)(v5 + 60);
      }
      else
      {
        v11 = *(_QWORD *)(v5 + 56);
      }
      v12 = __OFADD__((_DWORD)v18, (_DWORD)v11);
      v13 = (_DWORD)v18 + v11;
      if (v12)
        v13 = (v18 >> 31) + 0x7FFFFFFF;
      v12 = __OFSUB__(v13, (_DWORD)v10);
      v14 = v13 - v10;
      v15 = (v13 >> 31) + 0x7FFFFFFF;
      if (v12)
        v14 = v15;
      v16 = fmodf((float)v14 * 0.015625, *(float *)(v8 + 80));
      v17 = (float)((float)((float)(int)v18 * 0.015625) - ceilf(fmodf(v16, v9))) * 64.0;
      if (v17 >= 2147483650.0)
      {
        return 0x7FFFFFFFLL;
      }
      else if (v17 <= -2147483650.0)
      {
        return 0x80000000;
      }
      else
      {
        return (int)v17;
      }
    }
    else
    {
      return (uint64_t)v18;
    }
  }
  return (uint64_t)a2;
}

WebCore::RenderLayerScrollableArea *WebCore::RenderBlock::isPointInOverflowControl(WebCore::RenderBlock *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3, const WebCore::LayoutPoint *a4)
{
  uint64_t v4;
  WebCore::RenderLayerScrollableArea *result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  unint64_t v12;

  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  v4 = *((_QWORD *)this + 12);
  if (((v4 >> 10) & 7) - 3 >= 2 && ((unsigned __int16)v4 >> 13) - 3 > 1)
    return 0;
  v6 = *((_QWORD *)this + 18);
  if (!v6)
    return 0;
  result = *(WebCore::RenderLayerScrollableArea **)(v6 + 264);
  if (result)
  {
    v7 = *((_DWORD *)a4 + 1);
    v8 = *((_DWORD *)a3 + 1);
    v9 = *(_DWORD *)a3 - *(_DWORD *)a4;
    if (__OFSUB__(*(_DWORD *)a3, *(_DWORD *)a4))
      v9 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    v10 = __OFSUB__(v8, v7);
    v11 = v8 - v7;
    if (v10)
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    v12 = (((int)(v9 - (((v8 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v9 / 64) | ((unint64_t)(((int)(v11 - (((v8 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v11 / 64) << 32);
    return (WebCore::RenderLayerScrollableArea *)WebCore::RenderLayerScrollableArea::hitTestOverflowControls(result, a2, (const WebCore::IntPoint *)&v12);
  }
  return result;
}

uint64_t WebCore::RenderBlock::nodeForHitTest(WebCore::RenderBlock *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  WebCore::RenderElement *v14;
  int v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WebCore::RenderBlock *v22;
  WTF *v23;

  v2 = (*((_QWORD *)this + 12) >> 43) & 0x1FLL;
  if ((v2 - 12) < 3)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272);
  if ((_DWORD)v2 == 9
    && (v18 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3096)) != 0)
  {
    while (1)
    {
      v19 = *(_QWORD *)(*v18 + 64) & 0xFFFFFFFFFFFFLL;
      if (v19)
      {
        if ((*(_BYTE *)((*(_QWORD *)(*v18 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963748BCLL);
        }
        WebCore::RenderElement::backdropRenderer(v19, &v23);
        v21 = v23;
        if (v23)
        {
          v22 = (WebCore::RenderBlock *)*((_QWORD *)v23 + 1);
          v23 = 0;
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, v20);
          else
            --*(_DWORD *)v21;
          if (v22 == this)
            return *v18;
        }
      }
      v18 = (_QWORD *)v18[2];
      if (!v18)
        goto LABEL_3;
    }
  }
  else
  {
    if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
      goto LABEL_4;
LABEL_3:
    ++dword_1ECE91378;
    v4 = *((_QWORD *)this + 1);
    v5 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v9);
    if (v10 == -1 || v10 != v4)
    {
      v15 = 1;
      do
      {
        v9 = ((_DWORD)v9 + v15) & v5;
        v16 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v9);
        ++v15;
      }
      while (v16 == -1 || v16 != v4);
    }
    v12 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v9 + 8) + 16);
    if (v12 && (v13 = *v12) != 0 && *(_QWORD *)(v13 + 8))
    {
      v14 = (WebCore::RenderElement *)WebCore::RenderBoxModelObject::continuation(this);
      return WebCore::RenderElement::element(v14);
    }
    else
    {
LABEL_4:
      if ((*((_BYTE *)this + 45) & 1) != 0)
      {
        return 0;
      }
      else
      {
        result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (result && (*(_WORD *)(result + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196374838);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::continuation(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
    return 0;
  ++dword_1ECE91378;
  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v4 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v7);
  if (v8 == -1 || v8 != v2)
  {
    v12 = 1;
    do
    {
      v7 = ((_DWORD)v7 + v12) & v3;
      v13 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v7);
      ++v12;
    }
    while (v13 == -1 || v13 != v2);
  }
  v10 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v7 + 8) + 16);
  if (v10 && (v11 = *v10) != 0)
    return *(_QWORD *)(v11 + 8);
  else
    return 0;
}

uint64_t WebCore::RenderBlock::hitTestChildren(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;

  v12 = *a5;
  v11 = a5[1];
  if ((*(_BYTE *)(a1 + 22) & 1) == 0
    || ((*(_BYTE *)(a1 + 45) & 2) != 0
      ? (v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 96))
      : (v19 = *(_QWORD *)(a1 + 96)),
        v13 = v19 & 0x1C00,
        v13 == 2048))
  {
    LODWORD(v13) = 0;
LABEL_3:
    v14 = 0;
    goto LABEL_4;
  }
  if (!v13)
    goto LABEL_3;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 264);
  if (!v13)
    goto LABEL_3;
  v20 = *(_QWORD *)(v13 + 104);
  v21 = HIDWORD(v20);
  v22 = (_DWORD)v20 << 6;
  if ((int)v20 < -33554432)
    v22 = 0x80000000;
  if ((int)v20 <= 0x1FFFFFF)
    LODWORD(v13) = v22;
  else
    LODWORD(v13) = 0x7FFFFFFF;
  v23 = (_DWORD)v21 << 6;
  if ((int)v21 < -33554432)
    v23 = 0x80000000;
  if ((int)v21 <= 0x1FFFFFF)
    v14 = v23;
  else
    v14 = 0x7FFFFFFF;
LABEL_4:
  v15 = __OFSUB__(v12, (_DWORD)v13);
  LODWORD(v13) = v12 - v13;
  if (v15)
    v13 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v13 = v13;
  v15 = __OFSUB__(v11, v14);
  LODWORD(v16) = v11 - v14;
  if (v15)
    v16 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v16 = v16;
  v17 = v13 | (v16 << 32);
  if ((_DWORD)a6 == 3)
  {
    v33 = v13 | (v16 << 32);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t *))(*(_QWORD *)a1 + 1872))(a1, a2, a3, a4, &v33) & 1) != 0)return 1;
  }
  v33 = v17;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t *, uint64_t))(*(_QWORD *)a1 + 1864))(a1, a2, a3, a4, &v33, a6);
  if ((_DWORD)result)
  {
    v24 = a4[1];
    v25 = *a4 - v12;
    if (__OFSUB__(*a4, v12))
      v25 = (*a4 >> 31) + 0x7FFFFFFF;
    v15 = __OFSUB__(v24, v11);
    LODWORD(v26) = v24 - v11;
    v27 = (v24 >> 31) + 0x7FFFFFFF;
    if (v15)
      v26 = v27;
    else
      v26 = v26;
    v28 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if (v28 <= 5 && ((1 << v28) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        v31 = *(_DWORD *)(a1 + 160);
        v15 = __OFSUB__(v31, v25);
        v25 = v31 - v25;
        v32 = (v31 >> 31) + 0x7FFFFFFF;
        if (v15)
          v25 = v32;
      }
      else
      {
        v29 = *(_DWORD *)(a1 + 164);
        v15 = __OFSUB__(v29, (_DWORD)v26);
        LODWORD(v26) = v29 - v26;
        v30 = (v29 >> 31) + 0x7FFFFFFF;
        if (v15)
          v26 = v30;
        else
          v26 = v26;
      }
    }
    v33 = v25 | (unint64_t)(v26 << 32);
    (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v33);
    return 1;
  }
  return result;
}

unint64_t WebCore::RenderBox::flipForWritingMode(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (v3 || v4 == 0)
  {
    v6 = *(_DWORD *)a2;
    v7 = *((unsigned int *)a2 + 1);
  }
  else if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v13 = *((_DWORD *)this + 40);
    v7 = *((unsigned int *)a2 + 1);
    v11 = __OFSUB__(v13, *(_DWORD *)a2);
    v14 = v13 - *(_DWORD *)a2;
    v6 = (v13 >> 31) + 0x7FFFFFFF;
    if (!v11)
      v6 = v14;
  }
  else
  {
    v9 = *((_DWORD *)this + 41);
    v6 = *(_DWORD *)a2;
    v10 = *((_DWORD *)a2 + 1);
    v11 = __OFSUB__(v9, v10);
    v12 = v9 - v10;
    LODWORD(v7) = (v9 >> 31) + 0x7FFFFFFF;
    if (v11)
      v7 = v7;
    else
      v7 = v12;
  }
  return v6 | (unint64_t)(v7 << 32);
}

uint64_t WebCore::RenderBlock::nodeAtPoint(uint64_t a1, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, uint64_t a6)
{
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  __int32 v38;
  int v39;
  int v40;
  int v41;
  __int32 v42;
  int v43;
  int v44;
  uint64_t result;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  signed int v53;
  int v54;
  signed int v55;
  __int32 v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned __int32 v60;
  uint64_t v61;
  unsigned int v62;
  WebCore::ImageOverlay *v63;
  WebCore::Node *v64;
  void *v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int32 v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  WebCore::ImageOverlay *v73;
  WebCore::Node *v74;
  void *v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  signed int v89;
  int v90;
  signed int v91;
  __int32 v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  __int32 v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  __int32 v106;
  unsigned int v107;
  unsigned int v108;
  __int32 v109;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  _QWORD v119[2];
  uint64_t v120;
  int32x4_t v121[3];
  uint64_t v122;
  unint64_t v123;

  v12 = *(_DWORD *)(a1 + 152);
  v13 = *(_DWORD *)(a1 + 156);
  v14 = *((_DWORD *)a5 + 1);
  v15 = __OFADD__(*(_DWORD *)a5, v12);
  v16 = *(_DWORD *)a5 + v12;
  v17 = v15;
  v18 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
  if (v15)
    v19 = v18;
  else
    v19 = v16;
  v20 = __OFADD__(v14, v13);
  v21 = v14 + v13;
  v22 = v20;
  v23 = (v14 >> 31) + 0x7FFFFFFF;
  if (v20)
    v24 = v23;
  else
    v24 = v21;
  v120 = v19 | (v24 << 32);
  if (*(_BYTE *)(a1 + 46) != 49)
  {
    if (!v17)
      v18 = v16;
    if (v22)
      v25 = v23;
    else
      v25 = v21;
    v26 = *(_QWORD *)(a1 + 192);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 20);
      v28 = (unint64_t *)(v26 + 28);
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t *)(a1 + 160);
    }
    v29 = *v28;
    v123 = v29;
    v30 = HIDWORD(v27);
    v31 = HIDWORD(v29);
    v32 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if (v32 <= 5 && ((1 << v32) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        v113 = *(_DWORD *)(a1 + 160);
        v15 = __OFADD__((_DWORD)v27, (_DWORD)v29);
        v114 = v27 + v29;
        v115 = (v27 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v115 = v114;
        v15 = __OFSUB__(v113, v115);
        LODWORD(v27) = v113 - v115;
        v116 = (v113 >> 31) + 0x7FFFFFFF;
        if (v15)
          LODWORD(v27) = v116;
      }
      else
      {
        v110 = *(_DWORD *)(a1 + 164);
        v111 = (HIDWORD(v27) >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(HIDWORD(v27), HIDWORD(v29)))
          v111 = HIDWORD(v27) + HIDWORD(v29);
        v15 = __OFSUB__(v110, v111);
        LODWORD(v30) = v110 - v111;
        v112 = (v110 >> 31) + 0x7FFFFFFF;
        if (v15)
          LODWORD(v30) = v112;
      }
    }
    v15 = __OFADD__((_DWORD)v27, v18);
    v33 = v27 + v18;
    v34 = (v27 >> 31) + 0x7FFFFFFF;
    if (v15)
      v33 = v34;
    v15 = __OFADD__((_DWORD)v30, v25);
    v35 = v30 + v25;
    if (v15)
      v35 = (v30 >> 31) + 0x7FFFFFFF;
    v122 = __PAIR64__(v35, v33);
    if ((int)v29 < 1)
      return 0;
    if (SHIDWORD(v29) < 1)
      return 0;
    v36 = a4[1].i32[0];
    if (v36 < 1)
      return 0;
    v37 = a4[1].i32[1];
    if (v37 < 1)
      return 0;
    v38 = a4->i32[2];
    v39 = v38 + v36;
    if (__OFADD__(v38, v36))
      v39 = (v38 >> 31) + 0x7FFFFFFF;
    if ((int)v33 >= v39)
      return 0;
    v15 = __OFADD__(v33, (_DWORD)v29);
    v40 = v33 + v29;
    v41 = (v33 >> 31) + 0x7FFFFFFF;
    if (v15)
      v40 = v41;
    if (v38 >= v40)
      return 0;
    v42 = a4->i32[3];
    v43 = v42 + v37;
    if (__OFADD__(v42, v37))
      v43 = (v42 >> 31) + 0x7FFFFFFF;
    if ((int)v35 >= v43)
      return 0;
    v15 = __OFADD__(v35, (_DWORD)v31);
    v44 = v35 + v31;
    if (v15)
      v44 = (v35 >> 31) + 0x7FFFFFFF;
    if (v42 >= v44)
      return 0;
    if (!a4[4].i8[1]
      && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v122, (const WebCore::LayoutRect *)&a4->u32[2]))
    {
      v121[0].i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v122);
      *(uint64_t *)((char *)v121[0].i64 + 4) = __PAIR64__(v105, v104);
      v121[0].i32[3] = v106;
      result = WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[2], (const WebCore::FloatRect *)v121);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (a6 <= 1
    && ((*(_QWORD *)a2 & 0xFF00000000) == 0 || (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) == 0)
    && (*(_BYTE *)(a1 + 120) & 0x30) == 0)
  {
    v67 = *(_QWORD *)(a1 + 32);
    if (!v67 || (v68 = *(_QWORD *)(v67 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v68 + 104) + 239) & 0x18) == 0)
    {
      if ((*(_QWORD *)a2 & 0x10) != 0)
        goto LABEL_202;
      v77 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v78 = *(_QWORD *)(*(_QWORD *)(v77 + 40) + 8);
      if (!*(_BYTE *)(v78 + 3441) || *(_QWORD *)(v78 + 1272) == v77)
      {
        if ((*(_BYTE *)(a1 + 45) & 2) != 0)
          v79 = 0;
        else
          v79 = a1;
        if (v67 && (*(_BYTE *)(a1 + 45) & 2) != 0)
          v79 = *(_QWORD *)(v67 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v79 + 104) + 239) & 1) == 0 && (*(_WORD *)(v79 + 124) & 0x3C0) != 0)
        {
LABEL_202:
          if ((*(unsigned int (**)(uint64_t, WebCore::HitTestResult *, float32x4_t *, uint64_t *))(*(_QWORD *)a1 + 1776))(a1, a3, a4, &v120))
          {
            v69 = a4->u32[1];
            LODWORD(v70) = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
            v70 = __OFSUB__(a4->i32[0], (_DWORD)v19) ? v70 : (a4->i32[0] - v19);
            v15 = __OFSUB__(v69, (_DWORD)v24);
            v71 = v69 - v24;
            LODWORD(v72) = (v69 >> 31) + 0x7FFFFFFF;
            v72 = v15 ? v72 : v71;
            v121[0].i64[0] = v70 | (v72 << 32);
            (*(void (**)(uint64_t, WebCore::HitTestResult *, int32x4_t *))(*(_QWORD *)a1 + 328))(a1, a3, v121);
            v73 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
            v74 = v73;
            if (v73)
            {
              *((_DWORD *)v73 + 6) += 2;
              v121[0] = 0uLL;
              v76 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v73, a2, (uint64_t)a4, (WebCore::LayoutRect *)v121);
              if (*((_DWORD *)v74 + 6) == 2)
              {
                if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v74, v75);
              }
              else
              {
                *((_DWORD *)v74 + 6) -= 2;
              }
            }
            else
            {
              v121[0] = 0uLL;
              v76 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, (uint64_t)a4, (WebCore::LayoutRect *)v121);
            }
            if (!v76)
              return 1;
          }
        }
      }
    }
  }
  result = WebCore::RenderBox::hitTestClipPath((WebCore::RenderBox *)a1, (const WebCore::HitTestLocation *)a4, a5);
  if (!(_DWORD)result)
    return result;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0
    && (*(_DWORD *)(a1 + 20) & 0x10000) == 0)
  {
    goto LABEL_54;
  }
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1);
  v84 = *(_QWORD *)a1;
  if (v83)
  {
    v122 = (*(uint64_t (**)(uint64_t, uint64_t *))(v84 + 1440))(a1, &v120);
    v123 = v98;
    if (!WebCore::HitTestLocation::intersects((WebCore::HitTestLocation *)a4, (const WebCore::LayoutRect *)&v122))
      goto LABEL_151;
  }
  else
  {
    v85 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(v84 + 1416))(a1, &v120, 0, 1, 0);
    v119[0] = v85;
    v119[1] = v86;
    if ((int)v86 < 1)
      goto LABEL_151;
    if (SHIDWORD(v86) < 1)
      goto LABEL_151;
    v87 = a4[1].i32[0];
    if (v87 < 1)
      goto LABEL_151;
    v88 = a4[1].i32[1];
    if (v88 < 1)
      goto LABEL_151;
    v89 = a4->i32[2];
    v15 = __OFADD__(v89, v87);
    v90 = v89 + v87;
    if (v15)
      v90 = (v89 >> 31) + 0x7FFFFFFF;
    if (v90 <= (int)v85)
      goto LABEL_151;
    v91 = v85 + v86;
    if (__OFADD__((_DWORD)v85, (_DWORD)v86))
      v91 = (v85 >> 31) + 0x7FFFFFFF;
    if (v89 >= v91)
      goto LABEL_151;
    v92 = a4->i32[3];
    v15 = __OFADD__(v92, v88);
    v93 = v92 + v88;
    if (v15)
      v93 = (v92 >> 31) + 0x7FFFFFFF;
    if (v93 <= SHIDWORD(v85))
      goto LABEL_151;
    v94 = HIDWORD(v85) + HIDWORD(v86);
    if (__OFADD__(HIDWORD(v85), HIDWORD(v86)))
      v94 = (HIDWORD(v85) >> 31) + 0x7FFFFFFF;
    if (v92 >= v94
      || !a4[4].i8[1]
      && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)v119, (const WebCore::LayoutRect *)&a4->u32[2])
      && (v121[0].i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)v119),
          *(uint64_t *)((char *)v121[0].i64 + 4) = __PAIR64__(v96, v95),
          v121[0].i32[3] = v97,
          !WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[2], (const WebCore::FloatRect *)v121)))
    {
LABEL_151:
      if ((WebCore::RenderBlock::hitTestExcludedChildrenInBorder(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (unsigned int *)&v120, a6) & 1) != 0)return 1;
      goto LABEL_55;
    }
  }
LABEL_54:
  if (((*(uint64_t (**)(uint64_t, int *, WebCore::HitTestResult *, float32x4_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 1880))(a1, a2, a3, a4, &v120, a6) & 1) != 0)return 1;
LABEL_55:
  if (*(_BYTE *)(a1 + 46) != 49
    && WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(a1 + 80)))
  {
    v99 = *(_DWORD *)(a1 + 152);
    v100 = *(_DWORD *)(a1 + 156);
    v15 = __OFADD__(*(_DWORD *)a5, v99);
    v101 = *(_DWORD *)a5 + v99;
    if (v15)
      v101 = (*(_DWORD *)a5 >> 31) + 0x7FFFFFFF;
    v102 = *((_DWORD *)a5 + 1);
    v15 = __OFADD__(v102, v100);
    v103 = v102 + v100;
    if (v15)
      v103 = (v102 >> 31) + 0x7FFFFFFF;
    v123 = *(_QWORD *)(a1 + 160);
    v122 = __PAIR64__(v103, v101);
    WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)(a1 + 80), (const WebCore::LayoutRect *)&v122, (const WebCore::LayoutSize *)1, 1, (uint64_t)v121);
    v46 = !WebCore::HitTestLocation::intersects(a4, v121);
  }
  else
  {
    v46 = 0;
  }
  result = 0;
  if (a6 <= 1 && !v46)
  {
    v47 = *(_QWORD *)(a1 + 160);
    v122 = v120;
    v123 = v47;
    if ((*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0)
      return 0;
    if ((*(_BYTE *)(a1 + 120) & 0x30) != 0)
      return 0;
    v48 = *(_QWORD *)(a1 + 32);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 8);
      if (v49)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v49 + 104) + 239) & 0x18) != 0)
          return 0;
      }
    }
    if ((*(_QWORD *)a2 & 0x10) == 0)
    {
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      v81 = *(_QWORD *)(*(_QWORD *)(v80 + 40) + 8);
      if (*(_BYTE *)(v81 + 3441))
      {
        if (*(_QWORD *)(v81 + 1272) != v80)
          return 0;
      }
      if ((*(_BYTE *)(a1 + 45) & 2) != 0)
        v82 = 0;
      else
        v82 = a1;
      if (v48 && (*(_BYTE *)(a1 + 45) & 2) != 0)
        v82 = *(_QWORD *)(v48 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v82 + 104) + 239) & 1) != 0 || (*(_WORD *)(v82 + 124) & 0x3C0) == 0)
        return 0;
    }
    if ((int)v47 < 1)
      return 0;
    v50 = HIDWORD(v47);
    if (SHIDWORD(v47) < 1)
      return 0;
    v51 = a4[1].i32[0];
    if (v51 < 1)
      return 0;
    v52 = a4[1].i32[1];
    if (v52 < 1)
      return 0;
    v53 = a4->i32[2];
    v15 = __OFADD__(v53, v51);
    v54 = v53 + v51;
    if (v15)
      v54 = (v53 >> 31) + 0x7FFFFFFF;
    if (v54 <= (int)v120)
      return 0;
    v15 = __OFADD__((_DWORD)v120, (_DWORD)v47);
    v55 = v120 + v47;
    if (v15)
      v55 = (v120 >> 31) + 0x7FFFFFFF;
    if (v53 >= v55)
      return 0;
    v56 = a4->i32[3];
    v15 = __OFADD__(v56, v52);
    v57 = v56 + v52;
    if (v15)
      v57 = (v56 >> 31) + 0x7FFFFFFF;
    if (v57 <= SHIDWORD(v120))
      return 0;
    v15 = __OFADD__(HIDWORD(v120), (_DWORD)v50);
    v58 = HIDWORD(v120) + v50;
    if (v15)
      v58 = (HIDWORD(v120) >> 31) + 0x7FFFFFFF;
    if (v56 >= v58)
      return 0;
    if (!a4[4].i8[1]
      && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)&v122, (const WebCore::LayoutRect *)&a4->u32[2]))
    {
      v121[0].i32[0] = WebCore::LayoutRect::operator WebCore::FloatRect((int *)&v122);
      *(uint64_t *)((char *)v121[0].i64 + 4) = __PAIR64__(v108, v107);
      v121[0].i32[3] = v109;
      if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[2], (const WebCore::FloatRect *)v121))
        return 0;
    }
    v59 = a4->i32[0] - v19;
    if (__OFSUB__(a4->i32[0], (_DWORD)v19))
      v59 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
    v60 = a4->u32[1];
    v61 = v60 - v24;
    if (__OFSUB__(v60, (_DWORD)v24))
      v61 = (v60 >> 31) + 0x7FFFFFFF;
    v62 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if (v62 <= 5 && ((1 << v62) & 0x2A) != 0)
    {
      if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
      {
        v118 = *(_DWORD *)(a1 + 160);
        v15 = __OFSUB__(v118, v59);
        v59 = v118 - v59;
        if (v15)
          v59 = (v118 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v117 = *(_DWORD *)(a1 + 164);
        v15 = __OFSUB__(v117, (_DWORD)v61);
        v61 = v117 - v61;
        if (v15)
          v61 = (v117 >> 31) + 0x7FFFFFFF;
      }
    }
    v121[0].i64[0] = v59 | (unint64_t)(v61 << 32);
    (*(void (**)(uint64_t, WebCore::HitTestResult *, int32x4_t *))(*(_QWORD *)a1 + 328))(a1, a3, v121);
    v63 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    if (v63)
    {
      v64 = v63;
      *((_DWORD *)v63 + 6) += 2;
      v66 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v63, a2, (uint64_t)a4, (WebCore::LayoutRect *)&v122);
      if (*((_DWORD *)v64 + 6) == 2)
      {
        if ((*((_WORD *)v64 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v64, v65);
      }
      else
      {
        *((_DWORD *)v64 + 6) -= 2;
      }
      return !v66;
    }
    return !WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, (uint64_t)a4, (WebCore::LayoutRect *)&v122);
  }
  return result;
}

BOOL WebCore::RenderBox::hitTestVisualOverflow(WebCore::RenderBox *this, const WebCore::HitTestLocation *a2, const WebCore::LayoutPoint *a3, unsigned int a4)
{
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD v26[2];
  unint64_t v27;

  if (*((_BYTE *)this + 46) == 49)
    return 1;
  v5 = *((_DWORD *)this + 38);
  v4 = *((_DWORD *)this + 39);
  v6 = __OFADD__((_DWORD)a3, v5);
  v7 = (_DWORD)a3 + v5;
  if (v6)
    v7 = (a3 >> 31) + 0x7FFFFFFF;
  v6 = __OFADD__(a4, v4);
  v8 = a4 + v4;
  if (v6)
    v8 = (a4 >> 31) + 0x7FFFFFFF;
  v9 = *((_QWORD *)this + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 20);
    v11 = (unint64_t *)(v9 + 28);
  }
  else
  {
    v10 = 0;
    v11 = (unint64_t *)((char *)this + 160);
  }
  v12 = *v11;
  v27 = *v11;
  v13 = HIDWORD(v10);
  v14 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v14 <= 5 && ((1 << v14) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v23 = *((_DWORD *)this + 40);
      v6 = __OFADD__((_DWORD)v10, (_DWORD)v12);
      v24 = v10 + v12;
      v25 = (v10 >> 31) + 0x7FFFFFFF;
      if (!v6)
        v25 = v24;
      v6 = __OFSUB__(v23, v25);
      LODWORD(v10) = v23 - v25;
      if (v6)
        LODWORD(v10) = (v23 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v19 = HIDWORD(v12);
      v20 = *((_DWORD *)this + 41);
      v6 = __OFADD__(HIDWORD(v10), (_DWORD)v19);
      v21 = HIDWORD(v10) + v19;
      v22 = (HIDWORD(v10) >> 31) + 0x7FFFFFFF;
      if (!v6)
        v22 = v21;
      v6 = __OFSUB__(v20, v22);
      LODWORD(v13) = v20 - v22;
      if (v6)
        LODWORD(v13) = (v20 >> 31) + 0x7FFFFFFF;
    }
  }
  v6 = __OFADD__((_DWORD)v10, v7);
  v15 = v10 + v7;
  v16 = (v10 >> 31) + 0x7FFFFFFF;
  if (v6)
    v15 = v16;
  v6 = __OFADD__((_DWORD)v13, v8);
  v17 = v13 + v8;
  if (v6)
    v17 = (v13 >> 31) + 0x7FFFFFFF;
  v26[0] = v15;
  v26[1] = v17;
  return WebCore::HitTestLocation::intersects(a2, (const WebCore::LayoutRect *)v26);
}

uint64_t WebCore::RenderBox::hitTestClipPath(WebCore::RenderBox *this, const WebCore::HitTestLocation *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  void *v24;
  char v25;
  WebCore::Node *v26;
  float32x2_t v27;
  WebCore::Node *v28;
  int v29;
  int v30;
  uint64_t v31[2];
  uint64_t v32;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 264);
  if (!v3)
    return 1;
  v6 = *((_DWORD *)this + 38);
  v5 = *((_DWORD *)this + 39);
  v7 = *((_DWORD *)a3 + 1);
  v8 = __OFADD__(*(_DWORD *)a3, v6);
  v9 = *(_DWORD *)a3 + v6;
  if (v8)
    v9 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  v8 = __OFADD__(v7, v5);
  v10 = v7 + v5;
  if (v8)
    v10 = (v7 >> 31) + 0x7FFFFFFF;
  v11 = *((_DWORD *)a2 + 1);
  v8 = __OFSUB__(*(_DWORD *)a2, v9);
  LODWORD(v12) = *(_DWORD *)a2 - v9;
  if (v8)
    v12 = ((*(_DWORD *)a2 >> 31) + 0x7FFFFFFF);
  else
    v12 = v12;
  v8 = __OFSUB__(v11, v10);
  LODWORD(v13) = v11 - v10;
  if (v8)
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v13 = v13;
  v32 = v12 | (v13 << 32);
  v31[0] = (uint64_t)this;
  v31[1] = (uint64_t)&v32;
  v14 = *(_DWORD *)(v3 + 12);
  if (v14 == 1)
  {
    LODWORD(v28) = (*(float (**)(WebCore::RenderBox *, _QWORD))(*(_QWORD *)this + 752))(this, *(unsigned __int8 *)(v3 + 16));
    HIDWORD(v28) = v15;
    v29 = v16;
    v30 = v17;
    v18 = (*(uint64_t (**)(_QWORD, WebCore::Node **))(**(_QWORD **)(v3 + 24) + 32))(*(_QWORD *)(v3 + 24), &v28);
    v27 = vmul_f32(vcvt_f32_s32((int32x2_t)v32), (float32x2_t)vdup_n_s32(0x3C800000u));
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24));
    v20 = *(_DWORD *)(v18 + 64);
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(v18 + 8);
      if (v21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 200))(v21))
        return 0;
    }
    else if (!v20)
    {
      return 0;
    }
    v22 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v18);
    return WebCore::PathCG::contains(v22, (float *)&v27, v19);
  }
  if (v14)
    return 1;
  WebCore::TreeScope::getElementById((unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 96), (const WTF::AtomString *)(v3 + 32), (uint64_t *)&v28);
  v23 = v28;
  if (!v28)
    return 1;
  if ((*((_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_30:
    v28 = 0;
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v23);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
    return 1;
  }
  if ((*(_BYTE *)((*((_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((*((_WORD *)v28 + 14) & 0x20) != 0
      && *(_QWORD *)(*((_QWORD *)v28 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
    {
      v25 = WebCore::RenderBox::hitTestClipPath(WebCore::HitTestLocation const&,WebCore::LayoutPoint const&)const::$_0::operator()(v31, (uint64_t)v28);
      v26 = v28;
      v28 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 6) == 2)
        {
          if ((*((_WORD *)v26 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v26, v24);
        }
        else
        {
          *((_DWORD *)v26 + 6) -= 2;
        }
      }
      return (v25 & 1) != 0;
    }
    goto LABEL_30;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderBlock::hitTestExcludedChildrenInBorder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;

  if ((*(_BYTE *)(a1 + 45) & 1) == 0)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if (v7)
    {
      if ((*(_WORD *)(v7 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      {
        v10 = *(unsigned int *)(a1 + 64);
        if (v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
        {
          v11 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
          if (v11)
          {
            v8 = 0;
            while ((*(_BYTE *)(v11 + 45) & 4) == 0)
            {
              v12 = *(unsigned int *)(v11 + 47);
              if (!(v12 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)))
                return 0;
              v11 = *(_QWORD *)((v12 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
              if (!v11)
                return v8;
            }
            while (1)
            {
              v13 = *(_DWORD *)(v11 + 20);
              if ((v13 & 0x800) == 0 && (v13 & 0x1800000) != 0x1000000 && (*(_BYTE *)(v11 + 45) & 1) == 0)
              {
                v14 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8);
                if (v14)
                {
                  if ((*(_WORD *)(v14 + 28) & 0x10) != 0
                    && *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
                  {
                    break;
                  }
                }
              }
              v15 = *(unsigned int *)(v11 + 47);
              if (!(v15 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)))
                return 0;
              v11 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
              if (!v11)
                return 0;
              while ((*(_BYTE *)(v11 + 45) & 4) == 0)
              {
                v16 = *(unsigned int *)(v11 + 47);
                if (!(v16 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)))
                  return 0;
                v8 = 0;
                v11 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8);
                if (!v11)
                  return v8;
              }
            }
            if ((v13 & 0x400) != 0)
            {
              v17 = *(_QWORD *)(v11 + 144);
              if (!v17 || (*(_BYTE *)(v17 + 25) & 8) == 0)
              {
                if ((_DWORD)a6 == 2)
                  a6 = 1;
                else
                  a6 = a6;
                v18 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
                if (v18 <= 5 && ((1 << v18) & 0x2A) != 0)
                {
                  v19 = *a5;
                  if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
                  {
                    v21 = a5[1];
                    v22 = *(_DWORD *)(a1 + 164);
                    v23 = __OFADD__(v21, v22);
                    v24 = v21 + v22;
                    v25 = (v21 >> 31) + 0x7FFFFFFF;
                    if (v23)
                      v24 = v25;
                    v26 = *(_DWORD *)(v11 + 164);
                    v23 = __OFSUB__(v24, v26);
                    v27 = v24 - v26;
                    v28 = (v24 >> 31) + 0x7FFFFFFF;
                    if (!v23)
                      v28 = v27;
                    v29 = *(_DWORD *)(v11 + 156);
                    v30 = 2 * v29;
                    v31 = v29 ^ (2 * v29);
                    v32 = (v29 >> 31) + 0x7FFFFFFF;
                    if (v31 >= 0)
                      v32 = v30;
                    v23 = __OFSUB__(v28, v32);
                    v33 = v28 - v32;
                    LODWORD(v20) = (v28 >> 31) + 0x7FFFFFFF;
                    if (v23)
                      v20 = v20;
                    else
                      v20 = v33;
                    goto LABEL_35;
                  }
                  v34 = *(_DWORD *)(a1 + 160);
                  v23 = __OFADD__(v19, v34);
                  v35 = v19 + v34;
                  v36 = (v19 >> 31) + 0x7FFFFFFF;
                  if (v23)
                    v35 = v36;
                  v37 = *(_DWORD *)(v11 + 160);
                  v23 = __OFSUB__(v35, v37);
                  v38 = v35 - v37;
                  v39 = (v35 >> 31) + 0x7FFFFFFF;
                  if (!v23)
                    v39 = v38;
                  v40 = *(_DWORD *)(v11 + 152);
                  v41 = 2 * v40;
                  v42 = v40 ^ (2 * v40);
                  v43 = (v40 >> 31) + 0x7FFFFFFF;
                  if (v42 >= 0)
                    v43 = v41;
                  v23 = __OFSUB__(v39, v43);
                  v19 = v39 - v43;
                  v44 = (v39 >> 31) + 0x7FFFFFFF;
                  if (v23)
                    v19 = v44;
                }
                else
                {
                  v19 = *a5;
                }
                v20 = a5[1];
LABEL_35:
                v45 = v19 | (unint64_t)(v20 << 32);
                return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v11 + 336))(v11, a2, a3, a4, &v45, a6, 0);
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

BOOL WebCore::RenderBox::hitTestBorderRadius(WebCore::RenderBox *this, float32x4_t *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::RenderStyle *v6;
  int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int32x4_t v14[3];
  _DWORD v15[2];
  uint64_t v16;

  if (*((_BYTE *)this + 46) == 49)
    return 1;
  v6 = (WebCore::RenderBox *)((char *)this + 80);
  if (!WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80)))
    return 1;
  v9 = *((_DWORD *)this + 38);
  v8 = *((_DWORD *)this + 39);
  v10 = *((_DWORD *)a3 + 1);
  v11 = __OFADD__(*(_DWORD *)a3, v9);
  v12 = *(_DWORD *)a3 + v9;
  if (v11)
    v12 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  v11 = __OFADD__(v10, v8);
  v13 = v10 + v8;
  if (v11)
    v13 = (v10 >> 31) + 0x7FFFFFFF;
  v16 = *((_QWORD *)this + 20);
  v15[0] = v12;
  v15[1] = v13;
  WebCore::RenderStyle::getRoundedBorderFor(v6, (const WebCore::LayoutRect *)v15, (const WebCore::LayoutSize *)1, 1, (uint64_t)v14);
  return WebCore::HitTestLocation::intersects(a2, v14);
}

uint64_t WebCore::RenderBlock::hitTestContents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;

  if ((*(_BYTE *)(a1 + 22) & 4) != 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 46);
    if (v11 != 35 && v11 != 63)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 1888))(a1, a2, a3, a4, a5);
  }
  if (a6 == 2)
    v12 = 1;
  else
    v12 = a6;
  v13 = *(unsigned int *)(a1 + 71);
  if (!(v13 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)))
    return 0;
  v14 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
  if (!v14 || (*(_BYTE *)(v14 + 45) & 4) == 0)
    return 0;
  while (1)
  {
    v16 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    v17 = v16 > 5;
    v18 = (1 << v16) & 0x2A;
    if (v17 || v18 == 0)
    {
      v20 = *a5;
LABEL_18:
      v21 = a5[1];
      goto LABEL_19;
    }
    v20 = *a5;
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      v37 = *(_DWORD *)(a1 + 160);
      v26 = __OFADD__(v20, v37);
      v38 = v20 + v37;
      v39 = (v20 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v39 = v38;
      v40 = *(_DWORD *)(v14 + 160);
      v26 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = (v39 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v42 = v41;
      v43 = *(_DWORD *)(v14 + 152);
      v44 = 2 * v43;
      v45 = v43 ^ (2 * v43);
      v46 = (v43 >> 31) + 0x7FFFFFFF;
      if (v45 >= 0)
        v46 = v44;
      v26 = __OFSUB__(v42, v46);
      v47 = v42 - v46;
      v20 = (v42 >> 31) + 0x7FFFFFFF;
      if (!v26)
        v20 = v47;
      goto LABEL_18;
    }
    v24 = a5[1];
    v25 = *(_DWORD *)(a1 + 164);
    v26 = __OFADD__(v24, v25);
    v27 = v24 + v25;
    v28 = (v24 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v28 = v27;
    v29 = *(_DWORD *)(v14 + 164);
    v26 = __OFSUB__(v28, v29);
    v30 = v28 - v29;
    v31 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v31 = v30;
    v32 = *(_DWORD *)(v14 + 156);
    v33 = 2 * v32;
    v34 = v32 ^ (2 * v32);
    v35 = (v32 >> 31) + 0x7FFFFFFF;
    if (v34 >= 0)
      v35 = v33;
    v26 = __OFSUB__(v31, v35);
    v36 = v31 - v35;
    LODWORD(v21) = (v31 >> 31) + 0x7FFFFFFF;
    v21 = v26 ? v21 : v36;
LABEL_19:
    v48 = v20 | (unint64_t)(v21 << 32);
    v22 = *(_QWORD *)(v14 + 144);
    if ((!v22 || (*(_BYTE *)(v22 + 25) & 8) == 0)
      && (*(_BYTE *)(v14 + 21) & 8) == 0
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v14 + 336))(v14, a2, a3, a4, &v48, v12) & 1) != 0)
    {
      return 1;
    }
    v23 = *(unsigned int *)(v14 + 40);
    if (!(v23 | ((unint64_t)*(unsigned __int8 *)(v14 + 44) << 32)))
      return 0;
    v14 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v14 + 44) << 32)) + 8);
    if (!v14)
      return 0;
    result = 0;
    if ((*(_BYTE *)(v14 + 45) & 4) == 0)
      return result;
  }
}

unsigned int *WebCore::positionForPointRespectingEditingBoundaries(uint64_t a1, uint64_t a2, WebCore::RenderBoxModelObject *this, _DWORD *a4, uint64_t a5, double a6)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned __int16 *v37;
  uint64_t v38;
  char *v40;
  int v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int i;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  char v50;
  int v51;
  int v52;
  int v53;
  int v54;
  float v55;
  double v56;
  double v57;
  _QWORD v58[2];
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _DWORD v65[4];

  v12 = *((_DWORD *)this + 38);
  v11 = *((_DWORD *)this + 39);
  v13 = *((_DWORD *)this + 5);
  if ((v13 & 0x800000) != 0)
  {
    v14 = v13 & 0x1800000;
    if (v14 == 0x800000)
    {
      v15 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
      v16 = HIDWORD(v15);
    }
    else if (v14 == 25165824)
    {
      WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, a6);
      v65[0] = v51;
      v65[1] = v52;
      v65[2] = v53;
      v65[3] = v54;
      v59 = 0;
      v58[0] = off_1E34043D0;
      v58[1] = 0;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)v58, (const WebCore::FloatRect *)v65);
      v56 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v58, (const WebCore::FloatRect *)v65)* 64.0;
      if (v56 >= 2147483650.0)
      {
        LODWORD(v15) = 0x7FFFFFFF;
      }
      else if (v56 <= -2147483650.0)
      {
        LODWORD(v15) = 0x80000000;
      }
      else
      {
        LODWORD(v15) = (int)v56;
      }
      v57 = v55 * 64.0;
      if (v57 >= 2147483650.0)
      {
        LODWORD(v16) = 0x7FFFFFFF;
      }
      else if (v57 <= -2147483650.0)
      {
        LODWORD(v16) = 0x80000000;
      }
      else
      {
        LODWORD(v16) = (int)v57;
      }
    }
    else
    {
      LODWORD(v16) = 0;
      LODWORD(v15) = 0;
    }
    if (__OFADD__(v12, (_DWORD)v15))
      v12 = (v12 >> 31) + 0x7FFFFFFF;
    else
      v12 += v15;
    v17 = __OFADD__(v11, (_DWORD)v16);
    v18 = v11 + v16;
    if (v17)
      v11 = (v11 >> 31) + 0x7FFFFFFF;
    else
      v11 = v18;
  }
  v19 = a4[1];
  LODWORD(v20) = (*a4 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(*a4, v12))
    v20 = v20;
  else
    v20 = *a4 - v12;
  v17 = __OFSUB__(v19, v11);
  v21 = v19 - v11;
  LODWORD(v22) = (v19 >> 31) + 0x7FFFFFFF;
  if (v17)
    v22 = v22;
  else
    v22 = v21;
  v58[0] = v20 | (v22 << 32);
  v23 = *((_BYTE *)this + 45);
  if ((v23 & 1) == 0)
  {
    v24 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v24)
    {
      if ((~v24[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v24 + 368))(v24))
          return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
        v23 = *((_BYTE *)this + 45);
      }
    }
  }
  if ((v23 & 1) != 0)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v25)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  if ((*(_WORD *)(v25 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196376198);
  }
  v26 = a2;
  while (1)
  {
    v27 = *(_BYTE *)(v26 + 45);
    if ((v27 & 1) != 0)
      break;
    v28 = *(unsigned __int16 **)(*(_QWORD *)(v26 + 24) + 8);
    if (!v28 || (~v28[14] & 0x408) != 0)
      break;
    if (!(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v28 + 368))(v28))
    {
      v27 = *(_BYTE *)(v26 + 45);
      break;
    }
LABEL_32:
    v30 = *(_QWORD *)(v26 + 32);
    if (v30)
    {
      v26 = *(_QWORD *)(v30 + 8);
      if (v26)
        continue;
    }
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  }
  if ((v27 & 1) != 0)
    goto LABEL_32;
  v29 = *(unsigned __int16 **)(*(_QWORD *)(v26 + 24) + 8);
  if (!v29)
    goto LABEL_32;
  v31 = v29[14];
  if ((v31 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963761B8);
  }
  v32 = *(_QWORD *)(v26 + 32);
  if (!v32)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  v33 = *(_QWORD *)(v32 + 8);
  if (!v33 || (*(_BYTE *)(v26 + 21) & 0x80) != 0 && *(_BYTE *)(v33 + 46) == 49)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  if ((~v31 & 0x408) != 0)
    goto LABEL_43;
  if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v29 + 368))(v29))
    goto LABEL_67;
  v27 = *(_BYTE *)(v26 + 45);
LABEL_43:
  if ((v27 & 1) != 0)
  {
LABEL_67:
    v34 = 0;
  }
  else
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8);
    if (v34 && (*(_WORD *)(v34 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963761D8);
    }
  }
  v35 = WebCore::Node::computeEditability(v34, 0, 1);
  v36 = *((_BYTE *)this + 45);
  if ((v36 & 1) != 0 || (v37 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8)) == 0 || (~v37[14] & 0x408) != 0)
  {
LABEL_51:
    if ((v36 & 1) != 0)
      goto LABEL_68;
    v38 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  }
  else
  {
    if (!(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v37 + 368))(v37))
    {
      v36 = *((_BYTE *)this + 45);
      goto LABEL_51;
    }
LABEL_68:
    v38 = 0;
  }
  if ((v35 == 0) != (WebCore::Node::computeEditability(v38, 0, 1) != 0))
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBoxModelObject *, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 352))(this, v58, a5, 0);
  if ((*(_DWORD *)(a2 + 20) & 0x1000) != 0)
    v40 = (char *)this + 164;
  else
    v40 = (char *)this + 160;
  v41 = *(_DWORD *)v40;
  v42 = (int *)v58;
  if ((*(_DWORD *)(a2 + 20) & 0x1000) != 0)
    v42 = (int *)v58 + 1;
  v43 = v41 / 2;
  v44 = *v42;
  v45 = *(_QWORD *)(v25 + 48);
  for (i = 0; ; ++i)
  {
    v47 = v45 & 0xFFFFFFFFFFFFLL;
    if (!v47)
      break;
    v45 = *(_QWORD *)(v47 + 48);
  }
  if (v44 >= v43)
  {
    ++i;
    v48 = a1;
    v49 = (unsigned int *)v26;
    v50 = 0;
  }
  else
  {
    v48 = a1;
    v49 = (unsigned int *)v26;
    v50 = 1;
  }
  return WebCore::RenderObject::createVisiblePosition(v49, i, v50, v48);
}

void WebCore::RenderBlock::positionForPointWithInlineChildren(_QWORD *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *((_BYTE *)a1 + 16) = 1;
}

unsigned int *WebCore::RenderBlock::positionForPoint@<X0>(WebCore::RenderBlock *this@<X0>, int *a2@<X1>, uint64_t a3@<X2>, WebCore::RenderFragmentContainer *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v12;
  double v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  char isChildHitTestCandidate;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _DWORD *v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  int *v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  _QWORD *v46;
  _DWORD *v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v10 = *((unsigned __int8 *)this + 46);
  if (v10 == 63 || v10 == 35)
    return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
  v12 = *((_DWORD *)this + 5);
  if ((v12 & 2) == 0)
    goto LABEL_5;
  v19 = a2[1];
  if ((v12 & 0x1000) != 0)
    v20 = a2[1];
  else
    v20 = *a2;
  if ((v12 & 0x1000) != 0)
    v19 = *a2;
  if (v19 < 0)
  {
    v22 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 528))(this);
    return WebCore::RenderObject::createVisiblePosition((unsigned int *)this, v22, 1, a5);
  }
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (v20 >= *((_DWORD *)this + 41))
      goto LABEL_29;
    v21 = (char *)this + 160;
  }
  else
  {
    if (v20 >= *((_DWORD *)this + 40))
    {
LABEL_29:
      v22 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 536))(this);
      return WebCore::RenderObject::createVisiblePosition((unsigned int *)this, v22, 1, a5);
    }
    v21 = (char *)this + 164;
  }
  if (v19 >= *(_DWORD *)v21)
    goto LABEL_29;
LABEL_5:
  if (*((char *)this + 45) < 0 || v10 == 12 || v10 == 5)
    return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
  v57 = *(_QWORD *)a2;
  WebCore::RenderBlock::offsetForContents((uint64_t)this, (WebCore::LayoutPoint *)&v57);
  v14 = __ROR8__(v57, 32);
  if ((v12 & 0x1000) == 0)
    v14 = v57;
  v56 = v14;
  if ((v12 & 0x1000) != 0)
    v15 = v57;
  else
    v15 = HIDWORD(v57);
  if ((v12 & 0x40000) != 0)
    return (unsigned int *)(*(uint64_t (**)(WebCore::RenderBlock *, uint64_t *, uint64_t, WebCore::RenderFragmentContainer *))(*(_QWORD *)this + 1912))(this, &v56, a3, a4);
  v16 = *(unsigned int *)((char *)this + 71);
  if (v16 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)
    && (v17 = *(_QWORD *)((v16 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8)) != 0)
  {
    if ((*(_BYTE *)(v17 + 45) & 4) != 0)
      v18 = *(_QWORD *)((v16 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
  }
  if (!a4)
  {
    if ((v12 & 0x10000000) != 0)
    {
      v52 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
      a4 = (WebCore::RenderFragmentContainer *)v52;
      if (!v52)
        goto LABEL_37;
      if ((*(_BYTE *)(v52 + 328) & 1) == 0
        && (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v52 + 248), v53) & 1) == 0)
      {
        v54 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1288))(this);
        if (__OFADD__(v54, v15))
          v55 = (v54 >> 31) + 0x7FFFFFFF;
        else
          v55 = v54 + v15;
        a4 = (WebCore::RenderFragmentContainer *)(*(uint64_t (**)(WebCore::RenderFragmentContainer *, WebCore::RenderBlock *, uint64_t, uint64_t))(*(_QWORD *)a4 + 2000))(a4, this, v55, 1);
        goto LABEL_37;
      }
    }
    a4 = 0;
  }
LABEL_37:
  if (v18)
  {
    while (1)
    {
      isChildHitTestCandidate = WebCore::isChildHitTestCandidate((WebCore::RenderObject *)v18, (uint64_t)a4, (uint64_t)&v56, a3);
      if ((isChildHitTestCandidate & 1) != 0)
        break;
      v24 = *(unsigned int *)(v18 + 40);
      if (v24 | ((unint64_t)*(unsigned __int8 *)(v18 + 44) << 32))
      {
        v18 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v18 + 44) << 32)) + 8);
        if (!v18)
          break;
        if ((*(_BYTE *)(v18 + 45) & 4) != 0)
          continue;
      }
      v18 = 0;
      break;
    }
    v25 = isChildHitTestCandidate ^ 1;
  }
  else
  {
    v25 = 1;
  }
  v26 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v27 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_47;
    case 3:
    case 5:
      v26 = 3;
      goto LABEL_47;
    case 4:
      goto LABEL_48;
    default:
      v26 = 0;
LABEL_47:
      v27 = v26;
LABEL_48:
      if ((v25 & 1) != 0)
        return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
      v28 = HIDWORD(v56);
      v29 = *((_DWORD *)this + 5);
      v30 = (_DWORD *)(v18 + 152);
      if ((v29 & 0x1000) == 0)
        v30 = (_DWORD *)(v18 + 156);
      if (SHIDWORD(v56) > *v30)
        return WebCore::positionForPointRespectingEditingBoundaries(a5, (uint64_t)this, (WebCore::RenderBoxModelObject *)v18, &v57, a3, v13);
      v31 = v27 & 0xFFFFFFFD;
      if ((v27 & 0xFFFFFFFD) != 1)
      {
        v32 = (_DWORD *)((v29 & 0x1000) != 0 ? v18 + 152 : v18 + 156);
        if (HIDWORD(v56) == *v32)
          return WebCore::positionForPointRespectingEditingBoundaries(a5, (uint64_t)this, (WebCore::RenderBoxModelObject *)v18, &v57, a3, v13);
      }
      v33 = *((unsigned int *)this + 16);
      if (!(v33 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
        return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
      v18 = *(_QWORD *)((v33 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (!v18 || (*(_BYTE *)(v18 + 45) & 4) == 0)
        return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
      break;
  }
  while (1)
  {
    if (WebCore::isChildHitTestCandidate((WebCore::RenderObject *)v18, (uint64_t)a4, (uint64_t)&v56, a3))
    {
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v34 = (unsigned int *)(v18 + 152);
        v35 = (int *)(v18 + 160);
      }
      else
      {
        v34 = (unsigned int *)(v18 + 156);
        v35 = (int *)(v18 + 164);
      }
      v36 = *v34;
      v37 = *v35;
      v38 = __OFADD__(v36, v37);
      v39 = v36 + v37;
      v40 = (v36 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v40 = v39;
      if ((*(_BYTE *)(v18 + 52) & 7) == 1)
      {
        v41 = *(_QWORD *)(v18 + 216);
        if (v41 && (v46 = *(_QWORD **)(v41 + 8)) != 0)
        {
          v42 = 0;
          do
          {
            v47 = (_DWORD *)*v46;
            if ((*(_BYTE *)(*v46 + 36) & 0x10) != 0 && (*(_BYTE *)(*v46 + 36) & 3) != 0)
            {
              if ((*(_BYTE *)(v18 + 21) & 0x10) != 0)
              {
                v48 = v47[2];
                v49 = v47[4];
              }
              else
              {
                v48 = v47[3];
                v49 = v47[5];
              }
              v38 = __OFADD__(v48, v49);
              v50 = v48 + v49;
              v51 = (v48 >> 31) + 0x7FFFFFFF;
              if (v38)
                v50 = v51;
              if (v42 <= v50)
                v42 = v50;
            }
            v46 = (_QWORD *)v46[2];
          }
          while (v46);
        }
        else
        {
          v42 = 0;
        }
        if (v40 <= v42)
          v40 = v42;
      }
      v43 = v28 < v40;
      v44 = v28 == v40 && v31 == 1;
      if (v43 || v44)
        break;
    }
    v45 = *(unsigned int *)(v18 + 47);
    if (v45 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32))
    {
      v18 = *(_QWORD *)((v45 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)) + 8);
      if (v18)
      {
        if ((*(_BYTE *)(v18 + 45) & 4) != 0)
          continue;
      }
    }
    return WebCore::RenderBox::positionForPoint(this, a4, a2, a3, a5);
  }
  return WebCore::positionForPointRespectingEditingBoundaries(a5, (uint64_t)this, (WebCore::RenderBoxModelObject *)v18, &v57, a3, v13);
}

unsigned int *WebCore::RenderBox::positionForPoint@<X0>(WebCore::RenderFragmentedFlow *this@<X0>, WebCore::RenderFragmentContainer *a2@<X3>, int *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  int v10;
  char v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t i;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unsigned __int16 *v61;
  unsigned __int16 *v62;
  int v63;
  uint64_t v64;
  uint64_t (*v65)();
  void *v66;
  int v67;
  char v68;
  unsigned __int16 *v69;
  unsigned int *v70;
  __int16 v71;
  uint64_t v72;
  char v73;
  _DWORD *v74;
  int v75;
  int ShouldFragmentInFlowFragment;
  int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  signed int v113;
  signed int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  signed int v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *result;
  char v131;
  unsigned __int16 *v132;
  uint64_t v133;
  char v134;
  unsigned __int16 *v135;
  uint64_t (*v136)();
  uint64_t (*v137)();
  unsigned int v138;
  unsigned int v139;
  int v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  WebCore::Node *v144;
  int v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;
  signed int v153;
  signed int v154;
  WebCore::Node *v155;
  int v156;
  char v157;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || !*(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8))
  {
    v60 = *((_BYTE *)this + 45);
    if ((v60 & 1) == 0)
    {
      v61 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
      if (v61)
      {
        if ((~v61[14] & 0x408) == 0)
        {
          if ((*(unsigned int (**)(unsigned __int16 *, int *, uint64_t, WebCore::RenderFragmentContainer *))(*(_QWORD *)v61 + 368))(v61, a3, a4, a2))
          {
            goto LABEL_244;
          }
          v60 = *((_BYTE *)this + 45);
        }
      }
    }
    if ((v60 & 1) == 0)
    {
      v62 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
      if (v62)
      {
        v63 = v62[14];
        if ((v63 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19637716CLL);
        }
        if ((~v63 & 0x408) == 0)
        {
          if ((*(unsigned int (**)(unsigned __int16 *, int *, uint64_t, WebCore::RenderFragmentContainer *))(*(_QWORD *)v62 + 368))(v62, a3, a4, a2))
          {
            goto LABEL_245;
          }
          v60 = *((_BYTE *)this + 45);
        }
        if ((v60 & 1) == 0)
        {
          v64 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if (v64 && (*(_WORD *)(v64 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19637718CLL);
          }
          goto LABEL_78;
        }
LABEL_245:
        v64 = 0;
LABEL_78:
        WebCore::firstPositionInOrBeforeNode(v64, (WebCore::Node *)a3, (uint64_t)&v155);
        if (v155)
          v65 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
        else
          v65 = 0;
LABEL_81:
        if (!v65)
        {
LABEL_226:
          WebCore::RenderObject::createVisiblePosition((unsigned int *)this, 0, 1, a5);
LABEL_227:
          result = (unsigned int *)v155;
          v155 = 0;
          if (!result)
            return result;
          if (result[6] != 2)
          {
            result[6] -= 2;
            return result;
          }
          if ((*((_WORD *)result + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)result, v66);
          return result;
        }
LABEL_82:
        WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v155, a5);
        *(_BYTE *)(a5 + 16) = 1;
        goto LABEL_227;
      }
    }
LABEL_244:
    v65 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    goto LABEL_81;
  }
  v10 = *((unsigned __int8 *)this + 46);
  if (v10 != 63 && v10 != 35)
    goto LABEL_52;
  v11 = *((_BYTE *)this + 45);
  if ((v11 & 1) == 0)
  {
    v12 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v12)
    {
      if ((~v12[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v12 + 368))(v12))
        {
LABEL_51:
          v10 = *((unsigned __int8 *)this + 46);
LABEL_52:
          v51 = *a3;
          v50 = a3[1];
          if (v10 == 39)
          {
            v53 = *((_DWORD *)this + 38);
            v52 = *((_DWORD *)this + 39);
            v21 = __OFADD__(v51, v53);
            v54 = v51 + v53;
            if (v21)
              v51 = (v51 >> 31) + 0x7FFFFFFF;
            else
              v51 = v54;
            v21 = __OFADD__(v50, v52);
            v55 = v50 + v52;
            if (v21)
              v50 = (v50 >> 31) + 0x7FFFFFFF;
            else
              v50 = v55;
          }
          v56 = *((unsigned __int8 *)this + 68);
          for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v59 + 47))
          {
            v58 = i | (v56 << 32);
            if (!v58)
              goto LABEL_205;
            v59 = *(_QWORD *)(v58 + 8);
            if (!v59)
              goto LABEL_205;
            if ((*(_BYTE *)(v59 + 45) & 4) != 0)
              break;
            v56 = *(unsigned __int8 *)(v59 + 51);
          }
          v74 = 0;
          v75 = 0x7FFFFFFF;
LABEL_99:
          if (!this)
            goto LABEL_107;
          if ((*((_BYTE *)this + 52) & 7) != 1 || (*((_BYTE *)this + 53) & 2) == 0)
            goto LABEL_107;
          ++*((_DWORD *)this + 4);
          ShouldFragmentInFlowFragment = WebCore::RenderFragmentedFlow::objectShouldFragmentInFlowFragment(this, (const WebCore::RenderObject *)v59, a2);
          v78 = *((_DWORD *)this + 4);
          if (ShouldFragmentInFlowFragment)
          {
            if (v78)
            {
              *((_DWORD *)this + 4) = v78 - 1;
LABEL_107:
              v79 = *(unsigned int *)(v59 + 64);
              if ((!(v79 | ((unint64_t)*(unsigned __int8 *)(v59 + 68) << 32))
                 || !*(_QWORD *)((v79 | ((unint64_t)*(unsigned __int8 *)(v59 + 68) << 32)) + 8))
                && (*(_BYTE *)(v59 + 20) & 1) != 0
                && (*(_BYTE *)(v59 + 52) & 7) != 1
                || (_DWORD)a4 && (*(_BYTE *)(*(_QWORD *)(v59 + 104) + 239) & 4) != 0
                || (*(_BYTE *)(v59 + 120) & 0x30) != 0)
              {
                goto LABEL_186;
              }
              v153 = v75;
              v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1000))(v59);
              v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 928))(v59);
              v82 = v80 + v81;
              if (__OFADD__(v80, v81))
                v82 = (v80 >> 31) + 0x7FFFFFFF;
              if (*((_BYTE *)this + 46) == 39)
                v83 = 0;
              else
                v83 = *(_DWORD *)(v59 + 156);
              v84 = v82 + v83;
              if (__OFADD__(v82, v83))
                v84 = (v82 >> 31) + 0x7FFFFFFF;
              v85 = WebCore::RenderBox::contentHeight((WebCore::RenderBox *)v59);
              v86 = v84 + v85;
              v154 = v84;
              if (__OFADD__(v84, v85))
                v86 = (v84 >> 31) + 0x7FFFFFFF;
              v152 = v86;
              v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1016))(v59);
              v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 944))(v59);
              v89 = v87 + v88;
              if (__OFADD__(v87, v88))
                v89 = (v87 >> 31) + 0x7FFFFFFF;
              if (*((_BYTE *)this + 46) == 39)
                v90 = 0;
              else
                v90 = *(_DWORD *)(v59 + 152);
              v21 = __OFADD__(v89, v90);
              v91 = v89 + v90;
              if (v21)
                v151 = (v89 >> 31) + 0x7FFFFFFF;
              else
                v151 = v91;
              v92 = *(_DWORD *)(v59 + 160);
              v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1016))(v59);
              if (__OFSUB__(v92, v93))
                v94 = (v92 >> 31) + 0x7FFFFFFF;
              else
                v94 = v92 - v93;
              v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1024))(v59);
              v96 = v94;
              v21 = __OFSUB__(v94, v95);
              v97 = v94 - v95;
              if (v21)
                v97 = (v96 >> 31) + 0x7FFFFFFF;
              v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1352))(v59);
              v99 = v98 << 6;
              if (v98 < -33554432)
                v99 = 0x80000000;
              if (v98 > 0x1FFFFFF)
                v99 = 0x7FFFFFFF;
              v21 = __OFSUB__(v97, v99);
              v100 = v97 - v99;
              if (v21)
                v100 = (v97 >> 31) + 0x7FFFFFFF;
              v101 = v100 & ~(v100 >> 31);
              v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 944))(v59);
              v21 = __OFSUB__(v101, v102);
              v103 = v101 - v102;
              if (v21)
                v103 = 0x7FFFFFFF;
              v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 952))(v59);
              v105 = v103 - v104;
              if (__OFSUB__(v103, v104))
                v105 = (v103 >> 31) + 0x7FFFFFFF;
              v107 = v151;
              v106 = v152;
              if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 88) + 40) + 584) & 0x100) != 0)
              {
                v150 = v105;
                v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 1352))(v59);
                if (v125 >= -33554432)
                {
                  v108 = v125 << 6;
                  if (v125 > 0x1FFFFFF)
                    v108 = 0x7FFFFFFF;
                }
                else
                {
                  v108 = 0x80000000;
                }
                v107 = v151;
                v106 = v152;
                v105 = v150;
              }
              else
              {
                v108 = 0;
              }
              v21 = __OFSUB__(v105, v108);
              v109 = v105 - v108;
              v75 = v153;
              if (v21)
                v109 = (v105 >> 31) + 0x7FFFFFFF;
              v110 = v109 & ~(v109 >> 31);
              v111 = v107 + v110;
              if (__OFADD__(v107, v110))
                v111 = (v107 >> 31) + 0x7FFFFFFF;
              v112 = *a3;
              if (*a3 <= v111 && v112 >= v107)
              {
                v113 = a3[1];
                if (v113 <= v154 && v113 >= v106)
                {
                  if (*(_BYTE *)(v59 + 46) == 39)
                  {
                    v138 = v112 + v51;
                    if (__OFADD__(v112, v51))
                      v138 = (v112 >> 31) + 0x7FFFFFFF;
                    v139 = v113 + v50;
                    if (__OFADD__(v113, v50))
                      v139 = (v113 >> 31) + 0x7FFFFFFF;
                    v140 = *(_DWORD *)(v59 + 152);
                    v141 = *(_DWORD *)(v59 + 156);
                    v21 = __OFSUB__(v138, v140);
                    v142 = v138 - v140;
                    if (v21)
                      v142 = (v138 >> 31) + 0x7FFFFFFF;
                    v143 = v139 - v141;
                    if (__OFSUB__(v139, v141))
                      v143 = (v139 >> 31) + 0x7FFFFFFF;
                    v144 = (WebCore::Node *)(v142 | (unint64_t)(v143 << 32));
                  }
                  else
                  {
                    v145 = *(_DWORD *)(v59 + 152);
                    v146 = *(_DWORD *)(v59 + 156);
                    v21 = __OFSUB__(v112, v145);
                    v147 = v112 - v145;
                    if (v21)
                      v147 = (v112 >> 31) + 0x7FFFFFFF;
                    v148 = (v113 - v146);
                    if (__OFSUB__(v113, v146))
                      v148 = (v113 >> 31) + 0x7FFFFFFF;
                    v144 = (WebCore::Node *)(v147 | (unint64_t)(v148 << 32));
                  }
                  v155 = v144;
                  return (unsigned int *)(*(uint64_t (**)(uint64_t, WebCore::Node **, uint64_t, WebCore::RenderFragmentContainer *))(*(_QWORD *)v59 + 352))(v59, &v155, a4, a2);
                }
              }
              if (v112 <= v111)
              {
                v114 = a3[1];
                if (v112 >= v107)
                {
                  if (v114 >= v154)
                    v115 = v106;
                  else
                    v115 = v154;
                  v111 = *a3;
                }
                else
                {
                  if (v114 >= v106)
                    v116 = v106;
                  else
                    v116 = a3[1];
                  v115 = v154;
                  if (v114 >= v154)
                    v115 = v116;
                  v111 = v107;
                }
              }
              else
              {
                v114 = a3[1];
                if (v114 >= v106)
                  v115 = v106;
                else
                  v115 = a3[1];
                if (v114 < v154)
                  v115 = v154;
              }
              v21 = __OFSUB__(v111, v112);
              v117 = v111 - v112;
              if (v21)
                v117 = (v111 >> 31) + 0x7FFFFFFF;
              v118 = v115 - v114;
              if (__OFSUB__(v115, v114))
                v118 = (v115 >> 31) + 0x7FFFFFFF;
              v119 = v117 * (uint64_t)v117;
              v120 = v119 >> 6;
              if (v119 >> 38 != (int)(v119 >> 6) >> 31)
                LODWORD(v120) = 0x7FFFFFFF;
              v121 = v118 * (uint64_t)v118;
              v122 = v121 >> 6;
              if (v121 >> 38 != (int)(v121 >> 6) >> 31)
                LODWORD(v122) = 0x7FFFFFFF;
              v21 = __OFADD__((_DWORD)v120, (_DWORD)v122);
              v123 = v120 + v122;
              if (v21)
                v123 = (v120 >> 31) + 0x7FFFFFFF;
              if (v123 < v153)
              {
                v75 = v123;
                v74 = (_DWORD *)v59;
              }
LABEL_186:
              while (1)
              {
                v124 = *(unsigned int *)(v59 + 47);
                if (!(v124 | ((unint64_t)*(unsigned __int8 *)(v59 + 51) << 32)))
                  break;
                v59 = *(_QWORD *)((v124 | ((unint64_t)*(unsigned __int8 *)(v59 + 51) << 32)) + 8);
                if (!v59)
                  break;
                if ((*(_BYTE *)(v59 + 45) & 4) != 0)
                  goto LABEL_99;
              }
              if (v74)
              {
                v127 = v74[38];
                v126 = v74[39];
                v21 = __OFSUB__(v51, v127);
                LODWORD(v128) = v51 - v127;
                if (v21)
                  v128 = (v51 >> 31) + 0x7FFFFFFF;
                else
                  v128 = v128;
                v21 = __OFSUB__(v50, v126);
                LODWORD(v129) = v50 - v126;
                if (v21)
                  v129 = (v50 >> 31) + 0x7FFFFFFF;
                else
                  v129 = v129;
                v155 = (WebCore::Node *)(v128 | (v129 << 32));
                return (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::Node **, uint64_t, WebCore::RenderFragmentContainer *))(*(_QWORD *)v74 + 352))(v74, &v155, a4, a2);
              }
LABEL_205:
              v131 = *((_BYTE *)this + 45);
              if ((v131 & 1) == 0)
              {
                v132 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
                if (v132)
                {
                  if ((~v132[14] & 0x408) == 0)
                  {
                    if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v132 + 368))(v132))
                      goto LABEL_248;
                    v131 = *((_BYTE *)this + 45);
                  }
                }
              }
              if ((v131 & 1) == 0)
              {
                v133 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                if (v133 && (*(_WORD *)(v133 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x196376FB8);
                }
                goto LABEL_222;
              }
LABEL_248:
              v133 = 0;
              goto LABEL_222;
            }
          }
          else if (v78)
          {
            *((_DWORD *)this + 4) = v78 - 1;
            goto LABEL_186;
          }
          __break(0xC471u);
          JUMPOUT(0x196377240);
        }
        v11 = *((_BYTE *)this + 45);
      }
    }
  }
  if ((v11 & 1) != 0)
    goto LABEL_51;
  v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v13)
    goto LABEL_51;
  if ((*(_WORD *)(v13 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196377220);
  }
  v14 = *((_DWORD *)this + 40);
  v15 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1016))(this);
  v16 = v14 - v15;
  if (__OFSUB__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  v17 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1024))(this);
  v18 = v16 - v17;
  if (__OFSUB__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  v19 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1352))(this);
  v20 = v19 << 6;
  if (v19 < -33554432)
    v20 = 0x80000000;
  if (v19 > 0x1FFFFFF)
    v20 = 0x7FFFFFFF;
  v21 = __OFSUB__(v18, v20);
  v22 = v18 - v20;
  if (v21)
    v22 = (v18 >> 31) + 0x7FFFFFFF;
  v23 = v22 & ~(v22 >> 31);
  v24 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 944))(this);
  v25 = v23 - v24;
  if (__OFSUB__(v23, v24))
    v25 = 0x7FFFFFFF;
  v26 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 952))(this);
  v27 = v25 - v26;
  if (__OFSUB__(v25, v26))
    v27 = (v25 >> 31) + 0x7FFFFFFF;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v149 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1352))(this);
    if (v149 >= -33554432)
    {
      v28 = v149 << 6;
      if (v149 > 0x1FFFFFF)
        v28 = 0x7FFFFFFF;
    }
    else
    {
      v28 = 0x80000000;
    }
  }
  else
  {
    v28 = 0;
  }
  v29 = v27 - v28;
  if (__OFSUB__(v27, v28))
    v29 = (v27 >> 31) + 0x7FFFFFFF;
  v30 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1016))(this);
  v31 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1024))(this);
  v32 = v30 + v31;
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  v33 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 944))(this);
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  v35 = v29 & ~(v29 >> 31);
  v36 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 952))(this);
  v37 = v34 + v36;
  if (__OFADD__(v34, v36))
    v37 = (v34 >> 31) + 0x7FFFFFFF;
  v38 = v35 + v37;
  if (__OFADD__(v35, v37))
    v38 = 0x7FFFFFFF;
  v39 = WebCore::RenderBox::contentHeight(this);
  v40 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1000))(this);
  v41 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 1008))(this);
  v42 = v40 + v41;
  if (__OFADD__(v40, v41))
    v42 = (v40 >> 31) + 0x7FFFFFFF;
  v43 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 928))(this);
  v44 = v42 + v43;
  if (__OFADD__(v42, v43))
    v44 = (v42 >> 31) + 0x7FFFFFFF;
  v45 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *))(*(_QWORD *)this + 936))(this);
  v46 = v44 + v45;
  if (__OFADD__(v44, v45))
    v46 = (v44 >> 31) + 0x7FFFFFFF;
  v21 = __OFADD__(v39, v46);
  v47 = v39 + v46;
  if (v21)
    v47 = (v39 >> 31) + 0x7FFFFFFF;
  v48 = *a3;
  if ((*a3 & 0x80000000) == 0 && v48 <= v38)
  {
    v49 = a3[1];
    if ((v49 & 0x80000000) == 0 && v49 <= v47)
      goto LABEL_51;
  }
  if (v38 >= 0)
    v67 = v38;
  else
    v67 = v38 + 1;
  if (v48 <= v67 >> 1)
  {
    v134 = *((_BYTE *)this + 45);
    if ((v134 & 1) == 0)
    {
      v135 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
      if (v135)
      {
        if ((~v135[14] & 0x408) == 0)
        {
          if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v135 + 368))(v135))
            goto LABEL_248;
          v134 = *((_BYTE *)this + 45);
        }
      }
    }
    if ((v134 & 1) == 0)
    {
      v133 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v133 && (*(_WORD *)(v133 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196377280);
      }
LABEL_222:
      WebCore::firstPositionInOrBeforeNode(v133, (WebCore::Node *)a3, (uint64_t)&v155);
      if (v155)
        v136 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
      else
        v136 = 0;
      if (!v136)
        goto LABEL_226;
      goto LABEL_82;
    }
    goto LABEL_248;
  }
  v68 = *((_BYTE *)this + 45);
  if ((v68 & 1) == 0)
  {
    v69 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v69)
    {
      if ((~v69[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v69 + 368))(v69))
        {
LABEL_249:
          LODWORD(v72) = 0;
          v73 = 0;
          v70 = 0;
          v155 = 0;
          goto LABEL_234;
        }
        v68 = *((_BYTE *)this + 45);
      }
    }
  }
  if ((v68 & 1) != 0)
    goto LABEL_249;
  v70 = *(unsigned int **)(*((_QWORD *)this + 3) + 8);
  if (!v70)
    goto LABEL_249;
  if ((v70[7] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196377260);
  }
  if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v70 + 208))(v70) & 1) != 0)
  {
    v71 = *((_WORD *)v70 + 14);
    v70[6] += 2;
    if ((v71 & 1) != 0)
    {
      v72 = *((_QWORD *)v70 + 10);
      if (v72)
        LODWORD(v72) = *(_DWORD *)(v72 + 4);
      v73 = 0;
      v155 = (WebCore::Node *)v70;
    }
    else
    {
      LODWORD(v72) = 0;
      v155 = (WebCore::Node *)v70;
      v73 = 4;
    }
  }
  else
  {
    LODWORD(v72) = 0;
    v70[6] += 2;
    v155 = (WebCore::Node *)v70;
    v73 = 2;
  }
LABEL_234:
  v156 = v72;
  v157 = v73;
  v137 = WTF::RefPtr<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::unspecifiedBoolTypeInstance;
  if (!v70)
    v137 = 0;
  if (v137)
  {
    result = (unsigned int *)WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)&v155, a5);
    *(_BYTE *)(a5 + 16) = 1;
    if (!v70)
      return result;
  }
  else
  {
    result = WebCore::RenderObject::createVisiblePosition((unsigned int *)this, 0, 1, a5);
    if (!v70)
      return result;
  }
  if (v70[6] != 2)
  {
    v70[6] -= 2;
    return result;
  }
  if ((*((_WORD *)v70 + 15) & 0x400) == 0)
  {
    result = v70;
    return WebCore::Node::removedLastRef((WebCore::Node *)result, v66);
  }
  return result;
}

uint64_t WebCore::RenderBlock::offsetForContents(uint64_t this, WebCore::LayoutPoint *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v2 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (v3 || v4 == 0)
  {
    v7 = *(_DWORD *)a2;
    v6 = *((unsigned int *)a2 + 1);
  }
  else if ((*(_BYTE *)(this + 21) & 0x10) != 0)
  {
    v25 = *(_DWORD *)(this + 160);
    v6 = *((unsigned int *)a2 + 1);
    v10 = __OFSUB__(v25, *(_DWORD *)a2);
    v26 = v25 - *(_DWORD *)a2;
    v7 = (v25 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v7 = v26;
  }
  else
  {
    v20 = *(_DWORD *)(this + 164);
    v7 = *(_DWORD *)a2;
    v21 = *((_DWORD *)a2 + 1);
    v10 = __OFSUB__(v20, v21);
    v22 = v20 - v21;
    LODWORD(v6) = (v20 >> 31) + 0x7FFFFFFF;
    if (v10)
      v6 = v6;
    else
      v6 = v22;
  }
  *(_QWORD *)a2 = v7 | (unint64_t)(v6 << 32);
  if ((*(_BYTE *)(this + 22) & 1) == 0
    || ((*(_BYTE *)(this + 45) & 2) != 0
      ? (v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 32) + 8) + 96))
      : (v15 = *(_QWORD *)(this + 96)),
        v8 = v15 & 0x1C00,
        v8 == 2048))
  {
    LODWORD(v8) = 0;
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  if (!v8)
    goto LABEL_9;
  v8 = *(_QWORD *)(*(_QWORD *)(this + 144) + 264);
  if (!v8)
    goto LABEL_9;
  v16 = *(_QWORD *)(v8 + 104);
  v17 = HIDWORD(v16);
  v18 = (_DWORD)v16 << 6;
  if ((int)v16 < -33554432)
    v18 = 0x80000000;
  if ((int)v16 <= 0x1FFFFFF)
    LODWORD(v8) = v18;
  else
    LODWORD(v8) = 0x7FFFFFFF;
  v19 = (_DWORD)v17 << 6;
  if ((int)v17 < -33554432)
    v19 = 0x80000000;
  if ((int)v17 <= 0x1FFFFFF)
    v9 = v19;
  else
    v9 = 0x7FFFFFFF;
LABEL_10:
  v10 = __OFADD__(v7, (_DWORD)v8);
  v11 = v7 + v8;
  v12 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v10)
    v12 = v11;
  v10 = __OFADD__((_DWORD)v6, v9);
  v13 = v6 + v9;
  LODWORD(v6) = (v6 >> 31) + 0x7FFFFFFF;
  if (v10)
    v6 = v6;
  else
    v6 = v13;
  *(_DWORD *)a2 = v12;
  *((_DWORD *)a2 + 1) = v6;
  v14 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  if (v14 <= 5 && ((1 << v14) & 0x2A) != 0)
  {
    if ((*(_BYTE *)(this + 21) & 0x10) != 0)
    {
      v27 = *(_DWORD *)(this + 160);
      v10 = __OFSUB__(v27, v12);
      v12 = v27 - v12;
      v28 = (v27 >> 31) + 0x7FFFFFFF;
      if (v10)
        v12 = v28;
    }
    else
    {
      v23 = *(_DWORD *)(this + 164);
      v10 = __OFSUB__(v23, (_DWORD)v6);
      LODWORD(v6) = v23 - v6;
      v24 = (v23 >> 31) + 0x7FFFFFFF;
      if (v10)
        v6 = v24;
      else
        v6 = v6;
    }
  }
  else
  {
    v12 = *(_DWORD *)a2;
    v6 = *((unsigned int *)a2 + 1);
  }
  *(_QWORD *)a2 = v12 | (unint64_t)(v6 << 32);
  return this;
}

uint64_t WebCore::RenderBlock::fragmentAtBlockOffset(_BYTE *a1, int a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if ((a1[23] & 0x10) == 0)
    return 0;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
  if (!v4)
    return 0;
  v6 = v4;
  if ((*(_BYTE *)(v4 + 328) & 1) != 0
    || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v4 + 248), v5) & 1) != 0)
  {
    return 0;
  }
  v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1);
  if (__OFADD__(v7, a2))
    v8 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v8 = v7 + a2;
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v6 + 2000))(v6, a1, v8, 1);
}

uint64_t WebCore::isChildHitTestCandidate(WebCore::RenderObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  uint64_t v9;
  int v11;
  WebCore::RenderObject *v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  if (a4 && (*(_BYTE *)(*((_QWORD *)a1 + 13) + 239) & 4) != 0)
    return 0;
  if (!*((_DWORD *)a1 + 41) || (*((_DWORD *)a1 + 30) & 0x30) != 0)
    return 0;
  v7 = *((_DWORD *)a1 + 5);
  if ((v7 & 0x1800000) == 0x1000000)
    return 0;
  if ((*((_BYTE *)a1 + 52) & 7) == 1 && (*((_BYTE *)a1 + 53) & 2) != 0)
    return 0;
  if (a2)
  {
    if ((*((_BYTE *)a1 + 45) & 0x40) == 0)
    {
      a1 = WebCore::RenderObject::containingBlock(a1);
      v7 = *((_DWORD *)a1 + 5);
    }
    if ((v7 & 0x10000000) != 0)
    {
      v11 = *(_DWORD *)(a3 + 4);
      v12 = a1;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
      if (!v9)
        return v9 == a2;
      v14 = v9;
      if ((*(_BYTE *)(v9 + 328) & 1) == 0
        && (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v9 + 248), v13) & 1) == 0)
      {
        v15 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v12 + 1288))(v12);
        if (__OFADD__(v15, v11))
          v16 = (v15 >> 31) + 0x7FFFFFFF;
        else
          v16 = v15 + v11;
        v9 = (*(uint64_t (**)(uint64_t, WebCore::RenderObject *, uint64_t, uint64_t))(*(_QWORD *)v14 + 2000))(v14, v12, v16, 1);
        return v9 == a2;
      }
    }
    v9 = 0;
    return v9 == a2;
  }
  return 1;
}

uint64_t WebCore::RenderBlock::computeIntrinsicLogicalWidths(WebCore::RenderBlock *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t result;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderBox *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  char v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char **v36;

  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    result = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((result & 0xFF00000000) != 0)
    {
      *(_DWORD *)a2 = result;
      *(_DWORD *)a3 = result;
    }
  }
  else
  {
    result = WebCore::RenderElement::shouldApplyInlineSizeContainment(this);
    if ((result & 1) == 0)
      result = (uint64_t)WebCore::RenderBlock::computeBlockPreferredLogicalWidths(this, a2, a3);
  }
  v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= *(_DWORD *)a3)
    v7 = *(_DWORD *)a3;
  *(_DWORD *)a3 = v7;
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x10000) == 0)
    goto LABEL_11;
  if ((v8 & 0x1000) != 0)
  {
LABEL_24:
    if ((*((_QWORD *)this + 12) & 0x1C00) != 0xC00)
      goto LABEL_11;
    if ((*((_QWORD *)this + 12) & 0x200000000000000) == 0
      || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586))
    {
LABEL_26:
      {
        if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        {
          v14 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
            goto LABEL_29;
          WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_53:
          *v22 = 1;
LABEL_29:
          result = (*(uint64_t (**)(uint64_t *))(*v14 + 64))(v14);
          if ((result & 1) != 0)
            goto LABEL_11;
          goto LABEL_30;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v14 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
        goto LABEL_29;
      WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
      goto LABEL_53;
    }
    v19 = *((_QWORD *)this + 13);
    v20 = *(unsigned int *)(v19 + 392);
    if ((_DWORD)v20)
    {
      v32 = &v31;
      v33 = &v31;
      v34 = &v31;
      v35 = &v31;
      if ((_DWORD)v20 == -1)
        goto LABEL_68;
    }
    else
    {
      if ((*(_BYTE *)(v19 + 390) & 4) == 0)
      {
LABEL_30:
        v15 = 170;
LABEL_35:
        result = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 8 * v15))(this);
        v18 = (_DWORD)result << 6;
        if ((int)result > 0x1FFFFFF)
          v18 = 0x7FFFFFFF;
        if ((int)result >= -33554432)
          v9 = v18;
        else
          v9 = 0x80000000;
        goto LABEL_12;
      }
      v32 = &v31;
      v33 = &v31;
      v34 = &v31;
      v35 = &v31;
    }
    v36 = &v32;
    ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v20])(&v26, &v36, v19 + 384);
    v32 = &v31;
    v33 = &v31;
    v34 = &v31;
    v35 = &v31;
    v24 = *(unsigned int *)(v19 + 408);
    if ((_DWORD)v24 != -1)
    {
      v36 = &v32;
      ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v24])(&v28, &v36, v19 + 400);
      v30 = 1;
      if (v29 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v29])(&v32, &v28);
      v29 = -1;
      if (v27 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(&v32, &v26);
      goto LABEL_26;
    }
LABEL_68:
    v25 = (WebCore::RenderBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(v25);
  }
  if ((*((_QWORD *)this + 12) & 0xE000) == 0x6000)
  {
    if ((*((_QWORD *)this + 12) & 0x200000000000000) != 0
      && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 586))
    {
      v16 = *((_QWORD *)this + 13);
      v17 = *(unsigned int *)(v16 + 392);
      if ((_DWORD)v17)
      {
        v32 = &v31;
        v33 = &v31;
        v34 = &v31;
        v35 = &v31;
        if ((_DWORD)v17 == -1)
          goto LABEL_68;
      }
      else
      {
        if ((*(_BYTE *)(v16 + 390) & 4) == 0)
          goto LABEL_34;
        v32 = &v31;
        v33 = &v31;
        v34 = &v31;
        v35 = &v31;
      }
      v36 = &v32;
      ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v17])(&v26, &v36, v16 + 384);
      v32 = &v31;
      v33 = &v31;
      v34 = &v31;
      v35 = &v31;
      v23 = *(unsigned int *)(v16 + 408);
      if ((_DWORD)v23 == -1)
        goto LABEL_68;
      v36 = &v32;
      ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v23])(&v28, &v36, v16 + 400);
      v30 = 1;
      if (v29 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v29])(&v32, &v28);
      v29 = -1;
      if (v27 != -1)
        ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(&v32, &v26);
    }
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v13 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_22;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_50;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v13 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_22:
      result = (*(uint64_t (**)(uint64_t *))(*v13 + 64))(v13);
      if (!(_DWORD)result)
      {
LABEL_34:
        v15 = 169;
        goto LABEL_35;
      }
      if ((*((_BYTE *)this + 21) & 0x10) == 0)
        goto LABEL_11;
      goto LABEL_24;
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_50:
    *v21 = 1;
    goto LABEL_22;
  }
LABEL_11:
  v9 = 0;
LABEL_12:
  v10 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a3, v9))
    v10 = *(_DWORD *)a3 + v9;
  *(_DWORD *)a3 = v10;
  v11 = __OFADD__(*(_DWORD *)a2, v9);
  v12 = *(_DWORD *)a2 + v9;
  if (v11)
    v12 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a2 = v12;
  return result;
}

unint64_t WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(WebCore::RenderBox *this)
{
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    return WebCore::RenderBox::explicitIntrinsicInnerHeight(this);
  else
    return WebCore::RenderBox::explicitIntrinsicInnerWidth(this);
}

uint64_t WebCore::RenderBox::intrinsicScrollbarLogicalWidth(WebCore::RenderBox *this)
{
  int v1;
  uint64_t v3;
  WebCore::RenderBox *v4;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x10000) == 0)
    return 0;
  if ((v1 & 0x1000) == 0)
  {
    if ((*((_QWORD *)this + 12) & 0xE000) != 0x6000)
      return 0;
    v4 = this;
    if (!WebCore::RenderBox::canUseOverlayScrollbars(this))
    {
      v3 = 169;
      return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 8 * v3))();
    }
    this = v4;
    if ((*((_BYTE *)v4 + 21) & 0x10) == 0)
      return 0;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) != 0xC00)
    return 0;
  v4 = this;
  if ((WebCore::RenderBox::canUseOverlayScrollbars(this) & 1) != 0)
    return 0;
  v3 = 170;
  return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 8 * v3))();
}

uint64_t WebCore::RenderBox::computeLogicalWidthFromAspectRatio(WebCore::RenderBox *this, WebCore::RenderFragmentContainer *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  WebCore::RenderObject *v9;
  WebCore::RenderObject *v10;
  WebCore::RenderFragmentedFlow *v11;
  WebCore::RenderFragmentContainer *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  WebCore::RenderFragmentContainer *v33;
  WebCore::RenderFragmentContainer *v34;

  v4 = WebCore::RenderBox::computeLogicalWidthFromAspectRatioInternal(this);
  if (!a2)
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
    goto LABEL_3;
  }
  v9 = WebCore::RenderObject::containingBlock(this);
  v10 = v9;
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
    v11 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v9 + 648))(v9);
  else
    v11 = 0;
  v12 = a2;
  if (*((_BYTE *)v10 + 46) == 49)
    goto LABEL_13;
  v33 = 0;
  v34 = 0;
  v12 = a2;
  if (!WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v11, v10, &v34, &v33))
    goto LABEL_13;
  v13 = *((_DWORD *)a2 + 64);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 31) + 8) + 21) & 0x10) == 0)
    v13 = *((_DWORD *)a2 + 65);
  v12 = v34;
  v14 = *((_DWORD *)v34 + 64);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v34 + 31) + 8) + 21) & 0x10) == 0)
    v14 = *((_DWORD *)v34 + 65);
  if (v13 >= v14)
  {
    v32 = *((_DWORD *)v33 + 64);
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 31) + 8) + 20) & 0x1000) == 0)
      v32 = *((_DWORD *)v33 + 65);
    if (v13 <= v32)
      v12 = a2;
    else
      v12 = v33;
    v5 = WebCore::RenderBox::contentLogicalWidth(v10);
    if (!v12)
      goto LABEL_3;
  }
  else
  {
LABEL_13:
    v5 = WebCore::RenderBox::contentLogicalWidth(v10);
  }
  v15 = *((_QWORD *)v12 + 34);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    for (i = 1; ; ++i)
    {
      v22 = v20;
      v23 = *(_QWORD *)(v15 + 16 * v20);
      if (v23 != -1)
      {
        if (!v23)
          goto LABEL_3;
        if (*(WebCore::RenderObject **)(v23 + 8) == v10)
          break;
      }
      v20 = (v22 + i) & v16;
    }
    v24 = *(_QWORD *)(v15 + 16 * v22 + 8);
    if (v24)
    {
      v25 = (unsigned int *)((char *)v10 + 164);
      if (((*((_DWORD *)v10 + 31) >> 13) & 6u) - 2 >= 4)
        v25 = (unsigned int *)((char *)v10 + 160);
      v26 = *v25;
      v27 = *(_DWORD *)(v24 + 4);
      v28 = __OFSUB__(v26, v27);
      v29 = v26 - v27;
      v30 = (v26 >> 31) + 0x7FFFFFFF;
      if (v28)
        v29 = v30;
      v28 = __OFSUB__(v5, v29);
      v31 = v5 - v29;
      if (v28)
        v31 = (v5 >> 31) + 0x7FFFFFFF;
      v5 = v31 & ~(v31 >> 31);
    }
  }
LABEL_3:
  v6 = v5 & ~(v5 >> 31);
  v7 = (unsigned int *)WebCore::RenderObject::containingBlock(this);
  return WebCore::RenderBox::constrainLogicalWidthInFragmentByMinMax(this, v4, v6, v7, (uint64_t)a2, 0);
}

uint64_t WebCore::RenderBox::blockSizeFromAspectRatio(int a1, int a2, int a3, int a4, int a5, char a6, double a7)
{
  double v7;
  int v8;
  int v10;
  double v11;
  unsigned int v12;

  if (a5 == 1 && a3 && (a6 & 1) == 0)
  {
    v7 = (double)a4 * 0.015625 / a7 * 64.0;
    if (v7 >= 2147483650.0)
    {
      v8 = 0x7FFFFFFF;
    }
    else if (v7 <= -2147483650.0)
    {
      v8 = 0x80000000;
    }
    else
    {
      v8 = (int)v7;
    }
    if (v8 <= a2)
      return a2;
    else
      return v8;
  }
  else
  {
    v10 = a4 - a1;
    if (__OFSUB__(a4, a1))
      v10 = (a4 >> 31) + 0x7FFFFFFF;
    v11 = (double)v10 * 0.015625 / a7 * 64.0;
    if (v11 >= 2147483650.0)
    {
      v12 = 0x7FFFFFFF;
    }
    else if (v11 <= -2147483650.0)
    {
      v12 = 0x80000000;
    }
    else
    {
      v12 = (int)v11;
    }
    if (__OFADD__(v12, a2))
      return (v12 >> 31) + 0x7FFFFFFF;
    else
      return v12 + a2;
  }
}

uint64_t WebCore::RenderBoxModelObject::verticalBorderAndPaddingExtent(WebCore::RenderBoxModelObject *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;

  v2 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1000))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1008))(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 928))(this);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 936))(this);
  if (__OFADD__(v6, v7))
    return (v6 >> 31) + 0x7FFFFFFF;
  else
    return v6 + v7;
}

uint64_t WebCore::RenderBox::computeLogicalHeightWithoutLayout(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  _QWORD v19[3];

  v2 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1048))(this);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 + v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1056))(this);
  v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 968))(this);
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  v8 = __OFADD__(v4, v7);
  v9 = v4 + v7;
  if (v8)
    v10 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v10 = v9;
  if (WebCore::RenderElement::shouldApplySizeContainment(this))
  {
    v11 = WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight(this);
    if ((v11 & 0xFF00000000) != 0)
    {
      v12 = v11;
      v13 = 1360;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v13 = 1352;
      v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + v13))(this);
      if (v14 >= -33554432)
        v15 = v14 << 6;
      else
        v15 = 0x80000000;
      if (v14 > 0x1FFFFFF)
        v15 = 0x7FFFFFFF;
      v8 = __OFADD__(v12, v15);
      v16 = v12 + v15;
      if (v8)
        v16 = (v12 >> 31) + 0x7FFFFFFF;
      v8 = __OFADD__(v10, v16);
      v17 = v10 + v16;
      if (v8)
        v10 = (v10 >> 31) + 0x7FFFFFFF;
      else
        v10 = v17;
    }
  }
  (*(void (**)(_QWORD *__return_ptr, WebCore::RenderBox *, _QWORD, _QWORD))(*(_QWORD *)this + 1312))(v19, this, v10, 0);
  return LODWORD(v19[0]);
}

uint64_t WebCore::RenderBlock::lineHeight(char *a1, WTF::StringImpl *a2, int a3, int a4)
{
  char *LineStyle;
  float v5;

  if ((a1[20] & 2) != 0 && !a4)
    return WebCore::RenderBox::lineHeight((uint64_t)a1, 0, a3);
  if ((_DWORD)a2)
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)a1, a2);
  else
    LineStyle = a1 + 80;
  v5 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, a2) * 64.0);
  if (v5 >= 2147500000.0)
    return 0x7FFFFFFFLL;
  if (v5 <= -2147500000.0)
    return 0x80000000;
  return (int)v5;
}

uint64_t WebCore::RenderBox::lineHeight(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  if ((*(_BYTE *)(a1 + 20) & 2) == 0)
    return 0;
  if (a3)
  {
    v4 = *(_DWORD *)(a1 + 160);
    v5 = *(_DWORD *)(a1 + 172);
    v6 = __OFADD__(v5, v4);
    v7 = v5 + v4;
    v8 = (v5 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v8;
    v9 = *(_DWORD *)(a1 + 180);
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 164);
    v11 = *(_DWORD *)(a1 + 168);
    v6 = __OFADD__(v11, v10);
    v7 = v11 + v10;
    v12 = (v11 >> 31) + 0x7FFFFFFF;
    if (v6)
      v7 = v12;
    v9 = *(_DWORD *)(a1 + 176);
  }
  v6 = __OFADD__(v7, v9);
  v13 = v7 + v9;
  v14 = (v7 >> 31) + 0x7FFFFFFF;
  if (v6)
    return v14;
  else
    return v13;
}

unint64_t WebCore::RenderBlock::firstLineBaseline(WebCore::RenderBlock *this)
{
  uint64_t v2;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t i;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v4 = (*(_BYTE *)(v2 + 642) & 3u) - 3 <= 0xFFFFFFFD
    && (*(_BYTE *)(v2 + 462) & 1) == 0
    && (*(_DWORD *)(v2 + 636) & 0xC0000) == 0;
  if (!v4
    && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
    && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
  {
    goto LABEL_17;
  }
  v5 = *((_QWORD *)this + 4);
  if (!v5)
    goto LABEL_18;
  v5 = *(_QWORD *)(v5 + 8);
  if (!v5)
    goto LABEL_18;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v5 + 124)) & 0xE000) != 0
    && ((*(char *)(v5 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    goto LABEL_17;
  }
  v6 = *((unsigned int *)this + 16);
  v5 = v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
  if (!v5)
  {
LABEL_18:
    v9 = 0;
    v10 = 0;
    return v5 | v10 | v9;
  }
  v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v7)
    goto LABEL_17;
  v8 = *(_DWORD *)(v7 + 20);
  if ((v8 & 0x800) != 0 || (v8 & 0x1800000) == 0x1000000)
  {
    v16 = *(unsigned int *)(v7 + 47);
    v5 = v16 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
    if (!v5)
      goto LABEL_18;
    v7 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
    if (!v7)
      goto LABEL_17;
    while (1)
    {
      v17 = *(_DWORD *)(v7 + 20);
      if ((v17 & 0x800) == 0 && (v17 & 0x1800000) != 0x1000000)
        break;
      if (!(*(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
        goto LABEL_17;
      v5 = 0;
      v9 = 0;
      v10 = 0;
      v7 = *(_QWORD *)((*(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
      if (!v7)
        return v5 | v10 | v9;
    }
  }
  if ((*(_BYTE *)(v7 + 45) & 4) == 0)
  {
LABEL_17:
    v5 = 0;
    goto LABEL_18;
  }
  for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1480))(v7);
        (i & 0xFF00000000) == 0;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1480))(v7))
  {
    v13 = *(unsigned int *)(v7 + 47);
    v5 = v13 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
    if (!v5)
      goto LABEL_18;
    v7 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
    if (!v7 || (*(_BYTE *)(v7 + 45) & 4) == 0)
      goto LABEL_17;
    while (1)
    {
      v14 = *(_DWORD *)(v7 + 20);
      if ((v14 & 0x800) == 0 && (v14 & 0x1800000) != 0x1000000)
        break;
      v15 = *(unsigned int *)(v7 + 47);
      v5 = v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
      if (!v5)
        goto LABEL_18;
      v7 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
      if (!v7)
        goto LABEL_17;
      v5 = 0;
      v9 = 0;
      v10 = 0;
      if ((*(_BYTE *)(v7 + 45) & 4) == 0)
        return v5 | v10 | v9;
    }
  }
  v18 = (unsigned int *)(v7 + 152);
  if (((*(_DWORD *)(v7 + 124) >> 13) & 6u) - 2 >= 4)
    v18 = (unsigned int *)(v7 + 156);
  v19 = *v18;
  v20 = __OFADD__(v19, (_DWORD)i);
  v21 = v19 + i;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v20)
    v22 = v21;
  v10 = v22 & 0xFFFFFF00;
  v9 = v22;
  v5 = 0x100000000;
  return v5 | v10 | v9;
}

uint64_t WebCore::RenderBox::firstInFlowChildBox(unint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  unint64_t v4;
  int v5;
  unint64_t v6;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return 0;
  v1 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 20);
  if ((v2 & 0x800) != 0 || (v2 & 0x1800000) == 0x1000000)
  {
    v4 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
    if (v4)
    {
      v1 = *(_QWORD *)(v4 + 8);
      if (v1)
      {
        while (1)
        {
          v5 = *(_DWORD *)(v1 + 20);
          if ((v5 & 0x800) == 0 && (v5 & 0x1800000) != 0x1000000)
            break;
          v6 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
          if (!v6)
            return 0;
          result = 0;
          v1 = *(_QWORD *)(v6 + 8);
          if (!v1)
            return result;
        }
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:
  if ((*(_BYTE *)(v1 + 45) & 4) != 0)
    return v1;
  else
    return 0;
}

unint64_t WebCore::RenderBlock::lastLineBaseline(WebCore::RenderBlock *this)
{
  uint64_t v1;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  WebCore::RenderBlock *v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  WebCore::RenderBlock *v27;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if ((*(_BYTE *)(v1 + 642) & 3u) - 3 <= 0xFFFFFFFD
    && (*(_BYTE *)(v1 + 462) & 1) == 0
    && (*(_DWORD *)(v1 + 636) & 0xC0000) == 0)
  {
    goto LABEL_9;
  }
  v21 = *((_DWORD *)this + 5);
  if ((v21 & 1) != 0)
    goto LABEL_55;
  v22 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v22 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
  v23 = *((_DWORD *)v22 + 24) & 0x1F;
  v24 = v23 > 0x19;
  v25 = (1 << v23) & 0x3528029;
  if (v24 || v25 == 0)
    goto LABEL_9;
  v27 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v27 = *(WebCore::RenderBlock **)(*((_QWORD *)this + 4) + 8);
    if ((v21 & 2) == 0)
    {
LABEL_54:
      if ((*((_QWORD *)v27 + 12) & 0x1FLL) == 0)
        goto LABEL_9;
    }
  }
  else if ((v21 & 2) == 0)
  {
    goto LABEL_54;
  }
LABEL_55:
  if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
  {
    goto LABEL_12;
  }
LABEL_9:
  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_13;
  v4 = *(_QWORD *)(v4 + 8);
  if (!v4)
    goto LABEL_13;
  if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v4 + 124)) & 0xE000) != 0)
    goto LABEL_12;
  v8 = *(unsigned int *)((char *)this + 71);
  v4 = v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32);
  if (!v4)
    goto LABEL_13;
  v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
  if (!v9)
    goto LABEL_12;
  v10 = *(_DWORD *)(v9 + 20);
  if ((v10 & 0x800) != 0 || (v10 & 0x1800000) == 0x1000000)
  {
    v16 = *(unsigned int *)(v9 + 40);
    v4 = v16 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
    if (!v4)
      goto LABEL_13;
    v9 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
    if (!v9)
      goto LABEL_12;
    while (1)
    {
      v17 = *(_DWORD *)(v9 + 20);
      if ((v17 & 0x800) == 0 && (v17 & 0x1800000) != 0x1000000)
        break;
      if (!(*(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)))
        goto LABEL_12;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v9 = *(_QWORD *)((*(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
      if (!v9)
        return v4 | v6 | v5;
    }
  }
  if ((*(_BYTE *)(v9 + 45) & 4) == 0)
  {
LABEL_12:
    v4 = 0;
LABEL_13:
    v5 = 0;
    v6 = 0;
    return v4 | v6 | v5;
  }
  for (i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1488))(v9);
        (i & 0xFF00000000) == 0;
        i = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1488))(v9))
  {
    v18 = *(unsigned int *)(v9 + 40);
    v4 = v18 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
    if (!v4)
      goto LABEL_13;
    v9 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
    if (!v9 || (*(_BYTE *)(v9 + 45) & 4) == 0)
      goto LABEL_12;
    while (1)
    {
      v19 = *(_DWORD *)(v9 + 20);
      if ((v19 & 0x800) == 0 && (v19 & 0x1800000) != 0x1000000)
        break;
      v20 = *(unsigned int *)(v9 + 40);
      v4 = v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
      if (!v4)
        goto LABEL_13;
      v9 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
      if (!v9)
        goto LABEL_12;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      if ((*(_BYTE *)(v9 + 45) & 4) == 0)
        return v4 | v6 | v5;
    }
  }
  v12 = (int *)(v9 + 152);
  if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 >= 4)
    v12 = (int *)(v9 + 156);
  v13 = *v12;
  v14 = __OFADD__((_DWORD)i, v13);
  v15 = i + v13;
  if (v14)
    v15 = (i >> 31) + 0x7FFFFFFF;
  v6 = v15 & 0xFFFFFF00;
  v5 = v15;
  v4 = 0x100000000;
  return v4 | v6 | v5;
}

uint64_t WebCore::RenderBlock::inlineBlockBaseline(WebCore::RenderObject *this, uint64_t a2)
{
  uint64_t v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char *LineStyle;
  void *v12;
  WTF *v13;
  int v14;
  WTF::StringImpl *v15;
  char *v16;
  void *v17;
  float v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  char v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;

  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v6 = (*(_BYTE *)(v4 + 642) & 3u) - 3 <= 0xFFFFFFFD
    && (*(_BYTE *)(v4 + 462) & 1) == 0
    && (*(_DWORD *)(v4 + 636) & 0xC0000) == 0;
  if (v6
    || (*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this)
    || (*((_QWORD *)this + 12) & 0x1FLL) == 0x19
    || *((unsigned __int8 *)this + 46) - 36 <= 4 && (*((_BYTE *)this + 52) & 7) != 1)
  {
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (v7)
      {
        if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v7 + 124)) & 0xE000) == 0)
        {
          v8 = *(unsigned int *)((char *)this + 71);
          if (v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)
            && (v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8)) != 0
            && (*(_BYTE *)(v9 + 45) & 4) != 0)
          {
            v40 = 0;
            do
            {
              v41 = *(_DWORD *)(v9 + 20);
              if ((v41 & 0x800) == 0 && (v41 & 0x1800000) != 0x1000000)
              {
                v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1496))(v9, a2);
                if ((v42 & 0xFF00000000) != 0)
                {
                  v43 = (unsigned int *)(v9 + 152);
                  if (((*(_DWORD *)(v9 + 124) >> 13) & 6u) - 2 >= 4)
                    v43 = (unsigned int *)(v9 + 156);
                  v44 = *v43;
                  v23 = __OFADD__(v44, (_DWORD)v42);
                  v45 = v44 + v42;
                  v35 = (v44 >> 31) + 0x7FFFFFFF;
                  if (!v23)
                    v35 = v45;
                  goto LABEL_43;
                }
                v40 = 1;
              }
              v46 = *(unsigned int *)(v9 + 40);
              if (!(v46 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)))
                break;
              v9 = *(_QWORD *)((v46 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
              if (!v9)
                break;
            }
            while ((*(_BYTE *)(v9 + 45) & 4) != 0);
            if ((v40 & 1) == 0)
              goto LABEL_15;
          }
          else
          {
LABEL_15:
            if ((*(unsigned int (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1712))(this))
            {
              LineStyle = WebCore::RenderElement::firstLineStyle(this, v10);
              v13 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, v12);
              v14 = *((_DWORD *)v13 + 11);
              v16 = WebCore::RenderElement::firstLineStyle(this, v15);
              v18 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v16, v17) * 64.0);
              v19 = (int)v18;
              if (v18 <= -2147500000.0)
                v19 = 0x80000000;
              if (v18 >= 2147500000.0)
                v19 = 0x7FFFFFFF;
              v20 = *((_DWORD *)v13 + 12) + *((_DWORD *)v13 + 11);
              v21 = v20 << 6;
              if (v20 < -33554432)
                v21 = 0x80000000;
              if (v20 <= 0x1FFFFFF)
                v22 = v21;
              else
                v22 = 0x7FFFFFFF;
              v23 = __OFSUB__(v19, v22);
              v24 = v19 - v22;
              v25 = (v19 >> 31) + 0x7FFFFFFF;
              if (!v23)
                v25 = v24;
              v26 = v25 + (v25 < 0);
              if (v14 >= -33554432)
                v27 = v14 << 6;
              else
                v27 = 0x80000000;
              if (v14 > 0x1FFFFFF)
                v27 = 0x7FFFFFFF;
              v23 = __OFADD__(v27, v26 >> 1);
              v28 = v27 + (v26 >> 1);
              v29 = (v27 >> 31) + 0x7FFFFFFF;
              if (v23)
                v30 = v29;
              else
                v30 = v28;
              v31 = *(_QWORD *)this;
              if ((_DWORD)a2)
              {
                v32 = (*(uint64_t (**)(WebCore::RenderObject *))(v31 + 1024))(this);
                v33 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 952))(this);
              }
              else
              {
                v32 = (*(uint64_t (**)(WebCore::RenderObject *))(v31 + 1000))(this);
                v33 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 928))(this);
              }
              v34 = v32 + v33;
              if (__OFADD__(v32, v33))
                v34 = (v32 >> 31) + 0x7FFFFFFF;
              v23 = __OFADD__(v30, v34);
              v35 = v30 + v34;
              if (v23)
                v35 = (v30 >> 31) + 0x7FFFFFFF;
LABEL_43:
              v36 = v35 + (v35 < 0 ? 0x3F : 0);
              LOBYTE(v37) = v36 & 0xC0;
              v38 = v36 & 0xFFFFFF00;
              goto LABEL_44;
            }
          }
        }
        v7 = 0;
      }
    }
    LOBYTE(v37) = 0;
    v38 = 0;
    return v7 | v38 | v37;
  }
  v47 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v47)
    v48 = v47 + 80;
  else
    v48 = 0;
  v49 = WebCore::synthesizedBaseline(this, v48, a2, 1);
  v50 = 1096;
  if (!(_DWORD)a2)
    v50 = 1088;
  v51 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + v50))(this);
  v37 = (v49 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v49, v51))
    v37 = v49 + v51;
  v38 = v37 & 0xFFFFFF00;
LABEL_44:
  v7 = 0x100000000;
  return v7 | v38 | v37;
}

uint64_t WebCore::RenderBlock::getFirstLetter(uint64_t this, WebCore::RenderObject **a2, WebCore::RenderElement **a3, WebCore::RenderObject *a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderObject *v22;

  *a2 = 0;
  *a3 = 0;
  if ((*(_QWORD *)(this + 96) & 0xF80000000000) == 0x100000000000)
    return this;
  v7 = this;
  while (1)
  {
    if ((*(_BYTE *)(v7 + 102) & 2) != 0)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
      if ((_DWORD)this)
      {
        if ((*(_BYTE *)(v7 + 52) & 7) == 1 || *(_BYTE *)(v7 + 46) == 2)
          break;
      }
    }
    v9 = *(_QWORD *)(v7 + 32);
    if (!v9)
      goto LABEL_49;
    if ((*(_BYTE *)(v7 + 20) & 2) != 0)
      goto LABEL_49;
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10)
      goto LABEL_49;
    v11 = *(unsigned int *)(v10 + 64);
    v12 = v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 68) << 32);
    if (v12)
      v12 = *(_QWORD *)((v11 | ((unint64_t)*(unsigned __int8 *)(v10 + 68) << 32)) + 8);
    if (v12 != v7 || ((*(_BYTE *)(v10 + 52) & 7) != 1 ? (v13 = *(_BYTE *)(v10 + 46) == 2) : (v13 = 1), !v13))
    {
LABEL_49:
      *a3 = 0;
      return this;
    }
    v7 = v10;
    if ((*(_BYTE *)(v10 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196378C28);
    }
  }
  *a3 = (WebCore::RenderElement *)v7;
  v14 = *(unsigned int *)(v7 + 64);
  if (!(v14 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)))
    goto LABEL_48;
  v15 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)) + 8);
  *a2 = (WebCore::RenderObject *)v15;
  if (!v15)
    goto LABEL_49;
  while (1)
  {
    if ((*(_BYTE *)(v15 + 45) & 2) != 0)
    {
      if ((WebCore::RenderObject *)v15 != a4)
        return this;
      v18 = *((unsigned __int8 *)a4 + 51);
      v19 = *(unsigned int *)((char *)a4 + 47);
      goto LABEL_42;
    }
    v16 = *(unsigned __int8 *)(v15 + 46);
    if (v16 == 20)
      goto LABEL_41;
    v17 = *(_DWORD *)(v15 + 20);
    if ((v17 & 0x800) != 0 || (v17 & 0x1800000) == 0x1000000)
      break;
    if ((v17 & 2) != 0 || v16 == 2 || v16 == 22)
      return this;
    if ((*(char *)(v15 + 45) & 0x80000000) == 0 && v16 != 12 && v16 != 5)
    {
      if ((*(_BYTE *)(v15 + 102) & 2) != 0)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15);
        if ((_DWORD)this)
          *a3 = (WebCore::RenderElement *)v15;
      }
      v18 = *(unsigned __int8 *)(v15 + 68);
      v19 = *(unsigned int *)(v15 + 64);
      goto LABEL_42;
    }
LABEL_41:
    v18 = *(unsigned __int8 *)(v15 + 51);
    v19 = *(unsigned int *)(v15 + 47);
LABEL_42:
    v20 = v19 | (v18 << 32);
    if (!v20)
      goto LABEL_48;
    v15 = *(_QWORD *)(v20 + 8);
    *a2 = (WebCore::RenderObject *)v15;
    if (!v15)
      goto LABEL_49;
  }
  if ((*(_QWORD *)(v15 + 96) & 0xF80000000000) != 0x100000000000)
    goto LABEL_41;
  v21 = *(unsigned int *)(v15 + 64);
  if (!(v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32)))
  {
LABEL_48:
    *a2 = 0;
    goto LABEL_49;
  }
  v22 = *(WebCore::RenderObject **)((v21 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32)) + 8);
  *a2 = v22;
  if (!v22)
    goto LABEL_49;
  return this;
}

BOOL WebCore::RenderBlock::cachedEnclosingFragmentedFlowNeedsUpdate(WebCore::RenderBlock *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0)
    return 1;
  v2 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    return 1;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 1;
      if (*(WebCore::RenderBlock **)(v10 + 8) == this)
        break;
    }
  }
  v11 = *(_QWORD *)(v2 + 16 * v9 + 8);
  return !v11 || *(_BYTE *)(v11 + 24) == 0;
}

uint64_t WebCore::RenderBlock::locateEnclosingFragmentedFlow(WebCore::RenderBlock *this)
{
  WebCore::RenderObject *v2;
  void *v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
  {
    v15 = *(_QWORD *)WebCore::gRareDataMap;
    if (*(_QWORD *)WebCore::gRareDataMap)
    {
      v16 = *(_DWORD *)(v15 - 8);
      v17 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      for (i = 1; ; ++i)
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 16 * v20);
        if (v23 != -1)
        {
          if (!v23)
            goto LABEL_2;
          if (*(WebCore::RenderBlock **)(v23 + 8) == this)
            break;
        }
        v20 = (v22 + i) & v16;
      }
      v24 = *(_QWORD *)(v15 + 16 * v22 + 8);
      if (v24)
      {
        if (*(_BYTE *)(v24 + 24))
        {
          v25 = *(_QWORD *)(v24 + 16);
          if (v25)
            return *(_QWORD *)(v25 + 8);
          else
            return 0;
        }
      }
    }
  }
LABEL_2:
  v2 = WebCore::RenderObject::containingBlock(this);
  if (v2)
  {
    v4 = *((_DWORD *)v2 + 4) + 1;
    *((_DWORD *)v2 + 4) = v4;
    if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
    {
      v26 = (int *)v2;
      v5 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 648))();
      v2 = (WebCore::RenderObject *)v26;
      v4 = v26[4];
      if (v4)
        goto LABEL_5;
    }
    else
    {
      v5 = 0;
      if (v4)
      {
LABEL_5:
        *((_DWORD *)v2 + 4) = v4 - 1;
        goto LABEL_6;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x196379048);
  }
  v5 = 0;
LABEL_6:
  v7 = WebCore::RenderBlock::ensureBlockRareData(this, v3);
  if (!*(_BYTE *)(v7 + 24))
  {
    if (v5)
    {
      v9 = *(_QWORD *)(v5 + 8);
      if (!v9)
      {
        v9 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v9 = 1;
        *(_QWORD *)(v9 + 8) = v5;
        v14 = *(WTF **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = v9;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
          {
            WTF::fastFree(v14, v13);
            v9 = *(_QWORD *)(v5 + 8);
            if (!v9)
              goto LABEL_18;
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
      }
      ++*(_DWORD *)v9;
    }
    else
    {
      v9 = 0;
    }
LABEL_18:
    *(_QWORD *)(v7 + 16) = v9;
    *(_BYTE *)(v7 + 24) = 1;
    return v5;
  }
  if (v5)
  {
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
      goto LABEL_9;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v5;
    v12 = *(WTF **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v8;
    if (!v12)
      goto LABEL_9;
    if (*(_DWORD *)v12 != 1)
    {
      --*(_DWORD *)v12;
LABEL_9:
      ++*(_DWORD *)v8;
      goto LABEL_14;
    }
    WTF::fastFree(v12, v6);
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
      goto LABEL_9;
  }
  else
  {
    v8 = 0;
  }
LABEL_14:
  v10 = *(WTF **)(v7 + 16);
  *(_QWORD *)(v7 + 16) = v8;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v6);
    else
      --*(_DWORD *)v10;
  }
  return v5;
}

uint64_t WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(uint64_t this, WebCore::RenderFragmentedFlow *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderFragmentedFlow *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  uint64_t v16;

  if ((*(_BYTE *)(this + 23) & 0x10) == 0)
    return this;
  v2 = this;
  if ((*(_WORD *)(this + 69) & 0x400) == 0)
    goto LABEL_3;
  v3 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    goto LABEL_4;
  v9 = *(_DWORD *)(v3 - 8);
  v10 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  for (i = 1; ; v13 = (v15 + i++) & v9)
  {
    v15 = v13;
    v16 = *(_QWORD *)(v3 + 16 * v13);
    if (v16 != -1)
    {
      if (!v16)
        goto LABEL_3;
      if (*(_QWORD *)(v16 + 8) == this)
        break;
    }
  }
  v3 = *(_QWORD *)(v3 + 16 * v15 + 8);
  if (!v3)
    goto LABEL_4;
  if (*(_BYTE *)(v3 + 24))
  {
    v3 = *(_QWORD *)(v3 + 16);
    if (v3)
      v3 = *(_QWORD *)(v3 + 8);
  }
  else
  {
LABEL_3:
    v3 = 0;
  }
LABEL_4:
  if (v3)
    v4 = (WebCore::RenderFragmentedFlow *)v3;
  else
    v4 = a2;
  v5 = WebCore::RenderBlock::ensureBlockRareData((WebCore::RenderBlock *)this, a2);
  if (*(_BYTE *)(v5 + 24))
  {
    v7 = v5;
    v8 = *(WTF **)(v5 + 16);
    *(_QWORD *)(v7 + 16) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v6);
      else
        --*(_DWORD *)v8;
    }
    *(_BYTE *)(v7 + 24) = 0;
  }
  return WebCore::RenderElement::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(v2, (uint64_t)v4);
}

uint64_t WebCore::RenderBlock::paginationStrut(WebCore::RenderBlock *this)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0)
    return 0;
  v2 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; v7 = (v9 + i++) & v3)
  {
    v9 = v7;
    v10 = *(_QWORD *)(v2 + 16 * v7);
    if (v10 != -1)
    {
      if (!v10)
        return 0;
      if (*(WebCore::RenderBlock **)(v10 + 8) == this)
        break;
    }
  }
  v11 = *(unsigned int **)(v2 + 16 * v9 + 8);
  if (v11)
    return *v11;
  else
    return 0;
}

uint64_t WebCore::RenderBlock::setPaginationStrut(uint64_t result, void *a2)
{
  WebCore::RenderBlock *v2;
  WebCore::RenderBlock *v3;
  int v4;
  void *v5;

  v2 = (WebCore::RenderBlock *)result;
  if ((*(_WORD *)(result + 69) & 0x400) == 0
    || (v3 = (WebCore::RenderBlock *)result,
        v5 = a2,
        result = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, result), v2 = v3, a2 = v5, !result))
  {
    if (!(_DWORD)a2)
      return result;
    v4 = (int)a2;
    result = WebCore::RenderBlock::ensureBlockRareData(v2, a2);
    LODWORD(a2) = v4;
  }
  *(_DWORD *)result = (_DWORD)a2;
  return result;
}

uint64_t WebCore::RenderBlock::setPageLogicalOffset(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  v2 = (int)a2;
  if ((*(_WORD *)(result + 69) & 0x400) == 0)
    goto LABEL_2;
  v4 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    goto LABEL_2;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(_QWORD *)(v4 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        goto LABEL_2;
      if (*(_QWORD *)(v12 + 8) == result)
        break;
    }
    v9 = (v11 + i) & v5;
  }
  v3 = *(_QWORD *)(v4 + 16 * v11 + 8);
  if (!v3)
  {
LABEL_2:
    if (!(_DWORD)a2)
      return result;
    result = WebCore::RenderBlock::ensureBlockRareData((WebCore::RenderBlock *)result, a2);
    v3 = result;
  }
  *(_DWORD *)(v3 + 4) = v2;
  return result;
}

void WebCore::RenderBlock::boundingRects(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  WebCore::RenderObject *v30;
  WebCore::RenderObject *v31;
  int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  int i;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v58;
  __int128 v59;

  if ((*(_WORD *)(a1 + 69) & 0x10) == 0)
    goto LABEL_2;
  ++dword_1ECE91378;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13);
  if (v14 == -1 || v14 != v8)
  {
    v44 = 1;
    do
    {
      v13 = ((_DWORD)v13 + v44) & v9;
      v45 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13);
      ++v44;
    }
    while (v45 == -1 || v45 != v8);
  }
  v16 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v13 + 8) + 16);
  if (v16 && (v17 = *v16) != 0 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
  {
    v19 = *a3;
    v20 = a3[1];
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
    v22 = v20 - v21;
    if (__OFSUB__(v20, v21))
      v22 = (v20 >> 31) + 0x7FFFFFFF;
    v23 = *(_DWORD *)(a1 + 160);
    v24 = *(_DWORD *)(a1 + 164);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      v26 = (v24 >> 31) + 0x7FFFFFFF;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      v28 = (v26 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v59 = __PAIR64__(v22, v19);
    *((_QWORD *)&v59 + 1) = __PAIR64__(v28, v23);
    v29 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<WebCore::LayoutRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayoutRect>(a2, (unint64_t)&v59);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)a2 + 16 * v29) = v59;
      ++*(_DWORD *)(a2 + 12);
    }
    if ((*(_WORD *)(a1 + 69) & 0x10) != 0)
    {
      {
        v47 = dword_1ECE91378 + 1;
      }
      else
      {
        WebCore::continuationChainNodeMap(void)::map = 0;
        *(_QWORD *)&dword_1ECE91378 = 0;
        v47 = 1;
      }
      dword_1ECE91378 = v47;
      v48 = *(_QWORD *)(a1 + 8);
      v49 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v50 = (~(v48 << 32) + v48) ^ ((unint64_t)(~(v48 << 32) + v48) >> 22);
      v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
      v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
      v53 = v49 & ((v52 >> 31) ^ v52);
      for (i = 1; ; ++i)
      {
        v55 = v53;
        v56 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v53);
        if (v56 != -1 && v56 == v48)
          break;
        v53 = (v55 + i) & v49;
      }
      v58 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v55 + 8);
      while (1)
      {
        v58 = (_QWORD *)v58[2];
        if (!v58)
          break;
        if (*v58)
          v30 = *(WebCore::RenderObject **)(*v58 + 8);
        else
          v30 = 0;
        if (v30 && (*((_BYTE *)v30 + 45) & 0x20) != 0)
          goto LABEL_24;
      }
    }
    v30 = 0;
LABEL_24:
    v31 = WebCore::RenderObject::containingBlock(v30);
    v33 = *(_DWORD *)(a1 + 152);
    v32 = *(_DWORD *)(a1 + 156);
    v34 = a3[1];
    v35 = __OFSUB__(*a3, v33);
    v36 = *a3 - v33;
    if (v35)
      v36 = (*a3 >> 31) + 0x7FFFFFFF;
    v35 = __OFSUB__(v34, v32);
    v37 = v34 - v32;
    if (v35)
      v37 = (v34 >> 31) + 0x7FFFFFFF;
    v39 = *((_DWORD *)v31 + 38);
    v38 = *((_DWORD *)v31 + 39);
    v35 = __OFADD__(v36, v39);
    v40 = v36 + v39;
    LODWORD(v41) = (v36 >> 31) + 0x7FFFFFFF;
    if (v35)
      v41 = v41;
    else
      v41 = v40;
    v35 = __OFADD__(v37, v38);
    v42 = v37 + v38;
    LODWORD(v43) = (v37 >> 31) + 0x7FFFFFFF;
    if (v35)
      v43 = v43;
    else
      v43 = v42;
    *(_QWORD *)&v59 = v41 | (v43 << 32);
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v18 + 384))(v18, a2, &v59);
  }
  else
  {
LABEL_2:
    v6 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)&v59 = *(_QWORD *)a3;
    *((_QWORD *)&v59 + 1) = v6;
    v7 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<WebCore::LayoutRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayoutRect>(a2, (unint64_t)&v59);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)a2 + 16 * v7) = v59;
      ++*(_DWORD *)(a2 + 12);
    }
  }
}

uint64_t WebCore::RenderBoxModelObject::collectAbsoluteQuadsForContinuation(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float32x2_t v19;
  int v20;
  int v21;
  int32x2_t v22;
  float32x2_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;

  if ((*(_WORD *)(result + 69) & 0x10) != 0)
  {
    ++dword_1ECE91378;
    v5 = *(_QWORD *)(result + 8);
    v6 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v10);
    if (v11 == -1 || v11 != v5)
    {
      v13 = 1;
      do
      {
        v10 = ((_DWORD)v10 + v13) & v6;
        v14 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v10);
        ++v13;
      }
      while (v14 == -1 || v14 != v5);
    }
    v16 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v10 + 8) + 16);
    if (v16)
    {
      v17 = *v16;
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = (float32x2_t)vdup_n_s32(0x3C800000u);
          do
          {
            if ((*(_BYTE *)(v18 + 45) & 0x40) != 0)
            {
              v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1248))(v18);
              if (v20 == 0x80000000)
                v21 = 0x7FFFFFFF;
              else
                v21 = -v20;
              v22.i32[0] = v21;
              v22.i32[1] = *(_DWORD *)(v18 + 160);
              v23 = vmul_f32(vcvt_f32_s32(v22), v19);
              v24 = *(_DWORD *)(v18 + 164);
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1248))(v18);
              if (__OFADD__(v24, v25))
                v26 = (v24 >> 31) + 0x7FFFFFFF;
              else
                v26 = v24 + v25;
              v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 1256))(v18);
              v28 = v26 + v27;
              if (__OFADD__(v26, v27))
                v28 = (v26 >> 31) + 0x7FFFFFFF;
              LODWORD(v42) = 0;
              *(float32x2_t *)((char *)&v42 + 4) = v23;
              *((float *)&v42 + 3) = (float)v28 * 0.015625;
            }
            else
            {
              v42 = 0uLL;
            }
            result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v18 + 1168))(v18, &v42, a2, a3);
            if ((*(_WORD *)(v18 + 69) & 0x10) == 0)
              break;
            ++dword_1ECE91378;
            v29 = *(_QWORD *)(v18 + 8);
            v30 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
            v31 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
            v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
            v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
            v34 = v30 & ((v33 >> 31) ^ v33);
            v35 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v34);
            if (v35 == -1 || v35 != v29)
            {
              v37 = 1;
              do
              {
                v34 = ((_DWORD)v34 + v37) & v30;
                v38 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v34);
                ++v37;
              }
              while (v38 == -1 || v38 != v29);
            }
            v40 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v34 + 8) + 16);
            if (!v40)
              break;
            v41 = *v40;
            if (!v41)
              break;
            v18 = *(_QWORD *)(v41 + 8);
          }
          while (v18);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBlock::rectWithOutlineForRepaint(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 440))(a1, a2, 0xC00000000);
  if (__OFSUB__((_DWORD)v5, a3))
    v6 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v6 = (v5 - a3);
  if (__OFSUB__(HIDWORD(v5), a3))
    v7 = ((HIDWORD(v5) >> 31) + 0x7FFFFFFF);
  else
    v7 = (HIDWORD(v5) - a3);
  if ((*(_WORD *)(a1 + 69) & 0x20) != 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
    if (__OFSUB__((_DWORD)v7, v8))
      v7 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v7 = (v7 - v8);
  }
  return v6 | (v7 << 32);
}

unsigned int *WebCore::RenderBlock::updateHitTestResult(unsigned int *this, WebCore::HitTestResult *a2, const WebCore::LayoutPoint *a3)
{
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;

  if (!*((_QWORD *)a2 + 9))
  {
    this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 320))(this);
    if (this)
    {
      v6 = this;
      this[6] += 2;
      v7 = this;
      if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
        || (v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 368))(this), v7 = v6, !v8)
        || (v7 = (unsigned int *)*((_QWORD *)v6 + 14)) != 0 && (v7 = (unsigned int *)*((_QWORD *)v7 + 1)) != 0)
      {
        v7[6] += 2;
      }
      this = (unsigned int *)*((_QWORD *)a2 + 9);
      *((_QWORD *)a2 + 9) = v7;
      if (this)
      {
        if (this[6] == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
        }
        else
        {
          this[6] -= 2;
        }
      }
      if (!*((_QWORD *)a2 + 10))
      {
        v9 = v6;
        if ((~*((unsigned __int16 *)v6 + 14) & 0x408) != 0
          || (v10 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 368))(v6), v9 = v6, !v10)
          || (v9 = (unsigned int *)*((_QWORD *)v6 + 14)) != 0 && (v9 = (unsigned int *)*((_QWORD *)v9 + 1)) != 0)
        {
          v9[6] += 2;
        }
        this = (unsigned int *)*((_QWORD *)a2 + 10);
        *((_QWORD *)a2 + 10) = v9;
        if (this)
        {
          if (this[6] == 2)
          {
            if ((*((_WORD *)this + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef((WebCore::Node *)this, v5);
          }
          else
          {
            this[6] -= 2;
          }
        }
      }
      *((_QWORD *)a2 + 12) = *(_QWORD *)a3;
      if (v6[6] == 2)
      {
        if ((*((_WORD *)v6 + 15) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
      }
      else
      {
        v6[6] -= 2;
      }
    }
  }
  return this;
}

void WebCore::RenderBlock::addFocusRingRects(uint64_t a1, WebCore::RenderObject *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  float v23;
  int v24;
  int v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  __int128 *v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int i;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  WebCore::RenderObject *v59;
  const WebCore::FloatPoint *v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  WebCore::RenderObject *v72;
  float32x2_t v73;
  __int128 v74;

  if ((*(_WORD *)(a1 + 69) & 0x10) != 0)
  {
    {
      v33 = dword_1ECE91378 + 1;
    }
    else
    {
      WebCore::continuationChainNodeMap(void)::map = 0;
      *(_QWORD *)&dword_1ECE91378 = 0;
      v33 = 1;
    }
    dword_1ECE91378 = v33;
    v34 = *(_QWORD *)(a1 + 8);
    v35 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v36 = (~(v34 << 32) + v34) ^ ((unint64_t)(~(v34 << 32) + v34) >> 22);
    v37 = 9 * ((v36 + ~(v36 << 13)) ^ ((v36 + ~(v36 << 13)) >> 8));
    v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
    v39 = v35 & ((v38 >> 31) ^ v38);
    for (i = 1; ; ++i)
    {
      v41 = v39;
      v42 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v39);
      if (v42 != -1 && v42 == v34)
        break;
      v39 = (v41 + i) & v35;
    }
    v44 = *(_QWORD **)(WebCore::continuationChainNodeMap(void)::map + 16 * v41 + 8);
    while (1)
    {
      v44 = (_QWORD *)v44[2];
      if (!v44)
        break;
      if (*v44)
        v45 = *(_QWORD *)(*v44 + 8);
      else
        v45 = 0;
      if (v45 && (*(_BYTE *)(v45 + 45) & 0x20) != 0)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v45 + 24) + 8);
        if ((*(_WORD *)(v46 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19637A044);
        }
        v47 = *(_QWORD *)(v46 + 64) & 0xFFFFFFFFFFFFLL;
        if (v47)
          v48 = (*(_BYTE *)(v47 + 45) & 2) == 0;
        else
          v48 = 1;
        if (!v48)
        {
          __break(0xC471u);
          JUMPOUT(0x19637A084);
        }
        if ((*(_BYTE *)(v47 + 45) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19637A064);
        }
        v49 = *(_QWORD *)(v45 + 152);
        if (*(_QWORD *)(v47 + 152))
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
        else
          v50 = 0;
        if (v49)
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
        else
          v51 = 0;
        v52 = a3[1];
        v53 = v52 - v50;
        if (__OFSUB__(v52, v50))
          v53 = (v52 >> 31) + 0x7FFFFFFF;
        v54 = *(_DWORD *)(a1 + 160);
        v55 = *(_DWORD *)(a1 + 164);
        v56 = v55 + v50;
        if (__OFADD__(v55, v50))
          v56 = (v55 >> 31) + 0x7FFFFFFF;
        v57 = v56 + v51;
        if (__OFADD__(v56, v51))
          v57 = (v56 >> 31) + 0x7FFFFFFF;
        LODWORD(v74) = *a3;
        *(_QWORD *)((char *)&v74 + 4) = __PAIR64__(v54, v53);
        HIDWORD(v74) = v57;
        if (v54 >= 1 && v57 >= 1)
        {
          v58 = *((unsigned int *)a2 + 3);
          if ((_DWORD)v58 == *((_DWORD *)a2 + 2))
          {
            WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatRect&>((uint64_t)a2, (unint64_t)&v74);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)a2 + 16 * v58) = v74;
            ++*((_DWORD *)a2 + 3);
          }
        }
        v72 = (WebCore::RenderObject *)v45;
        v12 = 0;
        goto LABEL_8;
      }
    }
  }
  if (*(_DWORD *)(a1 + 160) && *(_DWORD *)(a1 + 164))
  {
    v8 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)&v74 = *(_QWORD *)a3;
    *((_QWORD *)&v74 + 1) = v8;
    v9 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v9 == *((_DWORD *)a2 + 2))
    {
      v32 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v9 + 1, (unint64_t)&v74);
      v9 = *((unsigned int *)a2 + 3);
      v10 = *(_QWORD *)a2;
      v11 = *v32;
    }
    else
    {
      v10 = *(_QWORD *)a2;
      v11 = v74;
    }
    *(_OWORD *)(v10 + 16 * v9) = v11;
    v72 = 0;
    ++*((_DWORD *)a2 + 3);
  }
  else
  {
    v72 = 0;
  }
  v12 = 1;
LABEL_8:
  if ((*(_BYTE *)(a1 + 22) & 1) == 0 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 22) & 4) != 0)
      (*(void (**)(uint64_t, WebCore::RenderObject *, _DWORD *, uint64_t))(*(_QWORD *)a1 + 1800))(a1, a2, a3, a4);
    v13 = *(unsigned __int8 *)(a1 + 68);
    for (j = *(unsigned int *)(a1 + 64); ; j = *(unsigned int *)(v16 + 47))
    {
      v15 = j | (v13 << 32);
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 8);
      if (!v16)
        break;
      if ((*(_BYTE *)(v16 + 45) & 4) != 0)
      {
LABEL_17:
        if (*(_BYTE *)(v16 + 46) != 20)
        {
          if (*(_QWORD *)(v16 + 144))
          {
            *(_QWORD *)&v74 = 0;
            v23 = WebCore::RenderObject::localToContainerPoint(v16, (uint64_t *)&v74, a4, 2u);
          }
          else
          {
            v17 = a3[1];
            v18 = *(_DWORD *)(v16 + 152);
            v19 = *(_DWORD *)(v16 + 156);
            v20 = __OFADD__(*a3, v18);
            v21 = *a3 + v18;
            v22 = (*a3 >> 31) + 0x7FFFFFFF;
            if (!v20)
              v22 = v21;
            v23 = (float)v22 * 0.015625;
            v20 = __OFADD__(v17, v19);
            v24 = v17 + v19;
            v25 = (v17 >> 31) + 0x7FFFFFFF;
            if (v20)
              v24 = v25;
            v26 = (float)v24 * 0.015625;
          }
          v27 = floorf(v23 * 64.0);
          v28 = (int)v27;
          if (v27 <= -2147500000.0)
            v28 = 0x80000000;
          if (v27 >= 2147500000.0)
            v28 = 0x7FFFFFFFLL;
          v29 = floorf(v26 * 64.0);
          v30 = (unint64_t)(int)v29 << 32;
          if (v29 <= -2147500000.0)
            v30 = 0x8000000000000000;
          if (v29 >= 2147500000.0)
            v30 = 0x7FFFFFFF00000000;
          *(_QWORD *)&v74 = v30 | v28;
          (*(void (**)(uint64_t, WebCore::RenderObject *, __int128 *, uint64_t))(*(_QWORD *)v16 + 600))(v16, a2, &v74, a4);
        }
        while (1)
        {
          v31 = *(unsigned int *)(v16 + 47);
          if (!(v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)))
            goto LABEL_38;
          v16 = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(v16 + 51) << 32)) + 8);
          if (!v16)
            goto LABEL_38;
          if ((*(_BYTE *)(v16 + 45) & 4) != 0)
            goto LABEL_17;
        }
      }
      v13 = *(unsigned __int8 *)(v16 + 51);
    }
  }
LABEL_38:
  if ((v12 & 1) == 0)
  {
    v59 = WebCore::RenderObject::containingBlock(v72);
    v62 = *((_DWORD *)v59 + 38);
    v61 = *((_DWORD *)v59 + 39);
    v63 = a3[1];
    v20 = __OFADD__(*a3, v62);
    v64 = *a3 + v62;
    if (v20)
      v64 = (*a3 >> 31) + 0x7FFFFFFF;
    v20 = __OFADD__(v63, v61);
    v65 = v63 + v61;
    if (v20)
      v65 = (v63 >> 31) + 0x7FFFFFFF;
    v67 = *(_DWORD *)(a1 + 152);
    v66 = *(_DWORD *)(a1 + 156);
    v20 = __OFSUB__(v64, v67);
    v68 = v64 - v67;
    v69 = (v64 >> 31) + 0x7FFFFFFF;
    if (!v20)
      v69 = v68;
    v20 = __OFSUB__(v65, v66);
    v70 = v65 - v66;
    v71 = (v65 >> 31) + 0x7FFFFFFF;
    if (!v20)
      v71 = v70;
    v73 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v71, v69)), (float32x2_t)vdup_n_s32(0x3C800000u));
    *(_QWORD *)&v74 = WebCore::flooredLayoutPoint((WebCore *)&v73, v60);
    WebCore::RenderInline::addFocusRingRects((uint64_t)v72, a2, (int32x2_t *)&v74, a4);
  }
}

WebCore::RenderObject *WebCore::RenderBlock::offsetFromLogicalTopOfFirstPage(WebCore::RenderBlock *this)
{
  WebCore::RenderBlock *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  WebCore::RenderObject *result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WebCore::RenderFragmentedFlow *v17;
  uint64_t v18;
  char v19;
  const WebCore::RenderBlock *v20;

  v1 = this;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v3 = *(unsigned int *)(v2 + 508);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 496) + 8 * v3 - 8);
    if (v4)
    {
      v5 = 0;
      result = 0;
      if ((*(_BYTE *)v4 & 2) == 0)
        return result;
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = 1;
LABEL_4:
  if ((*((_BYTE *)v1 + 23) & 0x10) != 0)
  {
    v20 = v1;
    v18 = v4;
    v19 = v5;
    v17 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)v1 + 648))(v1);
    v5 = v19;
    v4 = v18;
    v1 = v20;
    if (v17)
      return WebCore::RenderFragmentedFlow::offsetFromLogicalTopOfFirstFragment(v17, v20);
  }
  if ((v5 & 1) != 0)
    return 0;
  v8 = *(_DWORD *)(v4 + 56);
  v7 = *(_DWORD *)(v4 + 60);
  v11 = v4 + 76;
  v9 = *(_DWORD *)(v4 + 76);
  v10 = *(_DWORD *)(v11 + 4);
  v12 = __OFSUB__(v8, v9);
  v13 = v8 - v9;
  v14 = (v8 >> 31) + 0x7FFFFFFF;
  if (v12)
    v13 = v14;
  v12 = __OFSUB__(v7, v10);
  v15 = v7 - v10;
  v16 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v16 = v15;
  if ((*((_BYTE *)v1 + 21) & 0x10) != 0)
    return (WebCore::RenderObject *)v13;
  else
    return (WebCore::RenderObject *)v16;
}

BOOL WebCore::RenderBlock::childBoxIsUnsplittableForFragmentation(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  int v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  WebCore::RenderBlock *v10;

  if ((*((_BYTE *)this + 23) & 0x10) != 0
    && (v10 = this, v8 = (*(uint64_t (**)(void))(*(_QWORD *)this + 648))(), this = v10, v8)
    && (v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 2048))(v8), this = v10, (v9 & 1) != 0))
  {
    v5 = 0;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                   + 248);
    v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 496) + 8 * *(unsigned int *)(v4 + 508) - 8) + 72) != 0;
  }
  if (WebCore::RenderBox::isUnsplittableForPagination(a2))
    return 1;
  v6 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 641) & 7;
  if (v6 == 1)
    return 1;
  if (!v3)
  {
    if (!v5)
      return 0;
    return v6 == 3;
  }
  result = v6 == 2;
  if (v6 != 2 && v5)
    return v6 == 3;
  return result;
}

BOOL WebCore::RenderBox::isUnsplittableForPagination(WebCore::RenderBox *this)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  WebCore::Element *v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v31;
  int v32;
  __int16 v33;
  char v34;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 2) != 0)
    return 1;
  if ((v1 & 0x1000) != 0)
  {
    if ((v1 & 0x10000) == 0 || ((*((_DWORD *)this + 24) >> 10) & 7u) - 3 > 1)
      goto LABEL_4;
  }
  else if ((v1 & 0x10000) == 0 || ((unsigned __int16)*((_DWORD *)this + 24) >> 13) - 3 >= 2)
  {
    goto LABEL_4;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382))
    goto LABEL_4;
  v12 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v14 = v13 + 4;
  if (v12 >= 4)
    v14 = v13 + 12;
  v15 = *(unsigned __int8 *)(v14 + 4);
  v16 = (v15 - 7) < 4 || v15 == 0;
  if (!v16 && (v15 - 5) > 1)
    return 1;
  v17 = v13 + 28;
  if (v12 >= 4)
    v17 = v13 + 44;
  v18 = *(unsigned __int8 *)(v17 + 4);
  v19 = (v18 - 7) < 4 || v18 == 0;
  if (!v19 && (v18 - 5) >= 2)
  {
    if (v12 <= 3)
    {
      if (*(_BYTE *)(v13 + 32) == 13)
        goto LABEL_92;
      v28 = v13 + 28;
    }
    else
    {
      if (*(_BYTE *)(v13 + 48) == 13)
        goto LABEL_34;
      v28 = v13 + 44;
    }
    if ((*(_BYTE *)(v28 + 4) & 0xF7) != 3)
      return 1;
    v32 = 100;
    v33 = 3;
    v34 = 0;
    v10 = 1;
    if ((unint64_t)WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v32, 1) >> 32)
      return v10;
    v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v12 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
LABEL_34:
  if (v12 >= 4)
  {
    v20 = 0;
    v21 = v13 + 36;
    goto LABEL_36;
  }
LABEL_92:
  v21 = v13 + 20;
  v20 = 1;
LABEL_36:
  v22 = *(unsigned __int8 *)(v21 + 4);
  v23 = (v22 - 7) < 4 || v22 == 0;
  if (!v23 && (v22 - 5) >= 2)
  {
    v24 = v13 + 20;
    v25 = v13 + 36;
    if ((v20 & 1) != 0)
      v26 = v24;
    else
      v26 = v25;
    v27 = *(unsigned __int8 *)(v26 + 4);
    if (v27 != 11)
    {
      if (v27 == 13)
        goto LABEL_4;
      if (*(_BYTE *)(v26 + 6))
      {
        if (*(float *)v26 <= 0.0)
          goto LABEL_4;
      }
      else if (*(int *)v26 < 1)
      {
        goto LABEL_4;
      }
    }
    if ((v20 & 1) != 0)
      v25 = v24;
    if ((*(_BYTE *)(v25 + 4) & 0xF7) != 3)
      return 1;
    v32 = 100;
    v33 = 3;
    v34 = 0;
    v10 = 1;
    if ((unint64_t)WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v32, 1) >> 32)
      return v10;
  }
LABEL_4:
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v4 + 124)) & 0xE000) != 0)
        return 1;
    }
  }
  if ((*((_BYTE *)this + 21) & 8) != 0
    && (*((_QWORD *)this + 12) & 0xF80000000000) == 0x100000000000
    && *(int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 52) > 0)
  {
    return 1;
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (v5 && (*((_WORD *)v5 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19637A590);
    }
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v7 = (*(_DWORD *)(v6 + 636) >> 18) & 3;
  if (!v7)
    goto LABEL_12;
  v31 = *((_BYTE *)this + 96);
  if ((v31 & 0x1F) != 0xD && (v31 & 0x1Eu) - 14 > 0xFFFFFFF5)
    goto LABEL_12;
  if (v7 == 2)
    return 1;
  if (!v5)
    goto LABEL_12;
  if (!WebCore::Element::isRelevantToUser(v5))
    return 1;
  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
LABEL_12:
  v8 = *(_BYTE *)(v6 + 642) & 3;
  if (v8 != 1)
  {
    v9 = *(_BYTE *)(v6 + 462);
    if (v8 == 2)
      v9 |= 0x19u;
    if ((v9 & 4) == 0)
      return 0;
  }
  if ((*((_BYTE *)this + 20) & 1) == 0 && !WebCore::RenderObject::isAtomicInlineLevelBox(this))
    return 0;
  if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x19)
    return 0;
  v29 = *((unsigned __int8 *)this + 46);
  if ((v29 - 36) <= 4 && v29 != 36)
    return 0;
  return v29 != 35 && v29 != 63;
}

uint64_t WebCore::RenderBlock::computeFragmentRangeForBoxChild(WebCore::RenderBlock *this, const WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  char *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  if ((*((_BYTE *)this + 23) & 0x10) != 0)
    v4 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this);
  else
    v4 = 0;
  v5 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a2 + 1288))(a2);
  if ((*((_BYTE *)this + 23) & 0x10) != 0
    && (v21 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 648))(this)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 2048))(v21) & 1) != 0)
  {
    v8 = 0;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                   + 248);
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 496) + 8 * *(unsigned int *)(v7 + 508) - 8) + 72) != 0;
  }
  if (WebCore::RenderBox::isUnsplittableForPagination(a2))
    goto LABEL_15;
  v9 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 641) & 7;
  if (v9 == 1)
    goto LABEL_15;
  if (v6)
  {
    v10 = v9 == 2;
    if (v9 != 2 && v8)
      v10 = v9 == 3;
    if (!v10)
      goto LABEL_21;
LABEL_15:
    v12 = (*(uint64_t (**)(uint64_t, WebCore::RenderBlock *, _QWORD, uint64_t))(*(_QWORD *)v4 + 2000))(v4, this, v5, 1);
    v13 = v12;
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v4 + 2016))(v4, a2, v13, v12);
  }
  if (v9 == 3 && v8)
    goto LABEL_15;
LABEL_21:
  v13 = (*(uint64_t (**)(uint64_t, WebCore::RenderBlock *, _QWORD, uint64_t))(*(_QWORD *)v4 + 2000))(v4, this, v5, 1);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    v16 = (char *)a2 + 160;
  else
    v16 = (char *)a2 + 164;
  v17 = *(_DWORD *)v16;
  v18 = __OFADD__(v5, v17);
  v19 = v5 + v17;
  if (v18)
    v20 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v20 = v19;
  v12 = (*(uint64_t (**)(uint64_t, WebCore::RenderBlock *, uint64_t, uint64_t))(*(_QWORD *)v4 + 2000))(v4, this, v20, 1);
  return (*(uint64_t (**)(uint64_t, const WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v4 + 2016))(v4, a2, v13, v12);
}

WTF *WebCore::RenderBlock::setTrimmedMarginForChild(WTF *result, WebCore::RenderObject *a2, int a3)
{
  char v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;

  v3 = a3;
  switch(a3)
  {
    case 1:
      v4 = ((unsigned __int16)*((_DWORD *)result + 31) >> 13) - 1;
      if (v4 < 5)
      {
        v5 = qword_1969FC6C8;
        goto LABEL_12;
      }
      v9 = 0;
      goto LABEL_21;
    case 2:
      v4 = ((unsigned __int16)*((_DWORD *)result + 31) >> 13) - 1;
      if (v4 >= 5)
      {
        v9 = 2;
      }
      else
      {
        v5 = qword_1969FC6F0;
LABEL_12:
        v9 = v5[v4];
      }
      goto LABEL_21;
    case 4:
      v6 = *((_DWORD *)result + 30);
      v7 = (v6 >> 26) & 1;
      v8 = (unsigned __int16)*((_DWORD *)result + 31) >> 13;
      if ((v8 - 2) < 2)
        goto LABEL_23;
      if (v8 == 4)
      {
        v7 = (v6 & 0x4000000) == 0;
      }
      else if (v8 != 5)
      {
        v9 = 3;
        if ((v6 & 0x4000000) != 0)
          v9 = 1;
        goto LABEL_21;
      }
LABEL_23:
      v13 = v7 == 0;
      v9 = 2;
      if (v13)
        v9 = 0;
      goto LABEL_21;
    case 8:
      v10 = *((_DWORD *)result + 30);
      v11 = (v10 >> 26) & 1;
      v12 = (unsigned __int16)*((_DWORD *)result + 31) >> 13;
      if ((v12 - 2) < 2)
        goto LABEL_27;
      if (v12 == 4)
      {
        v11 = (v10 & 0x4000000) == 0;
      }
      else if (v12 != 5)
      {
        v9 = 3;
        if ((v10 & 0x4000000) == 0)
          v9 = 1;
        goto LABEL_21;
      }
LABEL_27:
      v13 = v11 == 0;
      v9 = 2;
      if (!v13)
        v9 = 0;
LABEL_21:
      *((_DWORD *)a2 + v9 + 42) = 0;
      result = WebCore::RenderObject::ensureRareData(a2, a2);
      *((_BYTE *)result + 2) |= v3;
      return result;
    default:
      return result;
  }
}

void WebCore::RenderBlock::debugDescription(WebCore::RenderBlock *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD v14[2];
  int v15;
  char v16;
  char v17;
  uint64_t v18[2];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *((_BYTE *)this + 52) & 7;
  if (v4 == 1)
  {
    v5 = 16;
  }
  else
  {
    if (v4 != 3)
      goto LABEL_4;
    v5 = 8;
  }
  if ((*((_BYTE *)this + 53) & v5) == 0)
  {
LABEL_4:
    WebCore::RenderObject::debugDescription(this, a2);
    return;
  }
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16 = 1;
  v6 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 104))(this);
  v8 = v7;
  WTF::Internal::appendHex();
  v19 = v9;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::HexNumberBuffer>((WTF::StringBuilder *)v14, v6, v8, (uint64_t)" 0x", 4, (uint64_t)v18);
  WTF::StringBuilder::append();
  v10 = (*((_QWORD *)this + 12) >> 43) & 0x1FLL;
  if ((_DWORD)v10 != 12)
  {
    if ((_DWORD)v10 == 13)
      v11 = (int8x16_t *)"group(";
    else
      v11 = (int8x16_t *)"image-pair(";
    if ((_DWORD)v10 == 13)
      v12 = 7;
    else
      v12 = 12;
    WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>((WTF::StringBuilder *)v14, (int8x16_t *)"-", 2, v11, v12);
    v18[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 592);
    v17 = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)v14, v18, &v17);
  }
  WTF::StringBuilder::toString((WTF::StringBuilder *)v14, a2);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v14, v13);
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::HexNumberBuffer>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a3)
  {
    v6 = a3 - 1;
    v12 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_9;
  }
  else
  {
    v6 = 0;
    v12 = a2;
  }
  v13 = v6;
  if (a5)
  {
    v7 = a5 - 1;
    v10 = a4;
    if (!((unint64_t)(a5 - 1) >> 31))
      goto LABEL_5;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x19637ABB8);
  }
  v7 = 0;
  v10 = a4;
LABEL_5:
  v11 = v7;
  v9 = a6;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(a1, (uint64_t)&v12, (uint64_t)&v10, &v9);
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5)
{
  int v5;
  int v6;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  if (a3)
  {
    v5 = a3 - 1;
    v10 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_9;
  }
  else
  {
    v5 = 0;
    v10 = a2;
  }
  v11 = v5;
  if (a5)
  {
    v6 = a5 - 1;
    v8 = a4;
    if (!((unint64_t)(a5 - 1) >> 31))
      goto LABEL_5;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x19637AC5CLL);
  }
  v6 = 0;
  v8 = a4;
LABEL_5:
  v9 = v6;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v10, &v8);
}

uint64_t WebCore::RenderBlock::updateSecurityDiscCharacters@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v5;

  if ((*(_BYTE *)(*(_QWORD *)(result + 24) + 228) & 0xC) == 0)
  {
    v3 = *a2;
    *a2 = 0;
LABEL_3:
    *a3 = v3;
    return result;
  }
  v5 = a3;
  result = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(result + 32) + 32), a2);
  if (!*(_BYTE *)(result + 116) || (result = WebCore::Font::glyphForCharacter(result, (void *)0xF79A), !(_DWORD)result))
  {
    v3 = *a2;
    *a2 = 0;
    a3 = v5;
    goto LABEL_3;
  }
  result = *a2;
  if (*a2)
    return WTF::StringImpl::replace();
  *v5 = 0;
  return result;
}

WTF::StringImpl *WebCore::RenderBlock::constructTextRun@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v6;

  if (*(_QWORD *)a1)
    v6 = *(unsigned int *)(*(_QWORD *)a1 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)a1 + 16) >> 2) & 1) << 32);
  else
    v6 = 0x100000000;
  return WebCore::RenderBlock::constructTextRun(v6, a2, a3, a4, a5);
}

WTF::StringImpl *WebCore::RenderBlock::constructTextRun@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    result = *(WTF::StringImpl **)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    result = 0;
    v8 = 0x100000000;
  }
  if (v8 <= a2)
  {
    v9 = 0x100000000;
    return WebCore::RenderBlock::constructTextRun(v9, a4, a5, 0, a6);
  }
  if (v8 - a2 <= a3)
  {
    if (!a2)
    {
      v9 = v8;
      return WebCore::RenderBlock::constructTextRun(v9, a4, a5, 0, a6);
    }
    a3 = v8 - a2;
  }
  v9 = a3;
  v10 = v8 - (unint64_t)a2;
  if ((v8 & 0x100000000) != 0)
  {
    if (v10 >= a3)
    {
      v9 = a3 | 0x100000000;
      return WebCore::RenderBlock::constructTextRun(v9, a4, a5, 0, a6);
    }
  }
  else if (v10 >= a3)
  {
    return WebCore::RenderBlock::constructTextRun(v9, a4, a5, 0, a6);
  }
  __break(1u);
  return result;
}

BOOL WebCore::RenderBox::skipContainingBlockForPercentHeightCalculation(WebCore::RenderBox *this, const WebCore::RenderBox *a2, int a3)
{
  int v4;
  _BOOL8 result;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_BYTE *)a2 + 52) & 7;
  if (v4 == 1 && (*((_BYTE *)a2 + 53) & 2) != 0 && !a3)
    return 1;
  result = 0;
  v6 = *((unsigned __int8 *)a2 + 46);
  if (v6 != 49 && (a3 & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 45) & 1) == 0)
    {
LABEL_7:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) != 2
        || v6 == 37)
      {
        return 0;
      }
      result = 0;
      if (v6 != 5
        && (*((char *)a2 + 45) & 0x80000000) == 0
        && v6 != 12
        && (*((_DWORD *)a2 + 5) & 0x1800000) != 0x1000000)
      {
        v9 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
        v10 = v9 + 4;
        v11 = v9 + 12;
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
          v10 = v11;
        return *(_BYTE *)(v10 + 4) == 0;
      }
      return result;
    }
    if (v4 == 1)
    {
      v7 = 16;
    }
    else
    {
      if (v4 != 3)
        goto LABEL_12;
      v7 = 8;
    }
    if ((*((_BYTE *)a2 + 53) & v7) != 0)
      goto LABEL_7;
LABEL_12:
    v8 = *((_BYTE *)a2 + 96) & 0x1F;
    return v8 == 1 || v8 == 3;
  }
  return result;
}

uint64_t WebCore::RenderBlock::setIntrinsicBorderForFieldset(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;

  v2 = (int)a2;
  if ((*(_WORD *)(result + 69) & 0x400) == 0)
    goto LABEL_2;
  v4 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    goto LABEL_2;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = v9;
    v12 = *(_QWORD *)(v4 + 16 * v9);
    if (v12 != -1)
    {
      if (!v12)
        goto LABEL_2;
      if (*(_QWORD *)(v12 + 8) == result)
        break;
    }
    v9 = (v11 + i) & v5;
  }
  v3 = *(_QWORD *)(v4 + 16 * v11 + 8);
  if (!v3)
  {
LABEL_2:
    if (!(_DWORD)a2)
      return result;
    result = WebCore::RenderBlock::ensureBlockRareData((WebCore::RenderBlock *)result, a2);
    v3 = result;
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

uint64_t WebCore::RenderBlock::findFieldsetLegend(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(unsigned int *)(a1 + 64);
  if (!(v2 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)))
    return 0;
  v3 = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
  if (!v3)
    return 0;
  result = 0;
  while ((*(_BYTE *)(v3 + 45) & 4) == 0)
  {
    v5 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
    if (!v5)
      return 0;
    v3 = *(_QWORD *)(v5 + 8);
    if (!v3)
      return result;
  }
  if (a2)
  {
    while (1)
    {
      if ((*(_BYTE *)(v3 + 45) & 1) == 0)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            break;
          }
        }
      }
      v7 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
      if (!v7)
        return 0;
      v3 = *(_QWORD *)(v7 + 8);
      if (!v3)
        return 0;
      while ((*(_BYTE *)(v3 + 45) & 4) == 0)
      {
        v8 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
        if (!v8)
          return 0;
        result = 0;
        v3 = *(_QWORD *)(v8 + 8);
        if (!v3)
          return result;
      }
    }
  }
  else
  {
    while (1)
    {
      v9 = *(_DWORD *)(v3 + 20);
      if ((v9 & 0x800) == 0 && (v9 & 0x1800000) != 0x1000000 && (*(_BYTE *)(v3 + 45) & 1) == 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if (v10)
        {
          if ((*(_WORD *)(v10 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
          {
            break;
          }
        }
      }
      v11 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
      if (!v11)
        return 0;
      v3 = *(_QWORD *)(v11 + 8);
      if (!v3)
        return 0;
      while ((*(_BYTE *)(v3 + 45) & 4) == 0)
      {
        v12 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
        if (!v12)
          return 0;
        result = 0;
        v3 = *(_QWORD *)(v12 + 8);
        if (!v3)
          return result;
      }
    }
  }
  return v3;
}

uint64_t WebCore::RenderBlock::intrinsicBorderForFieldset(WebCore::RenderBlock *this)
{
  uint64_t result;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0)
    return 0;
  result = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

unint64_t WebCore::RenderBlock::borderWidths(WebCore::RenderBlock *this)
{
  uint64_t v2;
  float v3;
  double v4;
  unsigned int v6;
  float v7;
  double v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
    && (v14 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v14 + 8))
  {
    v6 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1000))(this);
    v10 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1024))(this);
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1008))(this);
    (*(void (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 1016))(this);
  }
  else
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v3 = 0.0;
    if ((*(_BYTE *)(v2 + 172) & 0xE) != 0)
    {
      v13 = *(_QWORD *)(v2 + 200);
      if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 52) == 4)
      {
        if (*(_BYTE *)(v13 + 54))
          v3 = *(float *)(v13 + 48);
        else
          v3 = (float)*(int *)(v13 + 48);
      }
      else
      {
        v3 = *(float *)(v2 + 168);
      }
    }
    v4 = v3 * 64.0;
    if (v4 >= 2147483650.0 || v4 <= -2147483650.0)
    {
      if (v4 > -2147483650.0)
        v15 = (int)v4;
      else
        v15 = 0x80000000;
      if (v4 < 2147483650.0)
        v6 = v15;
      else
        v6 = 0x7FFFFFFF;
    }
    else
    {
      v6 = (int)v4;
    }
    v7 = 0.0;
    if ((*(_BYTE *)(v2 + 148) & 0xE) != 0)
    {
      v12 = *(_QWORD *)(v2 + 200);
      if (*(_BYTE *)(v12 + 5) && *(_BYTE *)(v12 + 60) == 4)
      {
        if (*(_BYTE *)(v12 + 62))
          v7 = *(float *)(v12 + 56);
        else
          v7 = (float)*(int *)(v12 + 56);
      }
      else
      {
        v7 = *(float *)(v2 + 144);
      }
    }
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0 || v8 <= -2147483650.0)
    {
      if (v8 > -2147483650.0)
        v16 = (int)v8;
      else
        v16 = 0x80000000;
      if (v8 < 2147483650.0)
        v10 = v16;
      else
        v10 = 0x7FFFFFFFLL;
    }
    else
    {
      v10 = (int)v8;
    }
  }
  return v6 | (unint64_t)(v10 << 32);
}

unint64_t WebCore::RenderBoxModelObject::borderWidths(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  float v2;
  double v3;
  uint64_t v5;
  float v6;
  double v7;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 172) & 0xE) != 0)
  {
    v12 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v12 + 5) && *(_BYTE *)(v12 + 52) == 4)
    {
      if (*(_BYTE *)(v12 + 54))
        v2 = *(float *)(v12 + 48);
      else
        v2 = (float)*(int *)(v12 + 48);
    }
    else
    {
      v2 = *(float *)(v1 + 168);
    }
  }
  v3 = v2 * 64.0;
  if (v3 >= 2147483650.0 || v3 <= -2147483650.0)
  {
    v5 = 0x7FFFFFFFLL;
    v13 = 0x80000000;
    if (v3 > -2147483650.0)
      v13 = (int)v3;
    if (v3 < 2147483650.0)
      v5 = v13;
  }
  else
  {
    v5 = (int)v3;
  }
  v6 = 0.0;
  if ((*(_BYTE *)(v1 + 148) & 0xE) != 0)
  {
    v11 = *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v11 + 5) && *(_BYTE *)(v11 + 60) == 4)
    {
      if (*(_BYTE *)(v11 + 62))
        v6 = *(float *)(v11 + 56);
      else
        v6 = (float)*(int *)(v11 + 56);
    }
    else
    {
      v6 = *(float *)(v1 + 144);
    }
  }
  v7 = v6 * 64.0;
  if (v7 >= 2147483650.0 || v7 <= -2147483650.0)
  {
    v9 = 0x7FFFFFFF00000000;
    v14 = 0x8000000000000000;
    if (v7 > -2147483650.0)
      v14 = (unint64_t)(int)v7 << 32;
    if (v7 < 2147483650.0)
      v9 = v14;
  }
  else
  {
    v9 = (unint64_t)(int)v7 << 32;
  }
  return v9 | v5;
}

uint64_t WebCore::RenderBlock::adjustIntrinsicLogicalHeightForBoxSizing(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  uint64_t v15;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 68) & 4) != 0)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
    if (__OFADD__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 + v5;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
    v9 = v7 + v8;
    if (__OFADD__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v6, v9);
    v11 = v6 + v9;
    if (v10)
      v11 = (v6 >> 31) + 0x7FFFFFFF;
    result = a2 + v11;
    if (__OFADD__(a2, v11))
      return (a2 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    if ((*(_WORD *)(a1 + 69) & 0x400) != 0
      && (v15 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, a1)) != 0)
    {
      v13 = *(_DWORD *)(v15 + 8);
    }
    else
    {
      v13 = 0;
    }
    v10 = __OFADD__(a2, v13);
    v14 = a2 + v13;
    if (v10)
      return (a2 >> 31) + 0x7FFFFFFF;
    else
      return v14;
  }
  return result;
}

double WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(WebCore::RenderBlockFlowRareData *this, const WebCore::RenderBlockFlow *a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  double result;
  int v14;

  v2 = 3;
  switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
  {
    case 1:
      v3 = (int *)((char *)a2 + 168);
      v14 = *((_DWORD *)a2 + 44);
      v4 = v14 & ~(v14 >> 31);
LABEL_24:
      if (v14 == 0x80000000)
        v7 = 0x7FFFFFFF;
      else
        v7 = -v14 & ~(-v14 >> 31);
LABEL_27:
      v9 = *v3 & ~(*v3 >> 31);
LABEL_28:
      v10 = 0;
      goto LABEL_11;
    case 2:
    case 4:
      goto LABEL_3;
    case 3:
    case 5:
      v2 = 1;
      goto LABEL_3;
    default:
      v2 = 0;
LABEL_3:
      v3 = (int *)((char *)a2 + 168);
      v4 = *((_DWORD *)a2 + v2 + 42) & ~(*((int *)a2 + v2 + 42) >> 31);
      v5 = 3;
      switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
      {
        case 1:
          v14 = *((_DWORD *)a2 + 44);
          goto LABEL_24;
        case 2:
        case 4:
          break;
        case 3:
        case 5:
          v5 = 1;
          break;
        default:
          v5 = 0;
          break;
      }
      v6 = v3[v5];
      if (v6 == 0x80000000)
        v7 = 0x7FFFFFFF;
      else
        v7 = -v6 & ~(-v6 >> 31);
      v8 = 3;
      switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
      {
        case 1:
          goto LABEL_27;
        case 2:
        case 4:
          v8 = 1;
          break;
        case 3:
        case 5:
          break;
        default:
          v8 = 2;
          break;
      }
      v9 = v3[v8] & ~(v3[v8] >> 31);
      v10 = 3;
      switch((unsigned __int16)*((_DWORD *)a2 + 31) >> 13)
      {
        case 1:
          goto LABEL_28;
        case 2:
        case 4:
          v10 = 1;
          break;
        case 3:
        case 5:
          break;
        default:
          v10 = 2;
          break;
      }
LABEL_11:
      v11 = v3[v10];
      if (v11 == 0x80000000)
        v12 = 0x7FFFFFFF;
      else
        v12 = -v11 & ~(-v11 >> 31);
      *(_DWORD *)this = v4;
      *((_DWORD *)this + 1) = v7;
      *((_DWORD *)this + 2) = v9;
      *((_DWORD *)this + 3) = v12;
      *(_QWORD *)&result = 0xFFFFFFFFLL;
      *((_QWORD *)this + 2) = 0xFFFFFFFFLL;
      *((_QWORD *)this + 3) = 0;
      *((_BYTE *)this + 32) &= ~1u;
      return result;
  }
}

uint64_t WebCore::RenderBlockFlow::RenderBlockFlow(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5)
{
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a1 = off_1E342E320;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 20) & 0x80000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v10;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 8) = a3;
    *(_BYTE *)(v22 + 32) = 0;
    v24 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v24 & 0xFFFF000000000000 | v22;
    v25 = v24 & 0xFFFFFFFFFFFFLL;
    if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v26 = __ldaxr((unsigned int *)v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unsigned int *)v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)v25);
        v28 = *(unsigned int *)(v25 + 28);
        if ((_DWORD)v28)
        {
          v31 = v25;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v28));
          v25 = v31;
        }
        v29 = *(WTF **)(v25 + 16);
        if (v29)
        {
          *(_QWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v25 + 24) = 0;
          v30 = v25;
          WTF::fastFree(v29, v23);
          v25 = v30;
        }
        WTF::fastFree((WTF *)v25, v23);
      }
    }
  }
  v11 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  if ((*(_WORD *)(a3 + 28) & 0xF000) == 0x9000)
    v13 = 93;
  else
    v13 = 92;
  *(_BYTE *)(a1 + 45) = v13;
  *(_BYTE *)(a1 + 46) = a2;
  *(_DWORD *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 51) = 0;
  *(_WORD *)(a1 + 52) = ((a5 & 0x3F) << 8) | 1;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 1944);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 16);
    ++*(_QWORD *)(v14 + 256);
    *(_DWORD *)(v14 + 16) = v15 + 1;
    if (v15 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19637BC84);
    }
    *(_DWORD *)(v14 + 16) = v15;
  }
  *(_QWORD *)a1 = off_1E3422BC8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v16 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = a4[2];
  v17 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = a4[5];
  v19 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(a1 + 128) = v19;
  v20 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(a1 + 136) = v20;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)a1 = off_1E341F9F8;
  *(_DWORD *)(a1 + 200) = -1;
  *(_BYTE *)(a1 + 204) &= 0xFCu;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 20) |= 0x40000u;
  return a1;
}

double WebCore::RenderBlockFlow::RenderBlockFlow(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  double result;

  v5 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, a2, a3, a4, 76, ((a5 & 0x3F) << 8) | 1u);
  result = 0.0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_QWORD *)v5 = off_1E341F9F8;
  *(_DWORD *)(v5 + 200) = -1;
  *(_BYTE *)(v5 + 204) &= 0xFCu;
  *(_BYTE *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 212) = 0;
  *(_DWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 216) = 0;
  *(_QWORD *)(v5 + 224) = 0;
  *(_DWORD *)(v5 + 20) |= 0x40000u;
  return result;
}

{
  uint64_t v5;
  double result;

  v5 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, a2, a3, a4, 76, ((a5 & 0x3F) << 8) | 1u);
  result = 0.0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_QWORD *)v5 = off_1E341F9F8;
  *(_DWORD *)(v5 + 200) = -1;
  *(_BYTE *)(v5 + 204) &= 0xFCu;
  *(_BYTE *)(v5 + 208) = 0;
  *(_BYTE *)(v5 + 212) = 0;
  *(_DWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 216) = 0;
  *(_QWORD *)(v5 + 224) = 0;
  *(_DWORD *)(v5 + 20) |= 0x40000u;
  return result;
}

uint64_t WebCore::RenderBlockFlow::firstRootBox(WebCore::RenderBlockFlow *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (*((_DWORD *)this + 60) != 2)
    return 0;
  v2 = *((_QWORD *)this + 29);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  result = v4;
  if ((v5 & 1) == 0)
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderObject::isSVGRenderer(WebCore::RenderObject *this)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((unsigned __int8 *)this + 46);
  result = 1;
  if (v2 != 83 && v2 != 103)
  {
    v4 = *((_BYTE *)this + 52) & 7;
    if (v4 == 1)
    {
      if ((*((_BYTE *)this + 53) & 8) != 0)
        return result;
    }
    else if (v4 == 4)
    {
      return result;
    }
    if ((v2 - 71) <= 0xFu)
      return (0xA001u >> (v2 - 71)) & 1;
    else
      return 0;
  }
  return result;
}

void WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2, _BOOL4 a3)
{
  int v6;
  WebCore::FloatingObjects *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  WebCore::FloatingObject **v30;
  WebCore::FloatingObject *v31;
  uint64_t v32;
  WebCore::RenderElement *v33;
  int v34;
  uint64_t v35;

  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x200) == 0)
  {
    if (!(*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1672))(this))
      return;
    v6 = *((_DWORD *)this + 5);
  }
  if ((v6 & 0x20) == 0)
  {
    *((_DWORD *)this + 5) = v6 | 0x20;
    if (!a3)
    {
      v33 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v33);
    }
  }
  if (a2)
  {
    v7 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
    if (v7)
    {
      v23 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
      {
        v24 = *(_DWORD *)(v23 - 8);
        v25 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
        v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
        v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
        v28 = v24 & ((v27 >> 31) ^ v27);
        for (i = 1; ; ++i)
        {
          v30 = *(WebCore::FloatingObject ***)(v23 + 8 * v28);
          if (!v30)
            break;
          if (v30 != (WebCore::FloatingObject **)-1)
          {
            v31 = *v30;
            v32 = *(_QWORD *)*v30;
            if (v32)
            {
              if (*(WebCore::RenderBox **)(v32 + 8) == a2)
              {
                if (v28 != *(_DWORD *)(v23 - 4))
                  WebCore::FloatingObjects::remove(v7, v31);
                break;
              }
            }
          }
          v28 = (v28 + i) & v24;
        }
      }
    }
  }
  else if ((*((_BYTE *)this + 22) & 4) != 0)
  {
    return;
  }
  v8 = *((unsigned int *)this + 16);
  if (v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v9)
    {
      while ((*(_BYTE *)(v9 + 45) & 0x40) == 0)
      {
        v10 = *(unsigned int *)(v9 + 47);
        if (v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32))
        {
          v9 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
          if (v9)
            continue;
        }
        return;
      }
LABEL_11:
      if (!a2)
      {
        v34 = *(_DWORD *)(v9 + 20);
        if ((v34 & 0x800) != 0 || (v34 & 0x1800000) == 0x1000000)
          goto LABEL_52;
      }
      v11 = *(_BYTE *)(v9 + 52) & 7;
      if (v11 == 1)
        v12 = v9;
      else
        v12 = 0;
      if (v12)
        ++*(_DWORD *)(v12 + 16);
      if (v11 != 1)
      {
        if ((*(_BYTE *)(v9 + 20) & 1) != 0 || WebCore::RenderObject::isHTMLMarquee((WebCore::RenderObject *)v9))
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 1504))(v9))
          {
            v20 = *(_DWORD *)(v9 + 20);
            if ((v20 & 0x800) == 0 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8) + 8) && (v20 & 0x200) != 0)
              WebCore::RenderElement::setChildNeedsLayout((WebCore::RenderObject *)v9, !a3);
          }
        }
LABEL_49:
        if (!v12)
          goto LABEL_52;
LABEL_50:
        v21 = *(_DWORD *)(v12 + 16);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19637C228);
        }
        *(_DWORD *)(v12 + 16) = v21 - 1;
LABEL_52:
        while (1)
        {
          v22 = *(unsigned int *)(v9 + 47);
          if (!(v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
            break;
          v9 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
          if (!v9)
            break;
          if ((*(_BYTE *)(v9 + 45) & 0x40) != 0)
            goto LABEL_11;
        }
        return;
      }
      if (a2)
      {
        if ((WebCore::RenderBlockFlow::subtreeContainsFloat((WebCore::RenderBlockFlow *)v9, a2) & 1) == 0)
          goto LABEL_44;
      }
      else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1672))(v9) & 1) == 0)
      {
        v13 = *(unsigned int *)(v9 + 64);
        if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32)))
          goto LABEL_44;
        v14 = *(_BYTE **)((v13 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32)) + 8);
        if (!v14)
          goto LABEL_44;
        if ((v14[45] & 0x40) == 0)
        {
          while (1)
          {
            v15 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 112))(v14);
            if (!v15)
            {
              if (v14 == (_BYTE *)v9)
                goto LABEL_44;
              v16 = *(unsigned int *)(v14 + 47);
              if (!(v16 | ((unint64_t)v14[51] << 32)))
                break;
              v15 = *(_BYTE **)((v16 | ((unint64_t)v14[51] << 32)) + 8);
              if (!v15)
                break;
            }
LABEL_24:
            v14 = v15;
            if ((v15[45] & 0x40) != 0)
              goto LABEL_41;
          }
          for (j = *((_QWORD *)v14 + 4); j; j = *(_QWORD *)(v18 + 32))
          {
            v18 = *(_QWORD *)(j + 8);
            if (!v18 || v18 == v9)
              break;
            v35 = *(unsigned int *)(v18 + 47);
            if (v35 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32))
            {
              v15 = *(_BYTE **)((v35 | ((unint64_t)*(unsigned __int8 *)(v18 + 51) << 32)) + 8);
              if (v15)
                goto LABEL_24;
            }
          }
LABEL_44:
          if ((*(_BYTE *)(v9 + 20) & 1) == 0 && !WebCore::RenderObject::isHTMLMarquee((WebCore::RenderObject *)v9)
            || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 1504))(v9)
            || (*(_BYTE *)(v9 + 21) & 8) != 0
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8) + 8))
          {
            goto LABEL_50;
          }
          goto LABEL_48;
        }
        v15 = *(_BYTE **)((v13 | ((unint64_t)*(unsigned __int8 *)(v9 + 68) << 32)) + 8);
LABEL_41:
        while ((v15[52] & 7) != 1 || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 1672))(v15) & 1) == 0)
        {
          v15 = (_BYTE *)WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>((uint64_t)v15, v9);
          if (!v15)
            goto LABEL_44;
        }
      }
LABEL_48:
      WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout((WebCore::RenderBlockFlow *)v9, a2, a3);
      goto LABEL_49;
    }
  }
}

uint64_t WebCore::RenderBlockFlow::addIntrudingFloats(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  WebCore::FloatingObjects *v31;
  void *v32;
  uint64_t *v33;
  uint64_t *v34;

  result = WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)a1);
  if ((result & 1) == 0)
  {
    v11 = a2[27];
    if (v11)
    {
      v12 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 2;
      v13 = v12 > 3 ? 3 : qword_1969FC688[v12];
      v14 = *(_DWORD *)(a1 + 4 * v13 + 168);
      v15 = __OFADD__(a4, v14);
      v16 = a4 + v14;
      v17 = v15 ? (a4 >> 31) + 0x7FFFFFFF : v16;
      v18 = *(uint64_t ***)(v11 + 8);
      if (v18)
      {
        while (1)
        {
          v19 = v18;
          v20 = *v18;
          v21 = *(_DWORD *)(a1 + 20);
          v33 = v20;
          if ((v21 & 0x1000) != 0)
          {
            v22 = *((_DWORD *)v20 + 2);
            v23 = *((_DWORD *)v20 + 4);
          }
          else
          {
            v22 = *((_DWORD *)v20 + 3);
            v23 = *((_DWORD *)v20 + 5);
          }
          v15 = __OFADD__(v22, v23);
          v24 = v22 + v23;
          v25 = (v22 >> 31) + 0x7FFFFFFF;
          if (v15)
            v24 = v25;
          if (v24 <= (int)a5)
            goto LABEL_34;
          v26 = *(uint64_t **)(a1 + 216);
          if (!v26)
            break;
          result = WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::contains<WTF::ListHashSetTranslator<WebCore::FloatingObjectHashFunctions>,WebCore::FloatingObject const*>(*v26, v33);
          if ((result & 1) == 0)
            goto LABEL_21;
LABEL_34:
          v18 = (uint64_t **)v19[2];
          if (!v18)
            return result;
        }
        WebCore::RenderBlockFlow::createFloatingObjects((WebCore::FloatingObjects **)a1);
        v21 = *(_DWORD *)(a1 + 20);
LABEL_21:
        if ((v21 & 0x1000) != 0)
        {
          if (a2 == a3)
            v30 = 0;
          else
            v30 = (*(uint64_t (**)(_QWORD *))(*a2 + 1080))(a2);
          LODWORD(v29) = v17 - v30;
          if (__OFSUB__(v17, v30))
            v29 = (v17 >> 31) + 0x7FFFFFFF;
          else
            v29 = v29;
          v28 = a5;
        }
        else
        {
          if (a2 == a3)
            v27 = 0;
          else
            v27 = (*(uint64_t (**)(_QWORD *))(*a2 + 1096))(a2);
          v28 = (v17 >> 31) + 0x7FFFFFFF;
          if (!__OFSUB__(v17, v27))
            v28 = v17 - v27;
          v29 = a5;
        }
        v31 = *(WebCore::FloatingObjects **)(a1 + 216);
        WebCore::FloatingObject::copyToNewContainer((uint64_t)v33, v28 | (unint64_t)(v29 << 32), 0, 0, 0, (uint64_t *)&v34);
        WebCore::FloatingObjects::add(v31, &v34);
        result = (uint64_t)std::unique_ptr<WebCore::FloatingObject>::~unique_ptr[abi:sn180100]((WTF **)&v34, v32);
        goto LABEL_34;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashSet<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 8 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 8 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(v2 - 4);
    }
LABEL_8:
    if (v7 != *(_DWORD *)(v2 - 4))
    {
      v10 = *(_QWORD *)(v2 + 8 * v7);
      *(_QWORD *)(v2 + 8 * v7) = -1;
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 16);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19637C4F4);
        }
        *(_DWORD *)(v10 + 16) = v11 - 1;
      }
      ++*(_DWORD *)(*result - 16);
      v12 = *result;
      if (*result)
        v13 = *(_DWORD *)(v12 - 12) - 1;
      else
        v13 = -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *result;
      if (*result)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return (uint64_t *)WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::rehash(result, v16 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::columnGap(WebCore::RenderBlockFlow *this)
{
  float *v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  float v6;
  double v7;

  v1 = *(float **)(*((_QWORD *)this + 11) + 40);
  if (*((_BYTE *)v1 + 376))
  {
    v2 = *(float *)(*((_QWORD *)this + 14) + 204);
LABEL_11:
    v7 = v2 * 64.0;
    if (v7 >= 2147483650.0)
      return 0x7FFFFFFFLL;
    if (v7 <= -2147483650.0)
      return 0x80000000;
    return (int)v7;
  }
  v3 = WebCore::RenderBox::contentLogicalWidth(this);
  if (*((_BYTE *)v1 + 384) == 4)
  {
    v2 = v1[95];
    if (!*((_BYTE *)v1 + 386))
      v2 = (float)SLODWORD(v2);
    goto LABEL_11;
  }
  v4 = v3;
  result = 0;
  switch(*((_BYTE *)v1 + 384))
  {
    case 0:
    case 1:
    case 9:
      result = v4;
      break;
    case 3:
      v6 = v1[95];
      if (!*((_BYTE *)v1 + 386))
        v6 = (float)SLODWORD(v6);
      v2 = (float)((float)((float)(int)v4 * 0.015625) * v6) / 100.0;
      goto LABEL_11;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v1 + 95), (float)(int)v4 * 0.015625);
      goto LABEL_11;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::RenderStyle::hasInlineColumnAxis(WebCore::RenderStyle *this)
{
  int v1;
  uint64_t result;
  __int16 v3;
  char v4;

  v1 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 56) >> 4) & 3;
  if (v1 == 2)
    return 1;
  v3 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  v4 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      LOBYTE(v3) = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      LOBYTE(v3) = 0;
LABEL_5:
      v4 = v3;
LABEL_6:
      result = (v1 != 0) ^ ((v4 & 6) != 2);
      break;
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::setComputedColumnCountAndWidth(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 224);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        *(_DWORD *)(v5 + 352) = a2;
        *(_DWORD *)(v5 + 356) = a3;
        v6 = result;
        result = WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderStyle *)(result + 80));
        *(_BYTE *)(v5 + 367) = result;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 224) + 24) + 8) + 368) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 32) + 24) + 56) > 0x3Fu;
      }
    }
  }
  return result;
}

BOOL WebCore::RenderBlockFlow::willCreateColumns(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a1 + 46);
  if (v2 == 8)
    return 0;
  if ((*(_BYTE *)(a1 + 52) & 7) == 1)
  {
    if (v2 == 18 || (*(_BYTE *)(a1 + 53) & 0xC) != 0)
      return 0;
  }
  else if (v2 == 18)
  {
    return 0;
  }
  if ((*(_DWORD *)(a1 + 96) & 0x1F) == 0x17 || (*(_DWORD *)(a1 + 96) & 0x1F) == 25)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
    return 0;
  v7 = *(unsigned int *)(a1 + 64);
  if (!(v7 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)))
    return 0;
  if (!*(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8))
    return 0;
  v8 = *(_QWORD *)(a1 + 96);
  if ((v8 & 0xF80000000000) != 0)
    return 0;
  if (((unsigned __int16)v8 >> 13) - 5 <= 1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
    && !WebCore::RenderObject::isBody((WebCore::RenderObject *)a1))
  {
    return 1;
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 24) + 56);
  if ((~v9 & 3) == 0)
  {
    v10 = (v9 >> 4) & 3;
    if (v10 == 2)
      return 0;
    v12 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
    if ((v12 - 2) < 2 || v12 == 4 || v12 == 5)
    {
      if (v10)
        return 0;
    }
    else if (!v10)
    {
      return 0;
    }
  }
  if (!WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderStyle *)(a1 + 80)))
    return 1;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 32) + 24);
  if ((*(_BYTE *)(v13 + 56) & 1) == 0)
    return 1;
  if ((a2 & 0xFF00000000) != 0)
    return (a2 & 0xFFFFFFFE) != 0;
  if ((*(_BYTE *)(v13 + 56) & 2) != 0)
    return 0;
  return *(unsigned __int16 *)(v13 + 8) > 1u;
}

uint64_t WebCore::RenderBlockFlow::pageLogicalHeightForOffset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 496) + 8 * *(unsigned int *)(v1 + 508) - 8) + 72);
  if (!(_DWORD)v2)
    return v2;
  if ((*(_BYTE *)(a1 + 23) & 0x10) == 0)
    return v2;
  v9 = v2;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
  v2 = v9;
  if (!v4)
    return v2;
  v5 = v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 2000))(v5, 0, v6, 0);
  if (!v7)
    return 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1976))(v7);
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderBlockFlow>::begin(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;

  result = *a1;
  v2 = *(unsigned int *)(result + 64);
  if (v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v4 + 8))
    {
      if ((*(_BYTE *)(i + 52) & 7) == 1)
        break;
      v4 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v4)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildIterator<WebCore::RenderBlockFlow>::operator++(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while ((*(_BYTE *)(v1 + 52) & 7) != 1)
    {
      v2 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v2)
        goto LABEL_7;
      v3 = 0;
      v1 = *(_QWORD *)(v2 + 8);
      if (!v1)
        goto LABEL_8;
    }
    v3 = v1;
  }
  else
  {
LABEL_7:
    v3 = 0;
  }
LABEL_8:
  *(_QWORD *)(result + 8) = v3;
  return result;
}

unint64_t WebCore::RenderBox::reflectedRect(WebCore::RenderBox *this, const WebCore::LayoutRect *a2)
{
  float *v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  float v7;
  unsigned int v8;
  float v10;
  double v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  float v25;
  double v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  float v38;
  double v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  float v49;
  double v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  float v61;
  float v62;

  v2 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 208);
  if (v2)
  {
    v5 = *(_DWORD *)a2;
    v4 = *((unsigned int *)a2 + 1);
    v6 = *((_QWORD *)this + 20);
    switch(*((_BYTE *)v2 + 4))
    {
      case 0:
        if (*((_BYTE *)v2 + 12) == 4)
        {
          v7 = v2[2];
          if (!*((_BYTE *)v2 + 14))
            v7 = (float)SLODWORD(v7);
LABEL_77:
          v50 = v7 * 64.0;
          if (v50 >= 2147483650.0)
          {
            LODWORD(v48) = 0x7FFFFFFF;
          }
          else if (v50 <= -2147483650.0)
          {
            LODWORD(v48) = 0x80000000;
          }
          else
          {
            LODWORD(v48) = (int)v50;
          }
        }
        else
        {
          LODWORD(v48) = 0;
          switch(*((_BYTE *)v2 + 12))
          {
            case 0:
            case 1:
            case 9:
              v48 = HIDWORD(v6);
              break;
            case 3:
              v49 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v49 = (float)SLODWORD(v49);
              v7 = (float)((float)((float)SHIDWORD(v6) * 0.015625) * v49) / 100.0;
              goto LABEL_77;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 2), (float)SHIDWORD(v6) * 0.015625);
              goto LABEL_77;
            default:
              break;
          }
        }
        v51 = v48 + 63;
        if ((v48 & 0x80000000) == 0)
          v51 = v48;
        v52 = v51 & 0xFFFFFFC0;
        v14 = __OFADD__(HIDWORD(v6), v52);
        v31 = HIDWORD(v6) + v52;
        v36 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
        if (v14)
          v31 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
        v53 = *((_DWORD *)a2 + 1);
        v54 = *((_DWORD *)a2 + 3);
        v14 = __OFADD__(v53, v54);
        v55 = v53 + v54;
        v56 = (v53 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v56 = v55;
        v14 = __OFSUB__(HIDWORD(v6), v56);
        v57 = HIDWORD(v6) - v56;
        if (!v14)
          v36 = v57;
        goto LABEL_89;
      case 1:
        v23 = *((unsigned __int8 *)v2 + 12);
        if (v23 - 3 < 2 || v23 == 11)
        {
          switch(v23)
          {
            case 4u:
              v25 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v25 = (float)SLODWORD(v25);
              break;
            case 3u:
              v62 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v62 = (float)SLODWORD(v62);
              v25 = (float)((float)((float)SHIDWORD(v6) * 0.015625) * v62) / 100.0;
              break;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 2), (float)SHIDWORD(v6) * 0.015625);
              break;
            default:
LABEL_104:
              LODWORD(v27) = 0;
              goto LABEL_44;
          }
          v26 = v25 * 64.0;
          if (v26 >= 2147483650.0)
          {
            LODWORD(v27) = 0x7FFFFFFF;
          }
          else if (v26 <= -2147483650.0)
          {
            LODWORD(v27) = 0x80000000;
          }
          else
          {
            LODWORD(v27) = (int)v26;
          }
        }
        else
        {
          if (v23 >= 2 && v23 != 9)
            goto LABEL_104;
          v27 = HIDWORD(v6);
        }
LABEL_44:
        v28 = (v27 + ((v27 & 0x80000000) != 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        v14 = __OFSUB__(0, v28);
        v29 = -v28;
        if (v14)
          v29 = 0x7FFFFFFF;
        v14 = __OFSUB__(v29, HIDWORD(v6));
        v30 = v29 - HIDWORD(v6);
        v31 = (v29 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v31 = v30;
        v32 = *((_DWORD *)a2 + 1);
        v33 = *((_DWORD *)a2 + 3);
        v14 = __OFADD__(v32, v33);
        v34 = v32 + v33;
        v35 = (v32 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v35 = v34;
        v14 = __OFSUB__(HIDWORD(v6), v35);
        v36 = HIDWORD(v6) - v35;
        if (v14)
          v36 = (HIDWORD(v6) >> 31) + 0x7FFFFFFF;
LABEL_89:
        v14 = __OFADD__(v31, v36);
        v58 = v31 + v36;
        v59 = (v31 >> 31) + 0x7FFFFFFF;
        if (v14)
          v4 = v59;
        else
          v4 = v58;
        return v5 | (unint64_t)(v4 << 32);
      case 2:
        v8 = *((unsigned __int8 *)v2 + 12);
        if (v8 - 3 < 2 || v8 == 11)
        {
          switch(v8)
          {
            case 4u:
              v10 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v10 = (float)SLODWORD(v10);
              break;
            case 3u:
              v61 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v61 = (float)SLODWORD(v61);
              v10 = (float)((float)((float)(int)v6 * 0.015625) * v61) / 100.0;
              break;
            case 0xBu:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 2), (float)(int)v6 * 0.015625);
              break;
            default:
LABEL_102:
              LODWORD(v12) = 0;
              goto LABEL_19;
          }
          v11 = v10 * 64.0;
          if (v11 >= 2147483650.0)
          {
            LODWORD(v12) = 0x7FFFFFFF;
          }
          else if (v11 <= -2147483650.0)
          {
            LODWORD(v12) = 0x80000000;
          }
          else
          {
            LODWORD(v12) = (int)v11;
          }
        }
        else
        {
          if (v8 >= 2 && v8 != 9)
            goto LABEL_102;
          v12 = *((_QWORD *)this + 20);
        }
LABEL_19:
        v13 = (v12 + ((int)v12 < 0 ? 0x3F : 0)) & 0xFFFFFFC0;
        v14 = __OFSUB__(0, v13);
        v15 = -v13;
        if (v14)
          v15 = 0x7FFFFFFF;
        v14 = __OFSUB__(v15, (_DWORD)v6);
        v16 = v15 - v6;
        v17 = (v15 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v17 = v16;
        v18 = *((_DWORD *)a2 + 2);
        v14 = __OFADD__(*(_DWORD *)a2, v18);
        v19 = *(_DWORD *)a2 + v18;
        v20 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v20 = v19;
        v14 = __OFSUB__((_DWORD)v6, v20);
        v21 = v6 - v20;
        if (v14)
          v21 = (v6 >> 31) + 0x7FFFFFFF;
LABEL_70:
        v14 = __OFADD__(v17, v21);
        v46 = v17 + v21;
        v47 = (v17 >> 31) + 0x7FFFFFFF;
        if (v14)
          v5 = v47;
        else
          v5 = v46;
        break;
      case 3:
        if (*((_BYTE *)v2 + 12) == 4)
        {
          v22 = v2[2];
          if (!*((_BYTE *)v2 + 14))
            v22 = (float)SLODWORD(v22);
LABEL_58:
          v39 = v22 * 64.0;
          if (v39 >= 2147483650.0)
          {
            LODWORD(v37) = 0x7FFFFFFF;
          }
          else if (v39 <= -2147483650.0)
          {
            LODWORD(v37) = 0x80000000;
          }
          else
          {
            LODWORD(v37) = (int)v39;
          }
        }
        else
        {
          LODWORD(v37) = 0;
          switch(*((_BYTE *)v2 + 12))
          {
            case 0:
            case 1:
            case 9:
              v37 = *((_QWORD *)this + 20);
              break;
            case 3:
              v38 = v2[2];
              if (!*((_BYTE *)v2 + 14))
                v38 = (float)SLODWORD(v38);
              v22 = (float)((float)((float)(int)v6 * 0.015625) * v38) / 100.0;
              goto LABEL_58;
            case 0xB:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 2), (float)(int)v6 * 0.015625);
              goto LABEL_58;
            default:
              break;
          }
        }
        v40 = v37 + 63;
        if ((int)v37 >= 0)
          v40 = v37;
        v41 = v40 & 0xFFFFFFC0;
        v14 = __OFADD__((_DWORD)v6, v41);
        v17 = v6 + v41;
        v21 = (v6 >> 31) + 0x7FFFFFFF;
        if (v14)
          v17 = (v6 >> 31) + 0x7FFFFFFF;
        v42 = *((_DWORD *)a2 + 2);
        v14 = __OFADD__(*(_DWORD *)a2, v42);
        v43 = *(_DWORD *)a2 + v42;
        v44 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v44 = v43;
        v14 = __OFSUB__((_DWORD)v6, v44);
        v45 = v6 - v44;
        if (!v14)
          v21 = v45;
        goto LABEL_70;
      default:
        return v5 | (unint64_t)(v4 << 32);
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return v5 | (unint64_t)(v4 << 32);
}

uint64_t WebCore::RenderLayoutState::resetTextBoxTrim(uint64_t this, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 160))
  {
    v2 = this;
    this = *(_QWORD *)(this + 152);
    *(_QWORD *)(v2 + 152) = 0;
    if (this)
    {
      if (*(_DWORD *)this == 1)
        this = WTF::fastFree((WTF *)this, a2);
      else
        --*(_DWORD *)this;
    }
    *(_BYTE *)(v2 + 160) = 0;
  }
  return this;
}

uint64_t WebCore::RenderLayoutState::addTextBoxTrimEnd(WebCore::RenderLayoutState *this, const WebCore::RenderBlockFlow *a2)
{
  int v4;
  uint64_t result;
  int v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v4 = *((unsigned __int8 *)this + 160);
  result = *((_QWORD *)a2 + 1);
  if (!v4)
    goto LABEL_6;
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v8 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = result;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, a2);
        result = *((_QWORD *)a2 + 1);
        if (!result)
          goto LABEL_4;
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_4:
  if (*((_BYTE *)this + 160))
    goto LABEL_9;
  __break(1u);
LABEL_6:
  if (result)
    goto LABEL_7;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v9 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (!v9)
    goto LABEL_7;
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
LABEL_7:
    ++*(_DWORD *)result;
    goto LABEL_8;
  }
  WTF::fastFree(v9, a2);
  result = *((_QWORD *)a2 + 1);
  if (result)
    goto LABEL_7;
LABEL_8:
  v6 = *((unsigned __int8 *)this + 160);
  *((_BYTE *)this + 144) = 0;
  if (!v6)
  {
    *((_QWORD *)this + 19) = result;
    *((_BYTE *)this + 160) = 1;
    return result;
  }
LABEL_9:
  v7 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = result;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      return WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  return result;
}

uint64_t WebCore::firstInlineFormattingContextRoot(unint64_t this, const WebCore::RenderBlockFlow *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const WebCore::RenderBlockFlow *v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;

  if ((this & 0xFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
    if (v3)
    {
      while (1)
      {
        v4 = *(_BYTE *)(v3 + 52) & 7;
        if (v4 == 1)
          v5 = v3;
        else
          v5 = 0;
        if (v5)
          ++*(_DWORD *)(v5 + 16);
        if (v4 == 1 && (WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)v3) & 1) == 0)
          break;
        if (v5)
        {
          v7 = 4;
          result = v2;
          goto LABEL_12;
        }
        result = v2;
LABEL_14:
        v10 = *(unsigned int *)(v3 + 40);
        if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)))
          return 0;
        v3 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)) + 8);
        v2 = result;
        result = 0;
        if (!v3)
          return result;
      }
      if ((*(_BYTE *)(v3 + 22) & 4) != 0)
      {
        v11 = *(_DWORD *)(v3 + 240);
        if (v11 == 1)
        {
          v12 = *(_QWORD *)(v3 + 232);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 80);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 60) >= 2u && *(_DWORD *)(v13 + 44))
              {
LABEL_23:
                v7 = 1;
                result = v3;
                goto LABEL_12;
              }
            }
          }
        }
        else if (v11 == 2)
        {
          v14 = *(_QWORD *)(v3 + 232);
          if (v14)
          {
            v15 = *(_QWORD **)(v14 + 8);
            if (v15)
            {
              if (!(*(unsigned int (**)(_QWORD *))(*v15 + 88))(v15))
              {
                __break(0xC471u);
                JUMPOUT(0x19637D550);
              }
              v16 = 1;
              while (1)
              {
                v15 = (_QWORD *)v15[12];
                if (!v15)
                  break;
                ++v16;
                if (((*(uint64_t (**)(_QWORD *))(*v15 + 88))(v15) & 1) == 0)
                  goto LABEL_34;
              }
              if (v16)
                goto LABEL_23;
            }
          }
        }
      }
      result = WebCore::firstInlineFormattingContextRoot((WebCore *)(*(unsigned int *)(v3 + 64) | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)), v6);
      v7 = result != 0;
      if (!result)
        result = v2;
LABEL_12:
      v9 = *(_DWORD *)(v5 + 16);
      if (!v9)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x19637D530);
      }
      *(_DWORD *)(v5 + 16) = v9 - 1;
      if ((v7 | 4) != 4)
        return result;
      goto LABEL_14;
    }
  }
  return 0;
}

BOOL WebCore::RenderBlockFlow::hasLines(WebCore::RenderBlockFlow *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::LegacyLineLayout *v4;

  if ((*((_BYTE *)this + 22) & 4) == 0)
    return 0;
  v1 = *((_DWORD *)this + 60);
  if (v1 != 1)
  {
    if (v1 == 2)
    {
      v4 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
      if (v4)
        LODWORD(v4) = WebCore::LegacyLineLayout::lineCount(v4);
      return (_DWORD)v4 != 0;
    }
    goto LABEL_10;
  }
  v2 = *((_QWORD *)this + 29);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 80)) == 0 || *(_DWORD *)(v3 + 60) < 2u)
  {
LABEL_10:
    LODWORD(v4) = 0;
    return (_DWORD)v4 != 0;
  }
  LODWORD(v4) = *(_DWORD *)(v3 + 44);
  return (_DWORD)v4 != 0;
}

void WebCore::RenderBlockFlow::layoutBlockChildren(BOOL,WebCore::LayoutUnit &)::$_1::operator()(uint64_t a1)
{
  uint64_t v1;
  int v3;
  WebCore::RenderBlockFlow *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  if ((~*(_DWORD *)(*(_QWORD *)a1 + 20) & 0x208) == 0)
  {
    if (*(unsigned int *)(*(_QWORD *)a1 + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 51) << 32))
    {
      v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)a1 + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 51) << 32))
                     + 8);
      if (v1)
      {
        while (1)
        {
          v3 = *(_BYTE *)(v1 + 52) & 7;
          if (v3 == 1)
            v4 = (WebCore::RenderBlockFlow *)v1;
          else
            v4 = 0;
          if (v4)
            ++*((_DWORD *)v4 + 4);
          if (v3 != 1)
            goto LABEL_24;
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 1504))(v1)
            || ((*(_BYTE *)(v1 + 20) & 1) != 0
             || (*(_BYTE *)(v1 + 45) & 1) == 0
             && (v17 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8)) != 0
             && v1 == (*(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL)
             && (*(_WORD *)(v17 + 28) & 0x10) != 0
             && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 1504))(v1)
            && (*(_BYTE *)(v1 + 21) & 8) == 0
            && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 8) + 8))
          {
            v5 = *(uint64_t **)(v1 + 216);
            if (v5)
            {
              v6 = *v5;
              if (v6)
                break;
            }
          }
LABEL_25:
          v15 = *((_DWORD *)v4 + 4);
          if (!v15)
          {
            __break(0xC471u);
            return;
          }
          *((_DWORD *)v4 + 4) = v15 - 1;
LABEL_27:
          v16 = *(unsigned int *)(v1 + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32))
          {
            v1 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32)) + 8);
            if (v1)
              continue;
          }
          return;
        }
        v7 = *(_DWORD *)(v6 - 8);
        v8 = ~(*(_QWORD *)a1 << 32) + *(_QWORD *)a1;
        v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
        v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
        v11 = v7 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~((_DWORD)v10 << 27)));
        for (i = 1; ; ++i)
        {
          v13 = *(uint64_t ***)(v6 + 8 * v11);
          if (!v13)
            break;
          if (v13 != (uint64_t **)-1)
          {
            v14 = **v13;
            if (v14)
            {
              if (*(_QWORD *)(v14 + 8) == *(_QWORD *)a1)
              {
                WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v4, 0, 1);
                break;
              }
            }
          }
          v11 = (v11 + i) & v7;
        }
LABEL_24:
        if (!v4)
          goto LABEL_27;
        goto LABEL_25;
      }
    }
  }
}

uint64_t *WebCore::RenderBlockFlow::insertFloatingObject(uint64_t *this, WebCore::RenderBox *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t **v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::FloatingObjects *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WebCore::FloatingObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  uint64_t **v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  _BYTE v51[24];

  v3 = (uint64_t)this;
  v4 = (uint64_t *)this[27];
  if (!v4)
  {
    v15 = WTF::fastMalloc((WTF *)0x38);
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_QWORD *)(v15 + 32) = 0;
    *(_BYTE *)(v15 + 40) = (*(_DWORD *)(v3 + 20) & 0x1000) == 0;
    v16 = *(_QWORD *)(v3 + 8);
    if (!v16)
    {
      v16 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = v3;
      v39 = *(WTF **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v16;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          WTF::fastFree(v39, v14);
          v16 = *(_QWORD *)(v3 + 8);
          if (!v16)
          {
LABEL_13:
            *(_QWORD *)(v15 + 48) = v16;
            v17 = *(WebCore::FloatingObjects **)(v3 + 216);
            *(_QWORD *)(v3 + 216) = v15;
            if (v17)
            {
              WebCore::FloatingObjects::~FloatingObjects(v17, v14);
              WTF::fastFree(v18, v19);
            }
            goto LABEL_15;
          }
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
    }
    ++*(_DWORD *)v16;
    goto LABEL_13;
  }
  v5 = *v4;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = *(uint64_t ***)(v5 + 8 * v10);
      if (!v12)
        break;
      if (v12 != (uint64_t **)-1)
      {
        v13 = **v12;
        if (v13)
        {
          if (*(WebCore::RenderBox **)(v13 + 8) == a2)
          {
            if (v10 != *(_DWORD *)(v5 - 4))
              return this;
            break;
          }
        }
      }
      v10 = (v10 + i) & v6;
    }
  }
LABEL_15:
  v20 = WTF::fastMalloc((WTF *)0x28);
  v21 = WebCore::FloatingObject::FloatingObject((WebCore::FloatingObject *)v20, a2);
  *((_BYTE *)v21 + 36) |= 8u;
  if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
  {
    v22 = *((_DWORD *)a2 + 5);
LABEL_23:
    if ((v22 & 0xF8) != 0)
    {
      v27 = *((_QWORD *)a2 + 4);
      if (v27
        && (v28 = *(_QWORD *)(v27 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v28 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent(a2);
      }
      else
      {
        (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 688))(a2);
      }
    }
    goto LABEL_28;
  }
  v22 = *((_DWORD *)a2 + 5);
  if ((v22 & 0xF8) == 0 && (v22 & 0x20) == 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    if ((**(_BYTE **)(*(_QWORD *)(v23 + 496) + 8 * *(unsigned int *)(v23 + 508) - 8) & 4) != 0)
    {
      v22 |= 0x20u;
      *((_DWORD *)a2 + 5) = v22;
    }
  }
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v25 = *(_QWORD *)(*(_QWORD *)(v24 + 496) + 8 * *(unsigned int *)(v24 + 508) - 8);
  v26 = *(_QWORD *)(v25 + 24);
  if ((!v26 || !*(_QWORD *)(v26 + 8)) && ((*(_BYTE *)v25 & 2) == 0 || !*(_DWORD *)(v25 + 72)))
    goto LABEL_23;
  v48 = *(_QWORD *)(v3 + 32);
  if (!v48)
    goto LABEL_23;
  v49 = *(_QWORD *)(v48 + 8);
  if (!v49 || ((*(_DWORD *)(v3 + 124) ^ *(_DWORD *)(v49 + 124)) & 0xE000) != 0)
    goto LABEL_23;
  (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1304))(a2);
  WebCore::RenderBox::computeAndSetBlockDirectionMargins(a2, (const WebCore::RenderBlock *)v3);
LABEL_28:
  v29 = (char *)a2 + 160;
  if ((*(_DWORD *)(v3 + 20) & 0x1000) != 0)
    v29 = (char *)a2 + 164;
  v30 = *(_DWORD *)v29;
  v31 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)a2 + 1128))(a2, v3 + 80);
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  else
    v32 = v30 + v31;
  v33 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)a2 + 1136))(a2, v3 + 80);
  v34 = v32 + v33;
  if (__OFADD__(v32, v33))
    v34 = (v32 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)(v3 + 21) & 0x10) != 0)
    *(_DWORD *)(v20 + 20) = v34;
  else
    *(_DWORD *)(v20 + 16) = v34;
  v35 = *(_QWORD *)(v3 + 216);
  v50 = (WTF *)v20;
  if ((*(_BYTE *)(v20 + 36) & 3) == 1)
    ++*(_DWORD *)(v35 + 32);
  else
    ++*(_DWORD *)(v35 + 36);
  if ((*(_BYTE *)(v20 + 36) & 0x10) != 0)
  {
    *(_BYTE *)(v20 + 36) |= 0x10u;
    v40 = *(uint64_t ***)(v35 + 24);
    if (v40)
    {
      if (*(_BYTE *)(v35 + 40))
      {
        v41 = *(_DWORD *)(v20 + 12);
        v42 = *(_DWORD *)(v20 + 20);
      }
      else
      {
        v41 = *(_DWORD *)(v20 + 8);
        v42 = *(_DWORD *)(v20 + 16);
      }
      v43 = __OFADD__(v41, v42);
      v44 = v41 + v42;
      if (v43)
        v44 = (v41 >> 31) + 0x7FFFFFFF;
      v45 = v41 & 0xFFFFFFC0;
      v46 = v44 & 0xFFFFFFC0;
      v47 = WTF::fastMalloc((WTF *)0x38);
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = 0;
      *(_QWORD *)v47 = 0;
      *(_DWORD *)(v47 + 24) = 0;
      *(_DWORD *)(v47 + 32) = v45;
      *(_DWORD *)(v47 + 36) = v46;
      *(_QWORD *)(v47 + 40) = v20;
      *(_DWORD *)(v47 + 48) = v46;
      WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::insertNode(v40, (uint64_t *)v47);
    }
  }
  this = WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::add((uint64_t *)v35, (uint64_t **)&v50, (uint64_t)v51);
  v37 = v50;
  v50 = 0;
  if (v37)
  {
    v38 = *(WTF **)v37;
    *(_QWORD *)v37 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::fastFree(v38, v36);
      else
        --*(_DWORD *)v38;
    }
    return (uint64_t *)WTF::fastFree(v37, v36);
  }
  return this;
}

uint64_t WebCore::RenderBlockFlow::adjustFloatingBlock(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  int *v10;
  unsigned int *v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;
  WebCore::FloatingObject **v16;
  WebCore::FloatingObject **v17;
  WebCore::FloatingObject *v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  WebCore::FloatingObject *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  const WebCore::RenderBox *v61;
  int v62;
  uint64_t v63;
  uint64_t **v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  int v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int i;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  WebCore *v93;
  _BOOL8 v94;
  uint64_t v95;
  _QWORD *v97;
  _DWORD *v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  _QWORD *v103;
  _DWORD *v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  int v115;
  unsigned int j;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  unsigned int k;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  unsigned int v125;
  int m;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  unsigned int *v130;
  unsigned int v131;
  int v132;
  int v133;
  int *v134;
  uint64_t v135;
  __int128 v136;
  unsigned int v137;
  __int128 v138;
  _BYTE v139[16];
  char v140;
  __int128 v141;
  char v142;

  v2 = result;
  if ((~*a2 & 0x12) != 0)
  {
    v4 = *((_DWORD *)a2 + 1);
    v5 = *((_DWORD *)a2 + 2);
    v6 = __OFSUB__(v4, v5);
    v7 = v4 - v5;
    v8 = (v4 >> 31) + 0x7FFFFFFF;
    if (v6)
      v3 = v8;
    else
      v3 = v7;
  }
  else
  {
    v3 = 0;
  }
  v9 = ((*(_DWORD *)(result + 124) >> 13) & 6) - 2;
  v10 = (int *)(result + 164);
  if (v9 >= 4)
    v11 = (unsigned int *)(result + 164);
  else
    v11 = (unsigned int *)(result + 160);
  v12 = *v11;
  v6 = __OFADD__(v12, v3);
  v13 = v12 + v3;
  v14 = (v12 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v14 = v13;
  if (v9 < 4)
    v10 = (int *)(result + 160);
  *v10 = v14;
  v15 = *(_QWORD **)(result + 216);
  if (v15)
  {
    if (*v15)
    {
      if (*(_DWORD *)(*v15 - 12))
      {
        v16 = (WebCore::FloatingObject **)v15[2];
        if ((*((_BYTE *)*v16 + 36) & 0x10) == 0)
        {
          v17 = (WebCore::FloatingObject **)v15[1];
          while (v16 != v17)
          {
            v16 = (WebCore::FloatingObject **)v16[1];
            v18 = *v16;
            if ((*((_BYTE *)*v16 + 36) & 0x10) != 0)
            {
              v17 = (WebCore::FloatingObject **)v16[2];
              goto LABEL_22;
            }
          }
          v18 = 0;
LABEL_22:
          v19 = (int *)(result + 160);
          if (v9 >= 4)
            v19 = (int *)(result + 164);
          v20 = *v19;
          v137 = *v19;
          if (v18)
          {
            v21 = (int *)((char *)v18 + 8);
            v22 = (int *)((char *)v18 + 12);
            if ((*(_DWORD *)(result + 20) & 0x1000) != 0)
              v22 = v21;
            v23 = *v22;
            if (v23 > v20)
              v20 = v23;
            v137 = v20;
          }
          if (v17)
          {
            v24 = result + 80;
            v135 = result + 80;
            while (1)
            {
              v25 = *v17;
              v26 = *(_QWORD *)*v17;
              v27 = v26 ? *(_QWORD *)(v26 + 8) : 0;
              result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v27);
              if (result == v2)
                break;
LABEL_35:
              v17 = (WebCore::FloatingObject **)v17[2];
              if (!v17)
              {
                v9 = ((*(_DWORD *)(v2 + 124) >> 13) & 6) - 2;
                goto LABEL_224;
              }
            }
            v28 = (__int128 *)(v27 + 152);
            v136 = *(_OWORD *)(v27 + 152);
            v29 = v27;
            if ((*(_BYTE *)(v27 + 45) & 2) != 0)
              v29 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
            v30 = *(_WORD *)(v29 + 98) & 7;
            if (v30)
            {
              switch(v30)
              {
                case 1:
                  goto LABEL_141;
                case 2:
                  goto LABEL_147;
                case 3:
                case 4:
                  v74 = *((_BYTE *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v27) + 123);
                  if (v30 == 3)
                    v75 = 2;
                  else
                    v75 = 1;
                  if (v30 == 3)
                    v76 = 1;
                  else
                    v76 = 2;
                  if ((v74 & 4) != 0)
                    LOBYTE(v30) = v75;
                  else
                    LOBYTE(v30) = v76;
                  if ((v30 & 1) == 0)
                    goto LABEL_146;
                  goto LABEL_141;
                case 5:
                  LOBYTE(v30) = 3;
LABEL_141:
                  v87 = *(_QWORD *)(v2 + 216);
                  if (v87 && (v97 = *(_QWORD **)(v87 + 8)) != 0)
                  {
                    v88 = 0;
                    do
                    {
                      v98 = (_DWORD *)*v97;
                      if ((~*(unsigned __int8 *)(*v97 + 36) & 0x11) == 0)
                      {
                        if ((*(_BYTE *)(v2 + 21) & 0x10) != 0)
                        {
                          v99 = v98[2];
                          v100 = v98[4];
                        }
                        else
                        {
                          v99 = v98[3];
                          v100 = v98[5];
                        }
                        v6 = __OFADD__(v99, v100);
                        v101 = v99 + v100;
                        v102 = (v99 >> 31) + 0x7FFFFFFF;
                        if (v6)
                          v101 = v102;
                        if (v88 <= v101)
                          v88 = v101;
                      }
                      v97 = (_QWORD *)v97[2];
                    }
                    while (v97);
                  }
                  else
                  {
                    v88 = 0;
                  }
                  if (v88 > v20)
                    v20 = v88;
                  v137 = v20;
LABEL_146:
                  v24 = v135;
                  if ((v30 & 0xFE) == 2)
                  {
LABEL_147:
                    v89 = *(_QWORD *)(v2 + 216);
                    if (v89 && (v103 = *(_QWORD **)(v89 + 8)) != 0)
                    {
                      v90 = 0;
                      do
                      {
                        v104 = (_DWORD *)*v103;
                        if ((~*(unsigned __int8 *)(*v103 + 36) & 0x12) == 0)
                        {
                          if ((*(_BYTE *)(v2 + 21) & 0x10) != 0)
                          {
                            v105 = v104[2];
                            v106 = v104[4];
                          }
                          else
                          {
                            v105 = v104[3];
                            v106 = v104[5];
                          }
                          v6 = __OFADD__(v105, v106);
                          v107 = v105 + v106;
                          v108 = (v105 >> 31) + 0x7FFFFFFF;
                          if (v6)
                            v107 = v108;
                          if (v90 <= v107)
                            v90 = v107;
                        }
                        v103 = (_QWORD *)v103[2];
                      }
                      while (v103);
                    }
                    else
                    {
                      v90 = 0;
                    }
                    if (v90 <= v20)
                      v91 = v20;
                    else
                      v91 = v90;
                    v137 = v91;
                    v24 = v135;
                  }
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x19637E7BCLL);
              }
            }
            WebCore::RenderBlockFlow::computeLogicalLocationForFloat((WebCore::RenderBlockFlow *)v2, v25, (WebCore::LayoutUnit *)&v137);
            v31 = (unsigned int *)(v27 + 152);
            if ((*(_BYTE *)(v2 + 21) & 0x10) == 0)
              v31 = (unsigned int *)(v27 + 156);
            v32 = *v31;
            WebCore::RenderBlock::estimateFragmentRangeForBoxChild(v2, (const WebCore::RenderBox *)v27);
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 1512))(v27);
            if ((*(_BYTE *)(v27 + 20) & 0xF8) != 0)
            {
              v33 = *(_QWORD *)(v27 + 32);
              if (v33
                && (v34 = *(_QWORD *)(v33 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v34 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944)
                                         + 248)
                             + 479))
              {
                WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v27);
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 688))(v27);
              }
            }
            v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 248);
            if ((**(_BYTE **)(*(_QWORD *)(v35 + 496) + 8 * *(unsigned int *)(v35 + 508) - 8) & 2) == 0)
            {
LABEL_82:
              if ((*(_BYTE *)(v2 + 21) & 0x10) != 0)
              {
                v52 = (unsigned int *)(v27 + 160);
                v53 = (unsigned int *)(v27 + 152);
              }
              else
              {
                v52 = (unsigned int *)(v27 + 164);
                v53 = (unsigned int *)(v27 + 156);
              }
              v54 = *v52;
              v55 = *v53;
              v20 = v137;
              v6 = __OFSUB__(v55, v137);
              v56 = v55 - v137;
              v57 = (v55 >> 31) + 0x7FFFFFFF;
              if (!v6)
                v57 = v56;
              v6 = __OFADD__(v54, v57);
              v58 = v54 + v57;
              v59 = (v54 >> 31) + 0x7FFFFFFF;
              if (v6)
                v60 = v59;
              else
                v60 = v58;
              result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 1120))(v27, v24);
              v62 = v60 + result;
              if (__OFADD__(v60, (_DWORD)result))
                v62 = (v60 >> 31) + 0x7FFFFFFF;
              if ((*(_BYTE *)(v2 + 21) & 0x10) != 0)
                *((_DWORD *)v25 + 4) = v62;
              else
                *((_DWORD *)v25 + 5) = v62;
              v63 = *(_QWORD *)(v2 + 216);
              *((_BYTE *)v25 + 36) |= 0x10u;
              v64 = *(uint64_t ***)(v63 + 24);
              if (v64)
              {
                if (*(_BYTE *)(v63 + 40))
                {
                  v65 = *((_DWORD *)v25 + 3);
                  v66 = *((_DWORD *)v25 + 5);
                }
                else
                {
                  v65 = *((_DWORD *)v25 + 2);
                  v66 = *((_DWORD *)v25 + 4);
                }
                v6 = __OFADD__(v65, v66);
                v67 = v65 + v66;
                if (v6)
                  v67 = (v65 >> 31) + 0x7FFFFFFF;
                v68 = v65 & 0xFFFFFFC0;
                v69 = v67 & 0xFFFFFFC0;
                v70 = WTF::fastMalloc((WTF *)0x38);
                *(_QWORD *)(v70 + 8) = 0;
                *(_QWORD *)(v70 + 16) = 0;
                *(_QWORD *)v70 = 0;
                *(_DWORD *)(v70 + 24) = 0;
                *(_DWORD *)(v70 + 32) = v68;
                *(_DWORD *)(v70 + 36) = v69;
                *(_QWORD *)(v70 + 40) = v25;
                *(_DWORD *)(v70 + 48) = v69;
                result = (uint64_t)WebCore::PODRedBlackTree<WebCore::PODInterval<WebCore::LayoutUnit,WebCore::FloatingObject *>,WebCore::PODIntervalNodeUpdater>::insertNode(v64, (uint64_t *)v70);
                v24 = v135;
              }
              if ((*(_WORD *)(v27 + 69) & 0x800) != 0)
              {
                result = WebCore::ShapeOutsideInfo::isEnabledFor((WebCore::ShapeOutsideInfo *)v27, v61);
                if ((_DWORD)result)
                {
                  {
                    v77 = dword_1EE2F9340;
                  }
                  else
                  {
                    v77 = 0;
                    WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
                    *(_QWORD *)&dword_1EE2F9340 = 0;
                  }
                  dword_1EE2F9340 = v77 + 1;
                  v78 = *(_QWORD *)(v27 + 8);
                  v24 = v135;
                  if (v78)
                  {
                    if (*(_QWORD *)(v78 + 8) && WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
                    {
                      v79 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 8);
                      v80 = (~(v78 << 32) + v78) ^ ((unint64_t)(~(v78 << 32) + v78) >> 22);
                      v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
                      v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
                      v83 = v79 & ((v82 >> 31) ^ v82);
                      for (i = 1; ; ++i)
                      {
                        v85 = v83;
                        v86 = *(_QWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v83);
                        if (v86 != -1)
                        {
                          v24 = v135;
                          if (!v86)
                            goto LABEL_103;
                          if (v86 == v78)
                            break;
                        }
                        v83 = (v85 + i) & v79;
                      }
                      v92 = *(_QWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v85 + 8);
                      v24 = v135;
                      if (v92)
                      {
                        v93 = *(WebCore **)v92;
                        v94 = (*((_DWORD *)WebCore::RenderObject::containingBlock(*(WebCore::RenderObject **)v92) + 5) & 0x1000) == 0;
                        result = WebCore::computeLogicalBoxSize(v93, (const WebCore::RenderBox *)v94);
                        v95 = result;
                        if (*(_DWORD *)(v92 + 16) != (_DWORD)result || *(_DWORD *)(v92 + 20) != HIDWORD(result))
                        {
                          result = *(_QWORD *)(v92 + 8);
                          *(_QWORD *)(v92 + 8) = 0;
                          if (result)
                          {
                            if (*(_DWORD *)(result + 8) == 1)
                              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                            else
                              --*(_DWORD *)(result + 8);
                          }
                          *(_QWORD *)(v92 + 16) = v95;
                          v24 = v135;
                        }
                      }
                    }
                  }
                }
              }
LABEL_103:
              v71 = *(_DWORD *)(v27 + 20);
              if ((v71 & 0x200) != 0)
              {
                if ((v71 & 0x8000) == 0)
                  goto LABEL_105;
                if ((*(_BYTE *)(v27 + 45) & 0x10) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19637E75CLL);
                }
                v73 = *(_QWORD *)(v27 + 144);
                if (!v73 || (*(_BYTE *)(v73 + 25) & 8) == 0)
                {
LABEL_105:
                  v72 = *(_QWORD *)(v27 + 24);
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 288)
                                 + 476)
                    && (_QWORD)v136 != *(_QWORD *)v28)
                  {
                    v138 = *v28;
                    *v28 = v136;
                    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 40) + 8)
                                                                                               + 1944)
                                                                                   + 24)
                                                                       + 8)
                                                           + 40)
                                               + 8)
                                   + 3382))
                    {
                      LOBYTE(v141) = 0;
                      v142 = 0;
                      v139[0] = 0;
                      v140 = 0;
                      WebCore::RenderObject::issueRepaint(v27, &v141, 0, 0, (uint64_t)v139);
                    }
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 1296))(v27, 1);
                    *v28 = v138;
                    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 40) + 8)
                                                                                               + 1944)
                                                                                   + 24)
                                                                       + 8)
                                                           + 40)
                                               + 8)
                                   + 3382))
                    {
                      LOBYTE(v141) = 0;
                      v142 = 0;
                      v139[0] = 0;
                      v140 = 0;
                      WebCore::RenderObject::issueRepaint(v27, &v141, 0, 0, (uint64_t)v139);
                    }
                    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 1296))(v27, 1);
                  }
                }
              }
              goto LABEL_35;
            }
            v36 = v137;
            v37 = v32 - v137;
            if (__OFSUB__(v32, v137))
              v37 = (v32 >> 31) + 0x7FFFFFFF;
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 1120))(v27, v24);
            v39 = WebCore::RenderBlockFlow::adjustForUnsplittableChild((const WebCore::RenderBox *)v2, v27, v36, v37, v38);
            LODWORD(v141) = v39;
            v40 = *(_BYTE *)(v27 + 45);
            if ((v40 & 0x40) != 0)
              v41 = v27;
            else
              v41 = 0;
            if ((*(_BYTE *)(v27 + 45) & 0x40) == 0 || (*(_WORD *)(v27 + 69) & 0x400) == 0)
            {
LABEL_55:
              if (v39 != (_DWORD)v36)
              {
                v42 = v39 - v36;
                if (__OFSUB__(v39, (_DWORD)v36))
                  v42 = (v39 >> 31) + 0x7FFFFFFF;
                *((_DWORD *)v25 + 6) = v42;
                WebCore::RenderBlockFlow::computeLogicalLocationForFloat((WebCore::RenderBlockFlow *)v2, v25, (WebCore::LayoutUnit *)&v141);
                v43 = *(_DWORD *)(v27 + 20);
                if ((v40 & 0x40) != 0 && (v43 & 0x20) == 0)
                {
                  v43 |= 0x20u;
                  *(_DWORD *)(v27 + 20) = v43;
                }
                if ((v43 & 0xF8) != 0)
                {
                  v44 = *(_QWORD *)(v27 + 32);
                  if (v44
                    && (v45 = *(_QWORD *)(v44 + 8)) != 0
                    && (*(_BYTE *)(*(_QWORD *)(v45 + 104) + 239) & 0x18) != 0
                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 1944)
                                             + 248)
                                 + 479))
                  {
                    WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v27);
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 688))(v27);
                  }
                }
                v137 = v141;
              }
              if (WebCore::RenderBlock::updateFragmentRangeForBoxChild((WebCore::RenderBlock *)v2, (const WebCore::RenderBox *)v27))
              {
                v46 = *(_DWORD *)(v27 + 20);
                if ((v46 & 8) != 0)
                {
                  v47 = *(_DWORD *)(v27 + 20);
                }
                else
                {
                  LOBYTE(v47) = v46 | 8;
                  *(_DWORD *)(v27 + 20) = v46 | 8;
                  if ((v46 & 0x8000) != 0)
                  {
                    if ((*(_BYTE *)(v27 + 45) & 0x10) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19637E77CLL);
                    }
                    v48 = *(_QWORD *)(v27 + 144);
                    if (v48)
                    {
                      v49 = *(_DWORD *)(v48 + 8) + 1;
                      *(_DWORD *)(v48 + 8) = v49;
                    }
                    else
                    {
                      v49 = MEMORY[8];
                    }
                    *(_QWORD *)(v48 + 24) = *(_QWORD *)(v48 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                    if (!v49)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19637E79CLL);
                    }
                    *(_DWORD *)(v48 + 8) = v49 - 1;
                    v47 = *(_DWORD *)(v27 + 20);
                  }
                }
                if ((v47 & 0xF8) != 0)
                {
                  v50 = *(_QWORD *)(v27 + 32);
                  if (v50
                    && (v51 = *(_QWORD *)(v50 + 8)) != 0
                    && (*(_BYTE *)(*(_QWORD *)(v51 + 104) + 239) & 0x18) != 0
                    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 24)
                                                                                             + 8)
                                                                                 + 40)
                                                                     + 8)
                                                         + 1944)
                                             + 248)
                                 + 479))
                  {
                    WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v27);
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 688))(v27);
                  }
                }
              }
              goto LABEL_82;
            }
            v109 = *(_QWORD *)WebCore::gRareDataMap;
            if (*(_QWORD *)WebCore::gRareDataMap)
            {
              v110 = *(_DWORD *)(v109 - 8);
              v111 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
              v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
              v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
              v114 = v110 & ((v113 >> 31) ^ v113);
              v115 = 1;
              for (j = v114; ; j = (v117 + v115++) & v110)
              {
                v117 = j;
                v118 = *(_QWORD *)(v109 + 16 * j);
                if (v118 != -1)
                {
                  if (!v118)
                    goto LABEL_222;
                  if (*(_QWORD *)(v118 + 8) == v41)
                    break;
                }
              }
              v119 = *(_DWORD **)(v109 + 16 * v117 + 8);
              if (v119)
              {
                v24 = v135;
                if (!*v119)
                  goto LABEL_55;
                v120 = 1;
                for (k = v114; ; k = (v122 + v120++) & v110)
                {
                  v122 = k;
                  v123 = *(_QWORD *)(v109 + 16 * k);
                  if (v123 != -1)
                  {
                    if (!v123)
                    {
                      LODWORD(v124) = 0;
                      goto LABEL_212;
                    }
                    if (*(_QWORD *)(v123 + 8) == v41)
                      break;
                  }
                }
                v124 = *(_DWORD **)(v109 + 16 * v122 + 8);
                if (v124)
                  LODWORD(v124) = *v124;
LABEL_212:
                v6 = __OFADD__(v39, (_DWORD)v124);
                v125 = v39 + (_DWORD)v124;
                if (v6)
                  v39 = (v39 >> 31) + 0x7FFFFFFF;
                else
                  v39 = v125;
                LODWORD(v141) = v39;
                for (m = 1; ; ++m)
                {
                  v127 = v114;
                  v128 = *(_QWORD *)(v109 + 16 * v114);
                  if (v128 != -1)
                  {
                    if (!v128)
                      goto LABEL_222;
                    if (*(_QWORD *)(v128 + 8) == v41)
                      break;
                  }
                  v114 = (v127 + m) & v110;
                }
                v129 = *(_DWORD **)(v109 + 16 * v127 + 8);
                if (v129)
                  *v129 = 0;
              }
            }
LABEL_222:
            v24 = v135;
            goto LABEL_55;
          }
        }
      }
    }
  }
LABEL_224:
  if (v9 >= 4)
    v130 = (unsigned int *)(v2 + 164);
  else
    v130 = (unsigned int *)(v2 + 160);
  v131 = *v130;
  v6 = __OFSUB__(v131, v3);
  v132 = v131 - v3;
  v133 = (v131 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v133 = v132;
  if (v9 >= 4)
    v134 = (int *)(v2 + 164);
  else
    v134 = (int *)(v2 + 160);
  *v134 = v133;
  return result;
}

uint64_t WebCore::RenderBlockFlow::layoutBlockChild(uint64_t a1, _QWORD *a2, unsigned __int16 *a3, int *a4, int *a5)
{
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  float v18;
  double v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  float v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int v38;
  signed int v39;
  unsigned int v40;
  signed int v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  const WebCore::RenderObject *v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  WebCore::RenderBlockFlow *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::RenderObject *v91;
  unint64_t v92;
  __int16 v93;
  int v94;
  int v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  _BOOL4 v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int64_t v116;
  WTF *v117;
  unint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  int *v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int *v131;
  int v132;
  int *v133;
  int v134;
  const WebCore::RenderObject *v135;
  unsigned int v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  int v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  WTF *v152;
  uint64_t v153;
  char **v154;
  char *v155;
  __int16 v156;
  unsigned int v157;
  int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  unsigned int v185;
  _DWORD *v186;
  int v187;
  int v188;
  uint64_t result;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  int v196;
  int *v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  int v208;
  int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int *v225;
  uint64_t v226;
  float v227;
  float v228;
  float v230;
  float v231;
  int v233;
  int v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  uint64_t v239;
  _BOOL4 v240;
  int v241;
  int v242;
  int v243;
  signed int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _DWORD *v258;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  _QWORD *v263;
  _DWORD *v264;
  unsigned int v265;
  int v266;
  int v267;
  int v268;
  unsigned int *v269;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  unsigned int *v274;
  unsigned int v275;
  int v276;
  int *v277;
  int v278;
  unsigned int *v279;
  int PageLogicalTop;
  unsigned int v281;
  int v282;
  BOOL v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int *v287;
  unsigned int v288;
  int v289;
  int v290;
  int *v291;
  int v292;
  int v293;
  int v294;
  unsigned int v295;
  int v296;
  int v297;
  int v298;
  unsigned int v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  unsigned int *v304;
  _DWORD *v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  int v313;
  int v314;
  int v315;
  unsigned int *v316;
  int v317;
  int *v318;
  unint64_t v319;
  unint64_t v320;
  int v321;
  int *v322;
  int v323;
  _QWORD *v324;
  int v325;
  int v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int *v338;
  unsigned int v339;
  int v340;
  unsigned int *v341;
  int v342;
  int *v343;
  unint64_t v344;
  unint64_t v345;
  int v346;
  int v347;
  int v348;
  int *v349;
  int v350;
  _QWORD *v351;
  unsigned int v352;
  unsigned int *v353;
  unsigned int v354;
  int v355;
  void *v356;
  uint64_t v357;
  uint64_t v358;
  WTF *v359;
  void *v360;
  WTF *v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  WebCore::RenderFragmentedFlow *v372;
  uint64_t v373;
  void *v374;
  WebCore::RenderFragmentedFlow *v375;
  int v376;
  uint64_t v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  int v381;
  unsigned int v382;
  int v383;
  unsigned int v384;
  int v385;
  int v386;
  int v387;
  unsigned int v388;
  int v389;
  unsigned int *v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  BOOL v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  int v400;
  unsigned int v401;
  __int128 v403;
  int v404;
  int v405;
  int v406;
  unsigned int v407;
  int v408;
  unint64_t v409;
  unsigned int v410;
  WebCore::RenderBlockFlow *v411;
  int v412;
  char v413;
  int v414;
  uint64_t v415;
  int v416;
  _DWORD *v417;
  int v418;
  int v419;
  unsigned int NextFloatLogicalBottomBelowForBlock;
  __int128 v422;
  char v423;
  WebCore::RenderFragmentContainer *v424;
  WebCore::RenderFragmentContainer *v425[2];
  WebCore::RenderFragmentContainer *v426[2];
  char v427;

  v8 = *(int **)(a1 + 224);
  if (v8)
  {
    v314 = *v8;
    v11 = v8[1];
    v400 = v314;
  }
  else
  {
    v368 = 3;
    switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
    {
      case 1:
        v9 = a1 + 168;
        v400 = *(_DWORD *)(a1 + 176) & ~(*(int *)(a1 + 176) >> 31);
LABEL_812:
        v367 = 2;
        goto LABEL_6;
      case 2:
      case 4:
        goto LABEL_4;
      case 3:
      case 5:
        v368 = 1;
        goto LABEL_4;
      default:
        v368 = 0;
LABEL_4:
        v9 = a1 + 168;
        v400 = *(_DWORD *)(a1 + 168 + 4 * v368) & ~(*(int *)(a1 + 168 + 4 * v368) >> 31);
        v367 = 3;
        switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
        {
          case 1:
            goto LABEL_812;
          case 2:
          case 4:
            break;
          case 3:
          case 5:
            v367 = 1;
            break;
          default:
            v367 = 0;
            break;
        }
LABEL_6:
        v10 = *(_DWORD *)(v9 + 4 * v367);
        if (v10 == 0x80000000)
          v11 = 0x7FFFFFFF;
        else
          v11 = -v10 & ~(-v10 >> 31);
        break;
    }
  }
  v399 = v11;
  v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 1144))(a2);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 1) != 0
    && (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 1584))(a1, 1, a2))
  {
    v357 = a2[4];
    if (v357)
    {
      v358 = *(_QWORD *)(v357 + 8);
      if (v358)
      {
        if (*(_BYTE *)(v358 + 46) == 12 && (*((_BYTE *)a2 + 21) & 4) == 0)
        {
          v359 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a2, v356);
          v21 = 0;
          *((_BYTE *)v359 + 2) |= 1u;
          goto LABEL_21;
        }
      }
    }
    goto LABEL_415;
  }
  v13 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
  if (v13 > 4)
    v14 = 0;
  else
    v14 = qword_1969FC6C8[v13];
  v15 = *(_QWORD *)(a2[11] + 24) + 40;
  v16 = (unsigned __int8 *)(v15 + 8 * v14);
  v17 = v16[4];
  if (v17 != 4)
  {
    if (v17 == 3)
    {
      v227 = *(float *)v16;
      if (!*(_BYTE *)(v15 + 8 * v14 + 6))
        v227 = (float)*(int *)v16;
      v228 = (float)((float)((float)v12 * 0.015625) * v227) / 100.0;
    }
    else
    {
      if (v17 != 11)
      {
LABEL_415:
        v21 = 0;
        goto LABEL_21;
      }
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v16, (float)v12 * 0.015625);
    }
    v19 = v228 * 64.0;
    if (v19 < 2147483650.0 && v19 > -2147483650.0)
      goto LABEL_20;
    if (v19 < 2147483650.0)
    {
      if (v19 <= -2147483650.0)
      {
        v21 = 0x80000000;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_838;
  }
  v18 = *(float *)v16;
  if (!v16[6])
    v18 = (float)*(int *)v16;
  v19 = v18 * 64.0;
  if (v19 < 2147483650.0 && v19 > -2147483650.0)
  {
LABEL_20:
    v21 = (int)v19;
    goto LABEL_21;
  }
  if (v19 >= 2147483650.0)
  {
LABEL_838:
    v21 = 0x7FFFFFFF;
    goto LABEL_21;
  }
  if (v19 > -2147483650.0)
    v21 = (int)v19;
  else
    v21 = 0x80000000;
LABEL_21:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 461) & 2) != 0
    && (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 1584))(a1, 2, a2))
  {
    v30 = a2[4];
    if (!v30)
      goto LABEL_33;
    v30 = *(_QWORD *)(v30 + 8);
    if (!v30)
      goto LABEL_33;
    if (*(_BYTE *)(v30 + 46) == 12 && (*((_BYTE *)a2 + 21) & 4) == 0)
    {
      v361 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a2, v360);
      LODWORD(v30) = 0;
      *((_BYTE *)v361 + 2) |= 2u;
      goto LABEL_33;
    }
LABEL_417:
    LODWORD(v30) = 0;
    goto LABEL_33;
  }
  v22 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
  if (v22 > 4)
    v23 = 2;
  else
    v23 = qword_1969FC6F0[v22];
  v24 = *(_QWORD *)(a2[11] + 24) + 40;
  v25 = (unsigned __int8 *)(v24 + 8 * v23);
  v26 = v25[4];
  if (v26 != 4)
  {
    if (v26 == 3)
    {
      v230 = *(float *)v25;
      if (!*(_BYTE *)(v24 + 8 * v23 + 6))
        v230 = (float)*(int *)v25;
      v231 = (float)((float)((float)v12 * 0.015625) * v230) / 100.0;
    }
    else
    {
      if (v26 != 11)
        goto LABEL_417;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v25, (float)v12 * 0.015625);
    }
    v28 = v231 * 64.0;
    if (v28 >= 2147483650.0 || v28 <= -2147483650.0)
    {
      if (v28 >= 2147483650.0)
        goto LABEL_839;
      if (v28 <= -2147483650.0)
      {
        LODWORD(v30) = 0x80000000;
        goto LABEL_33;
      }
    }
LABEL_32:
    LODWORD(v30) = (int)v28;
    goto LABEL_33;
  }
  v27 = *(float *)v25;
  if (!v25[6])
    v27 = (float)*(int *)v25;
  v28 = v27 * 64.0;
  if (v28 < 2147483650.0 && v28 > -2147483650.0)
    goto LABEL_32;
  if (v28 < 2147483650.0)
  {
    if (v28 > -2147483650.0)
      LODWORD(v30) = (int)v28;
    else
      LODWORD(v30) = 0x80000000;
    goto LABEL_33;
  }
LABEL_839:
  LODWORD(v30) = 0x7FFFFFFF;
LABEL_33:
  v31 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
  if (v31 > 4)
    v32 = 0;
  else
    v32 = qword_1969FC6C8[v31];
  v33 = a2 + 21;
  *((_DWORD *)a2 + v32 + 42) = v21;
  v34 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
  if (v34 > 4)
    v35 = 2;
  else
    v35 = qword_1969FC6F0[v34];
  *((_DWORD *)v33 + v35) = v30;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v36 = (int *)(a1 + 160);
  else
    v36 = (int *)(a1 + 164);
  v37 = *v36;
  if ((~*a3 & 0x12) != 0)
  {
    LODWORD(v422) = 0;
    LODWORD(v426[0]) = 0;
    if ((*((_BYTE *)a2 + 20) & 8) != 0)
    {
      WebCore::RenderBlockFlow::marginBeforeEstimateForChild(a1, (WebCore::RenderBox *)a2, (WebCore::LayoutUnit *)&v422, (WebCore::LayoutUnit *)v426);
      v38 = v422;
      v39 = (signed int)v426[0];
    }
    else
    {
      v116 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)a2);
      v38 = v116 & ~((int)v116 >> 31);
      v39 = HIDWORD(v116) & ~(v116 >> 63);
    }
    v40 = *((_DWORD *)a3 + 1);
    if ((int)v40 <= v38)
      v40 = v38;
    if (*((_DWORD *)a3 + 2) <= v39)
      v41 = v39;
    else
      v41 = *((_DWORD *)a3 + 2);
    v42 = __OFSUB__(v40, v41);
    v43 = v40 - v41;
    if (v42)
      v43 = (v40 >> 31) + 0x7FFFFFFF;
    v42 = __OFADD__(v37, v43);
    v44 = v37 + v43;
    if (v42)
      v37 = (v37 >> 31) + 0x7FFFFFFF;
    else
      v37 = v44;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v46 = *(_QWORD *)(*(_QWORD *)(v45 + 496) + 8 * *(unsigned int *)(v45 + 508) - 8);
  if ((*(_BYTE *)v46 & 2) != 0 && *(_DWORD *)(v46 + 72))
  {
    v278 = ((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3 ? *(_DWORD *)(a1 + 160) : *(_DWORD *)(a1 + 164);
    if (v37 > v278 && WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)a1, v278, 0))
    {
      v279 = (unsigned int *)(((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4 ? a1 + 160 : a1 + 164);
      PageLogicalTop = WebCore::RenderBlockFlow::nextPageLogicalTop((_BYTE *)a1, *v279, 0);
      if (PageLogicalTop < v37)
        v37 = PageLogicalTop;
    }
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1))
  {
LABEL_55:
    v48 = 0;
    goto LABEL_56;
  }
  v308 = WebCore::RenderStyle::usedClear((WebCore::RenderStyle *)a2, v47);
  switch((int)v308)
  {
    case 0:
      goto LABEL_616;
    case 1:
      goto LABEL_613;
    case 2:
      LOBYTE(v308) = 2;
      goto LABEL_613;
    case 3:
      LOBYTE(v308) = 3;
LABEL_613:
      v315 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom(a1, v308);
      break;
    default:
      v315 = 0;
      break;
  }
  v48 = v315 - v37;
  if (__OFSUB__(v315, v37))
  {
    v48 = 0x7FFFFFFF;
    goto LABEL_56;
  }
  if (v48 <= 0)
  {
LABEL_616:
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 1504))(a2, v308))
    {
      NextFloatLogicalBottomBelowForBlock = v37;
      while (1)
      {
        v316 = (*(_DWORD *)(a1 + 20) & 0x1000) != 0 ? (unsigned int *)(a2 + 20) : (unsigned int *)((char *)a2 + 164);
        v317 = WebCore::RenderBlock::availableLogicalWidthForLine(a1, NextFloatLogicalBottomBelowForBlock, *v316);
        if (v317 == WebCore::RenderBlock::availableLogicalWidthForContent((uint64_t *)a1, NextFloatLogicalBottomBelowForBlock))break;
        if ((*(_DWORD *)(a1 + 20) & 0x1000) != 0)
          v318 = (int *)(a2 + 19);
        else
          v318 = (int *)a2 + 39;
        WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)a1, *v318);
        v319 = a2[20];
        v412 = *(_DWORD *)(a1 + 20);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 <= 3)
          v320 = HIDWORD(v319);
        else
          v320 = a2[20];
        v418 = v320;
        v416 = (*(uint64_t (**)(_QWORD *))(*a2 + 1096))(a2);
        v414 = (*(uint64_t (**)(_QWORD *))(*a2 + 1104))(a2);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
        {
          v321 = *((_DWORD *)a2 + 38);
          *((_DWORD *)a2 + 38) = NextFloatLogicalBottomBelowForBlock;
        }
        else
        {
          v321 = *((_DWORD *)a2 + 39);
          *((_DWORD *)a2 + 39) = NextFloatLogicalBottomBelowForBlock;
        }
        (*(void (**)(_QWORD *))(*a2 + 1304))(a2);
        if ((*(_DWORD *)(a1 + 20) & 0x1000) != 0)
          v322 = (int *)(a2 + 19);
        else
          v322 = (int *)a2 + 39;
        WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)a1, *v322);
        v323 = *((_DWORD *)a2 + 41);
        if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
          v323 = *((_DWORD *)a2 + 40);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
        {
          *((_DWORD *)a2 + 38) = v321;
          *((_DWORD *)a2 + 41) = v418;
        }
        else
        {
          *((_DWORD *)a2 + 39) = v321;
          *((_DWORD *)a2 + 40) = v418;
        }
        *((_DWORD *)a2 + 45) = v416;
        *((_DWORD *)a2 + 43) = v414;
        if (v317 >= v323)
        {
          if ((v412 & 0x1000) != 0)
            v363 = HIDWORD(v319);
          else
            v363 = v319;
          if (v363 != v323)
          {
            v364 = *((_DWORD *)a2 + 5);
            if ((v364 & 0x20) == 0)
              *((_DWORD *)a2 + 5) = v364 | 0x20;
          }
          break;
        }
        v324 = *(_QWORD **)(a1 + 216);
        if (v324)
          NextFloatLogicalBottomBelowForBlock = WebCore::FloatingObjects::findNextFloatLogicalBottomBelowForBlock(v324, NextFloatLogicalBottomBelowForBlock);
        v48 = 0;
        if ((int)NextFloatLogicalBottomBelowForBlock < v37)
          goto LABEL_56;
      }
      v48 = NextFloatLogicalBottomBelowForBlock - v37;
      if (__OFSUB__(NextFloatLogicalBottomBelowForBlock, v37))
        v48 = (NextFloatLogicalBottomBelowForBlock >> 31) + 0x7FFFFFFF;
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_56:
  v410 = v37 + v48;
  if (__OFADD__(v37, v48))
    v410 = (v37 >> 31) + 0x7FFFFFFF;
  v419 = v410;
  if ((*(_BYTE *)v46 & 2) != 0)
  {
    v281 = WebCore::RenderBlockFlow::applyBeforeBreak((_BYTE *)a1, (uint64_t)a2, v410);
    v419 = WebCore::RenderBlockFlow::adjustForUnsplittableChild((const WebCore::RenderBox *)a1, (uint64_t)a2, v281, 0, 0);
    if ((*((_BYTE *)a2 + 20) & 8) == 0 && (*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      v282 = WebCore::RenderBlock::paginationStrut((WebCore::RenderBlock *)a2);
      if (__OFADD__(v419, v282))
        v419 = (v419 >> 31) + 0x7FFFFFFF;
      else
        v419 += v282;
    }
  }
  v49 = *(_OWORD *)(a2 + 19);
  v417 = a2 + 19;
  v403 = v49;
  v409 = DWORD1(v49);
  v415 = a2[19];
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    v51 = v49 - v419;
    if (__OFSUB__((_DWORD)v49, v419))
      v51 = (v415 >> 31) + 0x7FFFFFFF;
    v52 = *(unsigned int *)(v50 + 508);
    if ((_DWORD)v52)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(v50 + 496) + 8 * v52 - 8);
      if (v53)
      {
        v54 = *(_DWORD *)(v53 + 64);
        v42 = __OFADD__(v54, v51);
        v55 = v54 + v51;
        v56 = (v54 >> 31) + 0x7FFFFFFF;
        if (v42)
          v55 = v56;
        *(_DWORD *)(v53 + 64) = v55;
      }
    }
    *v417 = v419;
    v57 = v415;
  }
  else
  {
    v306 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248)
         + 336;
    v307 = DWORD1(v49) - v419;
    if (__OFSUB__(DWORD1(v49), v419))
      v307 = (DWORD1(v49) >> 31) + 0x7FFFFFFF;
    LODWORD(v422) = 0;
    DWORD1(v422) = v307;
    WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v306, &v422);
    *((_DWORD *)a2 + 39) = v419;
    v57 = v409;
  }
  v58 = v57;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v370 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
    if (v370)
    {
      v372 = (WebCore::RenderFragmentedFlow *)v370;
      if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v370 + 248), v371) & 1) == 0&& ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0))
      {
        if (WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v372, (const WebCore::RenderBox *)a1))
        {
          if (WebCore::RenderBlock::childBoxIsUnsplittableForFragmentation((WebCore::RenderBlock *)a1, (const WebCore::RenderBox *)a2))
          {
            WebCore::RenderBlock::computeFragmentRangeForBoxChild((WebCore::RenderBlock *)a1, (const WebCore::RenderBox *)a2);
          }
          else
          {
            v390 = (unsigned int *)(a2 + 19);
            if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
              v390 = (unsigned int *)a2 + 39;
            (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t, _QWORD))(*a2 + 1312))(&v422, a2, 0x3FFFFFFFLL, *v390);
            v391 = (*(uint64_t (**)(_QWORD *))(*a2 + 1288))(a2);
            v392 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v372 + 2000))(v372, a1, v391, 1);
            if (__OFADD__(v391, (_DWORD)v422))
              v393 = (v391 >> 31) + 0x7FFFFFFF;
            else
              v393 = v391 + v422;
            v394 = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v372 + 2000))(v372, a1, v393, 1);
            (*(void (**)(WebCore::RenderFragmentedFlow *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v372
                                                                                                + 2016))(v372, a2, v392, v394);
          }
        }
      }
    }
  }
  v59 = *((_BYTE *)a2 + 52) & 7;
  if (v59 == 1)
    v60 = (WebCore::RenderBlockFlow *)a2;
  else
    v60 = 0;
  v411 = v60;
  if (v419 != v58
    && ((*(uint64_t (**)(_QWORD *))(*a2 + 1504))(a2) & 1) == 0
    && v59 == 1
    && ((*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v411 + 1672))(v411) & 1) != 0)
  {
    goto LABEL_479;
  }
  if ((v419 - 0x7FFFFFFF) < 2)
  {
    if (v59 == 1)
      goto LABEL_479;
LABEL_480:
    v413 = 1;
    goto LABEL_94;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*a2 + 1504))(a2))
    goto LABEL_79;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 45) & 1) != 0)
      goto LABEL_428;
    v61 = *(_QWORD *)(a2[3] + 8);
    if (!v61)
      goto LABEL_83;
    if ((_QWORD *)(*(_QWORD *)(v61 + 64) & 0xFFFFFFFFFFFFLL) != a2
      || (*(_WORD *)(v61 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v61 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      goto LABEL_428;
    }
  }
  if ((*(unsigned int (**)(_QWORD *))(*a2 + 1504))(a2)
    && (*((_BYTE *)a2 + 21) & 8) == 0
    && !*(_BYTE *)(*(_QWORD *)(a2[11] + 8) + 8))
  {
LABEL_79:
    v61 = *(_QWORD *)(a1 + 216);
    if (v61)
    {
      v257 = *(_QWORD **)(v61 + 8);
      if (v257)
      {
        LODWORD(v61) = 0;
        do
        {
          v258 = (_DWORD *)*v257;
          if ((*(_BYTE *)(*v257 + 36) & 0x10) != 0 && (*(_BYTE *)(*v257 + 36) & 3) != 0)
          {
            if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
            {
              v259 = v258[2];
              v260 = v258[4];
            }
            else
            {
              v259 = v258[3];
              v260 = v258[5];
            }
            v42 = __OFADD__(v259, v260);
            v261 = v259 + v260;
            v262 = (v259 >> 31) + 0x7FFFFFFF;
            if (v42)
              v261 = v262;
            if ((int)v61 <= v261)
              LODWORD(v61) = v261;
          }
          v257 = (_QWORD *)v257[2];
        }
        while (v257);
      }
      else
      {
        LODWORD(v61) = 0;
      }
    }
    if (*a4 > (int)v61)
      LODWORD(v61) = *a4;
    LODWORD(v61) = (int)v61 > v419;
  }
  else
  {
LABEL_428:
    LODWORD(v61) = 0;
  }
LABEL_83:
  if (v59 != 1)
    goto LABEL_480;
  if ((_DWORD)v61)
LABEL_479:
    WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v411, 0, 1);
  v62 = a2[4];
  if (v62 && (v63 = *(_QWORD *)(v62 + 8)) != 0 && ((*((_DWORD *)a2 + 31) ^ *(_DWORD *)(v63 + 124)) & 0xE000) == 0)
  {
    v64 = *((_QWORD *)v411 + 27);
    if (v64)
    {
      v263 = *(_QWORD **)(v64 + 8);
      if (v263)
      {
        LODWORD(v64) = 0;
        do
        {
          v264 = (_DWORD *)*v263;
          if ((*(_BYTE *)(*v263 + 36) & 0x10) != 0 && (*(_BYTE *)(*v263 + 36) & 3) != 0)
          {
            if ((*((_BYTE *)v411 + 21) & 0x10) != 0)
            {
              v265 = v264[2];
              v266 = v264[4];
            }
            else
            {
              v265 = v264[3];
              v266 = v264[5];
            }
            v42 = __OFADD__(v265, v266);
            v267 = v265 + v266;
            v268 = (v265 >> 31) + 0x7FFFFFFF;
            if (v42)
              v267 = v268;
            if ((int)v64 <= v267)
              LODWORD(v64) = v267;
          }
          v263 = (_QWORD *)v263[2];
        }
        while (v263);
      }
      else
      {
        LODWORD(v64) = 0;
      }
    }
    v42 = __OFADD__(v58, (_DWORD)v64);
    v65 = v58 + v64;
    if (v42)
      v65 = (v58 >> 31) + 0x7FFFFFFF;
    v413 = 0;
    if (*a4 > v65)
      v65 = *a4;
    *a4 = v65;
  }
  else
  {
    v413 = 0;
  }
LABEL_94:
  (*(void (**)(_QWORD *))(*a2 + 1512))(a2);
  v408 = *((_DWORD *)a2 + 5);
  if ((v408 & 0xF8) != 0)
    (*(void (**)(_QWORD *))(*a2 + 688))(a2);
  v66 = *((unsigned int *)a2 + 10);
  if (v66 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32))
    v67 = *(_QWORD *)((v66 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32)) + 8);
  else
    v67 = 0;
  v401 = *a3;
  v69 = (*(uint64_t (**)(_QWORD *))(*a2 + 1240))(a2);
  v70 = a2[4];
  if (v70
    && (v71 = *(_QWORD *)(v70 + 8)) != 0
    && (v73 = *(_DWORD *)(v71 + 124), v72 = *((_DWORD *)a2 + 31), LOWORD(v73) = v72 ^ v73, (v73 & 0xE000) == 0))
  {
    if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      v74 = (*(unsigned __int16 *)((char *)a2 + 69) >> 7) & 1;
    }
    else
    {
      v255 = ((unsigned __int16)v72 >> 13) - 1;
      if (v255 > 4)
        v256 = 0;
      else
        v256 = qword_1969FC6C8[v255];
      v74 = *(unsigned __int8 *)(*(_QWORD *)(a2[11] + 24) + 8 * v256 + 45) != 0;
    }
    v406 = v74;
  }
  else
  {
    v242 = *((_DWORD *)a2 + 5) & 0x1000;
    v243 = *(_DWORD *)(a1 + 20) & 0x1000;
    if ((v242 == 0) != (v243 == 0))
    {
      v406 = 0;
    }
    else
    {
      if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
      {
        v248 = HIBYTE(*(unsigned __int16 *)((char *)a2 + 69)) & 1;
      }
      else
      {
        v245 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
        if (v245 > 4)
          v246 = 2;
        else
          v246 = qword_1969FC6F0[v245];
        v248 = *(unsigned __int8 *)(*(_QWORD *)(a2[11] + 24) + 8 * v246 + 45) != 0;
      }
      v406 = v248;
    }
    if (!v70)
      goto LABEL_436;
    v397 = *(_QWORD *)(v70 + 8);
    if (!v397)
      goto LABEL_436;
    v72 = *((_DWORD *)a2 + 31);
    v73 = v72 ^ *(_DWORD *)(v397 + 124);
  }
  if ((v73 & 0xE000) != 0)
  {
    v242 = *((_DWORD *)a2 + 5) & 0x1000;
    v243 = *(_DWORD *)(a1 + 20) & 0x1000;
LABEL_436:
    if ((v242 == 0) != (v243 == 0))
    {
      v404 = 0;
      goto LABEL_108;
    }
    if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      v75 = (*(unsigned __int16 *)((char *)a2 + 69) >> 7) & 1;
      goto LABEL_107;
    }
    v250 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v250 > 4)
      v251 = 0;
    else
      v251 = qword_1969FC6C8[v250];
    v252 = *(_QWORD *)(a2[11] + 24) + 8 * v251;
LABEL_444:
    v75 = *(unsigned __int8 *)(v252 + 45) != 0;
    goto LABEL_107;
  }
  if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
  {
    v253 = ((unsigned __int16)v72 >> 13) - 1;
    if (v253 > 4)
      v254 = 2;
    else
      v254 = qword_1969FC6F0[v253];
    v252 = *(_QWORD *)(a2[11] + 24) + 8 * v254;
    goto LABEL_444;
  }
  v75 = HIBYTE(*(unsigned __int16 *)((char *)a2 + 69)) & 1;
LABEL_107:
  v404 = v75;
LABEL_108:
  v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                          + 528)
                              + 8)
                  + 288);
  v77 = *(_QWORD *)(*(_QWORD *)(v76 + 496) + 8 * *(unsigned int *)(v76 + 508) - 8);
  v78 = *(unsigned int *)(v77 + 20);
  if ((_DWORD)v78 && *(_BYTE *)(v78 + *(_QWORD *)(v77 + 8) - 1))
  {
    v95 = *((_BYTE *)a2 + 52) & 7;
    if (v95 == 1)
    {
      WebCore::RenderBlockFlow::setMaxMarginBeforeValues((uint64_t)a2, 0, 0);
      v96 = (uint64_t)a2;
    }
    else
    {
      v96 = 0;
    }
    v108 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
    if (v108 > 4)
      v109 = 0;
    else
      v109 = qword_1969FC6C8[v108];
    *((_DWORD *)v33 + v109) = 0;
    v110 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a2, v68);
    *((_BYTE *)v110 + 2) |= 1u;
    if ((v69 & 1) == 0)
    {
      v114 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)a2);
      v86 = v114;
      v82 = v115;
      v85 = HIDWORD(v114);
      v84 = 1;
      v83 = HIDWORD(v114);
      v80 = v114;
      goto LABEL_112;
    }
    if (v95 == 1)
      WebCore::RenderBlockFlow::setMaxMarginAfterValues(v96);
    v112 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
    if (v112 > 4)
      v113 = 2;
    else
      v113 = qword_1969FC6F0[v112];
    *((_DWORD *)v33 + v113) = 0;
    v117 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a2, v111);
    *((_BYTE *)v117 + 2) |= 2u;
    v118 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)a2);
    v82 = v119;
    v83 = HIDWORD(v118);
    v80 = v118;
  }
  else
  {
    v79 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)a2);
    v80 = v79;
    v82 = v81;
    v83 = HIDWORD(v79);
    if (!v69)
    {
      v84 = 1;
      v85 = HIDWORD(v79);
      v86 = v79;
      goto LABEL_112;
    }
  }
  v84 = 0;
  if (v80 <= (int)v82)
    v86 = v82;
  else
    v86 = v80;
  if ((int)v83 <= SHIDWORD(v82))
    LODWORD(v85) = HIDWORD(v82);
  else
    LODWORD(v85) = v83;
LABEL_112:
  v87 = *a3;
  if ((~v87 & 0x12) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) != 2
      || (v406 & (v87 >> 3) & 1) == 0)
    {
      v97 = *(int **)(a1 + 224);
      if (v97)
      {
        v102 = v97[1];
        if (v86 <= *v97)
          v100 = *v97;
        else
          v100 = v86;
      }
      else
      {
        v377 = 3;
        switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
        {
          case 1:
            v98 = a1 + 168;
            v396 = *(_DWORD *)(a1 + 176);
            if (v396 <= v86)
              v396 = v86;
            v100 = v396 & ~(v396 >> 31);
LABEL_817:
            v369 = 2;
            goto LABEL_134;
          case 2:
          case 4:
            goto LABEL_130;
          case 3:
          case 5:
            v377 = 1;
            goto LABEL_130;
          default:
            v377 = 0;
LABEL_130:
            v98 = a1 + 168;
            v99 = *(_DWORD *)(a1 + 168 + 4 * v377);
            if (v99 <= v86)
              v99 = v86;
            v100 = v99 & ~(v99 >> 31);
            v369 = 3;
            switch((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13)
            {
              case 1:
                goto LABEL_817;
              case 2:
              case 4:
                break;
              case 3:
              case 5:
                v369 = 1;
                break;
              default:
                v369 = 0;
                break;
            }
LABEL_134:
            v101 = *(_DWORD *)(v98 + 4 * v369);
            if (v101 == 0x80000000)
              v102 = 0x7FFFFFFF;
            else
              v102 = -v101 & ~(-v101 >> 31);
            break;
        }
      }
      if ((int)v85 <= v102)
        v103 = v102;
      else
        v103 = v85;
      WebCore::RenderBlockFlow::setMaxMarginBeforeValues(a1, v100, v103);
      v87 = *a3;
    }
    if (((v406 | ((unsigned __int16)(v87 & 0x100) >> 8)) & 1) == 0)
    {
      v104 = __OFSUB__(v86, (_DWORD)v85);
      if (v86 != (_DWORD)v85 || v104)
      {
        *(_WORD *)(a1 + 69) &= ~0x80u;
        v87 = *a3 | 0x100;
        *a3 |= 0x100u;
      }
    }
    v105 = v406;
    if ((v87 & 0x100) != 0)
      v105 = 0;
    if (v105 == 1)
    {
      v106 = ((unsigned __int16)*(_DWORD *)(a1 + 124) >> 13) - 1;
      v107 = v106 > 4 ? 0 : qword_1969FC6C8[v106];
      if (!*(_DWORD *)(a1 + 4 * v107 + 168))
      {
        *(_WORD *)(a1 + 69) |= 0x80u;
        v87 = *a3;
      }
    }
  }
  if ((~v87 & 0x18) == 0)
  {
    v240 = __OFSUB__(v86, (_DWORD)v85);
    if (v86 != (_DWORD)v85 || v240)
    {
      if (v406)
        v241 = 64;
      else
        v241 = 0;
      v87 = v87 & 0xFFFFFFBF | v241;
      *a3 = v87;
    }
  }
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v88 = (unsigned int *)(a1 + 160);
  else
    v88 = (unsigned int *)(a1 + 164);
  v89 = *v88;
  if ((~v87 & 0x12) != 0)
  {
    v90 = *((unsigned int *)a2 + 10);
    v91 = v90 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32)
        ? *(WebCore::RenderObject **)((v90 | ((unint64_t)*((unsigned __int8 *)a2 + 44) << 32)) + 8)
        : 0;
    v92 = WebCore::RenderBlockFlow::selfCollapsingMarginBeforeWithClear((WebCore::RenderBlockFlow *)a1, v91);
    if (HIDWORD(v92))
    {
      v273 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
      if (v273 < 4)
        v274 = (unsigned int *)(a1 + 160);
      else
        v274 = (unsigned int *)(a1 + 164);
      v275 = *v274;
      v276 = *v274 - v92;
      if (__OFSUB__(v275, (_DWORD)v92))
        v276 = (v275 >> 31) + 0x7FFFFFFF;
      if (v273 < 4)
        v277 = (int *)(a1 + 160);
      else
        v277 = (int *)(a1 + 164);
      *v277 = v276;
    }
  }
  if ((v84 & 1) != 0)
  {
    v93 = *a3;
    if ((*a3 & 0x10) != 0)
    {
      if ((v93 & 2) != 0)
      {
        v94 = v89;
LABEL_192:
        *(_QWORD *)(a3 + 2) = v82;
        v127 = __OFSUB__((_DWORD)v82, HIDWORD(v82));
        if ((_DWORD)v82 != HIDWORD(v82) || v127)
        {
          if (v404)
            v156 = 128;
          else
            v156 = 0;
          *a3 = *a3 & 0xFF7F | v156;
        }
        goto LABEL_197;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 3384) == 2
        && (v93 & 8) != 0)
      {
        v94 = v89;
        if ((v93 & 0x40) != 0)
          goto LABEL_192;
      }
    }
    v120 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
    if (v120 < 4)
      v121 = (unsigned int *)(a1 + 160);
    else
      v121 = (unsigned int *)(a1 + 164);
    v122 = *v121;
    v123 = *((_DWORD *)a3 + 1);
    if (v123 <= v86)
      v123 = v86;
    v42 = __OFADD__(v122, v123);
    v124 = v122 + v123;
    if (v42)
      v124 = (v122 >> 31) + 0x7FFFFFFF;
    v125 = *((_DWORD *)a3 + 2);
    if (v125 <= (int)v85)
      v125 = v85;
    v94 = v124 - v125;
    if (__OFSUB__(v124, v125))
      v94 = (v124 >> 31) + 0x7FFFFFFF;
    if (v120 < 4)
      v126 = (int *)(a1 + 160);
    else
      v126 = (int *)(a1 + 164);
    *v126 = v94;
    goto LABEL_192;
  }
  if (*((_DWORD *)a3 + 1) <= v80)
    v233 = v80;
  else
    v233 = *((_DWORD *)a3 + 1);
  if (*((_DWORD *)a3 + 2) <= (int)v83)
    v234 = v83;
  else
    v234 = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 1) = v233;
  *((_DWORD *)a3 + 2) = v234;
  if (v233 >= (int)v82 && v234 >= SHIDWORD(v82))
  {
    v94 = v89;
    if ((~*a3 & 0x12) == 0)
      goto LABEL_197;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      goto LABEL_379;
    goto LABEL_835;
  }
  if (v233 < (int)v82)
    *((_DWORD *)a3 + 1) = v82;
  if (v234 < SHIDWORD(v82))
    *((_DWORD *)a3 + 2) = HIDWORD(v82);
  v94 = v89;
  if ((~*a3 & 0x12) != 0)
  {
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 > 3)
    {
LABEL_379:
      v235 = (unsigned int *)(a1 + 164);
LABEL_380:
      v236 = *v235;
      v237 = *v235 + v233;
      if (__OFADD__(v236, v233))
        v237 = (v236 >> 31) + 0x7FFFFFFF;
      v94 = v237 - v234;
      if (__OFSUB__(v237, v234))
        v94 = (v237 >> 31) + 0x7FFFFFFF;
      goto LABEL_197;
    }
LABEL_835:
    v235 = (unsigned int *)(a1 + 160);
    goto LABEL_380;
  }
LABEL_197:
  v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v129 = *(_QWORD *)(*(_QWORD *)(v128 + 496) + 8 * *(unsigned int *)(v128 + 508) - 8);
  if ((*(_BYTE *)v129 & 2) != 0)
  {
    v283 = !*(_DWORD *)(v129 + 72) || v94 <= (int)v89;
    if (!v283 && WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)a1, v89, 0))
    {
      v284 = WebCore::RenderBlockFlow::nextPageLogicalTop((_BYTE *)a1, v89, 0);
      if (v284 >= v94)
        v285 = v94;
      else
        v285 = v284;
      v286 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
      if (v286 < 4)
        v287 = (unsigned int *)(a1 + 160);
      else
        v287 = (unsigned int *)(a1 + 164);
      v288 = *v287;
      v289 = v285 - v94;
      if (__OFSUB__(v285, v94))
        v289 = (v285 >> 31) + 0x7FFFFFFF;
      v42 = __OFADD__(v288, v289);
      v290 = v288 + v289;
      if (v42)
        v290 = (v288 >> 31) + 0x7FFFFFFF;
      if (v286 < 4)
        v291 = (int *)(a1 + 160);
      else
        v291 = (int *)(a1 + 164);
      *v291 = v290;
      v94 = v285;
    }
  }
  if (v67 && (*(_BYTE *)(v67 + 52) & 7) == 1)
  {
    v130 = *(_DWORD *)(v67 + 20);
    ++*(_DWORD *)(v67 + 16);
    if ((v130 & 0x800) == 0 && (v130 & 0x1800000) != 0x1000000)
    {
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v131 = (int *)(a1 + 160);
      else
        v131 = (int *)(a1 + 164);
      v132 = *v131;
      *v131 = v94;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 1672))(v67)
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 1504))(v67) & 1) == 0)
      {
        if (((*(_DWORD *)(v67 + 124) >> 13) & 6u) - 2 < 4)
          v269 = (unsigned int *)(v67 + 152);
        else
          v269 = (unsigned int *)(v67 + 156);
        v270 = *v269;
        v271 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom(v67, 3u);
        v272 = v270 + v271;
        if (__OFADD__(v270, v271))
          v272 = (v270 >> 31) + 0x7FFFFFFF;
        if (v272 > v94)
          WebCore::RenderBlockFlow::addOverhangingFloats((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBlockFlow *)v67, 0);
      }
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
        v133 = (int *)(a1 + 160);
      else
        v133 = (int *)(a1 + 164);
      *v133 = v132;
      if (v94 < (int)v89
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1)
        && ((*(uint64_t (**)(_QWORD *))(*a2 + 1504))(a2) & 1) == 0
        && (int)WebCore::RenderBlockFlow::lowestFloatLogicalBottom(a1, 3u) > v94)
      {
        WebCore::RenderObject::setNeedsLayout((WebCore::RenderObject *)a2, 1);
      }
    }
    v134 = *(_DWORD *)(v67 + 16);
    if (!v134)
    {
      __break(0xC471u);
      JUMPOUT(0x19637FF24);
    }
    *(_DWORD *)(v67 + 16) = v134 - 1;
  }
  v136 = v94;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1))
  {
    v309 = WebCore::RenderStyle::usedClear((WebCore::RenderStyle *)a2, v135);
    switch((int)v309)
    {
      case 0:
        goto LABEL_672;
      case 1:
        goto LABEL_644;
      case 2:
        LOBYTE(v309) = 2;
        goto LABEL_644;
      case 3:
        LOBYTE(v309) = 3;
LABEL_644:
        v325 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom(a1, v309);
        break;
      default:
        v325 = 0;
        break;
    }
    v326 = v325 - v94;
    if (__OFSUB__(v325, v94))
    {
      v326 = 0x7FFFFFFF;
    }
    else if (v326 <= 0)
    {
LABEL_672:
      v136 = v94;
      if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*a2 + 1504))(a2, v309))
        goto LABEL_211;
      v407 = v94;
      while (1)
      {
        v341 = (*(_DWORD *)(a1 + 20) & 0x1000) != 0 ? (unsigned int *)(a2 + 20) : (unsigned int *)((char *)a2 + 164);
        v342 = WebCore::RenderBlock::availableLogicalWidthForLine(a1, v407, *v341);
        if (v342 == WebCore::RenderBlock::availableLogicalWidthForContent((uint64_t *)a1, v407))
          break;
        if ((*(_DWORD *)(a1 + 20) & 0x1000) != 0)
          v343 = (int *)(a2 + 19);
        else
          v343 = (int *)a2 + 39;
        WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)a1, *v343);
        v344 = a2[20];
        v405 = *(_DWORD *)(a1 + 20);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 <= 3)
          v345 = HIDWORD(v344);
        else
          LODWORD(v345) = a2[20];
        v346 = (*(uint64_t (**)(_QWORD *))(*a2 + 1096))(a2);
        v347 = (*(uint64_t (**)(_QWORD *))(*a2 + 1104))(a2);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
        {
          v348 = *v417;
          *v417 = v407;
        }
        else
        {
          v348 = *((_DWORD *)a2 + 39);
          *((_DWORD *)a2 + 39) = v407;
        }
        (*(void (**)(_QWORD *))(*a2 + 1304))(a2);
        if ((*(_DWORD *)(a1 + 20) & 0x1000) != 0)
          v349 = (int *)(a2 + 19);
        else
          v349 = (int *)a2 + 39;
        WebCore::RenderBlock::fragmentAtBlockOffset((_BYTE *)a1, *v349);
        v350 = *((_DWORD *)a2 + 41);
        if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
          v350 = *((_DWORD *)a2 + 40);
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
        {
          *((_DWORD *)a2 + 38) = v348;
          *((_DWORD *)a2 + 41) = v345;
        }
        else
        {
          *((_DWORD *)a2 + 39) = v348;
          *((_DWORD *)a2 + 40) = v345;
        }
        *((_DWORD *)a2 + 45) = v346;
        *((_DWORD *)a2 + 43) = v347;
        if (v342 >= v350)
        {
          if ((v405 & 0x1000) != 0)
            v365 = HIDWORD(v344);
          else
            v365 = v344;
          if (v365 != v350)
          {
            v366 = *((_DWORD *)a2 + 5);
            if ((v366 & 0x20) == 0)
              *((_DWORD *)a2 + 5) = v366 | 0x20;
          }
          break;
        }
        v351 = *(_QWORD **)(a1 + 216);
        if (v351)
          v407 = WebCore::FloatingObjects::findNextFloatLogicalBottomBelowForBlock(v351, v407);
        if ((int)v407 < v94)
        {
          v136 = v94;
          goto LABEL_211;
        }
      }
      v326 = v407 - v94;
      if (__OFSUB__(v407, v94))
      {
        v326 = (v407 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v136 = v94;
        if (!v326)
          goto LABEL_211;
      }
    }
    if (!(*(unsigned int (**)(_QWORD *))(*a2 + 1240))(a2))
    {
      v352 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
      if (v352 < 4)
        v353 = (unsigned int *)(a1 + 160);
      else
        v353 = (unsigned int *)(a1 + 164);
      v354 = *v353;
      v355 = *v353 + v326;
      if (__OFADD__(v354, v326))
        v355 = (v354 >> 31) + 0x7FFFFFFF;
      if (v352 < 4)
        *(_DWORD *)(a1 + 160) = v355;
      else
        *(_DWORD *)(a1 + 164) = v355;
      goto LABEL_704;
    }
    v327 = WebCore::RenderBlockFlow::marginValuesForChild((WebCore::RenderBlockFlow *)a1, (WebCore::RenderBox *)a2);
    if ((int)v327 <= (int)v328)
      v329 = v328;
    else
      v329 = v327;
    v330 = HIDWORD(v327);
    v331 = HIDWORD(v328);
    if (SHIDWORD(v327) > SHIDWORD(v328))
      LODWORD(v331) = HIDWORD(v327);
    *((_DWORD *)a3 + 1) = v329;
    *((_DWORD *)a3 + 2) = v331;
    v332 = *a3;
    v333 = *(unsigned int *)((char *)a2 + 47);
    if (v333 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32)
      && (v334 = *(_QWORD *)((v333 | ((unint64_t)*((unsigned __int8 *)a2 + 51) << 32)) + 8)) != 0)
    {
      v335 = (v332 >> 2) & 1;
      if ((*(_BYTE *)(v334 + 45) & 4) != 0 && (v332 & 4) != 0)
      {
        do
        {
          v336 = *(_DWORD *)(v334 + 20);
          LOBYTE(v335) = 1;
          if ((v336 & 0x800) == 0 && (v336 & 0x1800000) != 0x1000000)
            LOBYTE(v335) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v334 + 1240))(v334);
          v337 = *(unsigned int *)(v334 + 47);
          if (!(v337 | ((unint64_t)*(unsigned __int8 *)(v334 + 51) << 32)))
            break;
          v334 = *(_QWORD *)((v337 | ((unint64_t)*(unsigned __int8 *)(v334 + 51) << 32)) + 8);
          if (!v334)
            break;
        }
        while ((v335 & (*(unsigned __int8 *)(v334 + 45) >> 2) & 1) != 0);
      }
      if ((v335 & 1) == 0)
        goto LABEL_665;
    }
    else if ((v332 & 4) == 0)
    {
      goto LABEL_665;
    }
    *a3 &= ~4u;
LABEL_665:
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
      v338 = (unsigned int *)a2 + 39;
    else
      v338 = (unsigned int *)(a2 + 19);
    v339 = *v338;
    v340 = *v338 + v330;
    if (__OFADD__(v339, (_DWORD)v330))
      v340 = (v339 >> 31) + 0x7FFFFFFF;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      *(_DWORD *)(a1 + 160) = v340;
    else
      *(_DWORD *)(a1 + 164) = v340;
LABEL_704:
    if ((~*a3 & 0x12) == 0)
    {
      WebCore::RenderBlockFlow::setMaxMarginBeforeValues(a1, v400, v399);
      *a3 &= ~0x10u;
    }
    v136 = v94 + v326;
    if (__OFADD__(v94, v326))
      v136 = (v94 >> 31) + 0x7FFFFFFF;
  }
LABEL_211:
  v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v138 = **(_BYTE **)(*(_QWORD *)(v137 + 496) + 8 * *(unsigned int *)(v137 + 508) - 8);
  if ((v138 & 2) != 0)
  {
    v136 = WebCore::RenderBlockFlow::adjustBlockChildForPagination(a1, v136, v410, (uint64_t)a2, (v94 == v136) & (v401 >> 4));
    v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
  }
  if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v310 = v137 + 336;
    v311 = *v417 - v136;
    if (__OFSUB__(*v417, v136))
      v311 = (*v417 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v422 = v311;
    WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v310, &v422);
    *v417 = v136;
  }
  else
  {
    v139 = *((_DWORD *)a2 + 39);
    v140 = v139 - v136;
    if (__OFSUB__(v139, v136))
      v140 = (v139 >> 31) + 0x7FFFFFFF;
    v141 = *(unsigned int *)(v137 + 508);
    if ((_DWORD)v141)
    {
      v142 = *(_QWORD *)(*(_QWORD *)(v137 + 496) + 8 * v141 - 8);
      if (v142)
      {
        v143 = *(_DWORD *)(v142 + 68);
        v42 = __OFADD__(v143, v140);
        v144 = v143 + v140;
        if (v42)
          v144 = (v143 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)(v142 + 68) = v144;
      }
    }
    *((_DWORD *)a2 + 39) = v136;
  }
  v145 = *((_DWORD *)a2 + 5);
  if (v136 != v419 || (v145 & 0xF8) != 0)
    goto LABEL_604;
  v146 = v413;
  if ((v138 & 2) == 0)
    v146 = 1;
  if ((v146 & 1) == 0)
  {
    v312 = *((_QWORD *)v411 + 28);
    if (v312)
    {
      if ((*(_DWORD *)(v312 + 16) & 0x80000000) == 0)
      {
LABEL_604:
        if ((v145 & 1) != 0 || WebCore::RenderObject::isHTMLMarquee((WebCore::RenderObject *)a2))
        {
          if ((*(unsigned int (**)(_QWORD *))(*a2 + 1504))(a2))
          {
            v313 = *((_DWORD *)a2 + 5);
            if ((v313 & 0x800) == 0 && !*(_BYTE *)(*(_QWORD *)(a2[11] + 8) + 8) && (v313 & 0x20) == 0)
              *((_DWORD *)a2 + 5) = v313 | 0x20;
          }
        }
        if ((v413 & 1) == 0)
        {
          if (((*(uint64_t (**)(_QWORD *))(*a2 + 1504))(a2) & 1) == 0
            && (*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v411 + 1672))(v411))
          {
            WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v411, 0, 1);
          }
          (*(void (**)(_QWORD *))(*a2 + 1512))(a2);
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v373 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
    if (v373)
    {
      v375 = (WebCore::RenderFragmentedFlow *)v373;
      if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v373 + 248), v374) & 1) == 0&& ((*((_BYTE *)a2 + 52) & 7) != 1 || (*((_BYTE *)a2 + 53) & 2) == 0))
      {
        if (WebCore::RenderFragmentedFlow::hasCachedFragmentRangeForBox(v375, (const WebCore::RenderBox *)a1))
        {
          *(_QWORD *)&v422 = 0;
          v426[0] = 0;
          WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v375, (const WebCore::RenderBox *)a2, (WebCore::RenderFragmentContainer **)&v422, v426);
          WebCore::RenderBlock::computeFragmentRangeForBoxChild((WebCore::RenderBlock *)a1, (const WebCore::RenderBox *)a2);
          v424 = 0;
          v425[0] = 0;
          WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v375, (const WebCore::RenderBox *)a2, v425, &v424);
          if (v425[0] != (WebCore::RenderFragmentContainer *)v422
            || (*(unsigned int (**)(_QWORD *))(*a2 + 1568))(a2) && v424 != v426[0])
          {
            v376 = *((_DWORD *)a2 + 5);
            if ((v376 & 8) == 0)
            {
              *((_DWORD *)a2 + 5) = v376 | 8;
              if ((v376 & 0x8000) != 0)
                WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)a2);
            }
          }
        }
      }
    }
  }
  if ((*((_BYTE *)a2 + 20) & 0xF8) != 0)
  {
    v147 = a2[4];
    if (v147
      && (v148 = *(_QWORD *)(v147 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v148 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[3] + 8) + 40) + 8) + 1944)
                               + 248)
                   + 479))
    {
      WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)a2);
    }
    else
    {
      (*(void (**)(_QWORD *))(*a2 + 688))(a2);
    }
  }
  if ((*a3 & 0x10) != 0 && ((*(uint64_t (**)(_QWORD *))(*a2 + 1240))(a2) & 1) == 0)
  {
    *a3 &= ~0x10u;
    v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                         + 8)
                                             + 528)
                                 + 8)
                     + 288);
    v150 = *(unsigned int *)(v149 + 508);
    if ((_DWORD)v150)
    {
      v151 = *(_QWORD *)(*(_QWORD *)(v149 + 496) + 8 * v150 - 8);
      if (v151)
      {
        v152 = (WTF *)*(unsigned int *)(v151 + 20);
        if ((_DWORD)v152)
        {
          LODWORD(v153) = (_DWORD)v152 - 1;
          *(_DWORD *)(v151 + 20) = (_DWORD)v152 - 1;
          LOBYTE(v422) = 0;
          v154 = (char **)(v151 + 8);
          if ((_DWORD)v152 - 1 == *(_DWORD *)(v151 + 16))
          {
            v155 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v154, v152, (unint64_t)&v422);
            v153 = *(unsigned int *)(v151 + 20);
            *(_BYTE *)(*(_QWORD *)(v151 + 8) + v153) = *v155;
          }
          else
          {
            (*v154)[v153] = 0;
          }
          *(_DWORD *)(v151 + 20) = v153 + 1;
        }
      }
    }
  }
  v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v159 = v157 + v158;
  if (__OFADD__(v157, v158))
    v159 = (v157 >> 31) + 0x7FFFFFFF;
  v160 = v159;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
  {
    v160 = v159;
    if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    {
      v292 = *(_DWORD *)(a1 + 120);
      v293 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
      if ((v292 & 0x4000000) != 0)
        v294 = -v293;
      else
        v294 = v293;
      v295 = v294 << 6;
      if (v294 < -33554432)
        v295 = 0x80000000;
      if (v294 > 0x1FFFFFF)
        v295 = 0x7FFFFFFF;
      v160 = v159 + v295;
      if (__OFADD__(v159, v295))
        v160 = (v159 >> 31) + 0x7FFFFFFF;
    }
  }
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0 && (*(_BYTE *)(a1 + 21) & 0x10) != 0)
  {
    v296 = *(_DWORD *)(a1 + 120);
    v297 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    if ((v296 & 0x4000000) != 0)
      v298 = -v297;
    else
      v298 = v297;
    v299 = v298 << 6;
    if (v298 < -33554432)
      v299 = 0x80000000;
    if (v298 > 0x1FFFFFF)
      v299 = 0x7FFFFFFF;
    v42 = __OFADD__(v160, v299);
    v300 = v160 + v299;
    if (v42)
      v160 = (v160 >> 31) + 0x7FFFFFFF;
    else
      v160 = v300;
  }
  v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
  v162 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
  v163 = v161 + v162;
  if (__OFADD__(v161, v162))
    v163 = (v161 >> 31) + 0x7FFFFFFF;
  v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  v165 = v163 + v164;
  if (__OFADD__(v163, v164))
    v165 = (v163 >> 31) + 0x7FFFFFFF;
  v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
  v167 = v165 + v166;
  if (__OFADD__(v165, v166))
    v167 = (v165 >> 31) + 0x7FFFFFFF;
  v168 = *(_QWORD *)a1;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v378 = *(_DWORD *)(a1 + 164);
    v379 = (*(uint64_t (**)(uint64_t))(v168 + 1000))(a1);
    v380 = v378 - v379;
    if (__OFSUB__(v378, v379))
      v380 = (v378 >> 31) + 0x7FFFFFFF;
    v381 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
    v382 = v380 - v381;
    if (__OFSUB__(v380, v381))
      v382 = (v380 >> 31) + 0x7FFFFFFF;
    v383 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
    v384 = v383 << 6;
    if (v383 < -33554432)
      v384 = 0x80000000;
    if (v383 > 0x1FFFFFF)
      v384 = 0x7FFFFFFF;
    v42 = __OFSUB__(v382, v384);
    v385 = v382 - v384;
    if (v42)
      v385 = (v382 >> 31) + 0x7FFFFFFF;
    v386 = v385 & ~(v385 >> 31);
    v387 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
    v388 = v386 - v387;
    if (__OFSUB__(v386, v387))
      v388 = 0x7FFFFFFF;
    v389 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
    v181 = v388 - v389;
    if (__OFSUB__(v388, v389))
      v181 = (v388 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) == 0)
      goto LABEL_272;
    v362 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
  }
  else
  {
    v169 = *(_DWORD *)(a1 + 160);
    v170 = (*(uint64_t (**)(uint64_t))(v168 + 1016))(a1);
    v171 = v169 - v170;
    if (__OFSUB__(v169, v170))
      v171 = (v169 >> 31) + 0x7FFFFFFF;
    v172 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
    v173 = v171 - v172;
    if (__OFSUB__(v171, v172))
      v173 = (v171 >> 31) + 0x7FFFFFFF;
    v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
    v175 = v174 << 6;
    if (v174 < -33554432)
      v175 = 0x80000000;
    if (v174 > 0x1FFFFFF)
      v175 = 0x7FFFFFFF;
    v42 = __OFSUB__(v173, v175);
    v176 = v173 - v175;
    if (v42)
      v176 = (v173 >> 31) + 0x7FFFFFFF;
    v177 = v176 & ~(v176 >> 31);
    v178 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
    v179 = v177 - v178;
    if (__OFSUB__(v177, v178))
      v179 = 0x7FFFFFFF;
    v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
    v181 = v179 - v180;
    if (__OFSUB__(v179, v180))
      v181 = (v179 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) == 0)
    {
LABEL_272:
      v182 = 0;
      goto LABEL_273;
    }
    v362 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
  }
  if (v362 >= -33554432)
  {
    v182 = v362 << 6;
    if (v362 > 0x1FFFFFF)
      v182 = 0x7FFFFFFF;
  }
  else
  {
    v182 = 0x80000000;
  }
LABEL_273:
  v42 = __OFSUB__(v181, v182);
  v183 = v181 - v182;
  if (v42)
    v183 = (v181 >> 31) + 0x7FFFFFFF;
  v184 = v183 & ~(v183 >> 31);
  v185 = v167 + v184;
  if (__OFADD__(v167, v184))
    v185 = (v167 >> 31) + 0x7FFFFFFF;
  v186 = a2 + 20;
  v187 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 1128))(a2, a1 + 80);
  v188 = v160 + v187;
  if (__OFADD__(v160, v187))
    v188 = (v160 >> 31) + 0x7FFFFFFF;
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 1504))(a2);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1);
    if ((_DWORD)result)
    {
      v224 = (unsigned int *)(a2 + 19);
      v225 = (unsigned int *)(a2 + 20);
      if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
      {
        v224 = (unsigned int *)a2 + 39;
        v225 = (unsigned int *)a2 + 41;
      }
      result = WebCore::RenderBlock::startOffsetForLine(a1, *v224, *v225);
    }
  }
  v190 = *(_DWORD *)(a1 + 120);
  if ((v190 & 0x3C0) == 0x180)
    goto LABEL_406;
  v191 = v190 & 0x4000000;
  v192 = (v190 >> 26) & 1;
  v193 = (unsigned __int16)*(_DWORD *)(a1 + 124) >> 13;
  if ((v193 - 2) >= 2)
  {
    if (v193 == 4)
    {
      v192 = v191 == 0;
    }
    else if (v193 != 5)
    {
      v194 = 3;
      if (v191)
        v194 = 1;
      goto LABEL_286;
    }
  }
  v395 = v192 == 0;
  v194 = 2;
  if (v395)
    v194 = 0;
LABEL_286:
  if (*(_BYTE *)(*(_QWORD *)(a2[11] + 24) + 8 * v194 + 44))
  {
    if ((int)result > v159 && v188 <= (int)result)
      v188 = result;
    goto LABEL_288;
  }
LABEL_406:
  v244 = result + v187;
  if (__OFADD__((_DWORD)result, v187))
    v244 = (result >> 31) + 0x7FFFFFFF;
  if (v188 <= v244)
    v188 = v244;
  v191 = v190 & 0x4000000;
LABEL_288:
  if (v191)
  {
    v195 = v185 - v188;
    if (__OFSUB__(v185, v188))
      v195 = (v185 >> 31) + 0x7FFFFFFF;
    v196 = *(_DWORD *)(a1 + 20);
    v197 = (int *)(a2 + 20);
    if ((v196 & 0x1000) != 0)
      v197 = (int *)a2 + 41;
    v198 = *v197;
    v188 = v195 - v198;
    if (__OFSUB__(v195, v198))
      v188 = (v195 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v196 = *(_DWORD *)(a1 + 20);
  }
  v199 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  if ((v196 & 0x1000) != 0)
  {
    v301 = v199 + 336;
    v302 = *((_DWORD *)a2 + 39);
    v303 = v302 - v188;
    if (__OFSUB__(v302, v188))
      v303 = (v302 >> 31) + 0x7FFFFFFF;
    LODWORD(v422) = 0;
    DWORD1(v422) = v303;
    result = WebCore::LocalFrameViewLayoutContext::addLayoutDelta(v301, &v422);
    *((_DWORD *)a2 + 39) = v188;
  }
  else
  {
    v200 = *v417 - v188;
    if (__OFSUB__(*v417, v188))
      v200 = (*v417 >> 31) + 0x7FFFFFFF;
    v201 = *(unsigned int *)(v199 + 508);
    if ((_DWORD)v201)
    {
      v202 = *(_QWORD *)(*(_QWORD *)(v199 + 496) + 8 * v201 - 8);
      if (v202)
      {
        v203 = *(_DWORD *)(v202 + 64);
        v42 = __OFADD__(v203, v200);
        v204 = v203 + v200;
        if (v42)
          v204 = (v203 >> 31) + 0x7FFFFFFF;
        *(_DWORD *)(v202 + 64) = v204;
      }
    }
    *v417 = v188;
  }
  v205 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v205 < 4)
    v206 = (unsigned int *)(a1 + 160);
  else
    v206 = (unsigned int *)(a1 + 164);
  v207 = *v206;
  if ((*(_BYTE *)(a1 + 21) & 0x10) == 0)
    v186 = (_DWORD *)a2 + 41;
  v208 = v207 + *v186;
  if (__OFADD__(v207, *v186))
    v208 = (v207 >> 31) + 0x7FFFFFFF;
  if (v205 < 4)
    v209 = (int *)(a1 + 160);
  else
    v209 = (int *)(a1 + 164);
  *v209 = v208;
  if ((v413 & 1) == 0)
  {
    result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)v411 + 1672))(v411);
    if ((_DWORD)result)
    {
      result = WebCore::RenderBlockFlow::addOverhangingFloats((WebCore::RenderBlockFlow *)a1, v411, (v408 & 0xF8) == 0);
      v249 = *a5;
      if (*a5 <= (int)result)
        v249 = result;
      *a5 = v249;
    }
  }
  v210 = *((_DWORD *)a2 + 39);
  v211 = *v417 - v415;
  if (__OFSUB__(*v417, (_DWORD)v415))
    v211 = (*v417 >> 31) + 0x7FFFFFFF;
  v212 = v210 - v409;
  if (__OFSUB__(v210, (_DWORD)v409))
  {
    v213 = v211 | ((unint64_t)((v210 >> 31) + 0x7FFFFFFF) << 32);
  }
  else
  {
    if (!(v211 | v212))
    {
      if ((v408 & 0x200) != 0)
        goto LABEL_333;
LABEL_327:
      v222 = *((_DWORD *)a2 + 5);
      if ((v222 & 0x200) != 0)
      {
        if ((v222 & 0x8000) == 0)
          goto LABEL_329;
        if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19637FF54);
        }
        v226 = a2[18];
        if (!v226 || (*(_BYTE *)(v226 + 25) & 8) == 0)
        {
LABEL_329:
          v223 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[3] + 8) + 40) + 8);
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v223 + 528) + 8) + 288) + 476))
          {
LABEL_330:
            if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v223 + 1944) + 24) + 8)
                                                   + 40)
                                       + 8)
                           + 3382))
            {
              LOBYTE(v422) = 0;
              v423 = 0;
              LOBYTE(v426[0]) = 0;
              v427 = 0;
              WebCore::RenderObject::issueRepaint((uint64_t)a2, &v422, 0, 0, (uint64_t)v426);
            }
            result = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 1296))(a2, 1);
            goto LABEL_333;
          }
        }
      }
      goto LABEL_333;
    }
    v213 = v211 | (unint64_t)(v212 << 32);
  }
  v214 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                   + 248);
  v215 = *(unsigned int *)(v214 + 508);
  if ((_DWORD)v215)
  {
    v216 = *(_QWORD *)(*(_QWORD *)(v214 + 496) + 8 * v215 - 8);
    if (v216)
    {
      v217 = HIDWORD(v213);
      v218 = *(_DWORD *)(v216 + 64);
      v42 = __OFADD__(v218, (_DWORD)v213);
      v219 = v218 + v213;
      if (v42)
        v219 = (v218 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v216 + 64) = v219;
      v220 = *(_DWORD *)(v216 + 68);
      v221 = v220 + v217;
      if (__OFADD__(v220, (_DWORD)v217))
        v221 = (v220 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(v216 + 68) = v221;
    }
  }
  if ((v408 & 0x200) == 0)
    goto LABEL_327;
  if ((*(_BYTE *)(a1 + 20) & 8) == 0)
  {
    v238 = *((_DWORD *)a2 + 5);
    if ((v238 & 0x200) != 0)
    {
      if ((v238 & 0x8000) == 0)
        goto LABEL_865;
      if ((*((_BYTE *)a2 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19638041CLL);
      }
      v247 = a2[18];
      if (!v247 || (*(_BYTE *)(v247 + 25) & 8) == 0)
      {
LABEL_865:
        v239 = a2[3];
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 + 8) + 40) + 8)
                                                           + 528)
                                               + 8)
                                   + 288)
                       + 476)
          && v415 != a2[19])
        {
          *(_OWORD *)v425 = *(_OWORD *)v417;
          *(_OWORD *)v417 = v403;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 + 8) + 40)
                                                                                                 + 8)
                                                                                     + 1944)
                                                                         + 24)
                                                             + 8)
                                                 + 40)
                                     + 8)
                         + 3382))
          {
            LOBYTE(v422) = 0;
            v423 = 0;
            LOBYTE(v426[0]) = 0;
            v427 = 0;
            WebCore::RenderObject::issueRepaint((uint64_t)a2, &v422, 0, 0, (uint64_t)v426);
          }
          (*(void (**)(_QWORD *, uint64_t))(*a2 + 1296))(a2, 1);
          *(_OWORD *)v417 = *(_OWORD *)v425;
          v223 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[3] + 8) + 40) + 8);
          goto LABEL_330;
        }
      }
    }
  }
LABEL_333:
  if ((v138 & 2) != 0)
  {
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v398 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
      if (v398)
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v398 + 1968))(v398, a2);
    }
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v304 = (unsigned int *)(a1 + 160);
    else
      v304 = (unsigned int *)(a1 + 164);
    result = WebCore::RenderBlockFlow::applyAfterBreak((_BYTE *)a1, (WebCore::RenderObject *)a2, *v304, (uint64_t)a3);
    v305 = (_DWORD *)(a1 + 164);
    if ((_DWORD)result != *(_DWORD *)(a1 + 164))
    {
      if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
        v305 = (_DWORD *)(a1 + 160);
      *v305 = result;
    }
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::trimBlockEndChildrenMargins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  WebCore::RenderObject *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const WebCore::RenderObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _WORD v43[6];

  if (*(unsigned int *)(this + 71) | ((unint64_t)*(unsigned __int8 *)(this + 75) << 32))
  {
    v1 = *(_QWORD *)((*(unsigned int *)(this + 71) | ((unint64_t)*(unsigned __int8 *)(this + 75) << 32)) + 8);
    if (v1)
    {
      if ((*(_BYTE *)(v1 + 45) & 4) != 0)
      {
        v2 = this;
        while (1)
        {
          while (1)
          {
            v3 = *(_DWORD *)(v1 + 20);
            if ((v3 & 0x400) == 0 && (v3 & 0x800) == 0 && (v3 & 0x1800000) != 0x1000000)
              break;
LABEL_75:
            v42 = *(unsigned int *)(v1 + 40);
            if (v42 | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32))
            {
              v1 = *(_QWORD *)((v42 | ((unint64_t)*(unsigned __int8 *)(v1 + 44) << 32)) + 8);
              if (v1)
              {
                if ((*(_BYTE *)(v1 + 45) & 4) != 0)
                  continue;
              }
            }
            return this;
          }
          v5 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v1);
          v6 = ((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13) - 1;
          if (v6 > 4)
            v7 = 2;
          else
            v7 = qword_1969FC6F0[v6];
          *(_DWORD *)(v1 + 168 + 4 * v7) = 0;
          v8 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v1, v4);
          *((_BYTE *)v8 + 2) |= 2u;
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1240))(v1);
          if ((_DWORD)this)
          {
            v10 = ((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13) - 1;
            if (v10 > 4)
              v11 = 0;
            else
              v11 = qword_1969FC6C8[v10];
            *(_DWORD *)(v1 + 168 + 4 * v11) = 0;
            this = (uint64_t)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v1, v9);
            *(_BYTE *)(this + 2) |= 1u;
            if (((*((_DWORD *)v5 + 31) >> 13) & 6u) - 2 < 4)
              v23 = (int *)((char *)v5 + 160);
            else
              v23 = (int *)((char *)v5 + 164);
            v24 = *v23;
            if ((*((_BYTE *)v5 + 21) & 0x10) != 0)
              *(_DWORD *)(v1 + 152) = v24;
            else
              *(_DWORD *)(v1 + 156) = v24;
            v25 = *(unsigned int *)(v1 + 64);
            if (v25 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32))
            {
              v26 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v1 + 68) << 32)) + 8);
              if (v26)
              {
                if ((*(_BYTE *)(v26 + 45) & 4) != 0 && (*(_BYTE *)(v1 + 22) & 4) == 0)
                {
LABEL_45:
                  while (1)
                  {
                    v27 = ((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13) - 1;
                    v28 = v27 > 4 ? 0 : qword_1969FC6C8[v27];
                    *(_DWORD *)(v26 + 168 + 4 * v28) = 0;
                    v29 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v26, v22);
                    *((_BYTE *)v29 + 2) |= 1u;
                    v31 = ((unsigned __int16)*(_DWORD *)(v2 + 124) >> 13) - 1;
                    v32 = v31 > 4 ? 2 : qword_1969FC6F0[v31];
                    *(_DWORD *)(v26 + 168 + 4 * v32) = 0;
                    this = (uint64_t)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v26, v30);
                    *(_BYTE *)(this + 2) |= 2u;
                    v34 = *(unsigned int *)(v26 + 64);
                    if (!(v34 | ((unint64_t)*(unsigned __int8 *)(v26 + 68) << 32))
                      || (this = *(_QWORD *)((v34 | ((unint64_t)*(unsigned __int8 *)(v26 + 68) << 32)) + 8)) == 0)
                    {
                      if (v26 == v1)
                        break;
                      v35 = *(unsigned int *)(v26 + 47);
                      if (!(v35 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32))
                        || (this = *(_QWORD *)((v35 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)) + 8)) == 0)
                      {
                        this = WebCore::RenderObjectTraversal::nextAncestorSibling((WebCore::RenderObjectTraversal *)v26, (WebCore::RenderObject *)v1, v33);
                        if (!this)
                          break;
                      }
                    }
                    v26 = this;
                    if ((*(_BYTE *)(this + 45) & 4) == 0)
                    {
                      while (1)
                      {
                        v41 = this;
                        this = (*(uint64_t (**)(void))(*(_QWORD *)this + 112))();
                        v26 = this;
                        if (!this)
                        {
                          if (v41 == v1)
                            goto LABEL_75;
                          v36 = *(unsigned __int8 *)(v41 + 51);
                          if (!(*(unsigned int *)(v41 + 47) | (unint64_t)(v36 << 32)))
                            break;
                          v26 = *(_QWORD *)((*(unsigned int *)(v41 + 47) | (unint64_t)(v36 << 32)) + 8);
                          if (!v26)
                            break;
                        }
LABEL_73:
                        this = v26;
                        if ((*(_BYTE *)(v26 + 45) & 4) != 0)
                          goto LABEL_45;
                      }
                      v37 = *(_QWORD *)(v41 + 32);
                      if (v37)
                      {
                        while (1)
                        {
                          v38 = *(_QWORD *)(v37 + 8);
                          if (!v38 || v38 == v1)
                            break;
                          v40 = *(unsigned int *)(v38 + 47);
                          if (v40 | ((unint64_t)*(unsigned __int8 *)(v38 + 51) << 32))
                          {
                            v26 = *(_QWORD *)((v40 | ((unint64_t)*(unsigned __int8 *)(v38 + 51) << 32)) + 8);
                            if (v26)
                              goto LABEL_73;
                          }
                          v37 = *(_QWORD *)(v38 + 32);
                          if (!v37)
                            goto LABEL_75;
                        }
                      }
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
            goto LABEL_75;
          }
          if ((*(_BYTE *)(v1 + 52) & 7) == 1)
          {
            v12 = v1;
            if ((*(_BYTE *)(v1 + 45) & 2) != 0)
              v12 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
            v13 = *(_DWORD *)(v12 + 96) & 0x1F;
            if (v13 <= 0x15
              && ((1 << v13) & 0x20300E) != 0
              && (*(_BYTE *)(v1 + 22) & 4) == 0
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 40) + 461) & 2) == 0)
            {
              v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1048))(v1);
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 960))(v1);
              v16 = __OFADD__(v14, v15) ? (v14 >> 31) + 0x7FFFFFFF : v14 + v15;
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1056))(v1);
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 968))(v1);
              v19 = __OFADD__(v17, v18) ? (v17 >> 31) + 0x7FFFFFFF : v17 + v18;
              this = WebCore::RenderBlockFlow::MarginInfo::MarginInfo((uint64_t)v43, v1, v16, v19);
              if ((v43[0] & 4) != 0)
              {
                v20 = *(unsigned int *)(v1 + 71);
                if (v20 | ((unint64_t)*(unsigned __int8 *)(v1 + 75) << 32))
                {
                  v21 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v1 + 75) << 32)) + 8);
                  if (v21)
                  {
                    v1 = (*(_BYTE *)(v21 + 45) & 4) != 0
                       ? *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v1 + 75) << 32)) + 8)
                       : 0;
                    if (v1)
                      continue;
                  }
                }
              }
            }
          }
          return this;
        }
      }
    }
  }
  return this;
}

WTF *WebCore::RenderBox::computeAndSetBlockDirectionMargins(WebCore::RenderBox *this, const WebCore::RenderBlock *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  float v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *result;
  int v17;
  float v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;

  v4 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1144))(this);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 461) & 1) != 0
    && (*(unsigned int (**)(const WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)a2 + 1584))(a2, 1, this))
  {
    v28 = *((_QWORD *)this + 4);
    if (v28)
    {
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
      {
        if (*(_BYTE *)(v29 + 46) == 12 && (*((_BYTE *)this + 21) & 4) == 0)
        {
          v30 = WebCore::RenderObject::ensureRareData(this, v27);
          v12 = 0;
          *((_BYTE *)v30 + 2) |= 1u;
          goto LABEL_11;
        }
      }
    }
    goto LABEL_37;
  }
  v5 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
  if (v5 > 4)
    v6 = 0;
  else
    v6 = qword_1969FC6C8[v5];
  v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
  v8 = (unsigned __int8 *)(v7 + 8 * v6);
  v9 = v8[4];
  switch(v9)
  {
    case 4:
      v10 = *(float *)v8;
      if (!v8[6])
        v10 = (float)*(int *)v8;
      break;
    case 3:
      v25 = *(float *)v8;
      if (!*(_BYTE *)(v7 + 8 * v6 + 6))
        v25 = (float)*(int *)v8;
      v10 = (float)((float)((float)v4 * 0.015625) * v25) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v8, (float)v4 * 0.015625);
      break;
    default:
LABEL_37:
      v12 = 0;
      goto LABEL_11;
  }
  v11 = v10 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
LABEL_11:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 461) & 2) == 0
    || (result = (WTF *)(*(uint64_t (**)(const WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)a2 + 1584))(a2, 2, this), !(_DWORD)result))
  {
    v13 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
    if (v13 > 4)
      v14 = 2;
    else
      v14 = qword_1969FC6F0[v13];
    v15 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
    result = (WTF *)(v15 + 8 * v14);
    v17 = *((unsigned __int8 *)result + 4);
    switch(v17)
    {
      case 4:
        v18 = *(float *)result;
        if (!*((_BYTE *)result + 6))
          v18 = (float)*(int *)result;
        break;
      case 3:
        v26 = *(float *)result;
        if (!*(_BYTE *)(v15 + 8 * v14 + 6))
          v26 = (float)*(int *)result;
        v18 = (float)((float)((float)v4 * 0.015625) * v26) / 100.0;
        break;
      case 11:
        result = (WTF *)WebCore::Length::nonNanCalculatedValue(result, (float)v4 * 0.015625);
        break;
      default:
LABEL_39:
        LODWORD(v20) = 0;
        goto LABEL_21;
    }
    v19 = v18 * 64.0;
    if (v19 >= 2147483650.0)
    {
      LODWORD(v20) = 0x7FFFFFFF;
    }
    else if (v19 <= -2147483650.0)
    {
      LODWORD(v20) = 0x80000000;
    }
    else
    {
      LODWORD(v20) = (int)v19;
    }
    goto LABEL_21;
  }
  v20 = *((_QWORD *)this + 4);
  if (!v20)
    goto LABEL_21;
  v20 = *(_QWORD *)(v20 + 8);
  if (!v20)
    goto LABEL_21;
  if (*(_BYTE *)(v20 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
    goto LABEL_39;
  result = WebCore::RenderObject::ensureRareData(this, v31);
  LODWORD(v20) = 0;
  *((_BYTE *)result + 2) |= 2u;
LABEL_21:
  v21 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
  if (v21 > 4)
    v22 = 0;
  else
    v22 = qword_1969FC6C8[v21];
  *((_DWORD *)this + v22 + 42) = v12;
  v23 = ((unsigned __int16)*((_DWORD *)a2 + 31) >> 13) - 1;
  if (v23 > 4)
    v24 = 2;
  else
    v24 = qword_1969FC6F0[v23];
  *((_DWORD *)this + v24 + 42) = v20;
  return result;
}

uint64_t WebCore::RenderBlockFlow::adjustBlockChildForPagination(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  char v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  void *v27;
  int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int *v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int *v59;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int m;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  _DWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  int i;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  int k;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int j;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _DWORD *v132;
  int *v133;
  int v134;
  uint64_t v135;

  v9 = *(_BYTE *)(a4 + 45);
  if ((v9 & 0x40) != 0)
    v10 = a4;
  else
    v10 = 0;
  if (a3 != (_DWORD)a2)
  {
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v11 = (_DWORD *)(a1 + 160);
    else
      v11 = (_DWORD *)(a1 + 164);
    *v11 = a2;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    if ((*(_BYTE *)(a1 + 21) & 0x10) != 0)
    {
      v72 = *(_DWORD *)(a4 + 152);
      v14 = __OFSUB__(v72, (_DWORD)a2);
      v73 = v72 - a2;
      v74 = (v72 >> 31) + 0x7FFFFFFF;
      if (!v14)
        v74 = v73;
      v75 = *(unsigned int *)(v12 + 508);
      if ((_DWORD)v75)
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v12 + 496) + 8 * v75 - 8);
        if (v76)
        {
          v77 = *(_DWORD *)(v76 + 64);
          v14 = __OFADD__(v77, v74);
          v78 = v77 + v74;
          v79 = (v77 >> 31) + 0x7FFFFFFF;
          if (v14)
            v78 = v79;
          *(_DWORD *)(v76 + 64) = v78;
        }
      }
      *(_DWORD *)(a4 + 152) = a2;
    }
    else
    {
      v13 = *(_DWORD *)(a4 + 156);
      v14 = __OFSUB__(v13, (_DWORD)a2);
      v15 = v13 - a2;
      v16 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v14)
        v16 = v15;
      v17 = *(unsigned int *)(v12 + 508);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v12 + 496) + 8 * v17 - 8);
        if (v18)
        {
          v19 = *(_DWORD *)(v18 + 68);
          v14 = __OFADD__(v19, v16);
          v20 = v19 + v16;
          v21 = (v19 >> 31) + 0x7FFFFFFF;
          if (v14)
            v20 = v21;
          *(_DWORD *)(v18 + 68) = v20;
        }
      }
      *(_DWORD *)(a4 + 156) = a2;
    }
    if ((*(_BYTE *)(a4 + 20) & 1) != 0
      || (*(_BYTE *)(a4 + 45) & 1) == 0
      && (v71 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8)) != 0
      && (*(_QWORD *)(v71 + 64) & 0xFFFFFFFFFFFFLL) == a4
      && (*(_WORD *)(v71 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v71 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::marqueeTag + 24))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 1504))(a4))
      {
        v22 = *(_DWORD *)(a4 + 20);
        if ((v22 & 0x800) == 0 && (v22 & 0x20) == 0 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 8) + 8))
          *(_DWORD *)(a4 + 20) = v22 | 0x20;
      }
    }
    if ((v9 & 0x40) != 0)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 1504))(a4) & 1) == 0
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 1672))(a4))
      {
        if ((*(_BYTE *)(a4 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1963821BCLL);
        }
        WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout((WebCore::RenderBlockFlow *)a4, 0, 1);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 1512))(a4);
    }
    if ((*(_BYTE *)(a4 + 20) & 0xF8) != 0)
    {
      v23 = *(_QWORD *)(a4 + 32);
      if (v23
        && (v24 = *(_QWORD *)(v23 + 8)) != 0
        && (*(_BYTE *)(*(_QWORD *)(v24 + 104) + 239) & 0x18) != 0
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248)
                     + 479))
      {
        WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)a4);
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a4 + 688))(a4);
      }
    }
  }
  v25 = WebCore::RenderBlockFlow::applyBeforeBreak((_BYTE *)a1, a4, a2);
  if (WebCore::RenderElement::shouldApplySizeContainment((WebCore::RenderElement *)a4))
    WebCore::RenderBlockFlow::adjustSizeContainmentChildForPagination((_BYTE *)a1, (signed int *)a4, v25);
  v26 = WebCore::RenderBlockFlow::adjustForUnsplittableChild((const WebCore::RenderBox *)a1, a4, v25, 0, 0);
  v28 = v26 - v25;
  if (__OFSUB__(v26, (_DWORD)v25))
    v28 = (v26 >> 31) + 0x7FFFFFFF;
  if (((*(_DWORD *)(a4 + 124) >> 13) & 6u) - 2 < 4)
    v29 = (unsigned int *)(a4 + 160);
  else
    v29 = (unsigned int *)(a4 + 164);
  v30 = *v29;
  if (v28)
  {
    LODWORD(v31) = (v30 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__((_DWORD)v30, v28))
      v31 = v31;
    else
      v31 = (v30 - v28);
    v32 = v28;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v135 = v31;
      v82 = v28;
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
      v28 = v82;
      v32 = v82;
      if (v83)
      {
        v84 = v83;
        v134 = v28;
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
        if (__OFADD__(v85, (_DWORD)v25))
          v86 = (v85 >> 31) + 0x7FFFFFFF;
        else
          v86 = v85 + v25;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84 + 1976))(v84, a1, v86, v135);
        v28 = v134;
        v32 = v134;
      }
    }
    goto LABEL_45;
  }
  if ((v9 & 0x40) != 0 && (*(_WORD *)(a4 + 69) & 0x400) != 0)
  {
    v99 = *(_QWORD *)WebCore::gRareDataMap;
    if (*(_QWORD *)WebCore::gRareDataMap)
    {
      v100 = *(_DWORD *)(v99 - 8);
      v101 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
      v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
      v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
      v104 = v100 & ((v103 >> 31) ^ v103);
      for (i = 1; ; ++i)
      {
        v106 = v104;
        v107 = *(_QWORD *)(v99 + 16 * v104);
        if (v107 != -1)
        {
          if (!v107)
            goto LABEL_51;
          if (*(_QWORD *)(v107 + 8) == v10)
            break;
        }
        v104 = (v106 + i) & v100;
      }
      v120 = *(_DWORD **)(v99 + 16 * v106 + 8);
      if (!v120 || !*v120)
        goto LABEL_51;
      v121 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
      v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
      v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
      v124 = v100 & ((v123 >> 31) ^ v123);
      for (j = 1; ; ++j)
      {
        v126 = v124;
        v127 = *(_QWORD *)(v99 + 16 * v124);
        if (v127 != -1)
        {
          if (!v127)
            goto LABEL_51;
          if (*(_QWORD *)(v127 + 8) == v10)
            break;
        }
        v124 = (v126 + j) & v100;
      }
      v133 = *(int **)(v99 + 16 * v126 + 8);
      if (!v133 || (v32 = *v133) == 0)
      {
LABEL_51:
        if (v28)
          goto LABEL_81;
        goto LABEL_55;
      }
LABEL_45:
      if (!a5
        || (_DWORD)v25 != (_DWORD)a2
        || (*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000
        || *(_BYTE *)(a1 + 46) == 37)
      {
        v14 = __OFADD__((_DWORD)v25, v32);
        v33 = (v25 + v32);
        if (v14)
          v25 = (v25 >> 31) + 0x7FFFFFFF;
        else
          v25 = v33;
        goto LABEL_51;
      }
      v61 = a2 + v32;
      if (__OFADD__((_DWORD)a2, v32))
        v61 = (a2 >> 31) + 0x7FFFFFFF;
      if ((*(_WORD *)(a1 + 69) & 0x400) == 0)
        goto LABEL_96;
      v108 = *(_QWORD *)WebCore::gRareDataMap;
      if (!*(_QWORD *)WebCore::gRareDataMap)
        goto LABEL_96;
      v109 = v28;
      v110 = v9;
      v111 = v10;
      v112 = *(_DWORD *)(v108 - 8);
      v113 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
      v114 = 9 * ((v113 + ~(v113 << 13)) ^ ((v113 + ~(v113 << 13)) >> 8));
      v115 = (v114 ^ (v114 >> 15)) + ~((v114 ^ (v114 >> 15)) << 27);
      v116 = v112 & ((v115 >> 31) ^ v115);
      for (k = 1; ; ++k)
      {
        v118 = v116;
        v119 = *(_QWORD *)(v108 + 16 * v116);
        if (v119 != -1)
        {
          v10 = v111;
          v9 = v110;
          v28 = v109;
          if (!v119)
            goto LABEL_96;
          if (*(_QWORD *)(v119 + 8) == a1)
            break;
        }
        v116 = (v118 + k) & v112;
      }
      v81 = *(_DWORD **)(v108 + 16 * v118 + 8);
      v10 = v111;
      v9 = v110;
      v28 = v109;
      if (!v81)
      {
LABEL_96:
        if (!v61)
        {
LABEL_97:
          v25 = a2;
          if ((v9 & 0x40) != 0)
          {
            v25 = a2;
            if ((*(_WORD *)(a4 + 69) & 0x400) != 0)
            {
              v62 = *(_QWORD *)WebCore::gRareDataMap;
              v25 = a2;
              if (*(_QWORD *)WebCore::gRareDataMap)
              {
                v63 = *(_DWORD *)(v62 - 8);
                v64 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
                v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
                v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
                v67 = v63 & ((v66 >> 31) ^ v66);
                for (m = 1; ; ++m)
                {
                  v69 = v67;
                  v70 = *(_QWORD *)(v62 + 16 * v67);
                  if (v70 != -1)
                  {
                    if (!v70)
                      goto LABEL_180;
                    if (*(_QWORD *)(v70 + 8) == v10)
                      break;
                  }
                  v67 = (v69 + m) & v63;
                }
                v132 = *(_DWORD **)(v62 + 16 * v69 + 8);
                v25 = a2;
                if (!v132)
                  goto LABEL_51;
                *v132 = 0;
LABEL_180:
                v25 = a2;
              }
            }
          }
          goto LABEL_51;
        }
        v80 = v28;
        v81 = (_DWORD *)WebCore::RenderBlock::ensureBlockRareData((WebCore::RenderBlock *)a1, v27);
        v28 = v80;
      }
      *v81 = v61;
      goto LABEL_97;
    }
  }
LABEL_55:
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v35 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 496) + 8 * *(unsigned int *)(v34 + 508) - 8) + 72);
  if (v35)
  {
    if ((*(_BYTE *)(a1 + 23) & 0x10) == 0
      || (v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1)) == 0
      || ((v88 = v87,
           v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1),
           __OFADD__((_DWORD)v25, v89))
        ? (v90 = (v25 >> 31) + 0x7FFFFFFF)
        : (v90 = (v25 + v89)),
          (v91 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v88 + 2000))(v88, 0, v90, 0)) != 0&& (v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 1976))(v91)) != 0))
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
      v37 = v25 + v36;
      if (__OFADD__((_DWORD)v25, v36))
        v37 = (v25 >> 31) + 0x7FFFFFFF;
      if ((*(_BYTE *)(a1 + 23) & 0x10) != 0
        && (v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1)) != 0)
      {
        v93 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v92 + 2000))(v92, 0, v37, 0);
        if (v93)
        {
          v94 = v93;
          v95 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v93 + 1992))(v93, v37);
          v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 1976))(v94);
          v97 = v95 + v96;
          if (__OFADD__(v95, v96))
            v97 = (v95 >> 31) + 0x7FFFFFFF;
          v14 = __OFSUB__(v97, v37);
          v98 = v97 - v37;
          v40 = (v97 >> 31) + 0x7FFFFFFF;
          if (!v14)
            v40 = v98;
          if (!v40)
            v40 = v96;
        }
        else
        {
          v40 = 0;
        }
      }
      else
      {
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 496) + 8 * *(unsigned int *)(v38 + 508) - 8) + 72);
        v14 = __OFSUB__((_DWORD)v38, (int)v37 % (int)v38);
        v39 = v38 - (int)v37 % (int)v38;
        v40 = (v38 >> 31) + 0x7FFFFFFF;
        if (!v14)
          v40 = v39;
      }
      if (((*(_DWORD *)(a4 + 124) >> 13) & 6u) - 2 < 4)
        v41 = (unsigned int *)(a4 + 160);
      else
        v41 = (unsigned int *)(a4 + 164);
      v42 = *v41;
      v43 = *v41 - v40;
      if (__OFSUB__(v42, v40))
        v43 = (v42 >> 31) + 0x7FFFFFFF;
      if (v43 < 1)
      {
        if (v40 == v35)
        {
          v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
          v50 = (int *)(((*(_DWORD *)(a4 + 124) >> 13) & 6u) - 2 < 4 ? a4 + 152 : a4 + 156);
          v51 = *v50;
          v14 = __OFADD__(v49, v51);
          v52 = v49 + v51;
          if ((v14 || v52) && (*(_BYTE *)(a1 + 23) & 0x10) != 0)
          {
            v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
            if (v128)
            {
              v129 = v128;
              v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
              v131 = v130 + v25;
              if (__OFADD__(v130, (_DWORD)v25))
                v131 = (v130 >> 31) + 0x7FFFFFFF;
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v129 + 1976))(v129, a1, v131, v30);
            }
          }
        }
      }
      else
      {
        if (v43 % v35)
          v44 = (v43 % v35);
        else
          v44 = v43;
        if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
        {
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
          if (v45)
          {
            v46 = v45;
            v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
            v48 = v47 + v25;
            if (__OFADD__(v47, (_DWORD)v25))
              v48 = (v47 >> 31) + 0x7FFFFFFF;
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v46 + 1976))(v46, a1, v48, v44);
          }
        }
      }
    }
  }
LABEL_81:
  v53 = ((*(_DWORD *)(a1 + 124) >> 13) & 6) - 2;
  if (v53 >= 4)
    v54 = (unsigned int *)(a1 + 164);
  else
    v54 = (unsigned int *)(a1 + 160);
  v55 = *v54;
  v56 = v25 - a2;
  if (__OFSUB__((_DWORD)v25, (_DWORD)a2))
    v56 = (v25 >> 31) + 0x7FFFFFFF;
  v14 = __OFADD__(v55, v56);
  v57 = v55 + v56;
  v58 = (v55 >> 31) + 0x7FFFFFFF;
  if (!v14)
    v58 = v57;
  if (v53 >= 4)
    v59 = (int *)(a1 + 164);
  else
    v59 = (int *)(a1 + 160);
  *v59 = v58;
  return v25;
}

uint64_t WebCore::RenderBlockFlow::applyAfterBreak(_BYTE *a1, WebCore::RenderObject *this, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  WebCore::RenderObject *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  if ((a1[23] & 0x10) == 0)
  {
    v8 = 0;
LABEL_3:
    v9 = 1;
    goto LABEL_4;
  }
  v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1);
  v8 = v17;
  if (!v17)
    goto LABEL_3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 2048))(v17))
  {
    if ((((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0xF000000000) != 0x4000000000)
      return a3;
    v9 = 0;
    v11 = 1;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * *(unsigned int *)(v10 + 508) - 8) + 72)
    || (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0xF000000000) < 0x4000000001)
  {
    return a3;
  }
  v11 = 0;
LABEL_7:
  v12 = WebCore::RenderObject::containingBlock(this);
  if (v12)
  {
    while (v12 != *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                         + 8)
                                             + 1944)
         && ((*((_BYTE *)v12 + 52) & 7) != 1 || (*((_BYTE *)v12 + 53) & 2) == 0))
    {
      v13 = *((_DWORD *)v12 + 5);
      if ((v13 & 0x800) != 0 || (v13 & 0x1800000) == 0x1000000)
        return a3;
      v12 = WebCore::RenderObject::containingBlock(v12);
      if (!v12)
        break;
    }
  }
  if (WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)a1, a3, 1))
  {
    *(_DWORD *)(a4 + 4) = 0;
    *(_DWORD *)(a4 + 8) = 0;
    if ((v11 & (v9 ^ 1)) == 1
      && ((v18 = 0, v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1), __OFADD__(v14, (_DWORD)a3))
        ? (v15 = (v14 >> 31) + 0x7FFFFFFF)
        : (v15 = v14 + a3),
          (*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, WebCore::RenderObject *, _QWORD, int *))(*(_QWORD *)v8 + 2024))(v8, a1, v15, this, 0, &v18)))
    {
      if (__OFADD__((_DWORD)a3, v18))
        return (a3 >> 31) + 0x7FFFFFFF;
      else
        return (a3 + v18);
    }
    else
    {
      return WebCore::RenderBlockFlow::nextPageLogicalTop(a1, a3, 1);
    }
  }
  return a3;
}

uint64_t WebCore::RenderBlockFlow::updateStaticInlinePositionForChild(unsigned int *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t result;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  unsigned int started;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;

  v6 = (*(_DWORD *)(a2 + 96) >> 5) & 0x1F;
  v7 = v6 > 0x19;
  v8 = (1 << v6) & 0x3528029;
  if (v7 || v8 == 0)
  {
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0
      || (v28 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 648))(a1)) == 0
      || (v30 = v28, (*(_BYTE *)(v28 + 328) & 1) != 0)
      || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v28 + 248), v29) & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      v31 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 1288))(a1);
      if (__OFADD__(v31, a3))
        v32 = (v31 >> 31) + 0x7FFFFFFF;
      else
        v32 = v31 + a3;
      v12 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v30 + 2000))(v30, a1, v32, 1);
    }
    if ((*((_BYTE *)a1 + 123) & 4) != 0)
    {
      v13 = a1 + 41;
      if (((a1[31] >> 13) & 6) - 2 >= 4)
        v13 = a1 + 40;
      v14 = *v13;
      v15 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a1, v12);
      if (__OFSUB__(v14, v15))
        result = (v14 >> 31) + 0x7FFFFFFF;
      else
        result = v14 - v15;
    }
    else
    {
      result = WebCore::RenderBlock::logicalLeftOffsetForContent(a1);
    }
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v33 = result;
      if (!(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 648))(a1))
      {
        result = v33;
        goto LABEL_6;
      }
      started = WebCore::RenderBlock::startOffsetForContent((WebCore::RenderBlock *)a1);
      v17 = WebCore::RenderBlock::startOffsetForContent(a1, a3);
      v18 = started - v17;
      if (__OFSUB__(started, v17))
        v18 = (started >> 31) + 0x7FFFFFFF;
      v19 = __OFADD__(v33, v18);
      v20 = v33 + v18;
      v21 = (v33 >> 31) + 0x7FFFFFFF;
      goto LABEL_27;
    }
  }
  else
  {
    result = WebCore::RenderBlockFlow::staticInlinePositionForOriginalDisplayInline((uint64_t)a1, a3);
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v22 = result;
      v23 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 648))(a1);
      result = v22;
      if (v23)
      {
        v24 = v22;
        v25 = WebCore::RenderBlock::startOffsetForContent((WebCore::RenderBlock *)a1);
        v26 = WebCore::RenderBlock::startOffsetForContent(a1, a3);
        v27 = v25 - v26;
        if (__OFSUB__(v25, v26))
          v27 = (v25 >> 31) + 0x7FFFFFFF;
        v19 = __OFADD__(v24, v27);
        v20 = v24 + v27;
        v21 = (v24 >> 31) + 0x7FFFFFFF;
LABEL_27:
        if (v19)
          result = v21;
        else
          result = v20;
      }
    }
  }
LABEL_6:
  *(_DWORD *)(*(_QWORD *)(a2 + 144) + 148) = result;
  return result;
}

uint64_t WebCore::RenderBlock::startOffsetForLine(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  int v11;

  if ((*(_BYTE *)(a1 + 123) & 4) != 0)
  {
    v9 = (unsigned int *)(a1 + 164);
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v9 = (unsigned int *)(a1 + 160);
    v10 = *v9;
    v11 = WebCore::RenderBlock::logicalRightOffsetForLine((WebCore::RenderBox *)a1, a2, a3);
    if (__OFSUB__(v10, v11))
      return (v10 >> 31) + 0x7FFFFFFF;
    else
      return v10 - v11;
  }
  else
  {
    v4 = a2;
    v5 = a3;
    v6 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)a1, a2);
    v7 = (void *)(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 1824))(a1, v4, v6, v5);
    return WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(a1, v7);
  }
}

uint64_t WebCore::RenderBlockFlow::staticInlinePositionForOriginalDisplayInline(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  int v8;
  float v9;
  double v10;
  double v11;
  int *v13;

  v3 = *(_DWORD *)(a1 + 120);
  v4 = a2;
  v5 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)a1, a2);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1824))(a1, v4, v5, 0);
  v7 = (float)(int)WebCore::RenderBlock::adjustLogicalLeftOffsetForLine(a1, (void *)v6) * 0.015625;
  v8 = WebCore::RenderBlock::logicalRightOffsetForLine((WebCore::RenderBox *)a1, v4, 0);
  v9 = (float)v8 * 0.015625;
  switch((v3 >> 6) & 0xF)
  {
    case 1u:
    case 5u:
      v7 = (float)v8 * 0.015625;
      goto LABEL_2;
    case 2u:
    case 6u:
      v7 = v7 + (float)((float)(v9 - v7) * 0.5);
      goto LABEL_2;
    case 3u:
    case 7u:
      goto LABEL_3;
    case 8u:
      if ((v3 & 0x4000000) == 0)
        v7 = (float)v8 * 0.015625;
      goto LABEL_2;
    default:
LABEL_2:
      v9 = v7;
LABEL_3:
      if ((v3 & 0x4000000) != 0)
      {
        v13 = (int *)(a1 + 164);
        if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
          v13 = (int *)(a1 + 160);
        v10 = (float)((float)((float)*v13 * 0.015625) - v9);
      }
      else
      {
        v10 = v7;
      }
      v11 = v10 * 64.0;
      if (v11 >= 2147483650.0)
        return 0x7FFFFFFFLL;
      if (v11 <= -2147483650.0)
        return 0x80000000;
      return (int)v11;
  }
}

uint64_t WebCore::RenderBlock::startOffsetForContent(WebCore::RenderBlock *this)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if ((*((_BYTE *)this + 123) & 4) == 0)
    return WebCore::RenderBlock::logicalLeftOffsetForContent(this);
  v2 = (char *)this + 164;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v2 = (char *)this + 160;
  v3 = *(_DWORD *)v2;
  v4 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBlock *))(v4 + 1000))(this);
    v6 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 928))(this);
  }
  else
  {
    v5 = (*(uint64_t (**)(WebCore::RenderBlock *))(v4 + 1016))(this);
    v6 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 944))(this);
  }
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  v8 = WebCore::RenderBox::contentLogicalWidth(this);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v3, v9);
  v11 = v3 - v9;
  if (v10)
    return (v3 >> 31) + 0x7FFFFFFF;
  else
    return v11;
}

uint64_t WebCore::RenderBlockFlow::maxPositiveMarginAfter(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 28);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = qword_1969FC6F0[v2];
  return *((_DWORD *)this + v3 + 42) & ~(*((int *)this + v3 + 42) >> 31);
}

uint64_t WebCore::RenderBlockFlow::maxNegativeMarginAfter(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *((_QWORD *)this + 28);
  if (v1)
    return *(unsigned int *)(v1 + 12);
  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = qword_1969FC6F0[v2];
  v4 = *((_DWORD *)this + v3 + 42);
  if (v4 == 0x80000000)
    return 0x7FFFFFFFLL;
  else
    return -v4 & ~(-v4 >> 31);
}

uint64_t WebCore::RenderBlockFlow::hasNextPage(const WebCore::RenderBox *a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  WebCore::RenderFragmentedFlow *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WebCore::RenderFragmentContainer *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderFragmentContainer *v13;
  _QWORD *v14;
  _QWORD *i;
  BOOL v16;
  int v17;
  WebCore::RenderFragmentContainer *v20;
  WebCore::RenderFragmentContainer *v21;

  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    return 1;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
  if (!v5)
    return 1;
  v6 = (WebCore::RenderFragmentedFlow *)v5;
  v7 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1288))(a1);
  if (__OFADD__(v7, a2))
    v8 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v8 = v7 + a2;
  result = (*(uint64_t (**)(WebCore::RenderFragmentedFlow *, const WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v6 + 2000))(v6, a1, v8, 1);
  if (!result)
    return result;
  v10 = (WebCore::RenderFragmentContainer *)result;
  v11 = *(_QWORD *)(result + 248);
  if (v11)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  if ((WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v12 + 248), v9) & 1) != 0)
  {
    v13 = 0;
  }
  else
  {
    v14 = *(_QWORD **)(v12 + 256);
    for (i = *(_QWORD **)(v12 + 264); i != v14; i = (_QWORD *)i[1])
    {
      if (*(_QWORD *)(*i + 8))
      {
        v14 = i;
        break;
      }
    }
    ++*(_DWORD *)(v12 + 272);
    v13 = *(WebCore::RenderFragmentContainer **)(*v14 + 8);
  }
  if (v13 != v10)
  {
    v20 = 0;
    v21 = 0;
    WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v6, a1, &v21, &v20);
    if (v20)
      v16 = v10 == v20;
    else
      v16 = 1;
    return !v16;
  }
  if (((*(uint64_t (**)(WebCore::RenderFragmentContainer *))(*(_QWORD *)v10 + 2000))(v10) & 1) != 0)
    return 1;
  if (a3 != 1)
    return 0;
  v17 = *((_DWORD *)v10 + 64);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v10 + 31) + 8) + 21) & 0x10) == 0)
    v17 = *((_DWORD *)v10 + 65);
  return (_DWORD)v8 == v17;
}

uint64_t WebCore::RenderBlockFlow::nextPageLogicalTop(_BYTE *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 496) + 8 * *(unsigned int *)(v4 + 508) - 8) + 72);
  if (v5)
  {
    if ((a1[23] & 0x10) == 0
      || (v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1)) == 0
      || ((v18 = v17, v19 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1),
                      __OFADD__((_DWORD)a2, v19))
        ? (v20 = (a2 >> 31) + 0x7FFFFFFF)
        : (v20 = (a2 + v19)),
          (v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v18 + 2000))(v18, 0, v20, 0)) != 0&& (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 1976))(v21)) != 0))
    {
      v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1);
      if (__OFADD__((_DWORD)a2, v8))
        v9 = (a2 >> 31) + 0x7FFFFFFF;
      else
        v9 = (a2 + v8);
      if ((a1[23] & 0x10) != 0
        && (v22 = v9, v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1), LODWORD(v9) = v22, v23))
      {
        v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v23 + 2000))(v23, 0, v22, 0);
        if (v24)
        {
          v25 = v24;
          v26 = v22;
          v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 1992))(v24, v22);
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 1976))(v25);
          v29 = v27 + v28;
          if (__OFADD__(v27, v28))
            v29 = (v27 >> 31) + 0x7FFFFFFF;
          v14 = __OFSUB__(v29, v26);
          v30 = v29 - v26;
          v31 = (v29 >> 31) + 0x7FFFFFFF;
          if (!v14)
            v31 = v30;
          v13 = v31 % v28;
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * *(unsigned int *)(v10 + 508) - 8) + 72);
        v12 = v11 - (int)v9 % v11;
        if (__OFSUB__(v11, (int)v9 % v11))
          v12 = (v11 >> 31) + 0x7FFFFFFF;
        v13 = v12 % v11;
      }
      if (!a3 && !v13)
        v13 = v5;
      v14 = __OFADD__((_DWORD)a2, v13);
      v15 = (a2 + v13);
      if (v14)
        return (a2 >> 31) + 0x7FFFFFFF;
      else
        return v15;
    }
  }
  return a2;
}

BOOL WebCore::RenderBlockFlow::isChildEligibleForMarginTrim(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  unint64_t v15;

  v3 = *(_DWORD *)(a3 + 96) & 0x1F;
  v4 = v3 > 0x17;
  v5 = (1 << v3) & 0xA94016;
  if (v4 || v5 == 0)
    return 0;
  if (a2 == 1)
    return WebCore::RenderBox::firstInFlowChildBox(*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) == a3;
  v8 = *(unsigned int *)(a1 + 71);
  if (v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32))
  {
    v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 + 20);
      if ((v10 & 0x800) == 0 && (v10 & 0x1800000) != 0x1000000)
      {
LABEL_11:
        if ((*(_BYTE *)(v9 + 45) & 4) != 0)
          v11 = v9;
        else
          v11 = 0;
        return v11 == a3;
      }
      v12 = *(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
      if (v12)
      {
        v9 = *(_QWORD *)(v12 + 8);
        if (v9)
        {
          while (1)
          {
            v14 = *(_DWORD *)(v9 + 20);
            if ((v14 & 0x800) == 0 && (v14 & 0x1800000) != 0x1000000)
              goto LABEL_11;
            v15 = *(unsigned int *)(v9 + 40) | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32);
            if (!v15)
              break;
            v11 = 0;
            v9 = *(_QWORD *)(v15 + 8);
            if (!v9)
              return v11 == a3;
          }
        }
      }
    }
  }
  v11 = 0;
  return v11 == a3;
}

uint64_t WebCore::RenderBlockFlow::applyBeforeBreak(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  WebCore::RenderObject *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;

  if ((a1[23] & 0x10) == 0)
  {
    v6 = 0;
LABEL_3:
    v7 = 1;
    goto LABEL_4;
  }
  v15 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 648))(a1);
  v6 = v15;
  if (!v15)
    goto LABEL_3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 2048))(v15))
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 11) + 40);
    if ((*(_BYTE *)(v16 + 642) & 3u) - 3 <= 0xFFFFFFFD
      && (*(_BYTE *)(v16 + 462) & 1) == 0
      && (*(_DWORD *)(v16 + 636) & 0xC0000) == 0)
    {
      goto LABEL_35;
    }
    v19 = *((_DWORD *)a1 + 5);
    if ((v19 & 1) == 0)
    {
      v20 = a1;
      if ((a1[45] & 2) != 0)
        v20 = *(_BYTE **)(*((_QWORD *)a1 + 4) + 8);
      v21 = *((_DWORD *)v20 + 24) & 0x1F;
      if (v21 > 0x19 || ((1 << v21) & 0x3528029) == 0)
        goto LABEL_35;
      v22 = a1;
      if ((a1[45] & 2) != 0)
      {
        v22 = *(_BYTE **)(*((_QWORD *)a1 + 4) + 8);
        if ((v19 & 2) == 0)
        {
LABEL_44:
          if ((*((_QWORD *)v22 + 12) & 0x1FLL) == 0)
            goto LABEL_35;
        }
      }
      else if ((v19 & 2) == 0)
      {
        goto LABEL_44;
      }
    }
    if ((*((_QWORD *)a1 + 12) & 0x1FLL) != 0x19
      && (a1[46] - 36 > 4 || (a1[52] & 7) == 1))
    {
      v23 = *(unsigned int *)(a2 + 40);
      if (!(v23 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32))
        || !*(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32)) + 8))
      {
        goto LABEL_50;
      }
    }
LABEL_35:
    if ((unint64_t)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 640) & 0xF) << 32 != 0x400000000)
      return a3;
    v7 = 0;
    v9 = 1;
    goto LABEL_7;
  }
LABEL_50:
  v7 = 0;
LABEL_4:
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 496) + 8 * *(unsigned int *)(v8 + 508) - 8) + 72)
    || (unint64_t)(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 640) & 0xF) << 32 < 0x400000001)
  {
    return a3;
  }
  v9 = 0;
LABEL_7:
  v10 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a2);
  if (v10)
  {
    while (v10 != *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
         && ((*((_BYTE *)v10 + 52) & 7) != 1 || (*((_BYTE *)v10 + 53) & 2) == 0))
    {
      v11 = *((_DWORD *)v10 + 5);
      if ((v11 & 0x800) != 0 || (v11 & 0x1800000) == 0x1000000)
        return a3;
      v10 = WebCore::RenderObject::containingBlock(v10);
      if (!v10)
        break;
    }
  }
  if (WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)a1, a3, 1))
  {
    if ((v9 & (v7 ^ 1)) == 1
      && ((v24 = 0, v12 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 1288))(a1), __OFADD__(v12, (_DWORD)a3))
        ? (v13 = (v12 >> 31) + 0x7FFFFFFF)
        : (v13 = v12 + a3),
          (*(unsigned int (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v6 + 2024))(v6, a1, v13, a2, 1, &v24)))
    {
      if (__OFADD__((_DWORD)a3, v24))
        return (a3 >> 31) + 0x7FFFFFFF;
      else
        return (a3 + v24);
    }
    else
    {
      return WebCore::RenderBlockFlow::nextPageLogicalTop(a1, a3, 1);
    }
  }
  return a3;
}

uint64_t WebCore::RenderBlockFlow::adjustForUnsplittableChild(const WebCore::RenderBox *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0
    && (v41 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 2048))(v41) & 1) != 0)
  {
    v12 = 0;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                    + 248);
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 496) + 8 * *(unsigned int *)(v11 + 508) - 8) + 72) != 0;
  }
  if (WebCore::RenderBox::isUnsplittableForPagination((WebCore::RenderBox *)a2))
    goto LABEL_5;
  v13 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 641) & 7;
  if (v13 == 1)
    goto LABEL_5;
  if (!v10)
  {
    if (v13 != 3 || !v12)
      goto LABEL_65;
    goto LABEL_5;
  }
  if (v13 == 2 || !v12)
  {
    if (v13 != 2)
      goto LABEL_65;
LABEL_5:
    v14 = 1;
    goto LABEL_6;
  }
  if (v13 == 3)
    goto LABEL_5;
LABEL_65:
  if ((*(char *)(a2 + 45) & 0x80000000) == 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 1920))(a2) & 1) != 0)
  {
    return a3;
  }
  v14 = 0;
LABEL_6:
  v15 = *((_DWORD *)a1 + 5);
  if ((v15 & 0x10000000) != 0)
  {
    v16 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    v15 = *((_DWORD *)a1 + 5);
  }
  else
  {
    v16 = 0;
  }
  v17 = (unsigned int *)(a2 + 160);
  if ((v15 & 0x1000) == 0)
    v17 = (unsigned int *)(a2 + 164);
  v18 = *v17;
  v33 = __OFADD__(v18, a4);
  v19 = v18 + a4;
  v20 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v33)
    v20 = v19;
  v33 = __OFADD__(v20, a5);
  v21 = v20 + a5;
  v22 = (v20 >> 31) + 0x7FFFFFFF;
  if (v33)
    v23 = v22;
  else
    v23 = v21;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 496) + 8 * *(unsigned int *)(v24 + 508) - 8) + 72);
  if (v25)
  {
    if ((v15 & 0x10000000) != 0)
    {
      v42 = v16;
      v43 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
      v16 = v42;
      if (v43)
      {
        v44 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1288))(a1);
        v45 = a3 + v44;
        if (__OFADD__((_DWORD)a3, v44))
          v45 = (a3 >> 31) + 0x7FFFFFFF;
        v46 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v43 + 2000))(v43, 0, v45, 0);
        if (v46)
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 1976))(v46);
        else
          v25 = 0;
        v16 = v42;
      }
    }
  }
  if (v16)
  {
    v26 = (*(unsigned __int8 *)(v16 + 328) >> 2) & 1;
    if (!v14)
      goto LABEL_22;
  }
  else
  {
    LOBYTE(v26) = 1;
    if (!v14)
      goto LABEL_22;
  }
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v47 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    if (v47)
    {
      v48 = v47;
      v49 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1288))(a1);
      if (__OFADD__(v49, (_DWORD)a3))
        v50 = (v49 >> 31) + 0x7FFFFFFF;
      else
        v50 = v49 + a3;
      (*(void (**)(uint64_t, const WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v48 + 1984))(v48, a1, v50, v23);
    }
  }
LABEL_22:
  if ((int)v23 > v25)
    v27 = v26;
  else
    v27 = 0;
  if (v25 && (v27 & 1) == 0 && WebCore::RenderBlockFlow::hasNextPage(a1, a3, 0))
  {
    v28 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1288))(a1);
    v29 = a3 + v28;
    if (__OFADD__((_DWORD)a3, v28))
      v29 = (a3 >> 31) + 0x7FFFFFFF;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0
      && (v51 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1)) != 0)
    {
      v57 = v29;
      v52 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v51 + 2000))(v51, 0, v29, 0);
      if (v52)
      {
        v53 = v52;
        v54 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 1992))(v52, v29);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 1976))(v53);
        v56 = (v54 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v54, v55))
          v56 = v54 + v55;
        v32 = v56 - v57;
        if (__OFSUB__(v56, v57))
          v32 = (v56 >> 31) + 0x7FFFFFFF;
        if (!v32)
          v32 = v55;
      }
      else
      {
        v32 = 0;
      }
    }
    else
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8)
                                  + 1944)
                      + 248);
      LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 496) + 8 * *(unsigned int *)(v30 + 508) - 8) + 72);
      v33 = __OFSUB__((_DWORD)v30, (int)v29 % (int)v30);
      v31 = v30 - (int)v29 % (int)v30;
      v32 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v33)
        v32 = v31;
    }
    v58 = v32;
    if (v32 < (int)v23)
    {
      if ((v26 & 1) != 0)
      {
LABEL_37:
        v33 = __OFADD__((_DWORD)a3, v32);
        v34 = a3 + v32;
        v35 = __OFADD__((_DWORD)a3, v32);
        v36 = (a3 + v32);
        if (v33)
          v36 = (a3 >> 31) + 0x7FFFFFFF;
        if ((*(_BYTE *)(a2 + 21) & 8) != 0
          && (*(_QWORD *)(a2 + 96) & 0xF80000000000) == 0x100000000000
          && *(int *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 52) >= 1)
        {
          if (v35)
            v34 = (a3 >> 31) + 0x7FFFFFFF;
          if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
            v37 = (unsigned int *)((char *)a1 + 160);
          else
            v37 = (unsigned int *)((char *)a1 + 164);
          *v37 = v34;
        }
        return v36;
      }
      if (WebCore::RenderBlockFlow::pushToNextPageWithMinimumLogicalHeight((uint64_t)a1, &v58, a3, v23))
      {
        v32 = v58;
        goto LABEL_37;
      }
    }
    return a3;
  }
  return a3;
}

void WebCore::RenderBlockFlow::materializeRareBlockFlowData(WTF **this)
{
  WebCore::RenderBlockFlowRareData *v2;
  void *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;

  v2 = (WebCore::RenderBlockFlowRareData *)WTF::fastMalloc((WTF *)0x28);
  WebCore::RenderBlockFlowRareData::RenderBlockFlowRareData(v2, (const WebCore::RenderBlockFlow *)this);
  v4 = this[28];
  this[28] = v5;
  if (v4)
  {
    v6 = (WTF *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
        WTF::fastFree(v6, v3);
      else
        --*(_DWORD *)v6;
    }
    WTF::fastFree(v4, v3);
  }
}

unint64_t WebCore::RenderBlockFlow::computeLineAdjustmentForPagination(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (**v8)();
  uint64_t (**v9)();
  double v10;
  uint64_t v11;
  double v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  double v19;
  signed int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  double v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  double v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t (*v105)(unint64_t);
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t (**v117)();
  uint64_t v118;
  signed int v119;
  int v120;
  int v121;
  signed int v122;
  unsigned int v123;
  signed int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  const WebCore::RenderBlockFlow *v129;
  int v130;
  uint64_t v131;
  _BOOL4 v132;
  _BYTE *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  int v140;
  double v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (**v149)();
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  signed int v175;
  unsigned int v176;
  int v177;
  uint64_t (**v178)();
  uint64_t (**v179)();
  uint64_t v180;
  uint64_t v181;
  unsigned int v182[4];
  unsigned int v183;
  _QWORD v184[2];
  unsigned int v185;
  _QWORD v186[2];
  unsigned int v187;
  _BYTE v188[9];

  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v11 == -1)
    goto LABEL_283;
  LODWORD(v7) = a3;
  v8 = (uint64_t (**)())a2;
  v5 = a1;
  v186[0] = v184;
  v13 = ((float (*)(_QWORD *))off_1E3421A50[v11])(v186) * 64.0;
  v10 = 2147483650.0;
  if (v13 >= 2147483650.0)
    v4 = 0x7FFFFFFFLL;
  else
    v4 = v13 <= -2147483650.0 ? 0x80000000 : (int)v13;
  v14 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v14 == -1)
    goto LABEL_283;
  v186[0] = v184;
  v15 = ((float (*)(_QWORD *, uint64_t (**)()))off_1E3421A60[v14])(v186, v8) * 64.0;
  if (v15 >= 2147483650.0)
    v16 = 0x7FFFFFFF;
  else
    v16 = v15 <= -2147483650.0 ? 0x80000000 : (int)v15;
  v17 = __OFSUB__(v16, (_DWORD)v4) ? (v16 >> 31) + 0x7FFFFFFF : v16 - v4;
  v18 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v18 == -1)
    goto LABEL_283;
  v186[0] = v184;
  v19 = ((float (*)(_QWORD *, uint64_t (**)()))off_1E3421A70[v18])(v186, v8) * 64.0;
  if (v19 >= 2147483650.0)
    v20 = 0x7FFFFFFF;
  else
    v20 = v19 <= -2147483650.0 ? 0x80000000 : (int)v19;
  LODWORD(v9) = (int)v4 >= v20 ? v20 : v4;
  v175 = v20;
  v176 = v4;
  if (a4)
  {
    v21 = a4 - v20;
    if (__OFSUB__(a4, v20))
      v21 = (a4 >> 31) + 0x7FFFFFFF;
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 496) + 8 * *(unsigned int *)(v22 + 508) - 8) + 72);
    if ((_DWORD)v23)
    {
      if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
      {
        v105 = *(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 648);
        v6 = v5;
        v106 = v23;
        v107 = v105(v6);
        LODWORD(v23) = v106;
        v5 = v6;
        if (v107)
        {
          v108 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 1288))(v6);
          v109 = a4 + v108;
          if (__OFADD__(a4, v108))
            v109 = (a4 >> 31) + 0x7FFFFFFF;
          v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v107 + 2000))(v107, 0, v109, 0);
          if (v23)
            LODWORD(v23) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1976))(v23);
          v5 = v6;
        }
      }
    }
    v4 = v21 <= (int)v23 ? a4 : 0;
  }
  else
  {
    v4 = 0;
  }
  v24 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v24 == -1)
    goto LABEL_283;
  v186[0] = v184;
  v25 = ((float (*)(_QWORD *, uint64_t (**)()))off_1E3421A80[v24])(v186, v8) * 64.0;
  if (v25 >= 2147483650.0)
  {
    v26 = 0x7FFFFFFF;
  }
  else if (v25 > -2147483650.0)
  {
    v26 = (int)v25;
  }
  else
  {
    v26 = 0x80000000;
  }
  if (v26 <= (int)v16)
    v26 = v16;
  if (v26 <= (int)v4)
    v27 = v4;
  else
    v27 = v26;
  v28 = v27 - (_DWORD)v9;
  v29 = __OFSUB__(v27, (_DWORD)v9);
  v6 = v27 - v9;
  if (__OFSUB__(v27, (_DWORD)v9))
    v6 = (v27 >> 31) + 0x7FFFFFFF;
  v30 = *(_QWORD *)(v5 + 104);
  v31 = *(_DWORD *)(v30 + 228);
  if ((v31 & 2) != 0)
    v32 = 1;
  else
    v32 = *(unsigned __int16 *)(v30 + 226);
  v177 = v4;
  if ((v31 & 1) != 0)
    v33 = 1;
  else
    v33 = *(unsigned __int16 *)(v30 + 224);
  if (v32 <= v33)
    v34 = v33;
  else
    v34 = v32;
  if (v34 < 2)
    goto LABEL_90;
  v172 = v27;
  v170 = (int)v9;
  v171 = v7;
  v173 = v6;
  v180 = v5;
  LOBYTE(v184[0]) = 0;
  v185 = -1;
  v35 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v35 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, uint64_t (**)()))off_1E3421B80[v35])(v186, v184, v8);
    v185 = v35;
  }
  v178 = v8;
  v36 = v34 - 1;
  v5 = (uint64_t)v188;
  v8 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
  v6 = (unint64_t)off_1E3421B30;
  v9 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2;
  v4 = (uint64_t)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix;
  while (1)
  {
    LOBYTE(v186[0]) = 0;
    v187 = -1;
    v37 = v185;
    if (v185 == -1)
      goto LABEL_283;
    ((void (*)(unsigned int *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v185])(v182, v186, v184);
    v187 = v37;
    *(_QWORD *)v182 = v188;
    ((void (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v37])(v182, v186);
    LOBYTE(v182[0]) = 0;
    v183 = -1;
    v38 = v187;
    if (v187 != -1)
    {
      ((void (*)(_BYTE *, unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v187])(v188, v182, v186);
      v183 = v38;
      if (v187 != -1)
        ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v187])(v188, v186);
    }
    v39 = WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v182);
    if (v183 != -1)
      ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v183])(v186, v182);
    v7 = v185;
    if ((v39 & 1) == 0)
      break;
    LOBYTE(v186[0]) = 0;
    v187 = -1;
    if (v185 == -1)
      goto LABEL_283;
    ((void (*)(unsigned int *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v185])(v182, v186, v184);
    v187 = v7;
    *(_QWORD *)v182 = v188;
    ((void (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v7])(v182, v186);
    LOBYTE(v182[0]) = 0;
    v183 = -1;
    v40 = v187;
    if (v187 == -1)
    {
      v40 = 0xFFFFFFFFLL;
    }
    else
    {
      ((void (*)(_BYTE *, unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v187])(v188, v182, v186);
      v183 = v40;
      if (v187 != -1)
      {
        ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v187])(v188, v186);
        v40 = v183;
      }
    }
    if (v185 != -1)
    {
      if (v40 == 0xFFFFFFFFLL)
      {
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v185])(v186, v184);
        v185 = -1;
      }
      else
      {
LABEL_72:
        v186[0] = v184;
        ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E3421B30[v40])(v186, v184, v182);
      }
      if (v183 != -1)
        ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v183])(v186, v182);
      goto LABEL_75;
    }
    if (v40 != 0xFFFFFFFFLL)
      goto LABEL_72;
LABEL_75:
    if (!--v36)
    {
      LODWORD(v7) = v185;
      break;
    }
  }
  v8 = v178;
  v5 = v180;
  v27 = v172;
  v6 = v173;
  if ((_DWORD)v7 == -1)
    goto LABEL_283;
  v186[0] = v182;
  ((void (*)(_QWORD *, _QWORD *))off_1E3421A70[v7])(v186, v184);
  if (v185 == -1)
    goto LABEL_283;
  v42 = v41;
  v186[0] = v182;
  v43 = ((float (*)(_QWORD *, _QWORD *))off_1E3421A50[v185])(v186, v184);
  if (v43 >= v42)
    v43 = v42;
  v44 = v43 * 64.0;
  if (v44 >= 2147483650.0)
  {
    v45 = 0x7FFFFFFF;
  }
  else if (v44 <= -2147483650.0)
  {
    v45 = 0x80000000;
  }
  else
  {
    v45 = (int)v44;
  }
  if (v185 != -1)
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v185])(v186, v184);
  v46 = __OFSUB__(v172, v45);
  v28 = v172 - v45;
  v29 = v46;
  LODWORD(v7) = v171;
  LODWORD(v9) = v170;
LABEL_90:
  if (v29)
    v28 = (v27 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
  {
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5);
    if (v92)
    {
      v93 = v92;
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1288))(v5);
      v95 = v94 + (_DWORD)v9;
      if (__OFADD__(v94, (_DWORD)v9))
        v95 = (v94 >> 31) + 0x7FFFFFFF;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v93 + 1984))(v93, v5, v95, v28);
    }
  }
  v47 = v9;
  v46 = __OFADD__((_DWORD)v9, (_DWORD)v7);
  LODWORD(v9) = (_DWORD)v9 + v7;
  if (v46)
    LODWORD(v9) = (v47 >> 31) + 0x7FFFFFFF;
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v7 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v48 + 496) + 8 * *(unsigned int *)(v48 + 508) - 8) + 72);
  if ((_DWORD)v7)
  {
    if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
    {
      v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5);
      if (v100)
      {
        v101 = v100;
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1288))(v5);
        v103 = (_DWORD)v9 + v102;
        if (__OFADD__((_DWORD)v9, v102))
          v103 = (v9 >> 31) + 0x7FFFFFFF;
        v104 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v101 + 2000))(v101, 0, v103, 0);
        if (v104)
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 1976))(v104);
        else
          v7 = 0;
      }
    }
  }
  if ((*(_BYTE *)(v5 + 23) & 0x10) != 0
    && (v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5)) != 0)
  {
    v4 = (*(unsigned __int8 *)(v96 + 328) >> 2) & 1;
    if (!(_DWORD)v7)
      goto LABEL_174;
LABEL_99:
    if ((WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)v5, (int)v9, 0) & 1) != 0)
    {
      if (v17 > (int)v7)
        v49 = v4;
      else
        v49 = 0;
      if (v49 != 1)
        goto LABEL_199;
      v174 = v4;
      v50 = *((unsigned int *)v8 + 4);
      if ((_DWORD)v50 == -1)
        goto LABEL_283;
      v4 = v7;
      v179 = v8;
      v181 = v5;
      v6 = (unint64_t)v182;
      v184[0] = v182;
      ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t (**)()))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                       + v50))(v186, v184, v8);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v186) & 1) != 0)
      {
        LODWORD(v9) = 0x7FFFFFFF;
        LODWORD(v5) = 0x80000000;
      }
      else
      {
        v8 = off_1E3421B00;
        LODWORD(v7) = 0;
        LODWORD(v9) = 0x7FFFFFFF;
        v5 = 0x80000000;
        do
        {
          if (v187 == -1)
            goto LABEL_283;
          v184[0] = v182;
          ((void (*)(_QWORD *, _QWORD *))off_1E3421C00[v187])(v184, v186);
          if (v187 == -1)
            goto LABEL_283;
          v59 = v57;
          v60 = v58;
          v184[0] = v182;
          if (((unsigned int (*)(_QWORD *, _QWORD *))off_1E3421B00[v187])(v184, v186))
            v61 = v60;
          else
            v61 = v59;
          if ((float)((float)(int)v9 * 0.015625) > v61)
          {
            if (v187 == -1)
              goto LABEL_283;
            v184[0] = v182;
            ((void (*)(_QWORD *, _QWORD *))off_1E3421C00[v187])(v184, v186);
            if (v187 == -1)
              goto LABEL_283;
            v64 = v62;
            v65 = v63;
            v184[0] = v182;
            if (((unsigned int (*)(_QWORD *, _QWORD *))off_1E3421B00[v187])(v184, v186))
              v66 = v65;
            else
              v66 = v64;
            v67 = v66 * 64.0;
            v68 = (int)v67;
            if (v67 <= -2147483650.0)
              v68 = 0x80000000;
            if (v67 < 2147483650.0)
              LODWORD(v9) = v68;
            else
              LODWORD(v9) = 0x7FFFFFFF;
          }
          if (v187 == -1)
            goto LABEL_283;
          v184[0] = v182;
          ((void (*)(_QWORD *, _QWORD *))off_1E3421C00[v187])(v184, v186);
          if (v187 == -1)
            goto LABEL_283;
          v73 = v69;
          v74 = v70;
          v75 = v71;
          v76 = v72;
          v184[0] = v182;
          v77 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3421B00[v187])(v184, v186);
          if (v77)
            v78 = v74;
          else
            v78 = v73;
          if (v77)
            v79 = v76;
          else
            v79 = v75;
          if ((float)((float)(int)v5 * 0.015625) < (float)(v78 + v79))
          {
            if (v187 == -1)
              goto LABEL_283;
            v184[0] = v182;
            ((void (*)(_QWORD *, _QWORD *))off_1E3421C00[v187])(v184, v186);
            if (v187 == -1)
              goto LABEL_283;
            v84 = v80;
            v85 = v81;
            v86 = v82;
            v87 = v83;
            v184[0] = v182;
            v88 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3421B00[v187])(v184, v186);
            if (v88)
              v89 = v85;
            else
              v89 = v84;
            if (v88)
              v90 = v87;
            else
              v90 = v86;
            v91 = (float)(v89 + v90) * 64.0;
            if (v91 >= 2147483650.0)
            {
              v5 = 0x7FFFFFFFLL;
            }
            else if (v91 <= -2147483650.0)
            {
              v5 = 0x80000000;
            }
            else
            {
              v5 = (int)v91;
            }
          }
          if (v187 == -1)
            goto LABEL_283;
          v184[0] = v182;
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v187])(v184, v186);
        }
        while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v186) & 1) == 0);
      }
      if (v187 != -1)
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v187])(v184, v186);
      v6 = (v5 - (_DWORD)v9);
      v8 = v179;
      if (__OFSUB__((_DWORD)v5, (_DWORD)v9))
        v6 = (v5 >> 31) + 0x7FFFFFFF;
      v5 = v181;
      if ((_DWORD)v9 != 0x7FFFFFFF && (int)v6 <= (int)v4)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 24) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 496) + 8 * *(unsigned int *)(v51 + 508) - 8) + 72);
        if (!(_DWORD)v7)
          goto LABEL_198;
        v4 = v174;
        if ((*(_BYTE *)(v181 + 23) & 0x10) != 0)
        {
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 648))(v181);
          if (v52)
          {
            v53 = v52;
            v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 1288))(v181);
            if (__OFADD__((_DWORD)v9, v54))
              v55 = (v9 >> 31) + 0x7FFFFFFF;
            else
              v55 = ((_DWORD)v9 + v54);
            v56 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v53 + 2000))(v53, 0, v55, 0);
            if (v56)
              LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1976))(v56);
            else
              LODWORD(v7) = 0;
          }
          v8 = v179;
          v5 = v181;
LABEL_198:
          v4 = v174;
        }
LABEL_199:
        v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1288))(v5);
        v111 = (_DWORD)v9 + v110;
        if (__OFADD__((_DWORD)v9, v110))
          goto LABEL_284;
        while (2)
        {
          if ((*(_BYTE *)(v5 + 23) & 0x10) != 0
            && (v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5)) != 0)
          {
            v148 = v4;
            v149 = (uint64_t (**)())v6;
            v150 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v147 + 2000))(v147, 0, v111, 0);
            if (v150)
            {
              v151 = v150;
              v152 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v150 + 1992))(v150, v111);
              v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 1976))(v151);
              v154 = v152 + v153;
              if (__OFADD__(v152, v153))
                v154 = (v152 >> 31) + 0x7FFFFFFF;
              v46 = __OFSUB__(v154, v111);
              v155 = v154 - v111;
              v156 = (v154 >> 31) + 0x7FFFFFFF;
              if (!v46)
                v156 = v155;
              if (v156)
                v115 = v156;
              else
                v115 = v153;
            }
            else
            {
              v115 = 0;
            }
            v6 = (unint64_t)v149;
            v4 = v148;
          }
          else
          {
            v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8)
                                         + 1944)
                             + 248);
            LODWORD(v112) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 496) + 8 * *(unsigned int *)(v112 + 508) - 8)
                                      + 72);
            v46 = __OFSUB__((_DWORD)v112, (int)v111 % (int)v112);
            v113 = v112 - (int)v111 % (int)v112;
            v114 = (v112 >> 31) + 0x7FFFFFFF;
            if (v46)
              v115 = v114;
            else
              v115 = v113;
          }
          v182[0] = v115;
          v116 = *((unsigned int *)v8 + 4);
          if ((_DWORD)v116 != -1)
          {
            v186[0] = v184;
            v117 = v8;
            v8 = (uint64_t (**)())(((unsigned int (*)(_QWORD *, uint64_t (**)()))off_1E3421A90[v116])(v186, v8)+ 1);
            v118 = *(_QWORD *)(v5 + 224);
            if (v115 < (int)v6)
            {
              if (!v118 || *(_DWORD *)(v118 + 16) != (_DWORD)v8)
                goto LABEL_208;
              goto LABEL_281;
            }
            if (v118 && (v146 = *(_DWORD *)(v118 + 16), (v146 & 0x80000000) == 0) && v146 == (_DWORD)v8)
            {
LABEL_281:
              if ((v8 & 0x80000000) == 0)
              {
                *(_DWORD *)(v118 + 16) = -1;
                *(_BYTE *)(v118 + 32) |= 1u;
              }
LABEL_208:
              if ((v4 & 1) == 0
                && !WebCore::RenderBlockFlow::pushToNextPageWithMinimumLogicalHeight(v5, (int *)v182, v9, v6))
              {
                goto LABEL_175;
              }
              v119 = v6 - v7;
              if ((int)v6 > (int)v7)
              {
                if (__OFSUB__((_DWORD)v6, (_DWORD)v7))
                  v119 = (v6 >> 31) + 0x7FFFFFFF;
                v120 = v176 - v175;
                if (__OFSUB__(v176, v175))
                  v120 = (v176 >> 31) + 0x7FFFFFFF;
                if ((v120 & ~(v120 >> 31)) < v119)
                  v119 = v120 & ~(v120 >> 31);
                v46 = __OFSUB__(v182[0], v119);
                v121 = v182[0] - v119;
                if (v46)
                  v121 = (v182[0] >> 31) + 0x7FFFFFFF;
                v182[0] = v121;
              }
              v122 = v7;
              v123 = v9 & ~((int)v9 >> 31);
              v124 = v6 + v123;
              v125 = v6;
              if (__OFADD__((_DWORD)v6, v123))
                v124 = (v6 >> 31) + 0x7FFFFFFF;
              v6 = v182[0];
              if ((v4 & 1) == 0)
              {
                v126 = (_DWORD)v9 + v182[0];
                if (__OFADD__((_DWORD)v9, v182[0]))
                  v126 = (v9 >> 31) + 0x7FFFFFFF;
                v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40)
                                                         + 8)
                                             + 1944)
                                 + 248);
                v122 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 496) + 8 * *(unsigned int *)(v127 + 508) - 8) + 72);
                if (v122)
                {
                  if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
                  {
                    v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5);
                    if (v165)
                    {
                      v166 = v165;
                      v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1288))(v5);
                      v168 = v126 + v167;
                      if (__OFADD__(v126, v167))
                        v168 = (v126 >> 31) + 0x7FFFFFFF;
                      v169 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v166 + 2000))(v166, 0, v168, 0);
                      if (v169)
                        v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 1976))(v169);
                      else
                        v122 = 0;
                    }
                  }
                }
              }
              v4 = v125 - v6;
              if (__OFSUB__(v125, (_DWORD)v6))
                v4 = (v125 >> 31) + 0x7FFFFFFF;
              v7 = v5;
              if ((*(_BYTE *)(v5 + 23) & 0x10) != 0)
              {
                v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 648))(v5);
                if (v157)
                {
                  v158 = v157;
                  v4 = v4;
                  v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 1288))(v5);
                  v160 = v159 + (_DWORD)v9;
                  if (__OFADD__(v159, (_DWORD)v9))
                    v160 = (v159 >> 31) + 0x7FFFFFFF;
                  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v158 + 1976))(v158, v5, v160, v4);
                }
              }
              LOBYTE(v186[0]) = 0;
              v187 = -1;
              v5 = *((unsigned int *)v117 + 4);
              if ((_DWORD)v5 != -1)
              {
                ((void (*)(_QWORD *, _QWORD *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v5])(v184, v186, v117);
                v187 = v5;
                v184[0] = v188;
                ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(v184, v186);
                LOBYTE(v184[0]) = 0;
                v185 = -1;
                v128 = v187;
                if (v187 != -1)
                {
                  ((void (*)(_BYTE *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v187])(v188, v184, v186);
                  v185 = v128;
                  if (v187 != -1)
                    ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v187])(v188, v186);
                }
                v4 = WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v184);
                if (v185 != -1)
                  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v185])(v186, v184);
                v130 = (v124 < v122) & ~(_DWORD)v4;
                if (v177)
                  v130 = 0;
                v131 = *(_QWORD *)(v7 + 104);
                v132 = (*(_BYTE *)(v131 + 228) & 2) == 0 && (int)v8 <= *(unsigned __int16 *)(v131 + 226);
                if ((v130 | v132) != 1 || (*(_DWORD *)(v7 + 20) & 0x1800000) == 0x1000000 || *(_BYTE *)(v7 + 46) == 37)
                {
                  v98 = 1;
                  return v6 | (unint64_t)(v98 << 32);
                }
                v136 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
                if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 40) + 8)
                                                                                            + 528)
                                                                                + 8)
                                                                    + 24)
                                                        + 8)
                                            + 112)
                                + 664) & 0x10000000) != 0
                  && (*(_BYTE *)(v7 + 45) & 1) == 0)
                {
                  if ((*(_WORD *)(v136 + 28) & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196384C6CLL);
                  }
                  v137 = *(_QWORD *)(v136 + 104);
                  if (!v137 || (v139 = *(_QWORD *)(v137 + 24), v138 = (_QWORD *)(v137 + 24), !v139))
                    v138 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  if ((MEMORY[0x19AEA53F4](*v138, "messageContentContainer", 23) & 1) != 0)
                    goto LABEL_175;
                }
                WebCore::InlineIterator::firstLineBoxFor(v7, v129, (uint64_t)v186);
                v140 = WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v186);
                v141 = 0.0;
                if (!v140)
                  goto LABEL_268;
                if (v187 != -1)
                {
                  v184[0] = v188;
                  v141 = ((float (*)(_QWORD *, _QWORD *, double))off_1E3421A50[v187])(v184, v186, 0.0) * 64.0;
                  if (v141 < v10)
                  {
                    if (v141 <= -2147483650.0)
                      goto LABEL_269;
LABEL_268:
                    v142 = (int)v141;
                    if ((int)v141 == 0x80000000)
                    {
LABEL_269:
                      v143 = 0x7FFFFFFF;
LABEL_273:
                      v144 = v6 + (_DWORD)v9;
                      if (__OFADD__((_DWORD)v6, (_DWORD)v9))
                        v144 = (v6 >> 31) + 0x7FFFFFFF;
                      v46 = __OFADD__(v144, v143);
                      v145 = v144 + v143;
                      if (v46)
                        v145 = (v144 >> 31) + 0x7FFFFFFF;
                      WebCore::RenderBlock::setPaginationStrut(v7, (void *)v145);
                      if (v187 != -1)
                        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v187])(v184, v186);
                      goto LABEL_175;
                    }
                    if (v142 < 1)
                    {
                      v143 = -v142;
                      goto LABEL_273;
                    }
                  }
                  v143 = 0;
                  goto LABEL_273;
                }
              }
            }
            else
            {
              if (v115 != (_DWORD)v7)
                goto LABEL_175;
              v133 = (_BYTE *)v5;
              LOBYTE(v186[0]) = 0;
              v187 = -1;
              v5 = *((unsigned int *)v117 + 4);
              if ((_DWORD)v5 != -1)
              {
                ((void (*)(_QWORD *, _QWORD *, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v5])(v184, v186, v117);
                v187 = v5;
                v184[0] = v188;
                ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(v184, v186);
                LOBYTE(v184[0]) = 0;
                v185 = -1;
                v134 = v187;
                if (v187 != -1)
                {
                  ((void (*)(_BYTE *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v187])(v188, v184, v186);
                  v185 = v134;
                  if (v187 != -1)
                    ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v187])(v188, v186);
                }
                v135 = WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v184);
                if (v185 != -1)
                  ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v185])(v186, v184);
                if (((v135 & 1) != 0 || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v133 + 1288))(v133))
                  && (v133[23] & 0x10) != 0)
                {
                  v161 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v133 + 648))(v133);
                  if (v161)
                  {
                    v162 = v161;
                    v163 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v133 + 1288))(v133);
                    v164 = v163 + (_DWORD)v9;
                    if (__OFADD__(v163, (_DWORD)v9))
                      v164 = (v163 >> 31) + 0x7FFFFFFF;
                    (*(void (**)(uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v162 + 1976))(v162, v133, v164, v6);
                  }
                }
                LODWORD(v6) = 0;
                v98 = v135;
                return v6 | (unint64_t)(v98 << 32);
              }
            }
          }
LABEL_283:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_284:
          v111 = (v9 >> 31) + 0x7FFFFFFF;
          continue;
        }
      }
    }
  }
  else
  {
    v4 = 1;
    if ((_DWORD)v7)
      goto LABEL_99;
  }
LABEL_174:
  v97 = *(_QWORD *)(v5 + 224);
  if (!v97 || (*(_DWORD *)(v97 + 16) & 0x80000000) != 0)
  {
LABEL_175:
    LODWORD(v6) = 0;
    v98 = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    v98 = 0;
    *(_DWORD *)(v97 + 16) = -1;
    *(_BYTE *)(v97 + 32) |= 1u;
  }
  return v6 | (unint64_t)(v98 << 32);
}

uint64_t WebCore::RenderBlockFlow::pushToNextPageWithMinimumLogicalHeight(uint64_t a1, int *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL8 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
  else
    v8 = 0;
  if (__OFADD__(a3, *a2))
    v9 = (a3 >> 31) + 0x7FFFFFFF;
  else
    v9 = a3 + *a2;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                  + 248);
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 496) + 8 * *(unsigned int *)(v10 + 508) - 8) + 72);
  if (!v11)
    return 1;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
    if (v24)
    {
      v25 = v24;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
      v27 = __OFADD__(v9, v26) ? (v9 >> 31) + 0x7FFFFFFF : v9 + v26;
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v25 + 2000))(v25, 0, v27, 0);
      if (!v28)
        return 1;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 1976))(v28);
      if (!v11)
        return 1;
    }
  }
  v12 = 0;
  do
  {
    v13 = v11 >= a4;
    if (v11 >= a4)
      break;
    v14 = a3 + *a2;
    if (__OFADD__(a3, *a2))
      v14 = (a3 >> 31) + 0x7FFFFFFF;
    v15 = v14;
    if (!WebCore::RenderBlockFlow::hasNextPage((const WebCore::RenderBox *)a1, v14, 0))
      break;
    if (v8)
    {
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 2000))(v8, a1, v15, 1);
      v17 = v16 == v12;
      v12 = v16;
      if (v17)
        break;
    }
    v18 = (*a2 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*a2, v11))
      v18 = *a2 + v11;
    *a2 = v18;
    v19 = a3 + v18;
    if (__OFADD__(a3, v18))
      v19 = (a3 >> 31) + 0x7FFFFFFF;
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                    + 248);
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 496) + 8 * *(unsigned int *)(v20 + 508) - 8) + 72);
    if (!v11)
      break;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
      if (v30)
      {
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
        if (__OFADD__(v19, v21))
          v22 = (v19 >> 31) + 0x7FFFFFFF;
        else
          v22 = v19 + v21;
        v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v30 + 2000))(v30, 0, v22, 0);
        if (!v23)
          return v13;
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 1976))(v23);
      }
    }
  }
  while (v11);
  return v13;
}

uint64_t WebCore::RenderBlockFlow::pageLogicalTopForOffset(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t result;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 1944)
                 + 248);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 496) + 8 * *(unsigned int *)(v2 + 508) - 8);
  v4 = *(_DWORD *)(v3 + 72);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  v6 = *(_QWORD *)(v3 + 76);
  if ((v5 & 0x1000) != 0)
  {
    v3 = *(_QWORD *)(v3 + 56);
  }
  else
  {
    v6 >>= 32;
    LODWORD(v3) = *(_DWORD *)(v3 + 60);
  }
  v8 = __OFADD__(a2, (_DWORD)v3);
  v9 = a2 + v3;
  if (v8)
    v9 = (a2 >> 31) + 0x7FFFFFFF;
  if ((v5 & 0x10000000) != 0
    && (v16 = v9,
        v17 = v6,
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1),
        LODWORD(v6) = v17,
        v9 = v16,
        v13))
  {
    if (__OFSUB__(v16, v17))
      v14 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v14 = v16 - v17;
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v13 + 2000))(v13, 0, v14, 0);
    if (v15)
      LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 1992))(v15, v14);
    v8 = __OFADD__(v17, (_DWORD)v15);
    result = v17 + v15;
    if (v8)
      return (v17 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v8 = __OFSUB__(v9, (_DWORD)v6);
    v10 = v9 - v6;
    if (v8)
      v10 = (v9 >> 31) + 0x7FFFFFFF;
    v11 = (((int)(v10 - (((v9 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v10 / 64)
        % (((int)(v4 - (((v9 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v4 / 64);
    if (v11 <= 0x1FFFFFF)
      v12 = v11 << 6;
    else
      v12 = 0x7FFFFFFF;
    result = v9 - v12;
    if (__OFSUB__(v9, v12))
      return (v9 >> 31) + 0x7FFFFFFF;
  }
  return result;
}

uint64_t WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t **v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(uint64_t ***)(v2 + 8 * v7);
      if (!v9)
        break;
      if (v9 != (uint64_t **)-1)
      {
        v10 = **v9;
        if (v10)
        {
          if (*(_QWORD *)(v10 + 8) == a2)
            return 1;
        }
      }
      v7 = (v7 + i) & v3;
    }
  }
  return 0;
}

uint64_t WebCore::RenderBlockFlow::subtreeContainsFloat(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::RenderBlockFlow *v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;

  v4 = (uint64_t *)*((_QWORD *)this + 27);
  if (v4
    && (WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(v4, (uint64_t)a2) & 1) != 0)
  {
    return 1;
  }
  v5 = *((unsigned int *)this + 16);
  v6 = v5 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
  if (v6)
  {
    v7 = *(_QWORD *)((v5 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 45) & 0x40) == 0)
      {
        while (1)
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
          if (!v8)
          {
            if ((WebCore::RenderBlockFlow *)v7 == this)
              return 0;
            v9 = *(unsigned int *)(v7 + 47);
            if (!(v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
              || (v8 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8)) == 0)
            {
              v6 = *(_QWORD *)(v7 + 32);
              if (!v6)
                return v6;
              v10 = *(WebCore::RenderBlockFlow **)(v6 + 8);
              if (v10)
                v11 = v10 == this;
              else
                v11 = 1;
              if (v11)
                return 0;
              while (1)
              {
                v13 = *(unsigned int *)((char *)v10 + 47);
                if (v13 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32))
                {
                  v8 = *(_QWORD *)((v13 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)) + 8);
                  if (v8)
                    break;
                }
                v14 = *((_QWORD *)v10 + 4);
                if (!v14)
                  return 0;
                v6 = 0;
                v10 = *(WebCore::RenderBlockFlow **)(v14 + 8);
                if (v10)
                  v15 = v10 == this;
                else
                  v15 = 1;
                if (v15)
                  return v6;
              }
            }
          }
          v7 = v8;
          if ((*(_BYTE *)(v8 + 45) & 0x40) != 0)
            goto LABEL_19;
        }
      }
      v8 = *(_QWORD *)((v5 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
LABEL_19:
      while (1)
      {
        if ((*(_BYTE *)(v8 + 52) & 7) == 1)
        {
          if (*(_QWORD *)(v8 + 216))
          {
            v16 = v8;
            v17 = WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(*(uint64_t **)(v8 + 216), (uint64_t)a2);
            v8 = v16;
            if ((v17 & 1) != 0)
              break;
          }
        }
        v8 = WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>(v8, (uint64_t)this);
        v6 = 0;
        if (!v8)
          return v6;
      }
      return 1;
    }
    return 0;
  }
  return v6;
}

uint64_t WebCore::RenderBlockFlow::hasOverhangingFloats(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  char *v5;

  v1 = *((_QWORD *)this + 4);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1672))(this);
  if ((_DWORD)result)
  {
    v4 = WebCore::RenderBlockFlow::lowestFloatLogicalBottom((uint64_t)this, 3u);
    v5 = (char *)this + 160;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v5 = (char *)this + 164;
    return v4 > *(_DWORD *)v5;
  }
  return result;
}

BOOL WebCore::RenderBlockFlow::hasOverhangingFloat(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  _DWORD **v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  char *v18;

  v2 = (uint64_t *)*((_QWORD *)this + 27);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        v4 = *v2;
        if (v4)
        {
          v5 = *(_DWORD *)(v4 - 8);
          v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
          v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
          v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
          v9 = v5 & ((v8 >> 31) ^ v8);
          for (i = 1; ; ++i)
          {
            v11 = *(_DWORD ***)(v4 + 8 * v9);
            if (!v11)
              break;
            if (v11 != (_DWORD **)-1)
            {
              v12 = *v11;
              if (*(_QWORD *)v12)
              {
                if (*(WebCore::RenderBox **)(*(_QWORD *)v12 + 8) == a2)
                {
                  if (v9 == *(_DWORD *)(v4 - 4))
                    return 0;
                  if ((*((_BYTE *)this + 21) & 0x10) != 0)
                  {
                    v13 = v12[2];
                    v14 = v12[4];
                  }
                  else
                  {
                    v13 = v12[3];
                    v14 = v12[5];
                  }
                  v15 = __OFADD__(v13, v14);
                  v16 = v13 + v14;
                  v17 = (v13 >> 31) + 0x7FFFFFFF;
                  if (!v15)
                    v17 = v16;
                  v18 = (char *)this + 160;
                  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
                    v18 = (char *)this + 164;
                  return v17 > *(_DWORD *)v18;
                }
              }
            }
            v9 = (v9 + i) & v5;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::RenderAncestorIterator<WebCore::RenderBlockFlow>::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 32);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
  {
    while ((*(_BYTE *)(v2 + 52) & 7) != 1)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4)
        goto LABEL_9;
      v3 = 0;
      v2 = *(_QWORD *)(v4 + 8);
      if (!v2)
        goto LABEL_5;
    }
    v3 = v2;
  }
  else
  {
LABEL_9:
    v3 = 0;
  }
LABEL_5:
  *(_QWORD *)(result + 8) = v3;
  return result;
}

void WebCore::RenderBlockFlow::markSiblingsWithFloatsForLayout(WebCore::RenderBlockFlow *this, WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::RenderBlockFlow *v6;
  uint64_t i;
  WebCore::RenderBox *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  int v16;
  int v17;
  WebCore::RenderBox *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::RenderBlockFlow *v23;
  WebCore::RenderBlockFlow *v24;
  WebCore::RenderBox *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    v3 = *(unsigned int *)((char *)this + 47);
    if (v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
    {
      v4 = *(_QWORD *)((v3 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
      if (v4)
      {
        while (1)
        {
          v5 = *(_BYTE *)(v4 + 52) & 7;
          if (v5 == 1)
            v6 = (WebCore::RenderBlockFlow *)v4;
          else
            v6 = 0;
          if (v6)
            ++*((_DWORD *)v6 + 4);
          if (v5 == 1)
          {
            if (a2)
            {
              for (i = *(_QWORD *)(v2 + 8); i; i = *(_QWORD *)(i + 16))
              {
                v8 = **(WebCore::RenderBox ***)i;
                if (v8)
                  v8 = (WebCore::RenderBox *)*((_QWORD *)v8 + 1);
                if (v8 == a2)
                {
                  v9 = *(uint64_t **)(v4 + 216);
                  if (v9)
                  {
                    v27 = v4;
                    v24 = v6;
                    v25 = a2;
                    v19 = i;
                    v22 = v2;
                    v16 = WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(v9, (uint64_t)a2);
                    i = v19;
                    v2 = v22;
                    a2 = v25;
                    v4 = v27;
                    v6 = v24;
                    if (v16)
                    {
                      WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v24, v25, 1);
                      i = v19;
                      v2 = v22;
                      v6 = v24;
                      a2 = v25;
                      v4 = v27;
                    }
                  }
                }
              }
            }
            else
            {
              v13 = *(_DWORD *)(v4 + 20);
              if ((v13 & 0x800) == 0 && (v13 & 0x1800000) != 0x1000000)
              {
                v26 = v4;
                v23 = v6;
                v21 = v2;
                v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1504))(v4);
                v2 = v21;
                v6 = v23;
                a2 = 0;
                v4 = v26;
                if ((v15 & 1) != 0)
                  goto LABEL_26;
                if (*(_QWORD *)(v21 + 8))
                {
                  v12 = *(_QWORD *)(v21 + 8);
                  do
                  {
                    v10 = **(_QWORD **)v12;
                    if (v10)
                      v10 = *(_QWORD *)(v10 + 8);
                    v11 = *(uint64_t **)(v4 + 216);
                    if (v11)
                    {
                      v18 = (WebCore::RenderBox *)v10;
                      v20 = v12;
                      v17 = WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(v11, v10);
                      v12 = v20;
                      v2 = v21;
                      a2 = 0;
                      v4 = v26;
                      v6 = v23;
                      if (v17)
                      {
                        WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v23, v18, 1);
                        v12 = v20;
                        v2 = v21;
                        v6 = v23;
                        a2 = 0;
                        v4 = v26;
                      }
                    }
                    v12 = *(_QWORD *)(v12 + 16);
                  }
                  while (v12);
LABEL_26:
                  v14 = *((_DWORD *)v6 + 4);
                  if (!v14)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1963857E4);
                  }
                  *((_DWORD *)v6 + 4) = v14 - 1;
                  goto LABEL_28;
                }
              }
            }
          }
          if (v6)
            goto LABEL_26;
LABEL_28:
          if (*(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32))
          {
            v4 = *(_QWORD *)((*(unsigned int *)(v4 + 47) | ((unint64_t)*(unsigned __int8 *)(v4 + 51) << 32)) + 8);
            if (v4)
              continue;
          }
          return;
        }
      }
    }
  }
}

void WebCore::RenderBlockFlow::updateStylesForColumnChildren(WebCore::RenderBlockFlow *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const WebCore::Element *v9;
  void *v10;
  int v11;
  WebCore::RenderElement *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const WebCore::Element *v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[64];

  if (a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 24);
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 24);
    v5 = *(unsigned __int16 *)(v3 + 8) != *(unsigned __int16 *)(v4 + 8) || *(float *)(v3 + 4) != *(float *)(v4 + 4);
  }
  else
  {
    v5 = 0;
  }
  v6 = *((unsigned int *)this + 16);
  if (v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v7 = *(_QWORD *)((v6 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 45) & 4) != 0)
      {
        v8 = (_QWORD *)((char *)this + 80);
        if (v5)
        {
          do
          {
            if (((*(_BYTE *)(v7 + 52) & 7) != 1 || (*(_BYTE *)(v7 + 53) & 2) == 0) && *(_BYTE *)(v7 + 46) != 26)
              break;
            WebCore::RenderStyle::createAnonymousStyleWithDisplay(v8, (WTF::StringImpl *)1, a3, (uint64_t)v19);
            WebCore::RenderElement::setStyle(v7, (WebCore::Style *)v19, 0, v9);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v19, v10);
            v11 = *(_DWORD *)(v7 + 20);
            if ((v11 & 8) == 0)
            {
              *(_DWORD *)(v7 + 20) = v11 | 8;
              v12 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v7, 0);
              WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v7, v12);
              if ((*(_BYTE *)(v7 + 21) & 0x80) != 0)
              {
                if ((*(_BYTE *)(v7 + 45) & 0x10) == 0
                  || ((v13 = *(_QWORD *)(v7 + 144)) == 0
                    ? (v14 = MEMORY[8])
                    : (v14 = *(_DWORD *)(v13 + 8) + 1, *(_DWORD *)(v13 + 8) = v14),
                      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000,
                      !v14))
                {
                  __break(0xC471u);
                  JUMPOUT(0x196385A98);
                }
                *(_DWORD *)(v13 + 8) = v14 - 1;
              }
            }
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v7, 1, 1);
            v15 = *(unsigned int *)(v7 + 47);
            if (!(v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
              break;
            v7 = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
            if (!v7)
              break;
          }
          while ((*(_BYTE *)(v7 + 45) & 4) != 0);
        }
        else
        {
          do
          {
            if (((*(_BYTE *)(v7 + 52) & 7) != 1 || (*(_BYTE *)(v7 + 53) & 2) == 0) && *(_BYTE *)(v7 + 46) != 26)
              break;
            WebCore::RenderStyle::createAnonymousStyleWithDisplay(v8, (WTF::StringImpl *)1, a3, (uint64_t)v19);
            WebCore::RenderElement::setStyle(v7, (WebCore::Style *)v19, 0, v16);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v19, v17);
            v18 = *(unsigned int *)(v7 + 47);
            if (!(v18 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
              break;
            v7 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
            if (!v7)
              break;
          }
          while ((*(_BYTE *)(v7 + 45) & 4) != 0);
        }
      }
    }
  }
}

uint64_t WebCore::RenderBlockFlow::addFloatsToNewParent(uint64_t this, WebCore::RenderBlockFlow *a2)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::FloatingObject **i;
  WebCore::FloatingObject *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::FloatingObjects *v9;
  void *v10;
  uint64_t *v11;

  v2 = *(_QWORD *)(this + 216);
  if (v2)
  {
    if (!*((_QWORD *)a2 + 27))
    {
      v4 = this;
      this = (uint64_t)WebCore::RenderBlockFlow::createFloatingObjects((WebCore::FloatingObjects **)a2);
      v2 = *(_QWORD *)(v4 + 216);
    }
    for (i = *(WebCore::FloatingObject ***)(v2 + 8); i; i = (WebCore::FloatingObject **)i[2])
    {
      v6 = *i;
      v7 = *(_QWORD *)*i;
      if (v7)
        v8 = *(_QWORD *)(v7 + 8);
      else
        v8 = 0;
      if (*((_QWORD *)a2 + 27))
      {
        this = WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(*((uint64_t **)a2 + 27), v8);
        if ((this & 1) != 0)
          continue;
        v9 = (WebCore::FloatingObjects *)*((_QWORD *)a2 + 27);
        v6 = *i;
      }
      else
      {
        v9 = 0;
      }
      WebCore::FloatingObject::cloneForNewParent(v6, (uint64_t *)&v11);
      WebCore::FloatingObjects::add(v9, &v11);
      this = (uint64_t)std::unique_ptr<WebCore::FloatingObject>::~unique_ptr[abi:sn180100]((WTF **)&v11, v10);
    }
  }
  return this;
}

WebCore::FloatingObjects *WebCore::RenderBlockFlow::createFloatingObjects(WebCore::FloatingObjects **this)
{
  WebCore::FloatingObjects *v2;
  void *v3;
  WebCore::FloatingObjects *result;
  WTF *v5;
  void *v6;

  v2 = (WebCore::FloatingObjects *)WTF::fastMalloc((WTF *)0x38);
  WebCore::FloatingObjects::FloatingObjects(v2, (const WebCore::RenderBlockFlow *)this);
  result = this[27];
  this[27] = v2;
  if (result)
  {
    WebCore::FloatingObjects::~FloatingObjects(result, v3);
    return (WebCore::FloatingObjects *)WTF::fastFree(v5, v6);
  }
  return result;
}

WTF **std::unique_ptr<WebCore::FloatingObject>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(WTF **)v3;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void WebCore::RenderBox::addOverflowFromChild(WebCore::RenderBox *this, const WebCore::RenderBox *a2, const WebCore::LayoutSize *a3)
{
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD v39[2];

  v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  v9 = v6;
  v10 = HIDWORD(v7);
  v11 = *((_DWORD *)this + 40);
  v12 = *((_DWORD *)this + 41);
  v13 = v11 - HIDWORD(v7);
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v11, HIDWORD(v7)))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v15 = __OFSUB__(v13, HIDWORD(v6));
  v16 = v13 - HIDWORD(v6);
  v17 = (v13 >> 31) + 0x7FFFFFFF;
  if (v15)
    v18 = v17;
  else
    v18 = v16;
  v19 = v12 - v6;
  v20 = (v12 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v12, (_DWORD)v6))
    v19 = (v12 >> 31) + 0x7FFFFFFF;
  v15 = __OFSUB__(v19, (_DWORD)v7);
  v21 = v19 - v7;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if (v15)
    v23 = v22;
  else
    v23 = v21;
  v24 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v25 = v24 > 5;
  v26 = (1 << v24) & 0x2A;
  if (v25 || v26 == 0)
  {
    v28 = *((_DWORD *)this + 5);
  }
  else
  {
    v28 = *((_DWORD *)this + 5);
    v35 = HIDWORD(v7) + v18;
    if (__OFADD__(HIDWORD(v7), v18))
      v35 = (HIDWORD(v7) >> 31) + 0x7FFFFFFF;
    v15 = __OFSUB__(v11, v35);
    v36 = v11 - v35;
    if (v15)
      v36 = v14;
    v37 = (v6 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v6, (_DWORD)v23))
      v37 = v6 + v23;
    v15 = __OFSUB__(v12, v37);
    v38 = v12 - v37;
    if (v15)
      v38 = v20;
    if ((v28 & 0x1000) != 0)
    {
      LODWORD(v10) = v36;
      v9 = v6;
    }
    else
    {
      v9 = v38;
    }
  }
  if ((v28 & 0x10000) != 0)
  {
    v29 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v30 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    if (v29 <= 0x2000000)
      v31 = -64 * v29;
    else
      v31 = 0x80000000;
    if (v29 < -33554431)
      v31 = 0x7FFFFFFF;
    v15 = __OFADD__(v18, v31);
    v32 = v18 + v31;
    if (v15)
      v18 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v18 = v32;
    if (v30 <= 0x2000000)
      v33 = -64 * v30;
    else
      v33 = 0x80000000;
    if (v30 < -33554431)
      v33 = 0x7FFFFFFF;
    v15 = __OFADD__((_DWORD)v23, v33);
    v34 = v23 + v33;
    if (v15)
      v23 = (v23 >> 31) + 0x7FFFFFFF;
    else
      v23 = v34;
  }
  v39[0] = v10 | (unint64_t)(v9 << 32);
  v39[1] = v18 | (unint64_t)(v23 << 32);
  WebCore::RenderBox::addOverflowFromChild(this, (unint64_t)a2, a3, (const WebCore::LayoutRect *)v39, v8);
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderMultiColumnSet>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v3;

  v1 = *(unsigned int *)(result + 64);
  if (v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v3 + 8))
    {
      if (*(_BYTE *)(i + 46) == 26)
        break;
      v3 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v3)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildIterator<WebCore::RenderMultiColumnSet>::operator++(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while (*(_BYTE *)(v1 + 46) != 26)
    {
      v2 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v2)
        goto LABEL_7;
      v3 = 0;
      v1 = *(_QWORD *)(v2 + 8);
      if (!v1)
        goto LABEL_8;
    }
    v3 = v1;
  }
  else
  {
LABEL_7:
    v3 = 0;
  }
LABEL_8:
  *(_QWORD *)(result + 8) = v3;
  return result;
}

unint64_t WebCore::RenderBlockFlow::flipFloatForWritingModeForChild(WebCore::RenderBlockFlow *this, const WebCore::FloatingObject *a2, const WebCore::LayoutPoint *a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;

  v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v4 = v3 > 5;
  v5 = (1 << v3) & 0x2A;
  if (v4 || v5 == 0)
  {
    v7 = *(_DWORD *)a3;
LABEL_7:
    v8 = *((unsigned int *)a3 + 1);
    return v7 | (unint64_t)(v8 << 32);
  }
  v7 = *(_DWORD *)a3;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v25 = *((_DWORD *)this + 40);
    v12 = __OFADD__(v7, v25);
    v26 = v7 + v25;
    v27 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v27 = v26;
    v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 160);
    v12 = __OFSUB__(v27, v28);
    v29 = v27 - v28;
    v30 = (v27 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v30 = v29;
    v31 = *((_DWORD *)a2 + 2);
    v32 = *((_DWORD *)a2 + 7);
    v12 = __OFADD__(v31, v32);
    v33 = v31 + v32;
    v34 = (v31 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v34 = v33;
    v35 = 2 * v34;
    v36 = v34 ^ (2 * v34);
    v37 = (v34 >> 31) + 0x7FFFFFFF;
    if (v36 >= 0)
      v37 = v35;
    v12 = __OFSUB__(v30, v37);
    v38 = v30 - v37;
    v7 = (v30 >> 31) + 0x7FFFFFFF;
    if (!v12)
      v7 = v38;
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a3 + 1);
  v11 = *((_DWORD *)this + 41);
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  v14 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v14 = v13;
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 164);
  v12 = __OFSUB__(v14, v15);
  v16 = v14 - v15;
  v17 = (v14 >> 31) + 0x7FFFFFFF;
  if (v12)
    v16 = v17;
  v18 = *((_DWORD *)a2 + 3);
  v19 = *((_DWORD *)a2 + 8);
  v12 = __OFADD__(v18, v19);
  v20 = v18 + v19;
  v21 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v21 = v20;
  v22 = 2 * v21;
  v23 = v21 ^ (2 * v21);
  v24 = (v21 >> 31) + 0x7FFFFFFF;
  if (v23 >= 0)
    v24 = v22;
  v12 = __OFSUB__(v16, v24);
  v8 = v16 - v24;
  if (v12)
    v8 = (v16 >> 31) + 0x7FFFFFFF;
  return v7 | (unint64_t)(v8 << 32);
}

uint64_t WebCore::RenderBlockFlow::clipOutFloatingObjects(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t v5;
  _QWORD *i;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  signed int v31;
  unint64_t v32;
  signed int v33;
  signed int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  float v55[4];

  v5 = *(_QWORD *)(result + 216);
  if (v5)
  {
    for (i = *(_QWORD **)(v5 + 8); i; i = (_QWORD *)i[2])
    {
      v11 = *a5;
      v12 = a5[1];
      v13 = *(_QWORD *)(*i + 8);
      v14 = *(_QWORD *)(*(_QWORD *)*i + 8);
      v16 = *(_DWORD *)(v14 + 160);
      v15 = *(_DWORD *)(v14 + 164);
      v18 = *(_DWORD *)(*i + 28);
      v17 = *(_DWORD *)(*i + 32);
      v19 = __OFADD__((_DWORD)v13, v18);
      v20 = v13 + v18;
      if (v19)
        v20 = (v13 >> 31) + 0x7FFFFFFF;
      v21 = HIDWORD(v13);
      v19 = __OFADD__((_DWORD)v21, v17);
      v22 = v21 + v17;
      v23 = (v21 >> 31) + 0x7FFFFFFF;
      if (!v19)
        v23 = v22;
      v19 = __OFADD__(v11, v20);
      LODWORD(v24) = v11 + v20;
      v25 = (v11 >> 31) + 0x7FFFFFFF;
      if (v19)
        v24 = v25;
      else
        v24 = v24;
      v19 = __OFADD__(v12, v23);
      v26 = v12 + v23;
      LODWORD(v27) = (v12 >> 31) + 0x7FFFFFFF;
      if (v19)
        v27 = v27;
      else
        v27 = v26;
      v28 = v24 | ((unint64_t)v27 << 32);
      v29 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
      if (v29 <= 5 && ((1 << v29) & 0x2A) != 0)
      {
        if ((*(_BYTE *)(a2 + 21) & 0x10) != 0)
        {
          v49 = v27 << 32;
          v50 = *(_DWORD *)(a2 + 160);
          v19 = __OFADD__((_DWORD)v24, v16);
          v51 = v24 + v16;
          v52 = (v24 >> 31) + 0x7FFFFFFF;
          if (!v19)
            v52 = v51;
          v19 = __OFSUB__(v50, v52);
          LODWORD(v53) = v50 - v52;
          v54 = (v50 >> 31) + 0x7FFFFFFF;
          if (v19)
            v53 = v54;
          else
            v53 = v53;
          v28 = v49 | v53;
        }
        else
        {
          v44 = *(_DWORD *)(a2 + 164);
          v19 = __OFADD__((_DWORD)v27, v15);
          v45 = v27 + v15;
          v46 = (v27 >> 31) + 0x7FFFFFFF;
          if (!v19)
            v46 = v45;
          v19 = __OFSUB__(v44, v46);
          v47 = v44 - v46;
          LODWORD(v48) = (v44 >> 31) + 0x7FFFFFFF;
          if (v19)
            v48 = v48;
          else
            v48 = v47;
          v28 = v24 | (v48 << 32);
        }
      }
      v30 = a4[1];
      v31 = v28 + *a4;
      if (__OFADD__((_DWORD)v28, *a4))
        v31 = (v28 >> 31) + 0x7FFFFFFF;
      v32 = HIDWORD(v28);
      v19 = __OFADD__((_DWORD)v32, v30);
      v33 = v32 + v30;
      v34 = (v32 >> 31) + 0x7FFFFFFF;
      if (!v19)
        v34 = v33;
      v35 = *(_QWORD *)(a3 + 80);
      v36 = v31 / 64;
      v37 = v31 - (v33 & 0xFFFFFFC0);
      v38 = v34 / 64;
      v39 = v34 - (v33 & 0xFFFFFFC0);
      v19 = __OFADD__(v37, v16);
      v40 = v37 + v16;
      if (v19)
        v40 = (v37 >> 31) + 0x7FFFFFFF;
      v19 = __OFADD__(v39, v15);
      v41 = v39 + v15;
      if (v19)
        v41 = (v39 >> 31) + 0x7FFFFFFF;
      v42 = v39 + 32;
      v43 = v37 + 32;
      v55[0] = (float)(v36 + (v43 >> 6));
      v55[1] = (float)(v38 + (v42 >> 6));
      v55[2] = (float)(v40 / 64 - (v43 >> 6) + ((int)(v40 - (v38 & 0xFFFFFFC0) + 32) >> 6));
      v55[3] = (float)(v41 / 64 - (v42 >> 6) + ((int)(v41 - (v43 & 0xFFFFFFC0) + 32) >> 6));
      result = (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)v35 + 472))(v35, v55);
    }
  }
  return result;
}

uint64_t *WebCore::RenderBlockFlow::removeFloatingObjects(uint64_t *this)
{
  uint64_t *v1;
  void *v2;

  if (this[27])
  {
    v1 = this;
    WebCore::RenderBlockFlow::markSiblingsWithFloatsForLayout((WebCore::RenderBlockFlow *)this, 0);
    return WebCore::FloatingObjects::clear((uint64_t *)v1[27], v2);
  }
  return this;
}

uint64_t WebCore::RenderBlockFlow::computeLogicalLocationForFloat(WebCore::RenderBlockFlow *this, WebCore::FloatingObject *a2, WebCore::LayoutUnit *a3)
{
  WebCore::RenderStyle *v6;
  unsigned int v7;
  unsigned int v8;
  const WebCore::RenderObject *v9;
  unsigned int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  float v50;
  double v51;
  unsigned int v52;
  int v53;
  int v54;
  float v55;
  double v56;
  unsigned int v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  WebCore::FloatingObject *v65;
  WebCore::RenderStyle *v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  int v100;
  float v101;
  double v102;
  unsigned int v103;
  int v104;
  int v105;
  float v106;
  double v107;
  unsigned int v108;
  int *v109;
  int v110;
  int v111;
  int *v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t result;
  WTF::StringImpl *v117;
  unsigned int v118;
  char *LineStyle;
  void *v120;
  WTF *v121;
  WTF::StringImpl *v122;
  char *v123;
  void *v124;
  float v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  char *v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  unint64_t v160;
  _QWORD *v161;
  unsigned int v162;
  int v163;
  char v164;
  _DWORD *v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  int v174;
  int v175;
  unsigned int v176;
  char *v177;
  unsigned int v178;
  int v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  WebCore::RenderStyle *v188;
  WebCore::FloatingObject *v189;
  int v190;
  int v191;

  if (*(_QWORD *)a2)
    v6 = *(WebCore::RenderStyle **)(*(_QWORD *)a2 + 8);
  else
    v6 = 0;
  v7 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)this, *(_DWORD *)a3);
  v8 = WebCore::RenderBlock::logicalRightOffsetForContent(this, *(_DWORD *)a3);
  v10 = v8;
  v11 = *((_DWORD *)this + 5);
  v12 = (char *)a2 + 16;
  if ((v11 & 0x1000) != 0)
    v12 = (char *)a2 + 20;
  v13 = *(_DWORD *)v12;
  v14 = v8 - v7;
  if (__OFSUB__(v8, v7))
    v14 = (v8 >> 31) + 0x7FFFFFFF;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if ((v11 & 0x10000000) != 0)
    v16 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 648))(this);
  else
    v16 = 0;
  v189 = a2;
  if ((*((_QWORD *)v6 + 12) & 0xF80000000000) == 0x100000000000
    && *(int *)(*(_QWORD *)(*((_QWORD *)v6 + 11) + 40) + 52) >= 1)
  {
    v17 = *((_QWORD *)this + 27);
    if (v17)
    {
      v161 = *(_QWORD **)(v17 + 8);
      if (v161)
      {
        v162 = 0;
        v163 = 0;
        v164 = 1;
        do
        {
          while (1)
          {
            v165 = (_DWORD *)*v161;
            if ((*(_BYTE *)(*v161 + 36) & 0x10) == 0)
              break;
            if (!*(_QWORD *)v165)
              break;
            v166 = *(_QWORD *)(*(_QWORD *)v165 + 8);
            if ((*(_QWORD *)(v166 + 96) & 0xF80000000000) != 0x100000000000
              || *(int *)(*(_QWORD *)(*(_QWORD *)(v166 + 88) + 40) + 52) < 1)
            {
              break;
            }
            v167 = v163 | (v162 << 8);
            if ((v164 & 1) != 0)
              v167 = 0;
            if ((*((_BYTE *)this + 21) & 0x10) != 0)
            {
              v168 = v165[2];
              v169 = v165[4];
            }
            else
            {
              v168 = v165[3];
              v169 = v165[5];
            }
            v27 = __OFADD__(v168, v169);
            v170 = v168 + v169;
            v171 = (v168 >> 31) + 0x7FFFFFFF;
            if (v27)
              v170 = v171;
            v164 = 0;
            if (v167 > v170)
              v170 = v167;
            v163 = v170;
            v162 = v170 >> 8;
            v161 = (_QWORD *)v161[2];
            if (!v161)
              goto LABEL_276;
          }
          v161 = (_QWORD *)v161[2];
        }
        while (v161);
        if ((v164 & 1) != 0)
          goto LABEL_16;
LABEL_276:
        v172 = v163 | (v162 << 8);
        v173 = *(_DWORD *)a3;
        v27 = __OFSUB__(v172, *(_DWORD *)a3);
        v174 = v172 - *(_DWORD *)a3;
        if (v27)
        {
          v174 = 0x7FFFFFFF;
          goto LABEL_278;
        }
        if (v174 >= 1)
        {
LABEL_278:
          v175 = v173 + v174;
          if (__OFADD__(v173, v174))
            v175 = (v173 >> 31) + 0x7FFFFFFF;
          *(_DWORD *)a3 = v175;
          v176 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
          if (v176 < 4)
            v177 = (char *)this + 160;
          else
            v177 = (char *)this + 164;
          v178 = *(_DWORD *)v177;
          v27 = __OFADD__(v178, v174);
          v179 = v178 + v174;
          if (v27)
            v179 = (v178 >> 31) + 0x7FFFFFFF;
          if (v176 < 4)
            v180 = (char *)this + 160;
          else
            v180 = (char *)this + 164;
          *(_DWORD *)v180 = v179;
        }
      }
    }
LABEL_16:
    v187 = 1;
    goto LABEL_18;
  }
  v187 = 0;
LABEL_18:
  v188 = v6;
  if (WebCore::RenderStyle::usedFloat(v6, v9) == 2)
  {
    v190 = 64;
    v191 = 64;
    v18 = v7;
    v19 = *((_QWORD *)this + 27);
    if (v19 && *(_DWORD *)(v19 + 32))
      v18 = WebCore::FloatingObjects::logicalLeftOffsetForPositioningFloat((_QWORD *)v19, v7, *(_DWORD *)a3, &v191);
    v21 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)this, (void *)v18);
    while (1)
    {
      v22 = *((_QWORD *)this + 27);
      v23 = v10;
      if (v22)
      {
        v23 = v10;
        if (*(_DWORD *)(v22 + 36))
          v23 = WebCore::FloatingObjects::logicalRightOffsetForPositioningFloat((_QWORD *)v22, v10, *(_DWORD *)a3, &v190);
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 0x20) != 0)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v32 = *(unsigned int *)(v31 + 508);
        if ((_DWORD)v32)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v31 + 496) + 8 * v32 - 8);
          if (v33)
          {
            v183 = v33;
            v34 = *(_QWORD *)(v33 + 24);
            if (v34)
            {
              v181 = *(_QWORD *)(v34 + 8);
              if (v181)
              {
                if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v181 + 124)) & 0xE000) == 0)
                {
                  v35 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v181 + 112) + 32), v20);
                  v36 = *(float *)(v35 + 80);
                  if (v36 != 0.0)
                  {
                    v37 = *(_QWORD *)(v183 + 84);
                    if ((*(_BYTE *)(v181 + 21) & 0x10) != 0)
                    {
                      v37 >>= 32;
                      LODWORD(v38) = *(_DWORD *)(v183 + 60);
                    }
                    else
                    {
                      v38 = *(_QWORD *)(v183 + 56);
                    }
                    v27 = __OFADD__(v23, (_DWORD)v38);
                    v47 = v23 + v38;
                    if (v27)
                      v47 = (v23 >> 31) + 0x7FFFFFFF;
                    v27 = __OFSUB__(v47, (_DWORD)v37);
                    v48 = v47 - v37;
                    v49 = (v47 >> 31) + 0x7FFFFFFF;
                    if (v27)
                      v48 = v49;
                    v50 = fmodf((float)v48 * 0.015625, *(float *)(v35 + 80));
                    v51 = (float)((float)((float)(int)v23 * 0.015625) - ceilf(fmodf(v50, v36))) * 64.0;
                    if (v51 >= 2147483650.0)
                    {
                      v23 = 0x7FFFFFFF;
                    }
                    else if (v51 <= -2147483650.0)
                    {
                      v23 = 0x80000000;
                    }
                    else
                    {
                      v23 = (int)v51;
                    }
                  }
                }
              }
            }
          }
        }
      }
      v24 = v23 - v21;
      if (__OFSUB__(v23, v21))
        v24 = (v23 >> 31) + 0x7FFFFFFF;
      if (v24 >= v15)
        break;
      v25 = v190;
      v26 = *(_DWORD *)a3;
      if (v190 >= v191)
        v25 = v191;
      v27 = __OFADD__(v26, v25);
      v28 = v26 + v25;
      if (v27)
        v29 = (v26 >> 31) + 0x7FFFFFFF;
      else
        v29 = v28;
      *(_DWORD *)a3 = v29;
      v30 = *((_QWORD *)this + 27);
      v21 = v7;
      if (v30)
      {
        v21 = v7;
        if (*(_DWORD *)(v30 + 32))
          v21 = WebCore::FloatingObjects::logicalLeftOffsetForPositioningFloat((_QWORD *)v30, v7, v29, &v191);
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 0x20) != 0)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v40 = *(unsigned int *)(v39 + 508);
        if ((_DWORD)v40)
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v39 + 496) + 8 * v40 - 8);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 24);
            if (v42)
            {
              v184 = *(_QWORD *)(v42 + 8);
              if (v184)
              {
                if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v184 + 124)) & 0xE000) == 0)
                {
                  v43 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v184 + 112) + 32), v20);
                  v44 = *(float *)(v43 + 80);
                  if (v44 != 0.0)
                  {
                    v45 = *(_QWORD *)(v41 + 84);
                    if ((*(_BYTE *)(v184 + 21) & 0x10) != 0)
                    {
                      v45 >>= 32;
                      LODWORD(v46) = *(_DWORD *)(v41 + 60);
                    }
                    else
                    {
                      v46 = *(_QWORD *)(v41 + 56);
                    }
                    v27 = __OFADD__(v21, (_DWORD)v46);
                    v52 = v21 + v46;
                    if (v27)
                      v52 = (v21 >> 31) + 0x7FFFFFFF;
                    v27 = __OFSUB__(v52, (_DWORD)v45);
                    v53 = v52 - v45;
                    v54 = (v52 >> 31) + 0x7FFFFFFF;
                    if (v27)
                      v53 = v54;
                    v55 = fmodf((float)v53 * 0.015625, *(float *)(v43 + 80));
                    v56 = (float)((float)((float)v21 * 0.015625) + fmodf(v44 - v55, v44)) * 64.0;
                    if (v56 >= 2147483650.0)
                    {
                      v21 = 0x7FFFFFFF;
                    }
                    else if (v56 <= -2147483650.0)
                    {
                      v21 = 0x80000000;
                    }
                    else
                    {
                      v21 = (int)v56;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v16)
      {
        v10 = WebCore::RenderBlock::logicalRightOffsetForContent(this, *(_DWORD *)a3);
        v57 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)this, *(_DWORD *)a3);
        v7 = v57;
        v58 = (int *)((char *)v189 + 16);
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
          v58 = (int *)((char *)v189 + 20);
        v59 = *v58;
        v60 = v10 - v57;
        if (__OFSUB__(v10, v57))
          v60 = (v10 >> 31) + 0x7FFFFFFF;
        if (v60 >= v59)
          v15 = v59;
        else
          v15 = v60;
      }
    }
    v61 = *(_QWORD *)this;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      v62 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v61 + 1000))(this);
      v63 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 928))(this);
    }
    else
    {
      v62 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(v61 + 1016))(this);
      v63 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 944))(this);
    }
    v64 = v62 + v63;
    if (__OFADD__(v62, v63))
      v64 = (v62 >> 31) + 0x7FFFFFFF;
    v66 = v188;
    v65 = v189;
    v67 = v187;
    v27 = __OFSUB__(v7, v64);
    v68 = v7 - v64;
    if (v27)
      v68 = (v7 >> 31) + 0x7FFFFFFF;
    if (v68 <= v21)
      v69 = v21;
    else
      v69 = v68;
  }
  else
  {
    v190 = 64;
    v191 = 64;
    v70 = v10;
    v71 = *((_QWORD *)this + 27);
    if (v71 && *(_DWORD *)(v71 + 36))
      v70 = WebCore::FloatingObjects::logicalRightOffsetForPositioningFloat((_QWORD *)v71, v10, *(_DWORD *)a3, &v190);
    v73 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)this, (void *)v70);
    while (1)
    {
      v74 = *((_QWORD *)this + 27);
      v75 = v7;
      if (v74)
      {
        v75 = v7;
        if (*(_DWORD *)(v74 + 32))
          v75 = WebCore::FloatingObjects::logicalLeftOffsetForPositioningFloat((_QWORD *)v74, v7, *(_DWORD *)a3, &v191);
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 0x20) != 0)
      {
        v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v83 = *(unsigned int *)(v82 + 508);
        if ((_DWORD)v83)
        {
          v84 = *(_QWORD *)(*(_QWORD *)(v82 + 496) + 8 * v83 - 8);
          if (v84)
          {
            v185 = v84;
            v85 = *(_QWORD *)(v84 + 24);
            if (v85)
            {
              v182 = *(_QWORD *)(v85 + 8);
              if (v182)
              {
                if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v182 + 124)) & 0xE000) == 0)
                {
                  v86 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v182 + 112) + 32), v72);
                  v87 = *(float *)(v86 + 80);
                  if (v87 != 0.0)
                  {
                    v88 = *(_QWORD *)(v185 + 84);
                    if ((*(_BYTE *)(v182 + 21) & 0x10) != 0)
                    {
                      v88 >>= 32;
                      LODWORD(v89) = *(_DWORD *)(v185 + 60);
                    }
                    else
                    {
                      v89 = *(_QWORD *)(v185 + 56);
                    }
                    v27 = __OFADD__(v75, (_DWORD)v89);
                    v98 = v75 + v89;
                    if (v27)
                      v98 = (v75 >> 31) + 0x7FFFFFFF;
                    v27 = __OFSUB__(v98, (_DWORD)v88);
                    v99 = v98 - v88;
                    v100 = (v98 >> 31) + 0x7FFFFFFF;
                    if (v27)
                      v99 = v100;
                    v101 = fmodf((float)v99 * 0.015625, *(float *)(v86 + 80));
                    v102 = (float)((float)((float)v75 * 0.015625) + fmodf(v87 - v101, v87)) * 64.0;
                    if (v102 >= 2147483650.0)
                    {
                      v75 = 0x7FFFFFFF;
                    }
                    else if (v102 <= -2147483650.0)
                    {
                      v75 = 0x80000000;
                    }
                    else
                    {
                      v75 = (int)v102;
                    }
                  }
                }
              }
            }
          }
        }
      }
      v76 = v73 - v75;
      if (__OFSUB__(v73, v75))
        v76 = (v73 >> 31) + 0x7FFFFFFF;
      if (v76 >= v15)
        break;
      v77 = v190;
      v78 = *(_DWORD *)a3;
      if (v190 >= v191)
        v77 = v191;
      v27 = __OFADD__(v78, v77);
      v79 = v78 + v77;
      if (v27)
        v80 = (v78 >> 31) + 0x7FFFFFFF;
      else
        v80 = v79;
      *(_DWORD *)a3 = v80;
      v81 = *((_QWORD *)this + 27);
      v73 = v10;
      if (v81)
      {
        v73 = v10;
        if (*(_DWORD *)(v81 + 36))
          v73 = WebCore::FloatingObjects::logicalRightOffsetForPositioningFloat((_QWORD *)v81, v10, v80, &v190);
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 13) + 234) & 0x20) != 0)
      {
        v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v91 = *(unsigned int *)(v90 + 508);
        if ((_DWORD)v91)
        {
          v92 = *(_QWORD *)(*(_QWORD *)(v90 + 496) + 8 * v91 - 8);
          if (v92)
          {
            v93 = *(_QWORD *)(v92 + 24);
            if (v93)
            {
              v186 = *(_QWORD *)(v93 + 8);
              if (v186)
              {
                if (((*((_DWORD *)this + 31) ^ *(_DWORD *)(v186 + 124)) & 0xE000) == 0)
                {
                  v94 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v186 + 112) + 32), v72);
                  v95 = *(float *)(v94 + 80);
                  if (v95 != 0.0)
                  {
                    v96 = *(_QWORD *)(v92 + 84);
                    if ((*(_BYTE *)(v186 + 21) & 0x10) != 0)
                    {
                      v96 >>= 32;
                      LODWORD(v97) = *(_DWORD *)(v92 + 60);
                    }
                    else
                    {
                      v97 = *(_QWORD *)(v92 + 56);
                    }
                    v27 = __OFADD__(v73, (_DWORD)v97);
                    v103 = v73 + v97;
                    if (v27)
                      v103 = (v73 >> 31) + 0x7FFFFFFF;
                    v27 = __OFSUB__(v103, (_DWORD)v96);
                    v104 = v103 - v96;
                    v105 = (v103 >> 31) + 0x7FFFFFFF;
                    if (v27)
                      v104 = v105;
                    v106 = fmodf((float)v104 * 0.015625, *(float *)(v94 + 80));
                    v107 = (float)((float)((float)(int)v73 * 0.015625) - ceilf(fmodf(v106, v95))) * 64.0;
                    if (v107 >= 2147483650.0)
                    {
                      v73 = 0x7FFFFFFF;
                    }
                    else if (v107 <= -2147483650.0)
                    {
                      v73 = 0x80000000;
                    }
                    else
                    {
                      v73 = (int)v107;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v16)
      {
        v10 = WebCore::RenderBlock::logicalRightOffsetForContent(this, *(_DWORD *)a3);
        v108 = WebCore::RenderBlock::logicalLeftOffsetForContent((uint64_t *)this, *(_DWORD *)a3);
        v7 = v108;
        v109 = (int *)((char *)v189 + 16);
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
          v109 = (int *)((char *)v189 + 20);
        v110 = *v109;
        v111 = v10 - v108;
        if (__OFSUB__(v10, v108))
          v111 = (v10 >> 31) + 0x7FFFFFFF;
        if (v111 >= v110)
          v15 = v110;
        else
          v15 = v111;
      }
    }
    v65 = v189;
    v112 = (int *)((char *)v189 + 16);
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
      v112 = (int *)((char *)v189 + 20);
    v113 = *v112;
    v69 = v73 - v113;
    if (__OFSUB__(v73, v113))
      v69 = (v73 >> 31) + 0x7FFFFFFF;
    v66 = v188;
    v67 = v187;
  }
  v114 = 1136;
  if ((*((_DWORD *)this + 30) & 0x4000000) == 0)
    v114 = 1128;
  v115 = (*(uint64_t (**)(WebCore::RenderStyle *, char *))(*(_QWORD *)v66 + v114))(v66, (char *)this + 80);
  result = (*(uint64_t (**)(WebCore::RenderStyle *, char *))(*(_QWORD *)v66 + 1112))(v66, (char *)this + 80);
  v118 = result;
  if (v67)
  {
    LineStyle = WebCore::RenderElement::firstLineStyle(this, v117);
    v121 = WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)LineStyle, v120);
    v123 = WebCore::RenderElement::firstLineStyle(this, v122);
    v125 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v123, v124) * 64.0);
    if (v125 >= 2147500000.0)
    {
      v126 = 0x7FFFFFFF;
    }
    else if (v125 <= -2147500000.0)
    {
      v126 = 0x80000000;
    }
    else
    {
      v126 = (int)v125;
    }
    v127 = (*(uint64_t (**)(WebCore::RenderStyle *))(*(_QWORD *)v66 + 1048))(v66);
    result = (*(uint64_t (**)(WebCore::RenderStyle *))(*(_QWORD *)v66 + 960))(v66);
    v128 = v127 + result;
    if (__OFADD__(v127, (_DWORD)result))
      v128 = (v127 >> 31) + 0x7FFFFFFF;
    v129 = ((unsigned __int16)*((_DWORD *)v66 + 31) >> 13) - 1;
    if (v129 > 4)
      v130 = 0;
    else
      v130 = qword_1969FC6C8[v129];
    v131 = *((_DWORD *)v66 + v130 + 42);
    v27 = __OFADD__(v128, v131);
    v132 = v128 + v131;
    if (v27)
      v132 = (v128 >> 31) + 0x7FFFFFFF;
    v133 = *((_DWORD *)v121 + 11);
    v134 = *((_DWORD *)v121 + 12) + v133;
    if (v134 >= -33554432)
      v135 = v134 << 6;
    else
      v135 = 0x80000000;
    if (v134 > 0x1FFFFFF)
      v135 = 0x7FFFFFFF;
    v27 = __OFSUB__(v126, v135);
    v136 = v126 - v135;
    if (v27)
      v136 = (v126 >> 31) + 0x7FFFFFFF;
    v137 = v136 + (v136 < 0);
    if (v133 >= -33554432)
      v138 = v133 << 6;
    else
      v138 = 0x80000000;
    if (v133 > 0x1FFFFFF)
      v138 = 0x7FFFFFFF;
    v139 = v138 + (v137 >> 1);
    if (__OFADD__(v138, v137 >> 1))
      v139 = (v138 >> 31) + 0x7FFFFFFF;
    v140 = *((_DWORD *)v121 + 15);
    if (v140 >= -33554432)
      v141 = v140 << 6;
    else
      v141 = 0x80000000;
    if (v140 <= 0x1FFFFFF)
      v142 = v141;
    else
      v142 = 0x7FFFFFFF;
    v27 = __OFSUB__(v139, v142);
    v143 = v139 - v142;
    if (v27)
      v143 = (v139 >> 31) + 0x7FFFFFFF;
    v27 = __OFSUB__(v143, v132);
    v144 = v143 - v132;
    if (v27)
      v144 = (v143 >> 31) + 0x7FFFFFFF;
    v27 = __OFADD__(*(_DWORD *)a3, v144);
    v145 = *(_DWORD *)a3 + v144;
    if (v27)
      v145 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a3 = v145;
    v146 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v66 + 11) + 40) + 52);
    v147 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v66 + 11) + 40) + 56);
    v148 = v147 - v146;
    if (v147 - v146 < 0)
    {
      v155 = -64 * v148;
      if (-v148 >> 25)
        v155 = 0x7FFFFFFF;
      v156 = v155 * (uint64_t)v126 / 64;
      if (HIDWORD(v156) != (int)v156 >> 31)
        LODWORD(v156) = ((v155 ^ v126) >> 31) + 0x7FFFFFFF;
      if (__OFADD__(v118, (_DWORD)v156))
        v118 = (v118 >> 31) + 0x7FFFFFFF;
      else
        v118 += v156;
    }
    else if (v147 != v146)
    {
      v149 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
      if (v149 < 4)
        v150 = (char *)this + 160;
      else
        v150 = (char *)this + 164;
      v151 = *(_DWORD *)v150;
      v152 = v148 << 6;
      if (v148 >> 25)
        v152 = 0x7FFFFFFF;
      v153 = v152 * (uint64_t)v126 / 64;
      if (HIDWORD(v153) != (int)v153 >> 31)
        LODWORD(v153) = ((v152 ^ v126) >> 31) + 0x7FFFFFFF;
      v154 = v151 + v153;
      if (__OFADD__(v151, (_DWORD)v153))
        v154 = (v151 >> 31) + 0x7FFFFFFF;
      if (v149 < 4)
        *((_DWORD *)this + 40) = v154;
      else
        *((_DWORD *)this + 41) = v154;
    }
  }
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    *((_DWORD *)v65 + 3) = v69;
  else
    *((_DWORD *)v65 + 2) = v69;
  v157 = v69 + v115;
  if (__OFADD__(v69, v115))
    v157 = (v69 >> 31) + 0x7FFFFFFF;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    *((_DWORD *)v66 + 39) = v157;
  else
    *((_DWORD *)v66 + 38) = v157;
  v158 = *(_DWORD *)a3;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    *((_DWORD *)v65 + 2) = v158;
  else
    *((_DWORD *)v65 + 3) = v158;
  v159 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a3, v118))
    v159 = *(_DWORD *)a3 + v118;
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
    *((_DWORD *)v66 + 38) = v159;
  else
    *((_DWORD *)v66 + 39) = v159;
  v160 = v118 | ((unint64_t)v115 << 32);
  if ((*((_DWORD *)this + 5) & 0x1000) == 0)
    v160 = v115 | ((unint64_t)v118 << 32);
  *(_QWORD *)((char *)v65 + 28) = v160;
  return result;
}

uint64_t WebCore::RenderBlock::logicalLeftOffsetForContent(uint64_t *a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 648))(a1);
    if (v7)
    {
      v9 = v7;
      if ((*(_BYTE *)(v7 + 328) & 1) == 0
        && (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v7 + 248), v8) & 1) == 0)
      {
        v10 = (*(uint64_t (**)(uint64_t *))(*a1 + 1288))(a1);
        if (__OFADD__(v10, a2))
          v11 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v11 = v10 + a2;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v9 + 2000))(v9, a1, v11, 1);
      }
    }
  }
  v3 = *a1;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v4 = (*(uint64_t (**)(uint64_t *))(v3 + 1000))(a1);
    v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 928))(a1);
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t *))(v3 + 1016))(a1);
    v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 944))(a1);
  }
  if (__OFADD__(v4, v5))
    return (v4 >> 31) + 0x7FFFFFFF;
  else
    return v4 + v5;
}

uint64_t WebCore::RenderBlock::logicalRightOffsetForContent(WebCore::RenderBox *a1, int a2)
{
  uint64_t v2;
  WebCore::RenderBox *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v4 = a1;
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 648))();
    if (!v5
      || (v7 = v5, (*(_BYTE *)(v5 + 328) & 1) != 0)
      || (WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((uint64_t *)(v5 + 248), v6) & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)v4 + 1288))(v4);
      if (__OFADD__(v8, a2))
        v9 = (v8 >> 31) + 0x7FFFFFFF;
      else
        v9 = v8 + a2;
      v2 = (*(uint64_t (**)(uint64_t, WebCore::RenderBox *, uint64_t, uint64_t))(*(_QWORD *)v7 + 2000))(v7, v4, v9, 1);
    }
    a1 = v4;
  }
  else
  {
    v2 = 0;
  }
  return WebCore::RenderBlock::logicalRightOffsetForContent(a1, v2);
}

uint64_t WebCore::RenderBox::shapeOutsideInfo(WebCore::RenderBox *this, const WebCore::RenderBox *a2)
{
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x800) == 0 || !WebCore::ShapeOutsideInfo::isEnabledFor(this, a2))
    return 0;
  {
    WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
    *(_QWORD *)&dword_1EE2F9340 = 0;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(&WebCore::shapeOutsideInfoMap(void)::staticInfoMap, (uint64_t)this);
}

uint64_t WebCore::RenderBlockFlow::logicalRightFloatOffsetForLine(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 216);
  if (v4 && *(_DWORD *)(v4 + 36))
    return WebCore::FloatingObjects::logicalRightOffset((_QWORD *)v4, a3, a2, a4);
  else
    return a3;
}

uint64_t WebCore::RenderBox::enclosingFloatPaintingLayer(WebCore::RenderBox *this)
{
  uint64_t v1;

  while ((*((_BYTE *)this + 45) & 4) == 0)
  {
    v1 = *((_QWORD *)this + 4);
    if (!v1)
      return v1;
    this = *(WebCore::RenderBox **)(v1 + 8);
    if (!this)
      return 0;
  }
LABEL_9:
  v1 = *((_QWORD *)this + 18);
  if (!v1 || (*(_BYTE *)(v1 + 25) & 8) == 0)
  {
    while (1)
    {
      v1 = *((_QWORD *)this + 4);
      if (!v1)
        break;
      this = *(WebCore::RenderBox **)(v1 + 8);
      if (!this)
        return 0;
      if ((*((_BYTE *)this + 45) & 4) != 0)
        goto LABEL_9;
    }
  }
  return v1;
}

uint64_t WebCore::RenderBlock::availableLogicalWidthForContent(uint64_t *a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;

  v3 = WebCore::RenderBlock::fragmentAtBlockOffset(a1, a2);
  v4 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a1, v3);
  v5 = *a1;
  if (((*((_DWORD *)a1 + 31) >> 13) & 6u) - 2 < 4)
  {
    v6 = (*(uint64_t (**)(uint64_t *))(v5 + 1000))(a1);
    v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 928))(a1);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t *))(v5 + 1016))(a1);
    v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 944))(a1);
  }
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  v9 = __OFSUB__(v4, v8);
  v10 = v4 - v8;
  if (v9)
    v10 = (v4 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

uint64_t WebCore::RenderBlockFlow::hitTestFloats(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::FloatingObject **v19;
  WebCore::FloatingObject **v20;
  WebCore::FloatingObject ***v21;
  WebCore::FloatingObject ***v22;
  WebCore::FloatingObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;

  if (!*(_QWORD *)(a1 + 216))
    return 0;
  v10 = a5[1];
  v31 = *a5;
  if (*(_BYTE *)(a1 + 46) == 49)
  {
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 64) + 832))(*(_QWORD *)(a1 + 248) + 64, 0, 1);
    v12 = HIDWORD(v11) << 6;
    if ((int)v11 >= -33554432)
      v13 = (_DWORD)v11 << 6;
    else
      v13 = 0x80000000;
    if ((int)v11 > 0x1FFFFFF)
      v13 = 0x7FFFFFFF;
    if (SHIDWORD(v11) < -33554432)
      v12 = 0x80000000;
    if (SHIDWORD(v11) <= 0x1FFFFFF)
      v14 = v12;
    else
      v14 = 0x7FFFFFFF;
    v15 = v31 + v13;
    if (__OFADD__(v31, v13))
      v15 = (v31 >> 31) + 0x7FFFFFFF;
    v31 = v15;
    v16 = __OFADD__(v10, v14);
    v17 = v10 + v14;
    if (v16)
      v10 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v10 = v17;
  }
  v18 = *(_QWORD *)(a1 + 216);
  v19 = *(WebCore::FloatingObject ***)(v18 + 8);
  if (!v19)
    return 0;
  v20 = 0;
  v21 = (WebCore::FloatingObject ***)(v18 + 16);
  while (1)
  {
    v22 = (WebCore::FloatingObject ***)(v20 + 1);
    if (!v20)
      v22 = v21;
    v20 = *v22;
    v23 = **v22;
    v24 = *(_QWORD *)v23 ? *(_QWORD *)(*(_QWORD *)v23 + 8) : 0;
    if (WebCore::FloatingObject::shouldPaint(v23))
    {
      v25 = WebCore::FloatingObject::translationOffsetToAncestor(v23);
      LODWORD(v26) = v31 + v25;
      v26 = __OFADD__(v31, (_DWORD)v25) ? (v31 >> 31) + 0x7FFFFFFF : v26;
      LODWORD(v27) = v10 + HIDWORD(v25);
      v27 = __OFADD__(v10, HIDWORD(v25)) ? (v10 >> 31) + 0x7FFFFFFF : v27;
      v32 = v26 | (v27 << 32);
      v33 = WebCore::RenderBlockFlow::flipFloatForWritingModeForChild((WebCore::RenderBlockFlow *)a1, v23, (const WebCore::LayoutPoint *)&v32);
      if (WebCore::RenderObject::hitTest(v24, a2, a3, (uint64_t)a4, (uint64_t)&v33, 0))
        break;
    }
    result = 0;
    if (v20 == v19)
      return result;
  }
  v28 = a4[1];
  LODWORD(v29) = *a4 - v33;
  if (__OFSUB__(*a4, (_DWORD)v33))
    v29 = ((*a4 >> 31) + 0x7FFFFFFF);
  else
    v29 = v29;
  LODWORD(v30) = v28 - HIDWORD(v33);
  if (__OFSUB__(v28, HIDWORD(v33)))
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  else
    v30 = v30;
  v32 = v29 | (v30 << 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v32);
  return 1;
}

uint64_t WebCore::RenderBlockFlow::hitTestInlineChildren(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, _DWORD *a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 240);
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a1 + 232);
    if (!v7)
      return 0;
    return WebCore::LayoutIntegration::LineLayout::hitTest(v7, a2, a3, (uint64_t)a4, a5, a6, 0);
  }
  else
  {
    if (v6 != 2)
      return 0;
    v9 = *(_QWORD *)(a1 + 232);
    if (!v9)
      return 0;
    return WebCore::RenderLineBoxList::hitTest((_QWORD *)(v9 + 8), (WebCore::RenderObject *)a1, a2, a3, a4, a5, a6);
  }
}

uint64_t WebCore::RenderBlockFlow::lastLineBaseline(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  WebCore::RenderBlockFlow *v2;
  unint64_t LineBaseline;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  WebCore::RenderBlockFlow *v23;
  int v24;
  _OWORD v25[9];
  uint64_t v26;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_37;
  v2 = *(WebCore::RenderBlockFlow **)(v1 + 8);
  if (!v2)
  {
    LOBYTE(LineBaseline) = 0;
    v1 = 0;
    return v1 | v2 | LineBaseline;
  }
  if (((*((_DWORD *)this + 31) ^ *((_DWORD *)v2 + 31)) & 0xE000) != 0
    && (*((_BYTE *)v2 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
    && ((*((char *)v2 + 45) & 0x80000000) == 0 || (*((_BYTE *)this + 21) & 4) != 0))
  {
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v5 = (*(_BYTE *)(v4 + 642) & 3) - 3;
  v6 = *(_BYTE *)(v4 + 462) & 1;
  v7 = *(_DWORD *)(v4 + 636) & 0xC0000;
  v8 = *((_DWORD *)this + 5);
  v9 = v5 <= 0xFFFFFFFD && v6 == 0;
  if (!v9 || v7 != 0)
  {
    if ((v8 & 1) != 0)
      goto LABEL_57;
    if ((*((_BYTE *)this + 45) & 2) == 0)
      v2 = this;
    v21 = *((_QWORD *)v2 + 12);
    v22 = (v21 & 0x1Fu) > 0x19 || ((1 << (v21 & 0x1F)) & 0x3528029) == 0;
    if (!v22 && ((v8 & 2) != 0 || (v21 & 0x1F) != 0))
    {
LABEL_57:
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
        goto LABEL_6;
      }
    }
  }
  if ((v8 & 0x40000) == 0)
  {
    LineBaseline = WebCore::RenderBlock::lastLineBaseline(this);
    LODWORD(v2) = LineBaseline & 0xFFFFFF00;
    v1 = LineBaseline & 0x100000000;
    return v1 | v2 | LineBaseline;
  }
  v12 = *((_DWORD *)this + 60);
  if (v12 != 1)
  {
    if (v12 != 2)
      goto LABEL_6;
    v1 = *((_QWORD *)this + 29);
    if (v1)
    {
      v23 = this;
      v20 = *(_QWORD **)(v1 + 8);
      if (!v20)
        goto LABEL_6;
      if (!(*(unsigned int (**)(_QWORD *))(*v20 + 88))(v20))
      {
LABEL_60:
        __break(0xC471u);
        JUMPOUT(0x1963877C4);
      }
      v24 = 1;
      while (1)
      {
        v20 = (_QWORD *)v20[12];
        if (!v20)
          break;
        ++v24;
        if (((*(uint64_t (**)(_QWORD *))(*v20 + 88))(v20) & 1) == 0)
          goto LABEL_60;
      }
      this = v23;
      if (!v24)
        goto LABEL_6;
      goto LABEL_26;
    }
LABEL_37:
    LOBYTE(LineBaseline) = 0;
    goto LABEL_8;
  }
  v1 = *((_QWORD *)this + 29);
  if (!v1)
    goto LABEL_37;
  v1 = *(_QWORD *)(v1 + 80);
  if (!v1)
    goto LABEL_37;
  if (*(_DWORD *)(v1 + 60) < 2u || !*(_DWORD *)(v1 + 44))
    goto LABEL_6;
LABEL_26:
  if (*((_DWORD *)this + 60) != 1)
  {
LABEL_6:
    LOBYTE(LineBaseline) = 0;
LABEL_7:
    v1 = 0;
LABEL_8:
    LODWORD(v2) = 0;
    return v1 | v2 | LineBaseline;
  }
  LineBaseline = *((_QWORD *)this + 29);
  if (!LineBaseline)
    goto LABEL_7;
  v13 = *(_QWORD *)(LineBaseline + 80);
  if (v13)
  {
    v14 = *(_DWORD *)(v13 + 44);
    if (v14)
    {
      v15 = *(_QWORD *)(v13 + 32) + 152 * v14;
      v16 = *(_OWORD *)(v15 - 40);
      v25[6] = *(_OWORD *)(v15 - 56);
      v25[7] = v16;
      v25[8] = *(_OWORD *)(v15 - 24);
      v26 = *(_QWORD *)(v15 - 8);
      v17 = *(_OWORD *)(v15 - 104);
      v25[2] = *(_OWORD *)(v15 - 120);
      v25[3] = v17;
      v18 = *(_OWORD *)(v15 - 72);
      v25[4] = *(_OWORD *)(v15 - 88);
      v25[5] = v18;
      v19 = *(_OWORD *)(v15 - 136);
      v25[0] = *(_OWORD *)(v15 - 152);
      v25[1] = v19;
      v14 = WebCore::LayoutIntegration::LineLayout::physicalBaselineForLine(LineBaseline, (float *)v25);
    }
  }
  else
  {
    v14 = 0;
  }
  LOBYTE(LineBaseline) = v14 & 0xC0;
  LODWORD(v2) = v14 & 0xFFFFFF00;
  v1 = 0x100000000;
  return v1 | v2 | LineBaseline;
}

uint64_t WebCore::RenderBlockFlow::lastRootBox(WebCore::RenderBlockFlow *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (*((_DWORD *)this + 60) != 2)
    return 0;
  v3 = *((_QWORD *)this + 29);
  if (!v3)
    return 0;
  v1 = *(_QWORD *)(v3 + 16);
  if (!v1 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1) & 1) != 0)
    return v1;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderBlockFlow::adjustEnclosingTopForPrecedingBlock(WebCore::RenderBlock *a1, uint64_t a2)
{
  WebCore::RenderBlock *v3;
  const WebCore::RenderBlockFlow *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const WebCore::InlineIterator::LineBox *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  int *v39;
  _DWORD *v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  unsigned int v47;
  char v48;
  char *v49;

  if ((*((_DWORD *)a1 + 5) & 0xC000000) == 0x4000000)
  {
    v3 = a1;
    if ((WebCore::RenderBlock::isSelectionRoot(a1) & 1) == 0)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        v8 = *((unsigned int *)v3 + 10);
        if (v8 | ((unint64_t)*((unsigned __int8 *)v3 + 44) << 32)
          && (v9 = *(_QWORD *)((v8 | ((unint64_t)*((unsigned __int8 *)v3 + 44) << 32)) + 8)) != 0)
        {
          while ((*(_BYTE *)(v9 + 45) & 0x40) == 0
               || WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v9))
          {
            v10 = *(unsigned int *)(v9 + 40);
            if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)))
              goto LABEL_12;
            v11 = 0;
            v9 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v9 + 44) << 32)) + 8);
            if (!v9)
              goto LABEL_13;
          }
          v11 = v9;
        }
        else
        {
LABEL_12:
          v11 = 0;
        }
LABEL_13:
        if ((*((_BYTE *)v3 + 45) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196387C44);
        }
        v12 = (int *)((char *)v3 + 156);
        if (((*((_DWORD *)v3 + 31) >> 13) & 6u) - 2 >= 4)
          v13 = (_DWORD *)((char *)v3 + 152);
        else
          v13 = (_DWORD *)((char *)v3 + 156);
        if (((*((_DWORD *)v3 + 31) >> 13) & 6u) - 2 < 4)
          v12 = (int *)((char *)v3 + 152);
        v14 = *v12;
        if (__OFSUB__(v7, *v13))
          v7 = (v7 >> 31) + 0x7FFFFFFF;
        else
          v7 -= *v13;
        v15 = __OFSUB__(v6, v14);
        v16 = v6 - v14;
        v6 = v15 ? (v6 >> 31) + 0x7FFFFFFF : v16;
        v17 = *((_QWORD *)v3 + 4);
        if (!v17)
          break;
        if (v11)
          goto LABEL_33;
        v3 = *(WebCore::RenderBlock **)(v17 + 8);
        if (!v3 || (*((_BYTE *)v3 + 45) & 0x40) == 0 || (WebCore::RenderBlock::isSelectionRoot(v3) & 1) != 0)
          return a2;
      }
      if (!v11)
        return a2;
LABEL_33:
      if ((*(_BYTE *)(v11 + 45) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x196387C64);
      }
      v18 = (int *)(v11 + 156);
      if (((*(_DWORD *)(v11 + 124) >> 13) & 6u) - 2 >= 4)
        v19 = (int *)(v11 + 152);
      else
        v19 = (int *)(v11 + 156);
      if (((*(_DWORD *)(v11 + 124) >> 13) & 6u) - 2 < 4)
        v18 = (int *)(v11 + 152);
      v20 = *v19;
      v21 = *v18;
      v22 = v7 + v20;
      if (__OFADD__(v7, v20))
        v22 = (v7 >> 31) + 0x7FFFFFFF;
      v15 = __OFADD__(v6, v21);
      v23 = v6 + v21;
      if (v15)
        v24 = (v6 >> 31) + 0x7FFFFFFF;
      else
        v24 = v23;
      v25 = *(unsigned int *)(v11 + 71);
      if (v25 | ((unint64_t)*(unsigned __int8 *)(v11 + 75) << 32))
      {
        v26 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v11 + 75) << 32)) + 8);
        if (v26)
        {
          while ((*(_BYTE *)(v26 + 45) & 0x40) != 0)
          {
            v11 = v26;
            v38 = ((*(_DWORD *)(v26 + 124) >> 13) & 6u) - 2 >= 4;
            v39 = (int *)(v26 + 156);
            if (v38)
              v40 = (_DWORD *)(v11 + 152);
            else
              v40 = (_DWORD *)(v11 + 156);
            if (!v38)
              v39 = (int *)(v11 + 152);
            v41 = *v39;
            v15 = __OFADD__(v22, *v40);
            v42 = v22 + *v40;
            v22 = (v22 >> 31) + 0x7FFFFFFF;
            if (!v15)
              v22 = v42;
            v15 = __OFADD__(v24, v41);
            v43 = v24 + v41;
            if (v15)
              v24 = (v24 >> 31) + 0x7FFFFFFF;
            else
              v24 = v43;
            v44 = *(unsigned int *)(v11 + 71);
            if (!(v44 | ((unint64_t)*(unsigned __int8 *)(v11 + 75) << 32)))
              break;
            v26 = *(_QWORD *)((v44 | ((unint64_t)*(unsigned __int8 *)(v11 + 75) << 32)) + 8);
            if (!v26)
              break;
          }
        }
      }
      if ((*(_BYTE *)(v11 + 52) & 7) == 1 && v24)
      {
        WebCore::InlineIterator::lastLineBoxFor((unsigned int *)v11, v4, (uint64_t)v46);
        if (v47 == -1)
          goto LABEL_86;
        v49 = &v48;
        if ((((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v47])(&v49, v46) & 1) != 0)
        {
          v34 = 1;
LABEL_77:
          v37 = a2;
          goto LABEL_78;
        }
        if (WebCore::LineSelection::selectionState((WebCore::LineSelection *)v46, v27, v28, v29, v30, v31, v32, v33, v45)- 1 > 1)
        {
          v34 = 0;
          goto LABEL_77;
        }
        if (v47 == -1)
        {
LABEL_86:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        else
        {
          v49 = &v48;
          v35 = (float)((float)((float)v24 * 0.015625)
                      + ((float (*)(char **, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix
                                                                 + v47))(&v49, v46))* 64.0;
          if (v35 >= 2147483650.0)
          {
            v36 = 0x7FFFFFFF;
            goto LABEL_58;
          }
          if (v35 > -2147483650.0)
          {
            v36 = (int)v35;
LABEL_58:
            if (v36 <= (int)a2)
              v37 = a2;
            else
              v37 = v36;
            v34 = 1;
LABEL_78:
            if (v47 != -1)
              ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v47])(&v49, v46);
            if (v34)
              return v37;
            else
              return a2;
          }
        }
        v36 = 0x80000000;
        goto LABEL_58;
      }
    }
  }
  return a2;
}

uint64_t WebCore::LineSelection::selectionState(WebCore::LineSelection *this, const WebCore::InlineIterator::LineBox *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  WebCore::InlineIterator *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD v24[2];
  int v25;
  char v26;
  char *v27;

  v9 = *((unsigned int *)this + 4);
  if ((_DWORD)v9 != -1)
  {
    v24[0] = &v27;
    if ((*(_BYTE *)(((uint64_t (*)(_QWORD *, WebCore::LineSelection *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21formattingContextRootEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v9])(v24, this)+ 23) & 0xE) == 0)
    {
      LOBYTE(v12) = 0;
      return v12;
    }
    v11 = *((unsigned int *)this + 4);
    if ((_DWORD)v11 != -1)
    {
      v27 = &v26;
      ((void (*)(_QWORD *__return_ptr, char **, WebCore::LineSelection *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                     + v11))(v24, &v27, this);
      v12 = 0;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24) & 1) == 0)
      {
        do
        {
          v13 = WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v24);
          if (v12)
          {
            if (v12 == 2)
            {
              if (v13)
                v14 = 2;
              else
                v14 = 3;
              if ((v13 & 0xFFFFFFFD) == 1)
                v12 = v13;
              else
                v12 = v14;
            }
            else if (v12 == 1)
            {
              LOBYTE(v12) = 4;
              if (!v13 || v13 == 3)
                break;
              v12 = 1;
            }
            else if (v12 == 3 && v13 == 1)
            {
              LOBYTE(v12) = 4;
              break;
            }
          }
          else
          {
            v12 = v13;
            if (v13 == 4)
              break;
          }
          if (v25 == -1)
            goto LABEL_29;
          v27 = &v26;
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v27, v24);
        }
        while (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v24));
      }
      if (v25 != -1)
        ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v25])(&v27, v24);
      return v12;
    }
  }
LABEL_29:
  v16 = (WebCore::InlineIterator *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderBlockFlow::inlineSelectionGaps(v16, v17, v18, v19, v20, v21, v22, v23, a9);
}

uint64_t WebCore::RenderBlockFlow::inlineSelectionGaps@<X0>(uint64_t this@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, _DWORD *a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, signed int *a6@<X5>, int *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  WebCore::RenderElement *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const WebCore::InlineIterator::LineBox *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WebCore::InlineIterator::LineBox *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::RenderBlock *v38;
  double v39;
  uint64_t v40;
  double v41;
  unsigned int v42;
  double v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  signed int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double v61;
  unsigned int v62;
  float v63;
  const WebCore::InlineIterator::LineBox *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WebCore::RenderElement *v104;
  float v105;
  double v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  int v123;
  float v124;
  float v125;
  double v126;
  int v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  int v139;
  float v140;
  float v141;
  double v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  signed int v155;
  int v156;
  int v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  signed int v164;
  int v165;
  signed int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  float v179;
  double v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  WebCore::RenderElement *v194;
  unint64_t v195;
  uint64_t v196;
  int32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  WebCore::RenderElement *v200;
  double v201;
  void *v202;
  unint64_t v203;
  unsigned int v204;
  signed int v205;
  unsigned int v206;
  signed int v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  int v216;
  float v217;
  float v218;
  double v219;
  int v220;
  int v221;
  _BOOL4 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  _BOOL4 v229;
  unsigned int v230;
  unsigned int v231;
  const WebCore::RenderBlockFlow *v232;
  double v233;
  _DWORD *v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  int v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int *v242;
  unsigned int v243;
  int *v244;
  int v245;
  int v246;
  int v247;
  unsigned int *v248;
  unsigned int *v249;
  _QWORD *v250;
  int i;
  uint64_t v252;
  unsigned int *v253;
  float32x4_t v254;
  int v255;
  uint64_t v258;
  int v259;
  uint64_t v261;
  uint64_t v263;
  __int128 v264;
  int v265;
  unint64_t v266;
  unsigned int v267;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v273;
  _BYTE v274[16];
  unsigned int v275;
  _QWORD v276[2];
  unsigned int v277;
  float32x4_t v278;
  _QWORD v279[2];
  int v280;
  uint64_t v281[2];
  uint64_t v282;
  _QWORD v283[2];
  uint64_t v284;
  char v285;
  unint64_t v286[2];

  v12 = (uint64_t)a2;
  v13 = this;
  v15 = *(_DWORD *)(this + 20);
  LODWORD(v16) = (v15 >> 25) & 7;
  if ((v15 & 0x40000) == 0)
    goto LABEL_467;
  v17 = (uint64_t)a3;
  v18 = *(_DWORD *)(this + 240);
  v261 = this;
  v259 = v16;
  v258 = a9;
  if (v18 == 1)
  {
    v19 = *(_QWORD *)(this + 232);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 80);
      if (v20)
      {
        if (*(_DWORD *)(v20 + 60) >= 2u && *(_DWORD *)(v20 + 44))
          goto LABEL_7;
      }
    }
LABEL_467:
    if ((_DWORD)v16 == 4 || (_DWORD)v16 == 1)
    {
      v242 = a4 + 1;
      if ((*(_BYTE *)(v12 + 21) & 0x10) != 0)
        v242 = a4;
      v243 = *v242;
      if (((*(_DWORD *)(v13 + 124) >> 13) & 6u) - 2 >= 4)
        v244 = (int *)(v13 + 164);
      else
        v244 = (int *)(v13 + 160);
      v245 = *v244;
      v54 = __OFADD__(v243, v245);
      v246 = v243 + v245;
      v247 = (v243 >> 31) + 0x7FFFFFFF;
      if (!v54)
        v247 = v246;
      *a5 = v247;
      if (((*(_DWORD *)(v13 + 124) >> 13) & 6u) - 2 >= 4)
        v248 = (unsigned int *)(v13 + 164);
      else
        v248 = (unsigned int *)(v13 + 160);
      *a6 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)v13, v12, *v248, a8);
      if (((*(_DWORD *)(v13 + 124) >> 13) & 6u) - 2 >= 4)
        v249 = (unsigned int *)(v13 + 164);
      else
        v249 = (unsigned int *)(v13 + 160);
      this = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)v13, (WebCore::RenderBox *)v12, *v249, (uint64_t)a8);
      *a7 = this;
    }
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
    return this;
  }
  if (v18 != 2)
    goto LABEL_467;
  v240 = *(_QWORD *)(this + 232);
  if (!v240)
    goto LABEL_467;
  v250 = *(_QWORD **)(v240 + 8);
  if (!v250)
    goto LABEL_467;
  v16 = (uint64_t)a5;
  this = (*(uint64_t (**)(_QWORD *))(*v250 + 88))(v250);
  if (!(_DWORD)this)
  {
    __break(0xC471u);
    JUMPOUT(0x196389854);
  }
  for (i = 1; ; ++i)
  {
    v250 = (_QWORD *)v250[12];
    if (!v250)
      break;
    this = (*(uint64_t (**)(_QWORD *))(*v250 + 88))(v250);
    if ((this & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196389818);
    }
  }
  v12 = (uint64_t)a2;
  v13 = v261;
  a5 = (unsigned int *)v16;
  LODWORD(v16) = v259;
  v17 = (uint64_t)a3;
  if (!i)
    goto LABEL_467;
LABEL_7:
  v253 = a5;
  v276[0] = 0;
  v277 = 1;
  WebCore::InlineIterator::firstLineBoxFor(v13, a2, (uint64_t)v274);
  v21 = v275;
  if (v275 != -1)
  {
    v11 = a10;
    v10 = (WebCore::RenderElement *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
    do
    {
      v283[0] = v281;
      if ((((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v21])(v283, v274) & 1) != 0|| WebCore::LineSelection::selectionState((WebCore::LineSelection *)v274, v22, v23, v24, v25, v26, v27, v28, v252))
      {
        goto LABEL_14;
      }
      if (v275 == -1)
        break;
      v283[0] = v281;
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v275])(v283, v274);
      v21 = v275;
    }
    while (v275 != -1);
  }
  while (1)
  {
    do
    {
LABEL_13:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_14:
      *(_OWORD *)(a9 + 16) = 0u;
      *(_OWORD *)(a9 + 32) = 0u;
      *(_OWORD *)a9 = 0u;
      v29 = v275;
    }
    while (v275 == -1);
    v254 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    v263 = v11;
    while (1)
    {
      v283[0] = v281;
      if (((*((uint64_t (**)(_QWORD *, _BYTE *))v10 + v29))(v283, v274) & 1) != 0
        || !WebCore::LineSelection::selectionState((WebCore::LineSelection *)v274, v30, v31, v32, v33, v34, v35, v36, v252))
      {
        break;
      }
      if (v275 == -1)
        goto LABEL_13;
      v283[0] = v281;
      v37 = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21formattingContextRootEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v275])(v283, v274);
      if (v275 == -1)
        goto LABEL_13;
      v38 = (WebCore::RenderBlock *)v37;
      v283[0] = v281;
      v39 = ((float (*)(_QWORD *, _BYTE *))*(&off_1E3421AD0 + v275))(v283, v274) * 64.0;
      if (v39 >= 2147483650.0)
        v40 = 0x7FFFFFFFLL;
      else
        v40 = v39 <= -2147483650.0 ? 0x80000000 : (int)v39;
      v41 = (float)((float)(int)WebCore::RenderBlockFlow::adjustEnclosingTopForPrecedingBlock(v38, v40) * 0.015625)
          * 64.0;
      if (v41 >= 2147483650.0)
      {
        v273 = 0x7FFFFFFF;
      }
      else
      {
        v42 = v41 <= -2147483650.0 ? 0x80000000 : (int)v41;
        v273 = v42;
      }
      if (v275 == -1)
        goto LABEL_13;
      v283[0] = v281;
      v43 = fmaxf(((float (*)(_QWORD *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix+ v275))(v283, v274)+ (float)((float)(int)v273 * -0.015625), 0.0)* 64.0;
      if (v43 >= 2147483650.0)
      {
        v44 = 0x7FFFFFFF;
      }
      else if (v43 <= -2147483650.0)
      {
        v44 = 0x80000000;
      }
      else
      {
        v44 = (int)v43;
      }
      v271 = v44;
      if ((_DWORD)v16 != 1 && (_DWORD)v16 != 4)
      {
        if (v277 == -1)
          goto LABEL_13;
        v283[0] = v281;
        if ((*((unsigned int (**)(_QWORD *, _QWORD *))v10 + v277))(v283, v276))
        {
          v45 = (*(_DWORD *)(v13 + 20) >> 25) & 7;
          if (v45 != 1 && v45 != 4)
          {
            v46 = WebCore::RenderBlock::blockSelectionGap((uint64_t *)v13, v12, (_DWORD *)v17, *a4, a4[1], *v253, *a6, *a7, v273, a8, v11);
            if ((int)v47 >= 1 && SHIDWORD(v47) >= 1)
            {
              v48 = *(_DWORD *)(a9 + 24);
              if (v48 < 1 || (v49 = *(_DWORD *)(a9 + 28), v49 <= 0))
              {
                *(_QWORD *)(a9 + 16) = v46;
                *(_QWORD *)(a9 + 24) = v47;
              }
              else
              {
                v51 = *(_DWORD *)(a9 + 16);
                v50 = *(_DWORD *)(a9 + 20);
                if ((int)v46 >= (int)v51)
                  v52 = v51;
                else
                  v52 = v46;
                if (SHIDWORD(v46) >= (int)v50)
                  v53 = v50;
                else
                  v53 = HIDWORD(v46);
                v54 = __OFADD__(v51, v48);
                v55 = v51 + v48;
                if (v54)
                  v55 = (v51 >> 31) + 0x7FFFFFFF;
                v56 = v46 + v47;
                if (__OFADD__((_DWORD)v46, (_DWORD)v47))
                  v56 = (v46 >> 31) + 0x7FFFFFFF;
                if (v55 <= v56)
                  v55 = v56;
                v54 = __OFADD__(v50, v49);
                v57 = v50 + v49;
                if (v54)
                  v57 = (v50 >> 31) + 0x7FFFFFFF;
                v58 = HIDWORD(v46) + HIDWORD(v47);
                if (__OFADD__(HIDWORD(v46), HIDWORD(v47)))
                  v58 = (HIDWORD(v46) >> 31) + 0x7FFFFFFF;
                if (v57 > v58)
                  v58 = v57;
                *(_QWORD *)(a9 + 16) = v52 | (v53 << 32);
                v54 = __OFSUB__(v55, (_DWORD)v52);
                v59 = v55 - v52;
                if (v54)
                  v59 = (v55 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)(a9 + 24) = v59;
                v54 = __OFSUB__(v58, (_DWORD)v53);
                v60 = v58 - v53;
                if (v54)
                  v60 = (v58 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)(a9 + 28) = v60;
              }
            }
          }
        }
      }
      if (v275 == -1)
        goto LABEL_13;
      v283[0] = v281;
      v61 = ((float (*)(_QWORD *, _BYTE *))off_1E3421AE0[v275])(v283, v274) * 64.0;
      if (v61 >= 2147483650.0)
        v62 = 0x7FFFFFFF;
      else
        v62 = v61 <= -2147483650.0 ? 0x80000000 : (int)v61;
      if (v275 == -1)
        goto LABEL_13;
      v283[0] = v281;
      ((void (*)(_QWORD *, _BYTE *))off_1E3421AF0[v275])(v283, v274);
      if (v275 == -1)
        goto LABEL_13;
      v283[0] = v281;
      v71 = (float)(v63 - ((float (*)(_QWORD *, _BYTE *))off_1E3421AE0[v275])(v283, v274)) * 64.0;
      if (v71 >= 2147483650.0)
      {
        v72 = 0x7FFFFFFF;
      }
      else if (v71 <= -2147483650.0)
      {
        v72 = 0x80000000;
      }
      else
      {
        v72 = (int)v71;
      }
      v73 = v273 + v271;
      if (__OFADD__(v273, v271))
        v73 = (v273 >> 31) + 0x7FFFFFFF;
      v74 = *(_DWORD *)(v13 + 20);
      if ((v74 & 0x1000) != 0)
        v75 = a4[1] | ((unint64_t)*a4 << 32);
      else
        v75 = *(_QWORD *)a4;
      v76 = v62 + v75;
      if (__OFADD__(v62, (_DWORD)v75))
        v76 = (v62 >> 31) + 0x7FFFFFFF;
      v77 = HIDWORD(v75);
      v54 = __OFADD__(v273, (_DWORD)v77);
      v78 = v273 + v77;
      if (v54)
        v78 = (v273 >> 31) + 0x7FFFFFFF;
      v79 = v73;
      v80 = v72 | ((unint64_t)v73 << 32);
      v81 = *(_DWORD *)(v12 + 20);
      v82 = v79 | ((unint64_t)v72 << 32);
      if ((v81 & 0x1000) != 0)
      {
        v83 = v76;
      }
      else
      {
        v82 = v80;
        v83 = v78;
      }
      if ((v81 & 0x1000) != 0)
        v84 = v78;
      else
        v84 = v76;
      v85 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
      if (v85 <= 5 && ((1 << v85) & 0x2A) != 0)
      {
        v228 = v78 + v79;
        v229 = __OFADD__(v78, (_DWORD)v79);
        if ((v81 & 0x1000) != 0)
        {
          if (v229)
            v228 = (v78 >> 31) + 0x7FFFFFFF;
          v231 = *((_DWORD *)a2 + 40);
          v84 = v231 - v228;
          if (__OFSUB__(v231, v228))
            v84 = (v231 >> 31) + 0x7FFFFFFF;
          v83 = v76;
        }
        else
        {
          if (v229)
            v228 = (v78 >> 31) + 0x7FFFFFFF;
          v230 = *((_DWORD *)a2 + 41);
          v54 = __OFSUB__(v230, v228);
          v83 = v230 - v228;
          if (v54)
            v83 = (v230 >> 31) + 0x7FFFFFFF;
          v84 = v76;
        }
        v12 = (uint64_t)a2;
        v13 = v261;
        LODWORD(v16) = v259;
        v17 = (uint64_t)a3;
        v10 = (WebCore::RenderElement *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
        v11 = v263;
        a9 = v258;
      }
      v86 = *(_DWORD *)(v17 + 4);
      v87 = v84 + *(_DWORD *)v17;
      if (__OFADD__(v84, *(_DWORD *)v17))
        v87 = (v84 >> 31) + 0x7FFFFFFF;
      v54 = __OFADD__(v83, v86);
      v88 = v83 + v86;
      if (v54)
      {
        v88 = (v83 >> 31) + 0x7FFFFFFF;
        if (!v11)
          goto LABEL_107;
      }
      else if (!v11)
      {
        goto LABEL_107;
      }
      if ((v74 & 0x1000) != 0)
      {
        v89 = *(_DWORD *)v11;
        v94 = *(_DWORD *)(v11 + 8);
        v54 = __OFADD__(*(_DWORD *)v11, v94);
        v95 = *(_DWORD *)v11 + v94;
        if (v54)
          v95 = (v89 >> 31) + 0x7FFFFFFF;
        if (v87 < v95)
        {
          v54 = __OFADD__(v87, (_DWORD)v82);
          v93 = v87 + v82;
          if (v54)
            v93 = (v87 >> 31) + 0x7FFFFFFF;
LABEL_106:
          if (v93 <= (int)v89)
            goto LABEL_275;
LABEL_107:
          v96 = WebCore::LineSelection::selectionState((WebCore::LineSelection *)v274, v64, v65, v66, v67, v68, v69, v70, v252);
          if (v96 == 2)
          {
            v16 = 1;
            v97 = 1;
            v10 = (WebCore::RenderElement *)v279;
            goto LABEL_121;
          }
          v98 = *(_DWORD *)(v13 + 120);
          v99 = v98 & 0x4000000;
          v100 = (v98 >> 26) & 1;
          v10 = (WebCore::RenderElement *)v279;
          if (v96 == 3 && !v99)
          {
            v16 = 1;
LABEL_118:
            if (v96 == 3)
              v97 = v100;
            else
              v97 = 0;
            goto LABEL_121;
          }
          if (v96 == 1)
            v16 = v100;
          else
            v16 = 0;
          if (v96 != 1 || v99)
            goto LABEL_118;
          v97 = 1;
LABEL_121:
          if (v275 == -1)
            goto LABEL_13;
          v281[0] = (uint64_t)v279;
          ((void (*)(_QWORD *__return_ptr, uint64_t *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                          + v275))(v283, v281, v274);
          v101 = v284;
          if ((_DWORD)v284 == -1)
            goto LABEL_13;
          while (1)
          {
            v281[0] = (uint64_t)v279;
            if ((((uint64_t (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v101])(v281, v283) & 1) != 0)break;
            if (WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v283))
              goto LABEL_131;
            if ((_DWORD)v284 != -1)
            {
              v281[0] = (uint64_t)v279;
              ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v284])(v281, v283);
              v101 = v284;
              if ((_DWORD)v284 != -1)
                continue;
            }
            goto LABEL_13;
          }
          if ((_DWORD)v284 != -1)
            ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v284])(v281, v283);
          v283[1] = 0;
          v284 = 1;
          v283[0] = 0;
LABEL_131:
          WebCore::InlineIterator::LineBox::lastLeafBox(v281, (WebCore::InlineIterator::LineBox *)v274);
          v102 = v282;
          v10 = (WebCore::RenderElement *)&v278;
          if ((_DWORD)v282 == -1)
            goto LABEL_13;
          while (1)
          {
            v279[0] = &v278;
            if ((((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v102])(v279, v281) & 1) != 0)break;
            if (WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v281))
              goto LABEL_139;
            WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)v281);
            v102 = v282;
            if ((_DWORD)v282 == -1)
              goto LABEL_13;
          }
          if ((_DWORD)v282 != -1)
            ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v282])(v279, v281);
          v281[1] = 0;
          v282 = 1;
          v281[0] = 0;
LABEL_139:
          if ((_DWORD)v16)
          {
            if ((_DWORD)v284 == -1)
              goto LABEL_13;
            v279[0] = &v278;
            v103 = *(_QWORD *)(((uint64_t (*)(_QWORD *, _QWORD *))off_1E3421B70[v284])(v279, v283)+ 32);
            if (v103)
              v104 = *(WebCore::RenderElement **)(v103 + 8);
            else
              v104 = 0;
            WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection((WebCore::InlineIterator::Box *)v283);
            v106 = v105 * 64.0;
            if (v106 >= 2147483650.0)
            {
              v107 = 0x7FFFFFFF;
            }
            else if (v106 <= -2147483650.0)
            {
              v107 = 0x80000000;
            }
            else
            {
              v107 = (int)v106;
            }
            v108 = WebCore::RenderBlock::logicalLeftSelectionGap((uint64_t *)v13, v12, (_DWORD *)v17, a4, v104, v107, v273, v271, a8, v11);
            v16 = 0;
            v267 = 0;
            if ((int)v109 < 1)
            {
              v266 = 0;
              v269 = 0;
              v10 = (WebCore::RenderElement *)&v278;
              if (v97)
                goto LABEL_152;
            }
            else
            {
              v266 = 0;
              v269 = 0;
              v10 = (WebCore::RenderElement *)&v278;
              if (SHIDWORD(v109) >= 1)
              {
                v267 = v108;
                v266 = HIDWORD(v108);
                v269 = v109;
                v16 = HIDWORD(v109);
                if (!v97)
                  goto LABEL_149;
LABEL_152:
                if ((_DWORD)v282 == -1)
                  goto LABEL_13;
                a9 = v12;
                v279[0] = &v278;
                v114 = *(_QWORD *)(((uint64_t (*)(_QWORD *, uint64_t *))off_1E3421B70[v282])(v279, v281)+ 32);
                v12 = v13;
                v10 = v114 ? *(WebCore::RenderElement **)(v114 + 8) : 0;
                if ((_DWORD)v282 == -1)
                  goto LABEL_13;
                v13 = v16;
                v16 = (uint64_t)&v278;
                v279[0] = &v278;
                ((void (*)(_QWORD *, uint64_t *))off_1E3421C00[v282])(v279, v281);
                if ((_DWORD)v282 == -1)
                  goto LABEL_13;
                v119 = v115;
                v120 = v116;
                v121 = v117;
                v122 = v118;
                v279[0] = &v278;
                v123 = ((uint64_t (*)(_QWORD *, uint64_t *))off_1E3421B00[v282])(v279, v281);
                if (v123)
                  v124 = v121;
                else
                  v124 = v122;
                if (v123)
                  v125 = v119;
                else
                  v125 = v120;
                v126 = (float)(v125 + v124) * 64.0;
                if (v126 >= 2147483650.0)
                {
                  v127 = 0x7FFFFFFF;
                  LODWORD(v16) = v13;
                }
                else
                {
                  LODWORD(v16) = v13;
                  if (v126 <= -2147483650.0)
                    v127 = 0x80000000;
                  else
                    v127 = (int)v126;
                }
                v13 = v12;
                v128 = (uint64_t *)v12;
                v12 = a9;
                v129 = WebCore::RenderBlock::logicalRightSelectionGap(v128, (WebCore::RenderBox *)a9, (_DWORD *)v17, *a4, a4[1], v10, v127, v273, v271, a8, v11);
                v110 = 0;
                if ((int)v130 < 1)
                {
                  v111 = 0;
                  v112 = 0;
                  LODWORD(v113) = 0;
                  v10 = (WebCore::RenderElement *)&v278;
                  a9 = v258;
                }
                else
                {
                  v111 = 0;
                  v112 = 0;
                  LODWORD(v113) = 0;
                  v10 = (WebCore::RenderElement *)&v278;
                  a9 = v258;
                  if (SHIDWORD(v130) >= 1)
                  {
                    v110 = v129;
                    v111 = HIDWORD(v129);
                    v112 = v130;
                    v113 = HIDWORD(v130);
                  }
                }
LABEL_169:
                *(_QWORD *)&v264 = __PAIR64__(v110, v112);
                *((_QWORD *)&v264 + 1) = v111;
                v265 = v113;
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v283) & 1) != 0
                  || (WebCore::InlineIterator::BoxIterator::operator==((uint64_t)v283, (WebCore::InlineIterator::BoxIterator *)v281) & 1) != 0)
                {
                  LODWORD(v10) = 0;
                  v17 = 0;
                  v270 = 0;
                  LODWORD(v11) = 0;
LABEL_190:
                  if ((_DWORD)v282 != -1)
                    ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v282])(v279, v281);
                  if ((_DWORD)v284 != -1)
                    ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v284])(v281, v283);
                  v145 = v265;
                  if (v269 >= 1 && (int)v16 >= 1)
                  {
                    v146 = *(_DWORD *)(a9 + 8);
                    if (v146 < 1 || (v147 = *(_DWORD *)(a9 + 12), v147 <= 0))
                    {
                      *(_QWORD *)a9 = v267 | (v266 << 32);
                      *(_DWORD *)(a9 + 8) = v269;
                    }
                    else
                    {
                      v149 = *(_DWORD *)a9;
                      v148 = *(_DWORD *)(a9 + 4);
                      if ((signed int)v267 >= *(_DWORD *)a9)
                        v150 = v149;
                      else
                        v150 = v267;
                      if ((int)v266 >= (int)v148)
                        v151 = v148;
                      else
                        v151 = v266;
                      v54 = __OFADD__(v149, v146);
                      v152 = v149 + v146;
                      if (v54)
                        v152 = (v149 >> 31) + 0x7FFFFFFF;
                      v153 = v267 + v269;
                      if (__OFADD__(v267, v269))
                        v153 = (v267 >> 31) + 0x7FFFFFFF;
                      if (v152 <= v153)
                        v152 = v153;
                      v54 = __OFADD__(v148, v147);
                      v154 = v148 + v147;
                      if (v54)
                        v154 = (v148 >> 31) + 0x7FFFFFFF;
                      v155 = v266 + v16;
                      if (__OFADD__((_DWORD)v266, (_DWORD)v16))
                        v155 = (v266 >> 31) + 0x7FFFFFFF;
                      if (v154 <= v155)
                        v154 = v155;
                      *(_QWORD *)a9 = v150 | (v151 << 32);
                      v54 = __OFSUB__(v152, (_DWORD)v150);
                      v156 = v152 - v150;
                      if (v54)
                        v156 = (v152 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)(a9 + 8) = v156;
                      LODWORD(v16) = v154 - v151;
                      if (__OFSUB__(v154, (_DWORD)v151))
                        LODWORD(v16) = (v154 >> 31) + 0x7FFFFFFF;
                    }
                    *(_DWORD *)(a9 + 12) = v16;
                  }
                  if (v270 >= 1 && (int)v11 >= 1)
                  {
                    v157 = *(_DWORD *)(a9 + 24);
                    if (v157 < 1 || (v158 = *(_DWORD *)(a9 + 28), v158 <= 0))
                    {
                      *(_QWORD *)(a9 + 16) = v10 | (unint64_t)(v17 << 32);
                      *(_DWORD *)(a9 + 24) = v270;
                    }
                    else
                    {
                      v160 = *(_DWORD *)(a9 + 16);
                      v159 = *(_DWORD *)(a9 + 20);
                      if ((int)v10 >= (int)v160)
                        v161 = v160;
                      else
                        v161 = v10;
                      if ((int)v17 >= (int)v159)
                        v162 = v159;
                      else
                        v162 = v17;
                      v54 = __OFADD__(v160, v157);
                      v163 = v160 + v157;
                      if (v54)
                        v163 = (v160 >> 31) + 0x7FFFFFFF;
                      v164 = (_DWORD)v10 + v270;
                      if (__OFADD__((_DWORD)v10, v270))
                        v164 = (v10 >> 31) + 0x7FFFFFFF;
                      if (v163 <= v164)
                        v163 = v164;
                      v54 = __OFADD__(v159, v158);
                      v165 = v159 + v158;
                      if (v54)
                        v165 = (v159 >> 31) + 0x7FFFFFFF;
                      v166 = v17 + v11;
                      if (__OFADD__((_DWORD)v17, (_DWORD)v11))
                        v166 = (v17 >> 31) + 0x7FFFFFFF;
                      if (v165 <= v166)
                        v165 = v166;
                      *(_QWORD *)(a9 + 16) = v161 | (v162 << 32);
                      v54 = __OFSUB__(v163, (_DWORD)v161);
                      v167 = v163 - v161;
                      if (v54)
                        v167 = (v163 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)(a9 + 24) = v167;
                      LODWORD(v11) = v165 - v162;
                      if (__OFSUB__(v165, (_DWORD)v162))
                        LODWORD(v11) = (v165 >> 31) + 0x7FFFFFFF;
                    }
                    *(_DWORD *)(a9 + 28) = v11;
                  }
                  LODWORD(v16) = v259;
                  v17 = (uint64_t)a3;
                  v10 = (WebCore::RenderElement *)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
                  v11 = v263;
                  if ((int)v264 >= 1 && v265 >= 1)
                  {
                    v168 = *(_DWORD *)(a9 + 40);
                    if (v168 < 1 || (v169 = *(_DWORD *)(a9 + 44), v169 <= 0))
                    {
                      *(_QWORD *)(a9 + 32) = v264 >> 32;
                      *(_DWORD *)(a9 + 40) = v264;
                    }
                    else
                    {
                      v171 = *(_DWORD *)(a9 + 32);
                      v170 = *(_DWORD *)(a9 + 36);
                      if (SDWORD1(v264) >= (int)v171)
                        v172 = v171;
                      else
                        v172 = DWORD1(v264);
                      if (SDWORD2(v264) >= (int)v170)
                        v173 = v170;
                      else
                        v173 = DWORD2(v264);
                      v54 = __OFADD__(v171, v168);
                      v174 = v171 + v168;
                      if (v54)
                        v174 = (v171 >> 31) + 0x7FFFFFFF;
                      v175 = DWORD1(v264) + v264;
                      if (__OFADD__(DWORD1(v264), (_DWORD)v264))
                        v175 = (DWORD1(v264) >> 31) + 0x7FFFFFFF;
                      if (v174 <= v175)
                        v174 = v175;
                      v54 = __OFADD__(v170, v169);
                      v176 = v170 + v169;
                      if (v54)
                        v176 = (v170 >> 31) + 0x7FFFFFFF;
                      v177 = DWORD2(v264) + v265;
                      if (__OFADD__(DWORD2(v264), v265))
                        v177 = (DWORD2(v264) >> 31) + 0x7FFFFFFF;
                      if (v176 <= v177)
                        v176 = v177;
                      *(_QWORD *)(a9 + 32) = v172 | (v173 << 32);
                      v54 = __OFSUB__(v174, (_DWORD)v172);
                      v178 = v174 - v172;
                      if (v54)
                        v178 = (v174 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)(a9 + 40) = v178;
                      v145 = v176 - v173;
                      if (__OFSUB__(v176, (_DWORD)v173))
                        v145 = (v176 >> 31) + 0x7FFFFFFF;
                    }
                    *(_DWORD *)(a9 + 44) = v145;
                  }
                  goto LABEL_275;
                }
                if ((_DWORD)v284 == -1)
                  goto LABEL_13;
                v279[0] = &v278;
                ((void (*)(_QWORD *, _QWORD *))off_1E3421C00[v284])(v279, v283);
                if ((_DWORD)v284 == -1)
                  goto LABEL_13;
                v135 = v131;
                v136 = v132;
                v137 = v133;
                v138 = v134;
                v279[0] = &v278;
                v139 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3421B00[v284])(v279, v283);
                if (v139)
                  v140 = v137;
                else
                  v140 = v138;
                if (v139)
                  v141 = v135;
                else
                  v141 = v136;
                v142 = (float)(v141 + v140) * 64.0;
                v255 = v16;
                if (v142 >= 2147483650.0)
                {
                  LODWORD(v16) = 0x7FFFFFFF;
                }
                else if (v142 <= -2147483650.0)
                {
                  LODWORD(v16) = 0x80000000;
                }
                else
                {
                  LODWORD(v16) = (int)v142;
                }
                v143 = WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v283);
                LOBYTE(v279[0]) = 0;
                v280 = -1;
                v144 = v284;
                if ((_DWORD)v284 != -1)
                {
                  ((void (*)(float32x4_t *, _QWORD *, _QWORD *))*(&off_1E3421B10 + v284))(&v278, v279, v283);
                  v280 = v144;
                }
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v279) & 1) != 0)
                {
                  LODWORD(v10) = 0;
                  v17 = 0;
                  v270 = 0;
                  LODWORD(v11) = 0;
LABEL_187:
                  if (v280 != -1)
                    ((void (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v280])(&v278, v279);
                  LODWORD(v16) = v255;
                  goto LABEL_190;
                }
                v11 = 0;
                v270 = 0;
                v17 = 0;
                v10 = 0;
                while (2)
                {
                  if (WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v279))
                  {
                    WebCore::InlineIterator::Box::logicalLeftIgnoringInlineDirection((WebCore::InlineIterator::Box *)v279);
                    v180 = (float)(v179 + (float)((float)(int)v16 * -0.015625)) * 64.0;
                    if (v180 >= 2147483650.0)
                    {
                      v181 = 0x7FFFFFFF;
                    }
                    else if (v180 <= -2147483650.0)
                    {
                      v181 = 0x80000000;
                    }
                    else
                    {
                      v181 = (int)v180;
                    }
                    v182 = *(_DWORD *)(v13 + 20);
                    if ((v182 & 0x1000) != 0)
                      v183 = *a4;
                    else
                      v183 = a4[1];
                    if ((v182 & 0x1000) != 0)
                      v184 = a4[1];
                    else
                      v184 = *a4;
                    v54 = __OFADD__((_DWORD)v16, v184);
                    v185 = v16 + v184;
                    if (v54)
                      v185 = (v16 >> 31) + 0x7FFFFFFF;
                    v54 = __OFADD__(v273, v183);
                    v186 = v273 + v183;
                    if (v54)
                      v186 = (v273 >> 31) + 0x7FFFFFFF;
                    v187 = ((unint64_t)v271 << 32) | v181;
                    v188 = *(_DWORD *)(v12 + 20);
                    v189 = v271 | ((unint64_t)v181 << 32);
                    if ((v188 & 0x1000) != 0)
                      v13 = v189;
                    else
                      v13 = v187;
                    if ((v188 & 0x1000) != 0)
                      v190 = v185;
                    else
                      v190 = v186;
                    if ((v188 & 0x1000) != 0)
                      v191 = v186;
                    else
                      v191 = v185;
                    v192 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
                    if (v192 <= 5 && ((1 << v192) & 0x2A) != 0)
                    {
                      v221 = v186 + v271;
                      v222 = __OFADD__(v186, v271);
                      if ((v188 & 0x1000) != 0)
                      {
                        if (v222)
                          v221 = (v186 >> 31) + 0x7FFFFFFF;
                        v224 = *((_DWORD *)a2 + 40);
                        v191 = v224 - v221;
                        if (__OFSUB__(v224, v221))
                          v191 = (v224 >> 31) + 0x7FFFFFFF;
                        v190 = v185;
                      }
                      else
                      {
                        if (v222)
                          v221 = (v186 >> 31) + 0x7FFFFFFF;
                        v223 = *((_DWORD *)a2 + 41);
                        v54 = __OFSUB__(v223, v221);
                        v190 = v223 - v221;
                        if (v54)
                          v190 = (v223 >> 31) + 0x7FFFFFFF;
                        v191 = v185;
                      }
                      a9 = v258;
                    }
                    v193 = a3[1];
                    v194 = (WebCore::RenderElement *)(v191 + *a3);
                    if (__OFADD__(v191, *a3))
                      v194 = (WebCore::RenderElement *)((v191 >> 31) + 0x7FFFFFFF);
                    v16 = v190 + v193;
                    if (__OFADD__(v190, v193))
                    {
                      v16 = (v190 >> 31) + 0x7FFFFFFF;
                      if (!v143)
                        goto LABEL_356;
LABEL_313:
                      if ((int)v13 < 1)
                        goto LABEL_356;
                      v195 = HIDWORD(v13);
                      if (SHIDWORD(v13) < 1)
                      {
                        v203 = (unint64_t)v10;
                        v12 = v17;
                      }
                      else
                      {
                        if (v263)
                        {
                          if (v280 == -1)
                            goto LABEL_13;
                          v278.i64[0] = (uint64_t)v286;
                          v196 = *(_QWORD *)(((uint64_t (*)(float32x4_t *, _QWORD *))off_1E3421B70[v280])(&v278, v279)+ 32);
                          if (v196)
                            v196 = *(_QWORD *)(v196 + 8);
                          if ((*(_BYTE *)(*(_QWORD *)(v196 + 104) + 239) & 4) == 0
                            && (*(_BYTE *)(v196 + 120) & 0x30) == 0)
                          {
                            v197.i64[0] = __PAIR64__(v16, v194);
                            v197.i64[1] = v13;
                            v198 = *(_QWORD *)(v263 + 80);
                            v278 = vmulq_f32(vcvtq_f32_s32(v197), v254);
                            if (v280 == -1)
                              goto LABEL_13;
                            v286[0] = (unint64_t)&v285;
                            v199 = *(_QWORD *)(((uint64_t (*)(unint64_t *, _QWORD *))off_1E3421B70[v280])(v286, v279)+ 32);
                            if (v199)
                              v200 = *(WebCore::RenderElement **)(v199 + 8);
                            else
                              v200 = 0;
                            v201 = WebCore::RenderElement::selectionBackgroundColor(v200, v286);
                            (*(void (**)(uint64_t, float32x4_t *, unint64_t *, double))(*(_QWORD *)v198 + 224))(v198, &v278, v286, v201);
                            if ((v286[0] & 0x8000000000000) != 0)
                            {
                              v225 = (unsigned int *)(v286[0] & 0xFFFFFFFFFFFFLL);
                              do
                              {
                                v226 = __ldaxr(v225);
                                v227 = v226 - 1;
                              }
                              while (__stlxr(v227, v225));
                              a9 = v258;
                              if (!v227)
                              {
                                atomic_store(1u, v225);
                                WTF::fastFree((WTF *)v225, v202);
                              }
                            }
                          }
                        }
                        if (v270 >= 1 && (int)v11 >= 1)
                        {
                          if ((int)v194 >= (int)v10)
                            v203 = v10;
                          else
                            v203 = v194;
                          if ((int)v16 >= (int)v17)
                            v12 = v17;
                          else
                            v12 = v16;
                          v204 = (_DWORD)v10 + v270;
                          if (__OFADD__((_DWORD)v10, v270))
                            v204 = (v10 >> 31) + 0x7FFFFFFF;
                          v205 = (_DWORD)v194 + v13;
                          if (__OFADD__((_DWORD)v194, (_DWORD)v13))
                            v205 = (v194 >> 31) + 0x7FFFFFFF;
                          v13 = v261;
                          if ((int)v204 <= v205)
                            v204 = v205;
                          v206 = v17 + v11;
                          if (__OFADD__((_DWORD)v17, (_DWORD)v11))
                            v206 = (v17 >> 31) + 0x7FFFFFFF;
                          v207 = v16 + v195;
                          if (__OFADD__((_DWORD)v16, (_DWORD)v195))
                            v207 = (v16 >> 31) + 0x7FFFFFFF;
                          v16 = (uint64_t)v286;
                          if ((int)v206 <= v207)
                            v206 = v207;
                          v270 = v204 - v203;
                          if (__OFSUB__(v204, (_DWORD)v203))
                            v270 = (v204 >> 31) + 0x7FFFFFFF;
                          v11 = v206 - v12;
                          if (__OFSUB__(v206, (_DWORD)v12))
                            v11 = (v206 >> 31) + 0x7FFFFFFF;
                          goto LABEL_358;
                        }
                        v203 = (unint64_t)v194;
                        v12 = v16;
                        v270 = v13;
                        v11 = HIDWORD(v13);
                      }
                      v13 = v261;
                      goto LABEL_357;
                    }
                    if (v143)
                      goto LABEL_313;
LABEL_356:
                    v203 = (unint64_t)v10;
                    v12 = v17;
                    v13 = v261;
LABEL_357:
                    v16 = (uint64_t)v286;
LABEL_358:
                    if (v280 == -1)
                      goto LABEL_13;
                    v278.i64[0] = (uint64_t)v286;
                    ((void (*)(float32x4_t *, _QWORD *))off_1E3421C00[v280])(&v278, v279);
                    if (v280 == -1)
                      goto LABEL_13;
                    v212 = v208;
                    v213 = v209;
                    v214 = v210;
                    v215 = v211;
                    v278.i64[0] = (uint64_t)v286;
                    v216 = ((uint64_t (*)(float32x4_t *, _QWORD *))off_1E3421B00[v280])(&v278, v279);
                    if (v216)
                      v217 = v214;
                    else
                      v217 = v215;
                    if (v216)
                      v218 = v212;
                    else
                      v218 = v213;
                    v219 = (float)(v218 + v217) * 64.0;
                    if (v219 >= 2147483650.0)
                    {
                      LODWORD(v16) = 0x7FFFFFFF;
                    }
                    else if (v219 <= -2147483650.0)
                    {
                      LODWORD(v16) = 0x80000000;
                    }
                    else
                    {
                      LODWORD(v16) = (int)v219;
                    }
                    v10 = (WebCore::RenderElement *)v203;
                    v17 = v12;
                    v12 = (uint64_t)a2;
                  }
                  if ((WebCore::InlineIterator::BoxIterator::operator==((uint64_t)v279, (WebCore::InlineIterator::BoxIterator *)v281) & 1) != 0)goto LABEL_187;
                  v220 = WebCore::InlineIterator::Box::selectionState((WebCore::InlineIterator::Box *)v279);
                  if (v280 == -1)
                    goto LABEL_13;
                  v143 = v220;
                  v278.i64[0] = (uint64_t)v286;
                  ((void (*)(float32x4_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v280])(&v278, v279);
                  if (WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v279))
                    goto LABEL_187;
                  continue;
                }
              }
LABEL_151:
              if (v97)
                goto LABEL_152;
            }
LABEL_149:
            v110 = 0;
            v111 = 0;
            v112 = 0;
            LODWORD(v113) = 0;
            goto LABEL_169;
          }
          v267 = 0;
          v266 = 0;
          v269 = 0;
          goto LABEL_151;
        }
      }
      else
      {
        v89 = *(_DWORD *)(v11 + 4);
        v90 = *(_DWORD *)(v11 + 12);
        v54 = __OFADD__(v89, v90);
        v91 = v89 + v90;
        if (v54)
          v91 = (v89 >> 31) + 0x7FFFFFFF;
        if (v88 < v91)
        {
          v92 = HIDWORD(v82);
          v54 = __OFADD__(v88, (_DWORD)v92);
          v93 = v88 + v92;
          if (v54)
            v93 = (v88 >> 31) + 0x7FFFFFFF;
          goto LABEL_106;
        }
      }
LABEL_275:
      if (v277 == -1)
      {
        if (v275 == -1)
          goto LABEL_13;
      }
      else if (v275 == -1)
      {
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v277])(v283, v276);
        v277 = -1;
        goto LABEL_280;
      }
      v283[0] = v276;
      ((void (*)(_QWORD *, _QWORD *, _BYTE *))off_1E3421B20[v275])(v283, v276, v274);
LABEL_280:
      if (v275 != -1)
      {
        v283[0] = v281;
        ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v275])(v283, v274);
        v29 = v275;
        if (v275 != -1)
          continue;
      }
      goto LABEL_13;
    }
    if ((_DWORD)v16 != 4 && (_DWORD)v16 != 1)
      goto LABEL_449;
    if (v277 != -1)
    {
      v283[0] = v281;
      if ((*((unsigned int (**)(_QWORD *, _QWORD *))v10 + v277))(v283, v276))
      {
        WebCore::InlineIterator::lastLineBoxFor((unsigned int *)v13, v232, (uint64_t)v283);
        if (v277 != -1)
        {
          if ((_DWORD)v284 == -1)
          {
            ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v277])(v281, v276);
            v277 = -1;
          }
          else
          {
LABEL_446:
            v281[0] = (uint64_t)v276;
            ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E3421B30[v284])(v281, v276, v283);
          }
          if ((_DWORD)v284 != -1)
            ((void (*)(uint64_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v284])(v281, v283);
          goto LABEL_449;
        }
        if ((_DWORD)v284 != -1)
          goto LABEL_446;
      }
LABEL_449:
      if (v277 != -1)
      {
        v283[0] = v281;
        this = (*((uint64_t (**)(_QWORD *, _QWORD *))v10 + v277))(v283, v276);
        if ((this & 1) != 0 || ((*(_DWORD *)(v13 + 20) >> 25) & 7u) - 3 < 2)
          goto LABEL_461;
        if (v277 != -1)
          break;
      }
    }
  }
  v283[0] = v281;
  v233 = ((float (*)(_QWORD *, _QWORD *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix
                                                    + v277))(v283, v276)* 64.0;
  if (v233 >= 2147483650.0)
  {
    v235 = 0x7FFFFFFF;
    v234 = v253;
  }
  else
  {
    v234 = v253;
    if (v233 <= -2147483650.0)
      v235 = 0x80000000;
    else
      v235 = (int)v233;
  }
  v236 = a4 + 1;
  if ((*(_BYTE *)(v12 + 21) & 0x10) != 0)
    v236 = a4;
  v237 = *v236;
  v238 = (v237 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v237, v235))
    v238 = v237 + v235;
  *v234 = v238;
  v239 = v235;
  *a6 = WebCore::RenderBlock::logicalLeftSelectionOffset((uint64_t *)v13, v12, v235, a8);
  this = WebCore::RenderBlock::logicalRightSelectionOffset((WebCore::RenderBox *)v13, (WebCore::RenderBox *)v12, v239, (uint64_t)a8);
  *a7 = this;
LABEL_461:
  if (v275 != -1)
    this = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v275])(v283, v274);
  if (v277 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v277])(v283, v276);
  return this;
}

uint64_t WebCore::RenderBlockFlow::needsLayoutAfterFragmentRangeChange(WebCore::RenderBlockFlow *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1672))(this);
  if ((_DWORD)result)
    return WebCore::RenderElement::createsNewFormattingContext(this) ^ 1;
  return result;
}

WTF *WebCore::RenderBlockFlow::setMultiColumnFlow(WebCore::RenderBlockFlow *this, WebCore::RenderMultiColumnFlow *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *result;
  WTF *v7;

  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v7 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v7)
    goto LABEL_2;
  if (*(_DWORD *)v7 != 1)
  {
    --*(_DWORD *)v7;
LABEL_2:
    ++*(_DWORD *)v3;
    goto LABEL_3;
  }
  WTF::fastFree(v7, a2);
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
LABEL_3:
  v4 = *((_QWORD *)this + 28);
  if (!v4)
  {
    WebCore::RenderBlockFlow::materializeRareBlockFlowData((WTF **)this);
    v4 = *((_QWORD *)this + 28);
  }
  result = *(WTF **)(v4 + 24);
  *(_QWORD *)(v4 + 24) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::RenderBlockFlow::containsNonZeroBidiLevel(WebCore::RenderBlockFlow *this, const WebCore::RenderBlockFlow *a2)
{
  int v2;
  int v3;
  WebCore::RenderBlockFlow *v5;
  const WebCore::FloatPoint *v6;
  _QWORD v7[2];
  int v8;
  _BYTE v9[16];
  unsigned int v10;
  char v11;
  char *v12;

  WebCore::InlineIterator::firstLineBoxFor((uint64_t)this, a2, (uint64_t)v9);
  if (WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v9))
  {
    while (2)
    {
      if (v10 != -1)
      {
        v12 = &v11;
        ((void (*)(_QWORD *__return_ptr, char **, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                      + v10))(v7, &v12, v9);
        while (1)
        {
          if (v8 == -1)
            goto LABEL_21;
          v12 = &v11;
          v2 = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v7);
          if ((v2 & 1) != 0)
            break;
          if (v8 == -1)
            goto LABEL_21;
          v12 = &v11;
          if (((unsigned int (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box9bidiLevelEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v8])(&v12, v7))
          {
            v3 = 1;
            goto LABEL_13;
          }
          if (v8 == -1)
            goto LABEL_21;
          v12 = &v11;
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v7);
          if (v8 == -1)
            goto LABEL_21;
          v12 = (char *)v7;
          ((void (*)(char **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal[v8])(&v12, v7, v7);
        }
        v3 = 5;
LABEL_13:
        if (v8 != -1)
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v8])(&v12, v7);
        if (!v2)
          goto LABEL_18;
        WebCore::InlineIterator::LineBoxIterator::traverseNext((WebCore::InlineIterator::LineBoxIterator *)v9);
        if ((WebCore::InlineIterator::LineBoxIterator::operator BOOL((uint64_t)v9) & 1) != 0)
          continue;
        goto LABEL_17;
      }
      break;
    }
LABEL_21:
    v5 = (WebCore::RenderBlockFlow *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderBlockFlow::findClosestTextAtAbsolutePoint(v5, v6);
  }
  else
  {
LABEL_17:
    v3 = 2;
LABEL_18:
    if (v10 != -1)
      ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v10])(v7, v9);
    return v3 != 2;
  }
}

_QWORD *WebCore::RenderBlockFlow::findClosestTextAtAbsolutePoint(WebCore::RenderBlockFlow *this, const WebCore::FloatPoint *a2)
{
  void *v4;
  float v5;
  float v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  char v11;
  unsigned int v12;
  _QWORD *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  unint64_t i;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v66;
  _QWORD v67[2];
  int v68;
  _QWORD v69[2];
  int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  char v79;
  __int16 v80;
  uint64_t v81;
  _BYTE v82[9];

  v71 = *(_QWORD *)a2;
  v75 = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v79 = 0;
  v80 = 1;
  v81 = 0x100000000;
  (*(void (**)(WebCore::RenderBlockFlow *, _QWORD, uint64_t *))(*(_QWORD *)this + 584))(this, 0, &v71);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v71, 0);
  v6 = *((float *)&v71 + 1);
  v5 = *(float *)&v71;
  v7 = v77;
  v77 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  v8 = v76;
  v76 = 0;
  if (v8)
    WTF::fastFree(v8, v4);
  if ((*((_DWORD *)this + 5) & 0x40000) != 0)
  {
    v10 = (unsigned int *)this;
  }
  else
  {
    v9 = *((unsigned int *)this + 16);
    if (v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
      && (v10 = *(unsigned int **)((v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
      && (v11 = *((_BYTE *)v10 + 45), (v11 & 4) != 0))
    {
      while (1)
      {
        if (v10[41])
        {
          if ((*(_BYTE *)(*((_QWORD *)v10 + 13) + 239) & 4) == 0 && (v10[30] & 0x30) == 0)
          {
            v12 = v10[5];
            if ((v12 & 0x800) == 0 && (v12 & 0x1800000) != 0x1000000)
            {
              v58 = (float)(int)v10[39] * 0.015625;
              for (i = *(unsigned int *)((char *)v10 + 47) | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32);
                    i;
                    i = *(unsigned int *)(v60 + 47) | ((unint64_t)*(unsigned __int8 *)(v60 + 51) << 32))
              {
                v60 = *(_QWORD *)(i + 8);
                if (!v60 || (*(_BYTE *)(v60 + 45) & 4) == 0)
                  break;
                v61 = *(_DWORD *)(v60 + 20);
                if ((v61 & 0x800) == 0 && (v61 & 0x1800000) != 0x1000000)
                {
                  v63 = v11 & 0x40;
                  if (v6 < v58 || v6 >= (float)((float)*(int *)(v60 + 156) * 0.015625) || v63 == 0)
                    goto LABEL_69;
                  goto LABEL_10;
                }
              }
              if (v6 >= v58)
                break;
            }
          }
        }
LABEL_69:
        v62 = *(unsigned int *)((char *)v10 + 47);
        if (v62 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32))
        {
          v10 = *(unsigned int **)((v62 | ((unint64_t)*((unsigned __int8 *)v10 + 51) << 32)) + 8);
          if (v10)
          {
            v11 = *((_BYTE *)v10 + 45);
            if ((v11 & 4) != 0)
              continue;
          }
        }
        goto LABEL_9;
      }
      if ((v11 & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19638A09CLL);
      }
    }
    else
    {
LABEL_9:
      v12 = *((_DWORD *)this + 5);
      v10 = (unsigned int *)this;
    }
LABEL_10:
    if ((v12 & 0x40000) == 0)
      return 0;
    v71 = *(_QWORD *)a2;
    v75 = 0;
    v72 = 0u;
    v73 = 0u;
    v74 = 0;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    v79 = 0;
    v80 = 1;
    v81 = 0x100000000;
    (*(void (**)(unsigned int *, _QWORD, uint64_t *))(*(_QWORD *)v10 + 584))(v10, 0, &v71);
    WebCore::TransformState::flatten((WebCore::TransformState *)&v71, 0);
    v6 = *((float *)&v71 + 1);
    v5 = *(float *)&v71;
    v14 = v77;
    v77 = 0;
    if (v14)
      WTF::fastFree(v14, v4);
    v15 = v76;
    v76 = 0;
    if (v15)
      WTF::fastFree(v15, v4);
  }
  if ((v10[13] & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x19638A0BCLL);
  }
  WebCore::InlineIterator::firstRootInlineBoxFor(v10, (const WebCore::RenderBlockFlow *)v4, (uint64_t)&v71);
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v71) & 1) != 0)
    goto LABEL_19;
  v17 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v71);
  v18 = *(unsigned int *)(v17 + 16);
  if ((_DWORD)v18 != -1)
  {
    v19 = v17;
    v20 = v67;
    v69[0] = v67;
    ((void (*)(_QWORD *, uint64_t))off_1E3421C00[v18])(v69, v17);
    v25 = *(unsigned int *)(v19 + 16);
    if ((_DWORD)v25 != -1)
    {
      v26 = v21;
      v27 = v22;
      v28 = v23;
      v29 = v24;
      v69[0] = v67;
      if (((unsigned int (*)(_QWORD *, uint64_t))off_1E3421B00[v25])(v69, v19))
      {
        v26 = v27;
        v30 = v29;
      }
      else
      {
        v30 = v28;
      }
      WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v71);
      v13 = 0;
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v71) & 1) != 0)
        goto LABEL_20;
      v31 = v26 + v30;
      if (v6 < (float)(v26 + v30))
        goto LABEL_20;
      while (1)
      {
        if (v6 <= v31)
          goto LABEL_44;
        v32 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v71);
        v33 = *(unsigned int *)(v32 + 16);
        if ((_DWORD)v33 == -1)
          goto LABEL_84;
        v34 = v32;
        v69[0] = v67;
        ((void (*)(_QWORD *, uint64_t))off_1E3421C00[v33])(v69, v32);
        v37 = *(unsigned int *)(v34 + 16);
        if ((_DWORD)v37 == -1)
          goto LABEL_84;
        v38 = v35;
        v39 = v36;
        v69[0] = v67;
        v40 = ((unsigned int (*)(_QWORD *, uint64_t))off_1E3421B00[v37])(v69, v34) ? v39 : v38;
        if (v6 >= v40)
        {
LABEL_44:
          v13 = v20;
        }
        else
        {
          v41 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v71);
          v42 = *(unsigned int *)(v41 + 16);
          if ((_DWORD)v42 == -1)
            goto LABEL_84;
          v69[0] = v82;
          ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(v67, v69, v41);
          WebCore::InlineIterator::closestBoxForHorizontalPosition((WebCore::InlineIterator *)v67, 0, v5, (WebCore::InlineIterator::Box *)v69);
          if (v68 != -1)
            ((void (*)(_BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v68])(v82, v67);
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v69) & 1) != 0)
            goto LABEL_43;
          if (v70 == -1)
            goto LABEL_84;
          v67[0] = v82;
          v43 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3421B70[v70])(v67, v69);
          if ((*(_BYTE *)(v43 + 45) & 2) != 0)
          {
            v13 = (_QWORD *)v43;
            v44 = 0;
          }
          else
          {
LABEL_43:
            v44 = 1;
            v13 = v20;
          }
          if (v70 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v70])(v67, v69);
          if (!v44)
            goto LABEL_20;
        }
        v45 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)&v71);
        v46 = *(unsigned int *)(v45 + 16);
        if ((_DWORD)v46 == -1)
          goto LABEL_84;
        v47 = v45;
        v69[0] = v67;
        ((void (*)(_QWORD *, uint64_t))off_1E3421C00[v46])(v69, v45);
        v52 = *(unsigned int *)(v47 + 16);
        if ((_DWORD)v52 == -1)
          goto LABEL_84;
        v53 = v48;
        v54 = v49;
        v55 = v50;
        v56 = v51;
        v69[0] = v67;
        if (((unsigned int (*)(_QWORD *, uint64_t))off_1E3421B00[v52])(v69, v47))
        {
          v53 = v54;
          v57 = v56;
        }
        else
        {
          v57 = v55;
        }
        WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox((WebCore::InlineIterator::InlineBoxIterator *)&v71);
        if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v71) & 1) != 0)
          break;
        v31 = v53 + v57;
        v20 = v13;
        v13 = 0;
        if (v6 < (float)(v53 + v57))
          goto LABEL_20;
      }
LABEL_19:
      v13 = 0;
LABEL_20:
      if (DWORD2(v72) != -1)
        ((void (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[DWORD2(v72)])(v69, &v71);
      return v13;
    }
  }
LABEL_84:
  v66 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_QWORD *)WebCore::RenderBlockFlow::positionForPointWithInlineChildren(v66);
}

WebCore::Node *WebCore::RenderBlockFlow::positionForPointWithInlineChildren@<X0>(unsigned int *a1@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (**v5)();
  _UNKNOWN **v6;
  WebCore::Node *result;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  float v19;
  float v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  WebCore::Document *v29;
  uint64_t v30;
  int v31;
  int v32;
  const WebCore::InlineIterator::LineBox *v33;
  float v34;
  float v35;
  float v36;
  double v37;
  int v38;
  int v39;
  void *v40;
  WTF *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const WebCore::InlineIterator::LineBox *v48;
  float v49;
  double v50;
  unsigned int v51;
  uint64_t v52;
  WebCore::RenderBoxModelObject *v53;
  double v54;
  unsigned int v55;
  void *v56;
  WTF *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  WebCore::Editor *v65;
  void *v66;
  WebCore::Editor *v67;
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v77[4];
  int v78;
  unsigned int v79[4];
  int v80;
  WTF *v81[2];
  unsigned int v82;
  WebCore::Node *v83[2];
  unsigned int v84;
  _QWORD v85[2];
  unsigned int v86;
  _QWORD v87[2];
  unsigned int v88;
  _QWORD v89[2];
  int v90;
  _BYTE v91[16];
  unsigned int v92;
  unsigned int v93[4];
  unsigned int v94;
  char v95;
  _QWORD v96[2];

  WebCore::InlineIterator::firstLineBoxFor((uint64_t)a1, a2, (uint64_t)v91);
  if (v92 == -1)
    goto LABEL_83;
  *(_QWORD *)v93 = v89;
  v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
  if (((unsigned int (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v92])(v93, v91))
  {
    result = (WebCore::Node *)WebCore::RenderObject::createVisiblePosition(a1, 0, 1, a5);
    goto LABEL_189;
  }
  v74 = a1;
  v12 = (unsigned __int16)a1[31] >> 13;
  v70 = 2;
  v71 = 1;
  switch((unsigned __int16)a1[31] >> 13)
  {
    case 1:
    case 2:
      goto LABEL_6;
    case 3:
    case 5:
      v71 = 0;
      v12 = 3;
      goto LABEL_6;
    case 4:
      goto LABEL_7;
    default:
      v71 = 0;
      v12 = 0;
LABEL_6:
      v70 = v12;
LABEL_7:
      v72 = a3;
      v73 = a5;
      v89[0] = 0;
      v90 = 1;
      v87[0] = 0;
      v88 = 1;
      v85[0] = 0;
      v86 = 1;
      LOBYTE(v83[0]) = 0;
      v84 = -1;
      v13 = v92;
      if (v92 == -1)
        goto LABEL_83;
      v75 = v70 & 0xFFFFFFFD;
      ((void (*)(unsigned int *, WebCore::Node **, _BYTE *))off_1E3421B80[v92])(v93, v83, v91);
      v84 = v13;
      v6 = &__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix;
      break;
  }
  while (1)
  {
    *(_QWORD *)v93 = v81;
    if ((((uint64_t (*)(unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v13])(v93, v83) & 1) != 0)goto LABEL_84;
    if (!a4)
      goto LABEL_13;
    if (v84 == -1)
      break;
    *(_QWORD *)v93 = v81;
    if (((uint64_t (*)(unsigned int *, WebCore::Node **))off_1E3421B90[v84])(v93, v83) != a4)
      goto LABEL_81;
LABEL_13:
    if (v84 == -1)
      goto LABEL_83;
    v81[0] = (WTF *)v96;
    ((void (*)(unsigned int *__return_ptr, WTF **, WebCore::Node **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                + v84))(v93, v81, v83);
    v14 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v93);
    if (v94 != -1)
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v81, v93);
    if ((v14 & 1) != 0)
      goto LABEL_81;
    if (v88 == -1)
      goto LABEL_83;
    *(_QWORD *)v93 = v81;
    if (!((unsigned int (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v88])(v93, v87))goto LABEL_24;
    if (v88 == -1)
    {
      if (v84 == -1)
      {
        if ((v71 & 1) == 0)
          goto LABEL_83;
        v15 = 0xFFFFFFFFLL;
        goto LABEL_35;
      }
    }
    else if (v84 == -1)
    {
      ((void (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v88])(v93, v87);
      v88 = -1;
      goto LABEL_24;
    }
    *(_QWORD *)v93 = v87;
    ((void (*)(unsigned int *, _QWORD *, WebCore::Node **))off_1E3421B20[v84])(v93, v87, v83);
LABEL_24:
    v15 = v84;
    if ((v71 & 1) == 0)
    {
      if (v84 == 0xFFFFFFFFLL)
        goto LABEL_83;
      *(_QWORD *)v93 = v81;
      v16 = ((uint64_t (*)(unsigned int *, WebCore::Node **))off_1E3421BA0[v84])(v93, v83);
      v15 = v84;
      if (v16)
      {
        if (v84 == 0xFFFFFFFFLL)
          goto LABEL_83;
        v17 = *((_DWORD *)a2 + 1);
        *(_QWORD *)v93 = v81;
        if ((float)((float)v17 * 0.015625) < ((float (*)(unsigned int *, WebCore::Node **))off_1E3421A70[v84])(v93, v83))goto LABEL_84;
        v15 = v84;
        if (v75 == 1)
        {
          if (v84 == 0xFFFFFFFFLL)
            goto LABEL_83;
          v18 = *((_DWORD *)a2 + 1);
          *(_QWORD *)v93 = v81;
          if ((float)((float)v18 * 0.015625) == ((float (*)(unsigned int *, WebCore::Node **))off_1E3421A70[v84])(v93, v83))goto LABEL_84;
          v15 = v84;
        }
      }
    }
LABEL_35:
    if (v86 == -1)
    {
      if (v15 == 0xFFFFFFFFLL)
        goto LABEL_83;
    }
    else if (v15 == 0xFFFFFFFFLL)
    {
      ((void (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v86])(v93, v85);
      v86 = -1;
      goto LABEL_40;
    }
    *(_QWORD *)v93 = v85;
    ((void (*)(unsigned int *, _QWORD *, WebCore::Node **))off_1E3421B20[v15])(v93, v85, v83);
LABEL_40:
    if (v84 == -1)
      goto LABEL_83;
    *(_QWORD *)v93 = v81;
    v19 = ((float (*)(unsigned int *, WebCore::Node **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix
                                                                   + v84))(v93, v83);
    v20 = (float)*((int *)a2 + 1) * 0.015625;
    v21 = v20 == v19 && v75 == 1;
    if (v20 < v19 || v21)
    {
      if (!v71)
        goto LABEL_73;
      LOBYTE(v93[0]) = 0;
      v94 = -1;
      v22 = v84;
      if (v84 == -1)
        goto LABEL_83;
      ((void (*)(WTF **, unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v84])(v81, v93, v83);
      v94 = v22;
      v81[0] = (WTF *)v96;
      ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v22])(v81, v93);
      LOBYTE(v81[0]) = 0;
      v82 = -1;
      v23 = v94;
      if (v94 == -1)
        goto LABEL_83;
      ((void (*)(_QWORD *, WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v94])(v96, v81, v93);
      v82 = v23;
      if (v94 != -1)
      {
        ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v94])(v96, v93);
        v23 = v82;
        if (v82 == -1)
          goto LABEL_83;
      }
      while (1)
      {
        *(_QWORD *)v93 = v96;
        if ((((uint64_t (*)(unsigned int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v23])(v93, v81) & 1) != 0)break;
        if (v82 == -1)
          goto LABEL_83;
        v96[0] = &v95;
        ((void (*)(unsigned int *__return_ptr, _QWORD *, WTF **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                            + v82))(v93, v96, v81);
        v24 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v93);
        if (v94 != -1)
          ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v96, v93);
        if (!v24)
          break;
        if (v82 != -1)
        {
          *(_QWORD *)v93 = v96;
          ((void (*)(unsigned int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v82])(v93, v81);
          v23 = v82;
          if (v82 != -1)
            continue;
        }
        goto LABEL_83;
      }
      if (v82 == -1)
        goto LABEL_83;
      *(_QWORD *)v93 = v96;
      if ((((uint64_t (*)(unsigned int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v82])(v93, v81) & 1) != 0)goto LABEL_69;
      if (v82 == -1)
        goto LABEL_83;
      *(_QWORD *)v93 = v96;
      if (!((unsigned int (*)(unsigned int *, WTF **))off_1E3421BA0[v82])(v93, v81))
        goto LABEL_69;
      if (v82 == -1)
        goto LABEL_83;
      v25 = *((_DWORD *)a2 + 1);
      *(_QWORD *)v93 = v96;
      if ((float)((float)v25 * 0.015625) > ((float (*)(unsigned int *, WTF **))off_1E3421A70[v82])(v93, v81))
        goto LABEL_68;
      if (v75 == 1)
        goto LABEL_69;
      if (v82 == -1)
        goto LABEL_83;
      v26 = *((_DWORD *)a2 + 1);
      *(_QWORD *)v93 = v96;
      if ((float)((float)v26 * 0.015625) != ((float (*)(unsigned int *, WTF **))off_1E3421A70[v82])(v93, v81))LABEL_69:v27 = 1;
      else
LABEL_68:
        v27 = 0;
      if (v82 != -1)
        ((void (*)(unsigned int *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v82])(v93, v81);
      if (v27)
      {
LABEL_73:
        WebCore::InlineIterator::closestBoxForHorizontalPosition((WebCore::InlineIterator *)v83, 0, (float)*(int *)a2 * 0.015625, (WebCore::InlineIterator::Box *)v93);
        if (v90 == -1)
        {
          if (v94 == -1)
            goto LABEL_80;
        }
        else if (v94 == -1)
        {
          ((void (*)(WTF **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v90])(v81, v89);
          v90 = -1;
          goto LABEL_78;
        }
        v81[0] = (WTF *)v89;
        ((void (*)(WTF **, _QWORD *, unsigned int *))off_1E3421BB0[v94])(v81, v89, v93);
LABEL_78:
        if (v94 != -1)
          ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v81, v93);
LABEL_80:
        if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v89))
          goto LABEL_84;
      }
    }
LABEL_81:
    if (v84 != -1)
    {
      *(_QWORD *)v93 = v81;
      ((void (*)(unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v84])(v93, v83);
      v13 = v84;
      if (v84 != -1)
        continue;
    }
    goto LABEL_83;
  }
  while (1)
  {
    do
    {
LABEL_83:
      while (1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_84:
        if (v84 != -1)
          ((void (*)(unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v84])(v93, v83);
        v28 = (uint64_t)v74;
        v29 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v74 + 3)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 528)
                                                + 8)
                                    + 296);
        v30 = *((_QWORD *)v29 + 382);
        if (!v30)
        {
          v65 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v65, v29);
          v67 = (WebCore::Editor *)*((_QWORD *)v29 + 382);
          *((_QWORD *)v29 + 382) = v65;
          if (v67)
          {
            WebCore::Editor::~Editor(v67, v66);
            if (*(_DWORD *)v68)
            {
              *(_QWORD *)(v68 + 496) = 0;
              *(_OWORD *)(v68 + 464) = 0u;
              *(_OWORD *)(v68 + 480) = 0u;
              *(_OWORD *)(v68 + 432) = 0u;
              *(_OWORD *)(v68 + 448) = 0u;
              *(_OWORD *)(v68 + 400) = 0u;
              *(_OWORD *)(v68 + 416) = 0u;
              *(_OWORD *)(v68 + 368) = 0u;
              *(_OWORD *)(v68 + 384) = 0u;
              *(_OWORD *)(v68 + 336) = 0u;
              *(_OWORD *)(v68 + 352) = 0u;
              *(_OWORD *)(v68 + 304) = 0u;
              *(_OWORD *)(v68 + 320) = 0u;
              *(_OWORD *)(v68 + 272) = 0u;
              *(_OWORD *)(v68 + 288) = 0u;
              *(_OWORD *)(v68 + 240) = 0u;
              *(_OWORD *)(v68 + 256) = 0u;
              *(_OWORD *)(v68 + 208) = 0u;
              *(_OWORD *)(v68 + 224) = 0u;
              *(_OWORD *)(v68 + 176) = 0u;
              *(_OWORD *)(v68 + 192) = 0u;
              *(_OWORD *)(v68 + 144) = 0u;
              *(_OWORD *)(v68 + 160) = 0u;
              *(_OWORD *)(v68 + 112) = 0u;
              *(_OWORD *)(v68 + 128) = 0u;
              *(_OWORD *)(v68 + 80) = 0u;
              *(_OWORD *)(v68 + 96) = 0u;
              *(_OWORD *)(v68 + 48) = 0u;
              *(_OWORD *)(v68 + 64) = 0u;
              *(_OWORD *)(v68 + 16) = 0u;
              *(_OWORD *)(v68 + 32) = 0u;
              *(_OWORD *)v68 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v68, v69);
            }
          }
          v30 = *((_QWORD *)v29 + 382);
          v28 = (uint64_t)v74;
        }
        v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 16) + 8) + 680) + 370);
        v32 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v89);
        if (v31 != 1)
          break;
        if (!v32)
          goto LABEL_115;
        if (v86 != -1)
        {
          *(_QWORD *)v93 = v83;
          if ((((uint64_t (*)(unsigned int *, _QWORD *))v5[v86])(v93, v85) & 1) == 0)
          {
            WebCore::InlineIterator::closestBoxForHorizontalPosition((WebCore::InlineIterator *)v85, 0, (float)*(int *)a2 * 0.015625, (WebCore::InlineIterator::Box *)v93);
            if (v90 != -1)
            {
              if (v94 == -1)
              {
                ((void (*)(WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v90])(v83, v89);
                v90 = -1;
              }
              else
              {
LABEL_112:
                v83[0] = (WebCore::Node *)v89;
                ((void (*)(WebCore::Node **, _QWORD *, unsigned int *))off_1E3421BB0[v94])(v83, v89, v93);
              }
              if (v94 != -1)
                ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v83, v93);
              goto LABEL_115;
            }
            if (v94 != -1)
              goto LABEL_112;
          }
LABEL_115:
          if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v89) & 1) != 0)
          {
LABEL_116:
            if (v86 != -1)
            {
              *(_QWORD *)v93 = v83;
              if ((((uint64_t (*)(unsigned int *, _QWORD *))v5[v86])(v93, v85) & 1) == 0)
              {
                v81[0] = 0;
                WebCore::InlineIterator::lastLeafOnLineInLogicalOrderWithNode((WebCore::InlineIterator::LineBoxIterator *)v85, (uint64_t *)v81, v93);
                if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v93) & 1) == 0)
                {
                  LOBYTE(v77[0]) = 0;
                  v78 = -1;
                  v55 = v94;
                  if (v94 != -1)
                  {
                    ((void (*)(WebCore::Node **, unsigned int *, unsigned int *))*(&off_1E3421B10 + v94))(v83, v77, v93);
                    v78 = v55;
                  }
                  WebCore::positionForRun((uint64_t)v83, v28, v77, 0);
                  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v83, v73);
                  *(_BYTE *)(v73 + 16) = 1;
                  result = v83[0];
                  if (v83[0])
                  {
                    if (*((_DWORD *)v83[0] + 6) == 2)
                    {
                      if ((*((_WORD *)v83[0] + 15) & 0x400) == 0)
                        result = (WebCore::Node *)WebCore::Node::removedLastRef(v83[0], v56);
                    }
                    else
                    {
                      *((_DWORD *)v83[0] + 6) -= 2;
                    }
                  }
                  if (v78 != -1)
                    result = (WebCore::Node *)((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v78])(v96, v77);
                  v78 = -1;
                  if (v94 != -1)
                    result = (WebCore::Node *)((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v83, v93);
                  v57 = v81[0];
                  v81[0] = 0;
                  if (v57)
                  {
                    v58 = *((unsigned int *)v57 + 9);
                    v59 = (unsigned int *)*((_QWORD *)v57 + 3);
                    if ((_DWORD)v58)
                    {
                      v60 = 24 * v58;
                      do
                      {
                        v61 = v59[4];
                        if ((_DWORD)v61 != -1)
                          ((void (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v61])(v93, v59);
                        v59[4] = -1;
                        v59 += 6;
                        v60 -= 24;
                      }
                      while (v60);
                      v59 = (unsigned int *)*((_QWORD *)v57 + 3);
                    }
                    if (v59)
                    {
                      *((_QWORD *)v57 + 3) = 0;
                      *((_DWORD *)v57 + 8) = 0;
                      WTF::fastFree((WTF *)v59, v56);
                    }
                    v62 = *((unsigned int *)v57 + 4);
                    if ((_DWORD)v62 != -1)
                      ((void (*)(unsigned int *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v62])(v93, v57);
                    *((_DWORD *)v57 + 4) = -1;
                    result = (WebCore::Node *)WTF::fastFree(v57, v56);
                  }
                  goto LABEL_183;
                }
                if (v94 != -1)
                  ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v83, v93);
                v41 = v81[0];
                v81[0] = 0;
                if (v41)
                {
                  v42 = *((unsigned int *)v41 + 9);
                  v43 = (unsigned int *)*((_QWORD *)v41 + 3);
                  if ((_DWORD)v42)
                  {
                    v44 = 24 * v42;
                    do
                    {
                      v45 = v43[4];
                      if ((_DWORD)v45 != -1)
                        ((void (*)(unsigned int *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v45])(v93, v43);
                      v43[4] = -1;
                      v43 += 6;
                      v44 -= 24;
                    }
                    while (v44);
                    v43 = (unsigned int *)*((_QWORD *)v41 + 3);
                  }
                  if (v43)
                  {
                    *((_QWORD *)v41 + 3) = 0;
                    *((_DWORD *)v41 + 8) = 0;
                    WTF::fastFree((WTF *)v43, v40);
                  }
                  v46 = *((unsigned int *)v41 + 4);
                  if ((_DWORD)v46 != -1)
                    ((void (*)(unsigned int *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v46])(v93, v41);
                  *((_DWORD *)v41 + 4) = -1;
                  WTF::fastFree(v41, v40);
                }
              }
              result = (WebCore::Node *)WebCore::RenderObject::createVisiblePosition((unsigned int *)v28, 0, 1, v73);
              goto LABEL_183;
            }
          }
          else
          {
LABEL_134:
            if (v90 != -1)
            {
              v47 = *(unsigned int *)a2;
              v83[0] = (WebCore::Node *)v96;
              ((void (*)(unsigned int *__return_ptr, WebCore::Node **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v90])(v93, v83, v89);
              WebCore::InlineIterator::contentStartInBlockDirection((WebCore::InlineIterator *)v93, v48);
              LODWORD(v81[0]) = v47;
              v50 = v49 * 64.0;
              if (v50 >= 2147483650.0)
              {
                v51 = 0x7FFFFFFF;
              }
              else if (v50 <= -2147483650.0)
              {
                v51 = 0x80000000;
              }
              else
              {
                v51 = (int)v50;
              }
              HIDWORD(v81[0]) = v51;
              if (v94 != -1)
                ((void (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v94])(v83, v93);
              if ((*(_BYTE *)(v28 + 21) & 0x10) != 0)
                v81[0] = (WTF *)(v51 | (unint64_t)(v47 << 32));
              if (v90 != -1)
              {
                *(_QWORD *)v93 = v83;
                if ((*(_BYTE *)(((uint64_t (*)(unsigned int *, _QWORD *))off_1E3421B70[v90])(v93, v89) + 20) & 2) != 0)
                {
                  if (v90 != -1)
                  {
                    *(_QWORD *)v93 = v83;
                    v53 = (WebCore::RenderBoxModelObject *)((uint64_t (*)(unsigned int *, _QWORD *))off_1E3421B70[v90])(v93, v89);
                    if ((*((_BYTE *)v53 + 45) & 4) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19638B12CLL);
                    }
                    result = (WebCore::Node *)WebCore::positionForPointRespectingEditingBoundaries(v73, v28, v53, v81, v72, v54);
                    goto LABEL_183;
                  }
                }
                else if (v90 != -1)
                {
                  *(_QWORD *)v93 = v83;
                  v52 = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E3421B70[v90])(v93, v89);
                  result = (WebCore::Node *)(*(uint64_t (**)(uint64_t, WTF **, _QWORD, _QWORD))(*(_QWORD *)v52 + 352))(v52, v81, v72, 0);
                  goto LABEL_183;
                }
              }
            }
          }
        }
      }
      if ((v32 & 1) != 0)
        goto LABEL_116;
      WebCore::InlineIterator::previousLineBoxContentBottomOrBorderAndPadding((WebCore::InlineIterator *)v87, v33);
    }
    while (v88 == -1);
    v35 = v34;
    *(_QWORD *)v93 = v83;
    v36 = ((float (*)(unsigned int *, _QWORD *))off_1E3421BC0[v88])(v93, v87);
    if (v36 >= v35)
      v36 = v35;
    v37 = v36 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
LABEL_101:
      v39 = *((_DWORD *)a2 + 1);
      if (v39 < v38)
        goto LABEL_104;
      goto LABEL_102;
    }
    if (v37 > -2147483650.0)
    {
      v38 = (int)v37;
      goto LABEL_101;
    }
    v39 = *((_DWORD *)a2 + 1);
    v38 = 0x80000000;
LABEL_102:
    if (v75 != 1 || v39 != v38)
      goto LABEL_134;
LABEL_104:
    if (v88 != -1)
    {
      v83[0] = (WebCore::Node *)v81;
      ((void (*)(unsigned int *__return_ptr, WebCore::Node **, _QWORD *))v6[v88])(v93, v83, v87);
      if (v94 != -1)
        break;
    }
  }
  v83[0] = (WebCore::Node *)v81;
  if (((unsigned int (*)(WebCore::Node **, unsigned int *))off_1E3421BD0[v94])(v83, v93))
  {
    WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v93, (uint64_t)v83);
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v83) & 1) == 0)
    {
      if (v94 == -1)
      {
        if (v84 == -1)
          goto LABEL_172;
      }
      else if (v84 == -1)
      {
        ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v81, v93);
        v94 = -1;
        goto LABEL_172;
      }
      v81[0] = (WTF *)v93;
      ((void (*)(WTF **, unsigned int *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal[v84])(v81, v93, v83);
    }
LABEL_172:
    if (v84 != -1)
      ((void (*)(WTF **, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v84])(v81, v83);
  }
  LOBYTE(v79[0]) = 0;
  v80 = -1;
  v63 = v94;
  if (v94 != -1)
  {
    ((void (*)(WebCore::Node **, unsigned int *, unsigned int *))*(&off_1E3421B10 + v94))(v83, v79, v93);
    v80 = v63;
  }
  WebCore::positionForRun((uint64_t)v83, v28, v79, 1);
  WebCore::VisiblePosition::canonicalPosition((WebCore::VisiblePosition *)v83, v73);
  *(_BYTE *)(v73 + 16) = 1;
  result = v83[0];
  if (v83[0])
  {
    if (*((_DWORD *)v83[0] + 6) == 2)
    {
      if ((*((_WORD *)v83[0] + 15) & 0x400) == 0)
        result = (WebCore::Node *)WebCore::Node::removedLastRef(v83[0], v64);
    }
    else
    {
      *((_DWORD *)v83[0] + 6) -= 2;
    }
  }
  if (v80 != -1)
    result = (WebCore::Node *)((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v80])(v81, v79);
  v80 = -1;
  if (v94 != -1)
    result = (WebCore::Node *)((uint64_t (*)(WebCore::Node **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v94])(v83, v93);
LABEL_183:
  if (v86 != -1)
    result = (WebCore::Node *)((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v86])(v93, v85);
  if (v88 != -1)
    result = (WebCore::Node *)((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v88])(v93, v87);
  if (v90 != -1)
    result = (WebCore::Node *)((uint64_t (*)(unsigned int *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v90])(v93, v89);
LABEL_189:
  if (v92 != -1)
    return (WebCore::Node *)((uint64_t (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v92])(v93, v91);
  return result;
}

uint64_t WebCore::InlineIterator::previousLineBoxContentBottomOrBorderAndPadding(WebCore::InlineIterator *this, const WebCore::InlineIterator::LineBox *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  unsigned int v12;
  _QWORD v13[2];
  unsigned int v14;
  char v15;

  LOBYTE(v13[0]) = 0;
  v14 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v2])(v11, v13, this);
    v14 = v2;
    v11[0] = &v15;
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(v11, v13);
    LOBYTE(v11[0]) = 0;
    v12 = -1;
    v4 = v14;
    if (v14 != -1)
    {
      ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v14])(&v15, v11, v13);
      v12 = v4;
      if (v14 == -1
        || (((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v14])(&v15, v13), v4 = v12, v12 != -1))
      {
        v13[0] = &v15;
        v5 = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v4])(v13, v11);
        if (v12 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v12])(v13, v11);
        if (v5)
        {
          v6 = *((unsigned int *)this + 4);
          if ((_DWORD)v6 != -1)
          {
            v13[0] = v11;
            v7 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21formattingContextRootEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v6])(v13, this);
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 1048))(v7);
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 960))(v7);
          }
        }
        else
        {
          v9 = *((unsigned int *)this + 4);
          if ((_DWORD)v9 != -1)
          {
            v13[0] = v11;
            return (*(&off_1E3421AD0 + v9))((int)v13, this);
          }
        }
      }
    }
  }
  v10 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::positionForRun(v10);
}

uint64_t WebCore::positionForRun(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  char v26;
  unsigned __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned __int16 *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;

  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a3);
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v9 = *(_BYTE *)(a1 + 12) & 0xF0;
LABEL_77:
    *(_BYTE *)(a1 + 12) = v9;
    return result;
  }
  v10 = a3[4];
  if ((_DWORD)v10 == -1)
    goto LABEL_86;
  v46 = &v45;
  v11 = ((uint64_t (*)(char **, unsigned int *))off_1E3421B70[v10])(&v46, a3);
  v12 = v11;
  v13 = *(_BYTE *)(v11 + 45);
  if ((v13 & 1) == 0)
  {
    v14 = *(unsigned __int16 **)(*(_QWORD *)(v11 + 24) + 8);
    if (v14)
    {
      if ((~v14[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v14 + 368))(v14))
          goto LABEL_31;
        v13 = *(_BYTE *)(v12 + 45);
      }
    }
  }
  if ((v13 & 1) != 0 || !*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8))
  {
LABEL_31:
    v26 = *(_BYTE *)(a2 + 45);
    if ((v26 & 1) == 0)
    {
      v27 = *(unsigned __int16 **)(*(_QWORD *)(a2 + 24) + 8);
      if (v27)
      {
        if ((~v27[14] & 0x408) == 0)
        {
          if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v27 + 368))(v27))
            goto LABEL_68;
          v26 = *(_BYTE *)(a2 + 45);
        }
      }
    }
    if ((v26 & 1) == 0)
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v28)
      {
        if ((*(_WORD *)(v28 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19638B860);
        }
        *(_DWORD *)(v28 + 24) += 2;
      }
LABEL_40:
      v29 = 536;
      if (a4)
        v29 = 528;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + v29))(a2);
      *(_QWORD *)a1 = v28;
      *(_DWORD *)(a1 + 8) = result;
      if (v28)
      {
        v30 = result;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 208))(v28);
        if (v30)
          v31 = 10;
        else
          v31 = 9;
        if ((result & 1) != 0)
          v32 = 8;
        else
          v32 = v31;
        goto LABEL_76;
      }
      goto LABEL_75;
    }
LABEL_68:
    v28 = 0;
    goto LABEL_40;
  }
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a3) & 1) == 0)
  {
    v15 = a3[4];
    if ((_DWORD)v15 == -1)
      goto LABEL_86;
    v46 = &v45;
    if ((((uint64_t (*)(char **, unsigned int *))off_1E3421C20[v15])(&v46, a3) & 1) == 0)
    {
      v33 = a3[4];
      if ((_DWORD)v33 == -1)
        goto LABEL_86;
      v46 = &v45;
      v34 = ((uint64_t (*)(char **, unsigned int *))off_1E3421B70[v33])(&v46, a3);
      v35 = v34;
      v36 = *(_BYTE *)(v34 + 45);
      if ((v36 & 1) == 0)
      {
        v37 = *(unsigned __int16 **)(*(_QWORD *)(v34 + 24) + 8);
        if (v37)
        {
          if ((~v37[14] & 0x408) == 0)
          {
            if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v37 + 368))(v37))
              goto LABEL_69;
            v36 = *(_BYTE *)(v35 + 45);
          }
        }
      }
      if ((v36 & 1) == 0)
      {
        v22 = *(_DWORD **)(*(_QWORD *)(v35 + 24) + 8);
        if (v22)
          v22[6] += 2;
        if (a4)
          goto LABEL_59;
        goto LABEL_70;
      }
LABEL_69:
      v22 = 0;
      if (a4)
      {
LABEL_59:
        v38 = a3[4];
        if ((_DWORD)v38 == -1)
          goto LABEL_86;
        v46 = &v45;
        v39 = (_QWORD *)((uint64_t (*)(char **, unsigned int *))off_1E3421B70[v38])(&v46, a3);
        v40 = 66;
LABEL_72:
        result = (*(uint64_t (**)(void))(*v39 + 8 * v40))();
        *(_QWORD *)a1 = v22;
        *(_DWORD *)(a1 + 8) = result;
        if (!v22)
          goto LABEL_75;
        v42 = result;
LABEL_74:
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 208))(v22);
        if ((result & 1) == 0)
        {
          if (v42)
            v32 = 10;
          else
            v32 = 9;
          goto LABEL_76;
        }
LABEL_75:
        v32 = 8;
LABEL_76:
        v9 = *(_BYTE *)(a1 + 12) & 0xF0 | v32;
        goto LABEL_77;
      }
LABEL_70:
      v43 = a3[4];
      if ((_DWORD)v43 == -1)
        goto LABEL_86;
      v46 = &v45;
      v39 = (_QWORD *)((uint64_t (*)(char **, unsigned int *))off_1E3421B70[v43])(&v46, a3);
      v40 = 67;
      goto LABEL_72;
    }
  }
  v16 = a3[4];
  if ((_DWORD)v16 == -1)
    goto LABEL_86;
  v46 = &v45;
  if ((((uint64_t (*)(char **, unsigned int *))off_1E3421C20[v16])(&v46, a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19638B820);
  }
  v17 = a3[4];
  if ((_DWORD)v17 == -1)
    goto LABEL_86;
  v46 = &v45;
  v18 = ((uint64_t (*)(char **, unsigned int *))off_1E3421B70[v17])(&v46, a3);
  v19 = *(_BYTE *)(v18 + 45);
  if ((v19 & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19638B840);
  }
  v20 = v18;
  if ((*(_BYTE *)(v18 + 45) & 1) == 0)
  {
    v21 = *(unsigned __int16 **)(*(_QWORD *)(v18 + 24) + 8);
    if (v21)
    {
      if ((~v21[14] & 0x408) == 0)
      {
        if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v21 + 368))(v21))
          goto LABEL_61;
        v19 = *(_BYTE *)(v20 + 45);
      }
    }
  }
  if ((v19 & 1) != 0)
  {
LABEL_61:
    v22 = 0;
    if (a4)
      goto LABEL_27;
    goto LABEL_62;
  }
  v22 = *(_DWORD **)(*(_QWORD *)(v20 + 24) + 8);
  if (v22)
    v22[6] += 2;
  if (a4)
  {
LABEL_27:
    v23 = a3[4];
    if ((_DWORD)v23 != -1)
    {
      v46 = &v45;
      if ((((uint64_t (*)(char **, unsigned int *))off_1E3421C20[v23])(&v46, a3) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19638B890);
      }
      v24 = a3[4];
      if ((_DWORD)v24 != -1)
      {
        v46 = &v45;
        v25 = off_1E3421BE0;
        goto LABEL_66;
      }
    }
    goto LABEL_86;
  }
LABEL_62:
  v41 = a3[4];
  if ((_DWORD)v41 != -1)
  {
    v46 = &v45;
    if ((((uint64_t (*)(char **, unsigned int *))off_1E3421C20[v41])(&v46, a3) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19638B8B0);
    }
    v24 = a3[4];
    if ((_DWORD)v24 != -1)
    {
      v46 = &v45;
      v25 = off_1E3421BF0;
LABEL_66:
      result = ((uint64_t (*)(char **, unsigned int *))v25[v24])(&v46, a3);
      v42 = result;
      *(_QWORD *)a1 = v22;
      *(_DWORD *)(a1 + 8) = result;
      if (!v22)
        goto LABEL_75;
      goto LABEL_74;
    }
  }
LABEL_86:
  v44 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderBlockFlow::positionForPoint(v44);
}

unsigned int *WebCore::RenderBlockFlow::positionForPoint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  unsigned int *result;
  unsigned int v5;
  WebCore::Node *v6;
  int v7;
  char v8;

  (*(void (**)(WebCore::Node **__return_ptr))(*(_QWORD *)a1 + 352))(&v6);
  result = (unsigned int *)v6;
  if (v6)
  {
    v5 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v5 + 2;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
    v6 = 0;
    if (v5)
    {
      result[6] = v5;
    }
    else if ((*((_WORD *)result + 15) & 0x400) == 0)
    {
      return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = v7;
    *(_BYTE *)(a2 + 12) = v8;
  }
  return result;
}

unsigned int *WebCore::RenderBlockFlow::positionForPoint@<X0>(WebCore::RenderBlock *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::RenderBlock::positionForPoint(a1, a2, a3, 0, a4);
}

uint64_t WebCore::RenderBlockFlow::addFocusRingRectsForInlineChildren(unsigned int *a1, const WebCore::RenderBlockFlow *a2, int *a3)
{
  __int128 *v3;
  double v4;
  uint64_t (**v5)();
  float v6;
  double v7;
  int v8;
  unsigned int v9;
  char *v10;
  double v11;
  float v12;
  uint64_t v15;
  uint64_t result;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  int v28;
  int v29;
  double v30;
  int v31;
  float v32;
  double v33;
  int v34;
  double v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  _QWORD v42[2];
  int v43;
  _BYTE v44[16];
  unsigned int v45;
  char v46;

  WebCore::InlineIterator::firstRootInlineBoxFor(a1, a2, (uint64_t)v44);
  v15 = v45;
  if (v45 == -1)
    goto LABEL_49;
  v3 = &v41;
  v5 = off_1E3421B60;
  v10 = &v46;
  v6 = 0.015625;
  v7 = 64.0;
  v8 = 0x7FFFFFFF;
  v11 = 2147483650.0;
  v9 = 0x80000000;
  v4 = -2147483650.0;
LABEL_3:
  v42[0] = v3;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v15])(v42, v44);
  if (!(_DWORD)result)
  {
    if (v45 != -1)
    {
      v42[0] = v3;
      if ((((uint64_t (*)(_QWORD *, _BYTE *))v5[v45])(v42, v44) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19638BCD0);
      }
      if (v45 != -1)
      {
        *(_QWORD *)&v41 = v10;
        ((void (*)(_QWORD *__return_ptr, __int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v45])(v42, &v41, v44);
        if (v45 != -1)
        {
          *(_QWORD *)&v41 = v10;
          if ((((uint64_t (*)(__int128 *, _BYTE *))v5[v45])(&v41, v44) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19638BCF0);
          }
          if (v45 != -1)
          {
            *(_QWORD *)&v41 = v10;
            ((void (*)(__int128 *, _BYTE *))off_1E3421C00[v45])(&v41, v44);
            if (v43 != -1)
            {
              v21 = v17;
              v22 = v18;
              v23 = v19;
              v24 = v20;
              *(_QWORD *)&v41 = v10;
              v25 = ((float (*)(__int128 *, _QWORD *))off_1E3421BC0[v43])(&v41, v42);
              v12 = v25 >= v22 ? v25 : v22;
              if (v43 != -1)
              {
                *(_QWORD *)&v41 = v10;
                v26 = ((float (*)(__int128 *, _QWORD *))off_1E3421C10[v43])(&v41, v42);
                if ((float)(v22 + v24) < v26)
                  v26 = v22 + v24;
                v27 = (float)(v21 + (float)((float)*a3 * v6)) * v7;
                v28 = (int)v27;
                if (v27 <= v4)
                  v28 = v9;
                if (v27 < v11)
                  v29 = v28;
                else
                  v29 = v8;
                v30 = v23 * v7;
                if (v30 < v11)
                {
                  if (v30 > v4)
                  {
                    v31 = (int)v30;
                    goto LABEL_25;
                  }
                  goto LABEL_50;
                }
                v31 = 0x7FFFFFFF;
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    while (1)
    {
LABEL_49:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
      v31 = 0x80000000;
LABEL_25:
      v32 = v26 - v12;
      v33 = (float)(v12 + (float)((float)a3[1] * v6)) * v7;
      v34 = (int)v33;
      if (v33 <= v4)
        v34 = v9;
      if (v33 >= v11)
        v34 = v8;
      *(_QWORD *)&v41 = __PAIR64__(v34, v29);
      DWORD2(v41) = v31;
      v35 = v32 * v7;
      if (v35 >= v11)
      {
        HIDWORD(v41) = v8;
        if (v31 < 1)
          goto LABEL_35;
      }
      else
      {
        v36 = (int)fmax(v35, v4);
        HIDWORD(v41) = v36;
        if (v31 < 1 || v36 < 1)
          goto LABEL_35;
      }
      v37 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v37 == *((_DWORD *)a2 + 2))
      {
        v40 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v37 + 1, (unint64_t)&v41);
        v37 = *((unsigned int *)a2 + 3);
        v38 = *(_QWORD *)a2;
        v39 = *v40;
      }
      else
      {
        v38 = *(_QWORD *)a2;
        v39 = v41;
      }
      *(_OWORD *)(v38 + 16 * v37) = v39;
      ++*((_DWORD *)a2 + 3);
LABEL_35:
      if (v43 != -1)
        ((void (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v43])(&v41, v42);
      if (v45 != -1)
      {
        v42[0] = v3;
        ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v45])(v42, v44);
        v15 = v45;
        if (v45 != -1)
          goto LABEL_3;
      }
    }
  }
  if (v45 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v45])(v42, v44);
  return result;
}

void WebCore::RenderBlockFlow::invalidateLineLayoutPath(uint64_t a1, int a2)
{
  unsigned int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  WebCore::RenderElement *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WebCore::LayoutIntegration::LineLayout *v22;
  uint64_t v23;
  uint64_t i;
  _BYTE v25[16];
  char v26;
  __int128 v27;
  char v28;

  v3 = *(unsigned __int16 *)(a1 + 69);
  if (v3 >> 13 == 1)
  {
    v5 = *(_DWORD *)(a1 + 240);
    if (v5 == 1)
    {
      v6 = *(_QWORD *)(a1 + 232);
      if (!v6)
        goto LABEL_17;
      v7 = *(_QWORD *)(v6 + 80);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 44);
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 32);
          v10 = v9 + 152 * v8;
          v11 = 152 * v8;
          while (v11)
          {
            v12 = *(_QWORD *)(v10 - 144);
            v10 -= 152;
            v11 -= 152;
            if (v12 >= 2)
            {
              v13 = v9 + v11;
              goto LABEL_11;
            }
          }
          v13 = *(_QWORD *)(v7 + 32);
LABEL_11:
          v14 = (float)((float)((float)(*(float *)(v13 + 36) + *(float *)(v13 + 44)) - *(float *)(v9 + 36))
                      + (float)((float)(*(float *)(v7 + 16) + *(float *)(v7 + 8)) + *(float *)(v7 + 12)))
              * 64.0;
          if (v14 >= 2147483650.0)
          {
            LODWORD(v7) = 0x7FFFFFFF;
          }
          else if (v14 <= -2147483650.0)
          {
            LODWORD(v7) = 0x80000000;
          }
          else
          {
            LODWORD(v7) = (int)v14;
          }
        }
        else
        {
          LODWORD(v7) = 0;
        }
      }
      if (!*(_BYTE *)(a1 + 212))
        *(_BYTE *)(a1 + 212) = 1;
      *(_DWORD *)(a1 + 208) = v7;
      if (a2 == 1)
      {
LABEL_17:
        v5 = 1;
        goto LABEL_18;
      }
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v27) = 0;
        v28 = 0;
        v25[0] = 0;
        v26 = 0;
        WebCore::RenderObject::issueRepaint(a1, &v27, 0, 0, (uint64_t)v25);
      }
      v19 = *(unsigned int *)(a1 + 64);
      if (v19 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
      {
        v20 = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
        v23 = a1;
        for (i = v20; i; v20 = i)
        {
          v21 = *(_DWORD *)(v20 + 20);
          if ((v21 & 0x200) != 0)
          {
            if ((v21 & 0x800) != 0 || (v21 & 0x1800000) == 0x1000000)
            {
              if (*(_DWORD *)(a1 + 240) == 1)
                v22 = *(WebCore::LayoutIntegration::LineLayout **)(a1 + 232);
              else
                v22 = 0;
              if ((*(_BYTE *)(v20 + 45) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19638C09CLL);
              }
              if (WebCore::LayoutIntegration::LineLayout::contains(v22, (const WebCore::RenderElement *)v20)
                && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) + 8) + 40) + 8)
                                                                                         + 1944)
                                                                             + 24)
                                                                 + 8)
                                                     + 40)
                                         + 8)
                             + 3382))
              {
                LOBYTE(v27) = 0;
                v28 = 0;
                v25[0] = 0;
                v26 = 0;
                WebCore::RenderObject::issueRepaint(v20, &v27, 0, 0, (uint64_t)v25);
              }
            }
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v20, 1, 1);
          }
          WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v23);
        }
      }
      v5 = *(_DWORD *)(a1 + 240);
    }
    if (v5 == -1)
      goto LABEL_19;
    if (!v5)
      goto LABEL_20;
LABEL_18:
    ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v5])(&v27, a1 + 232);
LABEL_19:
    *(_DWORD *)(a1 + 240) = 0;
LABEL_20:
    if (a2 == 1)
      *(_WORD *)(a1 + 69) &= 0x1FFFu;
    v15 = *(_DWORD *)(a1 + 20);
    if ((v15 & 0x28) == 0)
    {
      *(_DWORD *)(a1 + 20) = v15 | 8;
      v16 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a1, 0);
      WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a1, v16);
      if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
      {
        if ((*(_BYTE *)(a1 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19638C050);
        }
        v17 = *(_QWORD *)(a1 + 144);
        if (v17)
        {
          v18 = *(_DWORD *)(v17 + 8) + 1;
          *(_DWORD *)(v17 + 8) = v18;
        }
        else
        {
          v18 = MEMORY[8];
        }
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v17 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v18)
        {
          __break(0xC471u);
          JUMPOUT(0x19638C07CLL);
        }
        *(_DWORD *)(v17 + 8) = v18 - 1;
      }
    }
    return;
  }
  if (v3 >> 13 == 2)
    *(_WORD *)(a1 + 69) = v3 & 0x1FFF;
}

void WebCore::RenderCombineText::combineTextIfNeeded(WebCore::RenderCombineText *this)
{
  char v1;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  float v11;
  WebCore::FontCascadeFonts *v12;
  int v13;
  WebCore *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  WebCore *v18;
  unint64_t StatusReg;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore *v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  float v27;
  float v28;
  WTF *v29;
  WebCore *v30;
  WTF::StringImpl *v31;
  int v32;
  char *v33;
  WTF *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  WebCore *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore *v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  float v45;
  float v46;
  float v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unsigned int *v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  void *v59;
  void *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  WTF *v66;
  WTF::StringImpl *v67;
  unsigned int *v68;
  WTF *v69;
  WTF::StringImpl *v70;
  unsigned int *v71;
  WebCore *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore *v76;
  uint64_t v77;
  unsigned int v78;
  void *v79;
  float v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WebCore *v95;
  int v96;
  WebCore::RenderElement *v97;
  uint64_t v98;
  int v99;
  unsigned int *v100;
  void *v101;
  WTF::StringImpl *v102;
  unsigned int *v103;
  WTF *v104;
  void *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF::StringImpl **v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl **v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WebCore *v118[21];
  WTF *v119;
  int v120;
  __int16 v121;
  WebCore *v122[21];
  WTF *v123;
  int v124;
  __int16 v125;
  _BYTE v126[156];
  float v127;
  WTF *v128;
  int v129;
  __int16 v130;
  uint64_t v131;
  int32x2_t v132;
  char v133;
  WTF::StringImpl *v134[37];
  _BYTE v135[156];
  float v136;
  unsigned int v137;
  WTF *v138;
  int v139;
  __int16 v140;

  v1 = *((_BYTE *)this + 140);
  if ((v1 & 2) == 0)
    return;
  if ((*((_BYTE *)this + 140) & 1) != 0)
  {
    if ((*((_WORD *)this + 59) & 0x800) != 0)
    {
      {
        WebCore::originalTextMap(void)::map = 0;
      }
      WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::originalTextMap(void)::map, (uint64_t)this, v134);
    }
    else
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
      if (v3)
        *(_DWORD *)v3 += 2;
      v134[0] = v3;
    }
    WebCore::RenderText::setRenderedText(this, v134);
    v5 = v134[0];
    v134[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v1 = *((_BYTE *)this + 140);
  }
  *((_BYTE *)this + 140) = v1 & 0xFC;
  v6 = *((_QWORD *)this + 4);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6 + 8);
  if ((*(_DWORD *)(v7 + 124) & 0xC000) != 0x4000)
    return;
  v8 = *(_QWORD *)(v7 + 112);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v135, (const WebCore::FontDescription *)(v8 + 48));
  v10 = *(WTF **)(v8 + 216);
  ++*(_DWORD *)v10;
  v138 = v10;
  v140 = *(_WORD *)(v8 + 228);
  v139 = *(_DWORD *)(v8 + 224);
  v11 = v136;
  v12 = *(WebCore::FontCascadeFonts **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112) + 248);
  if (v12)
  {
    v13 = (*(_DWORD *)v12)++;
    v14 = (WebCore *)*((_QWORD *)v12 + 14);
    if (v13)
    {
      *(_DWORD *)v12 = v13;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v12, v9);
      WTF::fastFree(v104, v105);
    }
  }
  else
  {
    v14 = 0;
  }
  v137 &= ~1u;
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v122, (const WebCore::FontDescription *)v135);
  v15 = v138;
  ++*(_DWORD *)v138;
  v123 = v15;
  v125 = v140;
  v124 = v139;
  WebCore::FontCascade::FontCascade((uint64_t)v134, (uint64_t *)v122, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112) + 32);
  v17 = (unsigned int *)v123;
  v123 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v106 = v17[1];
      if ((_DWORD)v106)
      {
        v107 = (WTF::StringImpl **)(v17 + 2);
        v108 = 8 * v106;
        do
        {
          v109 = *v107;
          *v107 = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 2)
              WTF::StringImpl::destroy(v109, v16);
            else
              *(_DWORD *)v109 -= 2;
          }
          ++v107;
          v108 -= 8;
        }
        while (v108);
      }
      WTF::fastFree((WTF *)v17, v16);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v122, v16);
  if (v14)
    ++*((_DWORD *)v14 + 2);
  v122[0] = v14;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v20 = *(_QWORD *)(StatusReg + 736);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
    v21 = WebCore::threadGlobalDataSlow(v18);
  v22 = *(_QWORD *)(v21 + 80);
  if (!v22)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v21);
    v22 = *(_QWORD *)(v21 + 80);
  }
  WebCore::FontCache::updateFontCascade(v22, (uint64_t)v134, v122);
  v23 = v122[0];
  v122[0] = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v23 + 8))(v23);
    else
      --*((_DWORD *)v23 + 2);
  }
  v24 = v11 * 1.15;
  v132 = 0;
  v131 = 0;
  v133 = 1;
  v25 = *((_QWORD *)this + 13);
  if (v25)
    v26 = *(_DWORD *)(v25 + 4);
  else
    v26 = 0;
  v27 = WebCore::RenderText::width((uint64_t)this, 0, v26, (WebCore::FontCascade *)v134, 0, (uint64_t)&v131, 0.0);
  v28 = v27 - v24;
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v126, (const WebCore::FontDescription *)v135);
  v29 = v138;
  ++*(_DWORD *)v138;
  v128 = v29;
  v129 = v139;
  v130 = v140;
  *((_BYTE *)this + 140) = *((_BYTE *)this + 140) & 0xFE | (v27 <= v24);
  if (v27 <= v24)
  {
    v30 = (WebCore *)WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 15), (uint64_t)v135);
    v32 = (int)v30;
    goto LABEL_79;
  }
  v33 = &WebCore::RenderCombineText::combineTextIfNeeded(void)::widthVariants;
  while (1)
  {
    v137 = v137 & 0xFFFFFFF3 | (4 * (*v33 & 3));
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v118, (const WebCore::FontDescription *)v135);
    v34 = v138;
    ++*(_DWORD *)v138;
    v119 = v34;
    v121 = v140;
    v120 = v139;
    WebCore::FontCascade::FontCascade((uint64_t)v122, (uint64_t *)v118, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112) + 32);
    v36 = (unsigned int *)v119;
    v119 = 0;
    if (v36)
    {
      if (*v36 == 1)
      {
        v51 = v36[1];
        if ((_DWORD)v51)
        {
          v52 = (WTF::StringImpl **)(v36 + 2);
          v53 = 8 * v51;
          do
          {
            v54 = *v52;
            *v52 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
                WTF::StringImpl::destroy(v54, v35);
              else
                *(_DWORD *)v54 -= 2;
            }
            ++v52;
            v53 -= 8;
          }
          while (v53);
        }
        WTF::fastFree((WTF *)v36, v35);
      }
      else
      {
        --*v36;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v118, v35);
    if (v14)
      ++*((_DWORD *)v14 + 2);
    v118[0] = v14;
    v38 = *(_QWORD *)(StatusReg + 736);
    if (!v38 || (v39 = *(_QWORD *)(v38 + 96)) == 0)
      v39 = WebCore::threadGlobalDataSlow(v37);
    v40 = *(_QWORD *)(v39 + 80);
    if (!v40)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v39);
      v40 = *(_QWORD *)(v39 + 80);
    }
    WebCore::FontCache::updateFontCascade(v40, (uint64_t)v122, v118);
    v41 = v118[0];
    v118[0] = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v41 + 8))(v41);
      else
        --*((_DWORD *)v41 + 2);
    }
    v132 = 0;
    v131 = 0;
    v42 = *((_QWORD *)this + 13);
    v43 = v42 ? *(_DWORD *)(v42 + 4) : 0;
    v45 = WebCore::RenderText::width((uint64_t)this, 0, v43, (WebCore::FontCascade *)v122, 0, (uint64_t)&v131, 0.0);
    v46 = v45;
    if (v45 <= v24)
      break;
    v47 = v45 - v24;
    if ((float)(v45 - v24) >= v28)
    {
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v44);
    }
    else
    {
      WebCore::FontDescription::operator=((uint64_t)v126, (uint64_t)v135);
      v49 = v138;
      ++*(_DWORD *)v138;
      v50 = (unsigned int *)v128;
      v128 = v49;
      if (v50)
      {
        if (*v50 == 1)
        {
          v55 = v50[1];
          if ((_DWORD)v55)
          {
            v56 = (WTF::StringImpl **)(v50 + 2);
            v57 = 8 * v55;
            do
            {
              v58 = *v56;
              *v56 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, v48);
                else
                  *(_DWORD *)v58 -= 2;
              }
              ++v56;
              v57 -= 8;
            }
            while (v57);
          }
          WTF::fastFree((WTF *)v50, v48);
          v129 = v139;
          v130 = v140;
          WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v59);
          v28 = v47;
          goto LABEL_56;
        }
        --*v50;
      }
      v129 = v139;
      v130 = v140;
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v48);
      v28 = v47;
    }
LABEL_56:
    if (++v33 == (char *)&WTF::Unicode::objectReplacementCharacter)
    {
      v32 = 0;
      goto LABEL_79;
    }
  }
  *((_BYTE *)this + 140) |= 1u;
  v32 = WebCore::RenderStyle::setFontDescription(*((_QWORD *)this + 15), (uint64_t)v135);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v60);
  v27 = v46;
LABEL_79:
  if ((*((_BYTE *)this + 140) & 1) != 0)
  {
LABEL_127:
    if (v32)
      goto LABEL_130;
  }
  else
  {
    v61 = fmaxf(v24 / (float)(v24 + v28), 0.4);
    v62 = v127;
    while (1)
    {
      v63 = -3.4028e38;
      if ((float)(v62 * v61) > -3.4028e38)
        v63 = v62 * v61;
      if ((float)(v62 * v61) < 3.4028e38)
        v64 = v63;
      else
        v64 = 3.4028e38;
      v127 = v64;
      v65 = *((_QWORD *)this + 15);
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v122, (const WebCore::FontDescription *)v126);
      v66 = v128;
      ++*(_DWORD *)v128;
      v123 = v66;
      v124 = v129;
      v125 = v130;
      v32 = WebCore::RenderStyle::setFontDescription(v65, (uint64_t)v122);
      v68 = (unsigned int *)v123;
      v123 = 0;
      if (v68)
      {
        if (*v68 == 1)
        {
          v81 = v68[1];
          if ((_DWORD)v81)
          {
            v82 = (WTF::StringImpl **)(v68 + 2);
            v83 = 8 * v81;
            do
            {
              v84 = *v82;
              *v82 = 0;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, v67);
                else
                  *(_DWORD *)v84 -= 2;
              }
              ++v82;
              v83 -= 8;
            }
            while (v83);
          }
          WTF::fastFree((WTF *)v68, v67);
        }
        else
        {
          --*v68;
        }
      }
      WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v122, v67);
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v118, (const WebCore::FontDescription *)v126);
      v69 = v128;
      ++*(_DWORD *)v128;
      v119 = v69;
      v121 = v130;
      v120 = v129;
      WebCore::FontCascade::FontCascade((uint64_t)v122, (uint64_t *)v118, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 112) + 32);
      v71 = (unsigned int *)v119;
      v119 = 0;
      if (v71)
      {
        if (*v71 == 1)
        {
          v85 = v71[1];
          if ((_DWORD)v85)
          {
            v86 = (WTF::StringImpl **)(v71 + 2);
            v87 = 8 * v85;
            do
            {
              v88 = *v86;
              *v86 = 0;
              if (v88)
              {
                if (*(_DWORD *)v88 == 2)
                  WTF::StringImpl::destroy(v88, v70);
                else
                  *(_DWORD *)v88 -= 2;
              }
              ++v86;
              v87 -= 8;
            }
            while (v87);
          }
          WTF::fastFree((WTF *)v71, v70);
        }
        else
        {
          --*v71;
        }
      }
      WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v118, v70);
      if (v14)
        ++*((_DWORD *)v14 + 2);
      v118[0] = v14;
      v73 = *(_QWORD *)(StatusReg + 736);
      if (!v73 || (v74 = *(_QWORD *)(v73 + 96)) == 0)
        v74 = WebCore::threadGlobalDataSlow(v72);
      v75 = *(_QWORD *)(v74 + 80);
      if (!v75)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v74);
        v75 = *(_QWORD *)(v74 + 80);
      }
      WebCore::FontCache::updateFontCascade(v75, (uint64_t)v122, v118);
      v76 = v118[0];
      v118[0] = 0;
      if (v76)
      {
        if (*((_DWORD *)v76 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v76 + 8))(v76);
        else
          --*((_DWORD *)v76 + 2);
      }
      v132 = 0;
      v131 = 0;
      v77 = *((_QWORD *)this + 13);
      v78 = v77 ? *(_DWORD *)(v77 + 4) : 0;
      v80 = WebCore::RenderText::width((uint64_t)this, 0, v78, (WebCore::FontCascade *)v122, 0, (uint64_t)&v131, 0.0);
      if (v80 <= v24)
        break;
      v61 = v61 + -0.05;
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v79);
      if (v61 < 0.4)
        goto LABEL_127;
    }
    v89 = v80;
    *((_BYTE *)this + 140) |= 1u;
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v122, v79);
    v27 = v89;
    if ((v32 & 1) != 0)
    {
LABEL_130:
      v90 = *(_QWORD *)(*((_QWORD *)this + 15) + 32);
      if (v14)
        ++*((_DWORD *)v14 + 2);
      v91 = v90 + 32;
      v122[0] = v14;
      v92 = *(_QWORD *)(StatusReg + 736);
      if (!v92 || (v93 = *(_QWORD *)(v92 + 96)) == 0)
        v93 = WebCore::threadGlobalDataSlow(v30);
      v94 = *(_QWORD *)(v93 + 80);
      if (!v94)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v93);
        v94 = *(_QWORD *)(v93 + 80);
      }
      WebCore::FontCache::updateFontCascade(v94, v91, v122);
      v95 = v122[0];
      v122[0] = 0;
      if (v95)
      {
        if (*((_DWORD *)v95 + 2) == 1)
          (*(void (**)(WebCore *))(*(_QWORD *)v95 + 8))(v95);
        else
          --*((_DWORD *)v95 + 2);
      }
    }
  }
  if ((*((_BYTE *)this + 140) & 1) != 0)
  {
    if ((_MergedGlobals_249 & 1) == 0)
    {
      WTF::String::String();
      _MergedGlobals_249 = 1;
    }
    WebCore::RenderText::setRenderedText(this, &qword_1ECE84200);
    *((float *)this + 32) = v27;
    *(float32x2_t *)((char *)this + 132) = vmul_f32(vcvt_f32_s32(v132), (float32x2_t)vdup_n_s32(0x3C800000u));
    v96 = *((_DWORD *)this + 5);
    if ((v96 & 8) == 0)
    {
      *((_DWORD *)this + 5) = v96 | 8;
      v97 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
      WebCore::RenderObject::scheduleLayout(this, v97);
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19638CC10);
        }
        v98 = *((_QWORD *)this + 18);
        if (v98)
        {
          v99 = *(_DWORD *)(v98 + 8) + 1;
          *(_DWORD *)(v98 + 8) = v99;
        }
        else
        {
          v99 = MEMORY[8];
        }
        *(_QWORD *)(v98 + 24) = *(_QWORD *)(v98 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
        if (!v99)
        {
          __break(0xC471u);
          JUMPOUT(0x19638CC3CLL);
        }
        *(_DWORD *)(v98 + 8) = v99 - 1;
      }
    }
  }
  v100 = (unsigned int *)v128;
  v128 = 0;
  if (v100)
  {
    if (*v100 == 1)
    {
      v110 = v100[1];
      if ((_DWORD)v110)
      {
        v111 = (WTF::StringImpl **)(v100 + 2);
        v112 = 8 * v110;
        do
        {
          v113 = *v111;
          *v111 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, v31);
            else
              *(_DWORD *)v113 -= 2;
          }
          ++v111;
          v112 -= 8;
        }
        while (v112);
      }
      WTF::fastFree((WTF *)v100, v31);
    }
    else
    {
      --*v100;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v126, v31);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v134, v101);
  v103 = (unsigned int *)v138;
  v138 = 0;
  if (v103)
  {
    if (*v103 == 1)
    {
      v114 = v103[1];
      if ((_DWORD)v114)
      {
        v115 = (WTF::StringImpl **)(v103 + 2);
        v116 = 8 * v114;
        do
        {
          v117 = *v115;
          *v115 = 0;
          if (v117)
          {
            if (*(_DWORD *)v117 == 2)
              WTF::StringImpl::destroy(v117, v102);
            else
              *(_DWORD *)v117 -= 2;
          }
          ++v115;
          v116 -= 8;
        }
        while (v116);
      }
      WTF::fastFree((WTF *)v103, v102);
    }
    else
    {
      --*v103;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v135, v102);
}

uint64_t WebCore::RenderObjectTraversal::nextSkippingChildren(WebCore::RenderObjectTraversal *this, WebCore::RenderObject *a2, const WebCore::RenderObject *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  WebCore::RenderObject *v7;
  uint64_t v9;
  uint64_t v10;

  if (this == a2)
    return 0;
  v4 = *(unsigned int *)((char *)this + 47);
  if (v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32))
  {
    result = *(_QWORD *)((v4 | ((unint64_t)*((unsigned __int8 *)this + 51) << 32)) + 8);
    if (result)
      return result;
  }
  v6 = *((_QWORD *)this + 4);
  if (!v6)
    return 0;
  v7 = *(WebCore::RenderObject **)(v6 + 8);
  if (!v7 || v7 == a2)
    return 0;
  do
  {
    v9 = *(unsigned int *)((char *)v7 + 47);
    if (v9 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32))
    {
      result = *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)v7 + 51) << 32)) + 8);
      if (result)
        break;
    }
    v10 = *((_QWORD *)v7 + 4);
    if (!v10)
      return 0;
    result = 0;
    v7 = *(WebCore::RenderObject **)(v10 + 8);
  }
  while (v7 && v7 != a2);
  return result;
}

uint64_t WebCore::RenderBlockFlow::updateColumnProgressionFromStyle(uint64_t this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  _BOOL4 v8;
  char v9;
  int v10;
  WebCore::RenderElement *v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  char v15;
  WebCore::RenderObject *v16;

  v2 = *(_QWORD *)(this + 224);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return this;
  v16 = (WebCore::RenderObject *)this;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 24);
  v6 = *(unsigned __int8 *)(v5 + 56);
  v7 = (v6 >> 4) & 3;
  if (v7 != 2)
  {
    v14 = (unsigned __int16)*((_DWORD *)a2 + 11) >> 13;
    v15 = 2;
    switch((unsigned __int16)*((_DWORD *)a2 + 11) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_25;
      case 3:
      case 5:
        LOBYTE(v14) = 3;
        goto LABEL_25;
      case 4:
        goto LABEL_26;
      default:
        LOBYTE(v14) = 0;
LABEL_25:
        v15 = v14;
LABEL_26:
        v9 = (v7 != 0) ^ ((v15 & 6) != 2);
        if ((*(_BYTE *)(v4 + 367) != 0) ^ (v7 != 0) ^ ((v15 & 6) != 2))
          goto LABEL_10;
        goto LABEL_7;
    }
  }
  if (*(_BYTE *)(v4 + 367))
  {
LABEL_7:
    LOBYTE(v8) = v6 > 0x3F;
    if (v6 > 0x3F == (*(_BYTE *)(v4 + 368) != 0))
      return this;
  }
  else
  {
    v9 = 1;
LABEL_10:
    *(_BYTE *)(v4 + 367) = v9;
    v8 = *(unsigned __int8 *)(v5 + 56) > 0x3Fu;
    if (v8 == (*(_BYTE *)(v4 + 368) != 0))
      goto LABEL_12;
  }
  *(_BYTE *)(v4 + 368) = v8;
LABEL_12:
  v10 = *(_DWORD *)(this + 20);
  if ((v10 & 8) == 0)
  {
    *(_DWORD *)(this + 20) = v10 | 8;
    v11 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)this, 0);
    WebCore::RenderObject::scheduleLayout(v16, v11);
    if ((*((_BYTE *)v16 + 21) & 0x80) != 0)
    {
      if ((*((_BYTE *)v16 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19638CE80);
      }
      v12 = *((_QWORD *)v16 + 18);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 8) + 1;
        *(_DWORD *)(v12 + 8) = v13;
      }
      else
      {
        v13 = MEMORY[8];
      }
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19638CEACLL);
      }
      *(_DWORD *)(v12 + 8) = v13 - 1;
    }
  }
  return WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v16, 1, 1);
}

WebCore::RenderFragmentContainer *WebCore::RenderBox::clampToStartAndEndFragments(WebCore::RenderBox *this, WebCore::RenderFragmentContainer *a2)
{
  WebCore::RenderBox *v3;
  WebCore::RenderFragmentedFlow *v4;
  int v5;
  WebCore::RenderFragmentContainer *v6;
  int v7;
  int v8;
  WebCore::RenderFragmentContainer *v11;
  WebCore::RenderFragmentContainer *v12;

  v3 = this;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v4 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(void))(*(_QWORD *)this + 648))();
    v3 = this;
  }
  else
  {
    v4 = 0;
  }
  if (*((_BYTE *)v3 + 46) != 49)
  {
    v11 = 0;
    v12 = 0;
    if (!WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v4, v3, &v12, &v11))
      return a2;
    v5 = *((_DWORD *)a2 + 64);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 31) + 8) + 21) & 0x10) == 0)
      v5 = *((_DWORD *)a2 + 65);
    v6 = v12;
    v7 = *((_DWORD *)v12 + 64);
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v12 + 31) + 8) + 21) & 0x10) == 0)
      v7 = *((_DWORD *)v12 + 65);
    if (v5 >= v7)
    {
      v6 = v11;
      v8 = *((_DWORD *)v11 + 64);
      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v11 + 31) + 8) + 21) & 0x10) == 0)
        v8 = *((_DWORD *)v11 + 65);
      if (v5 <= v8)
        return a2;
    }
    return v6;
  }
  return a2;
}

unint64_t WebCore::RenderBox::clientBoxRectInFragment(WebCore::RenderBox *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;

  if (a2)
  {
    *((_QWORD *)&v5 + 1) = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 992))(a1);
    *(_QWORD *)&v5 = v3;
    v4 = v5 >> 32;
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1352))(a1);
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1360))(a1);
  }
  else
  {
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1016))(a1);
    v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a1 + 1000))(a1);
    WebCore::RenderBox::clientWidth(a1);
    WebCore::RenderBox::clientHeight(a1);
    return v6 | (unint64_t)(v7 << 32);
  }
  return v4;
}

void WebCore::RenderBox::removeFloatingAndInvalidateForLayout(WebCore::RenderBox *this)
{
  uint64_t i;
  uint64_t v3;
  WebCore::RenderBlockFlow *v4;
  uint64_t *v5;
  uint64_t v6;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3405))
  {
    for (i = *((_QWORD *)this + 4); i; i = *(_QWORD *)(v3 + 32))
    {
      v3 = *(_QWORD *)(i + 8);
      if (!v3)
        break;
      if ((*(_BYTE *)(v3 + 52) & 7) == 1)
      {
        v4 = 0;
LABEL_6:
        if (!v4
          || (v5 = *(uint64_t **)(v3 + 216)) != 0
          && WTF::ListHashSet<std::unique_ptr<WebCore::FloatingObject>,WebCore::FloatingObjectHashFunctions>::contains<WebCore::FloatingObjectHashTranslator,WebCore::RenderBox>(v5, (uint64_t)this))
        {
          v4 = (WebCore::RenderBlockFlow *)v3;
        }
        while (1)
        {
          v6 = *(_QWORD *)(v3 + 32);
          if (!v6)
            break;
          v3 = *(_QWORD *)(v6 + 8);
          if (!v3)
            break;
          if ((*(_BYTE *)(v3 + 52) & 7) == 1)
            goto LABEL_6;
        }
        WebCore::RenderBlockFlow::markSiblingsWithFloatsForLayout(v4, this);
        WebCore::RenderBlockFlow::markAllDescendantsWithFloatsForLayout(v4, this, 0);
        return;
      }
    }
  }
}

void WebCore::RenderBox::removeFloatingOrPositionedChildFromBlockLists(WebCore::RenderBox *this)
{
  int v1;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x800) != 0)
  {
    WebCore::RenderBox::removeFloatingAndInvalidateForLayout(this);
  }
  else if ((v1 & 0x1800000) == 0x1000000)
  {
    {
      WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
      unk_1ECE91358 = 0u;
    }
    WebCore::PositionedDescendantsMap::removeDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, this);
  }
}

void WebCore::RenderBox::updateShapeOutsideInfoAfterStyleChange(uint64_t this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  const WebCore::RenderStyle *v3;
  WebCore::RenderBox *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  _DWORD *v21;
  float v22;
  float v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int i;
  uint64_t v33;
  WTF *v34;
  const WebCore::RenderStyle *v35;
  _QWORD *v36;
  uint64_t v37;
  WTF *v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  int v43;
  uint64_t v44;
  float v45;
  unsigned int v46;
  float v47;
  unsigned int v48;
  float v49;
  __int16 v50;
  unsigned __int8 v51;
  int v52;
  unsigned __int8 v53;
  char v54;
  char v55;

  v3 = a3;
  v5 = (WebCore::RenderBox *)this;
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
  if (a3)
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 240);
  else
    v7 = 0;
  v8 = *(_QWORD *)(v6 + 240);
  *(float *)&v52 = 0.0;
  v55 = 0;
  v53 = *(_BYTE *)(v6 + 252);
  v9 = v53;
  v10 = *(unsigned __int8 *)(v6 + 253);
  v54 = *(_BYTE *)(v6 + 253);
  if (v53 - 2 >= 9)
  {
    if (v53 == 11)
    {
      v52 = *(int *)(v6 + 248);
      v43 = v52;
      this = (uint64_t)WebCore::Length::ref(&v52);
      v48 = v43;
      v11 = v43;
LABEL_7:
      v12 = 1;
      if (!v3)
        goto LABEL_16;
LABEL_11:
      v13 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 40);
      v49 = 0.0;
      v51 = 0;
      LOBYTE(v50) = *(_BYTE *)(v13 + 252);
      v14 = v50;
      v15 = *(unsigned __int8 *)(v13 + 253);
      HIBYTE(v50) = *(_BYTE *)(v13 + 253);
      if (v50 - 2 >= 9)
      {
        if (v50 != 11)
        {
          v3 = 0;
          v16 = 0;
          v17 = 0.0;
          goto LABEL_20;
        }
        v49 = *(float *)(v13 + 248);
        v46 = LODWORD(v49);
        this = (uint64_t)WebCore::Length::ref((int *)&v49);
        v16 = 0;
        v44 = *((_QWORD *)v3 + 1);
        v3 = (const WebCore::RenderStyle *)v46;
        v13 = *(_QWORD *)(v44 + 40);
      }
      else
      {
        v51 = *(_BYTE *)(v13 + 254);
        v16 = v51;
        if (v51)
        {
          v17 = *(float *)(v13 + 248);
          v49 = v17;
          v3 = (const WebCore::RenderStyle *)LODWORD(v17);
          v16 = 1;
          goto LABEL_20;
        }
        v3 = (const WebCore::RenderStyle *)*(unsigned int *)(v13 + 248);
        v49 = *(float *)(v13 + 248);
      }
      v17 = *(float *)&v3;
LABEL_20:
      v18 = *(float *)(v13 + 256);
      goto LABEL_21;
    }
    v48 = 0;
    v12 = 1;
    *(float *)&v11 = 0.0;
    if (a3)
      goto LABEL_11;
  }
  else
  {
    v55 = *(_BYTE *)(v6 + 254);
    if (!v55)
    {
      v52 = *(int *)(v6 + 248);
      v48 = v52;
      v11 = v52;
      goto LABEL_7;
    }
    v12 = 0;
    v11 = *(int *)(v6 + 248);
    v52 = v11;
    v48 = v11;
    if (a3)
      goto LABEL_11;
  }
LABEL_16:
  v16 = 0;
  v15 = 0;
  v49 = 0.0;
  v14 = 4;
  v50 = 4;
  v51 = 0;
  v17 = 0.0;
  v18 = 0.0;
LABEL_21:
  v19 = v8 == v7 && v9 == v14;
  if (!v19 || (v10 != 0) != (v15 != 0))
    goto LABEL_25;
  v22 = *(float *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 256);
  if (v9 == 13)
  {
    this = 1;
  }
  else if (v9 == 11)
  {
    v47 = v18;
    v45 = *(float *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 256);
    this = WebCore::Length::isCalculatedEqual((WebCore::Length *)&v52, (const WebCore::Length *)&v49);
    v22 = v45;
    v18 = v47;
  }
  else
  {
    v23 = (float)v11;
    if (!v12)
      v23 = *(float *)&v11;
    if (!v16)
      v17 = (float)SLODWORD(v17);
    this = v23 == v17;
  }
  if (!(_DWORD)this || v22 != v18)
  {
LABEL_25:
    if (v8)
    {
      v20 = WebCore::RenderBox::ensureShapeOutsideInfo(v5, a2);
      v21 = *(_DWORD **)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
LABEL_73:
      if ((*((_BYTE *)v5 + 21) & 8) != 0)
        WebCore::RenderBox::removeFloatingAndInvalidateForLayout(v5);
      goto LABEL_75;
    }
    if ((*(_WORD *)((_BYTE *)v5 + 69) & 0x800) != 0)
    {
      *(_WORD *)((char *)v5 + 69) &= ~0x800u;
      {
        v24 = dword_1EE2F9340++;
        if (v24 > dword_1EE2F9344)
          WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(this, a2);
      }
      else
      {
        WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
        *(_QWORD *)&dword_1EE2F9340 = 1;
      }
      v25 = (WTF *)*((_QWORD *)v5 + 1);
      if (v25)
      {
        if (*((_QWORD *)v25 + 1))
        {
          v26 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
          if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
          {
            v27 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 8);
            v28 = ((unint64_t)v25 + ~((_QWORD)v25 << 32)) ^ (((unint64_t)v25 + ~((_QWORD)v25 << 32)) >> 22);
            v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
            v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
            v31 = v27 & ((v30 >> 31) ^ v30);
            for (i = 1; ; ++i)
            {
              v33 = v31;
              v34 = *(WTF **)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v31);
              if (v34 != (WTF *)-1)
              {
                if (!v34)
                  goto LABEL_72;
                if (v34 == v25)
                  break;
              }
              v31 = (v33 + i) & v27;
            }
            if ((_DWORD)v33 != *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4))
            {
              v35 = v3;
              v36 = (_QWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v33);
              *v36 = 0;
              if (*(_DWORD *)v25 == 1)
                WTF::fastFree(v25, a2);
              else
                --*(_DWORD *)v25;
              *v36 = -1;
              v37 = v26 + 16 * v33;
              v38 = *(WTF **)(v37 + 8);
              *(_QWORD *)(v37 + 8) = 0;
              v3 = v35;
              if (v38)
              {
                v39 = (_DWORD *)*((_QWORD *)v38 + 1);
                *((_QWORD *)v38 + 1) = 0;
                if (v39)
                {
                  if (v39[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
                  else
                    --v39[2];
                }
                WTF::fastFree(v38, a2);
              }
              ++*(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 16);
              if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
                v40 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) - 1;
              else
                v40 = -1;
              *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) = v40;
              if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
              {
                v41 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
                if (6 * *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) < v41 && v41 >= 9)
                  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v41 >> 1, 0);
              }
            }
          }
        }
      }
    }
LABEL_72:
    if (v7)
      goto LABEL_73;
  }
LABEL_75:
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v3);
  }
  if (v9 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v48);
  }
}

uint64_t WebCore::RenderBox::clearOverridingContentSize(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int j;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v2 = this;
  v3 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
  if (WebCore::gOverridingLogicalHeightMap)
  {
    v4 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
    v5 = *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 12);
    *(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8) = v4 + 1;
    if (v4 > v5)
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v3, a2);
    this = *(_QWORD *)(v2 + 8);
    if (this)
    {
      if (*(_QWORD *)(this + 8))
      {
        v6 = *v3;
        if (*v3)
        {
          v7 = *(_DWORD *)(v6 - 8);
          v8 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
          v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
          v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
          v11 = v7 & ((v10 >> 31) ^ v10);
          for (i = 1; ; ++i)
          {
            v13 = *(_QWORD *)(v6 + 16 * v11);
            if (!v13)
              break;
            if (v13 != -1 && v13 == this)
            {
              if (v11 != *(_DWORD *)(v6 - 4))
              {
                v15 = (_QWORD *)(v6 + 16 * v11);
                *v15 = 0;
                if (*(_DWORD *)this == 1)
                  this = WTF::fastFree((WTF *)this, a2);
                else
                  --*(_DWORD *)this;
                *v15 = -1;
                ++*(_DWORD *)(*v3 - 16);
                v16 = *v3;
                v17 = *v3 ? *(_DWORD *)(v16 - 12) - 1 : -1;
                *(_DWORD *)(v16 - 12) = v17;
                v18 = *v3;
                if (*v3)
                {
                  v19 = 6 * *(_DWORD *)(v18 - 12);
                  v20 = *(_DWORD *)(v18 - 4);
                  if (v19 < v20 && v20 >= 9)
                    this = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v3, v20 >> 1, 0);
                }
              }
              break;
            }
            v11 = (v11 + i) & v7;
          }
        }
      }
    }
  }
  v22 = (uint64_t *)WebCore::gOverridingLogicalWidthMap;
  if (WebCore::gOverridingLogicalWidthMap)
  {
    v23 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8);
    v24 = *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 12);
    *(_DWORD *)(WebCore::gOverridingLogicalWidthMap + 8) = v23 + 1;
    if (v23 > v24)
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)v22, a2);
    this = *(_QWORD *)(v2 + 8);
    if (this)
    {
      if (*(_QWORD *)(this + 8))
      {
        v25 = *v22;
        if (*v22)
        {
          v26 = *(_DWORD *)(v25 - 8);
          v27 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          for (j = 1; ; ++j)
          {
            v32 = *(_QWORD *)(v25 + 16 * v30);
            if (!v32)
              break;
            if (v32 != -1 && v32 == this)
            {
              if (v30 != *(_DWORD *)(v25 - 4))
              {
                v34 = (_QWORD *)(v25 + 16 * v30);
                *v34 = 0;
                if (*(_DWORD *)this == 1)
                  this = WTF::fastFree((WTF *)this, a2);
                else
                  --*(_DWORD *)this;
                *v34 = -1;
                ++*(_DWORD *)(*v22 - 16);
                v35 = *v22;
                v36 = *v22 ? *(_DWORD *)(v35 - 12) - 1 : -1;
                *(_DWORD *)(v35 - 12) = v36;
                v37 = *v22;
                if (*v22)
                {
                  v38 = 6 * *(_DWORD *)(v37 - 12);
                  v39 = *(_DWORD *)(v37 - 4);
                  if (v38 < v39 && v39 >= 9)
                    return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v22, v39 >> 1, 0);
                }
              }
              return this;
            }
            v30 = (v30 + j) & v26;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderBox::ensureShapeOutsideInfo(WebCore::RenderBox *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  WTF *v32;
  uint64_t v33;
  _QWORD *v34;

  *(_WORD *)((char *)this + 69) |= 0x800u;
  {
    v3 = dword_1EE2F9340++;
    if (v3 > dword_1EE2F9344)
      WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)this, a2);
  }
  else
  {
    WebCore::shapeOutsideInfoMap(void)::staticInfoMap = 0;
    *(_QWORD *)&dword_1EE2F9340 = 1;
  }
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = this;
    v32 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WTF::fastFree(v32, a2);
        v4 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
  }
  v5 = *(_DWORD *)v4;
  *(_DWORD *)v4 += 2;
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    WTF::fastFree((WTF *)v4, a2);
  else
    *(_DWORD *)v4 = v7;
  v8 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
  if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(8u, 0), (v8 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (_QWORD *)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 != -1)
      break;
    v11 = v8 + 16 * v17;
LABEL_16:
    v15 = i + v17;
  }
  if (!v19)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      --*(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 16);
      *(_QWORD *)v11 = v4;
    }
    else
    {
      *v18 = v4;
      v11 = v8 + 16 * v17;
    }
    v22 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v22 = this;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_BYTE *)(v22 + 40) &= 0xFCu;
    v24 = *(WTF **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v22;
    if (v24)
    {
      v25 = (_DWORD *)*((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = 0;
      if (v25)
      {
        if (v25[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
        else
          --v25[2];
      }
      WTF::fastFree(v24, v23);
    }
    if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
      v26 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) = v26;
    v27 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
    if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
      v28 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 16) + v28);
    v30 = *(unsigned int *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_39;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_42:
        v11 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v31, (WTF **)v11);
        v27 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
        if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
          v30 = *(unsigned int *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
        else
          v30 = 0;
        goto LABEL_49;
      }
LABEL_39:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) >= (2 * v30));
      goto LABEL_42;
    }
LABEL_49:
    v21 = (_QWORD *)(v27 + 16 * v30);
    v18 = (_QWORD *)v11;
    goto LABEL_50;
  }
  if (v19 != v4)
    goto LABEL_16;
  if ((v9 & 1) != 0)
    v20 = 0;
  else
    v20 = *(unsigned int *)(v8 - 4);
  v21 = (_QWORD *)(v8 + 16 * v20);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree((WTF *)v4, a2);
  else
    --*(_DWORD *)v4;
LABEL_50:
  v33 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
  if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
    v33 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap
        + 16 * *(unsigned int *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
  if (v18 != (_QWORD *)v33)
  {
    while (!*(_QWORD *)(*v18 + 8))
    {
      v34 = v18 + 2;
      v18 = v21;
      if (v34 != v21)
      {
        v18 = v34;
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          v18 += 2;
          if (v18 == v21)
          {
            v18 = v21;
            break;
          }
        }
      }
      if (v18 == (_QWORD *)v33)
      {
        v18 = (_QWORD *)v33;
        return v18[1];
      }
    }
  }
  return v18[1];
}

uint64_t WebCore::RenderBox::layout(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v1 = this;
  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)
    && (v2 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8)) != 0)
  {
    v3 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
    v12 = 2;
    switch((unsigned __int16)*(_DWORD *)(this + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        v3 = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        v3 = 0;
LABEL_5:
        v12 = v3;
LABEL_6:
        v4 = v12 & 0xFFFFFFFD;
        v13 = *(_QWORD *)(this + 152);
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                   + 1944)
                       + 248);
        this = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v5 + 336, (WebCore::RenderObject *)this, (int *)&v13, 0, 0);
        v7 = this;
        if (v4 == 1 && (_DWORD)this)
          ++*(_DWORD *)(v5 + 492);
        do
        {
          if ((*(_BYTE *)(v2 + 20) & 0xF8) != 0)
          {
            if ((*(_BYTE *)(v2 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19638E044);
            }
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 688))(v2);
          }
          v8 = *(unsigned int *)(v2 + 47);
          if (!(v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)))
            break;
          v2 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
        }
        while (v2);
        v9 = *(_DWORD *)(v1 + 20);
        if ((v9 & 0x60000000) != 0)
          v9 = v9 & 0x9FDFFDFF | 0x20000000;
        v10 = v9 & 0xFFDFFDFF | 0x200;
        *(_DWORD *)(v1 + 20) = v10;
        if ((*(_BYTE *)(v1 + 45) & 2) == 0)
        {
          *(_WORD *)(v1 + 69) &= ~1u;
          *(_WORD *)(v1 + 76) = *(_WORD *)(v1 + 76) & 0xF | (16
                                                           * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8)
                                                                                              + 1944)
                                                                                  + 248)
                                                                      + 472));
        }
        *(_DWORD *)(v1 + 20) = v10 & 0xFFDFFE07;
        if (v7)
        {
          this = WebCore::LocalFrameViewLayoutContext::popLayoutState(v5 + 336, v6);
          if (v4 == 1)
            --*(_DWORD *)(v5 + 492);
        }
        break;
    }
  }
  else
  {
    v11 = *(_DWORD *)(this + 20) & 0xFFDFFDFF | 0x200;
    *(_DWORD *)(this + 20) = v11;
    if ((*(_BYTE *)(this + 45) & 2) == 0)
    {
      *(_WORD *)(this + 69) &= ~1u;
      *(_WORD *)(this + 76) = *(_WORD *)(this + 76) & 0xF | (16
                                                           * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                                                                              + 1944)
                                                                                  + 248)
                                                                      + 472));
    }
    *(_DWORD *)(this + 20) = v11 & 0xFFDFFE07;
  }
  return this;
}

uint64_t WebCore::RenderBox::scrollWidth(WebCore::RenderBox *this)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderLayer *v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v11 = (*((_BYTE *)this + 45) & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
        : *((_QWORD *)this + 12);
    v12 = v11 & 0x1C00;
    if (v12 != 2048)
    {
      if (v12)
      {
        v13 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
        if (v13)
          return WebCore::RenderLayer::scrollWidth(v13);
      }
    }
  }
  v2 = *((_DWORD *)this + 30);
  v3 = WebCore::RenderBox::clientWidth(this);
  v4 = WebCore::RenderBox::layoutOverflowRect(this);
  v6 = v4;
  if ((v2 & 0x4000000) != 0)
  {
    v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
    v15 = v6 - v14;
    if (__OFSUB__(v6, v14))
      v15 = (v6 >> 31) + 0x7FFFFFFF;
    v16 = v15 & (v15 >> 31);
    v17 = __OFSUB__(v3, v16);
    v18 = v3 - v16;
    if (v17)
      v18 = 0x7FFFFFFF;
    return (((int)(v18 - (((v6 >> 31) + 0x7FFFFFFF) & 0xFFFFFFC0) + 32) >> 6) + v18 / 64);
  }
  else
  {
    if (__OFADD__(v4, v5))
      v7 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v7 = v4 + v5;
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
    v9 = v7 - v8;
    if (__OFSUB__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    if (v3 > v9)
      v9 = v3;
    return (((v9 & 0x20u) + 32) >> 6) + (v9 >> 6);
  }
}

uint64_t WebCore::RenderBox::scrollHeight(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  WebCore::RenderLayer *v20;

  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v18 = (*((_BYTE *)this + 45) & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
        : *((_QWORD *)this + 12);
    v19 = v18 & 0x1C00;
    if (v19 != 2048)
    {
      if (v19)
      {
        v20 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
        if (v20)
          return WebCore::RenderLayer::scrollHeight(v20);
      }
    }
  }
  v2 = *((_DWORD *)this + 41);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v11 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = WebCore::RenderBox::layoutOverflowRect(this);
  if (__OFADD__(HIDWORD(v12), v13))
    v14 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
  else
    v14 = HIDWORD(v12) + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  v16 = v14 - v15;
  if (__OFSUB__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  if (v11 > v16)
    v16 = v11;
  return (((v16 & ~(v16 >> 31) & 0x20u) + 32) >> 6) + ((v16 & ~(v16 >> 31)) >> 6);
}

uint64_t WebCore::RenderBox::scrollLeft(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  result = 0;
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v4 = *(_QWORD *)(v1 + 264);
    if (v4)
      return *(unsigned int *)(v4 + 104);
  }
  return result;
}

uint64_t WebCore::RenderBox::scrollTop(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
    return 0;
  result = 0;
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v4 = *(_QWORD *)(v1 + 264);
    if (v4)
      return *(unsigned int *)(v4 + 108);
  }
  return result;
}

unint64_t WebCore::RenderBox::setScrollLeft(unint64_t result, WebCore::RenderLayerScrollableArea *a2, _BYTE *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if ((*(_BYTE *)(result + 22) & 1) != 0)
  {
    v4 = (int)a2;
    if ((*(_BYTE *)(result + 45) & 2) != 0)
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 96);
    else
      v5 = *(_QWORD *)(result + 96);
    v6 = v5 & 0x1C00;
    if (v6 != 2048 && v6)
    {
      v7 = *(_QWORD *)(result + 144);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 264);
        WebCore::setupWheelEventMonitor((WebCore *)v8, a2);
        v9 = ((*(_QWORD *)(v8 + 32) & 0xFFFFFFFF00000000) + ((unint64_t)*(unsigned int *)(v8 + 108) << 32)) | (*(_QWORD *)(v8 + 32) + v4);
        return WebCore::RenderLayerScrollableArea::scrollToOffset((WebCore::ScrollableArea *)v8, (WebCore::IntPoint *)&v9, a3);
      }
    }
  }
  return result;
}

unsigned __int8 *WebCore::setupWheelEventMonitor(WebCore *this, WebCore::RenderLayerScrollableArea *a2)
{
  uint64_t v3;
  WebCore::Page *v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  void *v7;
  unsigned __int8 **v8;
  unsigned __int8 **v9;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32)
                                                                                         + 24)
                                                                             + 8)
                                                                 + 40)
                                                     + 8)
                                         + 528)
                             + 8)
                 + 24);
  if (v3)
    v4 = *(WebCore::Page **)(v3 + 8);
  else
    v4 = 0;
  result = (unsigned __int8 *)WebCore::Page::isMonitoringWheelEvents(v4);
  if ((_DWORD)result)
  {
    v6 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator(this);
    WebCore::Page::wheelEventTestMonitor((uint64_t)v4, &v9);
    result = WebCore::ScrollAnimator::setWheelEventTestMonitor(v6, &v9);
    v8 = v9;
    v9 = 0;
    if (v8)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v8, v7);
  }
  return result;
}

unint64_t WebCore::RenderBox::setScrollTop(unint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScrollableArea *v8;
  uint64_t v9;
  WebCore::Page *v10;
  unsigned __int8 *v11;
  void *v12;
  unsigned __int8 **v13;
  unsigned __int8 **v14;

  if ((*(_BYTE *)(result + 22) & 1) != 0)
  {
    v5 = (*(_BYTE *)(result + 45) & 2) != 0
       ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 96)
       : *(_QWORD *)(result + 96);
    v6 = v5 & 0x1C00;
    if (v6 != 2048)
    {
      if (v6)
      {
        v7 = *(_QWORD *)(result + 144);
        if (v7)
        {
          v8 = *(WebCore::ScrollableArea **)(v7 + 264);
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 12) + 32)
                                                                                                 + 24)
                                                                                     + 8)
                                                                         + 40)
                                                             + 8)
                                                 + 528)
                                     + 8)
                         + 24);
          if (v9)
            v10 = *(WebCore::Page **)(v9 + 8);
          else
            v10 = 0;
          if (WebCore::Page::isMonitoringWheelEvents(v10))
          {
            v11 = (unsigned __int8 *)WebCore::ScrollableArea::scrollAnimator(v8);
            WebCore::Page::wheelEventTestMonitor((uint64_t)v10, &v14);
            WebCore::ScrollAnimator::setWheelEventTestMonitor(v11, &v14);
            v13 = v14;
            v14 = 0;
            if (v13)
              WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v13, v12);
          }
          return WebCore::RenderLayerScrollableArea::scrollToYPosition((uint64_t)v8, a2, a3);
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderBox::setScrollPosition(unint64_t result, WebCore::RenderLayerScrollableArea *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;

  if ((*(_BYTE *)(result + 22) & 1) != 0)
  {
    if ((*(_BYTE *)(result + 45) & 2) != 0)
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 96);
    else
      v5 = *(_QWORD *)(result + 96);
    v6 = v5 & 0x1C00;
    if (v6 != 2048 && v6)
    {
      v7 = *(_QWORD *)(result + 144);
      if (v7)
      {
        v8 = *(WebCore **)(v7 + 264);
        WebCore::setupWheelEventMonitor(v8, a2);
        return WebCore::RenderLayerScrollableArea::setScrollPosition(v8, a2, a3);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::boundingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(result + 160);
  *(_QWORD *)&v8 = *a3;
  *((_QWORD *)&v8 + 1) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v8);
    v5 = *(unsigned int *)(a2 + 12);
    v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)result;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = v8;
  }
  *(_OWORD *)(v6 + 16 * v5) = v7;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

unint64_t WebCore::RenderBox::constrainLogicalMinMaxSizesByAspectRatio(unint64_t this, int *a2, int *a3, int a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v30;
  unsigned int v31;
  uint64_t v33;
  int v36;
  int v38;
  int v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v46;
  unsigned int v47;
  unsigned int v49;
  unsigned __int8 v50;
  char v51;
  char v52;

  v11 = this;
  v12 = *(_QWORD *)(*(_QWORD *)(this + 88) + 8);
  v13 = (unsigned int *)(v12 + 4);
  v14 = (unsigned int *)(v12 + 12);
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 >= 4)
    v15 = v14;
  else
    v15 = v13;
  if (((*(_DWORD *)(this + 124) >> 13) & 6u) - 2 < 4)
    v13 = v14;
  if (a6)
    v13 = v15;
  v52 = 0;
  v50 = *((_BYTE *)v13 + 4);
  v16 = v50;
  v51 = *((_BYTE *)v13 + 5);
  if (v50 - 2 >= 9)
  {
    v17 = 0;
    if (v50 == 11)
    {
      v17 = (void *)*v13;
      v49 = *v13;
      this = (unint64_t)WebCore::Length::ref((int *)&v49);
      if (!a5)
        goto LABEL_24;
    }
    else if (!a5)
    {
      goto LABEL_24;
    }
  }
  else
  {
    v17 = (void *)*v13;
    if (!a5)
      goto LABEL_24;
  }
  v18 = v16 > 0xB || ((1 << v16) & 0x818) == 0;
  if (v18)
  {
    v19 = *a2;
  }
  else
  {
    v19 = *a2;
    if (*a2 >= a4)
      v19 = a4;
    *a2 = v19;
  }
  if (*a3 < v19)
    v19 = *a3;
  *a2 = v19;
LABEL_24:
  if (v16 - 3 < 2)
    return this;
  if (v16 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v17);
  }
  v20 = ((*(_DWORD *)(v11 + 124) >> 13) & 6) - 2;
  v21 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 8);
  if (a6)
  {
    if (v20 < 4)
    {
      v43 = *(unsigned __int8 *)(v21 + 24);
      v18 = v43 == 4;
      v44 = v43 & 0xFFFFFFF7;
      v25 = v18 || v44 == 3;
      v26 = v21 + 28;
    }
    else
    {
      v22 = *(unsigned __int8 *)(v21 + 40);
      v18 = v22 == 4;
      v23 = v22 & 0xFFFFFFF7;
      v25 = v18 || v23 == 3;
      v26 = v21 + 44;
    }
    v27 = *(unsigned __int8 *)(v26 + 4);
    if (((v27 & 0xFFFFFFF7) == 3 || v27 == 4) && v25 != 0)
      return this;
    this = WebCore::RenderBox::computeMinMaxLogicalHeightFromAspectRatio((WebCore::RenderBox *)v11);
  }
  else
  {
    if (v20 < 4)
    {
      v46 = *(unsigned __int8 *)(v21 + 40);
      v18 = v46 == 4;
      v47 = v46 & 0xFFFFFFF7;
      v25 = v18 || v47 == 3;
      v33 = v21 + 44;
    }
    else
    {
      v30 = *(unsigned __int8 *)(v21 + 24);
      v18 = v30 == 4;
      v31 = v30 & 0xFFFFFFF7;
      v25 = v18 || v31 == 3;
      v33 = v21 + 28;
    }
    v27 = *(unsigned __int8 *)(v33 + 4);
    if (((v27 & 0xFFFFFFF7) == 3 || v27 == 4) && v25 != 0)
      return this;
    this = WebCore::RenderBox::computeMinMaxLogicalWidthFromAspectRatio((WebCore::RenderBox *)v11);
  }
  v36 = 1;
  if (v27 <= 0xB && ((1 << v27) & 0x818) != 0)
    goto LABEL_68;
  v40 = HIDWORD(this);
  if (HIDWORD(this) == 0x7FFFFFFF)
    goto LABEL_91;
  v41 = a5 ^ 1;
  v42 = *a2;
  if (*a2 <= SHIDWORD(this))
    v42 = HIDWORD(this);
  if ((v25 & v41) != 0)
    LODWORD(v40) = v42;
  if ((int)v40 >= *a3)
    LODWORD(v40) = *a3;
  *a3 = v40;
  if ((v41 & 1) != 0)
  {
LABEL_91:
    v36 = 0;
LABEL_68:
    if ((v25 & 1) != 0)
      return this;
    goto LABEL_69;
  }
  if ((int)v40 >= *a2)
    LODWORD(v40) = *a2;
  *a2 = v40;
  if ((v25 & 1) == 0)
  {
    v36 = 0;
LABEL_69:
    if ((int)this >= 1)
    {
      v38 = *a3;
      if (*a3 >= (int)this)
        v38 = this;
      if (v36)
        v39 = v38;
      else
        v39 = this;
      if (*a2 > v39)
        v39 = *a2;
      *a2 = v39;
    }
  }
  return this;
}

uint64_t WebCore::RenderElement::effectiveOverflowInlineDirection(WebCore::RenderElement *this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 12);
  v2 = *((_DWORD *)this + 5);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    result = (unsigned __int16)v1 >> 13;
    if ((v2 & 0x80000) != 0 && !((unsigned __int16)v1 >> 13))
      return 2;
  }
  else
  {
    v3 = (v1 >> 10) & 7;
    if (v3)
      v4 = v3;
    else
      v4 = 2;
    if ((v2 & 0x80000) != 0)
      return v4;
    else
      return v3;
  }
  return result;
}

uint64_t WebCore::RenderElement::effectiveOverflowBlockDirection(WebCore::RenderElement *this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 12);
  v2 = *((_DWORD *)this + 5);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    result = (v1 >> 10) & 7;
    if ((v2 & 0x80000) != 0 && !(_DWORD)result)
      return 2;
  }
  else
  {
    v3 = (unsigned __int16)v1 >> 13;
    if (v3)
      v4 = v3;
    else
      v4 = 2;
    if ((v2 & 0x80000) != 0)
      return v4;
    else
      return v3;
  }
  return result;
}

float WebCore::RenderBox::borderRoundedRect@<S0>(WebCore::RenderBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];

  v2 = *((_QWORD *)this + 20);
  v4[0] = 0;
  v4[1] = v2;
  return WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderBox *)((char *)this + 80), (const WebCore::LayoutRect *)v4, (const WebCore::LayoutSize *)1, 1, a2);
}

double WebCore::RenderBox::borderRadii@<D0>(WebCore::RenderBox *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  float v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  float v18;
  WebCore::RenderStyle *v19;
  double result;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _DWORD v29[2];
  uint64_t v30;

  v4 = *((_DWORD *)this + 38);
  v3 = *((_DWORD *)this + 39);
  v30 = *((_QWORD *)this + 20);
  v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v6 = 0.0;
  v7 = 0.0;
  if ((*(_BYTE *)(v5 + 124) & 0xE) != 0)
  {
    v24 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v24 + 5) && *(_BYTE *)(v24 + 76) == 4)
    {
      if (*(_BYTE *)(v24 + 78))
        v7 = *(float *)(v24 + 72);
      else
        v7 = (float)*(int *)(v24 + 72);
    }
    else
    {
      v7 = *(float *)(v5 + 120);
    }
  }
  v8 = v7;
  if ((*(_BYTE *)(v5 + 172) & 0xE) != 0)
  {
    v25 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v25 + 5) && *(_BYTE *)(v25 + 52) == 4)
    {
      if (*(_BYTE *)(v25 + 54))
        v6 = *(float *)(v25 + 48);
      else
        v6 = (float)*(int *)(v25 + 48);
    }
    else
    {
      v6 = *(float *)(v5 + 168);
    }
  }
  v9 = v6;
  v10 = v8 << 6;
  if (v8 > 0x1FFFFFE)
    v10 = 0x7FFFFFFF;
  if (v9 <= 0x1FFFFFE)
    v11 = v9 << 6;
  else
    v11 = 0x7FFFFFFF;
  v12 = __OFADD__(v4, v10);
  v13 = v4 + v10;
  v14 = (v4 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v14 = v13;
  v12 = __OFADD__(v3, v11);
  v15 = v3 + v11;
  v16 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v12)
    v16 = v15;
  v29[0] = v14;
  v29[1] = v16;
  v17 = 0.0;
  v18 = 0.0;
  if ((*(_BYTE *)(v5 + 148) & 0xE) != 0)
  {
    v23 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v23 + 5) && *(_BYTE *)(v23 + 60) == 4)
    {
      if (*(_BYTE *)(v23 + 62))
        v18 = *(float *)(v23 + 56);
      else
        v18 = (float)*(int *)(v23 + 56);
    }
    else
    {
      v18 = *(float *)(v5 + 144);
    }
  }
  if ((*(_BYTE *)(v5 + 196) & 0xE) != 0)
  {
    v22 = *(_QWORD *)(v5 + 200);
    if (*(_BYTE *)(v22 + 5) && *(_BYTE *)(v22 + 68) == 4)
    {
      if (*(_BYTE *)(v22 + 70))
        v17 = *(float *)(v22 + 64);
      else
        v17 = (float)*(int *)(v22 + 64);
    }
    else
    {
      v17 = *(float *)(v5 + 192);
    }
  }
  v19 = (WebCore::RenderBox *)((char *)this + 80);
  WebCore::LayoutSize::expand<float,float>((int *)&v30, -(float)(v18 + (float)v8), -(float)(v17 + (float)v9));
  WebCore::RenderStyle::getRoundedBorderFor(v19, (const WebCore::LayoutRect *)v29, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v26);
  result = *(double *)&v27;
  v21 = v28;
  *a2 = v27;
  a2[1] = v21;
  return result;
}

uint64_t WebCore::RenderBox::marginBoxRect(WebCore::RenderBox *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth(this, (const WebCore::Length *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 64));
  WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth(this, (const WebCore::Length *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 48));
  v3 = WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth(this, (const WebCore::Length *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40));
  WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth(this, (const WebCore::Length *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 56));
  if (v3 == 0x80000000)
    v4 = 0x7FFFFFFFLL;
  else
    v4 = -v3;
  if (v2 == 0x80000000)
    v5 = 0x7FFFFFFFLL;
  else
    v5 = -v2;
  return v5 | (v4 << 32);
}

unint64_t WebCore::RenderBox::absoluteContentBox(WebCore::RenderBox *this)
{
  int64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  WTF *v11;
  _OWORD v13[4];
  char v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  int v20;
  int v21;

  v2 = WebCore::RenderBox::contentBoxRect(this);
  if ((int)v2 >= 0)
    v3 = v2;
  else
    v3 = v2 + 63;
  v4 = v2 - (v3 & 0xFFFFFFC0);
  if (v2 >= 0)
    v5 = HIDWORD(v2);
  else
    v5 = HIDWORD(v2) + 63;
  v6 = HIDWORD(v2) - (v5 & 0xFFFFFFC0);
  v14 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  memset(v13, 0, 41);
  v19 = 1;
  v20 = 0;
  v21 = 0;
  (*(void (**)(WebCore::RenderBox *, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 576))(this, 0, v13, 4, 0);
  WebCore::TransformState::flatten((WebCore::TransformState *)v13, 0);
  v8 = *(_QWORD *)&v13[0];
  v9 = v16;
  v16 = 0;
  if (v9)
    WTF::fastFree(v9, v7);
  v10 = v3 >> 6;
  v11 = v15;
  v15 = 0;
  if (v11)
    WTF::fastFree(v11, v7);
  return (v10 + ((v4 + 32) >> 6) + (int)*(float *)&v8) | ((unint64_t)((v5 >> 6) + ((int)(v6 + 32) >> 6) + (int)*((float *)&v8 + 1)) << 32);
}

WTF *WebCore::RenderBox::absoluteContentQuad@<X0>(WebCore::RenderBox *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  int v5;
  int v6;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v4 = WebCore::RenderBox::contentBoxRect(this);
  v8 = (float)(int)v4 * 0.015625;
  v9 = (float)SHIDWORD(v4) * 0.015625;
  v10 = v8 + (float)((float)v5 * 0.015625);
  v11 = v9;
  v12 = v10;
  v13 = v9 + (float)((float)v6 * 0.015625);
  v14 = v8;
  v15 = v13;
  return WebCore::RenderObject::localToContainerQuad((uint64_t)this, &v8, 0, 2u, a2);
}

uint64_t WebCore::RenderBox::outlineBoundsForRepaint(WebCore::RenderBox *this, const WebCore::RenderLayerModelObject *a2, const WebCore::RenderGeometryMap *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  float v20;
  float v21;
  float v23;
  float v25;
  float v26;
  float v27;
  float v29;
  float v30;
  double v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  double v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  int v51;
  double v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  WTF *v60;
  void *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  __int128 v70;
  __int128 v71;
  int v72[2];
  uint64_t v73;

  v6 = WebCore::RenderBox::localOutlineBoundsRepaintRect(this);
  v73 = v7;
  v8 = HIDWORD(v6);
  if (a2 != this)
  {
    v70 = 0u;
    v71 = 0u;
    v9 = (float)(int)v6 * 0.015625;
    v10 = (float)SHIDWORD(v6) * 0.015625;
    v11 = (float)(int)v7 * 0.015625;
    v12 = (float)SHIDWORD(v7) * 0.015625;
    v62 = v9;
    v63 = v10;
    if (a3)
    {
      v64 = (float)(int)v7 * 0.015625;
      v65 = (float)SHIDWORD(v7) * 0.015625;
      WebCore::RenderGeometryMap::mapToContainer(a3, (const WebCore::FloatRect *)&v62, a2, (float *)&v70);
    }
    else
    {
      v64 = v9 + v11;
      v65 = v63;
      v66 = v9 + v11;
      v67 = v10 + v12;
      v68 = v62;
      v69 = v10 + v12;
      WebCore::RenderObject::localToContainerQuad((uint64_t)this, &v62, (uint64_t)a2, 2u, &v70);
    }
    v13 = *(float *)&v70;
    v14 = *(float *)&v71;
    if (*((float *)&v71 + 2) >= *(float *)&v71)
      v15 = *(float *)&v71;
    else
      v15 = *((float *)&v71 + 2);
    if (*((float *)&v70 + 2) >= *(float *)&v70)
      v16 = *(float *)&v70;
    else
      v16 = *((float *)&v70 + 2);
    if (v15 >= v16)
      v15 = v16;
    v17 = fabsf(v15);
    if (v17 == INFINITY || v17 > 2147500000.0)
      v15 = (float)((SLODWORD(v15) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v71 + 3) >= *((float *)&v71 + 1))
      v19 = *((float *)&v71 + 1);
    else
      v19 = *((float *)&v71 + 3);
    if (*((float *)&v70 + 3) >= *((float *)&v70 + 1))
      v20 = *((float *)&v70 + 1);
    else
      v20 = *((float *)&v70 + 3);
    if (v19 >= v20)
      v19 = v20;
    v21 = fabsf(v19);
    if (v21 == INFINITY || v21 > 2147500000.0)
      v19 = (float)((SLODWORD(v19) >> 31) ^ 0x7FFFFFFF);
    if (*(float *)&v70 < *((float *)&v70 + 2))
      v13 = *((float *)&v70 + 2);
    if (*(float *)&v71 < *((float *)&v71 + 2))
      v14 = *((float *)&v71 + 2);
    if (v13 < v14)
      v13 = v14;
    v23 = fabsf(v13);
    if (v23 == INFINITY || v23 > 2147500000.0)
      v13 = (float)((SLODWORD(v13) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v70 + 1) >= *((float *)&v70 + 3))
      v25 = *((float *)&v70 + 1);
    else
      v25 = *((float *)&v70 + 3);
    if (*((float *)&v71 + 1) >= *((float *)&v71 + 3))
      v26 = *((float *)&v71 + 1);
    else
      v26 = *((float *)&v71 + 3);
    if (v25 >= v26)
      v26 = v25;
    v27 = fabsf(v26);
    if (v27 == INFINITY || v27 > 2147500000.0)
      v26 = (float)((SLODWORD(v26) >> 31) ^ 0x7FFFFFFF);
    v29 = v13 - v15;
    v30 = v26 - v19;
    v31 = v15 * 64.0;
    if (v31 > -2147483650.0)
      v32 = (int)v31;
    else
      v32 = 0x80000000;
    if (v31 < 2147483650.0)
      LODWORD(v6) = v32;
    else
      LODWORD(v6) = 0x7FFFFFFF;
    v33 = v19 * 64.0;
    if (v33 >= 2147483650.0)
    {
      LODWORD(v8) = 0x7FFFFFFF;
    }
    else if (v33 <= -2147483650.0)
    {
      LODWORD(v8) = 0x80000000;
    }
    else
    {
      LODWORD(v8) = (int)v33;
    }
    v34 = v29 * 64.0;
    if (v34 > -2147483650.0)
      v35 = (int)v34;
    else
      v35 = 0x80000000;
    if (v34 < 2147483650.0)
      v36 = v35;
    else
      v36 = 0x7FFFFFFF;
    LODWORD(v73) = v36;
    v37 = v30 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
    }
    else if (v37 > -2147483650.0)
    {
      v38 = (int)v37;
    }
    else
    {
      v38 = 0x80000000;
    }
    HIDWORD(v73) = v38;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v40 = *(_QWORD *)(*(_QWORD *)(v39 + 1944) + 248);
  v41 = *(unsigned int *)(v40 + 508);
  if ((_DWORD)v41 && (v41 = *(_QWORD *)(*(_QWORD *)(v40 + 496) + 8 * v41 - 8)) != 0)
  {
    v42 = *(_DWORD *)(v41 + 64);
    LODWORD(v41) = *(_DWORD *)(v41 + 68);
  }
  else
  {
    v42 = 0;
  }
  v43 = __OFADD__((_DWORD)v6, v42);
  v44 = v6 + v42;
  if (v43)
    v44 = (v6 >> 31) + 0x7FFFFFFF;
  v72[0] = v44;
  v43 = __OFADD__((_DWORD)v8, (_DWORD)v41);
  v45 = v8 + v41;
  if (v43)
    v45 = (v8 >> 31) + 0x7FFFFFFF;
  v72[1] = v45;
  v46 = *(_QWORD *)(v39 + 528);
  v47 = 1.0;
  if (v46)
  {
    v48 = *(_QWORD *)(v46 + 8);
    if (v48)
    {
      v49 = *(_QWORD *)(v48 + 24);
      if (v49)
      {
        v50 = *(float **)(v49 + 8);
        if (v50)
        {
          v51 = (*(_DWORD *)v50)++;
          v47 = v50[91];
          if (v51)
          {
            *(_DWORD *)v50 = v51;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v50);
            WTF::fastFree(v60, v61);
          }
        }
      }
    }
  }
  v52 = WebCore::snapRectToDevicePixels(v72, v47) * 64.0;
  v54 = 0x7FFFFFFFLL;
  v55 = 0x80000000;
  if (v52 > -2147483650.0)
    v55 = (int)v52;
  if (v52 < 2147483650.0)
    v54 = v55;
  v56 = v53 * 64.0;
  v57 = 0x7FFFFFFF00000000;
  v58 = 0x8000000000000000;
  if (v56 > -2147483650.0)
    v58 = (unint64_t)(int)v56 << 32;
  if (v56 < 2147483650.0)
    v57 = v58;
  return v57 | v54;
}

uint64_t WebCore::RenderBox::addFocusRingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(result + 160);
  if ((int)v3 >= 1 && SHIDWORD(v3) >= 1)
  {
    *(_QWORD *)&v9 = *a3;
    *((_QWORD *)&v9 + 1) = v3;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v9);
      v6 = *(unsigned int *)(a2 + 12);
      v7 = *(_QWORD *)a2;
      v8 = *(_OWORD *)result;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = v9;
    }
    *(_OWORD *)(v7 + 16 * v6) = v8;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t WebCore::RenderBox::canUseOverlayScrollbars(WebCore::RenderBox *this)
{
  uint64_t *v1;
  uint64_t result;
  char *v3;

  if ((*((_BYTE *)this + 103) & 2) == 0
    || (result = WebCore::RenderStyle::usesStandardScrollbarStyle((WebCore::RenderBox *)((char *)this + 80)),
        (_DWORD)result))
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v1 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          return (*(uint64_t (**)(uint64_t *))(*v1 + 64))(v1);
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_12;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v1 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      return (*(uint64_t (**)(uint64_t *))(*v1 + 64))(v1);
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_12:
    *v3 = 1;
    return (*(uint64_t (**)(uint64_t *))(*v1 + 64))(v1);
  }
  return result;
}

uint64_t WebCore::RenderBox::scroll(WebCore::RenderObject *this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  WebCore::ScrollableArea *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = *((_QWORD *)this + 18);
  if (v14)
  {
    v15 = *(WebCore::ScrollableArea **)(v14 + 264);
    if (v15)
    {
      if (WebCore::ScrollableArea::scroll(v15, a2, a3, a4))
      {
        if (!a5)
          return 1;
        if ((*((_BYTE *)this + 45) & 1) != 0)
        {
          v16 = 0;
LABEL_8:
          *a5 = v16;
          return 1;
        }
        v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (!v16 || (*(_WORD *)(v16 + 28) & 8) != 0)
          goto LABEL_8;
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x19638F6D8);
      }
    }
  }
  if (a5)
  {
    if (*a5)
    {
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
        v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v17)
        {
          if ((*(_WORD *)(v17 + 28) & 8) == 0)
            goto LABEL_22;
          if (*a5 == v17)
            return 1;
        }
      }
    }
  }
  result = (uint64_t)WebCore::RenderObject::containingBlock(this);
  if (result)
  {
    if (*(_BYTE *)(result + 46) == 49)
      return 0;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 1368))(result, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t WebCore::RenderBox::logicalScroll(WebCore::RenderObject *this, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  WebCore::ScrollableArea *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  char v20;
  char v21;
  BOOL v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int v27;
  float v28;
  uint64_t v29;
  int8x16_t v30;
  double v31;
  int8x16_t v32;
  int v33;
  int v34;

  v10 = *((_QWORD *)this + 18);
  if (v10)
  {
    v11 = *(WebCore::ScrollableArea **)(v10 + 264);
    if (v11)
    {
      if ((_DWORD)a3 == 2)
      {
        v12 = *((_DWORD *)this + 5) & 0x1000;
        v13 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
        v34 = 2;
        switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_6;
          case 3:
          case 5:
            v13 = 3;
            goto LABEL_6;
          case 4:
            goto LABEL_7;
          default:
            v13 = 0;
LABEL_6:
            v34 = v13;
LABEL_7:
            v14 = 50;
            if (!v12)
              v14 = 49;
            v15 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v11 + 8 * v14))(v11);
            if (!v15)
              goto LABEL_10;
            v27 = v12 >> 12;
            if ((v34 & 0xFFFFFFFD) == 1)
              v28 = (float)a4 * (float)*(int *)(v15 + 92);
            else
              v28 = -(float)((float)a4 * (float)*(int *)(v15 + 92));
            v29 = WebCore::ScrollableArea::scrollAnimator(v11);
            *(float *)v30.i32 = v28;
            v16 = WebCore::ScrollAnimator::singleAxisScroll(v29, v27, 1, v30, v31, v32);
            break;
        }
      }
      else
      {
LABEL_10:
        v16 = 0;
      }
      v17 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
      v33 = 2;
      switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
      {
        case 1:
        case 2:
          goto LABEL_13;
        case 3:
        case 5:
          v17 = 3;
          goto LABEL_13;
        case 4:
          goto LABEL_14;
        default:
          v17 = 0;
LABEL_13:
          v33 = v17;
LABEL_14:
          v18 = v33 & 0xFFFFFFFD;
          switch((int)a2)
          {
            case 0:
              v19 = v18 == 1;
              if (v18 == 1)
                v20 = 3;
              else
                v20 = 2;
              v21 = v19;
              goto LABEL_33;
            case 1:
              v22 = v18 == 1;
              if (v18 == 1)
                v20 = 2;
              else
                v20 = 3;
              v21 = !v22;
              goto LABEL_33;
            case 2:
              v20 = v18 == 1;
              if (v20)
                v21 = 3;
              else
                v21 = 2;
              goto LABEL_33;
            case 3:
              v19 = v18 == 1;
              v20 = v18 != 1;
              if (v19)
                v21 = 2;
              else
                v21 = 3;
LABEL_33:
              if ((*((_DWORD *)this + 5) & 0x1000) != 0)
                v23 = v20;
              else
                v23 = v21;
              break;
            default:
              v23 = 0;
              break;
          }
          if ((WebCore::ScrollableArea::scroll(v11, v23, a3, a4) | v16) != 1)
            goto LABEL_42;
          if (a5)
          {
            if ((*((_BYTE *)this + 45) & 1) != 0)
            {
              v24 = 0;
            }
            else
            {
              v24 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
              if (v24 && (*(_WORD *)(v24 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19638F9A8);
              }
            }
            *a5 = v24;
          }
          break;
      }
      return 1;
    }
  }
LABEL_42:
  if (a5)
  {
    if (*a5)
    {
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
        v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if (v25)
        {
          if ((*(_WORD *)(v25 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19638F988);
          }
          if (*a5 == v25)
            return 1;
        }
      }
    }
  }
  result = (uint64_t)WebCore::RenderObject::containingBlock(this);
  if (result)
  {
    if (*(_BYTE *)(result + 46) == 49)
      return 0;
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)result + 1376))(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t WebCore::RenderBox::canBeScrolledAndHasScrollableArea(WebCore::RenderBox *this)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;

  result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1384))(this);
  if ((_DWORD)result)
  {
    v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1208))(this);
    v4 = *((_DWORD *)this + 40);
    v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
    if (__OFSUB__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 - v5;
    v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v8 = v6 - v7;
    v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v10 = v9 << 6;
    if (v9 < -33554432)
      v10 = 0x80000000;
    if (v9 > 0x1FFFFFF)
      v10 = 0x7FFFFFFF;
    v11 = __OFSUB__(v8, v10);
    v12 = v8 - v10;
    if (v11)
      v12 = (v8 >> 31) + 0x7FFFFFFF;
    if (v3 == (((v12 & ~(v12 >> 31) & 0x20u) + 32) >> 6) + ((v12 & ~(v12 >> 31)) >> 6))
    {
      v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1216))(this);
      v14 = *((_DWORD *)this + 41);
      v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
      if (__OFSUB__(v14, v15))
        v16 = (v14 >> 31) + 0x7FFFFFFF;
      else
        v16 = v14 - v15;
      v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
      if (__OFSUB__(v16, v17))
        v18 = (v16 >> 31) + 0x7FFFFFFF;
      else
        v18 = v16 - v17;
      v19 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
      v20 = v19 << 6;
      if (v19 < -33554432)
        v20 = 0x80000000;
      if (v19 > 0x1FFFFFF)
        v20 = 0x7FFFFFFF;
      v11 = __OFSUB__(v18, v20);
      v21 = v18 - v20;
      if (v11)
        v21 = (v18 >> 31) + 0x7FFFFFFF;
      return v13 != (((v21 & ~(v21 >> 31) & 0x20u) + 32) >> 6) + ((v21 & ~(v21 >> 31)) >> 6);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::canBeProgramaticallyScrolled(WebCore::RenderBox *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;

  if (*((_BYTE *)this + 46) == 49)
    return 1;
  if ((*((_BYTE *)this + 22) & 1) == 0)
    return 0;
  v3 = (*((_BYTE *)this + 45) & 2) != 0
     ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96)
     : *((_QWORD *)this + 12);
  v4 = v3 & 0x1C00;
  if (v4 == 2048 || !v4)
    return 0;
  v5 = *((_QWORD *)this + 12);
  if (((v5 >> 10) & 7) - 3 <= 1)
  {
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1208))(this);
    v7 = *((_DWORD *)this + 40);
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
    if (__OFSUB__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v9 = v7 - v8;
    v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v9, v10))
      v11 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v11 = v9 - v10;
    v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    v13 = v12 << 6;
    if (v12 < -33554432)
      v13 = 0x80000000;
    if (v12 > 0x1FFFFFF)
      v13 = 0x7FFFFFFF;
    v14 = __OFSUB__(v11, v13);
    v15 = v11 - v13;
    if (v14)
      v15 = (v11 >> 31) + 0x7FFFFFFF;
    if (v6 != (((v15 & ~(v15 >> 31) & 0x20u) + 32) >> 6) + ((v15 & ~(v15 >> 31)) >> 6))
      return 1;
    if ((*((_BYTE *)this + 22) & 1) == 0)
      goto LABEL_26;
    v5 = *((_QWORD *)this + 12);
  }
  if (((unsigned __int16)v5 >> 13) - 3 <= 1)
  {
    v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1216))(this);
    v17 = *((_DWORD *)this + 41);
    v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
    if (__OFSUB__(v17, v18))
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    else
      v19 = v17 - v18;
    v20 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v19, v20))
      v21 = (v19 >> 31) + 0x7FFFFFFF;
    else
      v21 = v19 - v20;
    v22 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v23 = v22 << 6;
    if (v22 < -33554432)
      v23 = 0x80000000;
    if (v22 > 0x1FFFFFF)
      v23 = 0x7FFFFFFF;
    v14 = __OFSUB__(v21, v23);
    v24 = v21 - v23;
    if (v14)
      v24 = (v21 >> 31) + 0x7FFFFFFF;
    if (v16 != (((v24 & ~(v24 >> 31) & 0x20u) + 32) >> 6) + ((v24 & ~(v24 >> 31)) >> 6))
      return 1;
  }
LABEL_26:
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19638FD4CLL);
    }
    return WebCore::Node::computeEditability(result, 0, 1) != 0;
  }
  return result;
}

uint64_t WebCore::RenderBox::autoscroll(uint64_t this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9[3];
  __int16 v10;
  char v11;
  char v12;
  __int128 v13;

  v3 = *(_QWORD *)(this + 144);
  if (v3)
  {
    v4 = WebCore::ScrollView::windowToContents(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32)+ 24)+ 8)+ 40)+ 8)+ 1944)+ 248), a2, a3);
    v5 = ((_DWORD)v4 << 6);
    if ((int)v4 < -33554432)
      v5 = 0x80000000;
    v6 = 0x8000000000000000;
    if (SHIDWORD(v4) >= -33554432)
      v6 = HIDWORD(v4) << 38;
    v7 = 0x7FFFFFFF00000000;
    if (SHIDWORD(v4) <= 0x1FFFFFF)
      v7 = v6;
    if ((int)v4 > 0x1FFFFFF)
      v5 = 0x7FFFFFFFLL;
    *(_QWORD *)&v13 = v7 | v5;
    *((_QWORD *)&v13 + 1) = 0x4000000040;
    v8 = *(_QWORD *)(v3 + 32);
    LOBYTE(v9[0]) = 0;
    v9[1] = (int *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
    v9[2] = (int *)&WebCore::ScrollAlignment::alignToEdgeIfNeeded;
    v10 = 1;
    v11 = 0;
    v12 = 0;
    return WebCore::LocalFrameView::scrollRectToVisible(&v13, v8, 0, v9);
  }
  return this;
}

unint64_t WebCore::RenderBox::calculateAutoscrollDirection(WebCore::RenderBox *this, const WebCore::IntPoint *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WebCore::IntRect *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD v18[2];
  uint64_t v19;

  v4 = WebCore::RenderObject::absoluteBoundingBoxRect(this, 1, 0);
  v19 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 + 64) + 832))(v6 + 64, 0, 1);
  v18[0] = v7 + v4;
  v18[1] = HIDWORD(v7) + HIDWORD(v4);
  v9 = WebCore::ScrollView::contentsToWindow(*(WebCore::ScrollView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)+ 8)+ 1944)+ 248), (const WebCore::IntRect *)v18, v8);
  v11 = *(_QWORD *)a2;
  v12 = HIDWORD(*(_QWORD *)a2);
  if ((int)v9 + v13 - 20 >= (int)*(_QWORD *)a2)
    v14 = *(_QWORD *)a2;
  else
    v14 = *(_QWORD *)a2 + 20;
  if ((int)v9 + 20 > (int)v11)
    v15 = v11 - 20;
  else
    v15 = v14;
  if (HIDWORD(v9) + v10 - 20 >= (int)v12)
    v16 = HIDWORD(*(_QWORD *)a2);
  else
    LODWORD(v16) = v12 + 20;
  if (HIDWORD(v9) + 20 > (int)v12)
    LODWORD(v16) = v12 - 20;
  return (v15 - v11) | ((unint64_t)(v16 - v12) << 32);
}

uint64_t WebCore::RenderBox::findAutoscrollable(uint64_t this, WebCore::RenderObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (this)
  {
    v2 = this;
    while (1)
    {
      if ((*(_BYTE *)(v2 + 45) & 4) != 0)
      {
        if (*(_BYTE *)(v2 + 46) == 49)
        {
          if (WebCore::LocalFrameView::isScrollable(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40)
                                                                                       + 8)
                                                                           + 1944)
                                                               + 248)))
            goto LABEL_20;
        }
        else if (WebCore::RenderBox::canBeScrolledAndHasScrollableArea((WebCore::RenderBox *)v2))
        {
LABEL_20:
          if ((*(_BYTE *)(v2 + 45) & 4) != 0)
            return v2;
          else
            return 0;
        }
      }
      if (*(_BYTE *)(v2 + 46) == 49
        && (v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 40) + 8) + 528)) != 0
        && (v4 = *(_QWORD *)(v3 + 8)) != 0
        && (v5 = *(_QWORD *)(v4 + 120)) != 0
        && (v6 = *(_QWORD *)(v5 + 8)) != 0)
      {
        v2 = *(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL;
        if (v2 && (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          this = 105;
          __break(0xC471u);
          return this;
        }
        if (!v2)
          return 0;
      }
      else
      {
        v7 = *(_QWORD *)(v2 + 32);
        if (!v7)
          return 0;
        v2 = *(_QWORD *)(v7 + 8);
        if (!v2)
          return 0;
      }
    }
  }
  return this;
}

WebCore::ScrollableArea *WebCore::RenderBox::panScroll(WebCore::ScrollableArea *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    this = *(WebCore::ScrollableArea **)(v2 + 264);
    if (this)
      return WebCore::RenderLayerScrollableArea::panScrollFromPoint(this, a2);
  }
  return this;
}

uint64_t WebCore::RenderBox::hasAutoScrollbar(uint64_t a1, int a2)
{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char **v23;

  if ((*(_BYTE *)(a1 + 22) & 1) == 0)
    return 0;
  if (a2)
  {
    if (a2 != 1)
      return 0;
    v2 = 13;
  }
  else
  {
    v2 = 10;
  }
  v3 = *(_QWORD *)(a1 + 96);
  v4 = (v3 >> v2) & 7;
  if ((_DWORD)v4 == 4)
    return 1;
  if ((_DWORD)v4 != 3)
    return 0;
  if ((v3 & 0x200000000000000) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 586))
  {
LABEL_9:
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v5 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          return (*(uint64_t (**)(uint64_t *))(*v5 + 64))(v5);
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_22;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v5 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      return (*(uint64_t (**)(uint64_t *))(*v5 + 64))(v5);
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_22:
    *v9 = 1;
    return (*(uint64_t (**)(uint64_t *))(*v5 + 64))(v5);
  }
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v8)
  {
    v12 = *(_QWORD *)(a1 + 104);
    v19 = &v18;
    v20 = &v18;
    v21 = &v18;
    v22 = &v18;
    if ((_DWORD)v8 == -1)
      goto LABEL_31;
  }
  else
  {
    if ((*(_BYTE *)(v7 + 390) & 4) == 0)
      return 0;
    v12 = *(_QWORD *)(a1 + 104);
    v19 = &v18;
    v20 = &v18;
    v21 = &v18;
    v22 = &v18;
  }
  v23 = &v19;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v13, &v23, v7 + 384);
  v19 = &v18;
  v20 = &v18;
  v21 = &v18;
  v22 = &v18;
  v10 = *(unsigned int *)(v12 + 408);
  if ((_DWORD)v10 != -1)
  {
    v23 = &v19;
    ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v15, &v23, v12 + 400);
    v17 = 1;
    if (v16 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v19, &v15);
    v16 = -1;
    if (v14 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v14])(&v19, &v13);
    goto LABEL_9;
  }
LABEL_31:
  v11 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderBox::hasAlwaysPresentScrollbar(v11);
}

uint64_t WebCore::RenderBox::hasAlwaysPresentScrollbar(uint64_t a1, int a2)
{
  char v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  WebCore::RenderBox *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char **v22;

  if ((*(_BYTE *)(a1 + 22) & 1) == 0)
    return 0;
  if (a2)
  {
    if (a2 != 1)
      return 0;
    v2 = 13;
  }
  else
  {
    v2 = 10;
  }
  v3 = *(_QWORD *)(a1 + 96);
  if (((v3 >> v2) & 7) != 3)
    return 0;
  if ((v3 & 0x200000000000000) == 0 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 586))
    goto LABEL_8;
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(unsigned int *)(v6 + 392);
  if ((_DWORD)v7)
  {
    v11 = *(_QWORD *)(a1 + 104);
    v18 = &v17;
    v19 = &v17;
    v20 = &v17;
    v21 = &v17;
    if ((_DWORD)v7 == -1)
      goto LABEL_30;
  }
  else
  {
    if ((*(_BYTE *)(v6 + 390) & 4) == 0)
      return 1;
    v11 = *(_QWORD *)(a1 + 104);
    v18 = &v17;
    v19 = &v17;
    v20 = &v17;
    v21 = &v17;
  }
  v22 = &v18;
  ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v12, &v22, v6 + 384);
  v18 = &v17;
  v19 = &v17;
  v20 = &v17;
  v21 = &v17;
  v9 = *(unsigned int *)(v11 + 408);
  if ((_DWORD)v9 != -1)
  {
    v22 = &v18;
    ((void (*)(uint64_t *__return_ptr, char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v14, &v22, v11 + 400);
    v16 = 1;
    if (v15 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(&v18, &v14);
    v15 = -1;
    if (v13 != -1)
      ((void (*)(char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v18, &v12);
LABEL_8:
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v4 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          return (*(unsigned int (**)(uint64_t *))(*v4 + 64))(v4) ^ 1;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_21;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v4 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      return (*(unsigned int (**)(uint64_t *))(*v4 + 64))(v4) ^ 1;
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_21:
    *v8 = 1;
    return (*(unsigned int (**)(uint64_t *))(*v4 + 64))(v4) ^ 1;
  }
LABEL_30:
  v10 = (WebCore::RenderBox *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderBox::hasStretchedLogicalHeight(v10);
}

uint64_t WebCore::RenderBox::hasStretchedLogicalHeight(WebCore::RenderBox *this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  unsigned int v19;

  v1 = *((_DWORD *)this + 31);
  v2 = *((_QWORD *)this + 11);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = v3 + 4;
  v5 = v3 + 12;
  if (((v1 >> 13) & 6) - 2 >= 4)
    v4 = v5;
  if (*(_BYTE *)(v4 + 4))
    return 0;
  v8 = *(_QWORD *)(v2 + 24);
  v9 = (unsigned __int16)v1 >> 13;
  v10 = (v9 - 1) > 4 ? 0 : qword_1969FC6C8[v9 - 1];
  v11 = v8 + 40;
  if (!*(_BYTE *)(v11 + 8 * v10 + 4))
    return 0;
  v12 = v9 - 1;
  v13 = v12 > 4 ? 2 : qword_1969FC6F0[v12];
  if (!*(_BYTE *)(v11 + 8 * v13 + 4))
    return 0;
  result = (uint64_t)WebCore::RenderObject::containingBlock(this);
  if (result)
  {
    v14 = (_QWORD *)result;
    v15 = *((unsigned __int8 *)this + 46);
    if (((*(_BYTE *)(result + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
    {
      if (v15 == 12)
      {
        v16 = WebCore::RenderGrid::isSubgridInParentDirection(this, 1);
        result = 1;
        if ((v16 & 1) != 0)
          return result;
      }
      v17 = (*(uint64_t (**)(_QWORD *, WebCore::RenderBox *))(*v14 + 1600))(v14, this);
      v18 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
      v19 = v18 & 0xF;
      if (v19 != 1)
        goto LABEL_26;
      v18 = *(_BYTE *)(*(_QWORD *)(v14[11] + 32) + 124);
    }
    else
    {
      if (v15 == 12 && (WebCore::RenderGrid::isSubgridInParentDirection(this, 0) & 1) != 0)
        return 1;
      v17 = (*(uint64_t (**)(_QWORD *, WebCore::RenderBox *))(*v14 + 1600))(v14, this);
      v18 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
      v19 = v18 & 0xF;
      if (v19 != 1)
        goto LABEL_26;
      v18 = *(_BYTE *)(*(_QWORD *)(v14[11] + 32) + 126);
    }
    v19 = v18 & 0xF;
LABEL_26:
    if (v19 < 3)
      v18 = v17;
    return (v18 & 0xF) == 3;
  }
  return result;
}

uint64_t WebCore::RenderBox::flipForWritingMode(uint64_t this, WebCore::RenderObject::RepaintRects *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  v2 = (unsigned __int16)*(_DWORD *)(this + 124) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (!v3 && v4 != 0)
    return WebCore::RenderObject::RepaintRects::flipForWritingMode((uint64_t)a2, *(_QWORD *)(this + 160), (*(_DWORD *)(this + 20) & 0x1000) == 0);
  return this;
}

uint64_t WebCore::RenderBox::computeIntrinsicLogicalWidths(WebCore::RenderBox *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  int v24;

  v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 408))(this);
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
  v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v9 = v7 + v8;
  v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 + v10;
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  v14 = __OFSUB__(v6, v13);
  v15 = v6 - v13;
  if (v14)
    v15 = (v6 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a2 = v15;
  v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 416))(this);
  v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
  v18 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v17, v18))
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  else
    v19 = v17 + v18;
  v20 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v19, v20))
    v21 = (v19 >> 31) + 0x7FFFFFFF;
  else
    v21 = v19 + v20;
  result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
  v23 = v21 + result;
  if (__OFADD__(v21, (_DWORD)result))
    v23 = (v21 >> 31) + 0x7FFFFFFF;
  v14 = __OFSUB__(v16, v23);
  v24 = v16 - v23;
  if (v14)
    v24 = (v16 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v24;
  return result;
}

uint64_t WebCore::RenderBox::setOverridingLogicalHeight(_QWORD *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v5;
  int v6;

  v6 = a2;
  v3 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
  if (!WebCore::gOverridingLogicalHeightMap)
  {
    v5 = a1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    a1 = v5;
    *v3 = 0;
    v3[1] = 0;
    WebCore::gOverridingLogicalHeightMap = (uint64_t)v3;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v3, a1, &v6);
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int i;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  unsigned int v30;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v29 = (WTF *)a2[1];
    a2[1] = v8;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
      {
        WTF::fastFree(v29, a2);
        v8 = a2[1];
      }
      else
      {
        --*(_DWORD *)v29;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree((WTF *)v8, a2);
  else
    *(_DWORD *)v8 = v11;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)a1),
        (v12 = *(_QWORD *)a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  v15 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v13;
    v21 = (uint64_t *)(v12 + 16 * v20);
    result = *v21;
    if (!*v21)
    {
      if (v14)
      {
        *v14 = 0;
        *((_DWORD *)v14 + 2) = 0x80000000;
        --*(_DWORD *)(*(_QWORD *)a1 - 16);
        *v14 = v8;
      }
      else
      {
        *v21 = v8;
        v14 = (uint64_t *)(v12 + 16 * v20);
      }
      *((_DWORD *)v14 + 2) = *a3;
      v23 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          return result;
      }
      else
      {
        if (3 * v28 > 4 * v27)
          return result;
        if (!(_DWORD)v28)
        {
          v30 = 8;
          return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v30, (WTF **)v14);
        }
      }
      v30 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v30, (WTF **)v14);
    }
    if (result != -1)
    {
      v21 = v14;
      if (result == v8)
        break;
    }
    v18 = i + v20;
    v14 = v21;
  }
  *(_DWORD *)(v12 + 16 * v20 + 8) = *a3;
  if (*(_DWORD *)v8 == 1)
    return WTF::fastFree((WTF *)v8, a2);
  --*(_DWORD *)v8;
  return result;
}

uint64_t WebCore::RenderBox::setOverridingLogicalWidth(_QWORD *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v5;
  int v6;

  v6 = a2;
  v3 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
  if (!WebCore::gOverridingLogicalWidthMap)
  {
    v5 = a1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    a1 = v5;
    *v3 = 0;
    v3[1] = 0;
    WebCore::gOverridingLogicalWidthMap = (uint64_t)v3;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v3, a1, &v6);
}

uint64_t WebCore::RenderBox::overridingLogicalHeight(WebCore::RenderBox *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t *)WebCore::gOverridingLogicalHeightMap;
  if (!WebCore::gOverridingLogicalHeightMap)
    goto LABEL_18;
  ++*(_DWORD *)(WebCore::gOverridingLogicalHeightMap + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *v1;
    if (*v1)
    {
      v4 = *(_DWORD *)(v3 - 8);
      v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      v8 = v4 & ((v7 >> 31) ^ v7);
      for (i = 1; ; ++i)
      {
        v10 = *(_QWORD *)(v3 + 16 * v8);
        if (!v10)
        {
          v12 = *(unsigned int *)(v3 - 4);
          v13 = v3 + 16 * v12;
          v14 = v13;
          goto LABEL_13;
        }
        if (v10 != -1 && v10 == v2)
          break;
        v8 = (v8 + i) & v4;
      }
      v13 = v3 + 16 * v8;
      v12 = *(unsigned int *)(v3 - 4);
      v14 = v3 + 16 * v12;
LABEL_13:
      v22 = v13;
      v15 = v3 + 16 * v12;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v22 = 0;
      v23 = 0;
    }
LABEL_14:
    while (v13 != v15 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
    {
      v20 = v13 + 16;
      v22 = v20;
      v13 = v14;
      if (v20 != v14)
      {
        v13 = v20;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 16;
          v22 = v13;
          if (v13 == v14)
          {
            v13 = v14;
            goto LABEL_14;
          }
        }
      }
    }
  }
  else
  {
    WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v21, v1);
    v3 = *(_QWORD *)WebCore::gOverridingLogicalHeightMap;
  }
  if (v3)
    v3 += 16 * *(unsigned int *)(v3 - 4);
  if (v22 != v3)
  {
    v18 = *(_DWORD *)(v22 + 8) & 0xFFFFFF00;
    v17 = *(_DWORD *)(v22 + 8);
    v16 = 0x100000000;
  }
  else
  {
LABEL_18:
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  return v16 | v18 | v17;
}

unint64_t WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(WebCore::RenderBox *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalWidthMap + 8);
    v2 = *((_QWORD *)this + 1);
    if (v2 && *(_QWORD *)(v2 + 8))
    {
      v3 = *v1;
      if (*v1)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 16 * v8);
          if (!v10)
          {
            v12 = *(unsigned int *)(v3 - 4);
            v13 = v3 + 16 * v12;
            v14 = v13;
            goto LABEL_13;
          }
          if (v10 != -1 && v10 == v2)
            break;
          v8 = (v8 + i) & v4;
        }
        v13 = v3 + 16 * v8;
        v12 = *(unsigned int *)(v3 - 4);
        v14 = v3 + 16 * v12;
LABEL_13:
        v21 = v13;
        v15 = v3 + 16 * v12;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v21 = 0;
        v22 = 0;
      }
LABEL_14:
      while (v13 != v15 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
      {
        v19 = v13 + 16;
        v21 = v19;
        v13 = v14;
        if (v19 != v14)
        {
          v13 = v19;
          while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
          {
            v13 += 16;
            v21 = v13;
            if (v13 == v14)
            {
              v13 = v14;
              goto LABEL_14;
            }
          }
        }
      }
    }
    else
    {
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v20, v1);
      v3 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
    }
    if (v3)
      v3 += 16 * *(unsigned int *)(v3 - 4);
    if (v21 != v3)
    {
      v17 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFF00;
      v16 = *(_QWORD *)(v21 + 8);
      return v17 | v16;
    }
    v16 = 0;
  }
  else
  {
    v16 = 0;
  }
  v17 = 0;
  return v17 | v16;
}

unint64_t WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(WebCore::RenderBox *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalHeightMap + 8);
    v5 = *((_QWORD *)this + 1);
    if (v5 && *(_QWORD *)(v5 + 8))
    {
      v6 = *v1;
      if (*v1)
      {
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        for (i = 1; ; ++i)
        {
          v13 = *(_QWORD *)(v6 + 16 * v11);
          if (!v13)
          {
            v15 = *(unsigned int *)(v6 - 4);
            v16 = v6 + 16 * v15;
            v17 = v16;
            goto LABEL_16;
          }
          if (v13 != -1 && v13 == v5)
            break;
          v11 = (v11 + i) & v7;
        }
        v16 = v6 + 16 * v11;
        v15 = *(unsigned int *)(v6 - 4);
        v17 = v6 + 16 * v15;
LABEL_16:
        v21 = v16;
        v18 = v6 + 16 * v15;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v21 = 0;
        v22 = 0;
      }
LABEL_17:
      while (v16 != v18 && !*(_QWORD *)(*(_QWORD *)v16 + 8))
      {
        v19 = v16 + 16;
        v21 = v19;
        v16 = v17;
        if (v19 != v17)
        {
          v16 = v19;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 16;
            v21 = v16;
            if (v16 == v17)
            {
              v16 = v17;
              goto LABEL_17;
            }
          }
        }
      }
    }
    else
    {
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v20, v1);
      v6 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    }
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
    if (v21 != v6)
    {
      v3 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFF00;
      v2 = *(_QWORD *)(v21 + 8);
      return v3 | v2;
    }
    v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  v3 = 0;
  return v3 | v2;
}

unint64_t WebCore::RenderBox::overridingContainingBlockContentHeight(WebCore::RenderBox *a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((a2 - 2) < 4)
    return WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(a1);
  v2 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalHeightMap + 8);
    v6 = *((_QWORD *)a1 + 1);
    if (v6 && *(_QWORD *)(v6 + 8))
    {
      v7 = *v2;
      if (*v2)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 16 * v12);
          if (!v14)
          {
            v16 = *(unsigned int *)(v7 - 4);
            v17 = v7 + 16 * v16;
            v18 = v17;
            goto LABEL_18;
          }
          if (v14 != -1 && v14 == v6)
            break;
          v12 = (v12 + i) & v8;
        }
        v17 = v7 + 16 * v12;
        v16 = *(unsigned int *)(v7 - 4);
        v18 = v7 + 16 * v16;
LABEL_18:
        v22 = v17;
        v19 = v7 + 16 * v16;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v22 = 0;
        v23 = 0;
      }
LABEL_19:
      while (v17 != v19 && !*(_QWORD *)(*(_QWORD *)v17 + 8))
      {
        v20 = v17 + 16;
        v22 = v20;
        v17 = v18;
        if (v20 != v18)
        {
          v17 = v20;
          while ((unint64_t)(*(_QWORD *)v17 + 1) <= 1)
          {
            v17 += 16;
            v22 = v17;
            if (v17 == v18)
            {
              v17 = v18;
              goto LABEL_19;
            }
          }
        }
      }
    }
    else
    {
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v21, v2);
      v7 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    }
    if (v7)
      v7 += 16 * *(unsigned int *)(v7 - 4);
    if (v22 != v7)
    {
      v4 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFF00;
      v3 = *(_QWORD *)(v22 + 8);
      return v4 | v3;
    }
    v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
  return v4 | v3;
}

WTF *WebCore::RenderBox::setOverridingContainingBlockContentLogicalWidth(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v6 = a2;
  v3 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalWidthMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalWidthMap)
  {
    v5 = a1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    a1 = v5;
    *v3 = 0;
    v3[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalWidthMap = (uint64_t)v3;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v3, a1, (int *)&v6);
}

WTF *WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>(uint64_t a1, _QWORD *a2, int *a3)
{
  unsigned int v6;
  unsigned int v7;
  WTF *v8;
  int v9;
  BOOL v10;
  int v11;
  void *v12;
  WTF *result;
  WTF *v14;
  uint64_t v15;
  WTF *v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v8 = (WTF *)a2[1];
  if (!v8)
  {
    v8 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *((_QWORD *)v8 + 1) = a2;
    v14 = (WTF *)a2[1];
    a2[1] = v8;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
      {
        WTF::fastFree(v14, a2);
        v8 = (WTF *)a2[1];
      }
      else
      {
        --*(_DWORD *)v14;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v16 = v8;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree(v8, a2);
  else
    *(_DWORD *)v8 = v11;
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>&>((uint64_t *)a1, &v16, a3, (uint64_t)&v15);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF *WebCore::RenderBox::setOverridingContainingBlockContentLogicalHeight(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v6 = a2;
  v3 = (_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (!WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    v5 = a1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    a1 = v5;
    *v3 = 0;
    v3[1] = 0;
    WebCore::gOverridingContainingBlockContentLogicalHeightMap = (uint64_t)v3;
  }
  return WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,std::optional<WebCore::LayoutUnit>&>((uint64_t)v3, a1, (int *)&v6);
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  result = a2[1];
  if (result)
  {
    if (*(_QWORD *)(result + 8))
    {
      v7 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 16 * v12);
          if (!v14)
            break;
          if (v14 != -1 && v14 == result)
          {
            if (v12 == *(_DWORD *)(v7 - 4))
              return 0;
            v16 = (_QWORD *)(v7 + 16 * v12);
            *v16 = 0;
            if (*(_DWORD *)result == 1)
              WTF::fastFree((WTF *)result, a2);
            else
              --*(_DWORD *)result;
            *v16 = -1;
            ++*(_DWORD *)(*(_QWORD *)a1 - 16);
            v17 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
              v18 = *(_DWORD *)(v17 - 12) - 1;
            else
              v18 = -1;
            *(_DWORD *)(v17 - 12) = v18;
            v19 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              v20 = 6 * *(_DWORD *)(v19 - 12);
              v21 = *(_DWORD *)(v19 - 4);
              if (v20 < v21 && v21 >= 9)
                WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v21 >> 1, 0);
            }
            return 1;
          }
          v12 = (v12 + i) & v8;
        }
      }
    }
    return 0;
  }
  return result;
}

void *WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::Length const&>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int i;
  uint64_t v20;
  uint64_t *v21;
  void *result;
  void *v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  WTF *v34;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v8 = a2[1];
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a2;
    v34 = (WTF *)a2[1];
    a2[1] = v8;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, a2);
        v8 = a2[1];
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  v9 = *(_DWORD *)v8;
  *(_DWORD *)v8 += 2;
  v10 = __CFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    WTF::fastFree((WTF *)v8, a2);
  else
    *(_DWORD *)v8 = v11;
  v12 = *(_QWORD *)a1;
  if (*(_QWORD *)a1
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand((uint64_t *)a1),
        (v12 = *(_QWORD *)a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  v15 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = (v17 >> 31) ^ v17;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v13;
    v21 = (uint64_t *)(v12 + 16 * v20);
    result = (void *)*v21;
    if (!*v21)
    {
      if (v14)
      {
        *(uint64_t *)((char *)v14 + 7) = 0;
        *v14 = 0;
        --*(_DWORD *)(*(_QWORD *)a1 - 16);
        *v14 = v8;
      }
      else
      {
        *v21 = v8;
        v14 = (uint64_t *)(v12 + 16 * v20);
      }
      v24 = v14 + 1;
      if (v14 + 1 != (uint64_t *)a3)
      {
        if (*((_BYTE *)v14 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v24);
        }
        v25 = a3[4];
        *((_BYTE *)v14 + 12) = v25;
        *((_BYTE *)v14 + 13) = a3[5];
        if (v25 <= 0xD)
        {
          v26 = 1 << v25;
          if ((v26 & 0x7FC) != 0)
          {
            *((_BYTE *)v14 + 14) = a3[6];
            *v24 = *(_DWORD *)a3;
          }
          else if ((v26 & 0x3003) != 0)
          {
            *v24 = 0;
          }
          else
          {
            *v24 = *(_DWORD *)a3;
            result = WebCore::Length::ref((int *)v14 + 2);
          }
        }
      }
      v27 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v30 = *(_DWORD *)(v29 - 12);
      else
        v30 = 0;
      v31 = (*(_DWORD *)(v29 - 16) + v30);
      v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
      {
        if (v32 > 2 * v31)
          return result;
      }
      else
      {
        if (3 * v32 > 4 * v31)
          return result;
        if (!(_DWORD)v32)
        {
          v33 = 8;
          return (void *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v33);
        }
      }
      v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
      return (void *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v33);
    }
    if (result != (void *)-1)
    {
      v21 = v14;
      if (result == (void *)v8)
        break;
    }
    v18 = i + v20;
    v14 = v21;
  }
  result = WebCore::Length::operator=((WebCore::Length *)(v12 + 16 * v20 + 8), a3);
  if (*(_DWORD *)v8 == 1)
    return (void *)WTF::fastFree((WTF *)v8, v23);
  --*(_DWORD *)v8;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v25;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  result = a2[1];
  if (result)
  {
    if (*(_QWORD *)(result + 8))
    {
      v7 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v8 = *(_DWORD *)(v7 - 8);
        v9 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        for (i = 1; ; ++i)
        {
          v14 = *(_QWORD *)(v7 + 16 * v12);
          if (!v14)
            break;
          v15 = v12;
          if (v14 != -1 && v14 == result)
          {
            if (v12 == *(_DWORD *)(v7 - 4))
              return 0;
            v17 = (_QWORD *)(v7 + 16 * v12);
            *v17 = 0;
            if (*(_DWORD *)result == 1)
              WTF::fastFree((WTF *)result, a2);
            else
              --*(_DWORD *)result;
            *v17 = -1;
            v18 = v7 + 16 * v15;
            if (*(_BYTE *)(v18 + 12) == 11)
            {
              v25 = (unsigned int *)(v18 + 8);
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v25);
            }
            ++*(_DWORD *)(*(_QWORD *)a1 - 16);
            v19 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
              v20 = *(_DWORD *)(v19 - 12) - 1;
            else
              v20 = -1;
            *(_DWORD *)(v19 - 12) = v20;
            v21 = *(_QWORD *)a1;
            if (*(_QWORD *)a1)
            {
              v22 = 6 * *(_DWORD *)(v21 - 12);
              v23 = *(_DWORD *)(v21 - 4);
              if (v22 < v23 && v23 >= 9)
                WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v23 >> 1);
            }
            return 1;
          }
          v12 = (v12 + i) & v8;
        }
      }
    }
    return 0;
  }
  return result;
}

WTF *WebCore::RenderBox::clearTrimmedMarginsMarkings(WebCore::RenderBox *this, void *a2)
{
  WTF *result;

  result = WebCore::RenderObject::ensureRareData(this, a2);
  *((_BYTE *)result + 2) = 0;
  return result;
}

uint64_t WebCore::RenderBox::adjustBorderBoxLogicalWidthForBoxSizing(_QWORD *a1, int a2, int a3)
{
  double v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;

  v4 = (float)((float)a2 * 0.015625) * 64.0;
  if (a3 == 11)
  {
    if (v4 >= 2147483650.0)
    {
      v6 = 0x7FFFFFFF;
    }
    else if (v4 <= -2147483650.0)
    {
      v6 = 0x80000000;
    }
    else
    {
      v6 = (int)v4;
    }
    v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 1064))(a1);
    v18 = (*(uint64_t (**)(_QWORD *))(*a1 + 1072))(a1);
    if (__OFADD__(v17, v18))
      v19 = (v17 >> 31) + 0x7FFFFFFF;
    else
      v19 = v17 + v18;
    v20 = (*(uint64_t (**)(_QWORD *))(*a1 + 976))(a1);
    if (__OFADD__(v19, v20))
      v21 = (v19 >> 31) + 0x7FFFFFFF;
    else
      v21 = v19 + v20;
    v22 = (*(uint64_t (**)(_QWORD *))(*a1 + 984))(a1);
    v13 = v21 + v22;
    if (__OFADD__(v21, v22))
      v13 = (v21 >> 31) + 0x7FFFFFFF;
    if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) != 0)
      goto LABEL_21;
LABEL_16:
    v14 = __OFADD__(v6, v13);
    v15 = v6 + v13;
    if (v14)
      return (v6 >> 31) + 0x7FFFFFFF;
    else
      return v15;
  }
  if (v4 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else if (v4 <= -2147483650.0)
  {
    v6 = 0x80000000;
  }
  else
  {
    v6 = (int)v4;
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 1064))(a1);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 1072))(a1);
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v9 = v7 + v8;
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 976))(a1);
  if (__OFADD__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 + v10;
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 984))(a1);
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) == 0
    || (a3 - 7) < 4
    || !a3
    || (a3 - 5) <= 1)
  {
    goto LABEL_16;
  }
LABEL_21:
  if ((int)v6 <= v13)
    return v13;
  else
    return v6;
}

uint64_t WebCore::RenderBox::adjustBorderBoxLogicalHeightForBoxSizing(_QWORD *a1, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 1048))(a1);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 1056))(a1);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 968))(a1);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v10)
    v11 = (v6 >> 31) + 0x7FFFFFFF;
  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) != 0)
  {
    if (v11 <= (int)a2)
      return a2;
    else
      return v11;
  }
  else
  {
    v10 = __OFADD__(a2, v11);
    v12 = a2 + v11;
    if (v10)
      return (a2 >> 31) + 0x7FFFFFFF;
    else
      return v12;
  }
}

uint64_t WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(_QWORD *a1, int a2, int a3)
{
  double v4;
  _BOOL4 v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;

  v4 = (float)((float)a2 * 0.015625) * 64.0;
  v5 = v4 < 2147483650.0;
  if (v4 <= -2147483650.0)
    v5 = 0;
  if (a3 != 11)
  {
    if (v5)
      goto LABEL_5;
    if (v4 >= 2147483650.0)
    {
      v6 = 0x7FFFFFFF;
      goto LABEL_6;
    }
    if (v4 > -2147483650.0)
LABEL_5:
      v6 = (int)v4;
    else
      v6 = 0x80000000;
LABEL_6:
    if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) == 0
      || (a3 - 7) < 4
      || !a3
      || (a3 - 5) < 2)
    {
      return v6 & ~(v6 >> 31);
    }
    goto LABEL_11;
  }
  if (v5)
    goto LABEL_24;
  if (v4 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else
  {
    if (v4 > -2147483650.0)
    {
LABEL_24:
      v6 = (int)v4;
      goto LABEL_25;
    }
    v6 = 0x80000000;
  }
LABEL_25:
  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) == 0)
    return v6 & ~(v6 >> 31);
LABEL_11:
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 1064))(a1);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 1072))(a1);
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 + v9;
  v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 976))(a1);
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 + v11;
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 984))(a1);
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  v15 = __OFSUB__(v6, v14);
  v16 = v6 - v14;
  if (v15)
    v6 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v6 = v16;
  return v6 & ~(v6 >> 31);
}

uint64_t WebCore::RenderBox::adjustIntrinsicLogicalHeightForBoxSizing(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if ((*(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 68) & 4) != 0)
  {
    v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 1048))(a1);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
    if (__OFADD__(v4, v5))
      v6 = (v4 >> 31) + 0x7FFFFFFF;
    else
      v6 = v4 + v5;
    v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 1056))(a1);
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 968))(a1);
    v9 = v7 + v8;
    if (__OFADD__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v6, v9);
    v11 = v6 + v9;
    if (v10)
      v11 = (v6 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__((_DWORD)a2, v11);
    v12 = (a2 + v11);
    if (v10)
      return (a2 >> 31) + 0x7FFFFFFF;
    else
      return v12;
  }
  return a2;
}

uint64_t WebCore::RenderBox::hitTestClipPath(WebCore::HitTestLocation const&,WebCore::LayoutPoint const&)const::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::LegacyRenderSVGResourceClipper *v4;
  char v5;
  int *v6;
  float v7;
  float v8;
  uint64_t result;
  int v10;
  float v11;
  float v12;
  float32x2_t v13;
  uint64_t v14;
  float v15;
  float v16;

  v3 = *a1;
  v4 = (WebCore::LegacyRenderSVGResourceClipper *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL);
  if (!v4)
  {
    v5 = MEMORY[0x2E];
    goto LABEL_7;
  }
  if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19639214CLL);
  }
  v5 = *(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E);
  if (v5 != 75)
  {
LABEL_7:
    if (v5 == 95)
    {
      v6 = (int *)((char *)v4 + 16);
      ++*(_DWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      v11 = (float)*(int *)(v3 + 160);
      v12 = (float)*(int *)(v3 + 164) * 0.015625;
      v14 = 0;
      v15 = v11 * 0.015625;
      v16 = v12;
      v13 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)a1[1]), (float32x2_t)vdup_n_s32(0x3C800000u));
      result = WebCore::LegacyRenderSVGResourceClipper::hitTestClipContent(v4, (const WebCore::FloatRect *)&v14, (const WebCore::FloatPoint *)&v13);
      v10 = *v6;
      if (*v6)
        goto LABEL_5;
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x19639212CLL);
  }
  v6 = (int *)((char *)v4 + 16);
  ++*(_DWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  v7 = (float)*(int *)(v3 + 160) * 0.015625;
  v8 = (float)*(int *)(v3 + 164) * 0.015625;
  v14 = 0;
  v15 = v7;
  v16 = v8;
  result = WebCore::RenderSVGResourceClipper::hitTestClipContent(v4, (const WebCore::FloatRect *)&v14, (const WebCore::LayoutPoint *)a1[1]);
  v10 = *v6;
  if (!*v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19639216CLL);
  }
LABEL_5:
  *v6 = v10 - 1;
  return result;
}

uint64_t WebCore::RenderBox::nodeAtPoint(WebCore::RenderBox *this, int *a2, WebCore::HitTestResult *a3, float32x4_t *a4, const WebCore::LayoutPoint *a5, unsigned int a6)
{
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t result;
  unint64_t v24;
  int v25;
  int v26;
  signed int v27;
  int v28;
  signed int v29;
  signed int v30;
  int v31;
  signed int v32;
  unsigned int v33;
  unsigned __int32 v34;
  uint64_t v35;
  WebCore::ImageOverlay *v36;
  WebCore::Node *v37;
  void *v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::RenderBox *v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int32 v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54[2];
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;

  v12 = *((_DWORD *)this + 38);
  v11 = *((_DWORD *)this + 39);
  v13 = *((_DWORD *)a5 + 1);
  v14 = __OFADD__(*(_DWORD *)a5, v12);
  LODWORD(v15) = *(_DWORD *)a5 + v12;
  if (v14)
    v15 = ((*(_DWORD *)a5 >> 31) + 0x7FFFFFFF);
  else
    v15 = v15;
  v14 = __OFADD__(v13, v11);
  LODWORD(v16) = v13 + v11;
  if (v14)
    v16 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v16 = v16;
  v56 = v15 | (v16 << 32);
  v17 = *(unsigned int *)((char *)this + 71);
  if (v17 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32))
  {
    v18 = *(_QWORD *)((v17 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
    if (v18)
    {
      while (1)
      {
        if ((*(_BYTE *)(v18 + 21) & 0x80) == 0)
        {
          v53 = v18;
          v52 = a6;
          v44 = (*(uint64_t (**)(uint64_t, int *, WebCore::HitTestResult *, float32x4_t *, uint64_t *, _QWORD))(*(_QWORD *)v18 + 336))(v18, a2, a3, a4, &v56, a6);
          a6 = v52;
          v18 = v53;
          if (v44)
            break;
        }
        v45 = *(unsigned int *)(v18 + 40);
        if (v45 | ((unint64_t)*(unsigned __int8 *)(v18 + 44) << 32))
        {
          v18 = *(_QWORD *)((v45 | ((unint64_t)*(unsigned __int8 *)(v18 + 44) << 32)) + 8);
          if (v18)
            continue;
        }
        LODWORD(v15) = v56;
        LODWORD(v16) = HIDWORD(v56);
        goto LABEL_9;
      }
      v46 = a4->u32[1];
      LODWORD(v47) = a4->i32[0] - v56;
      if (__OFSUB__(a4->i32[0], (_DWORD)v56))
        v47 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
      else
        v47 = v47;
      LODWORD(v48) = v46 - HIDWORD(v56);
      if (__OFSUB__(v46, HIDWORD(v56)))
        v48 = (v46 >> 31) + 0x7FFFFFFF;
      else
        v48 = v48;
      v57 = v47 | (v48 << 32);
      (*(void (**)(WebCore::RenderBox *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)this
                                                                                                 + 328))(this, a3, &v57);
      return 1;
    }
  }
LABEL_9:
  v19 = *((_QWORD *)this + 20);
  v55 = v19;
  v54[0] = v15;
  v54[1] = v16;
  if ((*(_QWORD *)a2 & 0xFF00000000) != 0 && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    return 0;
  if ((*((_BYTE *)this + 120) & 0x30) != 0)
    return 0;
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v21 + 104) + 239) & 0x18) != 0)
        return 0;
    }
  }
  if ((*(_QWORD *)a2 & 0x10) != 0)
  {
    v22 = 1;
  }
  else
  {
    v40 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v41 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 8);
    if (*(_BYTE *)(v41 + 3441))
    {
      if (*(_QWORD *)(v41 + 1272) != v40)
        goto LABEL_78;
    }
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v42 = 0;
    else
      v42 = this;
    if (v20 && (*((_BYTE *)this + 45) & 2) != 0)
      v42 = *(WebCore::RenderBox **)(v20 + 8);
    if ((*(_BYTE *)(*((_QWORD *)v42 + 13) + 239) & 1) != 0)
LABEL_78:
      v43 = 0;
    else
      v43 = (*((_DWORD *)v42 + 31) >> 6) & 0xF;
    v22 = v43 != 0;
  }
  if (a6 != 4)
    return 0;
  if (!v22)
    return 0;
  if ((int)v19 < 1)
    return 0;
  v24 = HIDWORD(v19);
  if (SHIDWORD(v19) < 1)
    return 0;
  v25 = a4[1].i32[0];
  if (v25 < 1)
    return 0;
  v26 = a4[1].i32[1];
  if (v26 < 1)
    return 0;
  v27 = a4->i32[2];
  v14 = __OFADD__(v27, v25);
  v28 = v27 + v25;
  if (v14)
    v28 = (v27 >> 31) + 0x7FFFFFFF;
  if ((int)v15 >= v28)
    return 0;
  v14 = __OFADD__((_DWORD)v15, (_DWORD)v19);
  v29 = v15 + v19;
  if (v14)
    v29 = (v15 >> 31) + 0x7FFFFFFF;
  if (v27 >= v29)
    return 0;
  v30 = a4->i32[3];
  v31 = v30 + v26;
  if (__OFADD__(v30, v26))
    v31 = (v30 >> 31) + 0x7FFFFFFF;
  if ((int)v16 >= v31)
    return 0;
  v32 = v16 + v24;
  if (__OFADD__((_DWORD)v16, (_DWORD)v24))
    v32 = (v16 >> 31) + 0x7FFFFFFF;
  if (v30 >= v32)
    return 0;
  if (!a4[4].i8[1]
    && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)v54, (const WebCore::LayoutRect *)&a4->u32[2]))
  {
    LODWORD(v57) = WebCore::LayoutRect::operator WebCore::FloatRect(v54);
    HIDWORD(v57) = v49;
    v58 = v50;
    v59 = v51;
    if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)&a4[2], (const WebCore::FloatRect *)&v57))
      return 0;
  }
  result = WebCore::RenderBox::hitTestVisualOverflow(this, (const WebCore::HitTestLocation *)a4, (const WebCore::LayoutPoint *)*(unsigned int *)a5, *((_DWORD *)a5 + 1));
  if ((_DWORD)result)
  {
    result = WebCore::RenderBox::hitTestClipPath(this, (const WebCore::HitTestLocation *)a4, a5);
    if ((_DWORD)result)
    {
      result = WebCore::RenderBox::hitTestBorderRadius(this, a4, a5);
      if ((_DWORD)result)
      {
        v33 = a4->i32[0] - v56;
        if (__OFSUB__(a4->i32[0], (_DWORD)v56))
          v33 = ((unsigned __int32)a4->i32[0] >> 31) + 0x7FFFFFFF;
        v34 = a4->u32[1];
        v35 = v34 - HIDWORD(v56);
        if (__OFSUB__(v34, HIDWORD(v56)))
          v35 = (v34 >> 31) + 0x7FFFFFFF;
        v57 = v33 | (unint64_t)(v35 << 32);
        (*(void (**)(WebCore::RenderBox *, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)this + 328))(this, a3, &v57);
        v36 = (WebCore::ImageOverlay *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 320))(this);
        if (v36)
        {
          v37 = v36;
          *((_DWORD *)v36 + 6) += 2;
          v39 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v36, a2, (uint64_t)a4, (WebCore::LayoutRect *)v54);
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v37, v38);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
          if (!v39)
            return 1;
        }
        else if (!WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, a2, (uint64_t)a4, (WebCore::LayoutRect *)v54))
        {
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::determineBackgroundBleedAvoidance(WebCore::RenderBox *this, WebCore::GraphicsContext *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  _BOOL4 v7;
  uint64_t v8;
  uint64_t result;
  float v10;
  float v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  float v17;
  int v18;
  uint64_t v19[6];

  if (((*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2) & 1) != 0)
    return 0;
  WebCore::RenderStyle::visitedDependentColor((uint64_t)this + 80, 61, 0, v19);
  if ((v19[0] & 0x8000000000000) != 0)
  {
    v12 = (unsigned int *)(v19[0] & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v19[0] & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v16 = 1;
      goto LABEL_36;
    }
  }
  else if (LOBYTE(v19[0]))
  {
    goto LABEL_11;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v15 = *(_QWORD *)(v5 + 16);
      v7 = v15 != 0;
      if (v15)
        break;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  else
  {
    if (*(_QWORD *)(v5 + 16))
      v6 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    v7 = v6 != 0;
  }
  if ((v19[0] & 0x8000000000000) == 0)
    goto LABEL_10;
  v16 = v7;
  v12 = (unsigned int *)(v19[0] & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_36:
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v4);
    if ((v16 & 1) == 0)
      return 0;
    goto LABEL_11;
  }
  v7 = v16;
LABEL_10:
  if (!v7)
    return 0;
LABEL_11:
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if ((*(float *)(v8 + 120) == 0.0 || (*(_BYTE *)(v8 + 124) & 0xF) == 0)
    && (*(float *)(v8 + 144) == 0.0 || (*(_BYTE *)(v8 + 148) & 0xF) == 0)
    && (*(float *)(v8 + 168) == 0.0 || (*(_BYTE *)(v8 + 172) & 0xF) == 0)
    && (*(float *)(v8 + 192) == 0.0 || (*(_BYTE *)(v8 + 196) & 0xF) == 0))
  {
    return 0;
  }
  result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderBox *)((char *)this + 80));
  if ((_DWORD)result)
  {
    if ((WebCore::RenderElement::borderImageIsLoadedAndCanBeRendered(this) & 1) == 0)
    {
      (*(void (**)(uint64_t *__return_ptr, WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 672))(v19, a2, 1);
      v10 = hypot(*(long double *)v19, *(long double *)&v19[1]);
      v11 = hypot(*(long double *)&v19[2], *(long double *)&v19[3]);
      v17 = v10;
      v18 = LODWORD(v11);
      if (v10 > 1.0)
        v17 = 1.0;
      if (v11 > 1.0)
        v18 = 1065353216;
      if (WebCore::RenderBoxModelObject::borderObscuresBackgroundEdge(this, (const WebCore::FloatSize *)&v17))
        return 1;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) & 0x1FC000) == 0
        && WebCore::RenderBoxModelObject::borderObscuresBackground(this)
        && WebCore::RenderBox::backgroundHasOpaqueTopLayer(this))
      {
        return 3;
      }
      return 2;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::borderObscuresBackground(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  WebCore *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  int v8;
  void *v9;
  uint64_t result;
  WTF *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];

  v1 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  if ((*(float *)(v1 + 120) == 0.0 || (*(_BYTE *)(v1 + 124) & 0xF) == 0)
    && (*(float *)(v1 + 144) == 0.0 || (*(_BYTE *)(v1 + 148) & 0xF) == 0)
    && (*(float *)(v1 + 168) == 0.0 || (*(_BYTE *)(v1 + 172) & 0xF) == 0)
    && (*(float *)(v1 + 192) == 0.0 || (*(_BYTE *)(v1 + 196) & 0xF) == 0)
    || *(_QWORD *)(*(_QWORD *)(v1 + 200) + 8))
  {
    return 0;
  }
  v2 = (WebCore::RenderBoxModelObject *)((char *)this + 80);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  v4 = 1.0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        v7 = *(float **)(v6 + 8);
        if (v7)
        {
          v8 = (*(_DWORD *)v7)++;
          v4 = v7[91];
          if (v8)
          {
            *(_DWORD *)v7 = v8;
          }
          else
          {
            WebCore::Page::~Page((uint64_t)v7);
            WTF::fastFree(v11, v12);
          }
        }
      }
    }
  }
  WebCore::borderEdges(v2, (const WebCore::RenderStyle *)1, v4, 1, (uint64_t)&v30);
  result = 0;
  if (v33 && !v32)
  {
    if ((v30 & 0x8000000000000) != 0)
    {
      if (*(float *)((v30 & 0xFFFFFFFFFFFFLL) + 0x10) == 1.0)
        goto LABEL_27;
    }
    else if ((_BYTE)v30 == 0xFF)
    {
LABEL_27:
      v13 = v31 - 1;
      if (v13 > 8 || ((0x161u >> v13) & 1) == 0)
      {
        result = WebCore::BorderEdge::obscuresBackground((WebCore::BorderEdge *)v34);
        if ((_DWORD)result)
        {
          result = WebCore::BorderEdge::obscuresBackground((WebCore::BorderEdge *)v35);
          if ((_DWORD)result)
            result = WebCore::BorderEdge::obscuresBackground((WebCore::BorderEdge *)v36);
        }
        goto LABEL_18;
      }
    }
    result = 0;
  }
LABEL_18:
  if ((v36[0] & 0x8000000000000) != 0)
  {
    v14 = result;
    v15 = (unsigned int *)(v36[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v9);
      result = v14;
    }
  }
  if ((v35[0] & 0x8000000000000) != 0)
  {
    v18 = result;
    v19 = (unsigned int *)(v35[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v9);
      result = v18;
    }
  }
  if ((v34[0] & 0x8000000000000) != 0)
  {
    v22 = result;
    v23 = (unsigned int *)(v34[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v9);
      result = v22;
    }
  }
  if ((v30 & 0x8000000000000) != 0)
  {
    v26 = result;
    v27 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((WTF *)v27, v9);
      return v26;
    }
  }
  return result;
}

BOOL WebCore::RenderBox::backgroundHasOpaqueTopLayer(WebCore::RenderBox *this)
{
  uint64_t v1;
  BOOL v4;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if ((*(_BYTE *)(v1 + 58) & 0x1C) != 0)
    return 0;
  if ((*(_BYTE *)(v1 + 58) & 3) == 1 && (*((_DWORD *)this + 5) & 0x10000) != 0)
    return 0;
  if (!WebCore::FillLayer::hasOpaqueImage(*(WebCore::FillLayer **)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8), this)|| (*(unsigned __int16 *)(v1 + 56) <= 0xFFu ? (v4 = *(_WORD *)(v1 + 56) == 0) : (v4 = 0), !v4|| ((*(uint64_t (**)(_QWORD, WebCore::RenderBox *, float))(**(_QWORD **)(v1 + 16) + 208))(*(_QWORD *)(v1 + 16), this, *(float *)(*((_QWORD *)this + 13) + 184)) & 1) == 0))
  {
    if (*(_QWORD *)(v1 + 8))
      return 0;
    if (*(_QWORD *)(v1 + 16)
       ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
       : 0)
    {
      return 0;
    }
    WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v13);
    if ((v13 & 0x8000000000000) == 0)
      return (_BYTE)v13 == 0xFF;
    v8 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    v9 = *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
    do
    {
      v10 = __ldaxr(v8);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v8));
    if (!v11)
    {
      v7 = 1;
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v6);
      if (v9 == 1.0)
        return v7;
      return 0;
    }
    if (v9 != 1.0)
      return 0;
  }
  return 1;
}

uint64_t WebCore::RenderBox::ensureControlPart(WebCore::RenderBox *this, void *a2)
{
  WTF *v3;
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = WebCore::RenderObject::ensureRareData(this, a2);
  result = *((_QWORD *)v3 + 3);
  if (!result
    || ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 14) & 0x7F) != *(_BYTE *)(result + 12))
  {
    {
      v8 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v8 + 40) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_QWORD *)v8 = &off_1E335BC30;
    }
    WebCore::RenderTheme::createControlPart(this, &v9);
    v5 = v9;
    v9 = 0;
    v6 = (_DWORD *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = v5;
    if (!v6)
      return *((_QWORD *)v3 + 3);
    v7 = v6[2] - 1;
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v6 = v9;
      v9 = 0;
      if (!v6)
        return *((_QWORD *)v3 + 3);
      v7 = v6[2] - 1;
      if (v6[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        return *((_QWORD *)v3 + 3);
      }
    }
    v6[2] = v7;
    return *((_QWORD *)v3 + 3);
  }
  return result;
}

uint64_t WebCore::RenderBox::ensureControlPartForBorderOnly(WebCore::RenderBox *this)
{
  void (**v2)(WebCore::RenderThemeIOS *__hidden);
  void *v3;
  uint64_t v5;

  {
    v2 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v5 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    v2 = &off_1E335BC30;
    *(_QWORD *)v5 = &off_1E335BC30;
  }
  if (((unsigned int (*)(uint64_t *, WebCore::RenderBox *))v2[4])(&WebCore::RenderTheme::singleton(void)::theme, this))
  {
    return WebCore::RenderBox::ensureControlPart(this, v3);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::RenderBox::ensureControlPartForDecorations(WebCore::RenderBox *this)
{
  void (**v2)(WebCore::RenderThemeIOS *__hidden);
  void *v3;
  uint64_t v5;

  {
    v2 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v5 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v5 + 40) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    v2 = &off_1E335BC30;
    *(_QWORD *)v5 = &off_1E335BC30;
  }
  if (((unsigned int (*)(uint64_t *, WebCore::RenderBox *))v2[5])(&WebCore::RenderTheme::singleton(void)::theme, this))
  {
    return WebCore::RenderBox::ensureControlPart(this, v3);
  }
  else
  {
    return 0;
  }
}

BOOL WebCore::RenderBox::getBackgroundPaintedExtent(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2, WebCore::LayoutRect *a3)
{
  int v3;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL8 v17;
  const WebCore::RenderLayerModelObject *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _OWORD v23[3];
  char v24;
  unint64_t v25;
  __int128 v26;

  v7 = *((_QWORD *)this + 20);
  v8 = HIDWORD(v7);
  v9 = ((int)(v7 - (v3 & 0xFFFFFFC0) + 32) >> 6) + (int)v7 / 64;
  v10 = ((int)(v8 - (v3 & 0xFFFFFFC0) + 32) >> 6) + (int)v8 / 64;
  *(_QWORD *)&v26 = 0;
  v11 = v9 << 6;
  if (v9 < -33554432)
    v11 = 0x80000000;
  if (v9 > 0x1FFFFFF)
    v11 = 0x7FFFFFFF;
  v12 = v10 << 6;
  if (v10 < -33554432)
    v12 = 0x80000000;
  if (v10 <= 0x1FFFFFF)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  *((_QWORD *)&v26 + 1) = __PAIR64__(v13, v11);
  WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, 61, 0, &v25);
  v15 = v25;
  v16 = v25 & 0x8000000000000;
  if ((v25 & 0x8000000000000) != 0)
  {
    if (*(float *)((v25 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
      goto LABEL_12;
  }
  else if ((_BYTE)v25)
  {
    goto LABEL_12;
  }
  v19 = *(const WebCore::RenderLayerModelObject **)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*((_QWORD *)v19 + 2) && !*((_QWORD *)v19 + 1))
  {
    WebCore::BackgroundPainter::calculateBackgroundImageGeometry(this, 0, v19, a2, (const WebCore::LayoutPoint *)&v26, (uint64_t)v23);
    *(_OWORD *)a3 = v23[0];
    v17 = v24 == 0;
    v15 = v25;
    v16 = v25 & 0x8000000000000;
    goto LABEL_13;
  }
LABEL_12:
  *(_OWORD *)a3 = v26;
  v17 = 1;
LABEL_13:
  if (v16)
  {
    v20 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v14);
    }
  }
  return v17;
}

BOOL WebCore::RenderElement::hasBackground(WebCore::RenderElement *this)
{
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  _BOOL8 result;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  WebCore::RenderStyle::visitedDependentColor((uint64_t)this + 80, 61, 0, &v11);
  if ((v11 & 0x8000000000000) != 0)
  {
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v7 = 1;
      do
      {
LABEL_13:
        v8 = __ldaxr(v6);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v6));
      if (!v9)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
      return v7;
    }
  }
  else if ((_BYTE)v11)
  {
    return 1;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*(_QWORD *)(v3 + 8))
  {
    do
    {
      v10 = *(_QWORD *)(v3 + 16);
      result = v10 != 0;
      if (v10)
        break;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  else
  {
    if (*(_QWORD *)(v3 + 16))
      v4 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v4 = 0;
    result = v4 != 0;
  }
  if ((v11 & 0x8000000000000) != 0)
  {
    v7 = result;
    v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    goto LABEL_13;
  }
  return result;
}

uint64_t WebCore::RenderBox::paintMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  BOOL v4;
  WebCore::RenderBox *v5;
  uint64_t v8;
  _QWORD v9[2];

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4)
  {
    v5 = (WebCore::RenderBox *)this;
    if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0
      && (*(_BYTE *)(this + 120) & 0x30) == 0
      && *((_WORD *)a2 + 8) == 1024)
    {
      this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
      if ((this & 1) == 0)
      {
        v8 = *((_QWORD *)v5 + 20);
        v9[0] = *(_QWORD *)a3;
        v9[1] = v8;
        (*(void (**)(WebCore::RenderBox *, _QWORD *))(*(_QWORD *)v5 + 1576))(v5, v9);
        return WebCore::RenderBox::paintMaskImages(v5, a2, (const WebCore::LayoutRect *)v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderBox::paintMaskImages(WebCore::RenderBox *this, const WebCore::PaintInfo *a2, const WebCore::LayoutRect *a3)
{
  uint64_t v6;
  uint64_t (*v7)();
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v18;
  void *v19;
  uint64_t result;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::RenderBox *v25;
  const WebCore::PaintInfo *v26;

  if ((*((_BYTE *)this + 21) & 0x80) != 0
    && (v6 = *(_QWORD *)(*((_QWORD *)this + 18) + 256)) != 0
    && (*(_QWORD *)(v6 + 112)
      ? (v7 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance)
      : (v7 = 0),
        v7 ? (v8 = (*((_DWORD *)a2 + 5) & 0x200) == 0) : (v8 = 0),
        v8))
  {
    v18 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 11);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 216) + 8);
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, WebCore::RenderBox *))(*(_QWORD *)v10 + 56))(v10, this);
      v9 = *((_QWORD *)this + 11);
    }
    else
    {
      v11 = 1;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48);
    if (v12)
    {
      while (1)
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          if (!(*(unsigned int (**)(uint64_t, WebCore::RenderBox *))(*(_QWORD *)v13 + 56))(v13, this))
            break;
        }
        v12 = *(_QWORD *)(v12 + 8);
        if (!v12)
          goto LABEL_17;
      }
      v14 = 0;
    }
    else
    {
LABEL_17:
      v14 = 1;
    }
    v15 = v11 & v14;
    v16 = *((_QWORD *)a2 + 10);
    if (*(_BYTE *)(v16 + 194) != 7 || *(_BYTE *)(v16 + 195) != 1)
    {
      *(_WORD *)(v16 + 194) = 263;
      *(_DWORD *)(v16 + 184) |= 0x20u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 88))(v16, v16 + 8);
    (*(void (**)(_QWORD, float))(**((_QWORD **)a2 + 10) + 592))(*((_QWORD *)a2 + 10), 1.0);
    if (!v15)
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 608))(*((_QWORD *)a2 + 10));
    v18 = 1;
  }
  v25 = this;
  v26 = a2;
  v24 = 0;
  WebCore::BackgroundPainter::paintFillLayers((uint64_t)&v25, (const WebCore::CachedImageClient *)&v24, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 48), (uint64_t *)a3, 0, 2u, 0);
  if ((v24 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v19);
    }
  }
  v25 = this;
  v26 = a2;
  result = WebCore::BorderPainter::paintNinePieceImage((uint64_t *)&v25, (__int128 *)a3, (uint64_t)this + 80, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 216), 2);
  if (v18)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 608))(*((_QWORD *)a2 + 10));
  return result;
}

uint64_t WebCore::RenderBox::paintClippingMask(uint64_t this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  void *v25;
  int32x4_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  float32x4_t v31;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
    v4 = v3 == this;
  else
    v4 = 1;
  if (v4)
  {
    v5 = this;
    if ((*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) == 0
      && (*(_BYTE *)(this + 120) & 0x30) == 0
      && *((_WORD *)a2 + 8) == 2048)
    {
      this = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
      if ((this & 1) == 0)
      {
        v9 = *(_QWORD *)(v5 + 160);
        v10 = *(_QWORD *)a3;
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8)
                                    + 680)
                        + 680) & 0x800000000000) != 0
          && (v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 40) + 264)) != 0
          && !*(_DWORD *)(v11 + 12))
        {
          v26.i64[0] = *(_QWORD *)a3;
          v26.i64[1] = *(_QWORD *)(v5 + 160);
          v31 = vmulq_f32(vcvtq_f32_s32(v26), (float32x4_t)vdupq_n_s32(0x3C800000u));
          this = *((_QWORD *)a2 + 10);
          v27 = *((_QWORD *)a2 + 3);
          if ((!v27 || v27 == v5)
            && (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 4) == 0
            && (*(_BYTE *)(v5 + 120) & 0x30) == 0)
          {
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 40))(this);
            if ((this & 1) == 0)
            {
              this = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle((WebCore::RenderLayerModelObject *)v5);
              if (this)
                return (uint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)this, a2, (const WebCore::RenderLayerModelObject *)v5, (const WebCore::FloatRect *)&v31);
            }
          }
        }
        else
        {
          v12 = *((_QWORD *)a2 + 10);
          v13 = HIDWORD(v10);
          v14 = (int)v10 / 64;
          v15 = v10 - (v8 & 0xFFFFFFC0);
          v16 = (int)v13 / 64;
          v17 = v13 - (v8 & 0xFFFFFFC0);
          v18 = HIDWORD(v9);
          v19 = __OFADD__(v15, (_DWORD)v9);
          v20 = v15 + v9;
          if (v19)
            v20 = (v15 >> 31) + 0x7FFFFFFF;
          v19 = __OFADD__(v17, (_DWORD)v18);
          v21 = v17 + v18;
          v22 = (v17 >> 31) + 0x7FFFFFFF;
          if (v19)
            v21 = (v17 >> 31) + 0x7FFFFFFF;
          v23 = v17 + 32;
          v24 = v15 + 32;
          v31.f32[0] = (float)(v14 + (v24 >> 6));
          v31.f32[1] = (float)(v16 + (v23 >> 6));
          v31.f32[2] = (float)(v20 / 64 - (v24 >> 6) + ((int)(v20 - (v22 & 0xFFFFFFC0) + 32) >> 6));
          v31.f32[3] = (float)(v21 / 64 - (v23 >> 6) + ((int)(v21 - (v24 & 0xFFFFFFC0) + 32) >> 6));
          v30 = 0x11040000000000FFLL;
          this = (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t *))(*(_QWORD *)v12 + 224))(v12, &v31, &v30);
          if ((v30 & 0x8000000000000) != 0)
          {
            this = v30 & 0xFFFFFFFFFFFFLL;
            do
            {
              v28 = __ldaxr((unsigned int *)this);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)this));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)this);
              return WTF::fastFree((WTF *)this, v25);
            }
          }
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::RenderBox::maskClipRect(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  const WebCore::RenderLayerModelObject *v14;
  uint64_t v15;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  signed int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD v31[2];

  v4 = *((_QWORD *)this + 11);
  v5 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v5 + 216);
  v6 = (uint64_t *)(v5 + 216);
  if (*(_QWORD *)(v7 + 8))
  {
    v8 = WebCore::RenderStyle::imageOutsets((uint64_t)this + 80, v6);
    if (v9 == 0x80000000)
      v10 = 0x7FFFFFFF;
    else
      v10 = -v9;
    if (v8 == 0x80000000)
      v11 = 0x7FFFFFFFLL;
    else
      v11 = -v8;
  }
  else
  {
    v13 = *((_QWORD *)this + 20);
    v31[0] = 0;
    v31[1] = v13;
    v14 = *(const WebCore::RenderLayerModelObject **)(*(_QWORD *)(v4 + 32) + 48);
    if (v14)
    {
      v10 = 0;
      v11 = 0;
      v15 = 0;
      do
      {
        if (*((_QWORD *)v14 + 2))
        {
          WebCore::BackgroundPainter::calculateBackgroundImageGeometry(this, 0, v14, a2, (const WebCore::LayoutPoint *)v31, (uint64_t)&v28);
          if ((int)v30 >= 1 && SHIDWORD(v30) >= 1)
          {
            if ((int)v15 < 1 || v15 <= 0)
            {
              v10 = v28;
              v11 = v29;
              v15 = v30;
            }
            else
            {
              if ((int)v28 >= (int)v10)
                v17 = v10;
              else
                v17 = v28;
              if ((int)v29 >= (int)v11)
                v18 = v11;
              else
                v18 = v29;
              v19 = v10 + v15;
              if (__OFADD__(v10, (_DWORD)v15))
                v19 = (v10 >> 31) + 0x7FFFFFFF;
              v20 = v28 + v30;
              if (__OFADD__(v28, (_DWORD)v30))
                v20 = (v28 >> 31) + 0x7FFFFFFF;
              if (v19 > v20)
                v20 = v19;
              v21 = v11 + HIDWORD(v15);
              if (__OFADD__((_DWORD)v11, HIDWORD(v15)))
                v21 = (v11 >> 31) + 0x7FFFFFFF;
              v22 = v29 + HIDWORD(v30);
              if (__OFADD__(v29, HIDWORD(v30)))
                v22 = (v29 >> 31) + 0x7FFFFFFF;
              if (v21 > v22)
                v22 = v21;
              v23 = __OFSUB__(v20, v17);
              v24 = v20 - v17;
              LODWORD(v25) = (v20 >> 31) + 0x7FFFFFFF;
              if (v23)
                v25 = v25;
              else
                v25 = v24;
              v23 = __OFSUB__(v22, (_DWORD)v18);
              v26 = v22 - v18;
              LODWORD(v27) = (v22 >> 31) + 0x7FFFFFFF;
              if (v23)
                v27 = v27;
              else
                v27 = v26;
              v15 = v25 | (v27 << 32);
              v10 = v17;
              v11 = v18;
            }
          }
        }
        v14 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)v14 + 1);
      }
      while (v14);
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  return v10 | (unint64_t)(v11 << 32);
}

uint64_t WebCore::RenderBox::imageChanged(void const*,WebCore::IntRect const*)::$_0::operator()<WebCore::RenderStyle>(uint64_t result, uint64_t a2)
{
  WebCore::RenderBox *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(WebCore::RenderBox **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v4 = result;
      if (!**(_BYTE **)(result + 8))
      {
        result = WebCore::RenderBox::repaintLayerRectsForImage(*(WebCore::RenderBox **)result, **(const void ***)(result + 16), *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8), 1);
        **(_BYTE **)(v4 + 8) = result;
        if ((result & 1) == 0)
        {
          result = WebCore::RenderBox::repaintLayerRectsForImage(v2, **(const void ***)(v4 + 16), *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 48), 0);
          **(_BYTE **)(v4 + 8) = result;
        }
      }
    }
  }
  return result;
}

unint64_t WebCore::RenderBox::clipRect(WebCore::RenderBox *this, const WebCore::LayoutPoint *a2, WebCore::RenderFragmentContainer *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  float v10;
  double v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  float v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  float v24;
  float v25;

  v5 = *((_DWORD *)this + 40);
  v4 = *((_DWORD *)this + 41);
  v7 = *(_DWORD *)a2;
  v6 = *((unsigned int *)a2 + 1);
  v8 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 40);
  v9 = v8[124];
  if (v8[124])
  {
    if (v9 == 4)
    {
      v10 = *((float *)v8 + 30);
      if (!v8[126])
        v10 = (float)SLODWORD(v10);
      goto LABEL_5;
    }
    v12 = 0;
    if (v8[124] > 8u)
    {
      if (v9 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v8 + 120), (float)v5 * 0.015625);
LABEL_5:
        v11 = v10 * 64.0;
        if (v11 >= 2147483650.0)
        {
          v12 = 0x7FFFFFFF;
        }
        else if (v11 <= -2147483650.0)
        {
          v12 = 0x80000000;
        }
        else
        {
          v12 = (int)v11;
        }
        goto LABEL_8;
      }
      if (v9 == 9)
        goto LABEL_55;
    }
    else
    {
      if (v9 == 3)
      {
        v24 = *((float *)v8 + 30);
        if (!v8[126])
          v24 = (float)SLODWORD(v24);
        v10 = (float)((float)((float)v5 * 0.015625) * v24) / 100.0;
        goto LABEL_5;
      }
      if (v9 == 1)
LABEL_55:
        v12 = *((_DWORD *)this + 40);
    }
LABEL_8:
    if (__OFADD__(v7, v12))
      v7 = (v7 >> 31) + 0x7FFFFFFF;
    else
      v7 += v12;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v14 = *(unsigned __int8 *)(v13 + 108);
  if (*(_BYTE *)(v13 + 108) && v14 != 4 && *(unsigned __int8 *)(v13 + 108) > 8u && v14 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v13 + 104), (float)*((int *)this + 40) * 0.015625);
  v15 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 40);
  v16 = v15[100];
  if (v15[100])
  {
    if (v16 == 4)
    {
      v17 = *((float *)v15 + 24);
      if (!v15[102])
        v17 = (float)SLODWORD(v17);
      goto LABEL_17;
    }
    v19 = 0;
    if (v15[100] > 8u)
    {
      if (v16 == 11)
      {
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v15 + 96), (float)v4 * 0.015625);
LABEL_17:
        v18 = v17 * 64.0;
        if (v18 >= 2147483650.0)
        {
          v19 = 0x7FFFFFFF;
        }
        else if (v18 <= -2147483650.0)
        {
          v19 = 0x80000000;
        }
        else
        {
          v19 = (int)v18;
        }
        goto LABEL_20;
      }
      if (v16 == 9)
        goto LABEL_58;
    }
    else
    {
      if (v16 == 3)
      {
        v25 = *((float *)v15 + 24);
        if (!v15[102])
          v25 = (float)SLODWORD(v25);
        v17 = (float)((float)((float)v4 * 0.015625) * v25) / 100.0;
        goto LABEL_17;
      }
      if (v16 == 1)
LABEL_58:
        v19 = v4;
    }
LABEL_20:
    if (__OFADD__((_DWORD)v6, v19))
      v6 = (v6 >> 31) + 0x7FFFFFFF;
    else
      v6 = (v6 + v19);
  }
  v20 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v21 = *(unsigned __int8 *)(v20 + 116);
  if (*(_BYTE *)(v20 + 116))
  {
    v22 = *((_DWORD *)this + 41);
    if (v21 != 4 && *(unsigned __int8 *)(v20 + 116) > 8u && v21 == 11)
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v20 + 112), (float)v22 * 0.015625);
  }
  return v7 | (unint64_t)(v6 << 32);
}

uint64_t WebCore::RenderBox::shrinkLogicalWidthToAvoidFloats(unsigned int *a1, int a2, int a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  WebCore::RenderFragmentedFlow *v16;
  int v17;
  WebCore::RenderFragmentContainer *v18;
  int v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  unsigned int v78;
  int v79;
  uint64_t v81;
  int v82;
  WebCore::RenderFragmentContainer *v83;
  WebCore::RenderFragmentContainer *v84;

  v5 = a5;
  v10 = a1 + 38;
  if (((a1[31] >> 13) & 6) - 2 >= 4)
    v10 = a1 + 39;
  v11 = *v10;
  if (a5)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 248) + 8) + 20) & 0x1000) != 0)
      v12 = *(_DWORD *)(a5 + 256);
    else
      v12 = *(_DWORD *)(a5 + 260);
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 1288))(a1);
    v14 = v12 - v13;
    if (__OFSUB__(v12, v13))
      v14 = (v12 >> 31) + 0x7FFFFFFF;
    v54 = __OFADD__(v11, v14);
    v15 = v11 + v14;
    if (v54)
      v15 = (v11 >> 31) + 0x7FFFFFFF;
    if ((int)v11 <= v15)
      v11 = v15;
    if ((*((_BYTE *)a4 + 23) & 0x10) != 0)
      v16 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 648))(a4);
    else
      v16 = 0;
    if (*((_BYTE *)a4 + 46) != 49)
    {
      v83 = 0;
      v84 = 0;
      if (WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v16, (const WebCore::RenderBox *)a4, &v84, &v83))
      {
        v17 = *(_DWORD *)(v5 + 256);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 248) + 8) + 21) & 0x10) == 0)
          v17 = *(_DWORD *)(v5 + 260);
        v18 = v84;
        v19 = *((_DWORD *)v84 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v84 + 31) + 8) + 21) & 0x10) == 0)
          v19 = *((_DWORD *)v84 + 65);
        if (v17 >= v19)
        {
          v18 = v83;
          v20 = *((_DWORD *)v83 + 64);
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v83 + 31) + 8) + 21) & 0x10) == 0)
            v20 = *((_DWORD *)v83 + 65);
          if (v17 <= v20)
            v18 = (WebCore::RenderFragmentContainer *)v5;
        }
      }
      else
      {
        v18 = (WebCore::RenderFragmentContainer *)v5;
      }
      v5 = (uint64_t)v18;
    }
  }
  if ((*((_BYTE *)a4 + 21) & 0x10) != 0)
    v21 = a1 + 40;
  else
    v21 = a1 + 41;
  v22 = *v21;
  v23 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a4, v5);
  v24 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1816))(a4, v11, v23, v22);
  v25 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)a4, (void *)v24);
  v26 = *(_QWORD *)a4;
  if (((a4[31] >> 13) & 6) - 2 < 4)
  {
    v27 = (*(uint64_t (**)(unsigned int *))(v26 + 1000))(a4);
    v28 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 928))(a4);
  }
  else
  {
    v27 = (*(uint64_t (**)(unsigned int *))(v26 + 1016))(a4);
    v28 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 944))(a4);
  }
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
    v29 = (v27 >> 31) + 0x7FFFFFFF;
  v30 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1824))(a4, v11, v29, v22);
  v31 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)a4, (void *)v30);
  v32 = v25 - v31;
  if (__OFSUB__(v25, v31))
    v32 = (v25 >> 31) + 0x7FFFFFFF;
  v33 = v32 & ~(v32 >> 31);
  v54 = __OFSUB__(v33, a2);
  v34 = v33 - a2;
  if (v54)
    v34 = 0x7FFFFFFF;
  if (__OFSUB__(v34, a3))
    v35 = (v34 >> 31) + 0x7FFFFFFF;
  else
    v35 = v34 - a3;
  if (a2 >= 1)
  {
    v36 = ((a4[31] >> 13) & 6) - 2;
    if ((*((_BYTE *)a4 + 123) & 4) != 0)
    {
      if (v36 < 4)
        v37 = a4 + 41;
      else
        v37 = a4 + 40;
      v38 = *v37;
      v39 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a4, v5);
      v40 = v38 - v39;
      if (!__OFSUB__(v38, v39))
        goto LABEL_52;
    }
    else
    {
      v81 = *(_QWORD *)a4;
      if (v36 < 4)
      {
        v38 = (*(uint64_t (**)(unsigned int *))(v81 + 1000))(a4);
        v82 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 928))(a4);
      }
      else
      {
        v38 = (*(uint64_t (**)(unsigned int *))(v81 + 1016))(a4);
        v82 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 944))(a4);
      }
      v40 = v38 + v82;
      if (!__OFADD__(v38, v82))
        goto LABEL_52;
    }
    v40 = (v38 >> 31) + 0x7FFFFFFF;
LABEL_52:
    v41 = v40 + a2;
    if (__OFADD__(v40, a2))
      v41 = (v40 >> 31) + 0x7FFFFFFF;
    v42 = ((a4[31] >> 13) & 6) - 2;
    if ((*((_BYTE *)a4 + 123) & 4) != 0)
    {
      if (v42 < 4)
        v49 = a4 + 41;
      else
        v49 = a4 + 40;
      v50 = *v49;
      v51 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a4, v5);
      v52 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1816))(a4, v11, v51, v22);
      v53 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)a4, (void *)v52);
      v54 = __OFSUB__(v50, v53);
      v48 = v50 - v53;
      if (v54)
        v48 = (v50 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v43 = *(_QWORD *)a4;
      if (v42 < 4)
      {
        v44 = (*(uint64_t (**)(unsigned int *))(v43 + 1000))(a4);
        v45 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 928))(a4);
      }
      else
      {
        v44 = (*(uint64_t (**)(unsigned int *))(v43 + 1016))(a4);
        v45 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 944))(a4);
      }
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        v46 = (v44 >> 31) + 0x7FFFFFFF;
      v47 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1824))(a4, v11, v46, v22);
      v48 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)a4, (void *)v47);
    }
    if (v48 <= v41)
    {
      v56 = v48 - v40;
      if (__OFSUB__(v48, v40))
        v56 = (v48 >> 31) + 0x7FFFFFFF;
      v54 = __OFADD__((_DWORD)v35, v56);
      v55 = v35 + v56;
    }
    else
    {
      v54 = __OFADD__((_DWORD)v35, a2);
      v55 = v35 + a2;
    }
    if (v54)
      v35 = (v35 >> 31) + 0x7FFFFFFF;
    else
      v35 = v55;
  }
  if (a3 < 1)
    return v35;
  v57 = ((a4[31] >> 13) & 6) - 2;
  if ((*((_BYTE *)a4 + 123) & 4) != 0)
  {
    v70 = *(_QWORD *)a4;
    if (v57 < 4)
    {
      v59 = (*(uint64_t (**)(unsigned int *))(v70 + 1000))(a4);
      v71 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 928))(a4);
    }
    else
    {
      v59 = (*(uint64_t (**)(unsigned int *))(v70 + 1016))(a4);
      v71 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 944))(a4);
    }
    v61 = v59 + v71;
    if (!__OFADD__(v59, v71))
      goto LABEL_77;
  }
  else
  {
    if (v57 < 4)
      v58 = a4 + 41;
    else
      v58 = a4 + 40;
    v59 = *v58;
    v60 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a4, v5);
    v61 = v59 - v60;
    if (!__OFSUB__(v59, v60))
      goto LABEL_77;
  }
  v61 = (v59 >> 31) + 0x7FFFFFFF;
LABEL_77:
  v62 = v61 + a3;
  if (__OFADD__(v61, a3))
    v62 = (v61 >> 31) + 0x7FFFFFFF;
  v63 = ((a4[31] >> 13) & 6) - 2;
  if ((*((_BYTE *)a4 + 123) & 4) != 0)
  {
    v72 = *(_QWORD *)a4;
    if (v63 < 4)
    {
      v73 = (*(uint64_t (**)(unsigned int *))(v72 + 1000))(a4);
      v74 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 928))(a4);
    }
    else
    {
      v73 = (*(uint64_t (**)(unsigned int *))(v72 + 1016))(a4);
      v74 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a4 + 944))(a4);
    }
    v75 = v73 + v74;
    if (__OFADD__(v73, v74))
      v75 = (v73 >> 31) + 0x7FFFFFFF;
    v76 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1824))(a4, v11, v75, v22);
    v69 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)a4, (void *)v76);
  }
  else
  {
    if (v63 < 4)
      v64 = a4 + 41;
    else
      v64 = a4 + 40;
    v65 = *v64;
    v66 = WebCore::RenderBlock::logicalRightOffsetForContent((WebCore::RenderBox *)a4, v5);
    v67 = (*(uint64_t (**)(unsigned int *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a4 + 1816))(a4, v11, v66, v22);
    v68 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)a4, (void *)v67);
    v54 = __OFSUB__(v65, v68);
    v69 = v65 - v68;
    if (v54)
      v69 = (v65 >> 31) + 0x7FFFFFFF;
  }
  if (v69 <= v62)
  {
    v79 = v69 - v61;
    if (__OFSUB__(v69, v61))
      v79 = (v69 >> 31) + 0x7FFFFFFF;
    v77 = __OFADD__((_DWORD)v35, v79);
    v78 = v35 + v79;
  }
  else
  {
    v77 = __OFADD__((_DWORD)v35, a3);
    v78 = v35 + a3;
  }
  if (v77)
    return (v35 >> 31) + 0x7FFFFFFF;
  else
    return v78;
}

uint64_t WebCore::RenderBox::clientLogicalWidth(WebCore::RenderBox *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v2 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    v13 = *((_DWORD *)this + 41);
    v14 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1000))(this);
    if (__OFSUB__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v15 = v13 - v14;
    v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
    if (__OFSUB__(v15, v16))
      v7 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v7 = v15 - v16;
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  else
  {
    v3 = *((_DWORD *)this + 40);
    v4 = (*(uint64_t (**)(WebCore::RenderBox *))(v2 + 1016))(this);
    if (__OFSUB__(v3, v4))
      v5 = (v3 >> 31) + 0x7FFFFFFF;
    else
      v5 = v3 - v4;
    v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v5, v6))
      v7 = (v5 >> 31) + 0x7FFFFFFF;
    else
      v7 = v5 - v6;
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
  }
  v9 = v8 << 6;
  if (v8 < -33554432)
    v9 = 0x80000000;
  if (v8 > 0x1FFFFFF)
    v9 = 0x7FFFFFFF;
  v10 = __OFSUB__(v7, v9);
  v11 = v7 - v9;
  if (v10)
    v11 = (v7 >> 31) + 0x7FFFFFFF;
  return v11 & ~(v11 >> 31);
}

uint64_t WebCore::RenderBox::containingBlockAvailableLineWidthInFragment(WebCore::RenderBox *this, WebCore::RenderFragmentContainer *a2)
{
  WebCore::RenderObject *v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  WebCore::RenderFragmentedFlow *v12;
  int v13;
  WebCore::RenderFragmentContainer *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  WebCore::RenderFragmentContainer *v31;
  WebCore::RenderFragmentContainer *v32;

  v4 = WebCore::RenderObject::containingBlock(this);
  v5 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v5 = (char *)this + 156;
  v6 = *(_DWORD *)v5;
  if (a2)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 31) + 8) + 20) & 0x1000) != 0)
      v7 = *((_DWORD *)a2 + 64);
    else
      v7 = *((_DWORD *)a2 + 65);
    v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1288))(this);
    v9 = v7 - v8;
    if (__OFSUB__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    v10 = __OFADD__(v6, v9);
    v11 = v6 + v9;
    if (v10)
      v11 = (v6 >> 31) + 0x7FFFFFFF;
    if ((int)v6 <= v11)
      v6 = v11;
    if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
      v12 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v4 + 648))(v4);
    else
      v12 = 0;
    if (*((_BYTE *)v4 + 46) != 49)
    {
      v31 = 0;
      v32 = 0;
      if (WebCore::RenderFragmentedFlow::getFragmentRangeForBox(v12, v4, &v32, &v31))
      {
        v13 = *((_DWORD *)a2 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 31) + 8) + 21) & 0x10) == 0)
          v13 = *((_DWORD *)a2 + 65);
        v14 = v32;
        v15 = *((_DWORD *)v32 + 64);
        if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v32 + 31) + 8) + 21) & 0x10) == 0)
          v15 = *((_DWORD *)v32 + 65);
        if (v13 >= v15)
        {
          v14 = v31;
          v16 = *((_DWORD *)v31 + 64);
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v31 + 31) + 8) + 21) & 0x10) == 0)
            v16 = *((_DWORD *)v31 + 65);
          if (v13 <= v16)
            v14 = a2;
        }
      }
      else
      {
        v14 = a2;
      }
      a2 = v14;
    }
  }
  v17 = (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)this + 1344))(this, 1);
  v18 = v6;
  v19 = v17;
  v20 = WebCore::RenderBlock::logicalRightOffsetForContent(v4, (uint64_t)a2);
  v21 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 1816))(v4, v18, v20, v19);
  v22 = WebCore::RenderBlock::adjustLogicalRightOffsetForLine((uint64_t)v4, (void *)v21);
  v23 = *(_QWORD *)v4;
  if (((*((_DWORD *)v4 + 31) >> 13) & 6u) - 2 < 4)
  {
    v24 = (*(uint64_t (**)(WebCore::RenderObject *))(v23 + 1000))(v4);
    v25 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v4 + 928))(v4);
  }
  else
  {
    v24 = (*(uint64_t (**)(WebCore::RenderObject *))(v23 + 1016))(v4);
    v25 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v4 + 944))(v4);
  }
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  v27 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 1824))(v4, v18, v26, v19);
  v28 = WebCore::RenderBlock::adjustLogicalLeftOffsetForLine((uint64_t)v4, (void *)v27);
  v29 = v22 - v28;
  if (__OFSUB__(v22, v28))
    v29 = (v22 >> 31) + 0x7FFFFFFF;
  return v29 & ~(v29 >> 31);
}

uint64_t WebCore::RenderBox::perpendicularContainingBlockLogicalHeight(WebCore::RenderBox *this)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  float v11;
  void *v12;
  double v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  float v21;
  unsigned __int8 v22;
  char v23;
  char v24;

  v2 = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(this);
  if (!v3 || (v4 = v2, (v2 & 0xFF00000000) == 0))
  {
    v4 = (uint64_t)WebCore::RenderObject::containingBlock(this);
    v5 = WebCore::RenderBox::overridingLogicalHeight((WebCore::RenderBox *)v4);
    if (HIDWORD(v5))
      return WebCore::RenderBox::overridingContentLogicalHeight(v4, v5);
    v6 = ((*(_DWORD *)(v4 + 124) >> 13) & 6) - 2;
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8);
    v8 = (unsigned int *)(v7 + 4);
    v9 = (unsigned int *)(v7 + 12);
    if (v6 < 4)
      v9 = v8;
    v24 = 0;
    v22 = *((_BYTE *)v9 + 4);
    v10 = v22;
    v23 = *((_BYTE *)v9 + 5);
    if (v22 - 2 >= 9)
    {
      v12 = 0;
      if (v22 == 11)
      {
        v12 = (void *)*v9;
        v21 = *(float *)v9;
        WebCore::Length::ref((int *)&v21);
        v6 = ((*(_DWORD *)(v4 + 124) >> 13) & 6) - 2;
      }
    }
    else
    {
      v11 = *(float *)v9;
      v12 = (void *)*v9;
      if (v22 == 4)
      {
        if (!*((_BYTE *)v9 + 6))
          v11 = (float)(int)v12;
        v13 = v11 * 64.0;
        if (v13 >= 2147483650.0)
        {
          v14 = 0x17FFFFFFFLL;
        }
        else if (v13 <= -2147483650.0)
        {
          v14 = 0x180000000;
        }
        else
        {
          v14 = (int)v13 | 0x100000000;
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 1272))(v4, v14);
      }
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944)
                    + 248);
    if (*(int *)(v16 + 248) >= 1 && *(int *)(v16 + 252) >= 1 && *(_BYTE *)(v16 + 321))
      v17 = *(_QWORD *)(v16 + 248);
    else
      v17 = WebCore::ScrollView::sizeForUnobscuredContent((id *)v16, 0);
    v18 = HIDWORD(v17);
    if (v6 < 4)
      LODWORD(v18) = v17;
    v19 = (_DWORD)v18 << 6;
    if ((int)v18 < -33554432)
      v19 = 0x80000000;
    if ((int)v18 <= 0x1FFFFFF)
      v20 = v19;
    else
      v20 = 0x7FFFFFFF;
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 1344))(v4, 0);
    WebCore::RenderBlock::addPercentHeightDescendant(*(WebCore::RenderBlock **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), this);
    if (v20 >= (int)v4)
      v4 = v4;
    else
      v4 = v20;
    if (v10 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
    }
  }
  return v4;
}

uint64_t WebCore::RenderBox::overridingContentLogicalHeight(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  int v23;
  int v24;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFADD__(v6, v9);
  v11 = v6 + v9;
  if (v10)
    v11 = (v6 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(a2, v11);
  v12 = a2 - v11;
  if (v10)
    v13 = (a2 >> 31) + 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = 1360;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
    v14 = 1352;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v14))(a1);
  v16 = v15 << 6;
  if (v15 < -33554432)
    v16 = 0x80000000;
  if (v15 > 0x1FFFFFF)
    v16 = 0x7FFFFFFF;
  v10 = __OFSUB__(v13, v16);
  v17 = v13 - v16;
  if (v10)
    v18 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 584) & 0x100) != 0)
  {
    v22 = 1360;
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
      v22 = 1352;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v22))(a1);
    v24 = v23 << 6;
    if (v23 > 0x1FFFFFF)
      v24 = 0x7FFFFFFF;
    if (v23 >= -33554432)
      v19 = v24;
    else
      v19 = 0x80000000;
  }
  else
  {
    v19 = 0;
  }
  v10 = __OFSUB__(v18, v19);
  v20 = v18 - v19;
  if (v10)
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  return v20 & ~(v20 >> 31);
}

unint64_t WebCore::RenderBoxModelObject::stickyPositionOffset(WebCore::RenderBoxModelObject *this, double a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  double v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  _QWORD v14[2];
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _DWORD v21[4];

  WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, a2);
  v21[0] = v3;
  v21[1] = v4;
  v21[2] = v5;
  v21[3] = v6;
  v15 = 0;
  v14[0] = off_1E34043D0;
  v14[1] = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)v14, (const WebCore::FloatRect *)v21);
  v7 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v14, (const WebCore::FloatRect *)v21)* 64.0;
  v9 = 0x7FFFFFFFLL;
  v10 = 0x80000000;
  if (v7 > -2147483650.0)
    v10 = (int)v7;
  if (v7 < 2147483650.0)
    v9 = v10;
  v11 = v8 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF00000000;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x8000000000000000;
  }
  else
  {
    v12 = (unint64_t)(int)v11 << 32;
  }
  return v12 | v9;
}

void WebCore::RenderBoxModelObject::mapAbsoluteToLocalPoint(WebCore::RenderObject *a1, unsigned int a2, WebCore::TransformState *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = WebCore::RenderObject::container(a1);
  if (v6)
  {
    v7 = v6;
    (*(void (**)(uint64_t, _QWORD, WebCore::TransformState *))(*(_QWORD *)v6 + 584))(v6, a2, a3);
    v8 = 0;
    v9 = (*(uint64_t (**)(WebCore::RenderObject *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 360))(a1, v7, &v8, 0);
    WebCore::RenderObject::pushOntoTransformState((uint64_t)a1, a3, a2, 0, v7, (const WebCore::LayoutSize *)&v9, 0);
  }
}

uint64_t WebCore::RenderObject::RepaintRects::move(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v2 = *(_DWORD *)(result + 4);
  v3 = (*(_DWORD *)result >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)result, (_DWORD)a2))
    v3 = *(_DWORD *)result + a2;
  v4 = __OFADD__(v2, HIDWORD(a2));
  v5 = v2 + HIDWORD(a2);
  v6 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v4)
    v6 = v5;
  *(_DWORD *)result = v3;
  *(_DWORD *)(result + 4) = v6;
  if (*(_BYTE *)(result + 32))
  {
    v7 = *(_DWORD *)(result + 16);
    v8 = *(_DWORD *)(result + 20);
    v4 = __OFADD__(v7, (_DWORD)a2);
    v9 = v7 + a2;
    v10 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v4)
      v10 = v9;
    v11 = v8 + HIDWORD(a2);
    if (__OFADD__(v8, HIDWORD(a2)))
      v11 = (v8 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(result + 16) = v10;
    *(_DWORD *)(result + 20) = v11;
  }
  return result;
}

__n128 WebCore::RenderObject::RepaintRects::unite(__n128 *a1, __n128 *a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  __n128 *v27;
  int v28;
  int v29;
  unsigned __int32 v30;
  unsigned __int32 v31;
  unsigned __int32 v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __n128 result;

  v3 = a2->n128_i32[2];
  v2 = a2->n128_i32[3];
  if (v3 >= 1 && v2 >= 1)
  {
    v5 = a1->n128_i32[2];
    if (v5 < 1 || (v6 = a1->n128_i32[3], v6 <= 0))
    {
      result = *a2;
      *a1 = *a2;
    }
    else
    {
      v7 = a1->n128_u32[0];
      v8 = a1->n128_u32[1];
      v9 = a2->n128_u32[0];
      v10 = a2->n128_u32[1];
      if ((signed __int32)a2->n128_u32[0] >= (signed __int32)a1->n128_u32[0])
        v11 = v7;
      else
        v11 = v9;
      if ((int)v10 >= (int)v8)
        v12 = v8;
      else
        v12 = v10;
      v13 = __OFADD__(v7, v5);
      v14 = v7 + v5;
      v15 = (v7 >> 31) + 0x7FFFFFFF;
      if (v13)
        v14 = v15;
      v13 = __OFADD__(v9, v3);
      v16 = v9 + v3;
      if (v13)
        v16 = (v9 >> 31) + 0x7FFFFFFF;
      if (v14 > v16)
        v16 = v14;
      v13 = __OFADD__(v8, v6);
      v17 = v8 + v6;
      if (v13)
        v17 = (v8 >> 31) + 0x7FFFFFFF;
      v13 = __OFADD__(v10, v2);
      v18 = v10 + v2;
      if (v13)
        v18 = (v10 >> 31) + 0x7FFFFFFF;
      if (v17 > v18)
        v18 = v17;
      a1->n128_u64[0] = v11 | (v12 << 32);
      v13 = __OFSUB__(v16, (_DWORD)v11);
      v19 = v16 - v11;
      v20 = (v16 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v20 = v19;
      v13 = __OFSUB__(v18, (_DWORD)v12);
      v21 = v18 - v12;
      v22 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v22 = v21;
      a1->n128_u32[2] = v20;
      a1->n128_u32[3] = v22;
    }
  }
  if (a1[2].n128_u8[0])
    v23 = a2[2].n128_u8[0] == 0;
  else
    v23 = 1;
  if (!v23)
  {
    v25 = a2[1].n128_i32[2];
    v24 = a2[1].n128_i32[3];
    if (v25 >= 1 && v24 >= 1)
    {
      v27 = a1 + 1;
      v28 = a1[1].n128_i32[2];
      if (v28 < 1 || (v29 = a1[1].n128_i32[3], v29 <= 0))
      {
        result = a2[1];
        *v27 = result;
      }
      else
      {
        v30 = a1[1].n128_u32[0];
        v31 = a1[1].n128_u32[1];
        v32 = a2[1].n128_u32[0];
        v33 = a2[1].n128_u32[1];
        if ((int)v32 >= (int)v30)
          v34 = v30;
        else
          v34 = v32;
        if ((int)v33 >= (int)v31)
          v35 = v31;
        else
          v35 = v33;
        v13 = __OFADD__(v30, v28);
        v36 = v30 + v28;
        v37 = (v30 >> 31) + 0x7FFFFFFF;
        if (v13)
          v36 = v37;
        v13 = __OFADD__(v32, v25);
        v38 = v32 + v25;
        if (v13)
          v38 = (v32 >> 31) + 0x7FFFFFFF;
        if (v36 > v38)
          v38 = v36;
        v13 = __OFADD__(v31, v29);
        v39 = v31 + v29;
        if (v13)
          v39 = (v31 >> 31) + 0x7FFFFFFF;
        v13 = __OFADD__(v33, v24);
        v40 = v33 + v24;
        if (v13)
          v40 = (v33 >> 31) + 0x7FFFFFFF;
        if (v39 > v40)
          v40 = v39;
        v27->n128_u64[0] = v34 | (v35 << 32);
        v13 = __OFSUB__(v38, (_DWORD)v34);
        v41 = v38 - v34;
        v42 = (v38 >> 31) + 0x7FFFFFFF;
        if (v13)
          v41 = v42;
        v13 = __OFSUB__(v40, (_DWORD)v35);
        v43 = v40 - v35;
        v44 = (v40 >> 31) + 0x7FFFFFFF;
        if (!v13)
          v44 = v43;
        a1[1].n128_u32[2] = v41;
        a1[1].n128_u32[3] = v44;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderObject::RepaintRects::encloseToIntRects(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  signed int v4;
  unsigned int v5;
  int v6;
  int v7;
  signed int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  signed int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;

  v1 = HIDWORD(*(_QWORD *)this);
  v2 = *(_DWORD *)(this + 8);
  v3 = *(_DWORD *)(this + 12);
  v4 = *(_QWORD *)this + v2;
  if (__OFADD__(*(_QWORD *)this, v2))
    v4 = (*(_QWORD *)this >> 31) + 0x7FFFFFFF;
  v5 = -(-v4 >> 6);
  if (v4 >= 0)
    v5 = (v4 + 63) >> 6;
  if (v4 <= 2147483583)
    v6 = v5;
  else
    v6 = 0x1FFFFFF;
  if (v2)
    v7 = v6;
  else
    v7 = (int)*(_QWORD *)this >> 6;
  v8 = v1 + v3;
  if (__OFADD__((_DWORD)v1, v3))
    v8 = (v1 >> 31) + 0x7FFFFFFF;
  v9 = -(-v8 >> 6);
  if (v8 >= 0)
    v9 = (v8 + 63) >> 6;
  if (v8 <= 2147483583)
    v10 = v9;
  else
    v10 = 0x1FFFFFF;
  if (v3)
    v11 = v10;
  else
    v11 = *(uint64_t *)this >> 38;
  v12 = v7 - ((int)*(_QWORD *)this >> 6);
  v13 = v11 - (*(uint64_t *)this >> 38);
  v14 = v1 & 0xFFFFFFC0;
  v15 = v12 << 6;
  if (v12 < -33554432)
    v15 = 0x80000000;
  if (v12 <= 0x1FFFFFF)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v17 = v13 << 6;
  if (v13 < -33554432)
    v17 = 0x80000000;
  if (v13 <= 0x1FFFFFF)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  *(_DWORD *)this = *(_QWORD *)this & 0xFFFFFFC0;
  *(_DWORD *)(this + 4) = v14;
  *(_DWORD *)(this + 8) = v16;
  *(_DWORD *)(this + 12) = v18;
  if (*(_BYTE *)(this + 32))
  {
    v19 = *(_QWORD *)(this + 16);
    v20 = v19 >> 38;
    v21 = *(_DWORD *)(this + 24);
    if (v21)
    {
      v22 = __OFADD__((_DWORD)v19, v21);
      v23 = v19 + v21;
      if (v22)
        v23 = (v19 >> 31) + 0x7FFFFFFF;
      if (v23 > 2147483583)
      {
        v24 = 0x1FFFFFF;
      }
      else if (v23 >= 0)
      {
        v24 = (v23 + 63) >> 6;
      }
      else
      {
        v24 = -(-v23 >> 6);
      }
    }
    else
    {
      v24 = (int)v19 >> 6;
    }
    v25 = *(_DWORD *)(this + 28);
    v26 = v19 >> 38;
    if (v25)
    {
      v27 = HIDWORD(v19) + v25;
      if (__OFADD__(HIDWORD(v19), v25))
        v27 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
      if (v27 > 2147483583)
      {
        LODWORD(v26) = 0x1FFFFFF;
      }
      else if (v27 >= 0)
      {
        LODWORD(v26) = (v27 + 63) >> 6;
      }
      else
      {
        LODWORD(v26) = -(-v27 >> 6);
      }
    }
    v28 = v24 - ((int)v19 >> 6);
    v29 = v26 - v20;
    v30 = ((_DWORD)v26 - (_DWORD)v20) << 6;
    if (v29 < -33554432)
      v30 = 0x80000000;
    if (v29 > 0x1FFFFFF)
      v30 = 0x7FFFFFFF;
    if (v28 >= -33554432)
      v31 = v28 << 6;
    else
      v31 = 0x80000000;
    *(_DWORD *)(this + 16) = v19 & 0xFFFFFFC0;
    *(_DWORD *)(this + 20) = HIDWORD(v19) & 0xFFFFFFC0;
    if (v28 <= 0x1FFFFFF)
      v32 = v31;
    else
      v32 = 0x7FFFFFFF;
    *(_DWORD *)(this + 24) = v32;
    *(_DWORD *)(this + 28) = v30;
  }
  return this;
}

BOOL WebCore::RenderBox::hasStretchedLogicalWidth(WebCore::RenderObject *this, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::RenderObject *v17;
  WebCore::RenderObject *v18;
  int v19;
  int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  BOOL v26;
  char v27;

  v2 = *((_DWORD *)this + 31);
  v3 = *((_QWORD *)this + 11);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = v4 + 12;
  v6 = v4 + 4;
  if (((v2 >> 13) & 6) - 2 >= 4)
    v5 = v6;
  if (*(_BYTE *)(v5 + 4))
    return 0;
  v9 = *(_QWORD *)(v3 + 24);
  v10 = (unsigned __int16)v2 >> 13;
  v11 = *((_DWORD *)this + 30);
  v12 = (v11 >> 26) & 1;
  v13 = v12;
  if ((v10 - 2) >= 2)
  {
    if (v10 == 4)
    {
      v13 = (v11 & 0x4000000) == 0;
    }
    else
    {
      v13 = (v11 >> 26) & 1;
      if (v10 != 5)
      {
        v14 = 3;
        if ((v11 & 0x4000000) != 0)
          v14 = 1;
        goto LABEL_9;
      }
    }
  }
  v26 = v13 == 0;
  v14 = 2;
  if (v26)
    v14 = 0;
LABEL_9:
  v15 = v9 + 40;
  if (!*(_BYTE *)(v15 + 8 * v14 + 4))
    return 0;
  if ((v10 - 2) >= 2)
  {
    if (v10 == 4)
    {
      v12 = (v11 & 0x4000000) == 0;
    }
    else if (v10 != 5)
    {
      v16 = 3;
      if ((v11 & 0x4000000) == 0)
        v16 = 1;
      goto LABEL_15;
    }
  }
  v26 = v12 == 0;
  v16 = 2;
  if (!v26)
    v16 = 0;
LABEL_15:
  if (!*(_BYTE *)(v15 + 8 * v16 + 4))
    return 0;
  v17 = WebCore::RenderObject::containingBlock(this);
  if (!v17)
    return 0;
  v18 = v17;
  if (a2)
    LOBYTE(v19) = 2;
  else
    v19 = (*(uint64_t (**)(WebCore::RenderObject *, WebCore::RenderObject *))(*(_QWORD *)v17 + 1600))(v17, this) & 0xF;
  v20 = *((unsigned __int8 *)this + 46);
  if (((*((_BYTE *)v18 + 21) & 0x10) == 0) == ((*((_BYTE *)this + 21) & 0x10) == 0))
  {
    if (v20 == 12 && (WebCore::RenderGrid::isSubgridInParentDirection(this, 0) & 1) != 0)
      return 1;
    v21 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 127);
    v22 = v21 & 0xF;
    if (v22 == 1)
    {
      v21 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 32) + 126);
      v22 = v21 & 0xF;
    }
    if (v22 < 3)
      v21 = v19;
    return (v21 & 0xF) == 3;
  }
  v27 = v19;
  if (v20 != 12 || (v23 = 1, (WebCore::RenderGrid::isSubgridInParentDirection(this, 1) & 1) == 0))
  {
    v21 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
    v25 = v21 & 0xF;
    if (v25 == 1)
    {
      v21 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v18 + 11) + 32) + 124);
      v25 = v21 & 0xF;
    }
    if (v25 < 3)
      v21 = v27;
    return (v21 & 0xF) == 3;
  }
  return v23;
}

uint64_t WebCore::RenderBox::computeLogicalWidthFromAspectRatioInternal(WebCore::RenderBox *this)
{
  char *v2;
  char *v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  double v23;
  BOOL v24;
  int v25;
  double v26;
  unsigned int v27;
  uint64_t result;
  double v29;
  int v30;
  _QWORD v31[3];

  v2 = (char *)this + 160;
  v3 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
  {
    v2 = (char *)this + 164;
    v3 = (char *)this + 156;
  }
  (*(void (**)(_QWORD *__return_ptr, WebCore::RenderBox *, _QWORD, _QWORD))(*(_QWORD *)this + 1312))(v31, this, *(unsigned int *)v2, *(unsigned int *)v3);
  v4 = v31[0];
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1016))(this);
  v6 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1024))(this);
  if (__OFADD__(v5, v6))
    v7 = (v5 >> 31) + 0x7FFFFFFF;
  else
    v7 = v5 + v6;
  v8 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 944))(this);
  if (__OFADD__(v7, v8))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v9 = v7 + v8;
  v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 952))(this);
  if (__OFADD__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 + v10;
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v14 = v12 + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v16 = v14 + v15;
  v17 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
    v18 = (v16 >> 31) + 0x7FFFFFFF;
  v19 = *((_QWORD *)this + 11);
  v20 = *(_QWORD *)(v19 + 32);
  v21 = (double *)(v20 + 112);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v22 = (double *)(v20 + 112);
  else
    v22 = (double *)(v20 + 104);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v21 = (double *)(v20 + 104);
  v23 = *v21 / *v22;
  if ((*(_DWORD *)(v20 + 148) & 0x60) == 0x20
    && (*(_BYTE *)(*(_QWORD *)(v19 + 8) + 68) & 4) != 0
    && (*((_BYTE *)this + 52) & 7) != 3)
  {
    v29 = (double)v4 * 0.015625 * v23 * 64.0;
    if (v29 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF;
    }
    else if (v29 <= -2147483650.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v29;
    }
    if (v30 <= v11)
      return v11;
    else
      return v30;
  }
  else
  {
    v24 = __OFSUB__(v4, v18);
    v25 = v4 - v18;
    if (v24)
      v25 = (v4 >> 31) + 0x7FFFFFFF;
    v26 = v23 * ((double)v25 * 0.015625) * 64.0;
    if (v26 >= 2147483650.0)
    {
      v27 = 0x7FFFFFFF;
    }
    else if (v26 <= -2147483650.0)
    {
      v27 = 0x80000000;
    }
    else
    {
      v27 = (int)v26;
    }
    result = v27 + v11;
    if (__OFADD__(v27, v11))
      return (v27 >> 31) + 0x7FFFFFFF;
  }
  return result;
}

BOOL WebCore::RenderBox::columnFlexItemHasStretchAlignment(WebCore::RenderBox *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderObject *v11;
  char v12;
  char v13;
  unsigned int v14;
  BOOL v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)this + 30);
  v5 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v6 = (v4 >> 26) & 1;
  v7 = v6;
  if ((v5 - 2) >= 2)
  {
    if (v5 == 4)
    {
      v7 = (v4 & 0x4000000) == 0;
    }
    else
    {
      v7 = (v4 >> 26) & 1;
      if (v5 != 5)
      {
        v8 = 3;
        if ((v4 & 0x4000000) != 0)
          v8 = 1;
        goto LABEL_8;
      }
    }
  }
  v16 = v7 == 0;
  v8 = 2;
  if (v16)
    v8 = 0;
LABEL_8:
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 40;
  if (!*(_BYTE *)(v9 + 8 * v8 + 4))
    return 0;
  if ((v5 - 2) >= 2)
  {
    if (v5 == 4)
    {
      v6 = (v4 & 0x4000000) == 0;
    }
    else if (v5 != 5)
    {
      v10 = 3;
      if ((v4 & 0x4000000) == 0)
        v10 = 1;
      goto LABEL_14;
    }
  }
  v16 = v6 == 0;
  v10 = 2;
  if (!v16)
    v10 = 0;
LABEL_14:
  if (!*(_BYTE *)(v9 + 8 * v10 + 4))
    return 0;
  v11 = WebCore::RenderObject::containingBlock(this);
  v12 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v11 + 1600))(v11, 0);
  v13 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 125);
  v14 = v13 & 0xF;
  if (v14 == 1)
  {
    v13 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 32) + 124);
    v14 = v13 & 0xF;
  }
  if (v14 < 3)
    v13 = v12;
  return (v13 & 0xF) == 3;
}

uint64_t WebCore::RenderBox::computeOrTrimInlineMargin<WebCore::RenderBox::computeInlineDirectionMargins(WebCore::RenderBlock const&,WebCore::LayoutUnit,std::optional<WebCore::LayoutUnit>,WebCore::LayoutUnit,WebCore::LayoutUnit&,WebCore::LayoutUnit&)::$_0>(uint64_t a1, _QWORD *a2, WebCore::Length **a3)
{
  WebCore::Length *v3;
  int v4;
  float v5;
  double v6;
  uint64_t result;
  int v8;
  float v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WebCore::Length **v15;

  if ((*(_BYTE *)(*(_QWORD *)(a2[11] + 40) + 461) & 4) != 0)
  {
    v15 = a3;
    v10 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 1584))(a2, 4, a1);
    a3 = v15;
    if (v10)
    {
      v12 = *(_QWORD *)(a1 + 32);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 46) == 12 && (*(_BYTE *)(a1 + 21) & 4) == 0)
          {
            v14 = WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)a1, v11);
            result = 0;
            *((_BYTE *)v14 + 2) |= 4u;
            return result;
          }
        }
      }
      return 0;
    }
  }
  v3 = *a3;
  v4 = *((unsigned __int8 *)*a3 + 4);
  if (v4 == 4)
  {
    v5 = *(float *)v3;
    if (!*((_BYTE *)v3 + 6))
      v5 = (float)*(int *)v3;
  }
  else
  {
    v8 = *(_DWORD *)a3[1];
    if (v4 == 3)
    {
      v9 = *(float *)v3;
      if (!*((_BYTE *)v3 + 6))
        v9 = (float)*(int *)v3;
      v5 = (float)((float)((float)v8 * 0.015625) * v9) / 100.0;
    }
    else
    {
      if (v4 != 11)
        return 0;
      WebCore::Length::nonNanCalculatedValue(v3, (float)v8 * 0.015625);
    }
  }
  v6 = v5 * 64.0;
  if (v6 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v6 <= -2147483650.0)
    return 0x80000000;
  return (int)v6;
}

unint64_t WebCore::RenderBox::overrideLogicalHeightForSizeContainment(WebCore::RenderBox *this)
{
  unint64_t result;
  unsigned int v3;
  double v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  double v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  char *v20;

  result = WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight(this);
  if ((result & 0xFF00000000) != 0)
  {
    v3 = result;
  }
  else
  {
    if (*((_BYTE *)this + 46) == 22)
      return result;
    v3 = 0;
  }
  v4 = WebCore::RenderStyle::borderBeforeWidth((WebCore::RenderBox *)((char *)this + 80)) * 64.0;
  if (v4 > -2147483650.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147483650.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  v7 = WebCore::RenderBoxModelObject::paddingBefore(this);
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = WebCore::RenderStyle::borderAfterWidth((WebCore::RenderBox *)((char *)this + 80)) * 64.0;
  v10 = (int)v9;
  if (v9 <= -2147483650.0)
    v10 = 0x80000000;
  if (v9 >= 2147483650.0)
    v10 = 0x7FFFFFFF;
  v11 = __OFADD__(v8, v10);
  v12 = v8 + v10;
  if (v11)
    v13 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v13 = v12;
  v14 = WebCore::RenderBoxModelObject::paddingAfter(this);
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  v16 = v3 + v15;
  if (__OFADD__(v3, v15))
    v16 = (v3 >> 31) + 0x7FFFFFFF;
  v17 = 1360;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v17 = 1352;
  result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + v17))(this);
  v18 = (_DWORD)result << 6;
  if ((int)result < -33554432)
    v18 = 0x80000000;
  if ((int)result > 0x1FFFFFF)
    v18 = 0x7FFFFFFF;
  v11 = __OFADD__(v16, v18);
  v19 = v16 + v18;
  if (v11)
    v19 = (v16 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v20 = (char *)this + 160;
  else
    v20 = (char *)this + 164;
  *(_DWORD *)v20 = v19;
  return result;
}

unint64_t WebCore::RenderBox::explicitIntrinsicInnerLogicalHeight(WebCore::RenderBox *this)
{
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    return WebCore::RenderBox::explicitIntrinsicInnerWidth(this);
  else
    return WebCore::RenderBox::explicitIntrinsicInnerHeight(this);
}

uint64_t WebCore::shouldFlipBeforeAfterMargins(WebCore *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  unsigned int v3;
  _BOOL4 v4;
  unsigned int v5;

  v3 = (unsigned __int16)a3 >> 13;
  v4 = v3 < 6;
  v5 = v3 == 1;
  switch((unsigned __int16)a2 >> 13)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      return v5 ^ ((this & 0x4000000) >> 26);
    default:
      v5 = v4 & (0x28u >> ((unsigned __int16)a3 >> 13));
      break;
  }
  return v5 ^ ((this & 0x4000000) >> 26);
}

uint64_t WebCore::RenderBox::computeIntrinsicLogicalContentHeightUsing(WebCore::RenderObject *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::RenderObject *v10;
  unsigned int v11;

  v4 = *(unsigned __int8 *)(a2 + 4);
  v5 = (v4 - 7) < 2 || v4 == 10;
  if (v5 || (v4 - 5) <= 1)
  {
    if ((a3 & 0xFF00000000) == 0)
    {
      v8 = 0;
      LOBYTE(v6) = 0;
      v7 = 0;
      return v8 | v7 | v6;
    }
    v6 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)a1 + 1280))(a1, a3);
  }
  else
  {
    if (v4 != 9)
    {
      LOBYTE(v6) = 0;
      v7 = 0;
      goto LABEL_9;
    }
    v10 = WebCore::RenderObject::containingBlock(a1);
    v11 = (*(uint64_t (**)(WebCore::RenderObject *, _QWORD))(*(_QWORD *)v10 + 1344))(v10, 0);
    if (__OFSUB__(v11, a4))
      v6 = (v11 >> 31) + 0x7FFFFFFF;
    else
      v6 = v11 - a4;
  }
  v7 = v6 & 0xFFFFFF00;
LABEL_9:
  v8 = 0x100000000;
  return v8 | v7 | v6;
}

uint64_t WebCore::RenderBox::shouldTreatChildAsReplacedInTableCells(WebCore::RenderBox *this)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;

  if ((*((_BYTE *)this + 20) & 2) != 0)
    return 1;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 28) & 8) == 0)
    goto LABEL_14;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 848))(result) & 1) != 0)
    return 1;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v3)
    return 0;
  v4 = *(_WORD *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x196395E68);
  }
  if ((v4 & 0x10) == 0)
    return 0;
  return *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24);
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingBefore(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  double v9;
  float v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;

  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 0;
  else
    v3 = qword_1969FC6C8[v2];
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 72;
  v5 = (unsigned __int8 *)(v4 + 8 * v3);
  v6 = v5[4];
  if ((v6 & 0xFFFFFFF7) == 3)
  {
    v16 = v3;
    v17 = (unsigned __int8 *)(v4 + 8 * v3);
    v15 = v4;
    v12 = v5 + 4;
    v13 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v4 = v15;
    v3 = v16;
    v14 = v13;
    v5 = v17;
    v6 = *v12;
    v7 = (float)v14 * 0.015625;
  }
  else
  {
    v7 = 0.0;
  }
  switch(v6)
  {
    case 4:
      v8 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v8 = (float)*(int *)v5;
      break;
    case 3:
      v11 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v11 = (float)*(int *)v5;
      v8 = (float)(v7 * v11) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v5, v7);
      break;
    default:
      return 0;
  }
  v9 = v8 * 64.0;
  if (v9 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v9 <= -2147483650.0)
    return 0x80000000;
  return (int)v9;
}

uint64_t WebCore::RenderBoxModelObject::computedCSSPaddingAfter(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  double v9;
  float v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;

  v2 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = qword_1969FC6F0[v2];
  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 24) + 72;
  v5 = (unsigned __int8 *)(v4 + 8 * v3);
  v6 = v5[4];
  if ((v6 & 0xFFFFFFF7) == 3)
  {
    v16 = v3;
    v17 = (unsigned __int8 *)(v4 + 8 * v3);
    v15 = v4;
    v12 = v5 + 4;
    v13 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    v4 = v15;
    v3 = v16;
    v14 = v13;
    v5 = v17;
    v6 = *v12;
    v7 = (float)v14 * 0.015625;
  }
  else
  {
    v7 = 0.0;
  }
  switch(v6)
  {
    case 4:
      v8 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v8 = (float)*(int *)v5;
      break;
    case 3:
      v11 = *(float *)v5;
      if (!*(_BYTE *)(v4 + 8 * v3 + 6))
        v11 = (float)*(int *)v5;
      v8 = (float)(v7 * v11) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v5, v7);
      break;
    default:
      return 0;
  }
  v9 = v8 * 64.0;
  if (v9 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v9 <= -2147483650.0)
    return 0x80000000;
  return (int)v9;
}

uint64_t WebCore::RenderBox::computeReplacedLogicalWidth(WebCore::RenderObject *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v5 = v4 + 12;
  v6 = v4 + 4;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v5 = v6;
  v10 = 0;
  v13 = 0;
  v11 = *(_BYTE *)(v5 + 4);
  v12 = *(_BYTE *)(v5 + 5);
  if (v11 - 2 >= 9)
  {
    if (v11 == 11)
    {
      v10 = *(_DWORD *)v5;
      WebCore::Length::ref((int *)&v10);
    }
  }
  else
  {
    v13 = *(_BYTE *)(v5 + 6);
    v10 = *(_DWORD *)v5;
  }
  v7 = WebCore::RenderBox::computeReplacedLogicalWidthUsing(this, 0, (WebCore::Length *)&v10);
  v8 = WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth((uint64_t)this, v7, a2);
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
  }
  return v8;
}

uint64_t WebCore::RenderBox::computeReplacedLogicalHeight(WebCore::RenderObject *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v3 = (unsigned int *)(v2 + 4);
  v4 = (unsigned int *)(v2 + 12);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v3 = v4;
  v10 = 0;
  v13 = 0;
  v11 = *((_BYTE *)v3 + 4);
  v5 = v11;
  v12 = *((_BYTE *)v3 + 5);
  if (v11 - 2 >= 9)
  {
    v6 = 0;
    if (v11 == 11)
    {
      v6 = (void *)*v3;
      v10 = *v3;
      WebCore::Length::ref((int *)&v10);
    }
  }
  else
  {
    v13 = *((_BYTE *)v3 + 6);
    if (v13)
    {
      v10 = *v3;
      v6 = (void *)v10;
    }
    else
    {
      v6 = (void *)*v3;
      v10 = *v3;
    }
  }
  v7 = WebCore::RenderBox::computeReplacedLogicalHeightUsing(this, 0, (unsigned __int8 *)&v10);
  v8 = WebCore::RenderBox::computeReplacedLogicalHeightRespectingMinMaxHeight((unint64_t)this, v7);
  if (v5 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v6);
  }
  return v8;
}

uint64_t WebCore::RenderBox::computePreferredLogicalWidths(WebCore::RenderBox *this)
{
  uint64_t v2;
  const WebCore::RenderBox *v3;
  uint64_t v4;
  const WebCore::RenderBox *v5;
  uint64_t v6;
  const WebCore::RenderBox *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t result;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v3 = (const WebCore::RenderBox *)(v2 + 36);
  v4 = v2 + 44;
  v5 = (const WebCore::RenderBox *)(v2 + 20);
  v6 = v2 + 28;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v7 = v5;
  else
    v7 = v3;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v8 = v6;
  else
    v8 = v4;
  v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1064))(this);
  v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v9, v10))
    v11 = (v9 >> 31) + 0x7FFFFFFF;
  else
    v11 = v9 + v10;
  v12 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v11, v12))
    v13 = (v11 >> 31) + 0x7FFFFFFF;
  else
    v13 = v11 + v12;
  v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v13, v14))
    v15 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v15 = v13 + v14;
  result = WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, v7, v8, v15);
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

_QWORD *WebCore::RenderBox::addOverflowFromChild(WebCore::RenderBox const&,WebCore::LayoutSize const&,WebCore::LayoutRect const&)::$_0::operator()(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;

  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 192);
  if (v2)
  {
    v3 = *(int **)(v2 + 20);
    v4 = (uint64_t *)(v2 + 28);
  }
  else
  {
    v3 = 0;
    v4 = (uint64_t *)(v1 + 160);
  }
  v5 = *v4;
  v6 = (unint64_t)v3 >> 32;
  v7 = (unsigned __int16)*(_DWORD *)(result[2] + 124) >> 13;
  v8 = 0x30203020100uLL >> (8 * v7);
  if (v7 >= 6)
    LOBYTE(v8) = 0;
  v9 = v8 & 3;
  v10 = (unsigned __int16)*(_DWORD *)(v1 + 124) >> 13;
  v11 = 0x30203020100uLL >> (8 * v10);
  if (v10 >= 6)
    LOBYTE(v11) = 0;
  if (v9 != (v11 & 3))
    goto LABEL_19;
  while (1)
  {
    v1 = v3;
    v12 = *result;
    v7 = *(unsigned __int8 *)(*result + 16);
    v6 = v1 | (v6 << 32);
    *(_QWORD *)v12 = v6;
    *(_QWORD *)(v12 + 8) = v5;
    if (!v7)
      *(_BYTE *)(v12 + 16) = 1;
    v3 = (int *)*result;
    v5 = *(unsigned __int8 *)(*result + 16);
    if (*(_BYTE *)(*result + 16))
      break;
    __break(1u);
LABEL_19:
    if (v10 == 3 || v10 == 5 || v7 == 5 || v7 == 3)
    {
      v28 = *(_DWORD *)(v1 + 160);
      v17 = __OFADD__((_DWORD)v3, (_DWORD)v5);
      v29 = (_DWORD)v3 + v5;
      v10 = 0x7FFFFFFF;
      v30 = (v3 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v30 = v29;
      v17 = __OFSUB__(v28, v30);
      LODWORD(v3) = v28 - v30;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (v17)
        LODWORD(v3) = v31;
    }
    else if (v7 == 1 || v10 == 1)
    {
      v24 = *(_DWORD *)(v1 + 164);
      v17 = __OFADD__((_DWORD)v6, HIDWORD(v5));
      v25 = v6 + HIDWORD(v5);
      v10 = 0x7FFFFFFF;
      v26 = (v6 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v26 = v25;
      v17 = __OFSUB__(v24, v26);
      LODWORD(v6) = v24 - v26;
      v27 = (v24 >> 31) + 0x7FFFFFFF;
      if (v17)
        v6 = v27;
      else
        v6 = v6;
    }
  }
  v13 = (int *)result[3];
  v15 = *v13;
  v14 = v13[1];
  v16 = v3[1];
  v17 = __OFADD__(*v3, v15);
  v18 = *v3 + v15;
  if (v17)
    v18 = (*v3 >> 31) + 0x7FFFFFFF;
  v17 = __OFADD__(v16, v14);
  v19 = v16 + v14;
  if (v17)
    v19 = (v16 >> 31) + 0x7FFFFFFF;
  *v3 = v18;
  v3[1] = v19;
  return result;
}

BOOL WebCore::RenderBox::percentageLogicalHeightIsResolvable(WebCore::RenderBox *this)
{
  int v2;
  __int16 v3;
  char v4;

  v2 = 100;
  v3 = 3;
  v4 = 0;
  return (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight((uint64_t)this, (WebCore::Length *)&v2, 1) >> 32 != 0;
}

unint64_t WebCore::RenderBox::logicalVisualOverflowRectForPropagation(WebCore::RenderBox *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 20);
    v4 = (uint64_t *)(v2 + 28);
  }
  else
  {
    v3 = 0;
    v4 = (uint64_t *)((char *)this + 160);
  }
  v5 = *v4;
  v6 = HIDWORD(v3);
  v7 = (unsigned __int16)*((_DWORD *)a2 + 11) >> 13;
  v8 = 0x30203020100uLL >> (8 * v7);
  if (v7 >= 6)
    LOBYTE(v8) = 0;
  v9 = v8 & 3;
  v10 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v11 = 0x30203020100uLL >> (8 * v10);
  if (v10 >= 6)
    LOBYTE(v11) = 0;
  if (v9 != (v11 & 3))
  {
    if (v10 == 3 || v10 == 5 || v7 == 5 || v7 == 3)
    {
      v19 = *((_DWORD *)this + 40);
      v17 = __OFADD__((_DWORD)v3, (_DWORD)v5);
      v20 = v3 + v5;
      v21 = (v3 >> 31) + 0x7FFFFFFF;
      if (!v17)
        v21 = v20;
      v17 = __OFSUB__(v19, v21);
      LODWORD(v3) = v19 - v21;
      v22 = (v19 >> 31) + 0x7FFFFFFF;
      if (v17)
        LODWORD(v3) = v22;
    }
    else if (v7 == 1 || v10 == 1)
    {
      v15 = *((_DWORD *)this + 41);
      v16 = (HIDWORD(v3) >> 31) + 0x7FFFFFFF;
      if (!__OFADD__(HIDWORD(v3), HIDWORD(v5)))
        v16 = HIDWORD(v3) + HIDWORD(v5);
      v17 = __OFSUB__(v15, v16);
      LODWORD(v6) = v15 - v16;
      v18 = (v15 >> 31) + 0x7FFFFFFF;
      if (v17)
        LODWORD(v6) = v18;
    }
  }
  v12 = v3 | ((unint64_t)v6 << 32);
  v13 = v6 | ((unint64_t)v3 << 32);
  if (v7 - 2 <= 3)
    return v13;
  else
    return v12;
}

unint64_t WebCore::RenderBox::offsetLeft(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::RenderBox *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 288)) != 0 && *(_BYTE *)(v3 + 1383))
  {
    v6 = this;
    v4 = WebCore::RenderBox::topLeftLocationWithFlipping(this);
    this = v6;
  }
  else
  {
    v4 = *((_QWORD *)this + 19);
  }
  v7 = v4;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v7);
}

unint64_t WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(WebCore::RenderBoxModelObject *this, const WebCore::LayoutPoint *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WebCore::RenderElement *v6;
  WebCore::RenderObject *v7;
  double v8;
  WebCore::RenderElement *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::LayoutIntegration::LineLayout *v13;
  unint64_t InlineBoxRect;
  unint64_t v15;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  double v42;
  float v43;
  int v44;
  int v45;
  double v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  WebCore::RenderFragmentContainer *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  _BYTE *v68;
  unint64_t v69;
  _QWORD v70[2];
  int v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _DWORD v77[4];

  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      {
        return 0;
      }
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return 0;
  v5 = *(_QWORD *)a2;
  v69 = *(_QWORD *)a2;
  v6 = WebCore::RenderObject::offsetParent(this, a2);
  if (v6)
  {
    v9 = v6;
    v10 = HIDWORD(v5);
    if ((*((_BYTE *)v6 + 45) & 4) != 0
      && ((*((_BYTE *)v6 + 45) & 1) != 0
       || (v11 = *(_QWORD *)(*((_QWORD *)v6 + 3) + 8)) == 0
       || (*(_WORD *)(v11 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)))
    {
      v12 = *((unsigned __int8 *)v6 + 46);
      if (v12 != 35 && v12 != 63)
      {
        v19 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v6 + 1016))(v6);
        if (v19 == 0x80000000)
          v20 = 0x7FFFFFFF;
        else
          v20 = -v19;
        v21 = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v9 + 1000))(v9);
        if (v21 == 0x80000000)
          v22 = 0x7FFFFFFF;
        else
          v22 = -v21;
        if (__OFADD__((_DWORD)v5, v20))
          LODWORD(v5) = (v5 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v5) = v5 + v20;
        v23 = __OFADD__((_DWORD)v10, v22);
        v24 = v10 + v22;
        v25 = (v10 >> 31) + 0x7FFFFFFF;
        goto LABEL_62;
      }
    }
    if ((*((_BYTE *)v6 + 45) & 0x20) == 0)
      goto LABEL_66;
    v13 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(v6, v7);
    if (v13)
    {
      InlineBoxRect = WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect(v13, v9);
      v15 = InlineBoxRect & 0xFFFFFFFF00000000;
    }
    else
    {
      InlineBoxRect = *((_QWORD *)v9 + 19);
      if (InlineBoxRect)
      {
        *(float *)&v8 = floorf(WebCore::LegacyInlineBox::locationIncludingFlipping((WebCore::LegacyInlineBox *)InlineBoxRect)* 64.0);
        if (*(float *)&v8 >= 2147500000.0)
        {
          v18 = 0x7FFFFFFF;
        }
        else if (*(float *)&v8 <= -2147500000.0)
        {
          v18 = 0x80000000;
        }
        else
        {
          v18 = (int)*(float *)&v8;
        }
        *(float *)&v8 = floorf(v17 * 64.0);
        if (*(float *)&v8 >= 2147500000.0)
        {
          v15 = 0x7FFFFFFF00000000;
        }
        else if (*(float *)&v8 <= -2147500000.0)
        {
          v15 = 0x8000000000000000;
        }
        else
        {
          v15 = (unint64_t)(int)*(float *)&v8 << 32;
        }
        LODWORD(InlineBoxRect) = v15 | v18;
      }
      else
      {
        v15 = 0;
      }
    }
    v26 = HIDWORD(v15);
    v27 = v15 | InlineBoxRect;
    if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
    {
      if (WebCore::RenderObject::containingBlock(this)
        && ((*((_DWORD *)WebCore::RenderObject::containingBlock(this) + 31) >> 13) & 6u) - 2 < 4)
      {
        v68 = *(_BYTE **)(*((_QWORD *)this + 11) + 24);
        if (v68[12])
        {
          v27 = 0;
        }
        else if (v68[28])
        {
          v27 = 0;
        }
        if (v68[36])
          goto LABEL_49;
        v29 = v68 + 20;
      }
      else
      {
        v28 = *(_BYTE **)(*((_QWORD *)this + 11) + 24);
        if (v28[36])
        {
          v27 = 0;
        }
        else if (v28[20])
        {
          v27 = 0;
        }
        if (v28[12])
          goto LABEL_49;
        v29 = v28 + 28;
      }
      if (*v29)
      {
LABEL_49:
        v30 = 0;
        if (v27 == 0x80000000)
          v31 = 0x7FFFFFFF;
        else
          v31 = -v27;
LABEL_58:
        v23 = __OFADD__((_DWORD)v5, v31);
        v32 = v5 + v31;
        if (v23)
          LODWORD(v5) = (v5 >> 31) + 0x7FFFFFFF;
        else
          LODWORD(v5) = v32;
        v23 = __OFADD__((_DWORD)v10, v30);
        v24 = v10 + v30;
        v25 = (v10 >> 31) + 0x7FFFFFFF;
LABEL_62:
        if (v23)
          LODWORD(v10) = v25;
        else
          LODWORD(v10) = v24;
        v69 = __PAIR64__(v10, v5);
LABEL_66:
        v33 = *((_DWORD *)this + 5);
        if ((v33 & 0x1800000) == 0x1000000)
        {
          if ((v33 & 0x10000000) == 0
            || !(*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 648))(this))
          {
            return v69;
          }
          v33 = *((_DWORD *)this + 5);
        }
        v34 = v33 & 0x1800000;
        if (v34 == 25165824)
        {
          WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, v8);
          v77[0] = v38;
          v77[1] = v39;
          v77[2] = v40;
          v77[3] = v41;
          v71 = 0;
          v70[0] = off_1E34043D0;
          v70[1] = 0;
          v72 = 0u;
          v73 = 0u;
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)v70, (const WebCore::FloatRect *)v77);
          v42 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)v70, (const WebCore::FloatRect *)v77)* 64.0;
          if (v42 > -2147483650.0)
            v44 = (int)v42;
          else
            v44 = 0x80000000;
          if (v42 < 2147483650.0)
            v45 = v44;
          else
            v45 = 0x7FFFFFFF;
          v46 = v43 * 64.0;
          if (v46 >= 2147483650.0)
          {
            v47 = 0x7FFFFFFF;
          }
          else if (v46 <= -2147483650.0)
          {
            v47 = 0x80000000;
          }
          else
          {
            v47 = (int)v46;
          }
          v23 = __OFADD__((_DWORD)v69, v45);
          v48 = v69 + v45;
          if (v23)
            v48 = (v69 >> 31) + 0x7FFFFFFF;
          LODWORD(v69) = v48;
          v37 = HIDWORD(v69) + v47;
          if (__OFADD__(HIDWORD(v69), v47))
            v37 = (HIDWORD(v69) >> 31) + 0x7FFFFFFF;
        }
        else
        {
          if (v34 != 0x800000)
          {
LABEL_91:
            v49 = *((_QWORD *)this + 4);
            if (v49)
              v50 = *(_QWORD *)(v49 + 8);
            else
              v50 = 0;
            while ((WebCore::RenderElement *)v50 != v9)
            {
              v51 = *(unsigned __int8 *)(v50 + 46);
              if (v50 && v51 == 25)
              {
                v52 = WebCore::RenderMultiColumnFlow::physicalTranslationFromFlowToFragment((WebCore::RenderMultiColumnFlow *)v50, (WebCore::LayoutPoint *)&v69);
                if (v52)
                  goto LABEL_106;
              }
              else if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
              {
                v52 = (*(_BYTE *)(v50 + 45) & 4) != 0 ? (WebCore::RenderFragmentContainer *)v50 : 0;
                if (v51 != 39 && v52 != 0)
                {
LABEL_106:
                  v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v52 + 3) + 8) + 40) + 8)
                                  + 528);
                  if (v54
                    && (v55 = *(_QWORD *)(v54 + 8)) != 0
                    && (v56 = *(_QWORD *)(v55 + 288)) != 0
                    && *(_BYTE *)(v56 + 1383))
                  {
                    v57 = WebCore::RenderBox::topLeftLocationWithFlipping(v52);
                  }
                  else
                  {
                    v57 = *((_QWORD *)v52 + 19);
                  }
                  v58 = (v69 >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__((_DWORD)v69, (_DWORD)v57))
                    v58 = v69 + v57;
                  LODWORD(v69) = v58;
                  v59 = HIDWORD(v69) + HIDWORD(v57);
                  if (__OFADD__(HIDWORD(v69), HIDWORD(v57)))
                    v59 = (HIDWORD(v69) >> 31) + 0x7FFFFFFF;
                  HIDWORD(v69) = v59;
                }
              }
              v60 = *(_QWORD *)(v50 + 32);
              if (v60)
                v50 = *(_QWORD *)(v60 + 8);
              else
                v50 = 0;
            }
            if ((*((_BYTE *)v9 + 45) & 5) == 4)
            {
              v61 = *(_QWORD *)(*((_QWORD *)v9 + 3) + 8);
              if (v61)
              {
                if ((*(_WORD *)(v61 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v61 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24)
                  && (*((_WORD *)v9 + 11) & 0x180) == 0)
                {
                  v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 40) + 8) + 528);
                  if (v62
                    && (v63 = *(_QWORD *)(v62 + 8)) != 0
                    && (v64 = *(_QWORD *)(v63 + 288)) != 0
                    && *(_BYTE *)(v64 + 1383))
                  {
                    v65 = WebCore::RenderBox::topLeftLocationWithFlipping(v9);
                  }
                  else
                  {
                    v65 = *((_QWORD *)v9 + 19);
                  }
                  v66 = (v69 >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__((_DWORD)v69, (_DWORD)v65))
                    v66 = v69 + v65;
                  v67 = HIDWORD(v69) + HIDWORD(v65);
                  if (__OFADD__(HIDWORD(v69), HIDWORD(v65)))
                    v67 = (HIDWORD(v69) >> 31) + 0x7FFFFFFF;
                  return __PAIR64__(v67, v66);
                }
              }
            }
            return v69;
          }
          v35 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
          v36 = v5 + v35;
          if (__OFADD__((_DWORD)v5, (_DWORD)v35))
            v36 = (v5 >> 31) + 0x7FFFFFFF;
          LODWORD(v69) = v36;
          v37 = v10 + HIDWORD(v35);
          if (__OFADD__((_DWORD)v10, HIDWORD(v35)))
            v37 = (v10 >> 31) + 0x7FFFFFFF;
        }
        HIDWORD(v69) = v37;
        goto LABEL_91;
      }
    }
    if (v27 == 0x80000000)
      v31 = 0x7FFFFFFF;
    else
      v31 = -v27;
    if (v26 == 0x80000000)
      v30 = 0x7FFFFFFF;
    else
      v30 = -v26;
    goto LABEL_58;
  }
  return v69;
}

unint64_t WebCore::RenderBox::offsetTop(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::RenderBox *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 288)) != 0 && *(_BYTE *)(v3 + 1383))
  {
    v6 = this;
    v4 = WebCore::RenderBox::topLeftLocationWithFlipping(this);
    this = v6;
  }
  else
  {
    v4 = *((_QWORD *)this + 19);
  }
  v7 = v4;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v7) >> 32;
}

uint64_t WebCore::RenderBox::flipForWritingMode(_DWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  unsigned int *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;

  v2 = a1[31];
  v3 = (unsigned __int16)v2 >> 13;
  v4 = v3 >= 5;
  v6 = v3 == 5;
  v5 = (1 << v3) & 0x2A;
  v6 = !v6 && v4 || v5 == 0;
  if (!v6)
  {
    v4 = ((v2 >> 13) & 6) - 2 >= 4;
    v8 = a1 + 40;
    if (v4)
      v8 = a1 + 41;
    v9 = *v8;
    v10 = __OFSUB__(v9, (_DWORD)a2);
    v11 = v9 - a2;
    v12 = (v9 >> 31) + 0x7FFFFFFF;
    if (v10)
      return v12;
    else
      return v11;
  }
  return a2;
}

float WebCore::RenderBox::flipForWritingMode(WebCore::RenderBox *this, WebCore::FloatRect *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  float *v6;
  uint64_t v7;
  float result;

  v2 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2A;
  if (!v3 && v4 != 0)
  {
    v6 = (float *)((char *)a2 + 8);
    v7 = 160;
    if ((*((_DWORD *)this + 5) & 0x1000) == 0)
    {
      v7 = 164;
      v6 = (float *)((char *)a2 + 12);
    }
    result = (float)((float)*(int *)((char *)this + v7) * 0.015625)
           - (float)(*((float *)a2 + ((*((_DWORD *)this + 5) & 0x1000) == 0)) + *v6);
    *((float *)a2 + ((*((_DWORD *)this + 5) & 0x1000) == 0)) = result;
  }
  return result;
}

uint64_t WebCore::RenderObject::RepaintRects::flipForWritingMode(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;

  if (a3)
  {
    v3 = *(_DWORD *)(result + 4);
    v4 = *(_DWORD *)(result + 12);
    v5 = __OFADD__(v3, v4);
    v6 = v3 + v4;
    v7 = (v3 >> 31) + 0x7FFFFFFF;
    if (!v5)
      v7 = v6;
    v8 = HIDWORD(a2) - v7;
    if (__OFSUB__(HIDWORD(a2), v7))
      v8 = (HIDWORD(a2) >> 31) + 0x7FFFFFFF;
    *(_DWORD *)(result + 4) = v8;
    if (*(_BYTE *)(result + 32))
    {
      v9 = *(_DWORD *)(result + 20);
      v10 = *(_DWORD *)(result + 28);
      v5 = __OFADD__(v9, v10);
      v11 = v9 + v10;
      v12 = (v9 >> 31) + 0x7FFFFFFF;
      if (!v5)
        v12 = v11;
      v13 = HIDWORD(a2) - v12;
      if (__OFSUB__(HIDWORD(a2), v12))
        v13 = (HIDWORD(a2) >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(result + 20) = v13;
    }
  }
  else
  {
    v14 = *(_DWORD *)(result + 8);
    v15 = (*(_DWORD *)result >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*(_DWORD *)result, v14))
      v15 = *(_DWORD *)result + v14;
    v16 = a2 - v15;
    if (__OFSUB__((_DWORD)a2, v15))
      v16 = (a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)result = v16;
    if (*(_BYTE *)(result + 32))
    {
      v17 = *(_DWORD *)(result + 16);
      v18 = *(_DWORD *)(result + 24);
      v5 = __OFADD__(v17, v18);
      v19 = v17 + v18;
      v20 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v5)
        v20 = v19;
      v5 = __OFSUB__((_DWORD)a2, v20);
      v21 = a2 - v20;
      if (v5)
        v21 = (a2 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)(result + 16) = v21;
    }
  }
  return result;
}

unint64_t WebCore::RenderBox::topLeftLocationWithFlipping(WebCore::RenderBox *this)
{
  WebCore::RenderObject *v2;
  unint64_t result;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;

  v2 = WebCore::RenderObject::containingBlock(this);
  result = *((_QWORD *)this + 19);
  if (v2 && v2 != this)
  {
    v4 = HIDWORD(result);
    v5 = (unsigned __int16)*((_DWORD *)v2 + 31) >> 13;
    v6 = v5 > 5;
    v7 = (1 << v5) & 0x2A;
    if (!v6 && v7 != 0)
    {
      if ((*((_BYTE *)v2 + 21) & 0x10) != 0)
      {
        v17 = *((_DWORD *)v2 + 40);
        v10 = __OFADD__((_DWORD)result, v17);
        v18 = result + v17;
        v19 = (result >> 31) + 0x7FFFFFFF;
        if (v10)
          v18 = (result >> 31) + 0x7FFFFFFF;
        v20 = *((_DWORD *)this + 40);
        v10 = __OFSUB__(v18, v20);
        v21 = v18 - v20;
        v22 = (v18 >> 31) + 0x7FFFFFFF;
        if (!v10)
          v22 = v21;
        if (((result ^ (2 * result)) & 0x80000000) == 0)
          v19 = 2 * result;
        v10 = __OFSUB__(v22, v19);
        v23 = v22 - v19;
        v24 = (v22 >> 31) + 0x7FFFFFFF;
        if (v10)
          LODWORD(result) = v24;
        else
          LODWORD(result) = v23;
      }
      else
      {
        v9 = *((_DWORD *)v2 + 41);
        v10 = __OFADD__(HIDWORD(result), v9);
        v11 = HIDWORD(result) + v9;
        if (v10)
          v11 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
        v12 = *((_DWORD *)this + 41);
        v10 = __OFSUB__(v11, v12);
        v13 = v11 - v12;
        v14 = (v11 >> 31) + 0x7FFFFFFF;
        if (!v10)
          v14 = v13;
        if ((HIDWORD(result) ^ (2 * HIDWORD(result))) < 0)
          v15 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
        else
          v15 = 2 * HIDWORD(result);
        v10 = __OFSUB__(v14, v15);
        LODWORD(v4) = v14 - v15;
        v16 = (v14 >> 31) + 0x7FFFFFFF;
        if (v10)
          v4 = v16;
        else
          v4 = v4;
      }
    }
    return result | (v4 << 32);
  }
  return result;
}

BOOL WebCore::RenderBox::shouldIgnoreAspectRatio(WebCore::RenderBox *this)
{
  return ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 148) >> 5) & 3u) - 1 > 1
      || *((unsigned __int8 *)this + 46) - 36 < 5;
}

BOOL WebCore::shouldComputeLogicalWidthFromAspectRatioAndInsets(WebCore *this, const WebCore::RenderBox *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    return 0;
  v3 = *((_DWORD *)this + 31);
  v4 = ((v3 >> 13) & 6) - 2;
  v5 = *((_QWORD *)this + 11);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = v6 + 12;
  v8 = v6 + 4;
  if (v4 < 4)
    v8 = v7;
  if (*(_BYTE *)(v8 + 4))
    return 0;
  v9 = *(_QWORD *)(v5 + 24);
  v10 = (unsigned __int16)v3 >> 13;
  v11 = (v10 - 2) > 3 ? 3 : qword_1969FC688[v10 - 2];
  v12 = v9 + 8;
  if (*(_BYTE *)(v12 + 8 * v11 + 4))
  {
    v13 = v10 - 2;
    v14 = v13 > 3 ? 1 : qword_1969FC6A8[v13];
    if (*(_BYTE *)(v12 + 8 * v14 + 4))
      return 0;
  }
  v15 = (*(uint64_t (**)(WebCore *, const WebCore::RenderBox *))(*(_QWORD *)this + 1320))(this, a2);
  v16 = HIDWORD(v15);
  if (v4 > 3)
    LODWORD(v16) = v15;
  if ((_DWORD)v16)
    return 0;
  v17 = *((_QWORD *)this + 11);
  v18 = *((_DWORD *)this + 31);
  v19 = (unsigned __int16)v18 >> 13;
  v20 = (v19 - 1) > 4 ? 0 : qword_1969FC6C8[v19 - 1];
  v21 = *(_QWORD *)(v17 + 24) + 8;
  if (!*(_BYTE *)(v21 + 8 * v20 + 4))
    return 0;
  v22 = ((unsigned __int16)v18 >> 13) - 1;
  v23 = v22 > 4 ? 2 : qword_1969FC6F0[v22];
  if (!*(_BYTE *)(v21 + 8 * v23 + 4))
    return 0;
  v24 = *(_QWORD *)(v17 + 8);
  v25 = ((v18 >> 13) & 6) - 2 >= 4;
  v26 = v24 + 4;
  v27 = v24 + 12;
  if (!v25)
    v27 = v26;
  return *(_BYTE *)(v27 + 4) == 0;
}

BOOL WebCore::RenderBox::shouldComputeLogicalWidthFromAspectRatio(void)const::$_0::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  __int16 v6;
  char v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v2 = v1 + 4;
  v3 = v1 + 12;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
    v2 = v3;
  if ((*(_BYTE *)(v2 + 4) & 0xF7) != 3)
    return 0;
  if ((*(_DWORD *)(a1 + 20) & 0x1800000) == 0x1000000)
    return 1;
  v5 = 100;
  v6 = 3;
  v7 = 0;
  return (unint64_t)WebCore::RenderBox::computePercentageLogicalHeight(a1, (WebCore::Length *)&v5, 1) >> 32 != 0;
}

BOOL WebCore::RenderBox::hasRelativeLogicalWidth(WebCore::RenderBox *this)
{
  _BYTE *v1;
  _BYTE *v2;

  v1 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if ((v1[16] & 0xF7) != 3 && (v1[40] & 0xF7) != 3)
    {
      v2 = v1 + 44;
      return (v2[4] & 0xF7) == 3;
    }
  }
  else if ((v1[8] & 0xF7) != 3 && (v1[24] & 0xF7) != 3)
  {
    v2 = v1 + 28;
    return (v2[4] & 0xF7) == 3;
  }
  return 1;
}

uint64_t WebCore::RenderBox::offsetFromLogicalTopOfFirstPage(WebCore::RenderBox *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE *v5;
  WebCore::RenderObject *v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  int v10;
  BOOL v11;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v3 = *(unsigned int *)(v2 + 508);
  if (!(_DWORD)v3 || (v5 = *(_BYTE **)(*(_QWORD *)(v2 + 496) + 8 * v3 - 8)) == 0)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this);
      if (!result)
        return result;
      goto LABEL_6;
    }
    return 0;
  }
  if ((*v5 & 2) == 0)
    return 0;
LABEL_6:
  v6 = WebCore::RenderObject::containingBlock(this);
  v7 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 1288))(v6);
  v8 = v7;
  v9 = (char *)this + 152;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    v9 = (char *)this + 156;
  v10 = *(_DWORD *)v9;
  v11 = __OFADD__(v7, v10);
  result = v7 + v10;
  if (v11)
    return (v8 >> 31) + 0x7FFFFFFF;
  return result;
}

unint64_t WebCore::RenderBox::explicitIntrinsicInnerWidth(WebCore::RenderBox *this)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  const WebCore::Element *v7;
  int v8;
  WebCore::Element *v9;
  unint64_t RememberedLogicalHeight;
  unint64_t v11;
  float v12;
  double v13;
  int v14;
  char v15;
  char v16;
  char v17;

  if ((((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0x300000000000) == 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    v4 = 0;
    return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
  }
  if (WebCore::RenderElement::element(this)
    && ((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)) & 0x200000000000) != 0
    && (v7 = (const WebCore::Element *)WebCore::RenderElement::element(this),
        WebCore::isSkippedContentRoot((WebCore *)(*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)), *((const WebCore::RenderStyle **)this + 12), v7)))
  {
    v8 = *((_DWORD *)this + 5);
    v9 = (WebCore::Element *)WebCore::RenderElement::element(this);
    if ((v8 & 0x1000) != 0)
      RememberedLogicalHeight = WebCore::Element::lastRememberedLogicalHeight(v9);
    else
      RememberedLogicalHeight = WebCore::Element::lastRememberedLogicalWidth(v9);
    v4 = RememberedLogicalHeight >> 8;
    v1 = RememberedLogicalHeight >> 40;
    if ((RememberedLogicalHeight & 0xFF00000000) != 0)
    {
      v3 = RememberedLogicalHeight & 0xFFFFFFFF00000000;
      LOBYTE(v2) = RememberedLogicalHeight;
      return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
    }
  }
  else
  {
    v4 = 0;
  }
  if ((~((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0x300000000000) == 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
  }
  WebCore::RenderStyle::containIntrinsicWidth((int *)this + 20, (uint64_t)&v14);
  if (v17)
  {
    v12 = *(float *)&v14;
    v11 = v14;
    if (!v16)
      v12 = (float)v14;
    v13 = v12 * 64.0;
    if (v13 < 2147483650.0)
    {
      if (v13 <= -2147483650.0)
        v2 = 0x80000000;
      else
        v2 = (int)v13;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  v2 = 0x7FFFFFFF;
LABEL_18:
  v4 = v2 >> 8;
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    v4 = v2 >> 8;
  }
  v3 = 0x100000000;
  return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
}

BOOL WebCore::isSkippedContentRoot(WebCore *this, const WebCore::RenderStyle *a2, const WebCore::Element *a3)
{
  unsigned int v3;

  v3 = (this >> 18) & 3;
  if (!v3)
    return 0;
  if ((a2 & 0x1F) != 0xD && (a2 & 0x1Eu) - 14 > 0xFFFFFFF5)
    return 0;
  if (v3 == 2)
    return 1;
  if (!a3)
    return 0;
  return !WebCore::Element::isRelevantToUser(a3);
}

unint64_t WebCore::RenderBox::explicitIntrinsicInnerHeight(WebCore::RenderBox *this)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  const WebCore::Element *v7;
  int v8;
  WebCore::Element *v9;
  unint64_t RememberedLogicalWidth;
  unint64_t v11;
  float v12;
  double v13;
  int v14;
  char v15;
  char v16;
  char v17;

  if ((((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0xC00000000000) == 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    v4 = 0;
    return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
  }
  if (WebCore::RenderElement::element(this)
    && ((*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)) & 0x800000000000) != 0
    && (v7 = (const WebCore::Element *)WebCore::RenderElement::element(this),
        WebCore::isSkippedContentRoot((WebCore *)(*(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 642) << 16)) << 32)), *((const WebCore::RenderStyle **)this + 12), v7)))
  {
    v8 = *((_DWORD *)this + 5);
    v9 = (WebCore::Element *)WebCore::RenderElement::element(this);
    if ((v8 & 0x1000) != 0)
      RememberedLogicalWidth = WebCore::Element::lastRememberedLogicalWidth(v9);
    else
      RememberedLogicalWidth = WebCore::Element::lastRememberedLogicalHeight(v9);
    v4 = RememberedLogicalWidth >> 8;
    v1 = RememberedLogicalWidth >> 40;
    if ((RememberedLogicalWidth & 0xFF00000000) != 0)
    {
      v3 = RememberedLogicalWidth & 0xFFFFFFFF00000000;
      LOBYTE(v2) = RememberedLogicalWidth;
      return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
    }
  }
  else
  {
    v4 = 0;
  }
  if ((~((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 640) << 32) & 0xC00000000000) == 0)
  {
    LOBYTE(v2) = 0;
    v3 = 0;
    return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
  }
  WebCore::RenderStyle::containIntrinsicHeight((int *)this + 20, (uint64_t)&v14);
  if (v17)
  {
    v12 = *(float *)&v14;
    v11 = v14;
    if (!v16)
      v12 = (float)v14;
    v13 = v12 * 64.0;
    if (v13 < 2147483650.0)
    {
      if (v13 <= -2147483650.0)
        v2 = 0x80000000;
      else
        v2 = (int)v13;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  v2 = 0x7FFFFFFF;
LABEL_18:
  v4 = v2 >> 8;
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    v4 = v2 >> 8;
  }
  v3 = 0x100000000;
  return v3 & 0xFF00000000 | (v1 << 40) | v2 | (v4 << 8);
}

uint64_t WebCore::RenderBoxModelObject::requiresLayer(WebCore::RenderBoxModelObject *this, WTF::StringImpl *a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;
  int v11;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*((_QWORD *)this + 3) + 8))
    return 1;
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x1800000) != 0)
    return 1;
  v5 = *((_QWORD *)this + 11);
  v6 = *(_QWORD *)(v5 + 32);
  if (*(float *)(v6 + 4) < 1.0)
    return 1;
  v7 = *(_QWORD *)(v6 + 48);
  v8 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v7 + 8))
  {
    while (!*(_QWORD *)(v7 + 16))
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_11;
    }
    return 1;
  }
  if (*(_QWORD *)(v7 + 16)
     ? WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return 1;
  }
LABEL_11:
  v10 = *(_QWORD *)(v5 + 40);
  if (!*(_QWORD *)(*(_QWORD *)(v10 + 216) + 8))
    v8 = 0;
  if (v8)
    return 1;
  if (*(_QWORD *)(v10 + 264))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(v6 + 32) + 20))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(v10 + 72) + 20))
    return 1;
  v11 = *(_DWORD *)(v10 + 636);
  if ((v11 & 0x1F00000) != 0x100000)
    return 1;
  result = 1;
  if ((v3 & 0x20000) == 0 && (v11 & 0x400) == 0)
  {
    if (((v3 & 0x4000) == 0 || !*(_BYTE *)WebCore::RenderObject::rareData(this))
      && (WebCore::RenderElement::requiresRenderingConsolidationForViewTransition(this, a2) & 1) == 0)
    {
      if ((*((_BYTE *)this + 52) & 7) == 3)
        return (*((unsigned __int8 *)this + 53) >> 3) & 1;
      else
        return 0;
    }
    return 1;
  }
  return result;
}

WebCore::RenderObject *WebCore::RenderBox::updateFloatPainterAfterSelfPaintingLayerChange(WebCore::RenderObject *this)
{
  uint64_t v1;
  WebCore::RenderObject *v2;
  WebCore::RenderObject *v3;
  WebCore::RenderObject **v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderObject *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  if (*(_BYTE *)(v1 + 480))
  {
    v2 = this;
    v3 = *(WebCore::RenderObject **)(v1 + 464);
    if (v3)
      v3 = (WebCore::RenderObject *)*((_QWORD *)v3 + 1);
    if (v3 == this)
    {
      this = WebCore::RenderObject::containingBlock(this);
      if (this)
      {
        v4 = 0;
        while ((*((_BYTE *)this + 52) & 7) == 1)
        {
          v5 = *((_QWORD *)this + 27);
          if (!v5)
            break;
          v6 = *(_QWORD *)(v5 + 8);
          if (!v6)
            break;
          while (1)
          {
            v7 = **(WebCore::RenderObject ***)v6;
            if (v7)
              v7 = (WebCore::RenderObject *)*((_QWORD *)v7 + 1);
            if (v7 == v2)
              break;
            v6 = *(_QWORD *)(v6 + 16);
            if (!v6)
              goto LABEL_20;
          }
          v4 = *(WebCore::RenderObject ***)v6;
          if ((*((_BYTE *)this + 21) & 0x80) == 0 || (*(_BYTE *)(*((_QWORD *)this + 18) + 25) & 8) == 0)
          {
            this = WebCore::RenderObject::containingBlock(this);
            if (this)
              continue;
          }
          goto LABEL_21;
        }
LABEL_20:
        if (!v4)
          return this;
LABEL_21:
        *((_BYTE *)v4 + 36) |= 4u;
      }
    }
  }
  return this;
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  ++*((_DWORD *)a1 + 2);
  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if (!*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 16 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == v2)
        break;
    }
    v8 = (v10 + i) & v4;
  }
  return *(_QWORD *)(v3 + 16 * v10 + 8);
}

WebCore::RenderObject *WebCore::RenderBoxModelObject::setSelectionState(WebCore::RenderObject *result, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;

  switch((_DWORD)a2)
  {
    case 1:
      v3 = *((_DWORD *)result + 5);
      v4 = v3 & 0xE000000;
      v5 = 100663296;
      break;
    case 2:
      v3 = *((_DWORD *)result + 5);
      if ((v3 & 0xE000000) != 0)
        return result;
      goto LABEL_11;
    case 3:
      v3 = *((_DWORD *)result + 5);
      v4 = v3 & 0xE000000;
      v5 = 0x2000000;
      break;
    default:
      v3 = *((_DWORD *)result + 5);
      goto LABEL_11;
  }
  if (v4 == v5)
  {
    v6 = 0x8000000;
    goto LABEL_12;
  }
LABEL_11:
  v6 = (a2 & 7) << 25;
LABEL_12:
  *((_DWORD *)result + 5) = v3 & 0xF1FFFFFF | v6;
  result = WebCore::RenderObject::containingBlock(result);
  if (result)
  {
    if (*((_BYTE *)result + 46) != 49)
      return (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)result
                                                                                                  + 496))(result, a2);
  }
  return result;
}

BOOL WebCore::RenderBoxModelObject::hasVisibleBoxDecorationStyle(WebCore::RenderBoxModelObject *this)
{
  void *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  WebCore::RenderStyle::visitedDependentColor((uint64_t)this + 80, 61, 0, &v20);
  v3 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if ((v20 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    if (*(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
      v19 = 1;
      goto LABEL_53;
    }
  }
  else if ((_BYTE)v20)
  {
    return 1;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8);
  if (*(_QWORD *)(v4 + 8))
  {
    do
    {
      v18 = *(_QWORD *)(v4 + 16);
      v6 = v18 != 0;
      if (v18)
        break;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4);
  }
  else
  {
    if (*(_QWORD *)(v4 + 16))
      v5 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v5 = 0;
    v6 = v5 != 0;
  }
  if ((v20 & 0x8000000000000) == 0)
    goto LABEL_9;
  v19 = v6;
  v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
  do
  {
LABEL_53:
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v2);
    v3 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    if ((v19 & 1) != 0)
      return 1;
    goto LABEL_10;
  }
  v3 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  v6 = v19;
LABEL_9:
  if (v6)
    return 1;
LABEL_10:
  v7 = *((_QWORD *)this + 11);
  v8 = *(_QWORD *)(v7 + 24);
  if (*(float *)(v8 + 120) != 0.0 && (*(_BYTE *)(v8 + 124) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v8 + 112))
    {
      v11 = *(_QWORD *)(v8 + 104);
      if ((v11 & 0x4000000000000) != 0)
      {
        if ((v11 & 0x8000000000000) != 0)
        {
          if (*(float *)((v11 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_12;
        }
        else if (!*(_QWORD *)(v8 + 104))
        {
          goto LABEL_12;
        }
      }
    }
    if ((*(_BYTE *)(v8 + 124) & 0xF) != 1)
      return 1;
  }
LABEL_12:
  if (*(float *)(v8 + 144) != 0.0 && (*(_BYTE *)(v8 + 148) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v8 + 136))
    {
      v12 = *(_QWORD *)(v8 + 128);
      if ((v12 & 0x4000000000000) != 0)
      {
        if ((v12 & 0x8000000000000) != 0)
        {
          if (*(float *)((v12 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_14;
        }
        else if (!*(_QWORD *)(v8 + 128))
        {
          goto LABEL_14;
        }
      }
    }
    if ((*(_BYTE *)(v8 + 148) & 0xF) != 1)
      return 1;
  }
LABEL_14:
  if (*(float *)(v8 + 168) != 0.0 && (*(_BYTE *)(v8 + 172) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v8 + 160))
    {
      v13 = *(_QWORD *)(v8 + 152);
      if ((v13 & 0x4000000000000) != 0)
      {
        if ((v13 & 0x8000000000000) != 0)
        {
          if (*(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_16;
        }
        else if (!*(_QWORD *)(v8 + 152))
        {
          goto LABEL_16;
        }
      }
    }
    if ((*(_BYTE *)(v8 + 172) & 0xF) != 1)
      return 1;
  }
LABEL_16:
  if (*(float *)(v8 + 192) != 0.0 && (*(_BYTE *)(v8 + 196) & 0xF) != 0)
  {
    if (!*(_DWORD *)(v8 + 184))
    {
      v14 = *(_QWORD *)(v8 + 176);
      if ((v14 & 0x4000000000000) != 0)
      {
        if ((v14 & 0x8000000000000) != 0)
        {
          if (*(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_18;
        }
        else if (!*(_QWORD *)(v8 + 176))
        {
          goto LABEL_18;
        }
      }
    }
    if ((*(_BYTE *)(v8 + 196) & 0xF) != 1)
      return 1;
  }
LABEL_18:
  if (!*(_QWORD *)(*(_QWORD *)(v8 + 200) + 8))
    v3 = 0;
  if (!v3)
  {
    v9 = *(_QWORD *)(v7 + 32);
    if ((*(_DWORD *)(v9 + 148) & 0x1FC000) == 0)
      return *(_QWORD *)(v9 + 88) != 0;
  }
  return 1;
}

uint64_t WebCore::RenderBoxModelObject::decodingModeForImageDraw(WebCore::Image const&,WebCore::PaintInfo const&)const::$_0::operator()(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BOOL4 v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::LocalFrameView *v14;
  uint64_t v15;
  const WebCore::IntRect *v16;
  uint64_t v17;
  int isVisibleInDocumentRect;
  uint64_t result;
  _QWORD v20[2];
  _QWORD v21[2];

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 20);
  if ((v1 & 0x400) != 0)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if ((v1 & 0x800) == 0)
  {
LABEL_23:
    v14 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 1944)
                                      + 248);
    ++*((_DWORD *)v14 + 2);
    v20[0] = WebCore::LocalFrameView::windowClipRect(v14);
    v20[1] = v15;
    v21[0] = WebCore::ScrollView::windowToContents((WebCore::Widget **)v14, (const WebCore::IntRect *)v20, v16);
    v21[1] = v17;
    isVisibleInDocumentRect = WebCore::RenderElement::isVisibleInDocumentRect((WebCore::RenderElement *)v3, (const WebCore::IntRect *)v21);
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
    if (isVisibleInDocumentRect)
      return 1;
    else
      return 2;
  }
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_33;
  }
  v5 = *(_DWORD **)(v4 + 8);
  if (!v5)
  {
LABEL_33:
    v9 = 0;
    v8 = 1;
    goto LABEL_9;
  }
  ++v5[2];
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5) < 2)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 64);
    LOBYTE(v21[0]) = 0;
    BYTE4(v21[0]) = 0;
    v7 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 120))(v6, v21);
    v8 = 0;
    v9 = *(unsigned __int8 *)(v7 + 28) == 2;
  }
LABEL_9:
  if ((*(_BYTE *)(v3 + 45) & 1) != 0)
    goto LABEL_14;
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
  if (!v11)
    goto LABEL_14;
  if ((*(_WORD *)(v11 + 28) & 8) != 0)
  {
    v12 = *(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      if (*(_BYTE *)(v12 + 25))
        LOBYTE(v9) = 1;
      if (v9)
        goto LABEL_14;
    }
    else if (v9)
    {
LABEL_14:
      v13 = 1;
      goto LABEL_19;
    }
    v13 = 0;
LABEL_19:
    if ((v8 & 1) == 0)
    {
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        if (v13)
          goto LABEL_23;
        return 2;
      }
      --v5[2];
    }
    if (v13)
      goto LABEL_23;
    return 2;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

int *WebCore::LayoutSize::expand<float,float>(int *result, float a2, float a3)
{
  int v3;
  double v4;
  int v5;
  int v6;
  double v7;
  int v8;

  v3 = result[1];
  v4 = (float)((float)((float)*result * 0.015625) + a2) * 64.0;
  if (v4 > -2147483650.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147483650.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  *result = v6;
  v7 = (float)((float)((float)v3 * 0.015625) + a3) * 64.0;
  if (v7 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v7 <= -2147483650.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  result[1] = v8;
  return result;
}

unint64_t WebCore::RenderBoxModelObject::relativePositionOffset(void)const::$_0::operator()(uint64_t a1)
{
  WebCore::RenderBox *v2;
  _DWORD *v3;
  unsigned int v4;
  BOOL v5;
  WebCore::RenderBox *v6;
  unint64_t result;
  char v8;

  v2 = *(WebCore::RenderBox **)a1;
  v3 = **(_DWORD ***)(a1 + 8);
  v4 = ((v3[31] >> 13) & 6) - 2;
  if (v2)
    v5 = (*((_BYTE *)v2 + 45) & 4) == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v4 < 4)
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v3 + 1344))(**(_QWORD **)(a1 + 8), 1);
    v6 = **(WebCore::RenderBox ***)(a1 + 8);
    return WebCore::RenderBox::contentLogicalWidth(v6);
  }
  if (v4 < 4)
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalHeight(v2);
  else
    result = WebCore::RenderBox::overridingContainingBlockContentLogicalWidth(v2);
  if (!v8)
  {
    v6 = **(WebCore::RenderBox ***)(a1 + 8);
    if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 < 4)
      return (*(uint64_t (**)(WebCore::RenderBox *, uint64_t))(*(_QWORD *)v6 + 1344))(v6, 1);
    return WebCore::RenderBox::contentLogicalWidth(v6);
  }
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return 0;
}

uint64_t WebCore::RenderBoxModelObject::enclosingClippingBoxForStickyPosition(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;
  uint64_t result;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v2 = WebCore::RenderLayer::enclosingOverflowClipLayer(*((_QWORD *)this + 18), 1);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  result = *(_QWORD *)(v2 + 32);
  if ((*(_BYTE *)(result + 45) & 4) == 0)
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::computeStickyPositionConstraints(WebCore::RenderBoxModelObject *this, WebCore::StickyPositionViewportConstraints *a2, const WebCore::FloatRect *a3)
{
  WebCore::RenderBoxModelObject *v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  float v22;
  float v23;
  double v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  float v28;
  float v29;
  double v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  float v34;
  unint64_t v35;
  float v36;
  double v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  float v52;
  double v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  float v58;
  double v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  float v63;
  double v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  float v68;
  double v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  signed int v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  int v95;
  int v96;
  float v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t result;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  unsigned int v125;
  int v126;
  int v127;
  float v128;
  unsigned int v129;
  int v130;
  float v131;
  uint64_t v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  double v136;
  int v137;
  float v138;
  double v139;
  int v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  unint64_t v150;
  unint64_t v151;
  double v152;
  int v153;
  float v154;
  double v155;
  int v156;
  uint64_t v157;
  int v159;
  float v160;
  int v161;
  float v162;
  double v163;
  int v164;
  float v165;
  double v166;
  float v167;
  double v168;
  float v169;
  unint64_t v170;
  uint64_t v171;
  float v172;
  double v173;
  unint64_t v174;
  uint64_t v175;
  float v176;
  double v177;
  unint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  int v186;
  double v187;
  int v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  float v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  float v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  float v202;
  uint64_t v203;
  int v204;
  float v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  const WebCore::FloatRect *v215;
  unint64_t v216;
  int v217;
  unint64_t v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  __int128 v227;
  float v228;
  float v229;
  float v230;
  float v231;

  v5 = this;
  *(_OWORD *)((char *)a2 + 36) = *(_OWORD *)a3;
  while (1)
  {
    v6 = WebCore::RenderObject::containingBlock(this);
    v7 = (uint64_t)v6;
    if (!v6 || (*((_BYTE *)v6 + 45) & 1) == 0)
      break;
    v157 = (*((_BYTE *)v6 + 45) & 2) != 0
         ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 4) + 8) + 96)
         : *((_QWORD *)v6 + 12);
    if ((v157 & 0x1F) != 1 && (v157 & 0x1F) != 14)
      break;
    if ((*((_BYTE *)v6 + 45) & 0x40) == 0)
      break;
    if ((v157 & 0xF80000000000) != 0)
      break;
    if (((*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 176))(v6) & 1) != 0)
      break;
    v159 = *(unsigned __int8 *)(v7 + 46);
    if (v159 == 20)
      break;
    if ((*(_BYTE *)(v7 + 52) & 7) == 1)
    {
      if ((*(_BYTE *)(v7 + 53) & 2) != 0 || v159 == 26 || v159 == 49)
        break;
    }
    else if (v159 == 49 || v159 == 26)
    {
      break;
    }
    this = (WebCore::RenderBoxModelObject *)v7;
  }
  v215 = a3;
  if ((*((_BYTE *)v5 + 21) & 0x80) == 0 || (v8 = *(_QWORD **)(*((_QWORD *)v5 + 18) + 40)) == 0)
  {
LABEL_253:
    v8 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1944);
    v47 = v7 == v9;
LABEL_254:
    v150 = WebCore::RenderBox::computedCSSContentBoxRect((WebCore::RenderBox *)v7);
    v46 = v151;
    v213 = v150;
    v216 = HIDWORD(v150);
    goto LABEL_60;
  }
  while (1)
  {
    v9 = v8[4];
    if ((*(_BYTE *)(v9 + 22) & 1) != 0)
    {
      v10 = (*(_BYTE *)(v9 + 45) & 2) != 0
          ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 8) + 96)
          : *(_QWORD *)(v9 + 96);
      v11 = v10 & 0x1C00;
      if (v11 != 2048)
      {
        if (v11)
          break;
      }
    }
    v8 = (_QWORD *)v8[5];
    if (!v8)
      goto LABEL_253;
  }
  if ((*(_BYTE *)(v9 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196399940);
  }
  if (v7 != v9)
  {
    v47 = 0;
    goto LABEL_254;
  }
  v12 = WebCore::RenderBox::layoutOverflowRect((WebCore::RenderBox *)v7);
  v14 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 24);
  v15 = v14[76];
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    v191 = v12;
    v192 = v13;
    v193 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1144))(v7);
    v13 = v192;
    v15 = v14[76];
    v194 = (float)v193;
    v12 = v191;
    v16 = v194 * 0.015625;
  }
  else
  {
    v16 = 0.0;
  }
  switch(v15)
  {
    case 4:
      v17 = *((float *)v14 + 18);
      if (!v14[78])
        v17 = (float)SLODWORD(v17);
LABEL_20:
      v18 = v17 * 64.0;
      if (v18 >= 2147483650.0)
      {
        v19 = 0x7FFFFFFF;
      }
      else if (v18 <= -2147483650.0)
      {
        v19 = 0x80000000;
      }
      else
      {
        v19 = (int)v18;
      }
      break;
    case 3:
      v146 = *((float *)v14 + 18);
      if (!v14[78])
        v146 = (float)SLODWORD(v146);
      v17 = (float)(v16 * v146) / 100.0;
      goto LABEL_20;
    case 11:
      v170 = v12;
      v171 = v13;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v14 + 72), v16);
      v173 = v172 * 64.0;
      if (v173 >= 2147483650.0)
      {
        v19 = 0x7FFFFFFF;
      }
      else if (v173 <= -2147483650.0)
      {
        v19 = 0x80000000;
      }
      else
      {
        v19 = (int)v173;
      }
      v13 = v171;
      v12 = v170;
      break;
    default:
      v19 = 0;
      break;
  }
  v20 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 24);
  v21 = v20[84];
  if ((v21 & 0xFFFFFFF7) == 3)
  {
    v195 = v12;
    v196 = v13;
    v197 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1144))(v7);
    v13 = v196;
    v21 = v20[84];
    v198 = (float)v197;
    v12 = v195;
    v22 = v198 * 0.015625;
  }
  else
  {
    v22 = 0.0;
  }
  switch(v21)
  {
    case 4:
      v23 = *((float *)v20 + 20);
      if (!v20[86])
        v23 = (float)SLODWORD(v23);
LABEL_28:
      v24 = v23 * 64.0;
      if (v24 >= 2147483650.0)
      {
        v25 = 0x7FFFFFFF;
      }
      else if (v24 <= -2147483650.0)
      {
        v25 = 0x80000000;
      }
      else
      {
        v25 = (int)v24;
      }
      break;
    case 3:
      v147 = *((float *)v20 + 20);
      if (!v20[86])
        v147 = (float)SLODWORD(v147);
      v23 = (float)(v22 * v147) / 100.0;
      goto LABEL_28;
    case 11:
      v174 = v12;
      v175 = v13;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v20 + 80), v22);
      v177 = v176 * 64.0;
      if (v177 >= 2147483650.0)
      {
        v25 = 0x7FFFFFFF;
        v13 = v175;
        v12 = v174;
      }
      else
      {
        v12 = v174;
        if (v177 <= -2147483650.0)
          v25 = 0x80000000;
        else
          v25 = (int)v177;
        v13 = v175;
      }
      break;
    default:
      v25 = 0;
      break;
  }
  v26 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 24);
  v27 = v26[92];
  if ((v27 & 0xFFFFFFF7) == 3)
  {
    v199 = v12;
    v200 = v13;
    v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1144))(v7);
    v13 = v200;
    v27 = v26[92];
    v202 = (float)v201;
    v12 = v199;
    v28 = v202 * 0.015625;
  }
  else
  {
    v28 = 0.0;
  }
  if (v27 == 4)
  {
    v29 = *((float *)v26 + 22);
    if (!v26[94])
      v29 = (float)SLODWORD(v29);
LABEL_36:
    v30 = v29 * 64.0;
    if (v30 < 2147483650.0)
    {
      if (v30 > -2147483650.0)
      {
LABEL_38:
        v31 = (int)v30;
        goto LABEL_39;
      }
      goto LABEL_345;
    }
    v31 = 0x7FFFFFFF;
    goto LABEL_39;
  }
  if (v27 == 3)
  {
    v148 = *((float *)v26 + 22);
    if (!v26[94])
      v148 = (float)SLODWORD(v148);
    v29 = (float)(v28 * v148) / 100.0;
    goto LABEL_36;
  }
  if (v27 != 11)
  {
    v31 = 0;
    goto LABEL_39;
  }
  v178 = v12;
  v179 = v13;
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v26 + 88), v28);
  v30 = v180 * 64.0;
  if (v30 < 2147483650.0)
  {
    v13 = v179;
    v12 = v178;
    if (v30 > -2147483650.0)
      goto LABEL_38;
LABEL_345:
    v31 = 0x80000000;
    goto LABEL_39;
  }
  v31 = 0x7FFFFFFF;
  v13 = v179;
  v12 = v178;
LABEL_39:
  v32 = *(unsigned __int8 **)(*(_QWORD *)(v7 + 88) + 24);
  v33 = v32[100];
  if ((v33 & 0xFFFFFFF7) == 3)
  {
    v218 = v12;
    v203 = v13;
    v204 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1144))(v7);
    v13 = v203;
    v33 = v32[100];
    v205 = (float)v204;
    v12 = v218;
    v34 = v205 * 0.015625;
  }
  else
  {
    v34 = 0.0;
  }
  v35 = HIDWORD(v12);
  if (v33 == 4)
  {
    v36 = *((float *)v32 + 24);
    if (!v32[102])
      v36 = (float)SLODWORD(v36);
    goto LABEL_44;
  }
  if (v33 == 3)
  {
    v149 = *((float *)v32 + 24);
    if (!v32[102])
      v149 = (float)SLODWORD(v149);
    v36 = (float)(v34 * v149) / 100.0;
LABEL_44:
    v37 = v36 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v38 = 0x7FFFFFFF;
      goto LABEL_47;
    }
    if (v37 > -2147483650.0)
      goto LABEL_46;
LABEL_348:
    v38 = 0x80000000;
    goto LABEL_47;
  }
  if (v33 != 11)
  {
    v38 = 0;
    goto LABEL_47;
  }
  v217 = v12;
  v214 = v13;
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v32 + 96), v34);
  v37 = v181 * 64.0;
  if (v37 >= 2147483650.0)
  {
    v38 = 0x7FFFFFFF;
    v13 = v214;
    LODWORD(v12) = v217;
    goto LABEL_47;
  }
  v13 = v214;
  LODWORD(v12) = v217;
  if (v37 <= -2147483650.0)
    goto LABEL_348;
LABEL_46:
  v38 = (int)v37;
LABEL_47:
  v39 = v12 + v38;
  if (__OFADD__((_DWORD)v12, v38))
    v39 = (v12 >> 31) + 0x7FFFFFFF;
  v40 = v35 + v19;
  v213 = v39;
  if (__OFADD__((_DWORD)v35, v19))
    v40 = (v35 >> 31) + 0x7FFFFFFF;
  v41 = v38 + v25;
  if (__OFADD__(v38, v25))
    v41 = (v38 >> 31) + 0x7FFFFFFF;
  v42 = v19 + v31;
  if (__OFADD__(v19, v31))
    v42 = (v19 >> 31) + 0x7FFFFFFF;
  v43 = __OFSUB__((_DWORD)v13, v41);
  v44 = v13 - v41;
  if (v43)
    v44 = (v13 >> 31) + 0x7FFFFFFF;
  v43 = __OFSUB__(HIDWORD(v13), v42);
  v45 = (HIDWORD(v13) - v42);
  if (v43)
    v45 = ((HIDWORD(v13) >> 31) + 0x7FFFFFFF);
  LODWORD(v216) = v40;
  v46 = v44 | (unint64_t)(v45 << 32);
  v47 = 1;
  v9 = v7;
LABEL_60:
  v48 = WebCore::RenderBox::contentLogicalWidth((WebCore::RenderBox *)v7);
  v49 = v48;
  v50 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  v51 = v50[44];
  if (v51 == 4)
  {
    v52 = *((float *)v50 + 10);
    if (!v50[46])
      v52 = (float)SLODWORD(v52);
    v53 = v52 * 64.0;
    if (v53 < 2147483650.0)
    {
      v54 = v216;
      if (v53 > -2147483650.0)
      {
LABEL_65:
        v55 = (int)v53;
        goto LABEL_66;
      }
      goto LABEL_224;
    }
    v55 = 0x7FFFFFFF;
    v54 = v216;
  }
  else if (v51 == 3)
  {
    v142 = *((float *)v50 + 10);
    if (!v50[46])
      v142 = (float)SLODWORD(v142);
    v53 = (float)((float)((float)((float)v48 * 0.015625) * v142) / 100.0) * 64.0;
    v54 = v216;
    if (v53 < 2147483650.0)
    {
      if (v53 > -2147483650.0)
        goto LABEL_65;
LABEL_224:
      v55 = 0x80000000;
      goto LABEL_66;
    }
    v55 = 0x7FFFFFFF;
  }
  else
  {
    v54 = v216;
    if (v51 == 11)
    {
      v161 = v48;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v50 + 40), (float)v48 * 0.015625);
      v163 = v162 * 64.0;
      if (v163 >= 2147483650.0)
      {
        v55 = 0x7FFFFFFF;
        v54 = v216;
      }
      else
      {
        v54 = v216;
        if (v163 <= -2147483650.0)
          v55 = 0x80000000;
        else
          v55 = (int)v163;
      }
      v49 = v161;
    }
    else
    {
      v55 = 0;
    }
  }
LABEL_66:
  v56 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  v57 = v56[52];
  switch(v57)
  {
    case 4:
      v58 = *((float *)v56 + 12);
      if (!v56[54])
        v58 = (float)SLODWORD(v58);
LABEL_69:
      v59 = v58 * 64.0;
      if (v59 >= 2147483650.0)
      {
        v60 = 0x7FFFFFFF;
      }
      else if (v59 <= -2147483650.0)
      {
        v60 = 0x80000000;
      }
      else
      {
        v60 = (int)v59;
      }
      break;
    case 3:
      v143 = *((float *)v56 + 12);
      if (!v56[54])
        v143 = (float)SLODWORD(v143);
      v58 = (float)((float)((float)v49 * 0.015625) * v143) / 100.0;
      goto LABEL_69;
    case 11:
      v164 = v49;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v56 + 48), (float)v49 * 0.015625);
      v166 = v165 * 64.0;
      if (v166 >= 2147483650.0)
      {
        v60 = 0x7FFFFFFF;
        v54 = v216;
      }
      else
      {
        v54 = v216;
        if (v166 <= -2147483650.0)
          v60 = 0x80000000;
        else
          v60 = (int)v166;
      }
      v49 = v164;
      break;
    default:
      v60 = 0;
      break;
  }
  v61 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  v62 = v61[60];
  switch(v62)
  {
    case 4:
      v63 = *((float *)v61 + 14);
      if (!v61[62])
        v63 = (float)SLODWORD(v63);
LABEL_75:
      v64 = v63 * 64.0;
      if (v64 >= 2147483650.0)
      {
        v65 = 0x7FFFFFFF;
      }
      else if (v64 <= -2147483650.0)
      {
        v65 = 0x80000000;
      }
      else
      {
        v65 = (int)v64;
      }
      break;
    case 3:
      v144 = *((float *)v61 + 14);
      if (!v61[62])
        v144 = (float)SLODWORD(v144);
      v63 = (float)((float)((float)v49 * 0.015625) * v144) / 100.0;
      goto LABEL_75;
    case 11:
      v212 = v49;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v61 + 56), (float)v49 * 0.015625);
      v168 = v167 * 64.0;
      if (v168 >= 2147483650.0)
      {
        v65 = 0x7FFFFFFF;
        v54 = v216;
      }
      else
      {
        v54 = v216;
        if (v168 <= -2147483650.0)
          v65 = 0x80000000;
        else
          v65 = (int)v168;
      }
      v49 = v212;
      break;
    default:
      v65 = 0;
      break;
  }
  v66 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  v67 = v66[68];
  if (v67 == 4)
  {
    v68 = *((float *)v66 + 16);
    if (!v66[70])
      v68 = (float)SLODWORD(v68);
LABEL_81:
    v69 = v68 * 64.0;
    if (v69 < 2147483650.0)
    {
      v70 = v213;
      if (v69 > -2147483650.0)
      {
LABEL_83:
        v71 = (int)v69;
        goto LABEL_84;
      }
      goto LABEL_332;
    }
    v71 = 0x7FFFFFFF;
LABEL_291:
    v70 = v213;
    goto LABEL_84;
  }
  if (v67 == 3)
  {
    v145 = *((float *)v66 + 16);
    if (!v66[70])
      v145 = (float)SLODWORD(v145);
    v68 = (float)((float)((float)v49 * 0.015625) * v145) / 100.0;
    goto LABEL_81;
  }
  if (v67 != 11)
  {
    v71 = 0;
    goto LABEL_291;
  }
  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v66 + 64), (float)v49 * 0.015625);
  v69 = v169 * 64.0;
  if (v69 < 2147483650.0)
  {
    v70 = v213;
    v54 = v216;
    if (v69 > -2147483650.0)
      goto LABEL_83;
LABEL_332:
    v71 = 0x80000000;
    goto LABEL_84;
  }
  v71 = 0x7FFFFFFF;
  v70 = v213;
  v54 = v216;
LABEL_84:
  v72 = v70 + v71;
  if (__OFADD__(v70, v71))
    v72 = (v70 >> 31) + 0x7FFFFFFF;
  v73 = v54 + v55;
  if (__OFADD__(v54, v55))
    v73 = (v54 >> 31) + 0x7FFFFFFF;
  v74 = v71 + v60;
  if (__OFADD__(v71, v60))
    v74 = (v71 >> 31) + 0x7FFFFFFF;
  v75 = v55 + v65;
  if (__OFADD__(v55, v65))
    v75 = (v55 >> 31) + 0x7FFFFFFF;
  v76 = v46 - v74;
  if (__OFSUB__((_DWORD)v46, v74))
    v76 = (v46 >> 31) + 0x7FFFFFFF;
  v43 = __OFSUB__(HIDWORD(v46), v75);
  v77 = HIDWORD(v46) - v75;
  if (v43)
    v77 = (HIDWORD(v46) >> 31) + 0x7FFFFFFF;
  v219 = (float)v72 * 0.015625;
  v220 = (float)v73 * 0.015625;
  v221 = v219 + (float)((float)v76 * 0.015625);
  v222 = v220;
  v223 = v221;
  v224 = v220 + (float)((float)v77 * 0.015625);
  v225 = v219;
  v226 = v224;
  WebCore::RenderObject::localToContainerQuad(v7, &v219, v9, 0, &v227);
  v78 = *(float *)&v227;
  v79 = v228;
  if (v230 >= v228)
    v80 = v228;
  else
    v80 = v230;
  if (*((float *)&v227 + 2) >= *(float *)&v227)
    v81 = *(float *)&v227;
  else
    v81 = *((float *)&v227 + 2);
  if (v80 >= v81)
    v82 = v81;
  else
    v82 = v80;
  v83 = fabsf(v82);
  if (v83 == INFINITY || v83 > 2147500000.0)
    v82 = (float)((SLODWORD(v82) >> 31) ^ 0x7FFFFFFF);
  if (v231 >= v229)
    v84 = v229;
  else
    v84 = v231;
  if (*((float *)&v227 + 3) >= *((float *)&v227 + 1))
    v85 = *((float *)&v227 + 1);
  else
    v85 = *((float *)&v227 + 3);
  if (v84 >= v85)
    v86 = v85;
  else
    v86 = v84;
  v87 = fabsf(v86);
  if (v87 == INFINITY || v87 > 2147500000.0)
    v86 = (float)((SLODWORD(v86) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v227 < *((float *)&v227 + 2))
    v78 = *((float *)&v227 + 2);
  if (v228 < v230)
    v79 = v230;
  if (v78 < v79)
    v78 = v79;
  v88 = fabsf(v78);
  if (v88 == INFINITY || v88 > 2147500000.0)
    v78 = (float)((SLODWORD(v78) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v227 + 1) >= *((float *)&v227 + 3))
    v89 = *((float *)&v227 + 1);
  else
    v89 = *((float *)&v227 + 3);
  if (v229 >= v231)
    v90 = v229;
  else
    v90 = v231;
  if (v89 < v90)
    v89 = v90;
  v91 = fabsf(v89);
  if (v91 == INFINITY || v91 > 2147500000.0)
    v89 = (float)((SLODWORD(v89) >> 31) ^ 0x7FFFFFFF);
  v92 = v78 - v82;
  v93 = v89 - v86;
  if (v8)
  {
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1016))(v9);
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 944))(v9);
    v96 = v94 + v95;
    if (__OFADD__(v94, v95))
      v96 = (v94 >> 31) + 0x7FFFFFFF;
    v97 = (float)v96 * 0.015625;
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1000))(v9);
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 928))(v9);
    v100 = v98 + v99;
    if (__OFADD__(v98, v99))
      v100 = (v98 >> 31) + 0x7FFFFFFF;
    v82 = v82 - v97;
    v86 = v86 + (float)((float)v100 * -0.015625);
    if (!v47)
    {
      v182 = (_QWORD *)v8[33];
      if (v182)
      {
        v183 = (*(uint64_t (**)(_QWORD))(*v182 + 416))(v8[33]);
        v184 = v182[4];
        v82 = v82 + (float)(v184 + v183);
        v86 = v86 + (float)(int)(((v184 & 0xFFFFFFFF00000000) + v183) >> 32);
      }
    }
  }
  *((float *)a2 + 13) = v82;
  *((float *)a2 + 14) = v86;
  *((float *)a2 + 15) = v92;
  *((float *)a2 + 16) = v93;
  v103 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)v5 + 1176))(v5);
  v104 = *((_QWORD *)v5 + 4);
  if (v104)
  {
    v105 = *(_QWORD *)(v104 + 8);
    if (v105 && (*(_BYTE *)(v105 + 45) & 4) != 0)
    {
      v106 = *(_DWORD *)(v105 + 16);
      *(_DWORD *)(v105 + 16) = v106 + 1;
      v107 = (unsigned __int16)*(_DWORD *)(v105 + 124) >> 13;
      if (v107 <= 5 && ((1 << v107) & 0x2A) != 0)
      {
        if ((*(_BYTE *)(v105 + 21) & 0x10) != 0)
        {
          v209 = *(_DWORD *)(v105 + 160);
          v210 = v103 + v101;
          if (__OFADD__((_DWORD)v103, v101))
            v210 = (v103 >> 31) + 0x7FFFFFFF;
          v43 = __OFSUB__(v209, v210);
          v211 = v209 - v210;
          if (v43)
            v211 = (v209 >> 31) + 0x7FFFFFFF;
          v103 = v103 & 0xFFFFFFFF00000000 | v211;
        }
        else
        {
          v206 = *(_DWORD *)(v105 + 164);
          v207 = HIDWORD(v103) + v102;
          if (__OFADD__(HIDWORD(v103), v102))
            v207 = (HIDWORD(v103) >> 31) + 0x7FFFFFFF;
          v43 = __OFSUB__(v206, v207);
          v208 = v206 - v207;
          if (v43)
            v208 = (v206 >> 31) + 0x7FFFFFFF;
          v103 = v103 | ((unint64_t)v208 << 32);
        }
      }
      if (v106 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x196399920);
      }
      *(_DWORD *)(v105 + 16) = v106;
    }
  }
  else
  {
    v105 = 0;
  }
  v219 = (float)(int)v103 * 0.015625;
  v220 = (float)SHIDWORD(v103) * 0.015625;
  v221 = (float)((float)v101 * 0.015625) + v219;
  v222 = v220;
  v223 = v221;
  v224 = (float)((float)v102 * 0.015625) + v220;
  v225 = v219;
  v226 = v224;
  result = (uint64_t)WebCore::RenderObject::localToContainerQuad(v105, &v219, v9, 0, &v227);
  v109 = *(float *)&v227;
  v110 = v228;
  if (v230 >= v228)
    v111 = v228;
  else
    v111 = v230;
  if (*((float *)&v227 + 2) >= *(float *)&v227)
    v112 = *(float *)&v227;
  else
    v112 = *((float *)&v227 + 2);
  if (v111 >= v112)
    v113 = v112;
  else
    v113 = v111;
  v114 = fabsf(v113);
  if (v114 == INFINITY || v114 > 2147500000.0)
    v113 = (float)((SLODWORD(v113) >> 31) ^ 0x7FFFFFFF);
  if (v231 >= v229)
    v115 = v229;
  else
    v115 = v231;
  if (*((float *)&v227 + 3) >= *((float *)&v227 + 1))
    v116 = *((float *)&v227 + 1);
  else
    v116 = *((float *)&v227 + 3);
  if (v115 >= v116)
    v117 = v116;
  else
    v117 = v115;
  v118 = fabsf(v117);
  if (v118 == INFINITY || v118 > 2147500000.0)
    v117 = (float)((SLODWORD(v117) >> 31) ^ 0x7FFFFFFF);
  if (*(float *)&v227 < *((float *)&v227 + 2))
    v109 = *((float *)&v227 + 2);
  if (v228 < v230)
    v110 = v230;
  if (v109 < v110)
    v109 = v110;
  v119 = fabsf(v109);
  if (v119 == INFINITY || v119 > 2147500000.0)
    v109 = (float)((SLODWORD(v109) >> 31) ^ 0x7FFFFFFF);
  if (*((float *)&v227 + 1) >= *((float *)&v227 + 3))
    v120 = *((float *)&v227 + 1);
  else
    v120 = *((float *)&v227 + 3);
  if (v229 >= v231)
    v121 = v229;
  else
    v121 = v231;
  if (v120 < v121)
    v120 = v121;
  v122 = fabsf(v120);
  if (v122 == INFINITY || v122 > 2147500000.0)
    v120 = (float)((SLODWORD(v120) >> 31) ^ 0x7FFFFFFF);
  v123 = v109 - v113;
  v124 = v120 - v117;
  if (v8)
  {
    v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1016))(v9);
    v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 944))(v9);
    v127 = v125 + v126;
    if (__OFADD__(v125, v126))
      v127 = (v125 >> 31) + 0x7FFFFFFF;
    v128 = (float)v127;
    v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1000))(v9);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 928))(v9);
    v130 = v129 + result;
    if (__OFADD__(v129, (_DWORD)result))
      v130 = (v129 >> 31) + 0x7FFFFFFF;
    v131 = (float)v130 * 0.015625;
    v132 = *((_QWORD *)v5 + 4);
    if (v132)
      v132 = *(_QWORD *)(v132 + 8);
    v113 = v113 - (float)(v128 * 0.015625);
    v117 = v117 - v131;
    if (v9 != v132)
    {
      v189 = (_QWORD *)v8[33];
      if (v189)
      {
        result = (*(uint64_t (**)(_QWORD))(*v189 + 416))(v8[33]);
        v190 = v189[4];
        v113 = v113 + (float)(v190 + result);
        v117 = v117 + (float)(int)(((v190 & 0xFFFFFFFF00000000) + result) >> 32);
      }
    }
  }
  *((float *)a2 + 17) = v113;
  *((float *)a2 + 18) = v117;
  *((float *)a2 + 19) = v123;
  *((float *)a2 + 20) = v124;
  v133 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  v134 = v133[36];
  if (v133[36])
  {
    v152 = *((float *)v215 + 2) * 64.0;
    if (v152 >= 2147483650.0)
    {
      v153 = 0x7FFFFFFF;
    }
    else if (v152 <= -2147483650.0)
    {
      v153 = 0x80000000;
    }
    else
    {
      v153 = (int)v152;
    }
    if (v134 == 4)
    {
      v154 = *((float *)v133 + 8);
      if (!v133[38])
        v154 = (float)SLODWORD(v154);
      goto LABEL_262;
    }
    v156 = 0;
    if (v133[36] > 8u)
    {
      if (v134 == 11)
      {
        result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v133 + 32), (float)v153 * 0.015625);
LABEL_262:
        v155 = v154 * 64.0;
        if (v155 >= 2147483650.0)
        {
          v156 = 0x7FFFFFFF;
        }
        else if (v155 <= -2147483650.0)
        {
          v156 = 0x80000000;
        }
        else
        {
          v156 = (int)v155;
        }
        goto LABEL_265;
      }
      if (v134 == 9)
        goto LABEL_404;
    }
    else
    {
      if (v134 == 3)
      {
        v160 = *((float *)v133 + 8);
        if (!v133[38])
          v160 = (float)SLODWORD(v160);
        v154 = (float)((float)((float)v153 * 0.015625) * v160) / 100.0;
        goto LABEL_262;
      }
      if (v134 == 1)
LABEL_404:
        v156 = v153;
    }
LABEL_265:
    *((float *)a2 + 5) = (float)v156 * 0.015625;
    *((_DWORD *)a2 + 4) |= 1u;
    v133 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  }
  if (v133[20])
  {
    v185 = *((float *)v215 + 2) * 64.0;
    if (v185 >= 2147483650.0)
    {
      v186 = 0x7FFFFFFF;
    }
    else if (v185 <= -2147483650.0)
    {
      v186 = 0x80000000;
    }
    else
    {
      v186 = (int)v185;
    }
    result = WebCore::valueForLength(v133 + 16, v186);
    *((float *)a2 + 6) = (float)(int)result * 0.015625;
    *((_DWORD *)a2 + 4) |= 2u;
    v133 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  }
  v135 = v133[12];
  if (v133[12])
  {
    v136 = *((float *)v215 + 3) * 64.0;
    if (v136 >= 2147483650.0)
    {
      v137 = 0x7FFFFFFF;
    }
    else if (v136 <= -2147483650.0)
    {
      v137 = 0x80000000;
    }
    else
    {
      v137 = (int)v136;
    }
    if (v135 == 4)
    {
      v138 = *((float *)v133 + 2);
      if (!v133[14])
        v138 = (float)SLODWORD(v138);
      goto LABEL_208;
    }
    v140 = 0;
    if (v133[12] > 8u)
    {
      if (v135 == 11)
      {
        result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v133 + 8), (float)v137 * 0.015625);
LABEL_208:
        v139 = v138 * 64.0;
        if (v139 >= 2147483650.0)
        {
          v140 = 0x7FFFFFFF;
        }
        else if (v139 <= -2147483650.0)
        {
          v140 = 0x80000000;
        }
        else
        {
          v140 = (int)v139;
        }
        goto LABEL_211;
      }
      if (v135 == 9)
        goto LABEL_380;
    }
    else
    {
      if (v135 == 3)
      {
        v141 = *((float *)v133 + 2);
        if (!v133[14])
          v141 = (float)SLODWORD(v141);
        v138 = (float)((float)((float)v137 * 0.015625) * v141) / 100.0;
        goto LABEL_208;
      }
      if (v135 == 1)
LABEL_380:
        v140 = v137;
    }
LABEL_211:
    *((float *)a2 + 7) = (float)v140 * 0.015625;
    *((_DWORD *)a2 + 4) |= 4u;
    v133 = *(unsigned __int8 **)(*((_QWORD *)v5 + 11) + 24);
  }
  if (v133[28])
  {
    v187 = *((float *)v215 + 3) * 64.0;
    if (v187 >= 2147483650.0)
    {
      v188 = 0x7FFFFFFF;
    }
    else if (v187 <= -2147483650.0)
    {
      v188 = 0x80000000;
    }
    else
    {
      v188 = (int)v187;
    }
    result = WebCore::valueForLength(v133 + 24, v188);
    *((float *)a2 + 8) = (float)(int)result * 0.015625;
    *((_DWORD *)a2 + 4) |= 8u;
  }
  return result;
}

void WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(WebCore::RenderBoxModelObject *this, double a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  signed int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __int128 v28;

  if ((*((_BYTE *)this + 21) & 0x80) != 0 && (v3 = *(_QWORD **)(*((_QWORD *)this + 18) + 40)) != 0)
  {
    while (1)
    {
      v4 = v3[4];
      if ((*(_BYTE *)(v4 + 22) & 1) != 0)
      {
        v5 = (*(_BYTE *)(v4 + 45) & 2) != 0
           ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 96)
           : *(_QWORD *)(v4 + 96);
        v6 = v5 & 0x1C00;
        if (v6 != 2048)
        {
          if (v6)
            break;
        }
      }
      v3 = (_QWORD *)v3[5];
      if (!v3)
        goto LABEL_25;
    }
    if ((*(_BYTE *)(v4 + 45) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19639A354);
    }
    *(_QWORD *)&v28 = 0;
    v7 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 1416))(v4, &v28, 0, 0, 0);
    v9 = v8;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 952))(v4);
    if (__OFADD__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v12 = v10 + v11;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 928))(v4);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 936))(v4);
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    v16 = v9 - v12;
    if (__OFSUB__((_DWORD)v9, v12))
      v16 = (v9 >> 31) + 0x7FFFFFFF;
    v17 = __OFSUB__(HIDWORD(v9), v15);
    v18 = HIDWORD(v9) - v15;
    if (v17)
      v18 = (HIDWORD(v9) >> 31) + 0x7FFFFFFF;
    v20 = (float)(int)v7 * 0.015625;
    v21 = (float)SHIDWORD(v7) * 0.015625;
    v22 = v20 + (float)((float)v16 * 0.015625);
    v23 = v21;
    v24 = v22;
    v25 = v21 + (float)((float)v18 * 0.015625);
    v26 = v20;
    v27 = v25;
    WebCore::RenderObject::localToContainerQuad(v4, &v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944), 2u, &v28);
    v19 = v3[33];
    if (v19)
      (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 416))(v3[33]);
  }
  else
  {
LABEL_25:
    WebCore::LocalFrameView::rectForFixedPositionLayout(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)+ 8)+ 1944)+ 248), a2);
  }
}

unint64_t WebCore::RenderBoxModelObject::offsetLeft(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;

  v2 = 0;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v2);
}

unint64_t WebCore::RenderBoxModelObject::offsetTop(WebCore::RenderBoxModelObject *this)
{
  uint64_t v2;

  v2 = 0;
  return WebCore::RenderBoxModelObject::adjustedPositionRelativeToOffsetParent(this, (const WebCore::LayoutPoint *)&v2) >> 32;
}

uint64_t WebCore::RenderBoxModelObject::paintMaskForTextFillBox(WebCore::RenderBoxModelObject *this, WebCore::ImageBuffer *a2, const WebCore::FloatRect *a3, const WebCore::InlineIterator::InlineBoxIterator *a4, const WebCore::LayoutRect *a5)
{
  uint64_t v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  float v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t result;
  unsigned int v29;
  unsigned int v30;
  _BOOL8 v31;
  float v32;
  float v33;
  double v34;
  int v35;
  double v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _BOOL8 v40;
  _BOOL8 v41;
  uint64_t v42;
  const WebCore::LayoutIntegration::InlineContent *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  const WebCore::LegacyInlineTextBox *v49;
  WTF::StringImpl *v50;
  WebCore::LegacyInlineBox *v51[20];
  _BYTE v52[16];
  int v53;
  uint64_t v54[2];
  int v55;
  unint64_t v56;
  _DWORD v57[4];
  __int16 v58;
  int v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v9 = (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)v9 + 648))(v9, -*(float *)a3, -*((float *)a3 + 1));
  v10 = *(float *)a3 * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  v13 = *((float *)a3 + 1) * 64.0;
  if (v13 > -2147483650.0)
    v14 = (int)v13;
  else
    v14 = 0x80000000;
  if (v13 >= 2147483650.0)
    v14 = 0x7FFFFFFF;
  v57[0] = v12;
  v57[1] = v14;
  v15 = *((float *)a3 + 3);
  v16 = *((float *)a3 + 2) * 64.0;
  if (v16 > -2147483650.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147483650.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v57[2] = v18;
  v19 = v15 * 64.0;
  if (v19 >= 2147483650.0)
  {
    v20 = 0x7FFFFFFF;
  }
  else if (v19 <= -2147483650.0)
  {
    v20 = 0x80000000;
  }
  else
  {
    v20 = (int)v19;
  }
  v57[3] = v20;
  v58 = 512;
  v59 = 4;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = v9;
  if ((WebCore::InlineIterator::BoxIterator::atEnd(a4) & 1) != 0)
  {
    v21 = 0;
    if (this)
    {
      v22 = 0;
      if ((*((_BYTE *)this + 45) & 4) != 0)
      {
        v21 = *((_DWORD *)this + 38);
        v22 = *((_DWORD *)this + 39);
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = *((_DWORD *)a5 + 1);
    v24 = __OFSUB__(*(_DWORD *)a5, v21);
    LODWORD(v25) = *(_DWORD *)a5 - v21;
    if (v24)
      v25 = ((*(_DWORD *)a5 >> 31) + 0x7FFFFFFF);
    else
      v25 = v25;
    v24 = __OFSUB__(v23, v22);
    LODWORD(v26) = v23 - v22;
    v27 = (v23 >> 31) + 0x7FFFFFFF;
    if (v24)
      v26 = v27;
    else
      v26 = v26;
    v51[0] = (WebCore::LegacyInlineBox *)(v25 | (v26 << 32));
    return (*(uint64_t (**)(WebCore::RenderBoxModelObject *, _DWORD *, WebCore::LegacyInlineBox **))(*(_QWORD *)this + 680))(this, v57, v51);
  }
  else
  {
    v30 = *(_DWORD *)a5;
    v29 = *((_DWORD *)a5 + 1);
    v31 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a4);
    WebCore::InlineIterator::Box::visualRectIgnoringBlockDirection((WebCore::InlineIterator::Box *)v31);
    v34 = v33 * 64.0;
    if (v34 >= 2147483650.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v34 <= -2147483650.0)
    {
      v35 = 0x80000000;
    }
    else
    {
      v35 = (int)v34;
    }
    v36 = v32 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
    v24 = __OFSUB__(v30, v35);
    v38 = v30 - v35;
    if (v24)
      v38 = (v30 >> 31) + 0x7FFFFFFF;
    v24 = __OFSUB__(v29, v37);
    v39 = v29 - v37;
    if (v24)
      v39 = (v29 >> 31) + 0x7FFFFFFF;
    v56 = v38 | (unint64_t)(v39 << 32);
    v40 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a4);
    WebCore::InlineIterator::InlineBox::firstLeafBox(v54, (WebCore::InlineIterator::InlineBox *)v40);
    v41 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)a4);
    WebCore::InlineIterator::InlineBox::endLeafBox((WebCore::InlineIterator::InlineBox *)v41, (uint64_t)v52);
    for (result = WebCore::InlineIterator::BoxIterator::operator==((uint64_t)v54, (WebCore::InlineIterator::BoxIterator *)v52);
          (result & 1) == 0;
          result = WebCore::InlineIterator::BoxIterator::operator==((uint64_t)v54, (WebCore::InlineIterator::BoxIterator *)v52))
    {
      if (WebCore::InlineIterator::Box::isText((WebCore::InlineIterator::Box *)v54))
      {
        if (v55 == 1 && (v49 = (const WebCore::LegacyInlineTextBox *)v54[0]) != 0)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54[0] + 80))(v54[0]) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19639A7A8);
          }
          WebCore::LegacyTextBoxPainter::LegacyTextBoxPainter(v51, v49, (WebCore::PaintInfo *)v57, (const WebCore::LayoutPoint *)&v56);
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::paint((uint64_t)v51);
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxLegacyPath>::~TextBoxPainter((uint64_t)v51, v50);
        }
        else
        {
          v42 = *(_QWORD *)WebCore::InlineIterator::Box::modernPath((uint64_t)v54);
          if (v42)
            v43 = *(const WebCore::LayoutIntegration::InlineContent **)(v42 + 8);
          else
            v43 = 0;
          v44 = (_QWORD *)WebCore::InlineIterator::Box::modernPath((uint64_t)v54);
          v45 = v44[1];
          v46 = *(_QWORD *)(*v44 + 8);
          if (v45 >= *(unsigned int *)(v46 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x19639A7C0);
          }
          WebCore::ModernTextBoxPainter::ModernTextBoxPainter((WebCore::ModernTextBoxPainter *)v51, v43, (const WebCore::InlineDisplay::Box *)(*(_QWORD *)(v46 + 48) + 80 * v45), (WebCore::PaintInfo *)v57, (const WebCore::LayoutPoint *)&v56);
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paint((uint64_t)v51, v47);
          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::~TextBoxPainter((uint64_t)v51, v48);
        }
      }
      WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine((WebCore::InlineIterator::LeafBoxIterator *)v54);
    }
    if (v53 != -1)
      result = ((uint64_t (*)(WebCore::LegacyInlineBox **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v53])(v51, v52);
    if (v55 != -1)
      return ((uint64_t (*)(WebCore::LegacyInlineBox **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_4[v55])(v51, v54);
  }
  return result;
}

unint64_t WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  float v8;
  float v9;
  void *v10;
  double v11;
  int v12;
  double v13;
  int v14;
  int v15;
  int v16;
  float v17;
  double v18;
  int v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v25;
  int v26;
  double v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unsigned int v40;
  double v41;
  void *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD v46[2];
  unsigned int v47[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2) & 1) == 0)
  {
    LODWORD(v21) = *a3;
    v23 = a3[1];
    return v21 | (unint64_t)(v23 << 32);
  }
  memset(v47, 0, 7);
  memset(v46, 0, 7);
  v45 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned int *, _DWORD *, uint64_t *))(*(_QWORD *)a2 + 136))(a2, a1, v47, v46, &v45);
  v8 = *(float *)v47;
  if (!BYTE2(v47[1]))
    v8 = (float)(int)v47[0];
  v9 = *(float *)v46;
  v10 = (void *)v46[0];
  if (!BYTE2(v46[1]))
    v9 = (float)v46[0];
  v11 = v8 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  v13 = v9 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v15 = (v12 > 0) << 6;
    v14 = 0x7FFFFFFF;
  }
  else
  {
    if (v13 <= -2147483650.0)
    {
      v16 = 0;
      v15 = (v12 > 0) << 6;
      v14 = 0x80000000;
      goto LABEL_13;
    }
    v14 = (int)v13;
    v15 = (v12 > 0) << 6;
    if ((int)v13 < 1)
    {
      v16 = 0;
      goto LABEL_13;
    }
  }
  v16 = 64;
LABEL_13:
  if (a4)
  {
    v17 = *(float *)(*(_QWORD *)(a1 + 104) + 184);
    v18 = (float)((float)((float)v12 * 0.015625) * v17) * 64.0;
    if (v18 > -2147483650.0)
      v19 = (int)v18;
    else
      v19 = 0x80000000;
    if (v18 < 2147483650.0)
      v12 = v19;
    else
      v12 = 0x7FFFFFFF;
    v20 = (float)((float)((float)v14 * 0.015625) * v17) * 64.0;
    if (v20 >= 2147483650.0)
    {
      v14 = 0x7FFFFFFF;
    }
    else if (v20 <= -2147483650.0)
    {
      v14 = 0x80000000;
    }
    else
    {
      v14 = (int)v20;
    }
  }
  if (v12 < v15)
    v21 = v15;
  else
    v21 = v12;
  if (v14 < v16)
    v22 = v16;
  else
    v22 = v14;
  if ((int)v21 < 1 || (int)v22 <= 0)
  {
    if ((int)v21 > 0 || (int)v22 >= 1)
    {
      v39 = *(float *)&v45 * 64.0;
      if (v39 >= 2147483650.0)
      {
        v40 = 0x7FFFFFFF;
      }
      else if (v39 <= -2147483650.0)
      {
        v40 = 0x80000000;
      }
      else
      {
        v40 = (int)v39;
      }
      v41 = *((float *)&v45 + 1) * 64.0;
      if (v41 >= 2147483650.0)
      {
        v42 = (void *)v46[0];
        v43 = 0x7FFFFFFF;
      }
      else
      {
        v42 = (void *)v46[0];
        if (v41 <= -2147483650.0)
          v43 = 0x80000000;
        else
          v43 = (int)v41;
      }
      v44 = WebCore::resolveAgainstIntrinsicWidthOrHeightAndRatio(*a3, a3[1], v40, v43, v21, v22);
      v23 = HIDWORD(v44);
      LODWORD(v21) = v44;
      v10 = v42;
    }
    else if (*(float *)&v45 <= 0.0 || *((float *)&v45 + 1) <= 0.0)
    {
      LODWORD(v21) = *a3;
      v23 = a3[1];
    }
    else
    {
      v25 = *(float *)&v45 * 64.0;
      if (v25 >= 2147483650.0)
      {
        v26 = 0x7FFFFFFF;
      }
      else if (v25 <= -2147483650.0)
      {
        v26 = 0x80000000;
      }
      else
      {
        v26 = (int)v25;
      }
      v27 = *((float *)&v45 + 1) * 64.0;
      if (v27 >= 2147483650.0)
      {
        v28 = 0x7FFFFFFF;
      }
      else if (v27 <= -2147483650.0)
      {
        v28 = 0x80000000;
      }
      else
      {
        v28 = (int)v27;
      }
      LODWORD(v21) = *a3;
      v29 = a3[1];
      v30 = v26;
      v31 = (int)v29 * (uint64_t)v26 / 64;
      v32 = ((v29 ^ v26) >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v31) == (int)v31 >> 31)
        v32 = v31;
      v33 = ((uint64_t)v32 << 6) / v28;
      if (v33 <= (uint64_t)0xFFFFFFFF80000000)
        v33 = 0xFFFFFFFF80000000;
      if (v33 >= 0x7FFFFFFF)
        v33 = 0x7FFFFFFFLL;
      v34 = *a3 * (uint64_t)v28 / 64;
      v35 = ((v21 ^ v28) >> 31) + 0x7FFFFFFF;
      if (HIDWORD(v34) == (int)v34 >> 31)
        v35 = v34;
      v36 = ((uint64_t)v35 << 6) / v30;
      if (v36 <= (uint64_t)0xFFFFFFFF80000000)
        v36 = 0xFFFFFFFF80000000;
      if (v36 >= 0x7FFFFFFF)
        v23 = 0x7FFFFFFFLL;
      else
        v23 = v36;
      if ((int)v21 >= (int)v33)
      {
        if ((int)v29 >= (int)v23)
        {
          v37 = v33 * (int)v29 / 64;
          if (HIDWORD(v37) != (int)v37 >> 31)
            LODWORD(v37) = ((v29 ^ v33) >> 31) + 0x7FFFFFFF;
          v38 = v23 * (int)v21 / 64;
          if (HIDWORD(v38) != (int)v38 >> 31)
            LODWORD(v38) = ((v21 ^ v23) >> 31) + 0x7FFFFFFF;
          if ((int)v37 < (int)v38)
          {
            v23 = v23;
          }
          else
          {
            LODWORD(v21) = v33;
            v23 = v29;
          }
        }
        else
        {
          LODWORD(v21) = v33;
          v23 = v29;
        }
      }
    }
  }
  else
  {
    v23 = v22;
  }
  if (LOBYTE(v46[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v10);
  }
  if (LOBYTE(v47[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47[0]);
  }
  return v21 | (unint64_t)(v23 << 32);
}

unint64_t WebCore::resolveAgainstIntrinsicWidthOrHeightAndRatio(int a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;

  if ((int)a3 < 1 || (int)a4 <= 0)
  {
    if ((_DWORD)a5)
    {
      a6 = a2;
    }
    else
    {
      LODWORD(a5) = a1;
      a6 = a6;
    }
  }
  else if ((_DWORD)a5)
  {
    v6 = ((unint64_t)a4 * a5) >> 6;
    v7 = 0x7FFFFFFF;
    if ((((unint64_t)a4 * a5) >> 32) >> 6 == (int)v6 >> 31)
      v7 = v6;
    v8 = ((uint64_t)v7 << 6) / a3;
    if (v8 <= (uint64_t)0xFFFFFFFF80000000)
      v8 = 0xFFFFFFFF80000000;
    if (v8 >= 0x7FFFFFFF)
      a6 = 0x7FFFFFFFLL;
    else
      a6 = v8;
  }
  else
  {
    v9 = ((unint64_t)a3 * a6) >> 6;
    v10 = 0x7FFFFFFF;
    if ((((unint64_t)a3 * a6) >> 32) >> 6 == (int)v9 >> 31)
      v10 = v9;
    v11 = ((uint64_t)v10 << 6) / a4;
    if (v11 <= (uint64_t)0xFFFFFFFF80000000)
      v11 = 0xFFFFFFFF80000000;
    if (v11 >= 0x7FFFFFFF)
      LODWORD(a5) = 0x7FFFFFFF;
    else
      LODWORD(a5) = v11;
  }
  return a5 | (unint64_t)(a6 << 32);
}

BOOL WebCore::RenderBoxModelObject::fixedBackgroundPaintsInLocalCoordinates(WebCore::RenderBoxModelObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  if (*(_QWORD *)(v2 + 1272) == v1
    && (v3 = *(_QWORD *)(v2 + 1944), (*(_BYTE *)(*(_QWORD *)(v3 + 248) + 1149) & 2) == 0)
    && (v4 = *(_QWORD *)(v3 + 144)) != 0
    && (v5 = *(_QWORD *)(v4 + 256)) != 0)
  {
    return *(_BYTE *)(v5 + 294) != 0;
  }
  else
  {
    return 0;
  }
}

void WebCore::RenderBoxModelObject::roundedContentBoxRect(WebCore::RenderBoxModelObject *this@<X0>, const WebCore::LayoutRect *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v10 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 992))(this);
  v12 = v11;
  v13 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 920))(this);
  if (__OFADD__((_DWORD)v10, (_DWORD)v13))
    v16 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v16 = v10 + v13;
  if (__OFADD__((_DWORD)v12, v14))
    v17 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v17 = v12 + v14;
  if (__OFADD__(HIDWORD(v12), v15))
    v18 = (HIDWORD(v12) >> 31) + 0x7FFFFFFF;
  else
    v18 = HIDWORD(v12) + v15;
  if (__OFADD__(HIDWORD(v10), HIDWORD(v13)))
    v19 = (HIDWORD(v10) >> 31) + 0x7FFFFFFF;
  else
    v19 = HIDWORD(v10) + HIDWORD(v13);
  WebCore::RenderStyle::getRoundedInnerBorderFor((uint64_t)this + 80, (int *)a2, v16, v17, v18, v19, a3, a4, a5);
}

WebCore::RenderBox *WebCore::RenderBoxModelObject::containingBlockLogicalWidthForContent(WebCore::RenderBoxModelObject *this)
{
  WebCore::RenderBox *result;

  result = WebCore::RenderObject::containingBlock(this);
  if (result)
    return (WebCore::RenderBox *)WebCore::RenderBox::contentLogicalWidth(result);
  return result;
}

uint64_t WebCore::RenderBoxModelObject::forRendererAndContinuations(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  _QWORD *i;
  uint64_t v18;
  WebCore::RenderBoxModelObject *v19;
  WebCore::RenderBoxModelObject *v20;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
    if ((*(_WORD *)(a1 + 69) & 0x10) != 0)
    {
      ++dword_1ECE91378;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      v12 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11);
      if (v12 == -1 || v12 != v6)
      {
        v14 = 1;
        do
        {
          v11 = ((_DWORD)v11 + v14) & v7;
          v15 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11);
          ++v14;
        }
        while (v15 == -1 || v15 != v6);
      }
      for (i = *(_QWORD **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v11 + 8) + 16);
            i;
            i = (_QWORD *)i[2])
      {
        if (*i && *(_QWORD *)(*i + 8))
        {
          v18 = *(_QWORD *)(a2 + 24);
          if (!v18)
            goto LABEL_21;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
        }
      }
    }
  }
  else
  {
LABEL_21:
    v19 = (WebCore::RenderBoxModelObject *)std::__throw_bad_function_call[abi:sn180100]();
    return WebCore::RenderBoxModelObject::insertIntoContinuationChainAfter(v19, v20);
  }
  return result;
}

uint64_t WebCore::RenderBoxModelObject::insertIntoContinuationChainAfter(WebCore::RenderBoxModelObject *this, WebCore::RenderBoxModelObject *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;

  v3 = WebCore::RenderBoxModelObject::ensureContinuationChainNode(a2, a2);
  result = WebCore::RenderBoxModelObject::ensureContinuationChainNode(this, v4);
  v6 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(result + 16) = v6;
  if (v6)
    *(_QWORD *)(v6 + 8) = result;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(v3 + 16) = result;
  return result;
}

uint64_t WebCore::RenderBoxModelObject::ensureContinuationChainNode(WebCore::RenderBoxModelObject *this, void *a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  WTF *v35;
  uint64_t v36;
  WTF *v38;
  _QWORD *v39;

  *(_WORD *)((char *)this + 69) |= 0x10u;
  {
    v3 = dword_1ECE91378++;
    if (v3 > *(_DWORD *)algn_1ECE9137C)
      WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t)&WebCore::continuationChainNodeMap(void)::map, a2);
  }
  else
  {
    WebCore::continuationChainNodeMap(void)::map = 0;
    *(_QWORD *)&dword_1ECE91378 = 1;
  }
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = this;
    v35 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
      {
        WTF::fastFree(v35, a2);
        v4 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v35;
      }
    }
  }
  v5 = *(_DWORD *)v4;
  *(_DWORD *)v4 += 2;
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    WTF::fastFree((WTF *)v4, a2);
  else
    *(_DWORD *)v4 = v7;
  v8 = WebCore::continuationChainNodeMap(void)::map;
  if (WebCore::continuationChainNodeMap(void)::map
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(&WebCore::continuationChainNodeMap(void)::map, 8u, 0), (v8 = WebCore::continuationChainNodeMap(void)::map) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (_QWORD *)(v8 + 16 * v17);
    v19 = *v18;
    if (*v18 != -1)
      break;
    v11 = (_QWORD *)(v8 + 16 * v17);
LABEL_16:
    v15 = i + v17;
  }
  if (!v19)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 16);
      *v11 = v4;
    }
    else
    {
      *v18 = v4;
      v11 = (_QWORD *)(v8 + 16 * v17);
    }
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v22 = *((_QWORD *)this + 1);
    if (!v22)
    {
      v22 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = this;
      v38 = (WTF *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v22;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
        {
          WTF::fastFree(v38, v20);
          v22 = *((_QWORD *)this + 1);
          if (!v22)
          {
LABEL_21:
            v21[1] = 0;
            v21[2] = 0;
            *v21 = v22;
            v23 = (WTF **)v11[1];
            v11[1] = v21;
            if (v23)
            {
              v24 = v23[2];
              if (v24)
                *((_QWORD *)v24 + 1) = v23[1];
              v25 = v23[1];
              if (v25)
                *((_QWORD *)v25 + 2) = v24;
              v26 = *v23;
              *v23 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 1)
                  WTF::fastFree(v26, v20);
                else
                  --*(_DWORD *)v26;
              }
              WTF::fastFree((WTF *)v23, v20);
            }
            if (WebCore::continuationChainNodeMap(void)::map)
              v27 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 12) + 1;
            else
              v27 = 1;
            *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 12) = v27;
            v28 = WebCore::continuationChainNodeMap(void)::map;
            if (WebCore::continuationChainNodeMap(void)::map)
              v29 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 12);
            else
              v29 = 0;
            v30 = (*(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 16) + v29);
            v31 = *(unsigned int *)(WebCore::continuationChainNodeMap(void)::map - 4);
            if (v31 > 0x400)
            {
              if (v31 <= 2 * v30)
                goto LABEL_47;
            }
            else if (3 * v31 <= 4 * v30)
            {
              if (!(_DWORD)v31)
              {
                v32 = 8;
                goto LABEL_48;
              }
LABEL_47:
              v32 = (_DWORD)v31 << (6 * *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 12) >= (2 * v31));
LABEL_48:
              v11 = (_QWORD *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(&WebCore::continuationChainNodeMap(void)::map, v32, (uint64_t)v11);
              v28 = WebCore::continuationChainNodeMap(void)::map;
              if (WebCore::continuationChainNodeMap(void)::map)
                v31 = *(unsigned int *)(WebCore::continuationChainNodeMap(void)::map - 4);
              else
                v31 = 0;
            }
            v34 = (_QWORD *)(v28 + 16 * v31);
            v18 = v11;
            goto LABEL_51;
          }
        }
        else
        {
          --*(_DWORD *)v38;
        }
      }
    }
    ++*(_DWORD *)v22;
    goto LABEL_21;
  }
  if (v19 != v4)
    goto LABEL_16;
  if ((v9 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v8 - 4);
  v34 = (_QWORD *)(v8 + 16 * v33);
  if (*(_DWORD *)v4 == 1)
    WTF::fastFree((WTF *)v4, a2);
  else
    --*(_DWORD *)v4;
LABEL_51:
  v36 = WebCore::continuationChainNodeMap(void)::map;
  if (WebCore::continuationChainNodeMap(void)::map)
    v36 = WebCore::continuationChainNodeMap(void)::map
        + 16 * *(unsigned int *)(WebCore::continuationChainNodeMap(void)::map - 4);
  if (v18 != (_QWORD *)v36)
  {
    while (!*(_QWORD *)(*v18 + 8))
    {
      v39 = v18 + 2;
      v18 = v34;
      if (v39 != v34)
      {
        v18 = v39;
        while ((unint64_t)(*v18 + 1) <= 1)
        {
          v18 += 2;
          if (v18 == v34)
          {
            v18 = v34;
            break;
          }
        }
      }
      if (v18 == (_QWORD *)v36)
      {
        v18 = (_QWORD *)v36;
        return v18[1];
      }
    }
  }
  return v18[1];
}

uint64_t WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::remove(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  if (v4 > v5)
    WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  v6 = a2[1];
  if (!v6)
    return 0;
  if (!*(_QWORD *)(v6 + 8))
    return 0;
  v7 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v8 & ((v11 >> 31) ^ v11);
  for (i = 1; ; v12 = (v14 + i++) & v8)
  {
    v14 = v12;
    v15 = *(_QWORD *)(v7 + 16 * v12);
    if (v15 != -1)
    {
      if (!v15)
        return 0;
      if (v15 == v6)
        break;
    }
  }
  if ((_DWORD)v14 == *(_DWORD *)(v7 - 4))
    return 0;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove((uint64_t *)a1, (WTF **)(v7 + 16 * v14));
  return 1;
}

uint64_t WebCore::RenderBoxModelObject::firstLetterRemainingText(WebCore::RenderBoxModelObject *this, void *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  uint64_t v14;

  if ((*(_WORD *)((_BYTE *)this + 69) & 0x40) == 0)
    return 0;
  {
    v2 = dword_1EE2F9358 + 1;
  }
  else
  {
    WebCore::firstLetterRemainingTextMap(void)::map = 0;
    *(_QWORD *)&dword_1EE2F9358 = 0;
    v2 = 1;
  }
  dword_1EE2F9358 = v2;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || !*(_QWORD *)(v3 + 8) || !WebCore::firstLetterRemainingTextMap(void)::map)
    return 0;
  v4 = *(_DWORD *)(WebCore::firstLetterRemainingTextMap(void)::map - 8);
  v5 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(_QWORD *)(WebCore::firstLetterRemainingTextMap(void)::map + 16 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == v3)
        break;
    }
  }
  v12 = *(WTF **)(WebCore::firstLetterRemainingTextMap(void)::map + 16 * v10 + 8);
  if (!v12)
    return 0;
  v13 = (*(_DWORD *)v12)++;
  v14 = *((_QWORD *)v12 + 1);
  if (v13)
    *(_DWORD *)v12 = v13;
  else
    WTF::fastFree(v12, a2);
  return v14;
}

WTF *WTF::WeakHashMap<WebCore::RenderBoxModelObject const,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBoxModelObject,WebCore::RenderTextFragment&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  void *v8;
  WTF *v9;
  int v10;
  void *v11;
  WTF *result;
  WTF *v13[3];
  WTF *v14;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderBoxModelObject const,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(a1, a2);
  WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBoxModelObject>(a2 + 1, (uint64_t)a2, (uint64_t *)v13);
  v9 = v13[0];
  v10 = (*(_DWORD *)v13[0])++;
  v14 = v9;
  v13[0] = 0;
  if (v10)
    *(_DWORD *)v9 = v10;
  else
    WTF::fastFree(v9, v8);
  WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::RenderTextFragment&>((uint64_t *)a1, &v14, a3, (uint64_t)v13);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v11);
    else
      --*(_DWORD *)result;
  }
  return result;
}

void WebCore::RenderButton::~RenderButton(WebCore::RenderButton *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  WebCore::RenderFlexibleBox::~RenderFlexibleBox(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  v3 = (WTF *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  WebCore::RenderFlexibleBox::~RenderFlexibleBox(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 52) = 0;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t WebCore::RenderButton::formControlElement(WebCore::RenderButton *this)
{
  uint64_t result;

  if ((*((_WORD *)this + 14) & 8) != 0
    && ((*(uint64_t (**)(WebCore::RenderButton *))(*(_QWORD *)this + 848))(this) & 1) != 0)
  {
    return (uint64_t)this;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderButton::canBeSelectionLeaf(WebCore::RenderButton *this)
{
  _WORD *v1;
  uint64_t result;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 8) != 0
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 848))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)
  {
    return WebCore::Node::computeEditability((uint64_t)v1, 0, 1) != 0;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderButton::hasLineIfEmpty(WebCore::RenderButton *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) != 0
    && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 848))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) != 0)
  {
    return *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderButton::setInnerRenderer(WebCore::RenderButton *this, WebCore::RenderBlock *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LayoutIntegration::LineLayout *v10;
  WebCore::LayoutIntegration::LineLayout *v11;
  const WebCore::RenderObject *v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::RenderObject *v15;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v17 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v17)
    goto LABEL_2;
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
LABEL_2:
    ++*(_DWORD *)v3;
    goto LABEL_3;
  }
  WTF::fastFree(v17, a2);
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_2;
LABEL_3:
  v4 = (WTF *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WTF::fastFree(v4, a2);
      v3 = *((_QWORD *)this + 52);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  if (v3)
    v5 = *(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  result = WebCore::RenderButton::updateAnonymousChildStyle(this, (WebCore::RenderStyle *)(v5 + 80));
  v7 = *((_QWORD *)this + 52);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 56);
      if (v9)
      {
        if ((*(_WORD *)(v9 + 12) & 0x40) != 0)
        {
          if ((*(_BYTE *)(v8 + 52) & 7) == 1 && *(_DWORD *)(v8 + 240) == 1)
          {
            v10 = *(WebCore::LayoutIntegration::LineLayout **)(v8 + 232);
            if (v10)
            {
              WebCore::LayoutIntegration::LineLayout::rootStyleWillChange(v10, (const WebCore::RenderBlockFlow *)v8, (const WebCore::RenderStyle *)(v8 + 80));
              v8 = *(_QWORD *)(*((_QWORD *)this + 52) + 8);
            }
          }
          v11 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v8, (WebCore::RenderObject *)v8);
          if (v11)
            WebCore::LayoutIntegration::LineLayout::styleWillChange(v11, *(const WebCore::RenderElement **)(*((_QWORD *)this + 52) + 8), (const WebCore::RenderStyle *)(*(_QWORD *)(*((_QWORD *)this + 52) + 8) + 80));
          WebCore::LayoutIntegration::BoxTree::updateStyle(*(WebCore::LayoutIntegration::BoxTree **)(*((_QWORD *)this + 52) + 8), v12);
          v13 = *((_QWORD *)this + 52);
          if (v13)
            v14 = *(_QWORD *)(v13 + 8);
          else
            v14 = 0;
          result = WebCore::RenderChildIteratorAdapter<WebCore::RenderText>::begin(v14);
          v18 = result;
          v19 = (uint64_t)v15;
          if (v15)
          {
            result = (uint64_t)v15;
            do
            {
              WebCore::LayoutIntegration::BoxTree::updateStyle((WebCore::LayoutIntegration::BoxTree *)result, v15);
              WebCore::RenderChildIterator<WebCore::RenderText>::operator++((uint64_t)&v18);
              result = v19;
            }
            while (v19);
          }
        }
        else
        {
          result = 105;
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderButton::updateAnonymousChildStyle(WebCore::RenderButton *this, WebCore::RenderStyle *a2)
{
  unsigned int v5[2];

  WebCore::RenderStyle::setFlexGrow(a2, 1.0);
  if ((*((_BYTE *)this + 21) & 0x10) != 0)
  {
    v5[0] = 0;
    LOWORD(v5[1]) = 4;
    BYTE2(v5[1]) = 0;
    WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)v5);
    if (LOBYTE(v5[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[0]);
    }
    memset(v5, 0, 7);
    WebCore::RenderStyle::setMarginLeft((uint64_t)a2, (WebCore::Length *)v5);
    if (LOBYTE(v5[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[0]);
    }
    memset(v5, 0, 7);
    WebCore::RenderStyle::setMarginRight((uint64_t)a2, (WebCore::Length *)v5);
  }
  else
  {
    v5[0] = 0;
    LOWORD(v5[1]) = 4;
    BYTE2(v5[1]) = 0;
    WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)v5);
    if (LOBYTE(v5[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[0]);
    }
    memset(v5, 0, 7);
    WebCore::RenderStyle::setMarginTop((uint64_t)a2, (WebCore::Length *)v5);
    if (LOBYTE(v5[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[0]);
    }
    memset(v5, 0, 7);
    WebCore::RenderStyle::setMarginBottom((uint64_t)a2, (WebCore::Length *)v5);
  }
  if (LOBYTE(v5[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[0]);
  }
  WebCore::RenderStyle::setFlexDirection((uint64_t)a2, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 3);
  WebCore::RenderStyle::setJustifyContent(a2, (const WebCore::StyleContentAlignmentData *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 122));
  WebCore::RenderStyle::setFlexWrap((uint64_t)a2, (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) >> 2) & 3);
  WebCore::RenderStyle::setAlignItems((uint64_t)a2, (_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 124));
  return WebCore::RenderStyle::setAlignContent(a2, (const WebCore::StyleContentAlignmentData *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 120));
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderText>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v3;

  v1 = *(unsigned int *)(result + 64);
  if (v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v3 + 8))
    {
      if ((*(_BYTE *)(i + 45) & 2) != 0)
        break;
      v3 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v3)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildIterator<WebCore::RenderText>::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while ((*(_BYTE *)(v1 + 45) & 2) == 0)
    {
      v3 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v3)
        goto LABEL_3;
      v2 = 0;
      v1 = *(_QWORD *)(v3 + 8);
      if (!v1)
        goto LABEL_4;
    }
    v2 = v1;
  }
  else
  {
LABEL_3:
    v2 = 0;
  }
LABEL_4:
  *(_QWORD *)(result + 8) = v2;
  return result;
}

uint64_t WebCore::RenderButton::updateFromElement(WebCore::RenderButton *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::SVGTextLayoutAttributes **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 848))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)),
        (result & 1) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x19639BF8CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v1 + 24) += 2;
    WebCore::HTMLInputElement::valueWithDefault((WebCore::HTMLInputElement *)v1, &v9);
    WebCore::RenderButton::setText(this, &v9, v4, v5, v6, v7);
    result = (uint64_t)v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v1, v8);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::RenderButton::setText(WebCore::RenderButton *this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v8;
  const WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::SVGTextLayoutAttributes **v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  WTF::StringImpl *v28[18];
  unint64_t v29;

  v8 = *((_QWORD *)this + 51);
  if (!v8 || (v9 = *(const WTF::StringImpl ***)(v8 + 8)) == 0)
  {
    v10 = *a2;
    if (!*a2 || !*((_DWORD *)v10 + 1))
      return;
    if (v8)
    {
      v9 = *(const WTF::StringImpl ***)(v8 + 8);
      if (v9)
        goto LABEL_10;
    }
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    v18 = bmalloc::api::isoAllocate();
    v19 = WebCore::RenderText::RenderText(v18, 46, v17, (uint64_t *)a2);
    *(_QWORD *)v19 = off_1E3436F38;
    *(_DWORD *)(v19 + 120) = 0;
    v21 = (uint64_t)*a2;
    if (*a2)
      LODWORD(v21) = *(_DWORD *)(v21 + 4);
    *(_DWORD *)(v18 + 124) = v21;
    *(_QWORD *)(v18 + 128) = 0;
    v22 = *a2;
    if (*a2)
      *(_DWORD *)v22 += 2;
    *(_QWORD *)(v18 + 136) = v22;
    *(_QWORD *)(v18 + 144) = 0;
    v23 = *(_QWORD *)(v18 + 8);
    if (!v23)
    {
      v23 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = v18;
      v26 = *(WTF **)(v18 + 8);
      *(_QWORD *)(v18 + 8) = v23;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
        {
          WTF::fastFree(v26, v20);
          v23 = *(_QWORD *)(v18 + 8);
          if (!v23)
            goto LABEL_23;
        }
        else
        {
          --*(_DWORD *)v26;
        }
      }
    }
    ++*(_DWORD *)v23;
LABEL_23:
    v24 = (WTF *)*((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = v23;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::fastFree(v24, v20);
      else
        --*(_DWORD *)v24;
    }
    if (!WebCore::RenderTreeBuilder::s_current)
    {
      WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v28, *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)+ 1944));
      v27 = (void *)v18;
      WebCore::RenderTreeBuilder::attach((uint64_t)v28, this, (unint64_t *)&v27);
      v16 = v27;
      v27 = 0;
      if (v16)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v27, (uint64_t)v16);
LABEL_15:
      WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v28, v16);
      return;
    }
    v29 = v18;
    WebCore::RenderTreeBuilder::attach(WebCore::RenderTreeBuilder::s_current, this, &v29);
    v25 = v29;
    v29 = 0;
    if (v25)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v29, v25);
    return;
  }
  v10 = *a2;
  if (!*a2)
  {
LABEL_4:
    if (WebCore::RenderTreeBuilder::s_current)
    {
      WebCore::RenderTreeBuilder::destroy(WebCore::RenderTreeBuilder::s_current, (uint64_t)v9, 1, a4, a5, a6);
      return;
    }
    WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v28, *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944));
    WebCore::RenderTreeBuilder::destroy((uint64_t)v28, *(_QWORD *)(*((_QWORD *)this + 51) + 8), 1, v13, v14, v15);
    goto LABEL_15;
  }
LABEL_10:
  if (!*((_DWORD *)v10 + 1))
    goto LABEL_4;
  *(_DWORD *)v10 += 2;
  v28[0] = v10;
  WebCore::RenderText::setText(v9, v28, 0);
  v12 = v28[0];
  v28[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
}

BOOL WebCore::RenderButton::canHaveGeneratedChildren(WebCore::RenderButton *this)
{
  return *(_QWORD *)(*(_QWORD *)(WebCore::RenderButton::formControlElement(*(WebCore::RenderButton **)(*((_QWORD *)this + 3) + 8))
                               + 96)
                   + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
}

unint64_t WebCore::RenderButton::controlClipRect(WebCore::RenderButton *this, const WebCore::LayoutPoint *a2)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned __int16 *v5;
  uint64_t v6;
  float v7;
  double v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  float v13;
  double v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WebCore::RenderButton *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  double v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  WebCore::RenderButton *v49;
  int v50;
  int v51;
  uint64_t v52;
  float v53;
  double v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  const WebCore::LayoutPoint *v72;
  WebCore::RenderBlock *v73;
  WebCore::RenderBlock *v74;
  WebCore::RenderBlock *v75;
  WebCore::RenderBlock *v76;
  WebCore::RenderButton *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;

  v2 = *(_DWORD *)a2;
  v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v4 = v3 == 4 || v3 == 2;
  v5 = &WebCore::lookup[6508];
  if (!v4)
    goto LABEL_5;
  v72 = a2;
  v74 = this;
  v80 = *(_DWORD *)a2;
  v50 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
  v2 = v80;
  v51 = v50;
  a2 = v72;
  this = v74;
  if (v51)
  {
    v52 = *(_QWORD *)(*((_QWORD *)v74 + 11) + 24);
    v53 = 0.0;
    if ((*(_BYTE *)(v52 + 124) & 0xE) != 0)
    {
      v69 = *(_QWORD *)(v52 + 200);
      if (*(_BYTE *)(v69 + 5) && *(_BYTE *)(v69 + 76) == 4)
      {
        if (*(_BYTE *)(v69 + 78))
          v53 = *(float *)(v69 + 72);
        else
          v53 = (float)*(int *)(v69 + 72);
      }
      else
      {
        v53 = *(float *)(v52 + 120);
      }
    }
    v54 = v53 * 64.0;
    if (v54 >= 2147483650.0)
    {
      v55 = 0x7FFFFFFF;
    }
    else if (v54 > -2147483650.0)
    {
      v55 = (int)v54;
    }
    else
    {
      v55 = 0x80000000;
    }
    v56 = WebCore::RenderBlock::intrinsicBorderForFieldset(v74);
    v9 = v55 + v56;
    if (__OFADD__(v55, v56))
      v9 = (v55 >> 31) + 0x7FFFFFFF;
    a2 = v72;
    this = v74;
    v2 = v80;
  }
  else
  {
LABEL_5:
    v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v7 = 0.0;
    if ((*(_BYTE *)(v6 + 124) & 0xE) != 0)
    {
      v21 = *(_QWORD *)(v6 + 200);
      if (*(_BYTE *)(v21 + 5) && *(_BYTE *)(v21 + 76) == 4)
      {
        if (*(_BYTE *)(v21 + 78))
          v7 = *(float *)(v21 + 72);
        else
          v7 = (float)*(int *)(v21 + 72);
      }
      else
      {
        v7 = *(float *)(v6 + 120);
      }
    }
    v8 = v7 * 64.0;
    if (v8 >= 2147483650.0)
    {
      v9 = 0x7FFFFFFF;
    }
    else if (v8 > -2147483650.0)
    {
      v9 = (int)v8;
    }
    else
    {
      v9 = 0x80000000;
    }
  }
  v10 = v2 + v9;
  if (__OFADD__(v2, v9))
    v10 = (v2 >> 31) + 0x7FFFFFFF;
  v11 = *((_DWORD *)a2 + 1);
  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 < 5)
    goto LABEL_14;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) == 0)
    goto LABEL_14;
  v23 = *(_QWORD *)WebCore::gRareDataMap;
  if (!*(_QWORD *)WebCore::gRareDataMap)
    goto LABEL_14;
  v71 = *((_DWORD *)a2 + 1);
  v78 = v10;
  v24 = *(_DWORD *)(v23 - 8);
  v73 = this;
  v25 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = v24 & ((v27 >> 31) ^ v27);
  v29 = 1;
  v10 = v78;
  while (1)
  {
    v30 = v28;
    v31 = *(_QWORD *)(v23 + 16 * v28);
    if (v31 != -1)
    {
      v11 = *((_DWORD *)a2 + 1);
      if (!v31)
        goto LABEL_14;
      if (*(WebCore::RenderButton **)(v31 + 8) == this)
        break;
    }
    v28 = (v30 + v29++) & v24;
  }
  v42 = *(_QWORD *)(v23 + 16 * v30 + 8);
  v5 = WebCore::lookup + 13016;
  v10 = v78;
  v11 = *((_DWORD *)a2 + 1);
  if (v42 && *(_DWORD *)(v42 + 8))
  {
    v43 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v44 = 0.0;
    if ((*(_BYTE *)(v43 + 172) & 0xE) != 0)
    {
      v68 = *(_QWORD *)(v43 + 200);
      if (*(_BYTE *)(v68 + 5) && *(_BYTE *)(v68 + 52) == 4)
      {
        if (*(_BYTE *)(v68 + 54))
          v44 = *(float *)(v68 + 48);
        else
          v44 = (float)*(int *)(v68 + 48);
      }
      else
      {
        v44 = *(float *)(v43 + 168);
      }
    }
    v45 = v44 * 64.0;
    if (v45 >= 2147483650.0)
    {
      v46 = 0x7FFFFFFF;
    }
    else if (v45 <= -2147483650.0)
    {
      v46 = 0x80000000;
    }
    else
    {
      v46 = (int)v45;
    }
    v47 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v15 = v46 + v47;
    if (__OFADD__(v46, v47))
      v15 = (v46 >> 31) + 0x7FFFFFFF;
    this = v73;
    v10 = v78;
    v11 = v71;
  }
  else
  {
LABEL_14:
    v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v13 = 0.0;
    if ((*(_BYTE *)(v12 + 172) & 0xE) != 0)
    {
      v22 = *(_QWORD *)(v12 + 200);
      if (*(_BYTE *)(v22 + 5) && *(_BYTE *)(v22 + 52) == 4)
      {
        if (*(_BYTE *)(v22 + 54))
          v13 = *(float *)(v22 + 48);
        else
          v13 = (float)*(int *)(v22 + 48);
      }
      else
      {
        v13 = *(float *)(v12 + 168);
      }
    }
    v14 = v13 * 64.0;
    if (v14 >= *((double *)v5 + 458))
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
  }
  v16 = __OFADD__(v11, v15);
  v17 = v11 + v15;
  if (v16)
    v17 = (v11 >> 31) + 0x7FFFFFFF;
  v18 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v18 == 4 || v18 == 2)
  {
    v75 = this;
    v57 = v10;
    v58 = v17;
    v59 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v17 = v58;
    v10 = v57;
    v60 = v59;
    this = v75;
    if (v60)
    {
      WebCore::RenderBlock::intrinsicBorderForFieldset(v75);
      this = v75;
      v10 = v57;
      v17 = v58;
    }
  }
  v19 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v19 == 5 || v19 == 3)
  {
    v76 = this;
    v61 = v10;
    v62 = v17;
    v63 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v17 = v62;
    v10 = v61;
    v64 = v63;
    this = v76;
    if (v64)
    {
      WebCore::RenderBlock::intrinsicBorderForFieldset(v76);
      this = v76;
      v10 = v61;
      v17 = v62;
    }
  }
  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
    && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
  {
    v32 = *(_QWORD *)WebCore::gRareDataMap;
    if (*(_QWORD *)WebCore::gRareDataMap)
    {
      v70 = v17;
      v79 = v10;
      v33 = *(_DWORD *)(v32 - 8);
      v34 = this;
      v35 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v33 & ((v37 >> 31) ^ v37);
      v39 = 1;
      v17 = v70;
      while (1)
      {
        v40 = v38;
        v41 = *(_QWORD *)(v32 + 16 * v38);
        if (v41 != -1)
        {
          this = v34;
          v10 = v79;
          if (!v41)
            goto LABEL_26;
          if (*(WebCore::RenderButton **)(v41 + 8) == v34)
            break;
        }
        v38 = (v40 + v39++) & v33;
      }
      v48 = *(_QWORD *)(v32 + 16 * v40 + 8);
      this = v34;
      v10 = v79;
      v17 = v70;
      if (v48 && *(_DWORD *)(v48 + 8))
      {
        v49 = v34;
        WebCore::RenderBlock::intrinsicBorderForFieldset(v34);
        this = v49;
        v10 = v79;
        v17 = v70;
      }
    }
  }
LABEL_26:
  if ((*((_DWORD *)this + 31) & 0xE000) == 0x2000)
  {
    v77 = this;
    v65 = v10;
    v66 = v17;
    v67 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v17 = v66;
    v10 = v65;
    if (v67)
    {
      WebCore::RenderBlock::intrinsicBorderForFieldset(v77);
      v10 = v65;
      v17 = v66;
    }
  }
  return v10 | (unint64_t)(v17 << 32);
}

uint64_t WebCore::RenderButton::baselinePosition(WebCore::RenderFlexibleBox *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t LineBaseline;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int isAtomicInlineLevelBox;
  int v47;
  int v48;
  unsigned int v49;

  v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  if ((*(_BYTE *)(v6 + 642) & 3u) - 3 > 0xFFFFFFFD
    || (*(_BYTE *)(v6 + 462) & 1) != 0
    || (*(_DWORD *)(v6 + 636) & 0xC0000) != 0)
  {
    if ((*((_BYTE *)this + 20) & 1) != 0
      || (v44 = a3,
          v45 = a2,
          isAtomicInlineLevelBox = WebCore::RenderObject::isAtomicInlineLevelBox(this),
          a2 = v45,
          a3 = v44,
          isAtomicInlineLevelBox))
    {
      if ((*((_QWORD *)this + 12) & 0x1FLL) != 0x19
        && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
      {
        return WebCore::RenderFlexibleBox::baselinePosition((int *)this, a2, a3, a4);
      }
    }
  }
  LineBaseline = WebCore::RenderFlexibleBox::firstLineBaseline(this);
  v10 = LineBaseline;
  v11 = BYTE4(LineBaseline);
  v12 = *(_QWORD *)this;
  if (a4)
  {
    v13 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(v12 + 1024))(this);
    v14 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 952))(this);
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    else
      v15 = v13 + v14;
    v16 = *((_DWORD *)this + 40);
    v17 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1016))(this);
    if (__OFSUB__(v16, v17))
      v18 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v18 = v16 - v17;
    v19 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v18, v19))
      v20 = (v18 >> 31) + 0x7FFFFFFF;
    else
      v20 = v18 - v19;
    v21 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352))(this);
    v22 = v21 << 6;
    if (v21 < -33554432)
      v22 = 0x80000000;
    if (v21 > 0x1FFFFFF)
      v22 = 0x7FFFFFFF;
    v23 = __OFSUB__(v20, v22);
    v24 = v20 - v22;
    if (v23)
      v24 = (v20 >> 31) + 0x7FFFFFFF;
    v25 = v24 & ~(v24 >> 31);
    v26 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 944))(this);
    if (__OFSUB__(v25, v26))
      v27 = 0x7FFFFFFF;
    else
      v27 = v25 - v26;
    v28 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 952))(this);
    v29 = v27 - v28;
    if (__OFSUB__(v27, v28))
      v29 = (v27 >> 31) + 0x7FFFFFFF;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v49 = v29;
      v47 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 1352))(this);
      v29 = v49;
      v48 = v47 << 6;
      if (v47 > 0x1FFFFFF)
        v48 = 0x7FFFFFFF;
      if (v47 >= -33554432)
        v30 = v48;
      else
        v30 = 0x80000000;
    }
    else
    {
      v30 = 0;
    }
    v23 = __OFSUB__(v29, v30);
    v31 = v29 - v30;
    v32 = (v29 >> 31) + 0x7FFFFFFF;
    if (!v23)
      v32 = v31;
    v33 = v32 & ~(v32 >> 31);
    v23 = __OFADD__(v15, v33);
    v34 = v15 + v33;
    if (v23)
      v34 = (v15 >> 31) + 0x7FFFFFFF;
    if (v11)
      v34 = v10;
    v35 = (char *)this + 172;
  }
  else
  {
    v40 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(v12 + 1000))(this);
    v41 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + 928))(this);
    if (__OFADD__(v40, v41))
      v42 = (v40 >> 31) + 0x7FFFFFFF;
    else
      v42 = v40 + v41;
    v43 = WebCore::RenderBox::contentHeight(this);
    v34 = v42 + v43;
    if (__OFADD__(v42, v43))
      v34 = (v42 >> 31) + 0x7FFFFFFF;
    if (v11)
      v34 = v10;
    v35 = (char *)this + 168;
  }
  v36 = *(_DWORD *)v35;
  v23 = __OFADD__(v34, v36);
  v37 = v34 + v36;
  v38 = (v34 >> 31) + 0x7FFFFFFF;
  if (v23)
    return v38;
  else
    return v37;
}

int *WebCore::RenderButton::layout(WebCore::RenderButton *this)
{
  WebCore::RenderBox *v2;

  WebCore::RenderBlock::layout(this);
  return WebCore::RenderThemeIOS::adjustRoundBorderRadius((int *)this + 20, this, v2);
}

BOOL WebCore::RenderButton::hasControlClip(WebCore::RenderButton *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 848))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19639D1A8);
  }
  return *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
}

uint64_t WebCore::RenderCombineText::operator new(uint64_t this)
{
  if (this == 144)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderCombineText::RenderCombineText(WebCore::RenderCombineText *this, WebCore::Text *a2, const WTF::String *a3)
{
  uint64_t result;

  result = WebCore::RenderText::RenderText((uint64_t)this, 3, (uint64_t)a2, (uint64_t *)a3);
  *(_QWORD *)result = off_1E3421468;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 140) &= 0xFCu;
  return result;
}

void WebCore::RenderCombineText::~RenderCombineText(WebCore::RenderCombineText *this, void *a2)
{
  WebCore::RenderStyle *v3;
  WTF *v4;
  WTF::StringImpl *v5;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, a2);
    }
  }
  *(_QWORD *)this = off_1E3434D90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
}

{
  WebCore::RenderStyle *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  void *v6;

  v3 = (WebCore::RenderStyle *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    WebCore::RenderStyle::~RenderStyle(v3, a2);
    if (*(_DWORD *)v4)
    {
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      *(_OWORD *)v4 = 0u;
      *((_OWORD *)v4 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v4, a2);
    }
  }
  *(_QWORD *)this = off_1E3434D90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

void WebCore::RenderCombineText::styleDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  WebCore::RenderStyle *v14;
  WTF *v15;
  void *v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (!a3
    || !WebCore::FontCascade::operator==(*(_QWORD *)(a3 + 32) + 32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112) + 32))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = v6 ? *(_QWORD **)(v6 + 8) : 0;
    v9 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v9 = 0;
    v10 = (_DWORD *)v7[11];
    ++*v10;
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = v7[12];
    v11 = (_DWORD *)v7[13];
    v12 = (_DWORD *)v7[14];
    ++*v11;
    ++*v12;
    *(_QWORD *)(v9 + 24) = v11;
    *(_QWORD *)(v9 + 32) = v12;
    *(_QWORD *)(v9 + 40) = v7[15];
    *(_QWORD *)(v9 + 48) = 0;
    v13 = (_DWORD *)v7[17];
    ++*v13;
    *(_QWORD *)(v9 + 56) = v13;
    v14 = *(WebCore::RenderStyle **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v9;
    if (v14)
    {
      WebCore::RenderStyle::~RenderStyle(v14, v8);
      if (*(_DWORD *)v15)
      {
        *((_OWORD *)v15 + 2) = 0u;
        *((_OWORD *)v15 + 3) = 0u;
        *(_OWORD *)v15 = 0u;
        *((_OWORD *)v15 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v15, v16);
      }
    }
  }
  WebCore::RenderText::styleDidChange((WebCore::RenderObject *)a1, a2, a3);
  v17 = *(_BYTE *)(a1 + 140);
  if ((v17 & 1) != 0 && (*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    if ((*(_WORD *)(a1 + 118) & 0x800) != 0)
    {
      {
        WebCore::originalTextMap(void)::map = 0;
      }
      WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::String,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::originalTextMap(void)::map, a1, &v21);
    }
    else
    {
      v18 = *(WTF::StringImpl **)(a1 + 104);
      if (v18)
        *(_DWORD *)v18 += 2;
      v21 = v18;
    }
    WebCore::RenderText::setRenderedText((WebCore::RenderText *)a1, &v21);
    v20 = v21;
    v21 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    v17 = *(_BYTE *)(a1 + 140) & 0xFE;
  }
  *(_BYTE *)(a1 + 140) = v17 | 2;
  WebCore::RenderCombineText::combineTextIfNeeded((WebCore::RenderCombineText *)a1);
}

void WebCore::RenderCombineText::setRenderedText(WebCore::RenderCombineText *this, WTF::StringImpl **a2)
{
  WebCore::RenderText::setRenderedText(this, a2);
  *((_BYTE *)this + 140) |= 2u;
  WebCore::RenderCombineText::combineTextIfNeeded(this);
}

unint64_t WebCore::RenderCombineText::computeTextOrigin(WebCore::RenderCombineText *this, const WebCore::FloatRect *a2)
{
  if ((*((_BYTE *)this + 140) & 1) != 0)
    return COERCE_UNSIGNED_INT((float)(*(float *)a2 + (float)((float)(*((float *)a2 + 3) - *((float *)this + 32)) * 0.5)) + 0.0) | ((unint64_t)COERCE_UNSIGNED_INT(*((float *)this + 33) + (float)((float)(*((float *)a2 + 1) + *((float *)a2 + 3)) + (float)((float)(*((float *)a2 + 2) - (float)(*((float *)this + 33) + *((float *)this + 34))) * 0.5))) << 32);
  else
    return 0;
}

void WebCore::RenderCounter::~RenderCounter(WebCore::RenderCounter *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)this = off_1E3434D90;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderCounter::~RenderCounter(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderCounter::willBeDestroyed(WebCore::RenderCounter *this, void *a2)
{
  uint64_t v3;
  WebCore::CounterNode *v4;

  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v4 = *(WebCore::CounterNode **)(v3 + 8);
    if (v4)
      WebCore::CounterNode::removeRenderer(v4, this);
  }
  WebCore::RenderText::willBeDestroyed((uint64_t)this, a2);
}

const char *WebCore::RenderCounter::renderName(WebCore::RenderCounter *this)
{
  return "RenderCounter";
}

_QWORD *WebCore::RenderCounter::originalText@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  WTF::StringImpl *v7;
  int8x16_t *v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t i;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  _BYTE *v31;
  size_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  char *v47;
  char *v48;
  __int16 v49;
  char *v50;
  char *v51;
  __int16 v52;
  char *v53;
  char *v54;
  __int16 v55;
  WTF *v56;
  void *v57;
  char *v58;
  int8x16_t v59;
  int8x16_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int8x16_t v65;
  int8x16_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  int8x16_t v71;
  int8x16_t v72;
  char *v73;
  char *v74;
  char *v75;
  unsigned __int128 *v76;
  unsigned __int128 *v77;
  unsigned __int128 v78;
  unsigned __int128 *v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  __int8 *v82;
  unsigned __int128 *v83;
  unsigned __int128 v84;
  __int8 v85;
  __int8 v86;
  __int8 v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  void *v91;
  WTF::StringImpl **v92;
  _QWORD *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  WTF::StringImpl *v108;
  _DWORD *v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;

  v93 = this;
  v3 = this[19];
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    ++*(_DWORD *)v4;
    if ((*(_BYTE *)(v4 + 16) & 1) == 0 && (v5 = *(_QWORD *)(v4 + 48)) != 0 && *(_QWORD *)(v5 + 8))
      v6 = (unsigned int *)(v4 + 24);
    else
      v6 = (unsigned int *)(v4 + 20);
    this = WebCore::RenderCounter::originalText(void)const::$_0::operator()(a2, (uint64_t)this, (void *)*v6);
    if (v93[18])
    {
      if ((*(_BYTE *)(v4 + 16) & 1) == 0 && (v10 = *(_QWORD *)(v4 + 48)) != 0 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
      {
        ++*(_DWORD *)v11;
        if (*(_DWORD *)v4 == 1)
        {
          WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v4, v8);
          this = (_QWORD *)WTF::fastFree(v90, v91);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      else
      {
        v11 = v4;
      }
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
      {
        i = 0uLL;
        v92 = a2;
        while (1)
        {
          v4 = *(_QWORD *)(v12 + 8);
          if (!v4)
            break;
          v94 = v9;
          v101 = i;
          this = WebCore::RenderCounter::originalText(void)const::$_0::operator()(&v108, (uint64_t)v93, (void *)*(unsigned int *)(v11 + 24));
          v14 = v93[18];
          if (v14)
            *(_DWORD *)v14 += 2;
          v15 = *a2;
          if (*a2)
            *(_DWORD *)v15 += 2;
          v16 = v108;
          v9 = v94;
          i = v101;
          if (v108)
          {
            v17 = *((_DWORD *)v108 + 1);
            if (v14)
              goto LABEL_27;
          }
          else
          {
            v17 = 0;
            if (v14)
            {
LABEL_27:
              v18 = *(_DWORD *)(v14 + 4);
              if (!v15)
                goto LABEL_120;
              goto LABEL_28;
            }
          }
          v18 = 0;
          if (!v15)
          {
LABEL_120:
            v19 = 0;
            goto LABEL_29;
          }
LABEL_28:
          v19 = *((_DWORD *)v15 + 1);
LABEL_29:
          if ((v19 | v18) < 0
            || ((v20 = __OFADD__(v18, v19), v21 = v18 + v19, !v20) ? (v22 = 0) : (v22 = 1),
                v17 < 0 || (v22 & 1) != 0 || (v23 = v17 + v21, __OFADD__(v17, v21))))
          {
LABEL_179:
            __break(0xC471u);
            return this;
          }
          if (v108 && (*((_BYTE *)v108 + 16) & 4) == 0)
          {
            if (!v23)
              goto LABEL_149;
            v24 = v23;
            v25 = 1;
LABEL_65:
            if (v23 > 0x7FFFFFEF)
              goto LABEL_179;
            this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
            v9 = v94;
            i = v101;
            v30 = v109;
            if (!v109)
              goto LABEL_179;
            v39 = v109 + 5;
            *v109 = 2;
            v30[1] = v23;
            *((_QWORD *)v30 + 1) = v30 + 5;
            v30[4] = 0;
            if (v25)
            {
              v8 = (int8x16_t *)*((_QWORD *)v16 + 1);
              v40 = *((unsigned int *)v16 + 1);
              if ((*((_BYTE *)v16 + 16) & 4) != 0)
              {
                if (v40 >= 0x40)
                {
                  v47 = (char *)&v39[v40 & 0xFFFFFFC0];
                  v58 = (char *)(v30 + 5);
                  do
                  {
                    v110.val[0] = *v8;
                    v59 = v8[1];
                    v113.val[0] = v8[2];
                    v60 = v8[3];
                    v8 += 4;
                    v9 = v60;
                    v113.val[1] = v101;
                    v116.val[0] = v59;
                    v110.val[1] = v101;
                    v61 = v58;
                    vst2q_s8(v61, v110);
                    v61 += 32;
                    v116.val[1] = v101;
                    vst2q_s8(v61, v116);
                    v62 = v58 + 64;
                    vst2q_s8(v62, v113);
                    v63 = v58 + 96;
                    vst2q_s8(v63, *(int8x16x2_t *)v9.i8);
                    v58 += 128;
                  }
                  while (v58 != v47);
                }
                else
                {
                  v47 = (char *)(v30 + 5);
                }
                v48 = (char *)&v39[v40];
                while (v47 != v48)
                {
                  v49 = v8->u8[0];
                  v8 = (int8x16_t *)((char *)v8 + 1);
                  *(_WORD *)v47 = v49;
                  v47 += 2;
                }
              }
              else if ((_DWORD)v40 == 1)
              {
                *v39 = v8->i16[0];
              }
              else if ((_DWORD)v40)
              {
                memcpy(v30 + 5, v8, 2 * v40);
                v9 = v94;
                i = v101;
              }
              v41 = *((unsigned int *)v16 + 1);
            }
            else
            {
              v41 = 0;
            }
            v42 = (char *)&v39[v41];
            if (v14)
            {
              v8 = *(int8x16_t **)(v14 + 8);
              v43 = *(unsigned int *)(v14 + 4);
              if ((*(_BYTE *)(v14 + 16) & 4) != 0)
              {
                if (v43 >= 0x40)
                {
                  v50 = &v42[2 * (v43 & 0xFFFFFFC0)];
                  v64 = v42;
                  do
                  {
                    v111.val[0] = *v8;
                    v65 = v8[1];
                    v114.val[0] = v8[2];
                    v66 = v8[3];
                    v8 += 4;
                    v117.val[0] = v66;
                    v114.val[1] = i;
                    v119.val[0] = v65;
                    v111.val[1] = i;
                    v67 = v64;
                    vst2q_s8(v67, v111);
                    v67 += 32;
                    v117.val[1] = i;
                    v119.val[1] = i;
                    vst2q_s8(v67, v119);
                    v68 = v64 + 64;
                    vst2q_s8(v68, v114);
                    v69 = v64 + 96;
                    v64 += 128;
                    vst2q_s8(v69, v117);
                  }
                  while (v64 != v50);
                }
                else
                {
                  v50 = v42;
                }
                v51 = &v42[2 * v43];
                while (v50 != v51)
                {
                  v52 = v8->u8[0];
                  v8 = (int8x16_t *)((char *)v8 + 1);
                  *(_WORD *)v50 = v52;
                  v50 += 2;
                }
              }
              else if ((_DWORD)v43 == 1)
              {
                *(_WORD *)v42 = v8->i16[0];
              }
              else if ((_DWORD)v43)
              {
                v100 = v9;
                v107 = i;
                memcpy(v42, v8, 2 * v43);
                v9 = v100;
                i = v107;
              }
              v44 = *(unsigned int *)(v14 + 4);
              if (!v15)
                goto LABEL_80;
            }
            else
            {
              v44 = 0;
              if (!v15)
                goto LABEL_80;
            }
            v37 = &v42[2 * v44];
            v8 = (int8x16_t *)*((_QWORD *)v15 + 1);
            v45 = *((unsigned int *)v15 + 1);
            if ((*((_BYTE *)v15 + 16) & 4) != 0)
            {
              if (v45 >= 0x40)
              {
                v53 = &v37[2 * (v45 & 0xFFFFFFC0)];
                v70 = v37;
                a2 = v92;
                do
                {
                  v112.val[0] = *v8;
                  v71 = v8[1];
                  v115.val[0] = v8[2];
                  v72 = v8[3];
                  v8 += 4;
                  v118.val[0] = v72;
                  v115.val[1] = i;
                  v120.val[0] = v71;
                  v112.val[1] = i;
                  v73 = v70;
                  vst2q_s8(v73, v112);
                  v73 += 32;
                  v118.val[1] = i;
                  v120.val[1] = i;
                  vst2q_s8(v73, v120);
                  v74 = v70 + 64;
                  vst2q_s8(v74, v115);
                  v75 = v70 + 96;
                  v70 += 128;
                  vst2q_s8(v75, v118);
                }
                while (v70 != v53);
              }
              else
              {
                v53 = v37;
                a2 = v92;
              }
              v54 = &v37[2 * v45];
              while (v53 != v54)
              {
                v55 = v8->u8[0];
                v8 = (int8x16_t *)((char *)v8 + 1);
                *(_WORD *)v53 = v55;
                v53 += 2;
              }
            }
            else
            {
              if ((_DWORD)v45 == 1)
              {
                *(_WORD *)v37 = v8->i16[0];
LABEL_80:
                a2 = v92;
                goto LABEL_81;
              }
              a2 = v92;
              if ((_DWORD)v45)
              {
                v38 = 2 * v45;
                v94 = v9;
                v101 = i;
LABEL_62:
                memcpy(v37, v8, v38);
                v9 = v94;
                i = v101;
                goto LABEL_81;
              }
            }
            goto LABEL_81;
          }
          if (v14)
          {
            v26 = *(_DWORD *)(v14 + 16);
            if (!v15 || (v26 & 4) == 0)
            {
              v24 = v23;
              v27 = v23 == 0;
              if ((v26 & 4) == 0)
              {
LABEL_64:
                v25 = (uint64_t)v108;
                if (v27)
                  goto LABEL_149;
                goto LABEL_65;
              }
              goto LABEL_44;
            }
          }
          else if (!v15)
          {
            if (!v23)
            {
LABEL_149:
              v30 = (_DWORD *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_81;
            }
            v28 = 0;
            v29 = 0;
            v24 = v23;
            if ((v23 & 0x80000000) != 0)
              goto LABEL_179;
            goto LABEL_46;
          }
          v24 = v23;
          v27 = v23 == 0;
          if ((*((_BYTE *)v15 + 16) & 4) == 0)
            goto LABEL_64;
LABEL_44:
          v28 = v14;
          v29 = v15;
          if (v27)
            goto LABEL_149;
          if ((v23 & 0x80000000) != 0)
            goto LABEL_179;
LABEL_46:
          this = (_QWORD *)WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
          v9 = v94;
          i = v101;
          v30 = v109;
          if (!v109)
            goto LABEL_179;
          v31 = v109 + 5;
          *v109 = 2;
          v30[1] = v23;
          *((_QWORD *)v30 + 1) = v30 + 5;
          v30[4] = 4;
          if (v16)
          {
            v8 = (int8x16_t *)*((_QWORD *)v16 + 1);
            v32 = *((unsigned int *)v16 + 1);
            if ((*((_BYTE *)v16 + 16) & 4) != 0)
            {
              if ((_DWORD)v32)
              {
                if ((_DWORD)v32 == 1)
                {
                  *v31 = v8->i8[0];
                }
                else
                {
                  memcpy(v30 + 5, v8, v32);
                  v9 = v94;
                  i = v101;
                }
              }
            }
            else
            {
              if (v32 < 0x10)
              {
                v76 = (unsigned __int128 *)(v30 + 5);
              }
              else
              {
                v76 = (unsigned __int128 *)&v31[v32 & 0xFFFFFFF0];
                v77 = (unsigned __int128 *)(v30 + 5);
                do
                {
                  v78 = (unsigned __int128)vld2q_s8(v8->i8);
                  v8 += 2;
                  *v77++ = v78;
                }
                while (v77 != v76);
              }
              v9 = v94;
              for (i = v101; v76 != (unsigned __int128 *)&v31[v32]; v76 = (unsigned __int128 *)((char *)v76 + 1))
              {
                v85 = v8->i8[0];
                v8 = (int8x16_t *)((char *)v8 + 2);
                *(_BYTE *)v76 = v85;
              }
            }
            v33 = *((unsigned int *)v16 + 1);
          }
          else
          {
            v33 = 0;
          }
          v34 = &v31[v33];
          if (v28)
          {
            v8 = *(int8x16_t **)(v14 + 8);
            v35 = *(unsigned int *)(v14 + 4);
            if ((*(_BYTE *)(v14 + 16) & 4) != 0)
            {
              if ((_DWORD)v35)
              {
                if ((_DWORD)v35 == 1)
                {
                  *v34 = v8->i8[0];
                }
                else
                {
                  memcpy(v34, v8, v35);
                  v9 = v94;
                  i = v101;
                }
              }
            }
            else
            {
              if (v35 < 0x10)
              {
                v79 = (unsigned __int128 *)v34;
              }
              else
              {
                v79 = (unsigned __int128 *)&v34[v35 & 0xFFFFFFF0];
                v80 = (unsigned __int128 *)v34;
                do
                {
                  v81 = (unsigned __int128)vld2q_s8(v8->i8);
                  v8 += 2;
                  *v80++ = v81;
                }
                while (v80 != v79);
              }
              v9 = v94;
              for (i = v101; v79 != (unsigned __int128 *)&v34[v35]; v79 = (unsigned __int128 *)((char *)v79 + 1))
              {
                v86 = v8->i8[0];
                v8 = (int8x16_t *)((char *)v8 + 2);
                *(_BYTE *)v79 = v86;
              }
            }
            v36 = *(unsigned int *)(v14 + 4);
            if (!v29)
              goto LABEL_80;
          }
          else
          {
            v36 = 0;
            if (!v29)
              goto LABEL_80;
          }
          v37 = &v34[v36];
          v8 = (int8x16_t *)*((_QWORD *)v15 + 1);
          v38 = *((unsigned int *)v15 + 1);
          if ((*((_BYTE *)v15 + 16) & 4) == 0)
          {
            if (v38 < 0x10)
            {
              v82 = &v34[v36];
            }
            else
            {
              v82 = &v37[v38 & 0xFFFFFFF0];
              v83 = (unsigned __int128 *)v37;
              do
              {
                v84 = (unsigned __int128)vld2q_s8(v8->i8);
                v8 += 2;
                *v83++ = v84;
              }
              while (v83 != (unsigned __int128 *)v82);
            }
            while (v82 != &v37[v38])
            {
              v87 = v8->i8[0];
              v8 = (int8x16_t *)((char *)v8 + 2);
              *v82++ = v87;
            }
            v9 = v94;
            i = v101;
            goto LABEL_80;
          }
          a2 = v92;
          if (!(_DWORD)v38)
            goto LABEL_81;
          if ((_DWORD)v38 != 1)
            goto LABEL_62;
          *v37 = v8->i8[0];
LABEL_81:
          v46 = *a2;
          *a2 = (WTF::StringImpl *)v30;
          if (!v46)
            goto LABEL_84;
          if (*(_DWORD *)v46 != 2)
          {
            *(_DWORD *)v46 -= 2;
LABEL_84:
            if (v15)
              goto LABEL_85;
            goto LABEL_87;
          }
          v96 = v9;
          v103 = i;
          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v8);
          v9 = v96;
          i = v103;
          if (v15)
          {
LABEL_85:
            if (*(_DWORD *)v15 == 2)
            {
              v97 = v9;
              v104 = i;
              WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v8);
              v9 = v97;
              i = v104;
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
LABEL_87:
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              v98 = v9;
              v105 = i;
              WTF::StringImpl::destroy((WTF::StringImpl *)v14, (WTF::StringImpl *)v8);
              v9 = v98;
              i = v105;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          this = v108;
          v108 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              v99 = v9;
              v106 = i;
              this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v8);
              v9 = v99;
              i = v106;
            }
            else
            {
              *(_DWORD *)this -= 2;
            }
          }
          ++*(_DWORD *)v4;
          if (*(_DWORD *)v11 == 1)
          {
            v95 = v9;
            v102 = i;
            WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v11, v8);
            this = (_QWORD *)WTF::fastFree(v56, v57);
            v9 = v95;
            i = v102;
          }
          else
          {
            --*(_DWORD *)v11;
          }
          v12 = *(_QWORD *)(v4 + 48);
          v11 = v4;
          if (!v12)
            goto LABEL_175;
        }
      }
      v4 = v11;
    }
LABEL_175:
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v4, v8);
      return (_QWORD *)WTF::fastFree(v88, v89);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  else
  {
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    *a2 = v7;
  }
  return this;
}

WTF::StringImpl *WebCore::RenderCounter::originalText(void)const::$_0::operator()(WTF::StringImpl **a1, uint64_t a2, void *a3)
{
  int v6;
  WTF::StringImpl *result;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  WebCore::CSSCounterStyle *v11;
  int v12;
  WTF::StringImpl *v13;
  WebCore::CSSCounterStyle *v14;
  char v15;
  void *v16;
  WTF *v17;
  void *v18;
  unsigned int v19[2];
  char v20;
  WTF::StringImpl *v21;

  v6 = *(unsigned __int8 *)(a2 + 128);
  result = *(WTF::StringImpl **)(a2 + 136);
  if (result)
  {
    v8 = *(_DWORD *)result;
    *(_DWORD *)result += 2;
    if (v8)
    {
      *(_DWORD *)result = v8;
      if (v6 == 2)
      {
LABEL_5:
        v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v9 += 2;
        *a1 = v9;
        return result;
      }
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      if (v6 == 2)
        goto LABEL_5;
      result = *(WTF::StringImpl **)(a2 + 136);
      v6 = *(unsigned __int8 *)(a2 + 128);
      if (result)
      {
        v10 = *(_DWORD *)result;
        *(_DWORD *)result += 2;
        if (v10)
          *(_DWORD *)result = v10;
        else
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      }
    }
    if (v6)
      goto LABEL_5;
  }
  else if (*(_BYTE *)(a2 + 128))
  {
    goto LABEL_5;
  }
  v11 = *(WebCore::CSSCounterStyle **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40)
                                                             + 8)
                                                 + 1328)
                                     + 304);
  v12 = *(unsigned __int8 *)(a2 + 128);
  v20 = *(_BYTE *)(a2 + 128);
  v13 = *(WTF::StringImpl **)(a2 + 136);
  if (v13)
    *(_DWORD *)v13 += 2;
  v21 = v13;
  if (v12)
  {
    *(_QWORD *)v19 = 0;
    if (!v13)
      goto LABEL_20;
  }
  else
  {
    WebCore::CSSCounterStyleRegistry::resolveReferencesIfNeeded(v11);
    WebCore::CSSCounterStyleRegistry::counterStyle((WebCore::CSSCounterStyle *)&v21, (uint64_t *)v11, (WebCore::CSSCounterStyleRegistry *)v19);
    if (!v13)
      goto LABEL_20;
  }
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
  else
    *(_DWORD *)v13 -= 2;
LABEL_20:
  v14 = *(WebCore::CSSCounterStyle **)v19;
  switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) + 124) >> 13)
  {
    case 1:
      v15 = 1;
      break;
    case 2:
    case 4:
      v15 = 2;
      break;
    case 3:
    case 5:
      v15 = 3;
      break;
    default:
      v15 = 0;
      break;
  }
  result = WebCore::CSSCounterStyle::text(*(uint64_t *)v19, a3, v15, a1);
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::CSSCounterStyle::~CSSCounterStyle(v14, v16);
      return (WTF::StringImpl *)WTF::fastFree(v17, v18);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return result;
}

const WTF::StringImpl **WebCore::RenderCounter::updateCounter(const WTF::StringImpl **this)
{
  const WTF::StringImpl **v1;
  const WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CounterNode *CounterNode;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v1 = this;
  v2 = this[19];
  if (v2 && *((_QWORD *)v2 + 1))
  {
LABEL_12:
    WebCore::RenderCounter::originalText(v1, &v8);
    WebCore::RenderText::setText(v1, &v8, (const WTF::StringImpl *)1);
    this = (const WTF::StringImpl **)v8;
    v8 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (const WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
  }
  else
  {
    v3 = this[4];
    if (v3)
    {
      v4 = *((_QWORD *)v3 + 1);
      if (v4)
      {
        while (1)
        {
          if ((*(_BYTE *)(v4 + 45) & 1) == 0)
          {
            this = (const WTF::StringImpl **)WebCore::RenderObject::isPseudoElement((WebCore::RenderObject *)v4);
            if (!(_DWORD)this)
              break;
          }
          if ((*(_QWORD *)(v4 + 96) & 0xF00000000000) == 0x300000000000)
          {
            CounterNode = (WebCore::CounterNode *)WebCore::makeCounterNode((WebCore *)v4, (WebCore::RenderElement *)(v1 + 15), (const WTF::AtomString *)1);
            WebCore::CounterNode::addRenderer(CounterNode, (WebCore::RenderCounter *)v1);
            goto LABEL_12;
          }
          v5 = *(_QWORD *)(v4 + 32);
          if (v5)
          {
            v4 = *(_QWORD *)(v5 + 8);
            if (v4)
              continue;
          }
          return this;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::makeCounterNode(WebCore *this, WebCore::RenderElement *a2, const WTF::AtomString *a3)
{
  int v3;
  WebCore *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int16 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  const WebCore::Element *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  void *v47;
  char v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int j;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WebCore *v59;
  WebCore *v60;
  const WebCore::RenderElement *v61;
  const WebCore::Node *v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  const WebCore::RenderElement *v66;
  const WebCore::Node *v67;
  BOOL v68;
  WebCore *v69;
  WTF *v70;
  unsigned int v71;
  uint64_t v72;
  char *v73;
  WebCore::CounterNode *v74;
  WebCore::CounterNode *v75;
  uint64_t v76;
  WebCore::CounterNode *v78;
  uint64_t CounterNode;
  const WebCore::RenderElement *v80;
  const WebCore::Node *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WebCore *v85;
  WebCore *v86;
  uint64_t v87;
  WTF *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const WebCore::RenderElement *v93;
  uint64_t v94;
  uint64_t v95;
  const WebCore::RenderElement *v96;
  WebCore *v97;
  WebCore *v98;
  uint64_t v99;
  WebCore *v100;
  WebCore *v101;
  uint64_t v102;
  uint64_t v103;
  const WebCore::RenderElement *v104;
  WebCore::CounterNode *v105;
  uint64_t v106;
  const WebCore::RenderElement *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  WTF::StringImpl ***v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  BOOL v117;
  int v118;
  uint64_t v119;
  char v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  WTF::StringImpl ***v133;
  WTF::StringImpl ***v134;
  void *v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int v141;
  WTF *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  int v147;
  WTF::StringImpl **v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  WTF::StringImpl **v153;
  WTF::StringImpl *v154;
  WebCore::CounterNode *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int v162;
  WTF::StringImpl ***v163;
  void *v164;
  uint64_t v165;
  uint64_t v167;
  const WebCore::Node *v170;
  const WebCore::Node *v171;
  BOOL v172;
  uint64_t IncludingPseudoSkippingChildren;
  const WebCore::Node *v174;
  uint64_t v175;
  uint64_t v178;
  int v179;
  unsigned int k;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WebCore::CounterNode *v186;
  int v187;
  WTF *v188;
  void *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  WTF *v196;
  void *v197;
  WTF *v198;
  void *v199;
  WTF *v200;
  void *v201;
  WTF *v202;
  void *v203;
  WTF *v204;
  void *v205;
  WTF *v206;
  void *v207;
  WTF *v208;
  void *v209;
  int v210;
  int v211;
  WebCore *v212;
  unsigned int v213;
  WebCore *v214;
  uint64_t ListItemHelper;
  const WebCore::Element *v216;
  const WebCore::Element *v217;
  int v218;
  int v219;
  WebCore::CounterNode *v220;
  WTF *v221;
  uint64_t v222;
  uint64_t v223;

  v3 = (int)a3;
  v5 = this;
  v6 = &unk_1EE2F9000;
  if ((*(_WORD *)((_BYTE *)this + 69) & 8) != 0)
  {
    {
      WebCore::counterMaps(void)::staticCounterMaps = 0;
      *(_QWORD *)&dword_1EE2F9370 = 0;
    }
    WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::find(&WebCore::counterMaps(void)::staticCounterMaps, (uint64_t)this, (uint64_t)&v221);
    v7 = **(_QWORD **)(v222 + 8);
    if (v7)
    {
      v8 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v8 + v10)
      {
        v10 = i & *(_DWORD *)(v7 - 8);
        v11 = *(_QWORD *)(v7 + 16 * v10);
        if (v11 != -1)
        {
          if (!v11)
            goto LABEL_11;
          if (v11 == *(_QWORD *)a2)
            break;
        }
        ++v8;
      }
      v12 = *(_QWORD *)(v7 + 16 * v10 + 8);
      if (v12)
        return v12;
    }
  }
LABEL_11:
  v13 = *((_BYTE *)v5 + 45);
  if ((v13 & 1) == 0
    && (v14 = *(unsigned __int16 **)(*((_QWORD *)v5 + 3) + 8)) != 0
    && (~v14[14] & 0x408) == 0
    && (v15 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v14 + 368))(v14),
        v13 = *((_BYTE *)v5 + 45),
        v15))
  {
    if ((*((_BYTE *)v5 + 45) & 1) != 0)
      v52 = 0;
    else
      v52 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if ((~*(unsigned __int16 *)(v52 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 368))(v52))
    {
      __break(0xC471u);
      JUMPOUT(0x19639E5F8);
    }
    v16 = *(_QWORD *)(v52 + 112);
    if (!v16)
      goto LABEL_33;
  }
  else
  {
    if ((v13 & 1) != 0)
      goto LABEL_33;
    v16 = *((_QWORD *)v5 + 3);
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_33;
  if ((*(_WORD *)(v17 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19639E5BCLL);
  }
  v18 = (*((_QWORD *)v5 + 12) >> 43) & 0x1FLL;
  if ((v18 - 6) >= 2)
  {
    if ((_DWORD)v18)
      goto LABEL_33;
    v36 = *(_QWORD *)(v17 + 64) & 0xFFFFFFFFFFFFLL;
    if (v36 && (*(_BYTE *)(v36 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19639E638);
    }
    if ((WebCore *)v36 != v5)
      goto LABEL_33;
  }
  v219 = v3;
  v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 192);
  v20 = *(_QWORD *)a2;
  if (v19)
  {
    v53 = 0;
    for (j = *(_DWORD *)(v20 + 16) >> 8; ; j = v53 + v55)
    {
      v55 = j & *(_DWORD *)(v19 - 8);
      v56 = *(_QWORD *)(v19 + 32 * v55);
      if (v56 != -1)
      {
        if (!v56)
          goto LABEL_21;
        if (v56 == v20)
          break;
      }
      ++v53;
    }
    v57 = v19 + 32 * v55;
    v27 = *(_DWORD *)(v57 + 8);
    v26 = *(unsigned __int8 *)(v57 + 12);
    v25 = *(unsigned int *)(v57 + 16);
    v24 = *(unsigned __int8 *)(v57 + 20);
    v22 = *(_DWORD *)(v57 + 24) & 0xFFFFFF00;
    v21 = *(unsigned __int8 *)(v57 + 28);
    v23 = *(_DWORD *)(v57 + 24);
  }
  else
  {
LABEL_21:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
  }
  if (MEMORY[0x19AEA53F4](v20, "list-item", 9))
  {
    if (*((_BYTE *)v5 + 46) == 19)
    {
      v29 = WebCore::enclosingList(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8));
      if (v29 && (*(_WORD *)(v29 + 28) & 0x10) != 0)
      {
        v30 = 1;
        if (*(_QWORD *)(*(_QWORD *)(v29 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
        {
          if (*(_BYTE *)(v29 + 128))
            v30 = -1;
          else
            v30 = 1;
        }
      }
      else
      {
        v30 = 1;
      }
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = v30 & 0xFFFFFF00;
      goto LABEL_28;
    }
    if ((*((_BYTE *)v5 + 45) & 1) != 0)
      goto LABEL_456;
    v40 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (!v40)
      goto LABEL_456;
    v41 = *(_WORD *)(v40 + 28);
    if ((v41 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19639E658);
    }
    if ((v41 & 0x10) == 0)
      goto LABEL_456;
    v42 = *(_QWORD *)(WebCore::HTMLNames::olTag + 24);
    if (*(_QWORD *)(*(_QWORD *)(v40 + 96) + 24) != v42)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v40 + 96) + 24);
      if (v43 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v43 == v42)
      {
        LOBYTE(v30) = 0;
        v34 = 0;
        v32 = 0;
        v33 = 0;
        v35 = 0;
        v31 = 1;
        goto LABEL_44;
      }
LABEL_456:
      LOBYTE(v30) = 0;
      v31 = 0;
      v34 = 0;
      v32 = 0;
      v33 = 0;
      v35 = 0;
LABEL_44:
      v44 = v33 | v32;
      if (!v26)
      {
        v26 = v31;
        v27 = v44;
      }
      v45 = v34 | v30;
      if (v24)
      {
        v25 = v25;
      }
      else
      {
        v24 = v35;
        v25 = v45;
      }
      if (!v21)
        goto LABEL_50;
LABEL_36:
      v39 = (v26 != 0) | 2;
      v25 = v23 | v22;
LABEL_57:
      v6 = &unk_1EE2F9000;
LABEL_58:
      v38 = v39 | (v25 << 32);
      v37 = 1;
      goto LABEL_59;
    }
    if (*(_BYTE *)(v40 + 116))
    {
      v58 = *(_DWORD *)(v40 + 112);
    }
    else if (*(_BYTE *)(v40 + 128))
    {
      if (!*(_BYTE *)(v40 + 124))
      {
        ListItemHelper = WebCore::nextListItemHelper((WebCore *)v40, (const WebCore::Element *)v40, v28);
        if (ListItemHelper)
        {
          v218 = 0;
          do
          {
            v217 = *(const WebCore::Element **)(*(_QWORD *)(ListItemHelper + 24) + 8);
            if ((*((_WORD *)v217 + 14) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19639F780);
            }
            ++v218;
            ListItemHelper = WebCore::nextListItemHelper((WebCore *)v40, v217, v216);
          }
          while (ListItemHelper);
        }
        else
        {
          v218 = 0;
        }
        *(_DWORD *)(v40 + 120) = v218;
        *(_BYTE *)(v40 + 124) = 1;
        goto LABEL_91;
      }
      v58 = *(_DWORD *)(v40 + 120);
    }
    else
    {
      v58 = 1;
    }
    v218 = v58;
LABEL_91:
    v33 = v218 & 0xFFFFFF00;
    if (*(_BYTE *)(v40 + 128))
      v30 = 1;
    else
      v30 = -1;
    v34 = v30 & 0xFFFFFF00;
    v32 = v218;
    v31 = 1;
LABEL_28:
    v35 = 1;
    goto LABEL_44;
  }
  if (v21)
    goto LABEL_36;
LABEL_50:
  if (v26)
  {
    if (v24)
      v46 = v25;
    else
      v46 = 0;
    v25 = v27 + v46;
    if (__OFADD__(v27, v46))
      v25 = (v27 >> 31) + 0x7FFFFFFF;
    v39 = 1;
    goto LABEL_57;
  }
  v6 = (_BYTE *)&unk_1EE2F9000;
  v3 = v219;
  if (v24)
  {
    v39 = 0;
    goto LABEL_58;
  }
LABEL_33:
  v12 = 0;
  if (!v3)
    return v12;
  v37 = 0;
  v38 = 0;
LABEL_59:
  if ((v6[888] & 1) == 0)
  {
    WebCore::counterMaps(void)::staticCounterMaps = 0;
    *(_QWORD *)&dword_1EE2F9370 = 0;
    v6[888] = 1;
    if (v37)
      goto LABEL_61;
LABEL_96:
    v12 = WTF::fastMalloc((WTF *)0x58);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    v49 = *((_QWORD *)v5 + 1);
    if (v49
      || (v49 = WTF::fastCompactMalloc((WTF *)0x10),
          *(_DWORD *)v49 = 1,
          *(_QWORD *)(v49 + 8) = v5,
          v50 = (WTF *)*((_QWORD *)v5 + 1),
          *((_QWORD *)v5 + 1) = v49,
          !v50))
    {
      v48 = 0;
      goto LABEL_98;
    }
    v51 = *(_DWORD *)v50 - 1;
    if (*(_DWORD *)v50 == 1)
    {
      WTF::fastFree(v50, v47);
      v48 = 0;
      goto LABEL_417;
    }
    v48 = 0;
LABEL_181:
    *(_DWORD *)v50 = v51;
    goto LABEL_98;
  }
  if (!v37)
    goto LABEL_96;
LABEL_61:
  v12 = WTF::fastMalloc((WTF *)0x58);
  v48 = v38;
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = v38;
  *(_QWORD *)(v12 + 20) = HIDWORD(v38);
  v49 = *((_QWORD *)v5 + 1);
  if (!v49)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v49 = 1;
    *(_QWORD *)(v49 + 8) = v5;
    v50 = (WTF *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v49;
    if (v50)
    {
      v51 = *(_DWORD *)v50 - 1;
      if (*(_DWORD *)v50 == 1)
      {
        WTF::fastFree(v50, v47);
LABEL_417:
        v49 = *((_QWORD *)v5 + 1);
        goto LABEL_98;
      }
      goto LABEL_181;
    }
  }
LABEL_98:
  ++*(_DWORD *)v49;
  *(_QWORD *)(v12 + 32) = v49;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  v59 = *(WebCore **)(*((_QWORD *)v5 + 3) + 8);
  if ((*((_WORD *)v59 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19639F59CLL);
  }
  v60 = WebCore::previousSiblingOrParentElement(v59, (const WebCore::Element *)v47);
  if (v60)
  {
    v63 = *((_QWORD *)v60 + 8);
    v64 = (WebCore *)(v63 & 0xFFFFFFFFFFFFLL);
    if ((v63 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v63 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19639E7C8);
    }
  }
  else
  {
    v64 = 0;
  }
  v65 = WebCore::previousInPreOrderRespectingContainment(v5, v61, v62);
  if (!v65)
  {
    v74 = 0;
    v75 = 0;
    goto LABEL_214;
  }
  v69 = (WebCore *)v65;
  if ((*(_WORD *)(v65 + 69) & 8) == 0)
  {
    v70 = 0;
    v71 = 0;
    v221 = 0;
    v222 = 0;
    v223 = v65;
    do
    {
      if ((*(_WORD *)(v65 + 69) & 8) != 0)
        break;
      v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 88) + 40) + 192);
      if (v72 && *(_DWORD *)(v72 - 12))
      {
        if (v71 == (_DWORD)v222)
        {
          v73 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v221, v71 + 1, (unint64_t)&v223);
          v71 = HIDWORD(v222);
          v70 = v221;
          *((_QWORD *)v221 + HIDWORD(v222)) = *(_QWORD *)v73;
        }
        else
        {
          *((_QWORD *)v70 + v71) = v65;
        }
        HIDWORD(v222) = ++v71;
        v65 = v223;
      }
      v65 = WebCore::previousInPreOrderRespectingContainment((WebCore *)v65, v66, v67);
      v223 = v65;
    }
    while (v65);
    if (v71)
    {
      v76 = v71 - 1;
      do
        WebCore::makeCounterNode(*((WebCore **)v70 + v76), a2, 0, v68);
      while ((_DWORD)v76--);
      HIDWORD(v222) = 0;
    }
    else if (!v70)
    {
      goto LABEL_123;
    }
    v221 = 0;
    LODWORD(v222) = 0;
    WTF::fastFree(v70, v66);
  }
LABEL_123:
  v78 = 0;
LABEL_124:
  while (2)
  {
    v75 = v78;
    while (1)
    {
      CounterNode = WebCore::makeCounterNode(v69, a2, 0, v68);
      v78 = (WebCore::CounterNode *)CounterNode;
      if (v64 == v69)
      {
        if (CounterNode)
        {
          if (!v75)
          {
            if ((*(_BYTE *)(CounterNode + 16) & 1) != 0
              || (v94 = *(_QWORD *)(CounterNode + 48)) == 0
              || (v74 = *(WebCore::CounterNode **)(v94 + 8)) == 0)
            {
              if ((v48 & 1) == 0
                || (v106 = WebCore::parentOrPseudoHostElement(v64, v80),
                    v106 != WebCore::parentOrPseudoHostElement(v5, v107)))
              {
LABEL_191:
                v75 = 0;
                goto LABEL_192;
              }
LABEL_196:
              v109 = *((_QWORD *)v78 + 6);
              if (v109)
              {
                v74 = *(WebCore::CounterNode **)(v109 + 8);
                if (v74)
LABEL_198:
                  ++*(_DWORD *)v74;
              }
              else
              {
                v74 = 0;
              }
              ++*(_DWORD *)v78;
LABEL_210:
              if (!v74)
              {
                v75 = v78;
                goto LABEL_214;
              }
              v75 = v78;
LABEL_212:
              WebCore::CounterNode::insertAfter(v74, (WebCore::CounterNode *)v12, v78, a2);
              goto LABEL_214;
            }
            if ((v48 & 1) == 0)
              goto LABEL_198;
            v95 = WebCore::parentOrPseudoHostElement(v64, v80);
            if (v95 != WebCore::parentOrPseudoHostElement(v5, v96))
              goto LABEL_196;
            ++*(_DWORD *)v78;
LABEL_164:
            v97 = *(WebCore **)(*((_QWORD *)v64 + 3) + 8);
            if ((*((_WORD *)v97 + 14) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19639F5FCLL);
            }
            v98 = WebCore::previousSiblingOrParentElement(v97, v80);
            if (v98)
            {
              v99 = *((_QWORD *)v98 + 8);
              v64 = (WebCore *)(v99 & 0xFFFFFFFFFFFFLL);
              if ((v99 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v99 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19639F61CLL);
              }
              if (!v78)
                goto LABEL_156;
            }
            else
            {
              v64 = 0;
              if (!v78)
                goto LABEL_156;
            }
LABEL_169:
            v100 = *(WebCore **)(*((_QWORD *)v69 + 3) + 8);
            if ((*((_WORD *)v100 + 14) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19639F5BCLL);
            }
            v101 = WebCore::previousSiblingOrParentElement(v100, v80);
            if (!v101)
              goto LABEL_176;
            v102 = *((_QWORD *)v101 + 8);
            v69 = (WebCore *)(v102 & 0xFFFFFFFFFFFFLL);
            if ((v102 & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_145;
            if ((*(_BYTE *)((v102 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19639F5DCLL);
            }
            goto LABEL_124;
          }
          if ((*(_BYTE *)(CounterNode + 16) & 1) != 0
            || (v90 = *(_QWORD *)(CounterNode + 48)) == 0
            || (v91 = *(_QWORD *)(v90 + 8)) == 0)
          {
            if ((v48 & 1) == 0
              || (v103 = WebCore::parentOrPseudoHostElement(v64, v80),
                  v103 != WebCore::parentOrPseudoHostElement(v5, v104)))
            {
              v105 = (WebCore::CounterNode *)*((_QWORD *)v75 + 6);
              if (v105)
                v105 = (WebCore::CounterNode *)*((_QWORD *)v105 + 1);
              if (v105 != v78)
              {
                if (*(_DWORD *)v75 == 1)
                {
                  WebCore::CounterNode::~CounterNode(v75, v80);
                  WTF::fastFree(v208, v209);
                }
                else
                {
                  --*(_DWORD *)v75;
                }
                goto LABEL_191;
              }
              goto LABEL_192;
            }
            v110 = *((_QWORD *)v78 + 6);
            if (v110)
            {
              v74 = *(WebCore::CounterNode **)(v110 + 8);
              if (!v74)
                goto LABEL_177;
              ++*(_DWORD *)v74;
              ++*(_DWORD *)v78;
LABEL_208:
              if (*(_DWORD *)v75 == 1)
              {
                WebCore::CounterNode::~CounterNode(v75, v80);
                WTF::fastFree(v202, v203);
              }
              else
              {
                --*(_DWORD *)v75;
              }
              goto LABEL_210;
            }
LABEL_207:
            v78 = 0;
            v74 = 0;
            goto LABEL_208;
          }
          if ((v48 & 1) == 0)
          {
            v108 = 0;
            goto LABEL_204;
          }
          v92 = WebCore::parentOrPseudoHostElement(v64, v80);
          if (v92 != WebCore::parentOrPseudoHostElement(v5, v93))
          {
            v90 = *((_QWORD *)v78 + 6);
            if (v90)
            {
              v108 = 0;
              v91 = *(_QWORD *)(v90 + 8);
            }
            else
            {
              v91 = 0;
              v108 = 1;
            }
LABEL_204:
            v111 = *((_QWORD *)v75 + 6);
            if (v111)
              v111 = *(_QWORD *)(v111 + 8);
            if (v91 == v111)
            {
              if ((v108 & 1) != 0 || (v78 = *(WebCore::CounterNode **)(v90 + 8)) == 0)
              {
                v74 = 0;
                goto LABEL_214;
              }
LABEL_192:
              ++*(_DWORD *)v78;
              v74 = v78;
              v78 = v75;
              goto LABEL_212;
            }
            goto LABEL_207;
          }
        }
        v78 = v75;
        goto LABEL_164;
      }
      if (!CounterNode)
        break;
      if (!v75)
      {
        ++*(_DWORD *)CounterNode;
        v75 = (WebCore::CounterNode *)CounterNode;
        goto LABEL_138;
      }
      if ((*(_BYTE *)(CounterNode + 16) & 1) == 0 && (v82 = *(_QWORD *)(CounterNode + 48)) != 0 && *(_QWORD *)(v82 + 8))
      {
LABEL_138:
        v85 = *(WebCore **)(*((_QWORD *)v69 + 3) + 8);
        if ((*((_WORD *)v85 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19639EBE0);
        }
        v86 = WebCore::previousSiblingOrParentElement(v85, v80);
        if (!v86)
          goto LABEL_207;
        v87 = *((_QWORD *)v86 + 8);
        v69 = (WebCore *)(v87 & 0xFFFFFFFFFFFFLL);
        if ((v87 & 0xFFFFFFFFFFFFLL) == 0)
        {
          v78 = v75;
LABEL_145:
          if (v69)
            goto LABEL_124;
LABEL_176:
          v74 = 0;
          v75 = v78;
LABEL_177:
          v78 = 0;
          goto LABEL_208;
        }
        if ((*(_BYTE *)((v87 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19639EC4CLL);
        }
      }
      else
      {
        ++*(_DWORD *)CounterNode;
        if (*(_DWORD *)v75 == 1)
        {
          WebCore::CounterNode::~CounterNode(v75, v80);
          WTF::fastFree(v88, v89);
        }
        else
        {
          --*(_DWORD *)v75;
        }
        v83 = WebCore::parentOrPseudoHostElement(v69, v80);
        if (!v83)
          goto LABEL_176;
        v84 = *(_QWORD *)(v83 + 64);
        v69 = (WebCore *)(v84 & 0xFFFFFFFFFFFFLL);
        if ((v84 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_145;
        v75 = v78;
        if ((*(_BYTE *)((v84 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19639EC2CLL);
        }
      }
    }
    v78 = v75;
    if (v75)
      goto LABEL_169;
LABEL_156:
    v69 = (WebCore *)WebCore::previousInPreOrderRespectingContainment(v69, v80, v81);
    v74 = 0;
    v75 = 0;
    if (v69)
      continue;
    break;
  }
LABEL_214:
  v113 = (WTF::StringImpl ***)WTF::fastMalloc((WTF *)8);
  *v113 = 0;
  v114 = dword_1EE2F9370++;
  if (v114 > *(_DWORD *)algn_1EE2F9374)
    WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(&WebCore::counterMaps(void)::staticCounterMaps, v112);
  v115 = *((_QWORD *)v5 + 1);
  if (!v115)
  {
    v115 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v115 = 1;
    *(_QWORD *)(v115 + 8) = v5;
    v142 = (WTF *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = v115;
    if (v142)
    {
      if (*(_DWORD *)v142 == 1)
      {
        WTF::fastFree(v142, v112);
        v115 = *((_QWORD *)v5 + 1);
      }
      else
      {
        --*(_DWORD *)v142;
      }
    }
  }
  v116 = *(_DWORD *)v115;
  *(_DWORD *)v115 += 2;
  v117 = __CFADD__(v116, 1);
  v118 = v116 + 1;
  if (v117)
    WTF::fastFree((WTF *)v115, v112);
  else
    *(_DWORD *)v115 = v118;
  v119 = WebCore::counterMaps(void)::staticCounterMaps;
  if (WebCore::counterMaps(void)::staticCounterMaps
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(&WebCore::counterMaps(void)::staticCounterMaps, 8u, 0), (v119 = WebCore::counterMaps(void)::staticCounterMaps) != 0))
  {
    v120 = 0;
    v121 = *(_DWORD *)(v119 - 8);
  }
  else
  {
    v121 = 0;
    v120 = 1;
  }
  v122 = 0;
  v123 = (~(v115 << 32) + v115) ^ ((unint64_t)(~(v115 << 32) + v115) >> 22);
  v124 = 9 * ((v123 + ~(v123 << 13)) ^ ((v123 + ~(v123 << 13)) >> 8));
  v125 = (v124 ^ (v124 >> 15)) + ~((v124 ^ (v124 >> 15)) << 27);
  v126 = (v125 >> 31) ^ v125;
  v127 = 1;
  v220 = v74;
  while (2)
  {
    v128 = v126 & v121;
    v129 = (_QWORD *)(v119 + 16 * v128);
    v130 = *v129;
    if (*v129 == -1)
    {
      v122 = v119 + 16 * v128;
      goto LABEL_228;
    }
    if (!v130)
    {
      if (v122)
      {
        *(_QWORD *)v122 = 0;
        *(_QWORD *)(v122 + 8) = 0;
        --*(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 16);
        *(_QWORD *)v122 = v115;
      }
      else
      {
        *v129 = v115;
        v122 = v119 + 16 * v128;
      }
      v133 = *(WTF::StringImpl ****)(v122 + 8);
      *(_QWORD *)(v122 + 8) = v113;
      if (v133)
      {
        v134 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v133, v112);
        WTF::fastFree((WTF *)v134, v135);
      }
      if (WebCore::counterMaps(void)::staticCounterMaps)
        v136 = *(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 12) + 1;
      else
        v136 = 1;
      *(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 12) = v136;
      v137 = WebCore::counterMaps(void)::staticCounterMaps;
      if (WebCore::counterMaps(void)::staticCounterMaps)
        v138 = *(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 12);
      else
        v138 = 0;
      v139 = (*(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 16) + v138);
      v140 = *(unsigned int *)(WebCore::counterMaps(void)::staticCounterMaps - 4);
      if (v140 > 0x400)
      {
        if (v140 <= 2 * v139)
          goto LABEL_248;
      }
      else if (3 * v140 <= 4 * v139)
      {
        if (!(_DWORD)v140)
        {
          v141 = 8;
LABEL_251:
          v122 = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(&WebCore::counterMaps(void)::staticCounterMaps, v141, (WTF **)v122);
          v137 = WebCore::counterMaps(void)::staticCounterMaps;
          if (WebCore::counterMaps(void)::staticCounterMaps)
            v140 = *(unsigned int *)(WebCore::counterMaps(void)::staticCounterMaps - 4);
          else
            v140 = 0;
          goto LABEL_258;
        }
LABEL_248:
        v141 = (_DWORD)v140 << (6 * *(_DWORD *)(WebCore::counterMaps(void)::staticCounterMaps - 12) >= (2 * v140));
        goto LABEL_251;
      }
LABEL_258:
      v113 = 0;
      v132 = (_QWORD *)(v137 + 16 * v140);
      v129 = (_QWORD *)v122;
      goto LABEL_259;
    }
    if (v130 != v115)
    {
LABEL_228:
      v126 = v127 + v128;
      ++v127;
      continue;
    }
    break;
  }
  if ((v120 & 1) != 0)
    v131 = 0;
  else
    v131 = *(unsigned int *)(v119 - 4);
  v132 = (_QWORD *)(v119 + 16 * v131);
  if (*(_DWORD *)v115 == 1)
    WTF::fastFree((WTF *)v115, v112);
  else
    --*(_DWORD *)v115;
LABEL_259:
  v143 = WebCore::counterMaps(void)::staticCounterMaps;
  if (WebCore::counterMaps(void)::staticCounterMaps)
    v143 = WebCore::counterMaps(void)::staticCounterMaps
         + 16 * *(unsigned int *)(WebCore::counterMaps(void)::staticCounterMaps - 4);
  if (v129 != (_QWORD *)v143)
  {
    while (!*(_QWORD *)(*v129 + 8))
    {
      v144 = v129 + 2;
      v129 = v132;
      if (v144 != v132)
      {
        v129 = v144;
        while ((unint64_t)(*v129 + 1) <= 1)
        {
          v129 += 2;
          if (v129 == v132)
          {
            v129 = v132;
            break;
          }
        }
      }
      if (v129 == (_QWORD *)v143)
      {
        v129 = (_QWORD *)v143;
        break;
      }
    }
  }
  v145 = (uint64_t *)v129[1];
  ++*(_DWORD *)v12;
  v146 = *v145;
  if (*v145
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v145, 8u, 0), (v146 = *v145) != 0))
  {
    v147 = *(_DWORD *)(v146 - 8);
  }
  else
  {
    v147 = 0;
  }
  v148 = 0;
  v149 = *(WTF::StringImpl **)a2;
  v150 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  v151 = 1;
  while (2)
  {
    v152 = v150 & v147;
    v153 = (WTF::StringImpl **)(v146 + 16 * v152);
    v154 = *v153;
    if (*v153 == (WTF::StringImpl *)-1)
    {
      v148 = (WTF::StringImpl **)(v146 + 16 * v152);
      goto LABEL_279;
    }
    if (!v154)
    {
      if (v148)
      {
        *v148 = 0;
        v148[1] = 0;
        --*(_DWORD *)(*v145 - 16);
        v149 = *(WTF::StringImpl **)a2;
        v153 = v148;
      }
      if (v149)
        *(_DWORD *)v149 += 2;
      *v153 = v149;
      v155 = v153[1];
      v153[1] = (WTF::StringImpl *)v12;
      if (v155)
      {
        if (*(_DWORD *)v155 == 1)
        {
          WebCore::CounterNode::~CounterNode(v155, v112);
          WTF::fastFree(v206, v207);
        }
        else
        {
          --*(_DWORD *)v155;
        }
      }
      v156 = *v145;
      if (*v145)
        v157 = *(_DWORD *)(v156 - 12) + 1;
      else
        v157 = 1;
      *(_DWORD *)(v156 - 12) = v157;
      v158 = *v145;
      if (*v145)
        v159 = *(_DWORD *)(v158 - 12);
      else
        v159 = 0;
      v160 = (*(_DWORD *)(v158 - 16) + v159);
      v161 = *(unsigned int *)(v158 - 4);
      if (v161 > 0x400)
      {
        if (v161 > 2 * v160)
          goto LABEL_302;
      }
      else
      {
        if (3 * v161 > 4 * v160)
          goto LABEL_302;
        if (!(_DWORD)v161)
        {
          v162 = 8;
          goto LABEL_301;
        }
      }
      v162 = (_DWORD)v161 << (6 * *(_DWORD *)(v158 - 12) >= (2 * v161));
LABEL_301:
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v145, v162, v153);
      goto LABEL_302;
    }
    if (v154 != v149)
    {
LABEL_279:
      v150 = v151 + v152;
      ++v151;
      continue;
    }
    break;
  }
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v12, v112);
    WTF::fastFree(v204, v205);
  }
  else
  {
    --*(_DWORD *)v12;
  }
LABEL_302:
  if (v113)
  {
    v163 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v113, v112);
    WTF::fastFree((WTF *)v163, v164);
  }
  *(_WORD *)((char *)v5 + 69) |= 8u;
  v165 = *(_QWORD *)(v12 + 48);
  if (!v165 || !*(_QWORD *)(v165 + 8))
  {
    v167 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 40);
    if ((*(_BYTE *)(v167 + 642) & 3u) - 3 <= 0xFFFFFFFD
      && (*(_BYTE *)(v167 + 462) & 0x10) == 0
      && (*(_DWORD *)(v167 + 636) & 0xC0000) == 0)
    {
      goto LABEL_323;
    }
    v210 = *((_DWORD *)v5 + 5);
    if ((v210 & 1) != 0)
      goto LABEL_426;
    v212 = v5;
    if ((*((_BYTE *)v5 + 45) & 2) != 0)
      v212 = *(WebCore **)(*((_QWORD *)v5 + 4) + 8);
    v213 = *((_DWORD *)v212 + 24) & 0x1F;
    if (v213 > 0x19 || ((1 << v213) & 0x3528029) == 0)
      goto LABEL_323;
    v214 = v5;
    if ((*((_BYTE *)v5 + 45) & 2) != 0)
    {
      v214 = *(WebCore **)(*((_QWORD *)v5 + 4) + 8);
      if ((v210 & 2) == 0)
      {
LABEL_440:
        if ((*((_QWORD *)v214 + 12) & 0x1FLL) == 0)
          goto LABEL_323;
      }
    }
    else if ((v210 & 2) == 0)
    {
      goto LABEL_440;
    }
LABEL_426:
    if ((*((_QWORD *)v5 + 12) & 0x1FLL) != 0x19)
    {
      v211 = *((unsigned __int8 *)v5 + 46);
      if ((v211 - 36) <= 4)
      {
        if (v211 == 36)
          goto LABEL_306;
      }
      else if (v211 != 63 && v211 != 35)
      {
        goto LABEL_306;
      }
    }
LABEL_323:
    v171 = (const WebCore::Node *)WebCore::parentOrPseudoHostElement(v5, (const WebCore::RenderElement *)v112);
    v172 = 0;
LABEL_324:
    while (2)
    {
      while (2)
      {
        while (2)
        {
          while (2)
          {
            if ((*((_BYTE *)v5 + 45) & 1) != 0)
            {
              IncludingPseudoSkippingChildren = 0;
            }
            else
            {
              IncludingPseudoSkippingChildren = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
              if (IncludingPseudoSkippingChildren && (*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19639F54CLL);
              }
            }
            v174 = v171;
            if (v172)
            {
              while (1)
              {
                IncludingPseudoSkippingChildren = WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren((WebCore::NodeTraversal *)IncludingPseudoSkippingChildren, v174, v170);
                if (!IncludingPseudoSkippingChildren)
                  goto LABEL_306;
                if ((*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) != 0)
                  goto LABEL_334;
                v174 = v171;
              }
            }
            while (1)
            {
              IncludingPseudoSkippingChildren = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)IncludingPseudoSkippingChildren, v174, v170);
              if (!IncludingPseudoSkippingChildren)
                goto LABEL_306;
              if ((*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) != 0)
                break;
              v174 = v171;
            }
LABEL_334:
            v5 = (WebCore *)(*(_QWORD *)(IncludingPseudoSkippingChildren + 64) & 0xFFFFFFFFFFFFLL);
            if (v172)
            {
              if (!v5)
              {
                while (1)
                {
                  IncludingPseudoSkippingChildren = WebCore::NodeTraversal::nextIncludingPseudoSkippingChildren((WebCore::NodeTraversal *)IncludingPseudoSkippingChildren, v171, v170);
                  if (!IncludingPseudoSkippingChildren)
                    goto LABEL_306;
                  if ((*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) != 0)
                  {
                    v5 = (WebCore *)(*(_QWORD *)(IncludingPseudoSkippingChildren + 64) & 0xFFFFFFFFFFFFLL);
                    if (v5)
                      break;
                  }
                }
              }
            }
            else if (!v5)
            {
              while (1)
              {
                IncludingPseudoSkippingChildren = WebCore::NodeTraversal::nextIncludingPseudo((WebCore::NodeTraversal *)IncludingPseudoSkippingChildren, v171, v170);
                if (!IncludingPseudoSkippingChildren)
                  goto LABEL_306;
                if ((*(_WORD *)(IncludingPseudoSkippingChildren + 28) & 8) != 0)
                {
                  v5 = (WebCore *)(*(_QWORD *)(IncludingPseudoSkippingChildren + 64) & 0xFFFFFFFFFFFFLL);
                  if (v5)
                    break;
                }
              }
            }
            if ((*((_BYTE *)v5 + 45) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19639F57CLL);
            }
            v175 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 40);
            if ((*(_BYTE *)(v175 + 642) & 3u) - 3 <= 0xFFFFFFFD
              && (*(_BYTE *)(v175 + 462) & 0x10) == 0
              && (*(_DWORD *)(v175 + 636) & 0xC0000) == 0)
            {
              goto LABEL_350;
            }
            v190 = *((_DWORD *)v5 + 5);
            v191 = *((_QWORD *)v5 + 12);
            if ((v190 & 1) != 0)
            {
              v192 = *((_QWORD *)v5 + 12) & 0x1FLL;
            }
            else
            {
              if ((v191 & 0x1Fu) > 0x19 || ((1 << (v191 & 0x1F)) & 0x3528029) == 0)
                goto LABEL_350;
              v192 = *((_QWORD *)v5 + 12) & 0x1FLL;
              if ((v190 & 2) == 0 && !v192)
                goto LABEL_350;
            }
            if (v192 != 25)
            {
              v193 = *((unsigned __int8 *)v5 + 46);
              if ((v193 - 36) > 4 || v193 == 36)
              {
                v172 = v193 != 35 && v193 != 63;
                goto LABEL_351;
              }
            }
LABEL_350:
            v172 = 0;
LABEL_351:
            if ((*(_WORD *)((_BYTE *)v5 + 69) & 8) == 0)
              continue;
            break;
          }
          WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::find(&WebCore::counterMaps(void)::staticCounterMaps, (uint64_t)v5, (uint64_t)&v221);
          v178 = **(_QWORD **)(v222 + 8);
          if (!v178)
            continue;
          break;
        }
        v179 = 0;
        for (k = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; k = ++v179 + v181)
        {
          v181 = k & *(_DWORD *)(v178 - 8);
          v182 = *(_QWORD *)(v178 + 16 * v181);
          if (v182 != -1)
          {
            if (!v182)
              goto LABEL_324;
            if (v182 == *(_QWORD *)a2)
              break;
          }
        }
        v183 = *(_QWORD *)(v178 + 16 * v181 + 8);
        if (!v183)
          continue;
        break;
      }
      ++*(_DWORD *)v183;
      v184 = *(_QWORD *)(v183 + 48);
      if (!v184 || !*(_QWORD *)(v184 + 8))
      {
        if (v171 == (const WebCore::Node *)WebCore::parentOrPseudoHostElement(v5, (const WebCore::RenderElement *)v112)
          && (*(_BYTE *)(v183 + 16) & 1) != 0)
        {
          v187 = 1;
LABEL_372:
          if (*(_DWORD *)v183 == 1)
          {
            WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v183, v112);
            WTF::fastFree(v188, v189);
          }
          else
          {
            --*(_DWORD *)v183;
          }
          v172 = 1;
          if (!v187)
            continue;
          goto LABEL_306;
        }
        v185 = *(_QWORD *)(v12 + 80);
        if (v185)
          v186 = *(WebCore::CounterNode **)(v185 + 8);
        else
          v186 = 0;
        WebCore::CounterNode::insertAfter((WebCore::CounterNode *)v12, (WebCore::CounterNode *)v183, v186, a2);
      }
      break;
    }
    v187 = 0;
    goto LABEL_372;
  }
LABEL_306:
  if (!v75)
    goto LABEL_309;
  if (*(_DWORD *)v75 == 1)
  {
    WebCore::CounterNode::~CounterNode(v75, v112);
    WTF::fastFree(v198, v199);
    if (v220)
      goto LABEL_310;
  }
  else
  {
    --*(_DWORD *)v75;
LABEL_309:
    if (v220)
    {
LABEL_310:
      if (*(_DWORD *)v220 == 1)
      {
        WebCore::CounterNode::~CounterNode(v220, v112);
        WTF::fastFree(v200, v201);
      }
      else
      {
        --*(_DWORD *)v220;
      }
    }
  }
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)v12, v112);
    WTF::fastFree(v196, v197);
  }
  else
  {
    --*(_DWORD *)v12;
  }
  return v12;
}

WTF::StringImpl ***WebCore::RenderCounter::destroyCounterNodes(WebCore::RenderCounter *this, WebCore::RenderElement *a2)
{
  void *v3;
  WebCore::CounterNode *v4;
  WTF::StringImpl ***result;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl ***v13;
  void *v14;
  WTF::StringImpl ***v15;

  {
    WebCore::counterMaps(void)::staticCounterMaps = 0;
    *(_QWORD *)&dword_1EE2F9370 = 0;
  }
  WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::take((uint64_t)&WebCore::counterMaps(void)::staticCounterMaps, this, &v15);
  result = v15;
  v6 = *v15;
  if (*v15)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[2 * v7];
    if (*((_DWORD *)v6 - 3))
    {
      v9 = *v15;
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *v15;
        while ((unint64_t)*v9 + 1 <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            break;
          }
        }
      }
      if (v6)
        goto LABEL_11;
      goto LABEL_15;
    }
    v9 = &v6[2 * v7];
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = &v6[2 * v7];
  if (v6)
  {
LABEL_11:
    v11 = &v6[2 * *((unsigned int *)v6 - 1)];
    goto LABEL_16;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (v11 != v9)
  {
    do
    {
      WebCore::destroyCounterNodeWithoutMapRemoval((uint64_t *)v9, v9[1], v4);
      v12 = v9 + 2;
      v9 = v8;
      if (v12 != v8)
      {
        v9 = v12;
        while ((unint64_t)*v9 + 1 <= 1)
        {
          v9 += 2;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
    }
    while (v9 != v11);
    result = v15;
  }
  *(_WORD *)((char *)this + 69) &= ~8u;
  v15 = 0;
  if (result)
  {
    v13 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(result, v3);
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)v13, v14);
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::take@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  void *v28;
  WTF::StringImpl ***v29;
  void *v30;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (v6 > v7)
    WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences((uint64_t *)a1, a2);
  result = a2[1];
  if (!result)
    goto LABEL_12;
  if (!*(_QWORD *)(result + 8))
    goto LABEL_12;
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_12;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  for (i = 1; ; v14 = (v16 + i++) & v10)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v9 + 16 * v14);
    if (v17 != -1)
    {
      if (!v17)
        goto LABEL_12;
      if (v17 == result)
        break;
    }
  }
  if ((_DWORD)v16 != *(_DWORD *)(v9 - 4))
  {
    v18 = (_QWORD *)(v9 + 16 * v16);
    v20 = v18[1];
    v19 = v18 + 1;
    v18[1] = 0;
    *a3 = v20;
    v21 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1 || (v21 += 16 * *(unsigned int *)(v21 - 4), (_QWORD *)v21 != v18))
    {
      if ((_QWORD *)v21 != v18)
      {
        *v18 = 0;
        if (*(_DWORD *)result == 1)
        {
          WTF::fastFree((WTF *)result, a2);
          result = *v19;
          *v18 = -1;
          *v19 = 0;
          if (result)
          {
            v29 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable((WTF::StringImpl ***)result, v28);
            result = WTF::fastFree((WTF *)v29, v30);
          }
        }
        else
        {
          --*(_DWORD *)result;
          *v18 = -1;
          *v19 = 0;
        }
        ++*(_DWORD *)(*(_QWORD *)a1 - 16);
        v22 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v26 >> 1, 0);
        }
      }
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
  }
  return result;
}

uint64_t *WebCore::destroyCounterNodeWithoutMapRemoval(uint64_t *this, const WTF::AtomString *a2, WebCore::CounterNode *a3)
{
  uint64_t v4;
  const WTF::AtomString *v5;
  uint64_t *v6;
  const WTF::AtomString *v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::AtomString *v10;
  const WTF::AtomString *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WebCore::CounterNode *v15;
  uint64_t v16;
  int v17;
  unsigned int i;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  _QWORD v26[6];

  v4 = *((_QWORD *)a2 + 10);
  if (v4)
  {
    v5 = *(const WTF::AtomString **)(v4 + 8);
    if (v5)
    {
      v6 = this;
      do
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 10);
        if (!v8)
          break;
        v5 = *(const WTF::AtomString **)(v8 + 8);
      }
      while (v5);
      ++*(_DWORD *)v7;
      while (1)
      {
        if (v7 == a2)
        {
          if (*(_DWORD *)a2 == 1)
          {
            WebCore::CounterNode::~CounterNode(a2, a2);
            this = (uint64_t *)WTF::fastFree(v24, v25);
          }
          else
          {
            --*(_DWORD *)a2;
          }
          goto LABEL_37;
        }
        v9 = *((_QWORD *)v7 + 7);
        if (!v9)
          break;
        v10 = *(const WTF::AtomString **)(v9 + 8);
        if (!v10)
          break;
        do
        {
          v11 = v10;
          v12 = *((_QWORD *)v10 + 10);
          if (!v12)
            break;
          v10 = *(const WTF::AtomString **)(v12 + 8);
        }
        while (v10);
        v13 = 0;
        v14 = *((_QWORD *)v7 + 6);
        ++*(_DWORD *)v11;
        if (v14)
          goto LABEL_17;
        v15 = 0;
LABEL_19:
        WebCore::CounterNode::removeChild(v15, v7);
        {
          WebCore::counterMaps(void)::staticCounterMaps = 0;
          *(_QWORD *)&dword_1EE2F9370 = 0;
        }
        WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::find(&WebCore::counterMaps(void)::staticCounterMaps, *(_QWORD *)(*((_QWORD *)v7 + 4) + 8), (uint64_t)v26);
        this = *(uint64_t **)(v26[1] + 8);
        v16 = *this;
        if (*this)
        {
          v17 = 0;
          for (i = *(_DWORD *)(*v6 + 16) >> 8; ; i = v17 + v19)
          {
            v19 = i & *(_DWORD *)(v16 - 8);
            v20 = *(_QWORD *)(v16 + 16 * v19);
            if (v20 != -1)
            {
              if (!v20)
                goto LABEL_29;
              if (v20 == *v6)
                break;
            }
            ++v17;
          }
          if ((_DWORD)v19 != *(_DWORD *)(v16 - 4))
            this = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::remove(this, (WTF::StringImpl **)(v16 + 16 * v19));
        }
LABEL_29:
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::CounterNode::~CounterNode(v7, a2);
          this = (uint64_t *)WTF::fastFree(v21, v22);
        }
        else
        {
          --*(_DWORD *)v7;
        }
        v7 = v11;
        if ((v13 & 1) != 0)
          goto LABEL_37;
      }
      v14 = *((_QWORD *)v7 + 6);
      if (!v14)
      {
        v11 = 0;
        v15 = 0;
        v13 = 1;
        goto LABEL_19;
      }
      v11 = *(const WTF::AtomString **)(v14 + 8);
      if (v11)
      {
        v13 = 0;
        ++*(_DWORD *)v11;
      }
      else
      {
        v13 = 1;
      }
LABEL_17:
      v15 = *(WebCore::CounterNode **)(v14 + 8);
      goto LABEL_19;
    }
  }
LABEL_37:
  v23 = *((_QWORD *)a2 + 6);
  if (v23)
  {
    this = *(uint64_t **)(v23 + 8);
    if (this)
      return (uint64_t *)WebCore::CounterNode::removeChild((WebCore::CounterNode *)this, a2);
  }
  return this;
}

uint64_t *WebCore::RenderCounter::destroyCounterNode(WebCore::RenderCounter *this, WebCore::RenderElement *a2, const WTF::AtomString *a3)
{
  uint64_t *result;
  WebCore::CounterNode *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  WTF::StringImpl **v13;
  const WTF::AtomString *v14;
  void *v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  {
    WebCore::counterMaps(void)::staticCounterMaps = 0;
    *(_QWORD *)&dword_1EE2F9370 = 0;
  }
  result = WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::find(&WebCore::counterMaps(void)::staticCounterMaps, (uint64_t)this, (uint64_t)&v18);
  {
    v6 = WebCore::counterMaps(void)::staticCounterMaps;
    if (WebCore::counterMaps(void)::staticCounterMaps)
      v6 = WebCore::counterMaps(void)::staticCounterMaps
         + 16 * *(unsigned int *)(WebCore::counterMaps(void)::staticCounterMaps - 4);
  }
  else
  {
    v6 = 0;
    WebCore::counterMaps(void)::staticCounterMaps = 0;
    *(_QWORD *)&dword_1EE2F9370 = 0;
  }
  if (v19 != v6)
  {
    result = *(uint64_t **)(v19 + 8);
    v7 = *result;
    if (*result)
    {
      v8 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v8 + v10)
      {
        v10 = i & *(_DWORD *)(v7 - 8);
        v11 = *(_QWORD *)(v7 + 16 * v10);
        if (v11 != -1)
        {
          if (!v11)
            return result;
          if (v11 == *(_QWORD *)a2)
            break;
        }
        ++v8;
      }
      v12 = *(_DWORD *)(v7 - 4);
      if (v12 != (_DWORD)v10)
      {
        v13 = (WTF::StringImpl **)(v7 + 16 * v10);
        v14 = v13[1];
        if (v14)
        {
          v13[1] = 0;
          v7 = *result;
          if (!*result)
            goto LABEL_18;
          v12 = *(_DWORD *)(v7 - 4);
        }
        v7 += 16 * v12;
        if ((WTF::StringImpl **)v7 == v13)
        {
LABEL_20:
          if (v14)
          {
            result = WebCore::destroyCounterNodeWithoutMapRemoval((uint64_t *)a2, v14, v5);
            if (*(_DWORD *)v14 == 1)
            {
              WebCore::CounterNode::~CounterNode(v14, v15);
              return (uint64_t *)WTF::fastFree(v16, v17);
            }
            else
            {
              --*(_DWORD *)v14;
            }
          }
          return result;
        }
LABEL_18:
        if ((WTF::StringImpl **)v7 != v13)
          result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::remove(result, v13);
        goto LABEL_20;
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::find@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  ++*((_DWORD *)result + 2);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = *result;
    if (*result)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = v9;
        v12 = *(_QWORD *)(v4 + 16 * v9);
        if (v12 != -1)
        {
          if (!v12)
          {
            v19 = *(unsigned int *)(v4 - 4);
            v16 = v4 + 16 * v19;
            v17 = v16;
            goto LABEL_17;
          }
          if (v12 == v3)
            break;
        }
        v9 = (v11 + i) & v5;
      }
      v16 = v4 + 16 * v11;
      v19 = *(unsigned int *)(v4 - 4);
      v17 = v4 + 16 * v19;
LABEL_17:
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v16;
      v20 = (_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 16) = v17;
      v18 = v4 + 16 * v19;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
      v20 = (_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v4 + 16 * v19;
    *(_DWORD *)(a3 + 40) = 0;
LABEL_19:
    while (v16 != v18 && !*(_QWORD *)(*(_QWORD *)v16 + 8))
    {
      v21 = v16 + 16;
      *v20 = v16 + 16;
      v16 = v17;
      if (v21 != v17)
      {
        v16 = v21;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 16;
          *v20 = v16;
          if (v16 == v17)
          {
            v16 = v17;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v13 = *result;
    if (*result)
    {
      v14 = *(unsigned int *)(v13 - 4);
      v15 = v13 + 16 * v14;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = v15;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      *(_QWORD *)a3 = result;
      *(_QWORD *)(a3 + 8) = 0;
    }
    *(_QWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 24) = v15;
    *(_QWORD *)(a3 + 32) = v13 + 16 * v14;
    *(_DWORD *)(a3 + 40) = 0;
  }
  return result;
}

WTF::StringImpl ***WebCore::RenderCounter::rendererStyleChangedSlowCase(WTF::StringImpl ***this, WebCore::RenderElement *a2, const WebCore::RenderStyle *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderElement *v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  WebCore::RenderElement *v16;
  WebCore::RenderElement *v17;
  WebCore::RenderElement *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderElement *v26;
  WebCore::RenderElement *v27;
  uint64_t v28;
  WebCore::RenderElement *v29;
  WebCore::RenderElement *v30;
  uint64_t v31;
  int v32;
  int i;
  unsigned int v34;
  uint64_t v35;
  WebCore::RenderElement *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int j;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;

  v6 = (uint64_t)this;
  v7 = *((_BYTE *)this + 45);
  if ((v7 & 1) == 0
    && (this = (WTF::StringImpl ***)this[3][1]) != 0
    && (~*((unsigned __int16 *)this + 14) & 0x408) == 0
    && (this = (WTF::StringImpl ***)((uint64_t (*)(WTF::StringImpl ***, WebCore::RenderElement *, const WebCore::RenderStyle *, const WebCore::RenderStyle *))(*this)[46])(this, a2, a3, a4), v7 = *(_BYTE *)(v6 + 45), (_DWORD)this))
  {
    if ((*(_BYTE *)(v6 + 45) & 1) != 0)
      v19 = 0;
    else
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8);
    if ((~*(unsigned __int16 *)(v19 + 28) & 0x408) != 0
      || (this = (WTF::StringImpl ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 368))(v19), !(_DWORD)this))
    {
      __break(0xC471u);
      JUMPOUT(0x1963A01B4);
    }
    v8 = *(_QWORD *)(v19 + 112);
    if (!v8)
      return this;
  }
  else
  {
    if ((v7 & 1) != 0)
      return this;
    v8 = *(_QWORD *)(v6 + 24);
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return this;
  if ((*(_WORD *)(v9 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963A0158);
  }
  v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v10)
    return this;
  if ((*(_BYTE *)(v10 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963A0178);
  }
  if (a2)
  {
    v11 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
    v12 = *(_QWORD *)(v11 + 192);
    if (v12)
    {
      if (*(_DWORD *)(v12 - 12))
      {
        v21 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 40);
        v22 = *(_QWORD *)(v21 + 192);
        if (!v22 || !*(_DWORD *)(v22 - 12))
        {
          if ((*(_WORD *)(v6 + 69) & 8) != 0)
            return WebCore::RenderCounter::destroyCounterNodes((WebCore::RenderCounter *)v6, a2);
          return this;
        }
        v23 = *(unsigned int *)(v22 - 4);
        if ((_DWORD)v23)
        {
          v24 = 32 * v23;
          v25 = *(_QWORD *)(v21 + 192);
          while ((unint64_t)(*(_QWORD *)v25 + 1) <= 1)
          {
            v25 += 32;
            v24 -= 32;
            if (!v24)
              goto LABEL_54;
          }
        }
        else
        {
          v25 = *(_QWORD *)(v21 + 192);
        }
        v37 = v22 + 32 * v23;
LABEL_76:
        if (v25 == v37)
        {
LABEL_54:
          v26 = *(WebCore::RenderElement **)(v11 + 192);
          if (v26)
          {
            v28 = *((unsigned int *)v26 - 1);
            v29 = (WebCore::RenderElement *)((char *)v26 + 32 * v28);
            if (*((_DWORD *)v26 - 3))
            {
              v27 = v26;
              if ((_DWORD)v28)
              {
                v49 = 32 * v28;
                v27 = v26;
                while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
                {
                  v27 = (WebCore::RenderElement *)((char *)v27 + 32);
                  v49 -= 32;
                  if (!v49)
                  {
                    v27 = v29;
                    goto LABEL_57;
                  }
                }
              }
              goto LABEL_57;
            }
            v27 = (WebCore::RenderElement *)((char *)v26 + 32 * v28);
          }
          else
          {
            v27 = 0;
            v28 = 0;
          }
          v29 = (WebCore::RenderElement *)((char *)v26 + 32 * v28);
LABEL_57:
          if (v26)
            v30 = (WebCore::RenderElement *)((char *)v26 + 32 * *((unsigned int *)v26 - 1));
          else
            v30 = 0;
          while (v27 != v30)
          {
            v31 = *(_QWORD *)(v21 + 192);
            if (v31)
            {
              v32 = 0;
              for (i = *(_DWORD *)(*(_QWORD *)v27 + 16) >> 8; ; i = v32 + v34)
              {
                v34 = i & *(_DWORD *)(v31 - 8);
                v35 = *(_QWORD *)(v31 + 32 * v34);
                if (v35 != -1)
                {
                  if (!v35)
                    goto LABEL_66;
                  if (v35 == *(_QWORD *)v27)
                    break;
                }
                ++v32;
              }
            }
            else
            {
LABEL_66:
              this = (WTF::StringImpl ***)WebCore::RenderCounter::destroyCounterNode((WebCore::RenderCounter *)v6, v27, a3);
            }
            v36 = (WebCore::RenderElement *)((char *)v27 + 32);
            v27 = v29;
            if (v36 != v29)
            {
              v27 = v36;
              while ((unint64_t)(*(_QWORD *)v27 + 1) <= 1)
              {
                v27 = (WebCore::RenderElement *)((char *)v27 + 32);
                if (v27 == v29)
                {
                  v27 = v29;
                  break;
                }
              }
            }
          }
          return this;
        }
        v38 = *(_QWORD *)(v11 + 192);
        if (!v38)
          goto LABEL_106;
        v39 = 0;
        for (j = *(_DWORD *)(*(_QWORD *)v25 + 16) >> 8; ; j = ++v39 + v41)
        {
          v41 = j & *(_DWORD *)(v38 - 8);
          v42 = *(_QWORD *)(v38 + 32 * v41);
          if (v42 != -1)
          {
            if (!v42)
              goto LABEL_106;
            if (v42 == *(_QWORD *)v25)
              break;
          }
        }
        if ((_DWORD)v41 == *(_DWORD *)(v38 - 4))
        {
LABEL_106:
          this = (WTF::StringImpl ***)WebCore::makeCounterNode((WebCore *)v6, (WebCore::RenderElement *)v25, 0);
LABEL_107:
          while (1)
          {
            v25 += 32;
            if (v25 == v37)
              goto LABEL_54;
            if ((unint64_t)(*(_QWORD *)v25 + 1) > 1)
              goto LABEL_76;
          }
        }
        v43 = v38 + 32 * v41;
        v44 = *(unsigned __int8 *)(v25 + 12);
        if (*(_BYTE *)(v43 + 12))
          v45 = v44 == 0;
        else
          v45 = 1;
        if (v45)
        {
          if ((*(_BYTE *)(v43 + 12) != 0) != (v44 != 0))
            goto LABEL_105;
        }
        else if (*(_DWORD *)(v43 + 8) != *(_DWORD *)(v25 + 8))
        {
          goto LABEL_105;
        }
        v46 = v38 + 32 * v41;
        v47 = *(unsigned __int8 *)(v25 + 20);
        if (*(_BYTE *)(v46 + 20))
          v48 = v47 == 0;
        else
          v48 = 1;
        if (v48)
        {
          if ((*(_BYTE *)(v46 + 20) != 0) == (v47 != 0))
          {
LABEL_100:
            if (*(_BYTE *)(v38 + 32 * v41 + 28) && *(_BYTE *)(v25 + 28))
            {
              if (*(_DWORD *)(v38 + 32 * v41 + 24) == *(_DWORD *)(v25 + 24))
                goto LABEL_107;
            }
            else if ((*(_BYTE *)(v38 + 32 * v41 + 28) != 0) == (*(_BYTE *)(v25 + 28) != 0))
            {
              goto LABEL_107;
            }
          }
        }
        else if (*(_DWORD *)(v46 + 16) == *(_DWORD *)(v25 + 16))
        {
          goto LABEL_100;
        }
LABEL_105:
        WebCore::RenderCounter::destroyCounterNode((WebCore::RenderCounter *)v6, (WebCore::RenderElement *)v25, a3);
        goto LABEL_106;
      }
    }
  }
  if ((*(_WORD *)(v6 + 69) & 8) != 0)
    this = WebCore::RenderCounter::destroyCounterNodes((WebCore::RenderCounter *)v6, a2);
  v13 = *(WebCore::RenderElement **)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 192);
  if (v13)
  {
    v15 = *((unsigned int *)v13 - 1);
    v16 = (WebCore::RenderElement *)((char *)v13 + 32 * v15);
    if (*((_DWORD *)v13 - 3))
    {
      v14 = *(WebCore::RenderElement **)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 192);
      if ((_DWORD)v15)
      {
        v20 = 32 * v15;
        v14 = v13;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 = (WebCore::RenderElement *)((char *)v14 + 32);
          v20 -= 32;
          if (!v20)
          {
            v14 = v16;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v14 = (WebCore::RenderElement *)((char *)v13 + 32 * v15);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (WebCore::RenderElement *)((char *)v13 + 32 * v15);
LABEL_18:
  if (v13)
    v17 = (WebCore::RenderElement *)((char *)v13 + 32 * *((unsigned int *)v13 - 1));
  else
    v17 = 0;
  while (v14 != v17)
  {
    this = (WTF::StringImpl ***)WebCore::makeCounterNode((WebCore *)v6, v14, 0);
    v18 = (WebCore::RenderElement *)((char *)v14 + 32);
    v14 = v16;
    if (v18 != v16)
    {
      v14 = v18;
      while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
      {
        v14 = (WebCore::RenderElement *)((char *)v14 + 32);
        if (v14 == v16)
        {
          v14 = v16;
          break;
        }
      }
    }
  }
  return this;
}

const char *WebCore::RenderAttachment::renderName(WebCore::RenderAttachment *this)
{
  return "RenderAttachment";
}

BOOL WebCore::RenderAttachment::canHaveChildren(WebCore::RenderAttachment *this)
{
  return *((_BYTE *)this + 221) || *((_BYTE *)this + 222) != 0;
}

BOOL WebCore::RenderAttachment::canHaveGeneratedChildren(WebCore::RenderAttachment *this)
{
  return *((_BYTE *)this + 221) || *((_BYTE *)this + 222) != 0;
}

uint64_t WebCore::RenderReplaced::canBeSelectionLeaf(WebCore::RenderReplaced *this)
{
  return 1;
}

uint64_t WebCore::RenderObject::shouldPaintSelectionGaps(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderElement::paintRectToClipOutFromBorder(WebCore::RenderElement *this, const WebCore::LayoutRect *a2)
{
  return 0;
}

uint64_t WebCore::RenderBox::isSelfCollapsingBlock(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::firstLineBaseline(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::lastLineBaseline(WebCore::RenderBox *this)
{
  return 0;
}

uint64_t WebCore::RenderBox::inlineBlockBaseline()
{
  return 0;
}

void WebCore::RenderBox::createAnonymousBoxWithSameTypeAs(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::RenderBox::isChildEligibleForMarginTrim()
{
  return 0;
}

uint64_t WebCore::RenderReplaced::minimumReplacedHeight(WebCore::RenderReplaced *this)
{
  return 0;
}

uint64_t WebCore::RenderReplaced::hasRelativeIntrinsicLogicalWidth(WebCore::RenderReplaced *this)
{
  return 0;
}

uint64_t WebCore::RenderReplaced::embeddedContentBox(WebCore::RenderReplaced *this)
{
  return 0;
}

uint64_t WebCore::RenderAttachment::shouldDrawSelectionTint(WebCore::RenderAttachment *this)
{
  return *((unsigned __int8 *)this + 222);
}

uint64_t WebCore::RenderObject::selectionRectForRepaint(WebCore::RenderObject *this, const WebCore::RenderLayerModelObject *a2)
{
  return 0;
}

uint64_t WebCore::RenderObject::computeBackgroundIsKnownToBeObscured(WebCore::RenderObject *this, const WebCore::LayoutPoint *a2)
{
  return 0;
}

uint64_t WebCore::RenderObject::minPreferredLogicalWidth(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::maxPreferredLogicalWidth(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderObject::outlineBoundsForRepaint()
{
  return 0;
}

uint64_t WebCore::RenderLayerModelObject::backgroundIsKnownToBeOpaqueInRect(WebCore::RenderLayerModelObject *this, const WebCore::LayoutRect *a2)
{
  return 0;
}

uint64_t WebCore::RenderLayerModelObject::applyCachedClipAndScrollPosition()
{
  return 0;
}

uint64_t WebCore::RenderLayerModelObject::isScrollableOrRubberbandableBox(WebCore::RenderLayerModelObject *this)
{
  return 0;
}

const char *WebCore::RenderButton::renderName(WebCore::RenderButton *this)
{
  return "RenderButton";
}

uint64_t WebCore::RenderButton::createsAnonymousWrapper(WebCore::RenderButton *this)
{
  return 1;
}

uint64_t WebCore::RenderButton::isFlexibleBoxImpl(WebCore::RenderButton *this)
{
  return 1;
}

const char *WebCore::RenderCombineText::renderName(WebCore::RenderCombineText *this)
{
  return "RenderCombineText";
}

uint64_t WebCore::RenderObject::lastChildSlow(WebCore::RenderObject *this)
{
  return 0;
}

uint64_t WebCore::RenderText::canHaveChildren(WebCore::RenderText *this)
{
  return 0;
}

uint64_t WebCore::RenderText::nodeAtPoint()
{
  return 0;
}

uint64_t WebCore::RenderText::length(WebCore::RenderText *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 13);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 0;
}

uint64_t WebCore::RenderText::canBeSelectionLeaf(WebCore::RenderText *this)
{
  return 1;
}

uint64_t WebCore::RenderCounter::canBeSelectionLeaf(WebCore::RenderCounter *this)
{
  return 0;
}

BOOL WebCore::RenderBox::hasHorizontalLayoutOverflow(WebCore::RenderBox *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v7;
  int v8;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  v3 = *(_QWORD *)(v1 + 12);
  v4 = WebCore::RenderBox::flippedClientBoxRect(this);
  if ((int)v2 < (int)v4)
    return 1;
  v7 = v2 + v3;
  if (__OFADD__(v2, (_DWORD)v3))
    v7 = (v2 >> 31) + 0x7FFFFFFF;
  v8 = (v4 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(v4, v5))
    v8 = v4 + v5;
  return v7 > v8;
}

BOOL WebCore::RenderBox::hasVerticalLayoutOverflow(WebCore::RenderBox *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v7;
  int v8;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 12);
  v4 = WebCore::RenderBox::flippedClientBoxRect(this);
  if (v2 < SHIDWORD(v4))
    return 1;
  v7 = v2 + HIDWORD(v3);
  if (__OFADD__(v2, HIDWORD(v3)))
    v7 = (v2 >> 31) + 0x7FFFFFFF;
  v8 = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v4), v5))
    v8 = HIDWORD(v4) + v5;
  return v7 > v8;
}

WebCore::LogicalSelectionOffsetCaches *WebCore::LogicalSelectionOffsetCaches::LogicalSelectionOffsetCaches(WebCore::LogicalSelectionOffsetCaches *this, WebCore::RenderBlock *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  BOOL v7;
  char v8;
  _BYTE *v9;
  BOOL v10;
  char v11;
  _BYTE *v12;
  BOOL v13;
  char v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) &= 0xF8u;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_QWORD *)this + 4) = 0;
  v4 = (_QWORD *)((char *)this + 32);
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) &= 0xF8u;
  *((_QWORD *)this + 8) = 0;
  v5 = (_QWORD *)((char *)this + 64);
  *(_QWORD *)((char *)this + 52) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) &= 0xF8u;
  *(_QWORD *)((char *)this + 84) = 0;
  v6 = WebCore::RenderObject::containingBlockForPositionType(6, (uint64_t)a2);
  *(_QWORD *)this = v6;
  if (!v6)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 1672))(v6) & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 23) & 0x10) != 0)
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 648))(*(_QWORD *)this) != 0;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v7 = 1;
LABEL_6:
  v8 = (*((_BYTE *)this + 16) | v7) & 0xF9;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = v8;
  v9 = WebCore::RenderObject::containingBlockForPositionType(2, (uint64_t)a2);
  *((_QWORD *)this + 4) = v9;
  if (!v9)
    goto LABEL_10;
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 1672))(v9) & 1) != 0)
  {
    v10 = 1;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(*v4 + 23) & 0x10) != 0)
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 648))(*v4) != 0;
  else
LABEL_10:
    v10 = 0;
LABEL_11:
  v11 = (*((_BYTE *)this + 48) | v10) & 0xF9;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = v11;
  v12 = WebCore::RenderObject::containingBlockForPositionType(0, (uint64_t)a2);
  *((_QWORD *)this + 8) = v12;
  if (!v12)
  {
LABEL_15:
    v13 = 0;
    goto LABEL_16;
  }
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 1672))(v12) & 1) == 0)
  {
    if ((*(_BYTE *)(*v5 + 23) & 0x10) != 0)
    {
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 648))(*v5) != 0;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v13 = 1;
LABEL_16:
  v14 = (*((_BYTE *)this + 80) | v13) & 0xF9;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = v14;
  return this;
}

_QWORD *WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::appendOrMoveToLast<WebCore::RenderBox>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  WTF *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  WTF *v34;

  v6 = *((_DWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 6) + 1;
  *((_DWORD *)a2 + 6) = v7;
  if (v7 > v6)
    WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences((uint64_t)a2);
  v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a3;
    v34 = *(WTF **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v8;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, a2);
        v8 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  *(_DWORD *)v8 += 2;
  v9 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::expand(a2, 0), (v9 = *a2) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = 0;
  v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v10;
    v18 = (_QWORD *)(v9 + 8 * v17);
    result = (_QWORD *)*v18;
    if (!*v18)
    {
      if (v11)
      {
        *v11 = 0;
        --*(_DWORD *)(*a2 - 16);
        v18 = v11;
      }
      result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      result[1] = 0;
      result[2] = 0;
      *result = v8;
      *v18 = result;
      v28 = *a2;
      if (*a2)
        v29 = *(_DWORD *)(v28 - 12) + 1;
      else
        v29 = 1;
      *(_DWORD *)(v28 - 12) = v29;
      v30 = *a2;
      if (*a2)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      v32 = (*(_DWORD *)(v30 - 16) + v31);
      v33 = *(unsigned int *)(v30 - 4);
      if (v33 > 0x400)
      {
        if (v33 > 2 * v32)
          goto LABEL_31;
      }
      else if (3 * v33 > 4 * v32)
      {
LABEL_31:
        v24 = 0;
LABEL_32:
        v22 = 1;
        goto LABEL_17;
      }
      v18 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::expand(a2, (_QWORD **)v18);
      v24 = 0;
      result = (_QWORD *)*v18;
      goto LABEL_32;
    }
    if (result != (_QWORD *)-1)
      break;
    v11 = (_QWORD *)(v9 + 8 * v17);
LABEL_10:
    v15 = i + v17;
  }
  if (*result != v8)
    goto LABEL_10;
  v20 = result[1];
  v21 = result[2];
  if (v20)
  {
    *(_QWORD *)(v20 + 16) = v21;
    v21 = result[2];
  }
  else
  {
    a2[1] = v21;
  }
  v22 = 0;
  if (v21)
    v23 = (_QWORD *)(v21 + 8);
  else
    v23 = a2 + 2;
  *v23 = v20;
  v24 = (WTF *)v8;
LABEL_17:
  v25 = a2[2];
  result[1] = v25;
  result[2] = 0;
  if (v25)
    v26 = (_QWORD *)(v25 + 16);
  else
    v26 = a2 + 1;
  *v26 = result;
  a2[2] = result;
  v27 = (_QWORD *)*v18;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v22;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      result = (_QWORD *)WTF::fastFree(v24, a2);
    else
      --*(_DWORD *)v24;
  }
  if (*(_DWORD *)v8 == 1)
    return (_QWORD *)WTF::fastFree((WTF *)v8, a2);
  --*(_DWORD *)v8;
  return result;
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>::customDeleteBucket(WTF **a1, void *a2)
{
  WTF *result;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v4 = a1[1];
  *a1 = (WTF *)-1;
  a1[1] = 0;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 1);
    while (v5)
    {
      v6 = v5;
      v5 = (WTF *)*((_QWORD *)v5 + 2);
      v7 = *(WTF **)v6;
      *(_QWORD *)v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      WTF::fastFree(v6, a2);
    }
    if (*(_QWORD *)v4)
      WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
    return (WTF *)WTF::fastFree(v4, a2);
  }
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF **v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF **v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  WTF **result;
  WTF **v43;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WTF **)(v15 + 16 * v22);
          v25 = v24[1];
          v24[1] = 0;
          if (v25)
          {
            v26 = (WTF *)*((_QWORD *)v25 + 1);
            if (v26)
            {
              v43 = a3;
              do
              {
                v40 = v26;
                v26 = (WTF *)*((_QWORD *)v26 + 2);
                v41 = *(WTF **)v40;
                *(_QWORD *)v40 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 1)
                    WTF::fastFree(v41, v9);
                  else
                    --*(_DWORD *)v41;
                }
                WTF::fastFree(v40, v9);
                a3 = v43;
              }
              while (v26);
            }
            if (*(_QWORD *)v25)
              WTF::fastFree((WTF *)(*(_QWORD *)v25 - 16), v9);
            WTF::fastFree(v25, v9);
            v27 = *v24;
            *v24 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 1)
                WTF::fastFree(v27, v9);
              else
                --*(_DWORD *)v27;
            }
          }
          else
          {
            *v24 = 0;
          }
          v28 = *v13;
          *v13 = 0;
          *v24 = v28;
          v29 = v5 + 16 * v10;
          v30 = *(WTF **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          v24[1] = v30;
          v31 = *(WTF **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            v32 = (WTF *)*((_QWORD *)v31 + 1);
            while (v32)
            {
              v38 = v32;
              v32 = (WTF *)*((_QWORD *)v32 + 2);
              v39 = *(WTF **)v38;
              *(_QWORD *)v38 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 1)
                  WTF::fastFree(v39, v9);
                else
                  --*(_DWORD *)v39;
              }
              WTF::fastFree(v38, v9);
            }
            if (*(_QWORD *)v31)
              WTF::fastFree((WTF *)(*(_QWORD *)v31 - 16), v9);
            WTF::fastFree(v31, v9);
          }
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
              WTF::fastFree(v33, v9);
            else
              --*(_DWORD *)v33;
          }
          if (v13 == a3)
            v11 = v24;
        }
      }
      else
      {
        v34 = v13[1];
        v13[1] = 0;
        if (v34)
        {
          v35 = (WTF *)*((_QWORD *)v34 + 1);
          while (v35)
          {
            v36 = v35;
            v35 = (WTF *)*((_QWORD *)v35 + 2);
            v37 = *(WTF **)v36;
            *(_QWORD *)v36 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 1)
                WTF::fastFree(v37, v9);
              else
                --*(_DWORD *)v37;
            }
            WTF::fastFree(v36, v9);
          }
          if (*(_QWORD *)v34)
            WTF::fastFree((WTF *)(*(_QWORD *)v34 - 16), v9);
          WTF::fastFree(v34, v9);
          v14 = *v13;
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v9);
          else
            --*(_DWORD *)v14;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3, 0);
}

uint64_t WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBox>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  void *v7;
  WTF *v8;

  result = *a2;
  if (!*a2)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a3;
    v8 = (WTF *)*a2;
    *a2 = result;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        result = *a2;
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)result;
  *a1 = result;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::rehash(a1, v5, a2);
}

WTF *WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::insertBefore<WebCore::RenderBox>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  WTF *result;
  WTF *v14;
  WTF *v15;

  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 24) + 1;
  *(_DWORD *)(a2 + 24) = v9;
  if (v9 > v8)
    WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a2);
  v10 = *(_QWORD *)(a3 + 16);
  WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBox>((uint64_t *)&v14, (uint64_t *)(a4 + 8), a4);
  v11 = v14;
  ++*(_DWORD *)v14;
  v15 = v11;
  WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::insertBefore((uint64_t *)a2, v10, (uint64_t *)&v15, a1);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v12);
    else
      --*(_DWORD *)result;
  }
  if (*(_DWORD *)v11 == 1)
    return (WTF *)WTF::fastFree(v11, v12);
  --*(_DWORD *)v11;
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::insertBefore@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  int i;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(a3);
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = (_QWORD *)(v8 + 8 * (result & v9));
    v14 = (_QWORD *)*v13;
    if (!*v13)
      break;
    if (v14 != (_QWORD *)-1)
    {
      v13 = v11;
      if (*v14 == *a3)
      {
        v15 = 0;
        goto LABEL_9;
      }
    }
    result = i + (result & v9);
    v11 = v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    v13 = v11;
  }
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v17 = *a3;
  *a3 = 0;
  v16[1] = 0;
  v16[2] = 0;
  *v16 = v17;
  *v13 = v16;
  v18 = *a1;
  if (*a1)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_18;
LABEL_24:
    v13 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>> *>>::expand(a1, (_QWORD **)v13);
    v16 = (_QWORD *)*v13;
    goto LABEL_18;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_24;
LABEL_18:
  result = (uint64_t)WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::insertNodeBefore(a1, a2, (uint64_t)v16);
  v14 = (_QWORD *)*v13;
  v15 = 1;
LABEL_9:
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = v15;
  return result;
}

_QWORD *WTF::ListHashSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::insertNodeBefore(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if (!a2)
  {
    v4 = result[2];
    result += 2;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = 0;
    v5 = (_QWORD *)(v4 + 16);
    if (v4)
      v6 = v5;
    else
      v6 = result - 1;
    *v6 = a3;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a3 + 16) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    *(_QWORD *)(v3 + 16) = a3;
  *(_QWORD *)(a2 + 8) = a3;
  if (!*(_QWORD *)(a3 + 8))
  {
    ++result;
LABEL_11:
    *result = a3;
  }
  return result;
}

void WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    while (1)
    {
      v12 = (WTF **)(v4 + 16 * v11);
      v13 = *v12;
      if (!*v12)
        break;
      if (v13 != (WTF *)-1)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (WTF **)(v14 + 16 * v21);
        v24 = v23[1];
        v23[1] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 != 1)
          {
            --*(_DWORD *)v24;
            goto LABEL_16;
          }
          WTF::fastFree(v24, v8);
          v30 = *v23;
          *v23 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              WTF::fastFree(v30, v8);
            else
              --*(_DWORD *)v30;
          }
        }
        else
        {
LABEL_16:
          *v23 = 0;
        }
        v25 = *v12;
        *v12 = 0;
        *v23 = v25;
        v26 = v4 + 16 * v11;
        v27 = *(WTF **)(v26 + 8);
        *(_QWORD *)(v26 + 8) = 0;
        v23[1] = v27;
        v28 = *(WTF **)(v26 + 8);
        *(_QWORD *)(v26 + 8) = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 != 1)
          {
            --*(_DWORD *)v28;
            goto LABEL_20;
          }
LABEL_30:
          WTF::fastFree(v28, v8);
        }
LABEL_20:
        v13 = *v12;
        goto LABEL_24;
      }
LABEL_25:
      if (++v11 == v5)
        goto LABEL_37;
    }
    v29 = v12[1];
    v12[1] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
      {
        v28 = v29;
        goto LABEL_30;
      }
      --*(_DWORD *)v29;
    }
LABEL_24:
    *v12 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v8);
      else
        --*(_DWORD *)v13;
    }
    goto LABEL_25;
  }
  if (v4)
LABEL_37:
    WTF::fastFree((WTF *)(v4 - 16), v8);
}

void WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3);
}

uint64_t WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  ++*((_DWORD *)a2 + 2);
  if (!a3 || !*(_QWORD *)(a3 + 8))
    return WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end(result, a2);
  v3 = *a2;
  if (*a2)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = *(_QWORD *)(v3 + 16 * v8);
      if (!v10)
      {
        v12 = *(unsigned int *)(v3 - 4);
        v13 = v3 + 16 * v12;
        v14 = v13;
        goto LABEL_12;
      }
      if (v10 != -1 && v10 == a3)
        break;
      v8 = (v8 + i) & v4;
    }
    v13 = v3 + 16 * v8;
    v12 = *(unsigned int *)(v3 - 4);
    v14 = v3 + 16 * v12;
LABEL_12:
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v13;
    v15 = (uint64_t *)(result + 8);
    *(_QWORD *)(result + 16) = v14;
    v16 = v3 + 16 * v12;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v16 = 0;
    v12 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
    v15 = (uint64_t *)(result + 8);
    *(_QWORD *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 24) = v16;
  *(_QWORD *)(result + 32) = v3 + 16 * v12;
  *(_DWORD *)(result + 40) = 0;
LABEL_14:
  while (v13 != v16 && !*(_QWORD *)(*(_QWORD *)v13 + 8))
  {
    v17 = v13 + 16;
    *v15 = v13 + 16;
    v13 = v14;
    if (v17 != v14)
    {
      v13 = v17;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 16;
        *v15 = v13;
        if (v13 == v14)
        {
          v13 = v14;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

WTF **WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::remove(WTF **result, WTF **a2)
{
  WTF **v2;
  uint64_t v3;
  WTF *v4;
  int v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;

  v2 = result;
  if (*result)
  {
    v3 = (uint64_t)*result + 16 * *((unsigned int *)*result - 1);
    if ((WTF **)v3 == a2)
      goto LABEL_12;
  }
  else
  {
    if (!a2)
      goto LABEL_12;
    v3 = 0;
  }
  if ((WTF **)v3 != a2)
  {
    result = (WTF **)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>::customDeleteBucket(a2, a2);
    ++*((_DWORD *)*v2 - 4);
    v4 = *v2;
    v5 = *v2 ? *((_DWORD *)v4 - 3) - 1 : -1;
    *((_DWORD *)v4 - 3) = v5;
    v6 = *v2;
    if (*v2)
    {
      v7 = 6 * *((_DWORD *)v6 - 3);
      v8 = *((_DWORD *)v6 - 1);
      if (v7 < v8 && v8 >= 9)
        result = WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)v2, v8 >> 1, 0);
    }
  }
LABEL_12:
  v10 = *((_DWORD *)v2 + 2);
  v11 = *((_DWORD *)v2 + 3);
  *((_DWORD *)v2 + 2) = v10 + 1;
  if (v10 > v11)
    return WTF::WeakHashMap<WebCore::RenderBlock const,std::unique_ptr<WTF::WeakListHashSet<WebCore::RenderBox,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(v2, a2);
  return result;
}

WTF ***WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::~WeakHashSet(WTF ***a1, void *a2)
{
  WTF **v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  WTF **v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  WTF **v28;
  WTF **v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF **v38;
  WTF *v39;
  uint64_t v40;
  WTF **v41;
  WTF *v42;
  uint64_t v43;
  WTF **v44;
  WTF *v45;
  WTF *v46;
  WTF **result;
  uint64_t v48;
  uint64_t v49;
  WTF **v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v48 = v4;
    v49 = v5;
    do
    {
      v14 = (WTF **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF *)-1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v52 = v12;
          v18 = ((unint64_t)v15 + ~((_QWORD)v15 << 32)) ^ (((unint64_t)v15 + ~((_QWORD)v15 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (WTF **)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v23;
          v26 = v16 + 24 * v23;
          v29 = *(WTF ***)(v26 + 8);
          v27 = (_QWORD *)(v26 + 8);
          v28 = v29;
          if (v29)
          {
            v40 = *((unsigned int *)v28 - 1);
            if ((_DWORD)v40)
            {
              v41 = v28;
              do
              {
                v42 = *v41;
                if (*v41 != (WTF *)-1)
                {
                  *v41 = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 1)
                      WTF::fastFree(v42, v8);
                    else
                      --*(_DWORD *)v42;
                  }
                }
                ++v41;
                --v40;
              }
              while (v40);
            }
            WTF::fastFree((WTF *)(v28 - 2), v8);
            v46 = *v24;
            *v24 = 0;
            v4 = v48;
            v13 = v49;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1)
                WTF::fastFree(v46, v8);
              else
                --*(_DWORD *)v46;
            }
          }
          else
          {
            *v24 = 0;
            v13 = v49;
          }
          v30 = *v14;
          *v14 = 0;
          *v24 = v30;
          v31 = v4 + 24 * v11;
          *v27 = 0;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *v27 = v32;
          *(_QWORD *)(v16 + 24 * v25 + 16) = *(_QWORD *)(v31 + 16);
          v33 = *(_QWORD *)(v31 + 8);
          v12 = v52;
          if (v33)
          {
            v43 = *(unsigned int *)(v33 - 4);
            if ((_DWORD)v43)
            {
              v44 = *(WTF ***)(v31 + 8);
              do
              {
                v45 = *v44;
                if (*v44 != (WTF *)-1)
                {
                  *v44 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 1)
                      WTF::fastFree(v45, v8);
                    else
                      --*(_DWORD *)v45;
                  }
                }
                ++v44;
                --v43;
              }
              while (v43);
            }
            WTF::fastFree((WTF *)(v33 - 16), v8);
          }
          v34 = *v14;
          *v14 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v8);
            else
              --*(_DWORD *)v34;
          }
          if (v14 == a3)
            v12 = v24;
        }
      }
      else
      {
        v35 = v4 + 24 * v11;
        v36 = *(_QWORD *)(v35 + 8);
        if (v36)
        {
          v37 = *(unsigned int *)(v36 - 4);
          if ((_DWORD)v37)
          {
            v38 = *(WTF ***)(v35 + 8);
            do
            {
              v39 = *v38;
              if (*v38 != (WTF *)-1)
              {
                *v38 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 1)
                    WTF::fastFree(v39, v8);
                  else
                    --*(_DWORD *)v39;
                }
              }
              ++v38;
              --v37;
            }
            while (v37);
          }
          WTF::fastFree((WTF *)(v36 - 16), v8);
          v15 = *v14;
        }
        *v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, v8);
          else
            --*(_DWORD *)v15;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakHashSet<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3, 0);
}

uint64_t WTF::WeakListHashSet<WebCore::RenderFragmentContainer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(uint64_t *a1, void *a2)
{
  uint64_t v2;
  uint64_t *v4;
  WTF *v5;
  _QWORD *v6;
  WTF *v7;
  WTF *v8;

  v2 = *a1;
  if (*a1 && *(_DWORD *)(v2 - 12))
  {
    v4 = a1 + 1;
    v5 = (WTF *)a1[1];
    if (v5)
    {
      v6 = (_QWORD *)a1[1];
      do
      {
        if (*(_QWORD *)(*v6 + 8))
          return 0;
        v6 = (_QWORD *)v6[2];
      }
      while (v6);
      do
      {
        v7 = v5;
        v5 = (WTF *)*((_QWORD *)v5 + 2);
        v8 = *(WTF **)v7;
        *(_QWORD *)v7 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
            WTF::fastFree(v8, a2);
          else
            --*(_DWORD *)v8;
        }
        WTF::fastFree(v7, a2);
      }
      while (v5);
      v2 = *a1;
      if (!*a1)
      {
        *v4 = 0;
        v4[1] = 0;
        *((_DWORD *)v4 + 4) = 0;
        goto LABEL_18;
      }
    }
    *a1 = 0;
    WTF::fastFree((WTF *)(v2 - 16), a2);
    v2 = *a1;
    *v4 = 0;
    v4[1] = 0;
    *((_DWORD *)v4 + 4) = 0;
    if (v2)
    {
      LODWORD(v2) = *(_DWORD *)(v2 - 12);
      if (v2 > 0x7FFFFFFE)
        LODWORD(v2) = 0x7FFFFFFF;
    }
LABEL_18:
    *((_DWORD *)a1 + 7) = 2 * v2;
  }
  return 1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISC_EEEENS9_INSA_16LegacyLineLayoutENSD_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WebCore::LayoutIntegration::LineLayout **a2)
{
  WebCore::LayoutIntegration::LineLayout *v2;
  WTF *v3;
  void *v4;
  double result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    WebCore::LayoutIntegration::LineLayout::~LineLayout(v2);
    if (*(_DWORD *)v3)
    {
      result = 0.0;
      *((_OWORD *)v3 + 5) = 0u;
      *((_OWORD *)v3 + 6) = 0u;
      *((_OWORD *)v3 + 3) = 0u;
      *((_OWORD *)v3 + 4) = 0u;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
    }
    else
    {
      WTF::fastFree(v3, v4);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISC_EEEENS9_INSA_16LegacyLineLayoutENSD_ISG_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJS8_SF_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v6 = (_QWORD *)v3[12];
        v5 = (_QWORD *)v3[9];
        if (v5)
        {
          do
          {
            v4 = (_QWORD *)v5[1];
            (*(void (**)(_QWORD *))(*v5 + 16))(v5);
            v5 = v4;
          }
          while (v4);
        }
        (*(void (**)(_QWORD *))(*v3 + 216))(v3);
        (*(void (**)(_QWORD *))(*v3 + 8))(v3);
        v3 = v6;
      }
      while (v6);
    }
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    WTF::fastFree(v2, a2);
  }
}

uint64_t WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2)
    ++*(_DWORD *)(a2 + 16);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 16);
    if (v3)
    {
      *(_DWORD *)(v2 + 16) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::lastInlineFormattingContextRoot(unint64_t this, const WebCore::RenderBlockFlow *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  const WebCore::RenderBlockFlow *v6;
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;

  if ((this & 0xFFFFFFFFFFLL) != 0)
  {
    v3 = *(_QWORD *)((this & 0xFFFFFFFFFFLL) + 8);
    if (v3)
    {
      while (1)
      {
        v4 = *(_BYTE *)(v3 + 52) & 7;
        if (v4 == 1)
          v5 = v3;
        else
          v5 = 0;
        if (v5)
          ++*(_DWORD *)(v5 + 16);
        if (v4 == 1 && (WebCore::RenderElement::createsNewFormattingContext((WebCore::RenderElement *)v3) & 1) == 0)
          break;
        if (v5)
        {
          v7 = 4;
          result = v2;
          goto LABEL_12;
        }
        result = v2;
LABEL_14:
        v10 = *(unsigned int *)(v3 + 40);
        if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)))
          return 0;
        v3 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)) + 8);
        v2 = result;
        result = 0;
        if (!v3)
          return result;
      }
      if ((*(_BYTE *)(v3 + 22) & 4) != 0)
      {
        v11 = *(_DWORD *)(v3 + 240);
        if (v11 == 1)
        {
          v12 = *(_QWORD *)(v3 + 232);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 80);
            if (v13)
            {
              if (*(_DWORD *)(v13 + 60) >= 2u && *(_DWORD *)(v13 + 44))
              {
LABEL_23:
                v7 = 1;
                result = v3;
                goto LABEL_12;
              }
            }
          }
        }
        else if (v11 == 2)
        {
          v14 = *(_QWORD *)(v3 + 232);
          if (v14)
          {
            v15 = *(_QWORD **)(v14 + 8);
            if (v15)
            {
              if (!(*(unsigned int (**)(_QWORD *))(*v15 + 88))(v15))
              {
                __break(0xC471u);
                JUMPOUT(0x1963A208CLL);
              }
              v16 = 1;
              while (1)
              {
                v15 = (_QWORD *)v15[12];
                if (!v15)
                  break;
                ++v16;
                if (((*(uint64_t (**)(_QWORD *))(*v15 + 88))(v15) & 1) == 0)
                  goto LABEL_34;
              }
              if (v16)
                goto LABEL_23;
            }
          }
        }
      }
      result = WebCore::lastInlineFormattingContextRoot((WebCore *)(*(unsigned int *)(v3 + 71) | ((unint64_t)*(unsigned __int8 *)(v3 + 75) << 32)), v6);
      v7 = result != 0;
      if (!result)
        result = v2;
LABEL_12:
      v9 = *(_DWORD *)(v5 + 16);
      if (!v9)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1963A206CLL);
      }
      *(_DWORD *)(v5 + 16) = v9 - 1;
      if ((v7 | 4) != 4)
        return result;
      goto LABEL_14;
    }
  }
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21inkOverflowLogicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21inkOverflowLogicalTopEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  uint64_t v8;

  v2 = *a2;
  if (*a2)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3)
  {
    v8 = v3 + 20;
    v6 = *(_DWORD *)(v3 + 20);
    v7 = *(_DWORD *)(v8 + 4);
    if ((*(_WORD *)(v2 + 52) & 0x800) != 0)
      v4 = v7;
    else
      v4 = v6;
  }
  else
  {
    v4 = *(_DWORD *)(v2 + 116);
  }
  return (float)v4 * 0.015625;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox24inkOverflowLogicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox24inkOverflowLogicalBottomEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  signed int v4;
  __int16 v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  signed int v10;

  v2 = *a2;
  if (*a2)
    v2 = *(_QWORD *)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3)
  {
    v6 = *(_WORD *)(v2 + 52);
    v7 = *(_QWORD *)(v3 + 20);
    v8 = *(_QWORD *)(v3 + 28);
    if ((v6 & 0x800) != 0)
    {
      v7 >>= 32;
      v8 >>= 32;
    }
    v9 = __OFADD__((_DWORD)v7, (_DWORD)v8);
    v10 = v7 + v8;
    v4 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v4 = v10;
  }
  else
  {
    v4 = *(_DWORD *)(v2 + 120);
  }
  return (float)v4 * 0.015625;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox9lineIndexEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox9lineIndexEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 32);
  if (v2)
    v2 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963A2320);
  }
  if ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1963A2340);
  }
  if (*(_DWORD *)(v2 + 240) != 2)
    return 0;
  v4 = *(_QWORD *)(v2 + 232);
  if (!v4)
    return 0;
  v5 = *(_QWORD **)(v4 + 8);
  if (!v5)
    return 0;
  if (!(*(unsigned int (**)(_QWORD *))(*v5 + 88))(v5))
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1963A2300);
  }
  v7 = 0;
  while (!*(_QWORD *)a2 || *(_QWORD **)(*(_QWORD *)a2 + 8) != v5)
  {
    v5 = (_QWORD *)v5[12];
    if (!v5)
      return v7 + 1;
    ++v7;
    if (((*(uint64_t (**)(_QWORD *))(*v5 + 88))(v5) & 1) == 0)
      goto LABEL_20;
  }
  return v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18containingFragmentEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox18containingFragmentEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21isFirstAfterPageBreakEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 44))
    return (*(unsigned __int8 *)(*(_QWORD *)(v3 + 32) + 152 * v2 + 124) >> 2) & 1;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox21isFirstAfterPageBreakEvEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_25LineBoxIteratorModernPathENSB_25LineBoxIteratorLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 0;
}

uint64_t WebCore::operator==(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
    return WTF::equal(a1[1], a2[1], a3);
  else
    return 0;
}

uint64_t WebCore::RenderBoxModelObject::resolveLengthPercentageUsingContainerLogicalWidth(WebCore::RenderBoxModelObject *this, const WebCore::Length *a2)
{
  int v2;
  float v3;
  float v4;
  double v5;
  float v7;
  int v8;
  unsigned __int8 *v9;

  v2 = *((unsigned __int8 *)a2 + 4);
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v9 = (unsigned __int8 *)a2;
    v8 = (*(uint64_t (**)(WebCore::RenderBoxModelObject *))(*(_QWORD *)this + 1144))(this);
    a2 = (const WebCore::Length *)v9;
    v2 = v9[4];
    v3 = (float)v8 * 0.015625;
  }
  else
  {
    v3 = 0.0;
  }
  switch(v2)
  {
    case 4:
      v4 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v4 = (float)*(int *)a2;
      break;
    case 3:
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      v4 = (float)(v3 * v7) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(a2, v3);
      break;
    default:
      return 0;
  }
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v5 <= -2147483650.0)
    return 0x80000000;
  return (int)v5;
}

uint64_t WebCore::RenderBox::availableHeight(WebCore::RenderBox *this)
{
  uint64_t v1;
  unsigned int v3;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v1 = *(_QWORD *)this;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
    return (*(uint64_t (**)(void))(v1 + 1344))();
  v3 = *((_DWORD *)this + 41);
  v5 = (*(uint64_t (**)(void))(v1 + 1000))();
  if (__OFSUB__(v3, v5))
    v6 = (v3 >> 31) + 0x7FFFFFFF;
  else
    v6 = v3 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 - v7;
  v9 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v10 = v9 << 6;
  if (v9 < -33554432)
    v10 = 0x80000000;
  if (v9 > 0x1FFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = __OFSUB__(v8, v10);
  v12 = v8 - v10;
  if (v11)
    v12 = (v8 >> 31) + 0x7FFFFFFF;
  v13 = v12 & ~(v12 >> 31);
  v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 928))(this);
  if (__OFSUB__(v13, v14))
    v15 = 0x7FFFFFFF;
  else
    v15 = v13 - v14;
  v16 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 936))(this);
  if (__OFSUB__(v15, v16))
    v17 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v17 = v15 - v16;
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
  {
    v20 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    v21 = v20 << 6;
    if (v20 > 0x1FFFFFF)
      v21 = 0x7FFFFFFF;
    if (v20 >= -33554432)
      v18 = v21;
    else
      v18 = 0x80000000;
  }
  else
  {
    v18 = 0;
  }
  v11 = __OFSUB__(v17, v18);
  v19 = v17 - v18;
  if (v11)
    v19 = (v17 >> 31) + 0x7FFFFFFF;
  return v19 & ~(v19 >> 31);
}

uint64_t WebCore::parentOrPseudoHostElement(WebCore *this, const WebCore::RenderElement *a2)
{
  unsigned int v3;
  char v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = WebCore::RenderObject::isPseudoElement(this);
  v4 = *((_BYTE *)this + 45);
  if (!v3)
  {
    if ((*((_BYTE *)this + 45) & 1) == 0)
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (v9)
      {
        if ((*(_WORD *)(v9 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963A2744);
        }
        v10 = *(_QWORD *)(v9 + 32);
        if (v10)
        {
          if ((*(_WORD *)(v10 + 28) & 8) != 0)
            return v10;
          else
            return 0;
        }
      }
    }
    return 0;
  }
  if ((*((_BYTE *)this + 45) & 1) == 0)
  {
    v5 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8);
    if (v5)
    {
      if ((~v5[14] & 0x408) == 0)
      {
        v6 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v5 + 368))(v5);
        v4 = *((_BYTE *)this + 45);
        if (v6)
        {
          if ((*((_BYTE *)this + 45) & 1) != 0)
            v11 = 0;
          else
            v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if ((~*(unsigned __int16 *)(v11 + 28) & 0x408) != 0
            || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 368))(v11))
          {
            __break(0xC471u);
            JUMPOUT(0x1963A2780);
          }
          v7 = *(_QWORD *)(v11 + 112);
          if (v7)
            goto LABEL_8;
          return 0;
        }
      }
    }
  }
  if ((v4 & 1) != 0)
    return 0;
  v7 = *((_QWORD *)this + 3);
LABEL_8:
  result = *(_QWORD *)(v7 + 8);
  if (result && (*(_WORD *)(result + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1963A26ECLL);
  }
  return result;
}

uint64_t WebCore::previousInPreOrderRespectingContainment(WebCore *this, const WebCore::RenderElement *a2, const WebCore::Node *a3)
{
  WebCore::NodeTraversal *v4;
  WebCore::NodeTraversal *v5;
  const WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;

  v4 = *(WebCore::NodeTraversal **)(*((_QWORD *)this + 3) + 8);
  if ((*((_WORD *)v4 + 14) & 8) == 0)
  {
LABEL_79:
    __break(0xC471u);
    JUMPOUT(0x1963A286CLL);
  }
  do
  {
    v4 = (WebCore::NodeTraversal *)WebCore::NodeTraversal::previousIncludingPseudo(v4, 0, a3);
    v5 = v4;
  }
  while (v4 && (*((_WORD *)v4 + 14) & 8) == 0);
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(const WebCore::Node **)(*((_QWORD *)this + 3) + 8);
    if (v6 && (*((_WORD *)v6 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963A288CLL);
    }
  }
  if ((~*((unsigned __int16 *)v6 + 14) & 0x408) != 0
    || !(*(unsigned int (**)(const WebCore::Node *))(*(_QWORD *)v6 + 368))(v6))
  {
    goto LABEL_15;
  }
  v7 = *((_QWORD *)v6 + 14);
  if (!v7)
  {
LABEL_21:
    v6 = 0;
    goto LABEL_27;
  }
  v6 = *(const WebCore::Node **)(v7 + 8);
  if (!v6)
    goto LABEL_27;
  while (1)
  {
    if ((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v9 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
      if (v9)
        break;
      v9 = *(_QWORD *)((*((_QWORD *)v6 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v9)
      {
        v23 = *(_QWORD *)(v9 + 16) & 0x1FLL;
        if (v23 == 26 || v23 == 18)
          break;
      }
    }
    v8 = *((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      if ((*(_BYTE *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v8 = *(_QWORD *)((*((_QWORD *)v6 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v8)
          v8 = *(_QWORD *)(v8 + 8);
      }
      v9 = v8 + 80;
      break;
    }
LABEL_15:
    v6 = (const WebCore::Node *)*((_QWORD *)v6 + 4);
    if (!v6)
      goto LABEL_27;
    if ((*((_WORD *)v6 + 14) & 8) == 0)
      goto LABEL_21;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 40);
  if ((*(_BYTE *)(v10 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v10 + 462) & 0x10) == 0)
    goto LABEL_15;
  do
  {
LABEL_27:
    if (!v5)
      return 0;
    v12 = *((_QWORD *)v5 + 8);
    for (i = (uint64_t)v5; ; v12 = *(_QWORD *)(i + 64))
    {
      v14 = v12 & 0xFFFFFFFFFFFFLL;
      if (v14)
        break;
      result = WebCore::NodeTraversal::previousIncludingPseudo((WebCore::NodeTraversal *)i, v6, a3);
      if (!result)
        return result;
      i = result;
      while ((*(_WORD *)(i + 28) & 8) == 0)
      {
        result = WebCore::NodeTraversal::previousIncludingPseudo((WebCore::NodeTraversal *)i, v6, a3);
        i = result;
        if (!result)
          return result;
      }
    }
    if ((*(_BYTE *)(v14 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963A2AC0);
    }
    if ((~*(unsigned __int16 *)(i + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)i + 368))(i))
    {
      v5 = *(WebCore::NodeTraversal **)(i + 32);
      if (!v5)
        continue;
      goto LABEL_43;
    }
    v16 = *(_QWORD *)(i + 112);
    if (!v16)
      goto LABEL_48;
    v5 = *(WebCore::NodeTraversal **)(v16 + 8);
    if (v5)
    {
      while (1)
      {
        if ((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v18 = *(_QWORD *)((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) + 0x30);
          if (v18)
            goto LABEL_50;
          v18 = *(_QWORD *)((*((_QWORD *)v5 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
          if (v18)
          {
            v21 = *(_QWORD *)(v18 + 16) & 0x1FLL;
            if (v21 == 26 || v21 == 18)
              goto LABEL_50;
          }
        }
        v17 = *((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL;
        if (v17)
          break;
LABEL_56:
        v5 = (WebCore::NodeTraversal *)*((_QWORD *)v5 + 4);
        if (!v5)
          goto LABEL_54;
LABEL_43:
        if ((*((_WORD *)v5 + 14) & 8) == 0)
        {
LABEL_48:
          v5 = 0;
          goto LABEL_54;
        }
      }
      if ((*(_BYTE *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v17 = *(_QWORD *)((*((_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v17)
          v17 = *(_QWORD *)(v17 + 8);
      }
      v18 = v17 + 80;
LABEL_50:
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 40);
      if ((*(_BYTE *)(v19 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v19 + 462) & 0x10) != 0)
        continue;
      goto LABEL_56;
    }
LABEL_54:
    ;
  }
  while (v5 != v6);
  result = *(_QWORD *)(i + 64) & 0xFFFFFFFFFFFFLL;
  if (result && (*(_BYTE *)((*(_QWORD *)(i + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_79;
  return result;
}

WebCore *WebCore::previousSiblingOrParentElement(WebCore *this, const WebCore::Element *a2)
{
  WebCore *v3;
  const WebCore::Element *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v10;

  while (1)
  {
    v3 = this;
    do
    {
      v3 = (WebCore *)WebCore::Node::pseudoAwarePreviousSibling(v3);
      if (!v3)
        goto LABEL_9;
    }
    while ((*((_WORD *)v3 + 14) & 8) == 0);
LABEL_7:
    if ((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      this = v3;
      if ((*(_BYTE *)((*((_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963A2C6CLL);
      }
      return this;
    }
    while (1)
    {
      v3 = (WebCore *)WebCore::Node::pseudoAwarePreviousSibling(v3);
      if (!v3)
        break;
      if ((*((_WORD *)v3 + 14) & 8) != 0)
        goto LABEL_7;
    }
LABEL_9:
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
      || !(*(unsigned int (**)(WebCore *))(*(_QWORD *)this + 368))(this))
    {
      break;
    }
    v5 = *((_QWORD *)this + 14);
    if (v5)
      this = *(WebCore **)(v5 + 8);
    else
      this = 0;
    if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_33;
      return this;
    }
  }
  this = (WebCore *)*((_QWORD *)this + 4);
  if (this)
  {
    if ((*((_WORD *)this + 14) & 8) == 0)
      return 0;
    v6 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        goto LABEL_21;
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1963A2B94);
    }
    v10 = (WebCore *)WebCore::previousSiblingOrParentElement(this, v4);
    this = v10;
    if (v10)
    {
      v6 = *((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL;
      if (v6)
      {
        if ((*(_BYTE *)((*((_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963A2C4CLL);
        }
LABEL_21:
        v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) + 40);
        if ((*(_BYTE *)(v7 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v7 + 462) & 0x10) != 0)
          return 0;
      }
    }
  }
  return this;
}

uint64_t *WTF::WeakHashMap<WebCore::RenderElement,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  WTF::StringImpl ***v10;
  void *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_25;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (uint64_t **)(v3 + 16 * v6);
      result = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !result[1])
      {
        *v8 = 0;
        if (*(_DWORD *)result == 1)
          WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
        *v8 = (uint64_t *)-1;
        v9 = v3 + 16 * v6;
        result = *(uint64_t **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (result)
        {
          v10 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable((WTF::StringImpl ***)result, a2);
          result = (uint64_t *)WTF::fastFree((WTF *)v10, v11);
        }
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *v2;
      if (*v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *v2;
    }
    if (v3)
    {
      v14 = *(_DWORD *)(v3 - 4);
      v15 = *(unsigned int *)(v3 - 12);
      if (v14 >= 9 && 6 * (int)v15 < v14)
      {
        v19 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        v21 = (v20 | HIWORD(v20)) + 1;
        if (v21 > 0x400)
        {
          if (v21 > 2 * v15)
            goto LABEL_36;
        }
        else if (3 * v21 > 4 * v15)
        {
LABEL_34:
          v22 = (double)v15;
          v23 = (double)v21;
          v24 = 0.604166667;
          goto LABEL_37;
        }
        LODWORD(v21) = 2 * v21;
        if (v21 <= 0x400)
          goto LABEL_34;
LABEL_36:
        v22 = (double)v15;
        v23 = (double)v21;
        v24 = 0.416666667;
LABEL_37:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v2, v25, 0);
        v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          v17 = 0;
          goto LABEL_29;
        }
LABEL_26:
        v17 = *(_DWORD *)(v3 - 12);
        v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
          goto LABEL_30;
        goto LABEL_29;
      }
LABEL_25:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_26;
    }
  }
  v17 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_29:
  v18 = v17;
LABEL_30:
  *((_DWORD *)v2 + 3) = 2 * v18;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  WTF::StringImpl ***v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl ***v29;
  WTF::StringImpl ***v30;
  void *v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl ***v36;
  WTF::StringImpl ***v37;
  void *v38;
  WTF *v39;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = v19 + 16 * v26;
          v29 = *(WTF::StringImpl ****)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v29)
          {
            v30 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v29, v10);
            WTF::fastFree((WTF *)v30, v31);
            v32 = *(WTF **)v28;
            *(_QWORD *)v28 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 1)
                WTF::fastFree(v32, v10);
              else
                --*(_DWORD *)v32;
            }
          }
          else
          {
            *(_QWORD *)v28 = 0;
          }
          v33 = *v13;
          *v13 = 0;
          *(_QWORD *)v28 = v33;
          v34 = v6 + 16 * v11;
          v35 = *(_QWORD *)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          *(_QWORD *)(v28 + 8) = v35;
          v36 = *(WTF::StringImpl ****)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v36)
          {
            v37 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v36, v10);
            WTF::fastFree((WTF *)v37, v38);
          }
          v39 = *v13;
          *v13 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
              WTF::fastFree(v39, v10);
            else
              --*(_DWORD *)v39;
          }
          if (v13 == a3)
            v12 = v28;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF::StringImpl ****)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            v17 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(v16, v10);
            WTF::fastFree((WTF *)v17, v18);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v10);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl ***WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::~HashTable(WTF::StringImpl ***a1, void *a2)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WebCore::CounterNode *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF::StringImpl *)-1)
        {
          v7 = v5[1];
          v5[1] = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::CounterNode::~CounterNode(v7, a2);
              WTF::fastFree(v8, v9);
              v6 = *v5;
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WebCore::CounterNode *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WebCore::CounterNode *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WebCore::CounterNode *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v21 = v20 & v18;
            v20 = ++v19 + v21;
          }
          while (*(_QWORD *)(v17 + 16 * v21));
          v22 = (WTF::StringImpl **)(v17 + 16 * v21);
          v23 = v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 != 1)
            {
              --*(_DWORD *)v23;
              goto LABEL_22;
            }
            WebCore::CounterNode::~CounterNode(v23, v10);
            WTF::fastFree(v31, v32);
            v33 = *v22;
            *v22 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 2)
                WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v10);
              else
                *(_DWORD *)v33 -= 2;
            }
          }
          else
          {
LABEL_22:
            *v22 = 0;
          }
          v24 = *v13;
          *v13 = 0;
          *v22 = v24;
          v25 = v6 + 16 * v11;
          v26 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v22[1] = v26;
          v27 = *(WebCore::CounterNode **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 1)
            {
              WebCore::CounterNode::~CounterNode(v27, v10);
              WTF::fastFree(v34, v35);
            }
            else
            {
              --*(_DWORD *)v27;
            }
          }
          v28 = *v13;
          *v13 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v10);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
          goto LABEL_31;
        }
        v15 = v6 + 16 * v11;
        v16 = *(WebCore::CounterNode **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
          {
            WebCore::CounterNode::~CounterNode(v16, v10);
            WTF::fastFree(v29, v30);
            v14 = *v13;
          }
          else
          {
            --*(_DWORD *)v16;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_31:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;
  void *v13;

  v4 = *a2;
  *a2 = (WTF::StringImpl *)-1;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl **)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CounterNode::~CounterNode((WebCore::CounterNode *)result, a2);
      result = (WTF::StringImpl **)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  ++*(_DWORD *)(*a1 - 16);
  v6 = *a1;
  if (*a1)
    v7 = *(_DWORD *)(v6 - 12) - 1;
  else
    v7 = -1;
  *(_DWORD *)(v6 - 12) = v7;
  v8 = *a1;
  if (*a1)
  {
    v9 = 6 * *(_DWORD *)(v8 - 12);
    v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
      return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CounterNode,WTF::RawPtrTraits<WebCore::CounterNode>,WTF::DefaultRefDerefTraits<WebCore::CounterNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v10 >> 1, 0);
  }
  return result;
}

WTF *WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF *result;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v5 = a2[1];
  *a2 = (WTF *)-1;
  a2[1] = 0;
  if (v5)
  {
    if (*((_BYTE *)v5 + 24))
    {
      v6 = (WTF *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
          WTF::fastFree(v6, a2);
        else
          --*(_DWORD *)v6;
      }
    }
    result = (WTF *)WTF::fastFree(v5, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v7 = *a1;
  if (*a1)
    v8 = *(_DWORD *)(v7 - 12) - 1;
  else
    v8 = -1;
  *(_DWORD *)(v7 - 12) = v8;
  v9 = *a1;
  if (*a1)
  {
    v10 = 6 * *(_DWORD *)(v9 - 12);
    v11 = *(_DWORD *)(v9 - 4);
    if (v10 < v11 && v11 >= 9)
      return (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a1, v11 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (WTF **)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != (WTF *)-1)
      {
        if (v14)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ~(*((_QWORD *)v14 + 1) << 32) + *((_QWORD *)v14 + 1);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = v18 + 16 * v25;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v28)
          {
            if (*(_BYTE *)(v28 + 24))
            {
              v29 = *(WTF **)(v28 + 16);
              *(_QWORD *)(v28 + 16) = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                  WTF::fastFree(v29, v9);
                else
                  --*(_DWORD *)v29;
              }
            }
            WTF::fastFree((WTF *)v28, v9);
            v30 = *(WTF **)v27;
            *(_QWORD *)v27 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 1)
                WTF::fastFree(v30, v9);
              else
                --*(_DWORD *)v30;
            }
          }
          else
          {
            *(_QWORD *)v27 = 0;
          }
          v31 = *v13;
          *v13 = 0;
          *(_QWORD *)v27 = v31;
          v32 = v5 + 16 * v10;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v33;
          v34 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (*(_BYTE *)(v34 + 24))
            {
              v35 = *(WTF **)(v34 + 16);
              *(_QWORD *)(v34 + 16) = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 1)
                  WTF::fastFree(v35, v9);
                else
                  --*(_DWORD *)v35;
              }
            }
            WTF::fastFree((WTF *)v34, v9);
          }
          v36 = *v13;
          *v13 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 1)
              WTF::fastFree(v36, v9);
            else
              --*(_DWORD *)v36;
          }
          if (v13 == a3)
            v11 = v27;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_BYTE *)(v16 + 24))
            {
              v17 = *(WTF **)(v16 + 16);
              *(_QWORD *)(v16 + 16) = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 1)
                  WTF::fastFree(v17, v9);
                else
                  --*(_DWORD *)v17;
              }
            }
            WTF::fastFree((WTF *)v16, v9);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
              WTF::fastFree(v14, v9);
            else
              --*(_DWORD *)v14;
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

_DWORD *WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WTF::ListHashSet<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl>>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock,WTF::SingleThreadWeakPtrImpl>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;

  v2 = qword_1ECE84208;
  if (qword_1ECE84208)
  {
    v3 = *(_DWORD *)(qword_1ECE84208 - 4);
    v4 = *(_DWORD *)(qword_1ECE84208 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE84208 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE84208 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    v8 = v3;
    v37 = v3;
    while (1)
    {
      v9 = (WTF **)(v2 + 16 * v7);
      v10 = *v9;
      if (*v9 != (WTF *)-1)
      {
        if (v10)
        {
          if (qword_1ECE84208)
            v16 = *(_DWORD *)(qword_1ECE84208 - 8);
          else
            v16 = 0;
          v17 = ~(*((_QWORD *)v10 + 1) << 32) + *((_QWORD *)v10 + 1);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(qword_1ECE84208 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = qword_1ECE84208 + 16 * v22;
          v25 = *(WTF **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            v26 = (WTF *)*((_QWORD *)v25 + 1);
            while (v26)
            {
              v27 = v26;
              v26 = (WTF *)*((_QWORD *)v26 + 2);
              v28 = *(WTF **)v27;
              *(_QWORD *)v27 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                  WTF::fastFree(v28, v6);
                else
                  --*(_DWORD *)v28;
              }
              WTF::fastFree(v27, v6);
            }
            if (*(_QWORD *)v25)
              WTF::fastFree((WTF *)(*(_QWORD *)v25 - 16), v6);
            WTF::fastFree(v25, v6);
            v29 = *(WTF **)v24;
            *(_QWORD *)v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                WTF::fastFree(v29, v6);
              else
                --*(_DWORD *)v29;
            }
          }
          else
          {
            *(_QWORD *)v24 = 0;
          }
          v30 = *v9;
          *v9 = 0;
          *(_QWORD *)v24 = v30;
          v31 = v2 + 16 * v7;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v32;
          v33 = *(WTF **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            v34 = (WTF *)*((_QWORD *)v33 + 1);
            while (v34)
            {
              v35 = v34;
              v34 = (WTF *)*((_QWORD *)v34 + 2);
              v36 = *(WTF **)v35;
              *(_QWORD *)v35 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 1)
                  WTF::fastFree(v36, v6);
                else
                  --*(_DWORD *)v36;
              }
              WTF::fastFree(v35, v6);
            }
            if (*(_QWORD *)v33)
              WTF::fastFree((WTF *)(*(_QWORD *)v33 - 16), v6);
            WTF::fastFree(v33, v6);
          }
          v10 = *v9;
          *v9 = 0;
          v8 = v37;
          if (!v10)
            goto LABEL_52;
          if (*(_DWORD *)v10 == 1)
            goto LABEL_56;
          --*(_DWORD *)v10;
        }
        else
        {
          v11 = v2 + 16 * v7;
          v12 = *(WTF **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v12)
          {
            v13 = (WTF *)*((_QWORD *)v12 + 1);
            while (v13)
            {
              v14 = v13;
              v13 = (WTF *)*((_QWORD *)v13 + 2);
              v15 = *(WTF **)v14;
              *(_QWORD *)v14 = 0;
              if (v15)
              {
                if (*(_DWORD *)v15 == 1)
                  WTF::fastFree(v15, v6);
                else
                  --*(_DWORD *)v15;
              }
              WTF::fastFree(v14, v6);
            }
            if (*(_QWORD *)v12)
              WTF::fastFree((WTF *)(*(_QWORD *)v12 - 16), v6);
            WTF::fastFree(v12, v6);
            v10 = *v9;
          }
          *v9 = 0;
          if (!v10)
            goto LABEL_52;
          if (*(_DWORD *)v10 == 1)
          {
LABEL_56:
            WTF::fastFree(v10, v6);
            goto LABEL_52;
          }
          --*(_DWORD *)v10;
        }
      }
LABEL_52:
      if (++v7 == v8)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Vector<WTF::CheckedRef<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 <= v4)
    goto LABEL_25;
  if (v8 >= 0x11)
  {
    if (v8 >> 29)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x1963A3CE0);
    }
    result = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_19;
    goto LABEL_13;
  }
  result += 16;
  *(_QWORD *)v3 = v3 + 16;
  *(_DWORD *)(v3 + 8) = 16;
  if ((_DWORD)v5)
  {
LABEL_13:
    v10 = 8 * v5;
    v11 = v9;
    do
    {
      v12 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      *(_QWORD *)result = v12;
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 16);
        if (!v14)
          goto LABEL_26;
        *(_DWORD *)(v13 + 16) = v14 - 1;
      }
      result += 8;
      v11 = (WTF *)((char *)v11 + 8);
      v10 -= 8;
    }
    while (v10);
    result = *(_QWORD *)v3;
  }
LABEL_19:
  if ((WTF *)(v3 + 16) == v9 || !v9)
  {
    v9 = (WTF *)result;
  }
  else
  {
    if ((WTF *)result == v9)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    result = WTF::fastFree(v9, a2);
    v9 = *(WTF **)v3;
  }
LABEL_25:
  v15 = *(unsigned int *)(v3 + 12);
  *((_QWORD *)v9 + v15) = a2;
  ++a2[4];
  *(_DWORD *)(v3 + 12) = v15 + 1;
  return result;
}

__n128 WTF::Vector<WebCore::LayoutRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::LayoutRect>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  char *result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  size_t v13;
  uint64_t v14;
  int8x16_t *v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;

  v7 = *((_QWORD *)a1 + 1);
  if ((v7 || (v7 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *a4);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v9 = result;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v10;
      v12 = *(int8x16_t **)a3;
      v13 = *(unsigned int *)(a3 + 8);
      v14 = *a4;
      if ((_DWORD)v10)
      {
        v15 = *(int8x16_t **)a2;
        if ((_DWORD)v10 == 1)
          *result = v15->i8[0];
        else
          result = (char *)memcpy(result, v15, *(_QWORD *)(a2 + 8));
      }
      v16 = &v9[v11];
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 == 1)
          *v16 = v12->i8[0];
        else
          result = (char *)memcpy(&v9[v11], v12, v13);
      }
      v19 = *(_DWORD *)(v14 + 16);
      v18 = v14 + 16;
      v17 = v19;
      if (v19)
      {
        result = &v16[v13];
        v20 = (char *)(v18 - v17);
        if ((_DWORD)v17 == 1)
          *result = *v20;
        else
          return (char *)memcpy(result, v20, v17);
      }
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>(char *result, int8x16_t *a2, int a3, int8x16_t *a4, int a5, uint64_t a6)
{
  char *v6;
  char *v7;
  __int128 v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  unsigned int v26;
  int8x16_t *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v6 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v7 = &result[2 * (a3 & 0xFFFFFFC0)];
    v8 = 0uLL;
    do
    {
      v38.val[0] = *a2;
      v9 = a2[1];
      v41.val[0] = a2[2];
      v10 = a2[3];
      a2 += 4;
      v11 = v10;
      v41.val[1] = 0uLL;
      v44.val[0] = v9;
      v38.val[1] = 0uLL;
      v12 = result;
      vst2q_s8(v12, v38);
      v12 += 32;
      v44.val[1] = 0uLL;
      vst2q_s8(v12, v44);
      v13 = result + 64;
      vst2q_s8(v13, v41);
      v14 = result + 96;
      vst2q_s8(v14, *(int8x16x2_t *)(&v8 - 1));
      result += 128;
    }
    while (result != v7);
    result = v7;
  }
  while (result != v6)
  {
    v15 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v15;
    result += 2;
  }
  v16 = &v6[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v17 = &v6[2 * (a5 & 0xFFFFFFC0)];
    v18 = 0uLL;
    do
    {
      v39.val[0] = *a4;
      v19 = a4[1];
      v42.val[0] = a4[2];
      v20 = a4[3];
      a4 += 4;
      v21 = v20;
      v42.val[1] = 0uLL;
      v45.val[0] = v19;
      v39.val[1] = 0uLL;
      v22 = v6;
      vst2q_s8(v22, v39);
      v22 += 32;
      v45.val[1] = 0uLL;
      vst2q_s8(v22, v45);
      v23 = v6 + 64;
      vst2q_s8(v23, v42);
      v24 = v6 + 96;
      vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
      v6 += 128;
    }
    while (v6 != v17);
    v6 = v17;
  }
  while (v6 != v16)
  {
    v25 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v6 = v25;
    v6 += 2;
  }
  v26 = *(_DWORD *)(a6 + 16);
  v27 = (int8x16_t *)(a6 + 16 - v26);
  v28 = &v16[2 * v26];
  if (v26 >= 0x40)
  {
    v29 = &v16[2 * (v26 & 0xFFFFFFC0)];
    v30 = 0uLL;
    do
    {
      v40.val[0] = *v27;
      v31 = v27[1];
      v43.val[0] = v27[2];
      v32 = v27[3];
      v27 += 4;
      v33 = v32;
      v43.val[1] = 0uLL;
      v46.val[0] = v31;
      v40.val[1] = 0uLL;
      v34 = v16;
      vst2q_s8(v34, v40);
      v34 += 32;
      v46.val[1] = 0uLL;
      vst2q_s8(v34, v46);
      v35 = v16 + 64;
      vst2q_s8(v35, v43);
      v36 = v16 + 96;
      vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
      v16 += 128;
    }
    while (v16 != v29);
    v16 = v29;
  }
  while (v16 != v28)
  {
    v37 = v27->u8[0];
    v27 = (int8x16_t *)((char *)v27 + 1);
    *(_WORD *)v16 = v37;
    v16 += 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::add(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 8 * v27;
        goto LABEL_34;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 16);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1963A41C8);
    }
    *(_DWORD *)(v18 + 16) = v19 - 1;
  }
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_22;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_29:
      result = WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::rehash(a2, v26, v14);
      v14 = (uint64_t *)result;
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_33;
    }
LABEL_22:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_29;
  }
LABEL_33:
  v29 = v22 + 8 * v25;
  v28 = 1;
LABEL_34:
  *(_QWORD *)v5 = v14;
  *(_QWORD *)(v5 + 8) = v29;
  *(_BYTE *)(v5 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::RenderBox,WTF::RawPtrTraits<WebCore::RenderBox>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v13 = 0;
        *v24 = v14;
        v25 = *v13;
        if (*v13)
        {
          v26 = *(_DWORD *)(v25 + 16);
          if (!v26)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v25 + 16) = v26 - 1;
        }
        if (v13 == a3)
          v12 = v24;
      }
      if (++v11 == v7)
        goto LABEL_20;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v12;
  }
  return result;
}

uint64_t WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v3 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v3)
      goto LABEL_6;
  }
  if (a1 == a2)
    return 0;
  v4 = *(unsigned int *)(a1 + 47);
  if (!(v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32))
    || (v3 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8)) == 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 && v14 != a2)
      {
        while (1)
        {
          v16 = *(unsigned int *)(v14 + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
          {
            v3 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
            if (v3)
              break;
          }
          v17 = *(_QWORD *)(v14 + 32);
          if (!v17)
            return 0;
          result = 0;
          v14 = *(_QWORD *)(v17 + 8);
          if (v14)
            v18 = v14 == a2;
          else
            v18 = 1;
          if (v18)
            return result;
        }
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if ((*(_BYTE *)(v3 + 45) & 0x40) == 0)
  {
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
      if (!result)
      {
        if (v3 == a2)
          return 0;
        v6 = *(unsigned int *)(v3 + 47);
        if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
          || (result = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8)) == 0)
        {
          v7 = *(_QWORD *)(v3 + 32);
          if (!v7)
            return 0;
          v8 = *(_QWORD *)(v7 + 8);
          if (!v8 || v8 == a2)
            return 0;
          while (1)
          {
            v10 = *(unsigned int *)(v8 + 47);
            if (v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
            {
              result = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
              if (result)
                break;
            }
            v11 = *(_QWORD *)(v8 + 32);
            if (!v11)
              return 0;
            result = 0;
            v8 = *(_QWORD *)(v11 + 8);
            if (v8)
              v12 = v8 == a2;
            else
              v12 = 1;
            if (v12)
              return result;
          }
        }
      }
      v3 = result;
      if ((*(_BYTE *)(result + 45) & 0x40) != 0)
        return result;
    }
  }
  return v3;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WebCore::FloatingObjectHashFunctions>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>,WTF::HashTraits<WTF::ListHashSetNode<std::unique_ptr<WebCore::FloatingObject>> *>>::contains<WTF::ListHashSetTranslator<WebCore::FloatingObjectHashFunctions>,WebCore::FloatingObject const*>(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int j;
  uint64_t **v10;
  uint64_t v11;
  int i;
  uint64_t **v13;
  uint64_t v14;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = *a2;
    if (*a2)
      v4 = *(_QWORD *)(v3 + 8);
    else
      v4 = 0;
    v5 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v2 & ((v7 >> 31) ^ v7);
    if (v3)
    {
      for (i = 1; ; ++i)
      {
        v13 = *(uint64_t ***)(result + 8 * v8);
        if (v13 != (uint64_t **)-1)
        {
          if (!v13)
            return 0;
          v14 = **v13;
          if (v14)
            v14 = *(_QWORD *)(v14 + 8);
          if (v14 == *(_QWORD *)(v3 + 8))
            return 1;
        }
        v8 = (v8 + i) & v2;
      }
    }
    for (j = 1; ; ++j)
    {
      v10 = *(uint64_t ***)(result + 8 * v8);
      if (v10 != (uint64_t **)-1)
      {
        if (!v10)
          return 0;
        v11 = **v10;
        if (!v11 || !*(_QWORD *)(v11 + 8))
          break;
      }
      v8 = (v8 + j) & v2;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebCore::LayoutUnit,WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<float,float>>(uint64_t result, float *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  float v16;
  double v17;
  int v18;
  int v19;
  double v20;
  int v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v5)
    {
      v11 = 8 * v5;
      v12 = v9;
      do
      {
        v13 = *(_QWORD *)v12;
        v12 = (WTF *)((char *)v12 + 8);
        *(_QWORD *)result = v13;
        result += 8;
        v11 -= 8;
      }
      while (v11);
      result = *(_QWORD *)v3;
    }
    if (v9)
    {
      if ((WTF *)result == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree(v9, v10);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = (WTF *)result;
    }
  }
  v14 = *(unsigned int *)(v3 + 12);
  v15 = (int *)((char *)v9 + 8 * v14);
  v16 = a2[1];
  v17 = *a2 * 64.0;
  if (v17 > -2147483650.0)
    v18 = (int)v17;
  else
    v18 = 0x80000000;
  if (v17 < 2147483650.0)
    v19 = v18;
  else
    v19 = 0x7FFFFFFF;
  *v15 = v19;
  v20 = v16 * 64.0;
  if (v20 >= 2147483650.0)
  {
    v21 = 0x7FFFFFFF;
  }
  else if (v20 <= -2147483650.0)
  {
    v21 = 0x80000000;
  }
  else
  {
    v21 = (int)v20;
  }
  v15[1] = v21;
  *(_DWORD *)(v3 + 12) = v14 + 1;
  return result;
}

BOOL WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  WTF **v8;
  WTF *v9;
  _BOOL8 v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v10 = 0;
    goto LABEL_40;
  }
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
    v10 = 0;
LABEL_18:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_19;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v8 = (WTF **)(v3 + 16 * v6);
    v9 = *v8;
    if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)v9 + 1))
    {
      *v8 = 0;
      if (*(_DWORD *)v9 == 1)
        WTF::fastFree(v9, a2);
      else
        --*(_DWORD *)v9;
      *v8 = (WTF *)-1;
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *(_QWORD *)a1;
  v10 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    *(_DWORD *)(v17 - 12) = v18 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_40:
    v14 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_20;
  }
  v11 = *(_DWORD *)(v3 - 4);
  v12 = *(unsigned int *)(v3 - 12);
  if (v11 < 9 || 6 * (int)v12 >= v11)
    goto LABEL_18;
  v19 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
  v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
  v21 = (v20 | HIWORD(v20)) + 1;
  if (v21 > 0x400)
  {
    if (v21 > 2 * v12)
      goto LABEL_38;
  }
  else if (3 * v21 > 4 * v12)
  {
LABEL_28:
    v22 = (double)v12;
    v23 = (double)v21;
    v24 = 0.604166667;
    goto LABEL_29;
  }
  LODWORD(v21) = 2 * v21;
  if (v21 <= 0x400)
    goto LABEL_28;
LABEL_38:
  v22 = (double)v12;
  v23 = (double)v21;
  v24 = 0.416666667;
LABEL_29:
  if (v23 * v24 <= v22)
    LODWORD(v21) = 2 * v21;
  if (v21 <= 8)
    v25 = 8;
  else
    v25 = v21;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v25, 0);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
  {
    v14 = 0;
    goto LABEL_20;
  }
LABEL_19:
  v14 = *(_DWORD *)(v3 - 12);
  v15 = 0x7FFFFFFF;
  if (v14 < 0x7FFFFFFF)
LABEL_20:
    v15 = v14;
  *(_DWORD *)(a1 + 12) = 2 * v15;
  return v10;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0x80000000;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (WTF **)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15)
      {
        if (v16 != (WTF *)-1)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v16 + ~((_QWORD)v16 << 32)) ^ (((unint64_t)v16 + ~((_QWORD)v16 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          *(_DWORD *)(v26 + 8) = *(_DWORD *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
              WTF::fastFree(v28, v10);
            else
              --*(_DWORD *)v28;
          }
          if (v15 == a3)
            v14 = v26;
        }
      }
      else
      {
        *v15 = 0;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::LayoutUnit,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3, 0);
}

BOOL WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _BOOL8 v7;
  unsigned int v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  WTF **v24;
  WTF *v25;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = 0;
    goto LABEL_6;
  }
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
    v7 = 0;
LABEL_7:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_8;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v24 = (WTF **)(v3 + 16 * v6);
    v25 = *v24;
    if ((unint64_t)*v24 + 1 >= 2 && !*((_QWORD *)v25 + 1))
    {
      *v24 = 0;
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, a2);
      else
        --*(_DWORD *)v25;
      *v24 = (WTF *)-1;
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *(_QWORD *)a1;
  v7 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v21 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    *(_DWORD *)(v21 - 12) = v22 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_6:
    v8 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_9:
    v9 = v8;
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(v3 - 4);
  v12 = *(unsigned int *)(v3 - 12);
  if (v11 < 9 || 6 * (int)v12 >= v11)
    goto LABEL_7;
  v14 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = (v15 | HIWORD(v15)) + 1;
  if (v16 > 0x400)
  {
    if (v16 > 2 * v12)
      goto LABEL_32;
  }
  else if (3 * v16 > 4 * v12)
  {
LABEL_20:
    v17 = (double)v12;
    v18 = (double)v16;
    v19 = 0.604166667;
    goto LABEL_21;
  }
  LODWORD(v16) = 2 * v16;
  if (v16 <= 0x400)
    goto LABEL_20;
LABEL_32:
  v17 = (double)v12;
  v18 = (double)v16;
  v19 = 0.416666667;
LABEL_21:
  if (v18 * v19 <= v17)
    LODWORD(v16) = 2 * v16;
  if (v16 <= 8)
    v20 = 8;
  else
    v20 = v16;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v20, 0);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
  {
    v8 = 0;
    goto LABEL_9;
  }
LABEL_8:
  v8 = *(_DWORD *)(v3 - 12);
  v9 = 0x7FFFFFFF;
  if (v8 < 0x7FFFFFFF)
    goto LABEL_9;
LABEL_10:
  *(_DWORD *)(a1 + 12) = 2 * v9;
  return v7;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WTF **v27;
  WTF *v28;
  WTF *v29;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (WTF **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16)
      {
        if (v17 != (WTF *)-1)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (WTF **)(v18 + 16 * v25);
          *v27 = 0;
          v28 = *v16;
          *v16 = 0;
          *v27 = v28;
          v27[1] = *(WTF **)(v6 + 16 * v13 + 8);
          v29 = *v16;
          *v16 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
              WTF::fastFree(v29, v10);
            else
              --*(_DWORD *)v29;
          }
          if (v16 == a3)
            v14 = v27;
        }
      }
      else
      {
        *v16 = 0;
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>&>@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t *v10;
  WTF *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t *v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;

  v5 = result;
  v7 = *result;
  if (*result
    || (v31 = a2,
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(result),
        a2 = v31,
        (v7 = *v5) != 0))
  {
    v8 = 0;
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
    v8 = 1;
  }
  v10 = 0;
  v11 = (WTF *)*a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v9;
    v18 = (uint64_t *)(v7 + 16 * v17);
    v19 = (WTF *)*v18;
    if (!*v18)
    {
      if (v10)
      {
        *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(*v5 - 16);
        v11 = (WTF *)*a2;
        v18 = v10;
      }
      *a2 = 0;
      result = (uint64_t *)*v18;
      *v18 = (uint64_t)v11;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      v20 = *a3;
      *((_BYTE *)v18 + 12) = *((_BYTE *)a3 + 4);
      *((_DWORD *)v18 + 2) = v20;
      v21 = *v5;
      if (*v5)
        v22 = *(_DWORD *)(v21 - 12) + 1;
      else
        v22 = 1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v5;
      if (*v5)
        v24 = *(_DWORD *)(v23 - 12);
      else
        v24 = 0;
      v25 = (*(_DWORD *)(v23 - 16) + v24);
      v26 = *(unsigned int *)(v23 - 4);
      if (v26 > 0x400)
      {
        if (v26 > 2 * v25)
          goto LABEL_18;
      }
      else
      {
        if (3 * v26 > 4 * v25)
        {
LABEL_18:
          *(_QWORD *)a4 = v18;
          *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
          *(_BYTE *)(a4 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v26)
        {
          v30 = 8;
          goto LABEL_29;
        }
      }
      v30 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
      result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v5, v30, (WTF **)v18);
      v18 = result;
      v23 = *v5;
      if (*v5)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_18;
    }
    if (v19 != (WTF *)-1)
      break;
    v10 = (uint64_t *)(v7 + 16 * v17);
LABEL_7:
    v15 = i + v17;
  }
  if (v19 != v11)
    goto LABEL_7;
  if ((v8 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v7 - 4);
  *(_QWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v7 + 16 * v27;
  *(_BYTE *)(a4 + 16) = 0;
  v28 = v7 + 16 * v17;
  v29 = *a3;
  *(_BYTE *)(v28 + 12) = *((_BYTE *)a3 + 4);
  *(_DWORD *)(v28 + 8) = v29;
  return result;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::optional<WebCore::LayoutUnit>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::optional<WebCore::LayoutUnit>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3, 0);
}

uint64_t WTF::WeakHashMap<WebCore::RenderBox const,WebCore::Length,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_19;
  v3 = *(unsigned int *)(v2 - 4);
  if (!(_DWORD)v3)
  {
LABEL_15:
    *(_DWORD *)(result + 8) = 0;
    goto LABEL_16;
  }
  v4 = 0;
  v5 = v3 - 1;
  do
  {
    v7 = v2 + 16 * v5;
    if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      v18 = result;
      v16 = v2;
      v17 = v5;
      v15 = v4;
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v2 + 16 * v5, a2);
      v2 = v16;
      v5 = v17;
      result = v18;
      v4 = v15 + 1;
    }
  }
  while ((unint64_t)v5--);
  v2 = *(_QWORD *)result;
  if (v4)
  {
    v12 = v4;
    *(_DWORD *)(v2 - 16) += v4;
    v13 = *(_QWORD *)result;
    if (*(_QWORD *)result)
      v14 = *(_DWORD *)(v13 - 12);
    else
      v14 = 0;
    *(_DWORD *)(v13 - 12) = v14 - v12;
    v2 = *(_QWORD *)result;
  }
  if (!v2)
  {
LABEL_19:
    v10 = 0;
    *(_DWORD *)(result + 8) = 0;
    goto LABEL_17;
  }
  v8 = *(_DWORD *)(v2 - 4);
  if (v8 < 9 || 6 * *(_DWORD *)(v2 - 12) >= v8)
    goto LABEL_15;
  v19 = result;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)result);
  result = v19;
  v2 = *(_QWORD *)v19;
  *(_DWORD *)(v19 + 8) = 0;
  if (!v2)
  {
    v10 = 0;
    goto LABEL_17;
  }
LABEL_16:
  v10 = *(_DWORD *)(v2 - 12);
  v11 = 0x7FFFFFFF;
  if (v10 < 0x7FFFFFFF)
LABEL_17:
    v11 = v10;
  *(_DWORD *)(result + 12) = 2 * v11;
  return result;
}

int *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(uint64_t a1, void *a2)
{
  int *result;

  result = *(int **)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    if (*result == 1)
      result = (int *)WTF::fastFree((WTF *)result, a2);
    else
      --*result;
  }
  *(_QWORD *)a1 = -1;
  if (*(_BYTE *)(a1 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  WTF *v34;
  int v35;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(result + 16);
    do
    {
      *(_QWORD *)((char *)v10 + 7) = 0;
      *v10 = 0;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    while (1)
    {
      v13 = v4 + 16 * v11;
      v14 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        if (v14 == (WTF *)-1)
          goto LABEL_10;
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 16 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = v22;
        v25 = v15 + 16 * v22;
        if (*(_BYTE *)(v25 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 8));
          v34 = *(WTF **)v25;
          *(_QWORD *)v25 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v8);
            else
              --*(_DWORD *)v34;
          }
        }
        else
        {
          *(_QWORD *)v25 = 0;
        }
        v26 = *(WTF **)v13;
        *(_QWORD *)v13 = 0;
        v27 = v15 + 16 * v24;
        *(_DWORD *)(v27 + 8) = 0;
        v28 = v27 + 8;
        *(_QWORD *)v25 = v26;
        v29 = v4 + 16 * v11;
        v32 = *(unsigned __int8 *)(v29 + 12);
        v30 = (_BYTE *)(v29 + 12);
        v31 = v32;
        v33 = (int *)(v30 - 4);
        *(_WORD *)(v28 + 5) = 0;
        *(_BYTE *)(v25 + 12) = v32;
        *(_BYTE *)(v28 + 5) = v30[1];
        if (v32 - 2 >= 9)
        {
          if (v31 <= 0xD)
          {
            if (((1 << v31) & 0x3003) != 0)
            {
              *(_DWORD *)v28 = 0;
            }
            else if (v31 == 11)
            {
              v35 = *v33;
              *v33 = 0;
              *(_DWORD *)v28 = v35;
            }
          }
        }
        else
        {
          *(_BYTE *)(v28 + 6) = *(_BYTE *)(v4 + 16 * v11 + 14);
          *(_DWORD *)v28 = *v33;
        }
        *v30 = 0;
        v14 = *(WTF **)v13;
        *(_QWORD *)v13 = 0;
        if (!v14)
          goto LABEL_10;
        if (*(_DWORD *)v14 == 1)
        {
LABEL_32:
          WTF::fastFree(v14, v8);
          goto LABEL_10;
        }
        --*(_DWORD *)v14;
      }
      else
      {
        if (*(_BYTE *)(v13 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v4 + 16 * v11 + 8));
          v14 = *(WTF **)v13;
        }
        *(_QWORD *)v13 = 0;
        if (!v14)
          goto LABEL_10;
        if (*(_DWORD *)v14 == 1)
          goto LABEL_32;
        --*(_DWORD *)v14;
      }
LABEL_10:
      if (++v11 == v12)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::Length,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WebCore::Length>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v3);
}

void WTF::WeakHashMap<WebCore::RenderBox const,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;

  v2 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
  if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
  {
    v3 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
    if (!v3)
      goto LABEL_29;
    v4 = 0;
    v5 = v3 - 1;
    do
    {
      v6 = v5;
      v7 = (WTF **)(v2 + 16 * v5);
      v8 = *v7;
      if ((unint64_t)*v7 + 1 >= 2 && !*((_QWORD *)v8 + 1))
      {
        *v7 = 0;
        if (*(_DWORD *)v8 == 1)
          WTF::fastFree(v8, a2);
        else
          --*(_DWORD *)v8;
        *v7 = (WTF *)-1;
        v9 = v2 + 16 * v5;
        v10 = *(WTF **)(v9 + 8);
        *(_QWORD *)(v9 + 8) = 0;
        if (v10)
        {
          v11 = (_DWORD *)*((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = 0;
          if (v11)
          {
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              --v11[2];
          }
          WTF::fastFree(v10, a2);
        }
        ++v4;
      }
      --v5;
    }
    while (v6);
    v2 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
    if (v4)
    {
      *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 16) += v4;
      if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
        v12 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12);
      else
        v12 = 0;
      *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) = v12 - v4;
      v2 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
    }
    if (v2)
    {
      v13 = *(_DWORD *)(v2 - 4);
      v14 = *(unsigned int *)(v2 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        v18 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v14)
            goto LABEL_40;
        }
        else if (3 * v20 > 4 * v14)
        {
LABEL_38:
          v21 = (double)v14;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_41;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_38;
LABEL_40:
        v21 = (double)v14;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_41:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(v24, 0);
        v2 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
        dword_1EE2F9340 = 0;
        if (!WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
        {
          v16 = 0;
          goto LABEL_33;
        }
LABEL_30:
        v16 = *(_DWORD *)(v2 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
          goto LABEL_34;
        goto LABEL_33;
      }
LABEL_29:
      dword_1EE2F9340 = 0;
      goto LABEL_30;
    }
  }
  v16 = 0;
  dword_1EE2F9340 = 0;
LABEL_33:
  v17 = v16;
LABEL_34:
  dword_1EE2F9344 = 2 * v17;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::ShapeOutsideInfo>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::ShapeOutsideInfo>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(unsigned int a1, WTF **a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  WTF *v34;
  uint64_t result;

  v4 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap;
  if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
  {
    v5 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 4);
    v6 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::shapeOutsideInfoMap(void)::staticInfoMap = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (WTF **)(v4 + 16 * v9);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
      {
        if (v13)
        {
          if (WebCore::shapeOutsideInfoMap(void)::staticInfoMap)
            v17 = *(_DWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap - 8);
          else
            v17 = 0;
          v18 = ((unint64_t)v13 + ~((_QWORD)v13 << 32)) ^ (((unint64_t)v13 + ~((_QWORD)v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = WebCore::shapeOutsideInfoMap(void)::staticInfoMap + 16 * v23;
          v26 = *(WTF **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v26)
          {
            v27 = (_DWORD *)*((_QWORD *)v26 + 1);
            *((_QWORD *)v26 + 1) = 0;
            if (v27)
            {
              if (v27[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
              else
                --v27[2];
            }
            WTF::fastFree(v26, v8);
            v28 = *(WTF **)v25;
            *(_QWORD *)v25 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                WTF::fastFree(v28, v8);
              else
                --*(_DWORD *)v28;
            }
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v29 = *v12;
          *v12 = 0;
          *(_QWORD *)v25 = v29;
          v30 = v4 + 16 * v9;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          *(_QWORD *)(v25 + 8) = v31;
          v32 = *(WTF **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
          {
            v33 = (_DWORD *)*((_QWORD *)v32 + 1);
            *((_QWORD *)v32 + 1) = 0;
            if (v33)
            {
              if (v33[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
              else
                --v33[2];
            }
            WTF::fastFree(v32, v8);
          }
          v34 = *v12;
          *v12 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v8);
            else
              --*(_DWORD *)v34;
          }
          if (v12 == a2)
            v10 = v25;
        }
        else
        {
          v14 = v4 + 16 * v9;
          v15 = *(WTF **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            v16 = (_DWORD *)*((_QWORD *)v15 + 1);
            *((_QWORD *)v15 + 1) = 0;
            if (v16)
            {
              if (v16[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
              else
                --v16[2];
            }
            WTF::fastFree(v15, v8);
            v13 = *v12;
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 1)
              WTF::fastFree(v13, v8);
            else
              --*(_DWORD *)v13;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

BOOL WTF::WeakHashMap<WebCore::RenderBoxModelObject const,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v9 = 0;
    goto LABEL_26;
  }
  v4 = *(_DWORD *)(v3 - 4);
  if (!v4)
  {
    v9 = 0;
LABEL_15:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_16;
  }
  v5 = 0;
  v6 = v4 - 1;
  do
  {
    v7 = v3 + 16 * v6;
    if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v7 + 8))
    {
      WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(v7, a2);
      ++v5;
    }
  }
  while ((unint64_t)v6--);
  v3 = *(_QWORD *)a1;
  v9 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v3 - 16) += v5;
    v15 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v5;
    v3 = *(_QWORD *)a1;
  }
  if (!v3)
  {
LABEL_26:
    v12 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_17;
  }
  v10 = *(_DWORD *)(v3 - 4);
  if (v10 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v10)
    goto LABEL_15;
  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v3 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v3)
  {
    v12 = 0;
    goto LABEL_17;
  }
LABEL_16:
  v12 = *(_DWORD *)(v3 - 12);
  v13 = 0x7FFFFFFF;
  if (v12 < 0x7FFFFFFF)
LABEL_17:
    v13 = v12;
  *(_DWORD *)(a1 + 12) = 2 * v13;
  return v9;
}

WTF *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(uint64_t a1, void *a2)
{
  WTF *result;
  WTF **v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  result = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v4 = *(WTF ***)(a1 + 8);
  *(_QWORD *)a1 = -1;
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4[2];
    if (v5)
      *((_QWORD *)v5 + 1) = v4[1];
    v6 = v4[1];
    if (v6)
      *((_QWORD *)v6 + 2) = v5;
    v7 = *v4;
    *v4 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        WTF::fastFree(v7, a2);
      else
        --*(_DWORD *)v7;
    }
    return (WTF *)WTF::fastFree((WTF *)v4, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_8;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_9;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_8:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_9:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v8, 0);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF **v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = v5 + 16 * v10;
      v14 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        if (v14 != (WTF *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = v15 + 16 * v22;
          v25 = *(WTF ***)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (v25)
          {
            v26 = v25[2];
            if (v26)
              *((_QWORD *)v26 + 1) = v25[1];
            v27 = v25[1];
            if (v27)
              *((_QWORD *)v27 + 2) = v26;
            v28 = *v25;
            *v25 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
                WTF::fastFree(v28, v9);
              else
                --*(_DWORD *)v28;
            }
            WTF::fastFree((WTF *)v25, v9);
            v29 = *(WTF **)v24;
            *(_QWORD *)v24 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 1)
                WTF::fastFree(v29, v9);
              else
                --*(_DWORD *)v29;
            }
          }
          else
          {
            *(_QWORD *)v24 = 0;
          }
          v30 = *(WTF **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v24 = v30;
          v31 = v5 + 16 * v10;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v32;
          v33 = *(WTF ***)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            v34 = v33[2];
            if (v34)
              *((_QWORD *)v34 + 1) = v33[1];
            v35 = v33[1];
            if (v35)
              *((_QWORD *)v35 + 2) = v34;
            v36 = *v33;
            *v33 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 1)
                WTF::fastFree(v36, v9);
              else
                --*(_DWORD *)v36;
            }
            WTF::fastFree((WTF *)v33, v9);
          }
          v37 = *(WTF **)v13;
          *(_QWORD *)v13 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
              WTF::fastFree(v37, v9);
            else
              --*(_DWORD *)v37;
          }
          if (v13 == a3)
            v11 = v24;
        }
      }
      else
      {
        v38 = *(WTF ***)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v38)
        {
          v39 = v38[2];
          if (v39)
            *((_QWORD *)v39 + 1) = v38[1];
          v40 = v38[1];
          if (v40)
            *((_QWORD *)v40 + 2) = v39;
          v41 = *v38;
          *v38 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 1)
              WTF::fastFree(v41, v9);
            else
              --*(_DWORD *)v41;
          }
          WTF::fastFree((WTF *)v38, v9);
          v14 = *(WTF **)v13;
        }
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
            WTF::fastFree(v14, v9);
          else
            --*(_DWORD *)v14;
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

WTF *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::remove(uint64_t *a1, WTF **a2)
{
  WTF *result;
  WTF **v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v5 = (WTF **)a2[1];
  *a2 = (WTF *)-1;
  a2[1] = 0;
  if (v5)
  {
    v6 = v5[2];
    if (v6)
      *((_QWORD *)v6 + 1) = v5[1];
    v7 = v5[1];
    if (v7)
      *((_QWORD *)v7 + 2) = v6;
    v8 = *v5;
    *v5 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, a2);
      else
        --*(_DWORD *)v8;
    }
    result = (WTF *)WTF::fastFree((WTF *)v5, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  v9 = *a1;
  if (*a1)
    v10 = *(_DWORD *)(v9 - 12) - 1;
  else
    v10 = -1;
  *(_DWORD *)(v9 - 12) = v10;
  v11 = *a1;
  if (*a1)
  {
    v12 = 6 * *(_DWORD *)(v11 - 12);
    v13 = *(_DWORD *)(v11 - 4);
    if (v12 < v13 && v13 >= 9)
      return (WTF *)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBoxModelObject::ContinuationChainNode>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v13 >> 1, 0);
  }
  return result;
}

uint64_t WTF::WeakPtrFactory<WebCore::CachedResourceClient,WTF::SingleThreadWeakPtrImpl>::createWeakPtr<WebCore::RenderBoxModelObject>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  void *v7;
  WTF *v8;

  result = *a1;
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v8 = (WTF *)*a1;
    *a1 = result;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        result = *a1;
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)result;
  *a3 = result;
  return result;
}

BOOL WTF::WeakHashMap<WebCore::RenderBoxModelObject const,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::SingleThreadWeakPtrImpl>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  WTF **v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  _BOOL8 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
    {
      v12 = 0;
      goto LABEL_29;
    }
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      v8 = (WTF **)(v3 + 16 * v6);
      v9 = *v8;
      if ((unint64_t)*v8 + 1 >= 2 && !*((_QWORD *)v9 + 1))
      {
        *v8 = 0;
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, a2);
        else
          --*(_DWORD *)v9;
        *v8 = (WTF *)-1;
        v10 = v3 + 16 * v6;
        v11 = *(WTF **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 1)
            WTF::fastFree(v11, a2);
          else
            --*(_DWORD *)v11;
        }
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *(_QWORD *)a1;
    v12 = v5 != 0;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v14 = *(_DWORD *)(v13 - 12);
      else
        v14 = 0;
      *(_DWORD *)(v13 - 12) = v14 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v15 = *(_DWORD *)(v3 - 4);
      v16 = *(unsigned int *)(v3 - 12);
      if (v15 >= 9 && 6 * (int)v16 < v15)
      {
        v21 = (v16 - 1) | ((v16 - 1) >> 1) | ((((_DWORD)v16 - 1) | ((v16 - 1) >> 1)) >> 2);
        v22 = v21 | (v21 >> 4) | ((v21 | (v21 >> 4)) >> 8);
        v23 = (v22 | HIWORD(v22)) + 1;
        if (v23 > 0x400)
        {
          if (v23 > 2 * v16)
            goto LABEL_40;
        }
        else if (3 * v23 > 4 * v16)
        {
LABEL_38:
          v24 = (double)v16;
          v25 = (double)v23;
          v26 = 0.604166667;
          goto LABEL_41;
        }
        LODWORD(v23) = 2 * v23;
        if (v23 <= 0x400)
          goto LABEL_38;
LABEL_40:
        v24 = (double)v16;
        v25 = (double)v23;
        v26 = 0.416666667;
LABEL_41:
        if (v25 * v26 <= v24)
          LODWORD(v23) = 2 * v23;
        if (v23 <= 8)
          v27 = 8;
        else
          v27 = v23;
        WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash((uint64_t *)a1, v27, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v18 = 0;
          goto LABEL_33;
        }
LABEL_30:
        v18 = *(_DWORD *)(v3 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
          goto LABEL_34;
        goto LABEL_33;
      }
LABEL_29:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v12 = 0;
  }
  v18 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_33:
  v19 = v18;
LABEL_34:
  *(_DWORD *)(a1 + 12) = 2 * v19;
  return v12;
}

WTF **WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  WTF **v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  WTF **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    while (1)
    {
      v16 = (WTF **)(v6 + 16 * v13);
      v17 = *v16;
      if (*v16 != (WTF *)-1)
      {
        if (v17)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = 1;
          do
          {
            v27 = v25;
            v28 = *(_QWORD *)(v20 + 16 * v25);
            v25 = (v25 + v26++) & v21;
          }
          while (v28);
          v29 = (WTF **)(v20 + 16 * v27);
          v30 = v29[1];
          v29[1] = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 != 1)
            {
              --*(_DWORD *)v30;
              goto LABEL_24;
            }
            WTF::fastFree(v30, v10);
            v36 = *v29;
            *v29 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 1)
                WTF::fastFree(v36, v10);
              else
                --*(_DWORD *)v36;
            }
          }
          else
          {
LABEL_24:
            *v29 = 0;
          }
          v31 = *v16;
          *v16 = 0;
          *v29 = v31;
          v32 = v6 + 16 * v13;
          v33 = *(WTF **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v29[1] = v33;
          v34 = *(WTF **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v10);
            else
              --*(_DWORD *)v34;
          }
          v35 = *v16;
          *v16 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 1)
              WTF::fastFree(v35, v10);
            else
              --*(_DWORD *)v35;
          }
          if (v16 == a3)
            v14 = v29;
          goto LABEL_31;
        }
        v18 = v6 + 16 * v13;
        v19 = *(WTF **)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WTF::fastFree(v19, v10);
            v17 = *v16;
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
        *v16 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree(v17, v10);
          else
            --*(_DWORD *)v17;
        }
      }
LABEL_31:
      if (++v13 == v15)
        goto LABEL_44;
    }
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_44:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WebCore::RenderTextFragment&>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF **v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int i;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  WTF *v21;
  uint64_t result;
  WTF *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  WTF *v34;
  WTF *v35;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (WTF *)*a2;
  v13 = ~(*a2 << 32) + *a2;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (WTF **)(v8 + 16 * v18);
    v20 = *v19;
    if (*v19 != (WTF *)-1)
      break;
    v11 = (WTF **)(v8 + 16 * v18);
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *v11 = 0;
      v11[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v12 = (WTF *)*a2;
      v19 = v11;
    }
    *a2 = 0;
    v21 = *v19;
    *v19 = v12;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        WTF::fastFree(v21, a2);
      else
        --*(_DWORD *)v21;
    }
    result = *(_QWORD *)(a3 + 8);
    if (!result)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = a3;
      v34 = *(WTF **)(a3 + 8);
      *(_QWORD *)(a3 + 8) = result;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
        {
          WTF::fastFree(v34, a2);
          result = *(_QWORD *)(a3 + 8);
          if (!result)
          {
LABEL_16:
            v23 = v19[1];
            v19[1] = (WTF *)result;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                result = WTF::fastFree(v23, a2);
              else
                --*(_DWORD *)v23;
            }
            v24 = *a1;
            if (*a1)
              v25 = *(_DWORD *)(v24 - 12) + 1;
            else
              v25 = 1;
            *(_DWORD *)(v24 - 12) = v25;
            v29 = *a1;
            if (*a1)
              v30 = *(_DWORD *)(v29 - 12);
            else
              v30 = 0;
            v31 = (*(_DWORD *)(v29 - 16) + v30);
            v32 = *(unsigned int *)(v29 - 4);
            if (v32 > 0x400)
            {
              if (v32 <= 2 * v31)
                goto LABEL_36;
            }
            else if (3 * v32 <= 4 * v31)
            {
              if (!(_DWORD)v32)
              {
                v33 = 8;
LABEL_41:
                result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderTextFragment,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::rehash(a1, v33, v19);
                v19 = (WTF **)result;
                v29 = *a1;
                if (*a1)
                  v32 = *(unsigned int *)(v29 - 4);
                else
                  v32 = 0;
                goto LABEL_45;
              }
LABEL_36:
              v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
              goto LABEL_41;
            }
LABEL_45:
            *(_QWORD *)a4 = v19;
            *(_QWORD *)(a4 + 8) = v29 + 16 * v32;
            *(_BYTE *)(a4 + 16) = 1;
            return result;
          }
        }
        else
        {
          --*(_DWORD *)v34;
        }
      }
    }
    ++*(_DWORD *)result;
    goto LABEL_16;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 0;
  result = *(_QWORD *)(a3 + 8);
  if (result)
    goto LABEL_25;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a3;
  v35 = *(WTF **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = result;
  if (!v35)
    goto LABEL_25;
  if (*(_DWORD *)v35 != 1)
  {
    --*(_DWORD *)v35;
    goto LABEL_25;
  }
  WTF::fastFree(v35, a2);
  result = *(_QWORD *)(a3 + 8);
  if (result)
LABEL_25:
    ++*(_DWORD *)result;
  v27 = v8 + 16 * v18;
  v28 = *(WTF **)(v27 + 8);
  *(_QWORD *)(v27 + 8) = result;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      return WTF::fastFree(v28, a2);
    else
      --*(_DWORD *)v28;
  }
  return result;
}

void WebCore::RenderDeprecatedFlexibleBox::~RenderDeprecatedFlexibleBox(WebCore::RenderDeprecatedFlexibleBox *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::styleWillChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::RenderDeprecatedFlexibleBox *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_WORD *)(a1 + 69) & 2) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 48) == -1) != (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40)
                                                                                          + 48) == -1))
  {
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 40) + 48);
    v7 = a2;
    v8 = a3;
    v9 = (WebCore::RenderDeprecatedFlexibleBox *)a1;
    v12 = a1;
    v10 = WebCore::RenderChildIteratorAdapter<WebCore::RenderBlockFlow>::begin(&v12);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      do
      {
        WebCore::RenderBlockFlow::invalidateLineLayoutPath(v5, 0);
        WebCore::RenderChildIterator<WebCore::RenderBlockFlow>::operator++((uint64_t)&v10);
        v5 = v11;
      }
      while (v11);
    }
    a2 = v7;
    a3 = v8;
    a1 = (uint64_t)v9;
    if (v6 != -1)
    {
      WebCore::RenderDeprecatedFlexibleBox::clearLineClamp(v9);
      a3 = v8;
      a1 = (uint64_t)v9;
      a2 = v7;
    }
  }
  return WebCore::RenderBlock::styleWillChange((WebCore::RenderBox *)a1, a2, a3);
}

WTF *WebCore::RenderDeprecatedFlexibleBox::clearLineClamp(WebCore::RenderDeprecatedFlexibleBox *this)
{
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  WebCore::RenderElement *v8;
  int v9;
  uint64_t v10;
  int v11;
  WTF *result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD v18[2];
  char v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  int v24;

  v18[0] = this;
  v20 = 1;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 0x20) != 0
    || (*((_BYTE *)this + 123) & 4) == 0)
  {
    v1 = (*((_DWORD *)this + 31) & 8) == 0;
  }
  else
  {
    v1 = (*((unsigned __int8 *)this + 124) >> 3) & 1;
  }
  v19 = v1;
  if (!v1)
  {
    v13 = *((unsigned int *)this + 16);
    if (v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v14 = *(_QWORD *)((v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 45) & 4) != 0)
        {
          v15 = 1;
          v16 = 1;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 32) + 8) + 12) > v16)
            {
              v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 32) + 8) + 12);
              v16 = v15;
            }
            v17 = *(unsigned int *)(v14 + 47) | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32);
            if (!v17)
              break;
            v14 = *(_QWORD *)(v17 + 8);
            if (!v14)
              break;
          }
          while ((*(_BYTE *)(v14 + 45) & 4) != 0);
          v20 = v15;
        }
      }
    }
  }
  v18[1] = 0;
  v24 = -1;
  v2 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)v18);
  if (v2)
  {
    v4 = v2;
    do
    {
      if ((*(_DWORD *)(v4 + 20) & 0x1800000) != 0x1000000)
      {
        WebCore::RenderBox::clearOverridingContentSize(v4, v3);
        v5 = *(_DWORD *)(v4 + 20);
        v6 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 8);
        if ((v5 & 2) != 0)
        {
          if ((*(_BYTE *)(v6 + 8) & 0xF7) == 3 || (v7 = *(unsigned __int8 *)(v6 + 16), (v7 & 0xFFFFFFF7) == 3))
          {
LABEL_14:
            if ((v5 & 0x20) == 0)
            {
              *(_DWORD *)(v4 + 20) = v5 | 0x20;
              v8 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v4, 0);
              WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v4, v8);
            }
            v9 = *(_BYTE *)(v4 + 52) & 7;
            if (v9 == 1)
              v10 = v4;
            else
              v10 = 0;
            if (v10)
              ++*(_DWORD *)(v10 + 16);
            if (v9 == 1)
              WebCore::RenderBlock::markPositionedObjectsForLayout((WebCore::RenderBlock *)v4);
            if (v10)
            {
              v11 = *(_DWORD *)(v10 + 16);
              if (!v11)
              {
                __break(0xC471u);
                JUMPOUT(0x1963A6E1CLL);
              }
              *(_DWORD *)(v10 + 16) = v11 - 1;
            }
            goto LABEL_26;
          }
        }
        else
        {
          v7 = *(unsigned __int8 *)(v6 + 16);
        }
        if (!v7 && (*(_BYTE *)(v4 + 52) & 7) == 1)
          goto LABEL_14;
      }
LABEL_26:
      v4 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)v18);
    }
    while (v4);
  }
  result = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    result = (WTF *)WTF::fastFree(result, v3);
  }
  if (v21)
    return (WTF *)WTF::fastFree((WTF *)(v21 - 16), v3);
  return result;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)const::$_0::operator()(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  int *v4;
  int *v5;
  int v6;
  BOOL v7;
  int v8;

  result = WebCore::RenderBox::intrinsicScrollbarLogicalWidth(*(WebCore::RenderBox **)a1);
  v3 = (_DWORD)result << 6;
  if ((int)result < -33554432)
    v3 = 0x80000000;
  if ((int)result > 0x1FFFFFF)
    v3 = 0x7FFFFFFF;
  v4 = *(int **)(a1 + 8);
  v5 = *(int **)(a1 + 16);
  v6 = (*v4 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*v4, v3))
    v6 = *v4 + v3;
  *v4 = v6;
  v7 = __OFADD__(*v5, v3);
  v8 = *v5 + v3;
  if (v7)
    v8 = (*v5 >> 31) + 0x7FFFFFFF;
  *v5 = v8;
  return result;
}

WTF *WebCore::RenderDeprecatedFlexibleBox::layoutHorizontalBox(WebCore::RenderDeprecatedFlexibleBox *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6)
{
  uint64_t v7;
  float v8;
  double v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  float v13;
  float v14;
  double v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::RenderLayerScrollableArea *v19;
  int v20;
  uint64_t v21;
  float v22;
  double v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  float v27;
  float v28;
  double v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  float v35;
  unsigned int v36;
  int v37;
  _DWORD *updated;
  int v39;
  BOOL v40;
  uint64_t v41;
  float v42;
  double v43;
  int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  int v47;
  float v48;
  float v49;
  double v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  WTF *v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  signed int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  signed int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  void *v111;
  unsigned int v112;
  _BOOL4 hasLineIfEmpty;
  WTF::StringImpl *v114;
  char *LineStyle;
  void *v116;
  float v117;
  int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  WebCore::RenderObject *v125;
  uint64_t v126;
  WTF *v127;
  int v128;
  int v129;
  _DWORD *v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  _BYTE *v158;
  _BYTE *v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  _DWORD *v182;
  unint64_t v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  int v189;
  int v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  char *v200;
  int *v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  float v234;
  double v235;
  unsigned int v236;
  unsigned __int8 *v237;
  int v238;
  float v239;
  float v240;
  double v241;
  int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252;
  int v253;
  unsigned int v254;
  int v255;
  void *v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  WebCore::RenderBox *v270;
  float v271;
  WebCore::RenderBox *v272;
  int i;
  int v274;
  double v275;
  _BOOL4 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  double v280;
  int v281;
  uint64_t v282;
  _DWORD *v283;
  unsigned int v284;
  _QWORD *v285;
  int v286;
  uint64_t v287;
  _DWORD *v288;
  uint64_t v289;
  _DWORD *v290;
  unsigned int v291;
  _QWORD *v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  float v296;
  float v297;
  float v298;
  double v299;
  int v300;
  int v301;
  int v302;
  uint64_t v303;
  float v304;
  uint64_t v305;
  uint64_t v306;
  float v307;
  uint64_t v308;
  double v309;
  int v310;
  unsigned int v311;
  int v312;
  double v313;
  unsigned int v314;
  int v315;
  void *v316;
  unsigned int v317;
  int v318;
  uint64_t v319;
  int v320;
  BOOL v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  char v325;
  char v326;
  signed int v327;
  uint64_t v328;
  int v329;
  unint64_t v330;
  unsigned int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t j;
  unint64_t v335;
  unsigned int v336;
  uint64_t v337;
  WTF *v338;
  WTF *result;
  uint64_t v340;
  float v341;
  float v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  float v353;
  double v354;
  unsigned int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  float v362;
  uint64_t v363;
  double v364;
  unsigned int v365;
  int v366;
  int v367;
  int v368;
  BOOL v369;
  char v370;
  char v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  _DWORD *v375;
  unsigned int v376;
  signed int v377;
  char v378;
  WebCore::FlexBoxIterator *v380;
  WebCore::FlexBoxIterator *v381;
  char v382;
  WTF *v383;
  uint64_t v384;
  _BYTE v385[71];
  _BYTE v386[9];
  WebCore::RenderDeprecatedFlexibleBox *v387;
  uint64_t v388;
  char v389;
  int v390;
  uint64_t v391;
  WTF *v392;
  uint64_t v393;
  int v394;
  _DWORD v395[3];

  if ((*((_DWORD *)this + 31) & 0xE000) == 0x2000
    && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
  {
    v361 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v362 = 0.0;
    if ((*(_BYTE *)(v361 + 196) & 0xE) != 0)
    {
      v363 = *(_QWORD *)(v361 + 200);
      if (*(_BYTE *)(v363 + 5) && *(_BYTE *)(v363 + 68) == 4)
      {
        if (*(_BYTE *)(v363 + 70))
          v362 = *(float *)(v363 + 64);
        else
          v362 = (float)*(int *)(v363 + 64);
      }
      else
      {
        v362 = *(float *)(v361 + 192);
      }
    }
    v364 = v362 * 64.0;
    if (v364 >= 2147483650.0)
    {
      v365 = 0x7FFFFFFF;
    }
    else if (v364 <= -2147483650.0)
    {
      v365 = 0x80000000;
    }
    else
    {
      v365 = (int)v364;
    }
    v366 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v10 = v365 + v366;
    if (__OFADD__(v365, v366))
      v10 = (v365 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v8 = 0.0;
    if ((*(_BYTE *)(v7 + 196) & 0xE) != 0)
    {
      v333 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v333 + 5) && *(_BYTE *)(v333 + 68) == 4)
      {
        if (*(_BYTE *)(v333 + 70))
          v8 = *(float *)(v333 + 64);
        else
          v8 = (float)*(int *)(v333 + 64);
      }
      else
      {
        v8 = *(float *)(v7 + 192);
      }
    }
    v9 = v8 * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
  }
  v11 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v12 = v11[92];
  if ((v12 & 0xFFFFFFF7) == 3)
  {
    v357 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1144))(this);
    v12 = v11[92];
    v13 = (float)v357 * 0.015625;
  }
  else
  {
    v13 = 0.0;
  }
  switch(v12)
  {
    case 4:
      v14 = *((float *)v11 + 22);
      if (!v11[94])
        v14 = (float)SLODWORD(v14);
      break;
    case 3:
      v341 = *((float *)v11 + 22);
      if (!v11[94])
        v341 = (float)SLODWORD(v341);
      v14 = (float)(v13 * v341) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 88), v13);
      break;
    default:
      v16 = 0;
      goto LABEL_14;
  }
  v15 = v14 * 64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147483650.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
LABEL_14:
  v17 = v10 + v16;
  if (__OFADD__(v10, v16))
    v17 = (v10 >> 31) + 0x7FFFFFFF;
  v18 = *((_QWORD *)this + 18);
  if (v18)
  {
    v19 = *(WebCore::RenderLayerScrollableArea **)(v18 + 264);
    if (!v19)
      goto LABEL_23;
    if ((*((_BYTE *)this + 22) & 1) == 0)
      goto LABEL_23;
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v19 + 400))(v19))
    {
      v343 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v19 + 400))(v19);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v343 + 272))(v343) & 1) != 0)
        goto LABEL_23;
    }
    if ((*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v19 + 392))(v19))
    {
      v345 = (*(uint64_t (**)(WebCore::RenderLayerScrollableArea *))(*(_QWORD *)v19 + 392))(v19);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v345 + 272))(v345) & 1) != 0)
        goto LABEL_23;
    }
    v20 = (*((_DWORD *)this + 24) >> 10) & 7;
    if (v20 == 1)
    {
      if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 1) != 0)
      {
LABEL_23:
        LODWORD(v18) = 0;
        goto LABEL_24;
      }
    }
    else if ((v20 - 3) >= 2)
    {
      goto LABEL_23;
    }
    v344 = WebCore::RenderLayerScrollableArea::horizontalScrollbarHeight(v19, 0, (*((_DWORD *)this + 5) & 0x1000) == 0);
    if (v344 >= -33554432)
    {
      LODWORD(v18) = v344 << 6;
      if (v344 > 0x1FFFFFF)
        LODWORD(v18) = 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v18) = 0x80000000;
    }
  }
LABEL_24:
  v368 = v17 + v18;
  if (__OFADD__(v17, (_DWORD)v18))
    v368 = (v17 >> 31) + 0x7FFFFFFF;
  if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 >= 5
    && (*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0
    && (v351 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this)) != 0&& *(_DWORD *)(v351 + 8))
  {
    v352 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v353 = 0.0;
    if ((*(_BYTE *)(v352 + 172) & 0xE) != 0)
    {
      v360 = *(_QWORD *)(v352 + 200);
      if (*(_BYTE *)(v360 + 5) && *(_BYTE *)(v360 + 52) == 4)
      {
        if (*(_BYTE *)(v360 + 54))
          v353 = *(float *)(v360 + 48);
        else
          v353 = (float)*(int *)(v360 + 48);
      }
      else
      {
        v353 = *(float *)(v352 + 168);
      }
    }
    v354 = v353 * 64.0;
    if (v354 >= 2147483650.0)
    {
      v355 = 0x7FFFFFFF;
    }
    else if (v354 <= -2147483650.0)
    {
      v355 = 0x80000000;
    }
    else
    {
      v355 = (int)v354;
    }
    v356 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
    v24 = v355 + v356;
    if (__OFADD__(v355, v356))
      v24 = (v355 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v21 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
    v22 = 0.0;
    if ((*(_BYTE *)(v21 + 172) & 0xE) != 0)
    {
      v340 = *(_QWORD *)(v21 + 200);
      if (*(_BYTE *)(v340 + 5) && *(_BYTE *)(v340 + 52) == 4)
      {
        if (*(_BYTE *)(v340 + 54))
          v22 = *(float *)(v340 + 48);
        else
          v22 = (float)*(int *)(v340 + 48);
      }
      else
      {
        v22 = *(float *)(v21 + 168);
      }
    }
    v23 = v22 * 64.0;
    if (v23 >= 2147483650.0)
    {
      v24 = 0x7FFFFFFF;
    }
    else if (v23 <= -2147483650.0)
    {
      v24 = 0x80000000;
    }
    else
    {
      v24 = (int)v23;
    }
  }
  v25 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
  v26 = v25[76];
  if ((v26 & 0xFFFFFFF7) == 3)
  {
    v358 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1144))(this);
    v26 = v25[76];
    v27 = (float)v358 * 0.015625;
  }
  else
  {
    v27 = 0.0;
  }
  switch(v26)
  {
    case 4:
      v28 = *((float *)v25 + 18);
      if (!v25[78])
        v28 = (float)SLODWORD(v28);
      break;
    case 3:
      v342 = *((float *)v25 + 18);
      if (!v25[78])
        v342 = (float)SLODWORD(v342);
      v28 = (float)(v27 * v342) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v25 + 72), v27);
      break;
    default:
      v30 = 0;
      goto LABEL_40;
  }
  v29 = v28 * 64.0;
  if (v29 >= 2147483650.0)
  {
    v30 = 0x7FFFFFFF;
  }
  else if (v29 <= -2147483650.0)
  {
    v30 = 0x80000000;
  }
  else
  {
    v30 = (int)v29;
  }
LABEL_40:
  v31 = v24 + v30;
  if (__OFADD__(v24, v30))
    v31 = (v24 >> 31) + 0x7FFFFFFF;
  v32 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v32 == 4 || v32 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
    WebCore::RenderBlock::intrinsicBorderForFieldset(this);
  v33 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v34 = *(unsigned __int8 *)(v33 + 100);
  if ((v34 & 0xFFFFFFF7) == 3)
  {
    v359 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1144))(this);
    v34 = *(unsigned __int8 *)(v33 + 100);
    v35 = (float)v359 * 0.015625;
  }
  else
  {
    v35 = 0.0;
  }
  if (v34 == 11)
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v33 + 96), v35);
  v387 = this;
  v390 = 1;
  v392 = 0;
  v393 = 0;
  v391 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 0x20) != 0)
  {
    v36 = *((_DWORD *)this + 31);
LABEL_50:
    v37 = (v36 & 8) == 0;
    goto LABEL_51;
  }
  v36 = *((_DWORD *)this + 31);
  if ((*((_BYTE *)this + 123) & 4) == 0)
    goto LABEL_50;
  v37 = (v36 >> 3) & 1;
LABEL_51:
  v389 = v37;
  v374 = v31;
  if (!v37)
  {
    v346 = *((unsigned int *)this + 16);
    if (v346 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    {
      v347 = *(_QWORD *)((v346 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
      if (v347)
      {
        if ((*(_BYTE *)(v347 + 45) & 4) != 0)
        {
          v348 = 1;
          do
          {
            v349 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v347 + 88) + 32) + 8) + 12);
            if (v349 > v348)
            {
              v390 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v347 + 88) + 32) + 8) + 12);
              v348 = v349;
            }
            v350 = *(unsigned int *)(v347 + 47) | ((unint64_t)*(unsigned __int8 *)(v347 + 51) << 32);
            if (!v350)
              break;
            v347 = *(_QWORD *)(v350 + 8);
            if (!v347)
              break;
          }
          while ((*(_BYTE *)(v347 + 45) & 4) != 0);
        }
      }
    }
  }
  v388 = 0;
  v394 = -1;
  memset(v386, 0, sizeof(v386));
  WebCore::gatherFlexChildrenInfo((WebCore *)&v387, (WebCore::FlexBoxIterator *)a2, (unsigned int *)&v386[5], (unsigned int *)&v386[1], (unsigned int *)v386, a6);
  updated = (_DWORD *)WebCore::LocalFrameViewLayoutContext::updateScrollInfoAfterLayoutTransaction((WebCore::LocalFrameViewLayoutContext *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944) + 248) + 336));
  ++*updated;
  v383 = (WTF *)v385;
  v384 = 8;
  WebCore::appendChildLayoutDeltas((uint64_t)this, (uint64_t)&v383);
  v370 = 0;
  v371 = 0;
  v373 = (v31 >> 31) + 0x7FFFFFFF;
  while (2)
  {
    *((_DWORD *)this + 41) = v31;
    v39 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v40 = v39 == 4 || v39 == 2;
    if (v40 && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
    {
      v303 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v304 = 0.0;
      if ((*(_BYTE *)(v303 + 124) & 0xE) != 0)
      {
        v305 = *(_QWORD *)(v303 + 200);
        if (*(_BYTE *)(v305 + 5) && *(_BYTE *)(v305 + 76) == 4)
        {
          if (*(_BYTE *)(v305 + 78))
            v304 = *(float *)(v305 + 72);
          else
            v304 = (float)*(int *)(v305 + 72);
        }
        else
        {
          v304 = *(float *)(v303 + 120);
        }
      }
      v309 = v304 * 64.0;
      v310 = (int)v309;
      if (v309 <= -2147483650.0)
        v310 = 0x80000000;
      if (v309 < 2147483650.0)
        v311 = v310;
      else
        v311 = 0x7FFFFFFF;
      v312 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      if (__OFADD__(v311, v312))
        v45 = (v311 >> 31) + 0x7FFFFFFF;
      else
        v45 = v311 + v312;
      v31 = v374;
    }
    else
    {
      v41 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v42 = 0.0;
      if ((*(_BYTE *)(v41 + 124) & 0xE) != 0)
      {
        v294 = *(_QWORD *)(v41 + 200);
        if (*(_BYTE *)(v294 + 5) && *(_BYTE *)(v294 + 76) == 4)
        {
          if (*(_BYTE *)(v294 + 78))
            v42 = *(float *)(v294 + 72);
          else
            v42 = (float)*(int *)(v294 + 72);
          v31 = v374;
        }
        else
        {
          v42 = *(float *)(v41 + 120);
        }
      }
      v43 = v42 * 64.0;
      v44 = (int)v43;
      if (v43 <= -2147483650.0)
        v44 = 0x80000000;
      if (v43 < 2147483650.0)
        v45 = v44;
      else
        v45 = 0x7FFFFFFF;
    }
    v46 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v47 = v46[100];
    if ((v47 & 0xFFFFFFF7) == 3)
    {
      v301 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1144))(this);
      v47 = v46[100];
      v48 = (float)v301 * 0.015625;
    }
    else
    {
      v48 = 0.0;
    }
    switch(v47)
    {
      case 4:
        v49 = *((float *)v46 + 24);
        if (!v46[102])
          v49 = (float)SLODWORD(v49);
LABEL_68:
        v50 = v49 * 64.0;
        if (v50 >= 2147483650.0)
        {
          v51 = 0x7FFFFFFF;
        }
        else if (v50 <= -2147483650.0)
        {
          v51 = 0x80000000;
        }
        else
        {
          v51 = (int)v50;
        }
        break;
      case 3:
        v296 = *((float *)v46 + 24);
        if (!v46[102])
          v296 = (float)SLODWORD(v296);
        v49 = (float)(v48 * v296) / 100.0;
        goto LABEL_68;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v46 + 96), v48);
        v299 = v298 * 64.0;
        v51 = (int)v299;
        if (v299 <= -2147483650.0)
          v51 = 0x80000000;
        if (v299 >= 2147483650.0)
          v51 = 0x7FFFFFFF;
        break;
      default:
        v51 = 0;
        break;
    }
    v52 = __OFADD__(v45, v51);
    v53 = v45 + v51;
    if (v52)
      v54 = (v45 >> 31) + 0x7FFFFFFF;
    else
      v54 = v53;
    v388 = 0;
    v394 = -1;
    v55 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
    if (v55)
    {
      v56 = v55;
      v57 = 0;
      v377 = 0;
      v58 = 0;
      v59 = v54;
      do
      {
        v60 = *(_DWORD *)(v56 + 20);
        if ((a2 & ((v60 & 0x20) == 0)) == 1)
        {
          v60 |= 0x20u;
          *(_DWORD *)(v56 + 20) = v60;
        }
        if ((v60 & 0x1800000) != 0x1000000)
        {
          if (v57 >= HIDWORD(v384))
          {
            __break(0xC471u);
            JUMPOUT(0x1963A8E4CLL);
          }
          v61 = v383;
          WebCore::RenderBox::computeAndSetBlockDirectionMargins((WebCore::RenderBox *)v56, this);
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 1512))(v56);
          if ((*(_BYTE *)(v56 + 20) & 0xF8) != 0)
          {
            v88 = (_DWORD *)((char *)v61 + 8 * v57);
            v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) + 40) + 8)
                                        + 1944)
                            + 248);
            v90 = *(unsigned int *)(v89 + 508);
            if (!(_DWORD)v90)
              goto LABEL_124;
            v93 = *(_QWORD *)(*(_QWORD *)(v89 + 496) + 8 * v90 - 8);
            if (!v93)
              goto LABEL_124;
            v94 = v88[1];
            v95 = *(_DWORD *)(v93 + 64);
            v96 = *(_DWORD *)(v93 + 68);
            v52 = __OFADD__(v95, *v88);
            v97 = v95 + *v88;
            v98 = (v95 >> 31) + 0x7FFFFFFF;
            if (v52)
              v97 = v98;
            v52 = __OFADD__(v96, v94);
            v99 = v96 + v94;
            if (v52)
              v99 = (v96 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v93 + 64) = v97;
            *(_DWORD *)(v93 + 68) = v99;
            if ((*(_BYTE *)(v56 + 20) & 0xF8) != 0)
            {
LABEL_124:
              v91 = *(_QWORD *)(v56 + 32);
              if (v91
                && (v92 = *(_QWORD *)(v91 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v92 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(v89 + 479))
              {
                WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v56);
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v56 + 688))(v56);
              }
            }
            v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 24) + 8) + 40) + 8)
                                         + 1944)
                             + 248);
            if (*v88 == 0x80000000)
              v101 = 0x7FFFFFFF;
            else
              v101 = -*v88;
            v102 = *((_DWORD *)v61 + 2 * v57 + 1);
            if (v102 == 0x80000000)
              v103 = 0x7FFFFFFF;
            else
              v103 = -v102;
            v104 = *(unsigned int *)(v100 + 508);
            if ((_DWORD)v104)
            {
              v105 = *(_QWORD *)(*(_QWORD *)(v100 + 496) + 8 * v104 - 8);
              if (v105)
              {
                v106 = *(_DWORD *)(v105 + 64);
                v107 = *(_DWORD *)(v105 + 68);
                v52 = __OFADD__(v106, v101);
                v108 = v106 + v101;
                v109 = (v106 >> 31) + 0x7FFFFFFF;
                if (v52)
                  v108 = v109;
                v52 = __OFADD__(v107, v103);
                v110 = v107 + v103;
                if (v52)
                  v110 = (v107 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)(v105 + 64) = v108;
                *(_DWORD *)(v105 + 68) = v110;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 7) == 4)
          {
            v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1480))(v56);
            v63 = *(_DWORD *)(v56 + 164);
            v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1088))(v56);
            v65 = v63 + v64;
            if (__OFADD__(v63, v64))
              v65 = (v63 >> 31) + 0x7FFFFFFF;
            if ((v62 & 0xFF00000000) == 0)
              LODWORD(v62) = v65;
            v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1080))(v56);
            if (__OFADD__((_DWORD)v62, v66))
              v67 = (v62 >> 31) + 0x7FFFFFFF;
            else
              v67 = v62 + v66;
            v68 = *(_DWORD *)(v56 + 164);
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1080))(v56);
            v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1088))(v56);
            v71 = v69 + v70;
            if (__OFADD__(v69, v70))
              v71 = (v69 >> 31) + 0x7FFFFFFF;
            v52 = __OFADD__(v68, v71);
            v72 = v68 + v71;
            v73 = (v68 >> 31) + 0x7FFFFFFF;
            v31 = v374;
            if (v52)
              v72 = v73;
            v52 = __OFSUB__(v72, v67);
            v74 = v72 - v67;
            v75 = (v72 >> 31) + 0x7FFFFFFF;
            if (!v52)
              v75 = v74;
            v76 = v377;
            if (v377 <= v67)
              v76 = v67;
            if (v58 <= v75)
              v58 = v75;
            v377 = v76;
            v77 = v374 + v76;
            if (__OFADD__(v374, v76))
              v77 = v373;
            v52 = __OFADD__(v77, v58);
            v78 = v77 + v58;
            v79 = (v77 >> 31) + 0x7FFFFFFF;
            if (!v52)
              v79 = v78;
            if (v79 <= *((_DWORD *)this + 41))
              v79 = *((_DWORD *)this + 41);
          }
          else
          {
            v80 = *((_DWORD *)this + 41);
            v81 = *(_DWORD *)(v56 + 164);
            v52 = __OFADD__(v31, v81);
            v82 = v31 + v81;
            if (v52)
              v83 = v373;
            else
              v83 = v82;
            v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1080))(v56);
            v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 1088))(v56);
            v86 = v84 + v85;
            if (__OFADD__(v84, v85))
              v86 = (v84 >> 31) + 0x7FFFFFFF;
            v52 = __OFADD__(v83, v86);
            v79 = v83 + v86;
            v87 = (v83 >> 31) + 0x7FFFFFFF;
            v31 = v374;
            if (v52)
              v79 = v87;
            if (v80 > v79)
              v79 = v80;
          }
          ++v57;
          *((_DWORD *)this + 41) = v79;
          v54 = v59;
        }
        v56 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
      }
      while (v56);
    }
    else
    {
      v377 = 0;
    }
    v388 = 0;
    v394 = -1;
    if (WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387))
    {
      v112 = *((_DWORD *)this + 41);
    }
    else
    {
      hasLineIfEmpty = WebCore::RenderBlock::hasLineIfEmpty(this, v111);
      v112 = *((_DWORD *)this + 41);
      if (hasLineIfEmpty)
      {
        LineStyle = WebCore::RenderElement::firstLineStyle(this, v114);
        v117 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v116) * 64.0);
        if (v117 >= 2147500000.0)
        {
          v118 = 0x7FFFFFFF;
        }
        else if (v117 <= -2147500000.0)
        {
          v118 = 0x80000000;
        }
        else
        {
          v118 = (int)v117;
        }
        v52 = __OFADD__(v112, v118);
        v119 = v112 + v118;
        if (v52)
          v112 = (v112 >> 31) + 0x7FFFFFFF;
        else
          v112 = v119;
      }
    }
    v120 = v112 + v368;
    if (__OFADD__(v112, v368))
      v120 = (v112 >> 31) + 0x7FFFFFFF;
    *((_DWORD *)this + 41) = v120;
    WebCore::RenderBox::updateLogicalHeight(this);
    v367 = v120;
    v369 = v120 != *((_DWORD *)this + 41);
    *((_BYTE *)this + 200) = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 7) == 0;
    v388 = 0;
    v394 = -1;
    v121 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
    if (v121)
    {
      v122 = v121;
      v123 = 0;
      while (1)
      {
        if ((*(_DWORD *)(v122 + 20) & 0x1800000) != 0x1000000)
        {
          if (v123 >= HIDWORD(v384))
          {
            __break(0xC471u);
            JUMPOUT(0x1963A8E54);
          }
          v127 = v383;
          v128 = *(_DWORD *)(v122 + 164);
          WebCore::RenderBox::updateLogicalHeight((WebCore::RenderBox *)v122);
          if (v128 != *(_DWORD *)(v122 + 164))
          {
            v129 = *(_DWORD *)(v122 + 20);
            if ((v129 & 0x20) == 0)
              *(_DWORD *)(v122 + 20) = v129 | 0x20;
          }
          v130 = (_DWORD *)((char *)v127 + 8 * v123);
          (*(void (**)(uint64_t))(*(_QWORD *)v122 + 1512))(v122);
          if ((*(_BYTE *)(v122 + 20) & 0xF8) != 0)
          {
            v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 24) + 8) + 40)
                                                     + 8)
                                         + 1944)
                             + 248);
            v209 = *(unsigned int *)(v208 + 508);
            if (!(_DWORD)v209)
              goto LABEL_291;
            v212 = *(_QWORD *)(*(_QWORD *)(v208 + 496) + 8 * v209 - 8);
            if (!v212)
              goto LABEL_291;
            v213 = v130[1];
            v214 = *(_DWORD *)(v212 + 64);
            v215 = *(_DWORD *)(v212 + 68);
            v52 = __OFADD__(v214, *v130);
            v216 = v214 + *v130;
            v217 = (v214 >> 31) + 0x7FFFFFFF;
            if (v52)
              v216 = v217;
            v52 = __OFADD__(v215, v213);
            v218 = v215 + v213;
            if (v52)
              v218 = (v215 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)(v212 + 64) = v216;
            *(_DWORD *)(v212 + 68) = v218;
            if ((*(_BYTE *)(v122 + 20) & 0xF8) != 0)
            {
LABEL_291:
              v210 = *(_QWORD *)(v122 + 32);
              if (v210
                && (v211 = *(_QWORD *)(v210 + 8)) != 0
                && (*(_BYTE *)(*(_QWORD *)(v211 + 104) + 239) & 0x18) != 0
                && !*(_BYTE *)(v208 + 479))
              {
                WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v122);
              }
              else
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v122 + 688))(v122);
              }
            }
            v219 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 + 24) + 8) + 40)
                                                     + 8)
                                         + 1944)
                             + 248);
            if (*v130 == 0x80000000)
              v220 = 0x7FFFFFFF;
            else
              v220 = -*v130;
            v221 = *((_DWORD *)v127 + 2 * v123 + 1);
            if (v221 == 0x80000000)
              v222 = 0x7FFFFFFF;
            else
              v222 = -v221;
            v223 = *(unsigned int *)(v219 + 508);
            if ((_DWORD)v223)
            {
              v224 = *(_QWORD *)(*(_QWORD *)(v219 + 496) + 8 * v223 - 8);
              if (v224)
              {
                v225 = *(_DWORD *)(v224 + 64);
                v226 = *(_DWORD *)(v224 + 68);
                v52 = __OFADD__(v225, v220);
                v227 = v225 + v220;
                v228 = (v225 >> 31) + 0x7FFFFFFF;
                if (v52)
                  v227 = v228;
                v52 = __OFADD__(v226, v222);
                v229 = v226 + v222;
                if (v52)
                  v229 = (v226 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)(v224 + 64) = v227;
                *(_DWORD *)(v224 + 68) = v229;
              }
            }
          }
          v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1096))(v122);
          v132 = v54 + v131;
          if (__OFADD__(v54, v131))
            v132 = (v54 >> 31) + 0x7FFFFFFF;
          v133 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 7;
          if (v133 == 4)
          {
            v381 = v127;
            v182 = (_DWORD *)((char *)v127 + 8 * v123);
            v183 = v123;
            v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1480))(v122);
            v185 = *(_DWORD *)(v122 + 164);
            v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1088))(v122);
            v187 = v185 + v186;
            if (__OFADD__(v185, v186))
              v187 = (v185 >> 31) + 0x7FFFFFFF;
            if ((v184 & 0xFF00000000) != 0)
              v188 = v184;
            else
              v188 = v187;
            v189 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1080))(v122);
            if (__OFADD__(v188, v189))
              v190 = (v188 >> 31) + 0x7FFFFFFF;
            else
              v190 = v188 + v189;
            v191 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1080))(v122);
            v192 = v377 - v190;
            if (__OFSUB__(v377, v190))
              v192 = 0x7FFFFFFF;
            v123 = v183;
            v52 = __OFADD__(v191, v192);
            v193 = v191 + v192;
            if (v52)
              v193 = (v191 >> 31) + 0x7FFFFFFF;
            v52 = __OFADD__(v31, v193);
            v181 = v31 + v193;
            v130 = v182;
            if (v52)
              v181 = v373;
            v127 = v381;
            if (!v381)
              goto LABEL_284;
          }
          else
          {
            if (v133 == 3)
            {
              v161 = *((_DWORD *)this + 41);
              v162 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1000))(this);
              if (__OFSUB__(v161, v162))
                v163 = (v161 >> 31) + 0x7FFFFFFF;
              else
                v163 = v161 - v162;
              v164 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1008))(this);
              if (__OFSUB__(v163, v164))
                v165 = (v163 >> 31) + 0x7FFFFFFF;
              else
                v165 = v163 - v164;
              v166 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1360))(this);
              v167 = v166 << 6;
              if (v166 < -33554432)
                v167 = 0x80000000;
              if (v166 > 0x1FFFFFF)
                v167 = 0x7FFFFFFF;
              v52 = __OFSUB__(v165, v167);
              v168 = v165 - v167;
              if (v52)
                v168 = (v165 >> 31) + 0x7FFFFFFF;
              v169 = v168 & ~(v168 >> 31);
              v170 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 928))(this);
              v52 = __OFSUB__(v169, v170);
              v171 = v169 - v170;
              if (v52)
                v171 = 0x7FFFFFFF;
              v172 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 936))(this);
              if (__OFSUB__(v171, v172))
                v173 = (v171 >> 31) + 0x7FFFFFFF;
              else
                v173 = v171 - v172;
              if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
              {
                v230 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1360))(this);
                if (v230 >= -33554432)
                {
                  v174 = v230 << 6;
                  if (v230 > 0x1FFFFFF)
                    v174 = 0x7FFFFFFF;
                  v31 = v374;
                }
                else
                {
                  v174 = 0x80000000;
                  v31 = v374;
                }
              }
              else
              {
                v174 = 0;
              }
              v52 = __OFSUB__(v173, v174);
              v175 = v173 - v174;
              if (v52)
                v175 = (v173 >> 31) + 0x7FFFFFFF;
              v176 = v175 & ~(v175 >> 31);
              v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1088))(v122);
              v178 = v176 - v177;
              if (__OFSUB__(v176, v177))
                v178 = 0x7FFFFFFF;
              v130 = (_DWORD *)((char *)v127 + 8 * v123);
              v179 = *(_DWORD *)(v122 + 164);
              v52 = __OFSUB__(v178, v179);
              v180 = v178 - v179;
              v157 = (v178 >> 31) + 0x7FFFFFFF;
              if (!v52)
                v157 = v180;
LABEL_250:
              v52 = __OFADD__(v31, v157);
              v181 = v31 + v157;
              if (!v52)
                goto LABEL_272;
            }
            else
            {
              if (v133 == 2)
              {
                v375 = (_DWORD *)((char *)v127 + 8 * v123);
                v380 = (WebCore::FlexBoxIterator *)v123;
                v372 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1080))(v122);
                v134 = *((_DWORD *)this + 41);
                v135 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1000))(this);
                v136 = v134 - v135;
                if (__OFSUB__(v134, v135))
                  v136 = (v134 >> 31) + 0x7FFFFFFF;
                v137 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1008))(this);
                v138 = v136 - v137;
                if (__OFSUB__(v136, v137))
                  v138 = (v136 >> 31) + 0x7FFFFFFF;
                v139 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1360))(this);
                v140 = v139 << 6;
                if (v139 < -33554432)
                  v140 = 0x80000000;
                if (v139 > 0x1FFFFFF)
                  v140 = 0x7FFFFFFF;
                v52 = __OFSUB__(v138, v140);
                v141 = v138 - v140;
                if (v52)
                  v141 = (v138 >> 31) + 0x7FFFFFFF;
                v142 = v141 & ~(v141 >> 31);
                v143 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 928))(this);
                v52 = __OFSUB__(v142, v143);
                v144 = v142 - v143;
                if (v52)
                  v144 = 0x7FFFFFFF;
                v145 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 936))(this);
                v146 = v144 - v145;
                if (__OFSUB__(v144, v145))
                  v146 = (v144 >> 31) + 0x7FFFFFFF;
                if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
                {
                  v231 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1360))(this);
                  if (v231 >= -33554432)
                  {
                    v147 = v231 << 6;
                    if (v231 > 0x1FFFFFF)
                      v147 = 0x7FFFFFFF;
                    v31 = v374;
                  }
                  else
                  {
                    v147 = 0x80000000;
                    v31 = v374;
                  }
                }
                else
                {
                  v147 = 0;
                }
                v148 = v146 - v147;
                if (__OFSUB__(v146, v147))
                  v148 = (v146 >> 31) + 0x7FFFFFFF;
                v149 = *(_DWORD *)(v122 + 164);
                v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1080))(v122);
                v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1088))(v122);
                v152 = v150 + v151;
                if (__OFADD__(v150, v151))
                  v152 = (v150 >> 31) + 0x7FFFFFFF;
                v123 = (unint64_t)v380;
                v52 = __OFADD__(v149, v152);
                v153 = v149 + v152;
                if (v52)
                  v153 = (v149 >> 31) + 0x7FFFFFFF;
                v154 = v148 & ~(v148 >> 31);
                v52 = __OFSUB__(v154, v153);
                v155 = v154 - v153;
                if (v52)
                  v155 = 0x7FFFFFFF;
                v130 = v375;
                v156 = (v155 / 2) & ~((v155 + (v155 < 0)) >> 31);
                v52 = __OFADD__(v372, v156);
                v157 = v372 + v156;
                if (v52)
                  v157 = (v372 >> 31) + 0x7FFFFFFF;
                goto LABEL_250;
              }
              v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1080))(v122);
              v181 = v31 + v194;
              if (!__OFADD__(v31, v194))
              {
LABEL_272:
                if (v127)
                  goto LABEL_273;
LABEL_284:
                *(_QWORD *)(v122 + 152) = v132 | (unint64_t)(v181 << 32);
                v205 = *(_DWORD *)(v122 + 160);
                v206 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 1104))(v122);
                v207 = v205 + v206;
                if (__OFADD__(v205, v206))
                  v207 = (v205 >> 31) + 0x7FFFFFFF;
                ++v123;
                v54 = v132 + v207;
                if (__OFADD__(v132, v207))
                  v54 = (v132 >> 31) + 0x7FFFFFFF;
                goto LABEL_288;
              }
            }
            v181 = v373;
            if (!v127)
              goto LABEL_284;
          }
LABEL_273:
          v195 = *(_DWORD *)(v122 + 152);
          v196 = v195 - v132;
          if (__OFSUB__(v195, v132))
            v196 = (v195 >> 31) + 0x7FFFFFFF;
          v197 = *(_DWORD *)(v122 + 156);
          v198 = v197 - v181;
          if (__OFSUB__(v197, (_DWORD)v181))
            v198 = (v197 >> 31) + 0x7FFFFFFF;
          v52 = __OFADD__(*v130, v196);
          v199 = *v130 + v196;
          if (v52)
            v199 = (*v130 >> 31) + 0x7FFFFFFF;
          *v130 = v199;
          v200 = (char *)v127 + 8 * v123;
          v202 = *((_DWORD *)v200 + 1);
          v201 = (int *)(v200 + 4);
          v52 = __OFADD__(v202, v198);
          v203 = v202 + v198;
          v204 = (v202 >> 31) + 0x7FFFFFFF;
          if (v52)
            v203 = v204;
          *v201 = v203;
          goto LABEL_284;
        }
        v124 = v123;
        v125 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v122);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v122);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v122);
        if ((*(_BYTE *)(v122 + 52) & 7) != 1 || (*(_BYTE *)(v122 + 53) & 2) == 0)
        {
          if ((*(_BYTE *)(v122 + 20) & 0xF8) != 0)
            *((_DWORD *)v125 + 5) |= 0x40u;
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v125, (WebCore::RenderBox *)v122);
        }
        v126 = *(_QWORD *)(v122 + 144);
        *(_DWORD *)(v126 + 148) = v54;
        if (*(_DWORD *)(v126 + 152) == v31)
          goto LABEL_179;
        *(_DWORD *)(v126 + 152) = v31;
        v158 = *(_BYTE **)(*(_QWORD *)(v122 + 88) + 24);
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
          break;
        v123 = v124;
        if (!v158[12])
        {
          v159 = v158 + 28;
LABEL_220:
          if (!*v159)
          {
            v160 = *(_DWORD *)(v122 + 20);
            if ((v160 & 0x20) == 0)
              *(_DWORD *)(v122 + 20) = v160 | 0x20;
          }
        }
LABEL_288:
        v122 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
        if (!v122)
          goto LABEL_335;
      }
      if (!v158[36])
      {
        v159 = v158 + 20;
        v31 = v374;
        v123 = v124;
        goto LABEL_220;
      }
      v31 = v374;
LABEL_179:
      v123 = v124;
      goto LABEL_288;
    }
LABEL_335:
    v232 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v232 == 4 || v232 == 2) && WebCore::RenderBlock::intrinsicBorderForFieldset(this))
    {
      v306 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v307 = 0.0;
      if ((*(_BYTE *)(v306 + 124) & 0xE) != 0)
      {
        v308 = *(_QWORD *)(v306 + 200);
        if (*(_BYTE *)(v308 + 5) && *(_BYTE *)(v308 + 76) == 4)
        {
          if (*(_BYTE *)(v308 + 78))
            v307 = *(float *)(v308 + 72);
          else
            v307 = (float)*(int *)(v308 + 72);
        }
        else
        {
          v307 = *(float *)(v306 + 120);
        }
      }
      v313 = v307 * 64.0;
      if (v313 >= 2147483650.0)
      {
        v314 = 0x7FFFFFFF;
      }
      else if (v313 <= -2147483650.0)
      {
        v314 = 0x80000000;
      }
      else
      {
        v314 = (int)v313;
      }
      v315 = WebCore::RenderBlock::intrinsicBorderForFieldset(this);
      v236 = v314 + v315;
      if (__OFADD__(v314, v315))
        v236 = (v314 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      v233 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      v234 = 0.0;
      if ((*(_BYTE *)(v233 + 124) & 0xE) != 0)
      {
        v295 = *(_QWORD *)(v233 + 200);
        if (*(_BYTE *)(v295 + 5) && *(_BYTE *)(v295 + 76) == 4)
        {
          if (*(_BYTE *)(v295 + 78))
            v234 = *(float *)(v295 + 72);
          else
            v234 = (float)*(int *)(v295 + 72);
        }
        else
        {
          v234 = *(float *)(v233 + 120);
        }
      }
      v235 = v234 * 64.0;
      if (v235 >= 2147483650.0)
      {
        v236 = 0x7FFFFFFF;
      }
      else if (v235 <= -2147483650.0)
      {
        v236 = 0x80000000;
      }
      else
      {
        v236 = (int)v235;
      }
    }
    v237 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 24);
    v238 = v237[100];
    if ((v238 & 0xFFFFFFF7) == 3)
    {
      v302 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1144))(this);
      v238 = v237[100];
      v239 = (float)v302 * 0.015625;
    }
    else
    {
      v239 = 0.0;
    }
    switch(v238)
    {
      case 4:
        v240 = *((float *)v237 + 24);
        if (!v237[102])
          v240 = (float)SLODWORD(v240);
        break;
      case 3:
        v297 = *((float *)v237 + 24);
        if (!v237[102])
          v297 = (float)SLODWORD(v297);
        v240 = (float)(v239 * v297) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v237 + 96), v239);
        break;
      default:
        v242 = 0;
        goto LABEL_349;
    }
    v241 = v240 * 64.0;
    if (v241 >= 2147483650.0)
    {
      v242 = 0x7FFFFFFF;
    }
    else if (v241 <= -2147483650.0)
    {
      v242 = 0x80000000;
    }
    else
    {
      v242 = (int)v241;
    }
LABEL_349:
    v243 = v236 + v242;
    if (__OFADD__(v236, v242))
      v243 = (v236 >> 31) + 0x7FFFFFFF;
    v244 = *((_DWORD *)this + 40);
    v245 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1016))(this);
    if (__OFSUB__(v244, v245))
      v246 = (v244 >> 31) + 0x7FFFFFFF;
    else
      v246 = v244 - v245;
    v247 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1024))(this);
    if (__OFSUB__(v246, v247))
      v248 = (v246 >> 31) + 0x7FFFFFFF;
    else
      v248 = v246 - v247;
    v249 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1352))(this);
    v250 = v249 << 6;
    if (v249 < -33554432)
      v250 = 0x80000000;
    if (v249 > 0x1FFFFFF)
      v250 = 0x7FFFFFFF;
    v52 = __OFSUB__(v248, v250);
    v251 = v248 - v250;
    if (v52)
      v251 = (v248 >> 31) + 0x7FFFFFFF;
    v252 = v251 & ~(v251 >> 31);
    v253 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 944))(this);
    v52 = __OFSUB__(v252, v253);
    v254 = v252 - v253;
    if (v52)
      v254 = 0x7FFFFFFF;
    v255 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 952))(this);
    if (__OFSUB__(v254, v255))
      v257 = (v254 >> 31) + 0x7FFFFFFF;
    else
      v257 = v254 - v255;
    if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 584) & 0x100) != 0)
    {
      v300 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1352))(this);
      if (v300 >= -33554432)
      {
        v258 = v300 << 6;
        if (v300 > 0x1FFFFFF)
          v258 = 0x7FFFFFFF;
      }
      else
      {
        v258 = 0x80000000;
      }
    }
    else
    {
      v258 = 0;
    }
    v52 = __OFSUB__(v257, v258);
    v259 = v257 - v258;
    if (v52)
      v259 = (v257 >> 31) + 0x7FFFFFFF;
    v260 = v259 & ~(v259 >> 31);
    v52 = __OFADD__(v243, v260);
    v261 = v243 + v260;
    if (v52)
      v261 = (v243 >> 31) + 0x7FFFFFFF;
    v52 = __OFSUB__(v261, v54);
    v262 = v261 - v54;
    v263 = (v261 >> 31) + 0x7FFFFFFF;
    if (v52)
      v264 = v263;
    else
      v264 = v262;
    *((_BYTE *)this + 200) = 0;
    v371 |= v369;
    if (v370 & 1 | (v386[0] == 0))
      goto LABEL_558;
    if (!(_DWORD)v264)
    {
      WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)this, v256);
      goto LABEL_608;
    }
    v265 = *(_DWORD *)&v386[1];
    if ((int)v264 <= 0)
      v266 = *(_DWORD *)&v386[5];
    else
      v266 = *(_DWORD *)&v386[1];
    if ((int)v264 > 0)
      v265 = *(_DWORD *)&v386[5];
    v376 = v265;
    if (v266 > v265)
    {
LABEL_558:
      LODWORD(v267) = v264;
      break;
    }
    v378 = 0;
    v382 = 0;
    v267 = v264;
    do
    {
      v268 = v267;
      do
      {
        v388 = 0;
        v394 = -1;
        v269 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
        if (v269)
        {
          v270 = (WebCore::RenderBox *)v269;
          v271 = 0.0;
          do
          {
            if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex(this, v270, (int)v264 > 0, v266))
              v271 = v271 + *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v270 + 11) + 32) + 8) + 4);
            v270 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
          }
          while (v270);
        }
        else
        {
          v271 = 0.0;
        }
        v388 = 0;
        v394 = -1;
        v272 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
        for (i = v268; v272; v272 = (WebCore::RenderBox *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387))
        {
          v274 = WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex(this, v272, (int)v264 > 0, v266);
          if (v274)
          {
            if (v274 != 0x7FFFFFFF)
            {
              v275 = (float)((float)((float)v274 * 0.015625)
                           * (float)(v271
                                   / *(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v272 + 11) + 32) + 8) + 4)))
                   * 64.0;
              if (v275 >= 2147483650.0)
              {
                v274 = 0x7FFFFFFF;
              }
              else if (v275 <= -2147483650.0)
              {
                v274 = 0x80000000;
              }
              else
              {
                v274 = (int)v275;
              }
            }
            v276 = i < v274;
            if ((int)v264 > 0)
              v276 = v274 < i;
            if (v276)
              i = v274;
          }
        }
        v277 = 0;
        if (!i || v271 == 0.0)
          goto LABEL_470;
        v388 = 0;
        v394 = -1;
        v278 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
        if (!v278)
        {
LABEL_444:
          if ((int)v268 < 1)
            v286 = -64;
          else
            v286 = 64;
          v388 = 0;
          v394 = -1;
          v287 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
          if (v287)
          {
            v288 = (_DWORD *)v287;
            v277 = v268;
            do
            {
              if (!(_DWORD)v277)
                break;
              if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex(this, (WebCore::RenderBox *)v288, (int)v264 > 0, v266))
              {
                v289 = WebCore::RenderBox::overridingLogicalWidth((WebCore::RenderBox *)v288);
                if ((v289 & 0xFF00000000) == 0)
                {
                  v290 = v288 + 41;
                  if (((v288[31] >> 13) & 6u) - 2 >= 4)
                    v290 = v288 + 40;
                  LODWORD(v289) = *v290;
                }
                v291 = v289 + v286;
                if (__OFADD__((_DWORD)v289, v286))
                  v291 = (v289 >> 31) + 0x7FFFFFFF;
                v395[0] = v291;
                v292 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
                if (!WebCore::gOverridingLogicalWidthMap)
                {
                  v292 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                  *v292 = 0;
                  v292[1] = 0;
                  WebCore::gOverridingLogicalWidthMap = (uint64_t)v292;
                }
                WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v292, v288, v395);
                if (__OFSUB__((_DWORD)v267, v286))
                  v267 = (v267 >> 31) + 0x7FFFFFFF;
                else
                  v267 = (v267 - v286);
                if (__OFSUB__((_DWORD)v277, v286))
                  v277 = (v277 >> 31) + 0x7FFFFFFF;
                else
                  v277 = (v277 - v286);
                v378 = 1;
                v382 = 1;
              }
              v288 = (_DWORD *)WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
            }
            while (v288);
          }
          else
          {
            v277 = v268;
          }
          goto LABEL_470;
        }
        v279 = v278;
        v277 = v268;
        while (i && v271 != 0.0)
        {
          if (WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex(this, (WebCore::RenderBox *)v279, (int)v264 > 0, v266))
          {
            v280 = (float)((float)((float)i * 0.015625)
                         * (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v279 + 88) + 32) + 8) + 4) / v271))
                 * 64.0;
            if (v280 >= 2147483650.0)
            {
              v281 = 0x7FFFFFFF;
            }
            else
            {
              if (v280 > -2147483650.0)
              {
                v281 = (int)v280;
                if ((int)v280)
                  goto LABEL_420;
LABEL_429:
                if (__OFSUB__(i, v281))
                  i = (i >> 31) + 0x7FFFFFFF;
                else
                  i -= v281;
                if (__OFSUB__((_DWORD)v267, v281))
                  v267 = (v267 >> 31) + 0x7FFFFFFF;
                else
                  v267 = (v267 - v281);
                if (__OFSUB__((_DWORD)v277, v281))
                  v277 = (v277 >> 31) + 0x7FFFFFFF;
                else
                  v277 = (v277 - v281);
                v271 = v271 - *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v279 + 88) + 32) + 8) + 4);
                goto LABEL_439;
              }
              v281 = 0x80000000;
            }
LABEL_420:
            v282 = WebCore::RenderBox::overridingLogicalWidth((WebCore::RenderBox *)v279);
            if ((v282 & 0xFF00000000) == 0)
            {
              v283 = (_DWORD *)(v279 + 164);
              if (((*(_DWORD *)(v279 + 124) >> 13) & 6u) - 2 >= 4)
                v283 = (_DWORD *)(v279 + 160);
              LODWORD(v282) = *v283;
            }
            v284 = v282 + v281;
            if (__OFADD__((_DWORD)v282, v281))
              v284 = (v282 >> 31) + 0x7FFFFFFF;
            v395[0] = v284;
            v285 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
            if (!WebCore::gOverridingLogicalWidthMap)
            {
              v285 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v285 = 0;
              v285[1] = 0;
              WebCore::gOverridingLogicalWidthMap = (uint64_t)v285;
            }
            WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v285, (_QWORD *)v279, v395);
            v378 = 1;
            v382 = 1;
            goto LABEL_429;
          }
LABEL_439:
          v279 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
          if (!v279)
            break;
        }
        if ((_DWORD)v277 == (_DWORD)v268)
          goto LABEL_444;
LABEL_470:
        if ((int)v277 >= 0)
          v293 = v277;
        else
          v293 = -(int)v277;
        v268 = v277;
      }
      while (v293 > 0x3F);
      ++v266;
    }
    while (v266 <= v376 && (_DWORD)v267);
    if ((v382 & 1) != 0)
    {
      LOBYTE(a2) = v378 & 1;
      v370 = 1;
      v31 = v374;
      continue;
    }
    break;
  }
  WebCore::RenderBlock::endAndCommitUpdateScrollInfoAfterLayoutTransaction((WTF **)this, v256);
  if ((int)v267 >= 1)
  {
    v317 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16);
    if ((*((_BYTE *)this + 123) & 4) != 0)
    {
      if ((v317 & 0x18) == 0x10)
        goto LABEL_608;
    }
    else if ((v317 & 0x18) == 0)
    {
      goto LABEL_608;
    }
    v318 = (v317 >> 3) & 3;
    if (v318 == 1)
    {
      LODWORD(v267) = v267 >> 1;
    }
    else if (v318 == 3)
    {
      v388 = 0;
      v394 = -1;
      v319 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
      if (v319)
      {
        v320 = 0;
        do
        {
          if ((*(_DWORD *)(v319 + 20) & 0x1800000) != 0x1000000)
            ++v320;
          v319 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
        }
        while (v319);
        v321 = v320 != 0;
        v322 = v320 - 1;
        if (v322 != 0 && v321)
        {
          v388 = 0;
          v394 = -1;
          v323 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
          if (v323)
          {
            v324 = 0;
            v325 = 1;
            do
            {
              v326 = ((*(_DWORD *)(v323 + 20) & 0x1800000) == 0x1000000) & v325;
              if ((*(_DWORD *)(v323 + 20) & 0x1800000) != 0x1000000 && (v325 & 1) == 0)
              {
                v327 = v322 << 6;
                if (v322 < -33554432)
                  v327 = 0x80000000;
                if (v322 > 0x1FFFFFF)
                  v327 = 0x7FFFFFFF;
                v328 = ((uint64_t)(int)v267 << 6) / v327;
                if (v328 <= (uint64_t)0xFFFFFFFF80000000)
                  v328 = 0xFFFFFFFF80000000;
                if (v328 >= 0x7FFFFFFF)
                  LODWORD(v328) = 0x7FFFFFFF;
                if (__OFADD__(v324, (_DWORD)v328))
                  v324 = (v324 >> 31) + 0x7FFFFFFF;
                else
                  v324 += v328;
                v52 = __OFSUB__((_DWORD)v267, (_DWORD)v328);
                v329 = v267 - v328;
                if (v52)
                  LODWORD(v267) = (v267 >> 31) + 0x7FFFFFFF;
                else
                  LODWORD(v267) = v329;
                v326 = 0;
                --v322;
                v332 = *(_QWORD *)(v323 + 152);
                v330 = v332 & 0xFFFFFFFF00000000;
                v52 = __OFADD__((_DWORD)v332, v324);
                v331 = v332 + v324;
                LODWORD(v332) = (v332 >> 31) + 0x7FFFFFFF;
                if (v52)
                  v332 = v332;
                else
                  v332 = v331;
                *(_QWORD *)(v323 + 152) = v330 | v332;
              }
              v323 = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
              v325 = v326;
            }
            while (v323);
          }
        }
      }
      goto LABEL_608;
    }
    v388 = 0;
    v394 = -1;
    for (j = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387);
          j;
          j = WebCore::FlexBoxIterator::next((WebCore::FlexBoxIterator *)&v387))
    {
      if ((*(_DWORD *)(j + 20) & 0x1800000) != 0x1000000)
      {
        v337 = *(_QWORD *)(j + 152);
        v335 = v337 & 0xFFFFFFFF00000000;
        v52 = __OFADD__((_DWORD)v337, (_DWORD)v267);
        v336 = v337 + v267;
        LODWORD(v337) = (v337 >> 31) + 0x7FFFFFFF;
        if (v52)
          v337 = v337;
        else
          v337 = v336;
        *(_QWORD *)(j + 152) = v335 | v337;
      }
    }
  }
LABEL_608:
  if ((v371 & 1) != 0)
    *((_DWORD *)this + 41) = v367;
  v338 = v383;
  if (v385 != (_BYTE *)v383 && v383)
  {
    v383 = 0;
    LODWORD(v384) = 0;
    WTF::fastFree(v338, v316);
  }
  result = v392;
  if (v392)
  {
    v392 = 0;
    LODWORD(v393) = 0;
    result = (WTF *)WTF::fastFree(result, v316);
  }
  if (v391)
    return (WTF *)WTF::fastFree((WTF *)(v391 - 16), v316);
  return result;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::allowedChildFlex(WebCore::RenderDeprecatedFlexibleBox *this, WebCore::RenderBox *a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v51;
  uint64_t result;
  void *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  float v57;
  double v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  double v74;
  unsigned int v75;
  int v76;
  int v77;
  double v78;
  int v79;
  int v80;
  double v81;
  int v82;
  char v83;
  char v84;
  char v85;

  if ((*((_DWORD *)a2 + 5) & 0x1800000) == 0x1000000)
    return 0;
  v5 = *((_QWORD *)a2 + 11);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8);
  if (*(float *)(v6 + 4) == 0.0 || *(_DWORD *)(v6 + 8) != a4)
    return 0;
  if (!a3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 0x20) == 0)
    {
      v21 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 408))(a2);
      v22 = WebCore::RenderBox::overridingLogicalWidth(a2);
      v23 = v22;
      if ((v22 & 0xFF00000000) == 0)
      {
        v24 = (char *)a2 + 164;
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
          v24 = (char *)a2 + 160;
        v23 = *(_DWORD *)v24;
      }
      v25 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1064))(a2);
      v26 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1072))(a2);
      if (__OFADD__(v25, v26))
        v27 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v27 = v25 + v26;
      v28 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 976))(a2);
      if (__OFADD__(v27, v28))
        v29 = (v27 >> 31) + 0x7FFFFFFF;
      else
        v29 = v27 + v28;
      v30 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 984))(a2);
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        v31 = (v29 >> 31) + 0x7FFFFFFF;
      v32 = __OFSUB__(v23, v31);
      v33 = v23 - v31;
      if (v32)
        v33 = (v23 >> 31) + 0x7FFFFFFF;
      v34 = v33 & ~(v33 >> 31);
      v35 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
      switch(*(_BYTE *)(v35 + 24))
      {
        case 0:
          v21 = 0;
          break;
        case 4:
          if (*(_BYTE *)(v35 + 26))
            v57 = *(float *)(v35 + 20);
          else
            v57 = (float)*(int *)(v35 + 20);
          v81 = v57 * 64.0;
          if (v81 >= 2147483650.0)
          {
            v21 = 0x7FFFFFFF;
          }
          else if (v81 <= -2147483650.0)
          {
            v21 = 0x80000000;
          }
          else
          {
            v21 = (int)v81;
          }
          break;
        case 5:
          v56 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 416))(a2);
          goto LABEL_84;
        case 6:
          v56 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 408))(a2);
LABEL_84:
          v21 = v56;
          break;
        default:
          break;
      }
      v73 = v21 - v34;
      if (__OFSUB__(v21, v34))
        v73 = (v21 >> 31) + 0x7FFFFFFF;
      return v73 & (v73 >> 31);
    }
    v49 = *(_QWORD *)(v5 + 8);
    v85 = 0;
    v83 = *(_BYTE *)(v49 + 40);
    v84 = *(_BYTE *)(v49 + 41);
    if (v83 == 4 || v83 == 0)
    {
      if (*(_BYTE *)(v49 + 42))
        v51 = *(float *)(v49 + 36);
      else
        v51 = (float)*(int *)(v49 + 36);
      v58 = v51 * 64.0;
      if (v58 > -2147483650.0)
        v59 = (int)v58;
      else
        v59 = 0x80000000;
      if (v58 < 2147483650.0)
        v60 = v59;
      else
        v60 = 0x7FFFFFFF;
      v61 = WebCore::RenderBox::overridingLogicalHeight(a2);
      v62 = v61;
      if ((v61 & 0xFF00000000) == 0)
      {
        if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
          v63 = (char *)a2 + 160;
        else
          v63 = (char *)a2 + 164;
        v62 = *(_DWORD *)v63;
      }
      v64 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1048))(a2);
      v65 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 960))(a2);
      if (__OFADD__(v64, v65))
        v66 = (v64 >> 31) + 0x7FFFFFFF;
      else
        v66 = v64 + v65;
      v67 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1056))(a2);
      v68 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 968))(a2);
      v69 = v67 + v68;
      if (__OFADD__(v67, v68))
        v69 = (v67 >> 31) + 0x7FFFFFFF;
      v32 = __OFADD__(v66, v69);
      v70 = v66 + v69;
      if (v32)
        v70 = (v66 >> 31) + 0x7FFFFFFF;
      v32 = __OFSUB__(v62, v70);
      v71 = v62 - v70;
      if (v32)
        v71 = (v62 >> 31) + 0x7FFFFFFF;
      v72 = v71 & ~(v71 >> 31);
      v32 = __OFSUB__(v60, v72);
      v73 = v60 - v72;
      if (v32)
        v73 = (v60 >> 31) + 0x7FFFFFFF;
      return v73 & (v73 >> 31);
    }
    result = 0;
    if (v83 != 11)
      return result;
    v53 = (void *)*(unsigned int *)(v49 + 36);
    v82 = *(_DWORD *)(v49 + 36);
    WebCore::Length::ref(&v82);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v53);
    return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 0x20) != 0)
  {
    v36 = WebCore::RenderBox::overridingLogicalHeight(a2);
    v37 = v36;
    if ((v36 & 0xFF00000000) == 0)
    {
      v38 = (char *)a2 + 160;
      if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 >= 4)
        v38 = (char *)a2 + 164;
      v37 = *(_DWORD *)v38;
    }
    v39 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1048))(a2);
    v40 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 960))(a2);
    if (__OFADD__(v39, v40))
      v41 = (v39 >> 31) + 0x7FFFFFFF;
    else
      v41 = v39 + v40;
    v42 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1056))(a2);
    v43 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 968))(a2);
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
      v44 = (v42 >> 31) + 0x7FFFFFFF;
    v32 = __OFADD__(v41, v44);
    v45 = v41 + v44;
    if (v32)
      v45 = (v41 >> 31) + 0x7FFFFFFF;
    v32 = __OFSUB__(v37, v45);
    v46 = v37 - v45;
    if (v32)
      v46 = (v37 >> 31) + 0x7FFFFFFF;
    v47 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
    if (*(_BYTE *)(v47 + 48) == 4)
    {
      v48 = *(_BYTE *)(v47 + 50) ? *(float *)(v47 + 44) : (float)*(int *)(v47 + 44);
      v74 = v48 * 64.0;
      if (v74 < 2147483650.0)
      {
        if (v74 <= -2147483650.0)
        {
          v75 = 0x80000000;
        }
        else
        {
          v75 = (int)v74;
          result = 0x7FFFFFFFLL;
          if ((int)v74 == 0x7FFFFFFF)
            return result;
        }
        v76 = v46 & ~(v46 >> 31);
        v32 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v32)
          v77 = (v75 >> 31) + 0x7FFFFFFF;
        return v77 & ~(v77 >> 31);
      }
    }
    return 0x7FFFFFFFLL;
  }
  v7 = WebCore::RenderBox::overridingLogicalWidth(a2);
  v8 = v7;
  if ((v7 & 0xFF00000000) == 0)
  {
    if (((*((_DWORD *)a2 + 31) >> 13) & 6u) - 2 < 4)
      v9 = (char *)a2 + 164;
    else
      v9 = (char *)a2 + 160;
    v8 = *(_DWORD *)v9;
  }
  v10 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1064))(a2);
  v11 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 1072))(a2);
  if (__OFADD__(v10, v11))
    v12 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v12 = v10 + v11;
  v13 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 976))(a2);
  if (__OFADD__(v12, v13))
    v14 = (v12 >> 31) + 0x7FFFFFFF;
  else
    v14 = v12 + v13;
  v15 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 984))(a2);
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    v16 = (v14 >> 31) + 0x7FFFFFFF;
  v17 = v8 - v16;
  if (__OFSUB__(v8, v16))
    v17 = (v8 >> 31) + 0x7FFFFFFF;
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 8);
  v19 = *(unsigned __int8 *)(v18 + 32);
  if (v19 == 6)
  {
    v54 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 408))(a2);
  }
  else
  {
    if (v19 != 5)
    {
      if (v19 == 4)
      {
        v20 = *(_BYTE *)(v18 + 34) ? *(float *)(v18 + 28) : (float)*(int *)(v18 + 28);
        v78 = v20 * 64.0;
        if (v78 < 2147483650.0)
        {
          if (v78 <= -2147483650.0)
          {
            v55 = 0x80000000;
LABEL_123:
            v79 = v17 & ~(v17 >> 31);
            v32 = __OFSUB__(v55, v79);
            v80 = v55 - v79;
            v77 = (v55 >> 31) + 0x7FFFFFFF;
            if (!v32)
              v77 = v80;
            return v77 & ~(v77 >> 31);
          }
          v55 = (int)v78;
          goto LABEL_122;
        }
      }
      return 0x7FFFFFFFLL;
    }
    v54 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)a2 + 416))(a2);
  }
  v55 = v54;
LABEL_122:
  result = 0x7FFFFFFFLL;
  if (v55 != 0x7FFFFFFF)
    goto LABEL_123;
  return result;
}

uint64_t WebCore::RenderElement::layoutIfNeeded(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(this + 20) & 0xF8) != 0)
  {
    v1 = *(_QWORD *)(this + 32);
    if (v1
      && (v2 = *(_QWORD *)(v1 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v2 + 104) + 239) & 0x18) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40)
                                                       + 8)
                                           + 1944)
                               + 248)
                   + 479))
    {
      return WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)this);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 688))(this);
    }
  }
  return this;
}

const char *WebCore::RenderDeprecatedFlexibleBox::renderName(WebCore::RenderDeprecatedFlexibleBox *this)
{
  int v1;
  char v4;
  unsigned __int16 *v5;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x800) != 0)
    return "RenderDeprecatedFlexibleBox (floating)";
  if ((v1 & 0x1800000) == 0x1000000)
    return "RenderDeprecatedFlexibleBox (positioned)";
  v4 = *((_BYTE *)this + 45);
  if ((v4 & 1) != 0 || (v5 = *(unsigned __int16 **)(*((_QWORD *)this + 3) + 8)) == 0 || (~v5[14] & 0x408) != 0)
  {
    if ((v4 & 1) != 0)
      return "RenderDeprecatedFlexibleBox (generated)";
  }
  else if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v5 + 368))(v5)
         || (*((_BYTE *)this + 45) & 1) != 0)
  {
    return "RenderDeprecatedFlexibleBox (generated)";
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x800000)
    return "RenderDeprecatedFlexibleBox (relative positioned)";
  else
    return "RenderDeprecatedFlexibleBox";
}

void WebCore::RenderDetailsMarker::~RenderDetailsMarker(WebCore::RenderDetailsMarker *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 240) = 0;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderDetailsMarker::orientation(WebCore::RenderDetailsMarker *this)
{
  int v1;
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  int v6;
  _BOOL4 v7;
  unsigned int v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 isOpen;

  switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
  {
    case 1:
      v1 = *((_DWORD *)this + 30);
      isOpen = WebCore::RenderDetailsMarker::isOpen(this);
      if (isOpen)
        v3 = 0;
      else
        v3 = 2;
      if (isOpen)
        v4 = 0;
      else
        v4 = 3;
      goto LABEL_8;
    case 2:
    case 4:
      v6 = *((_DWORD *)this + 30);
      v7 = WebCore::RenderDetailsMarker::isOpen(this);
      if (v7)
        v8 = 3;
      else
        v8 = 0;
      if (v7)
        v9 = 3;
      else
        v9 = 1;
      if ((v6 & 0x4000000) != 0)
        return v8;
      else
        return v9;
    case 3:
    case 5:
      v1 = *((_DWORD *)this + 30);
      v10 = WebCore::RenderDetailsMarker::isOpen(this);
      if (v10)
        v3 = 2;
      else
        v3 = 0;
      if (v10)
        v4 = 2;
      else
        v4 = 1;
      goto LABEL_8;
    default:
      v1 = *((_DWORD *)this + 30);
      v2 = WebCore::RenderDetailsMarker::isOpen(this);
      if (v2)
        v3 = 1;
      else
        v3 = 2;
      if (v2)
        v4 = 1;
      else
        v4 = 3;
LABEL_8:
      if ((v1 & 0x4000000) != 0)
        return v3;
      else
        return v4;
  }
}

BOOL WebCore::RenderDetailsMarker::isOpen(WebCore::RenderDetailsMarker *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  while (1)
  {
    if ((*(_BYTE *)(v2 + 45) & 1) != 0)
      goto LABEL_8;
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
    if (!v3 || (*(_WORD *)(v3 + 28) & 0x10) == 0)
      goto LABEL_8;
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24);
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::detailsTag + 24))
      break;
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      return 1;
LABEL_8:
    v5 = *(_QWORD *)(v2 + 32);
    if (v5)
    {
      v2 = *(_QWORD *)(v5 + 8);
      if (v2)
        continue;
    }
    return 0;
  }
  v7 = *(_QWORD *)(v3 + 104);
  if (!v7)
    goto LABEL_23;
  v8 = *(_DWORD *)(v7 + 4);
  if ((v8 & 1) != 0)
  {
    v9 = *(_QWORD *)(v7 + 40);
    LODWORD(v10) = *(_DWORD *)(v7 + 52);
    if ((_DWORD)v10)
      goto LABEL_14;
    goto LABEL_23;
  }
  v9 = v7 + 32;
  LODWORD(v10) = v8 >> 5;
  if (!(_DWORD)v10)
  {
LABEL_23:
    v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    return *v11 != 0;
  }
LABEL_14:
  v10 = v10;
  v11 = (_QWORD *)(v9 + 8);
  while (1)
  {
    v12 = *(v11 - 1);
    if (v12 == WebCore::HTMLNames::openAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::openAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::openAttr + 32))
    {
      break;
    }
    v11 += 2;
    if (!--v10)
    {
      v11 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      return *v11 != 0;
    }
  }
  return *v11 != 0;
}

uint64_t WebCore::RenderDetailsMarker::paint(uint64_t this, WebCore::GraphicsContext **a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  signed int v17;
  unint64_t v18;
  signed int v19;
  signed int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  float v51;
  uint64_t v52;
  int v53;
  float v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60[17];

  v4 = this;
  v60[16] = *MEMORY[0x1E0C80C00];
  if (*((_WORD *)a2 + 8) != 8
    || (*(_BYTE *)(*(_QWORD *)(this + 104) + 239) & 4) != 0
    || (*(_BYTE *)(this + 120) & 0x30) != 0)
  {
    return WebCore::RenderBlock::paint(this, (WebCore::PaintInfo *)a2, a3);
  }
  v6 = *(_DWORD *)(this + 152);
  v5 = *(_DWORD *)(this + 156);
  v7 = *((_DWORD *)a3 + 1);
  v8 = __OFADD__(*(_DWORD *)a3, v6);
  v9 = *(_DWORD *)a3 + v6;
  if (v8)
    v10 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  else
    v10 = v9;
  v8 = __OFADD__(v7, v5);
  v11 = v7 + v5;
  if (v8)
    v12 = (v7 >> 31) + 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(this + 192);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 20);
    v15 = (unint64_t *)(v13 + 28);
  }
  else
  {
    v14 = 0;
    v15 = (unint64_t *)(this + 160);
  }
  v16 = *v15;
  v17 = v14 + v10;
  if (__OFADD__((_DWORD)v14, v10))
    v17 = (v14 >> 31) + 0x7FFFFFFF;
  v18 = HIDWORD(v14);
  v8 = __OFADD__((_DWORD)v18, v12);
  v19 = v18 + v12;
  v20 = (v18 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v20 = v19;
  v21 = v17 / 64;
  v22 = v17 - (v19 & 0xFFFFFFC0);
  v23 = v20 / 64;
  v24 = v20 - (v19 & 0xFFFFFFC0);
  v25 = HIDWORD(v16);
  v8 = __OFADD__(v22, (_DWORD)v16);
  v26 = v22 + v16;
  if (v8)
    v26 = (v22 >> 31) + 0x7FFFFFFF;
  v8 = __OFADD__(v24, (_DWORD)v25);
  v27 = v24 + v25;
  v28 = (v24 >> 31) + 0x7FFFFFFF;
  if (v8)
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  v29 = v24 + 32;
  v30 = v23 + (v29 >> 6);
  v31 = v22 + 32;
  v32 = v21 + (v31 >> 6);
  v33 = v26 / 64 - (v31 >> 6) + ((int)(v26 - (v28 & 0xFFFFFFC0) + 32) >> 6);
  v34 = v27 / 64 - (v29 >> 6) + ((int)(v27 - (v26 & 0xFFFFFFC0) + 32) >> 6);
  v35 = v32 << 6;
  if (v32 < -33554432)
    v35 = 0x80000000;
  if (v32 <= 0x1FFFFFF)
    v36 = v35;
  else
    v36 = 0x7FFFFFFF;
  v37 = v30 << 6;
  if (v30 < -33554432)
    v37 = 0x80000000;
  if (v30 > 0x1FFFFFF)
    v37 = 0x7FFFFFFF;
  v38 = v33 << 6;
  if (v33 < -33554432)
    v38 = 0x80000000;
  if (v33 > 0x1FFFFFF)
    v38 = 0x7FFFFFFF;
  v39 = v34 << 6;
  if (v34 < -33554432)
    v39 = 0x80000000;
  if (v34 > 0x1FFFFFF)
    v39 = 0x7FFFFFFF;
  v40 = *((_DWORD *)a2 + 2);
  if (v40 >= 1)
  {
    v41 = *((_DWORD *)a2 + 3);
    if (v41 >= 1 && v38 >= 1 && v39 >= 1)
    {
      v42 = *(_DWORD *)a2;
      v8 = __OFADD__(v36, v38);
      v43 = v36 + v38;
      if (v8)
        v43 = (v36 >> 31) + 0x7FFFFFFF;
      if ((int)v42 < v43)
      {
        v8 = __OFADD__(v42, v40);
        v44 = v42 + v40;
        if (v8)
          v44 = (v42 >> 31) + 0x7FFFFFFF;
        if (v36 < v44)
        {
          v45 = *((_DWORD *)a2 + 1);
          v8 = __OFADD__(v37, v39);
          v46 = v37 + v39;
          if (v8)
            v46 = (v37 >> 31) + 0x7FFFFFFF;
          if ((int)v45 < v46)
          {
            v8 = __OFADD__(v45, v41);
            v47 = v45 + v41;
            if (v8)
              v47 = (v45 >> 31) + 0x7FFFFFFF;
            if ((int)v37 < v47)
            {
              WebCore::RenderStyle::visitedDependentColorWithColorFilter(this + 80, 5, 0, v60);
              WebCore::GraphicsContext::setFillColor(a2[10], (const WebCore::Color *)v60);
              v48 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
              if ((v48 == 4 || v48 == 2)
                && WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)v4))
              {
                WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)v4);
              }
              v49 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24);
              v50 = *(unsigned __int8 *)(v49 + 100);
              if ((v50 & 0xFFFFFFF7) == 3)
              {
                v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1144))(v4);
                v50 = *(unsigned __int8 *)(v49 + 100);
                v51 = (float)v57 * 0.015625;
              }
              else
              {
                v51 = 0.0;
              }
              if (v50 != 4 && v50 != 3 && v50 == 11)
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v49 + 96), v51);
              if (((unsigned __int16)*(_DWORD *)(v4 + 124) >> 13) - 1 >= 5
                && (*(_WORD *)(v4 + 69) & 0x400) != 0)
              {
                v56 = WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, v4);
                if (v56)
                {
                  if (*(_DWORD *)(v56 + 8))
                    WebCore::RenderBlock::intrinsicBorderForFieldset((WebCore::RenderBlock *)v4);
                }
              }
              v52 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24);
              v53 = *(unsigned __int8 *)(v52 + 76);
              if ((v53 & 0xFFFFFFF7) == 3)
              {
                v58 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 24);
                v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 1144))(v4);
                v52 = v58;
                v53 = *(unsigned __int8 *)(v58 + 76);
                v54 = (float)v59 * 0.015625;
              }
              else
              {
                v54 = 0.0;
              }
              if (v53 != 4 && v53 != 3 && v53 == 11)
                WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v52 + 72), v54);
              v55 = (char *)&loc_1963A9F34
                  + 4
                  * byte_1969FC774[WebCore::RenderDetailsMarker::orientation((WebCore::RenderDetailsMarker *)v4)];
              __asm { BR              X10 }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::RenderElement::~RenderElement(WebCore::RenderElement *this, void *a2)
{
  void *v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = off_1E3422BC8;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderElement *)((char *)this + 80), a2);
  v4 = (WTF *)(*(unsigned int *)((char *)this + 71) | ((unint64_t)*((unsigned __int8 *)this + 75) << 32));
  *(_DWORD *)((char *)this + 71) = 0;
  *((_BYTE *)this + 75) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, v3);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF *)(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32));
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, v3);
    else
      --*(_DWORD *)v5;
  }
  *(_QWORD *)this = off_1E342E320;
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v19 = *(_QWORD *)(v6 + 112);
    *(_QWORD *)(v6 + 112) = 0;
    if (v19)
    {
      v20 = *(_DWORD *)(v19 + 16);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AAB00);
      }
      *(_DWORD *)(v19 + 16) = v20 - 1;
    }
    v21 = *((_QWORD *)this + 7);
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 8);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AAB20);
      }
      *(_DWORD *)(v21 + 8) = v22 - 1;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v8 = *(_DWORD *)(v7 + 16);
  --*(_QWORD *)(v7 + 256);
  *(_DWORD *)(v7 + 16) = v8 + 1;
  if (v8 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1963AAAE0);
  }
  *(_DWORD *)(v7 + 16) = v8;
  v9 = (WTF *)(*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32));
  *(_DWORD *)((char *)this + 47) = 0;
  *((_BYTE *)this + 51) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v3);
    else
      --*(_DWORD *)v9;
  }
  v10 = (WTF *)(*((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32));
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, v3);
    else
      --*(_DWORD *)v10;
  }
  v11 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v3);
    else
      --*(_DWORD *)v11;
  }
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v12));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v12);
      v17 = *(unsigned int *)(v12 + 28);
      if ((_DWORD)v17)
      {
        v24 = v12;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v17));
        v12 = v24;
      }
      v18 = *(WTF **)(v12 + 16);
      if (v18)
      {
        *(_QWORD *)(v12 + 16) = 0;
        *(_DWORD *)(v12 + 24) = 0;
        v23 = v12;
        WTF::fastFree(v18, v3);
        v12 = v23;
      }
      WTF::fastFree((WTF *)v12, v3);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v3);
      else
        --*(_DWORD *)v14;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

BOOL WebCore::RenderElement::isContentDataSupported(WebCore::RenderElement *this, const WebCore::ContentData *a2)
{
  return *((_DWORD *)this + 6) == 1 && *((_QWORD *)this + 1) == 0;
}

uint64_t WebCore::RenderElement::updateFillImages(uint64_t this, const WebCore::FillLayer *a2, const WebCore::FillLayer *a3)
{
  const WebCore::FillLayer *v3;
  const WebCore::FillLayer *v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  const WebCore::FillLayer *v8;
  const WebCore::FillLayer *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  WebCore::FillLayer *v14;
  WebCore::FillLayer *v15;
  WTF *v16;
  void *v17;
  _DWORD *v18;
  const WebCore::FillLayer *v19;
  WTF *v20;
  void *v21;
  _DWORD *v22;
  const WebCore::FillLayer *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;

  v3 = a3;
  v4 = a2;
  v5 = this;
  if (a2 == a3)
    goto LABEL_26;
  v6 = a2 != 0;
  v7 = a3 != 0;
  if (a2 && a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      this = *((_QWORD *)v9 + 2);
      v11 = *((_QWORD *)v8 + 2);
      if (this == v11)
      {
        if (this)
          goto LABEL_11;
      }
      else
      {
        if (this)
          v13 = v11 == 0;
        else
          v13 = 1;
        if (v13)
          goto LABEL_39;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
        if (!(_DWORD)this)
          goto LABEL_39;
        this = *((_QWORD *)v9 + 2);
        if (this)
        {
LABEL_11:
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 72))(this);
          if ((this & 1) != 0)
            goto LABEL_39;
          v12 = *((_QWORD *)v9 + 2);
          if (v12)
          {
            this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 64))(*((_QWORD *)v9 + 2));
            if ((this & 1) != 0)
              goto LABEL_39;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12);
            if (!(_DWORD)this)
              goto LABEL_39;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
            if ((this & 1) != 0)
              goto LABEL_39;
          }
        }
      }
      v9 = (const WebCore::FillLayer *)*((_QWORD *)v9 + 1);
      v8 = (const WebCore::FillLayer *)*((_QWORD *)v8 + 1);
      v6 = v9 != 0;
      v7 = v8 != 0;
      if (v9)
        v10 = v8 == 0;
      else
        v10 = 1;
    }
    while (!v10);
  }
  if (!v6 && !v7)
  {
LABEL_26:
    if (!v3)
      return this;
    ++*(_DWORD *)v3;
    v14 = v3;
    while (1)
    {
      this = *((_QWORD *)v14 + 2);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, v5);
        if (!(_DWORD)this)
          break;
      }
      v15 = (WebCore::FillLayer *)*((_QWORD *)v14 + 1);
      if (v15)
        ++*(_DWORD *)v15;
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::FillLayer::~FillLayer(v14);
        this = WTF::fastFree(v16, v17);
        v14 = v15;
        if (!v15)
          return this;
      }
      else
      {
        --*(_DWORD *)v14;
        v14 = v15;
        if (!v15)
          return this;
      }
    }
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::FillLayer::~FillLayer(v14);
      this = WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
LABEL_39:
  if (v3)
  {
    ++*(_DWORD *)v3;
    do
    {
      while (1)
      {
        v18 = (_DWORD *)*((_QWORD *)v3 + 2);
        if (v18)
        {
          ++v18[2];
          this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v18 + 96))(v18, v5);
          if (v18[2] == 1)
            this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[2];
        }
        v19 = (const WebCore::FillLayer *)*((_QWORD *)v3 + 1);
        if (v19)
          ++*(_DWORD *)v19;
        if (*(_DWORD *)v3 == 1)
          break;
        --*(_DWORD *)v3;
        v3 = v19;
        if (!v19)
          goto LABEL_51;
      }
      WebCore::FillLayer::~FillLayer(v3);
      this = WTF::fastFree(v20, v21);
      v3 = v19;
    }
    while (v19);
  }
LABEL_51:
  if (v4)
  {
    ++*(_DWORD *)v4;
    do
    {
      v22 = (_DWORD *)*((_QWORD *)v4 + 2);
      if (v22)
      {
        ++v22[2];
        this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v22 + 104))(v22, v5);
        if (v22[2] == 1)
          this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
        else
          --v22[2];
      }
      v23 = (const WebCore::FillLayer *)*((_QWORD *)v4 + 1);
      if (v23)
        ++*(_DWORD *)v23;
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::FillLayer::~FillLayer(v4);
        this = WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v4;
      }
      v4 = v23;
    }
    while (v23);
  }
  return this;
}

uint64_t WebCore::RenderElement::repaintBeforeStyleChange(WebCore::RenderObject *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t result;
  uint64_t v19;
  BOOL v20;
  WebCore::RenderLayer *v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  WebCore::RenderObject *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::RenderObject *v40;
  uint64_t j;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  float v59;
  float v60;
  BOOL v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  WTF *v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  WTF *v77;
  WTF *v78;
  _BYTE v79[8];
  uint64_t v80;
  char v81;
  __int128 v82;
  char v83;

  if ((*(_BYTE *)(*(_QWORD *)(a3 + 24) + 239) & 4) != 0)
    return 0;
  if ((*(_DWORD *)(a3 + 40) & 0x30) == 0x10)
    return 0;
  v6 = *((_QWORD *)this + 4);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    return 0;
  if ((*((_BYTE *)this + 45) & 0x10) != 0 && (*((_BYTE *)this + 21) & 0x80) != 0)
  {
    switch(a2)
    {
      case 2u:
        goto LABEL_14;
      case 3u:
        goto LABEL_35;
      case 4u:
        goto LABEL_31;
      case 6u:
      case 8u:
        if (((*(_DWORD *)(a4 + 16) ^ *(_DWORD *)(a3 + 16)) & 0x380000) != 0)
          goto LABEL_31;
        v46 = *(_QWORD *)(a3 + 8);
        v47 = *(_QWORD *)(v46 + 8);
        v48 = *(_QWORD *)(a4 + 8);
        v49 = *(_QWORD *)(v48 + 8);
        if (*(_DWORD *)(v47 + 64) != *(_DWORD *)(v49 + 64))
          goto LABEL_31;
        if (((*(unsigned __int8 *)(v47 + 68) ^ *(unsigned __int8 *)(v49 + 68)) & 2) != 0)
          goto LABEL_31;
        if (!WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(v46 + 40) + 96), (unsigned __int8 *)(*(_QWORD *)(v48 + 40) + 96)))goto LABEL_31;
        v50 = *(_QWORD *)(a3 + 8);
        v51 = *(_QWORD *)(v50 + 40);
        v52 = *(_QWORD *)(a4 + 8);
        v53 = *(_QWORD *)(v52 + 40);
        if (((*(unsigned __int8 *)(v51 + 642) >> 5) & 1) != ((*(unsigned __int8 *)(v53 + 642) >> 5) & 1))
          goto LABEL_31;
        v54 = *(_QWORD *)(v50 + 32);
        v55 = *(_QWORD *)(v52 + 32);
        if (*(float *)(v54 + 4) < 1.0 != *(float *)(v55 + 4) < 1.0)
          goto LABEL_31;
        if (*(_DWORD *)(*(_QWORD *)(v54 + 40) + 20))
        {
          if (!*(_DWORD *)(*(_QWORD *)(v55 + 40) + 20) && !*(_QWORD *)(v53 + 328))
            goto LABEL_31;
        }
        else
        {
          v75 = *(_QWORD *)(v51 + 328);
          if (*(_DWORD *)(*(_QWORD *)(v55 + 40) + 20))
          {
            if (!v75)
              goto LABEL_31;
          }
          else if ((v75 != 0) != (*(_QWORD *)(v53 + 328) != 0))
          {
            goto LABEL_31;
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(v54 + 32) + 20) == 0) != (*(_DWORD *)(*(_QWORD *)(v55 + 32) + 20) != 0))
          break;
LABEL_31:
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963AB690);
        }
        v21 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
        if (v21)
        {
          ++*((_DWORD *)v21 + 2);
          WebCore::RenderLayer::repaintIncludingDescendants(v21);
          v22 = *((_DWORD *)v21 + 2);
          if (!v22)
          {
            __break(0xC471u);
            JUMPOUT(0x1963AB6BCLL);
          }
          *((_DWORD *)v21 + 2) = v22 - 1;
        }
        else
        {
          WebCore::RenderLayer::repaintIncludingDescendants(0);
        }
        return 1;
      default:
        goto LABEL_9;
    }
  }
  if (a2 != 3)
  {
    if (a2 != 2)
      goto LABEL_9;
LABEL_14:
    if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
    {
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AB71CLL);
      }
      v64 = *((_QWORD *)this + 18);
      if (v64)
      {
        v65 = *(_DWORD *)(v64 + 8) + 1;
        *(_DWORD *)(v64 + 8) = v65;
      }
      else
      {
        v65 = MEMORY[8];
      }
      if (!v65)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AB748);
      }
      v66 = *(_QWORD *)(v64 + 24);
      v67 = v65 - 1;
      *(_DWORD *)(v64 + 8) = v65 - 1;
      if ((v66 & 0x800) != 0)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963AB768);
        }
        *(_DWORD *)(v64 + 8) = v65;
        if ((v66 & 0x2000000000000) != 0)
        {
          v82 = *(_OWORD *)(v64 + 112);
          v83 = 1;
          *(_DWORD *)(v64 + 8) = v67;
          WebCore::RenderObject::containerForRepaint(this, (uint64_t)v79);
          v68 = v80;
          if (v80)
          {
            v69 = *(WTF **)(v80 + 8);
            if (!v69)
            {
              v69 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v69 = 1;
              *((_QWORD *)v69 + 1) = v68;
              v77 = *(WTF **)(v68 + 8);
              *(_QWORD *)(v68 + 8) = v69;
              if (v77)
              {
                if (*(_DWORD *)v77 == 1)
                {
                  WTF::fastFree(v77, v76);
                  v69 = *(WTF **)(v68 + 8);
                  if (!v69)
                    goto LABEL_139;
                }
                else
                {
                  --*(_DWORD *)v77;
                }
              }
            }
            ++*(_DWORD *)v69;
          }
          else
          {
            v69 = 0;
          }
LABEL_139:
          v78 = v69;
          WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v78, (WebCore::LayoutRect *)&v82, 1);
          if (v78)
          {
            if (*(_DWORD *)v78 == 1)
              WTF::fastFree(v78, v70);
            else
              --*(_DWORD *)v78;
          }
          if (v80)
          {
            v71 = *(_DWORD *)(v80 + 16);
            if (!v71)
            {
              __break(0xC471u);
              JUMPOUT(0x1963AB788);
            }
            *(_DWORD *)(v80 + 16) = v71 - 1;
          }
          return 1;
        }
        *(_DWORD *)(v64 + 8) = v67;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v82) = 0;
      v83 = 0;
      v79[0] = 0;
      v81 = 0;
      WebCore::RenderObject::issueRepaint((uint64_t)this, &v82, 0, 0, (uint64_t)v79);
    }
    return 1;
  }
LABEL_35:
  v23 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v26 + 47))
  {
    v25 = i | (v23 << 32);
    if (!v25)
      goto LABEL_9;
    v26 = *(_QWORD *)(v25 + 8);
    if (!v26)
      goto LABEL_9;
    if ((*(_BYTE *)(v26 + 45) & 2) != 0)
      break;
    v23 = *(unsigned __int8 *)(v26 + 51);
  }
LABEL_66:
  if (!WebCore::RenderText::containsOnlyCollapsibleWhitespace((WebCore::RenderText *)v26))
    goto LABEL_14;
  while (1)
  {
    v39 = *(unsigned int *)(v26 + 47);
    if (!(v39 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)))
      break;
    v26 = *(_QWORD *)((v39 | ((unint64_t)*(unsigned __int8 *)(v26 + 51) << 32)) + 8);
    if (!v26)
      break;
    if ((*(_BYTE *)(v26 + 45) & 2) != 0)
      goto LABEL_66;
  }
LABEL_9:
  v9 = *(_QWORD **)(a4 + 8);
  v10 = v9[2];
  if ((*(_BYTE *)(v10 + 52) & 0xF) != 0)
  {
    v12 = *(float *)(v10 + 48);
    v11 = *(float *)(v10 + 56);
    if ((*(_BYTE *)(v10 + 52) & 0x10) == 0)
      goto LABEL_11;
    v58 = v12 < 3.0;
    v59 = v12 + -3.0;
    if (v12 < 3.0)
      v12 = 3.0;
    v60 = 0.0;
    if (!v58)
      v60 = v59;
  }
  else
  {
    v11 = *(float *)(v10 + 56);
    v12 = 0.0;
    if ((*(_BYTE *)(v10 + 52) & 0x10) == 0)
      goto LABEL_11;
    v60 = -3.0;
  }
  if (v60 < 0.0)
    v60 = 0.0;
  v11 = v11 + v60;
LABEL_11:
  v13 = v12 + v11;
  v14 = 0.0;
  v15 = fmaxf(v13, 0.0);
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16);
  if ((*(_BYTE *)(v16 + 52) & 0xF) == 0)
  {
    v17 = *(float *)(v16 + 56);
    if ((*(_BYTE *)(v16 + 52) & 0x10) == 0)
      goto LABEL_13;
    v63 = -3.0;
LABEL_127:
    if (v63 < 0.0)
      v63 = 0.0;
    v17 = v17 + v63;
    goto LABEL_13;
  }
  v14 = *(float *)(v16 + 48);
  v17 = *(float *)(v16 + 56);
  if ((*(_BYTE *)(v16 + 52) & 0x10) != 0)
  {
    v61 = v14 < 3.0;
    v62 = v14 + -3.0;
    if (v14 < 3.0)
      v14 = 3.0;
    v63 = 0.0;
    if (!v61)
      v63 = v62;
    goto LABEL_127;
  }
LABEL_13:
  if (v15 < fmaxf(v14 + v17, 0.0))
    goto LABEL_14;
  if (this && (*((_BYTE *)this + 45) & 0x10) != 0)
  {
    v19 = v9[4];
    v20 = *(_DWORD *)(*(_QWORD *)(v19 + 40) + 20)
       || (v45 = (_QWORD *)v9[5], v45[41])
       || v45[38]
       || v45[39]
       || v45[40]
       || *(float *)(v19 + 4) < 1.0
       || *(_DWORD *)(*(_QWORD *)(v19 + 32) + 20)
       || *(_DWORD *)(v45[9] + 20) != 0;
    if ((*((_DWORD *)this + 5) & 0x8000) == 0 && v20)
      goto LABEL_14;
  }
  if (a2 == 8 && (*((_BYTE *)this + 45) & 4) != 0)
  {
    if ((*(_BYTE *)(a3 + 18) & 0x38) == 0 && (*(_QWORD *)(a4 + 16) & 0x380000) != 0)
      goto LABEL_14;
  }
  else if (a2 < 5)
  {
    return 0;
  }
  v27 = *(_QWORD *)(a3 + 24);
  v28 = *(_DWORD *)(v27 + 236);
  if ((v28 & 0x4000000) != 0)
    v29 = 1;
  else
    v29 = (*(unsigned __int8 *)(a3 + 40) >> 4) & 3;
  v30 = *(_QWORD *)(a4 + 24);
  v31 = *(_DWORD *)(v30 + 236);
  v32 = (*(unsigned __int8 *)(a4 + 40) >> 4) & 3;
  if ((v31 & 0x4000000) != 0)
    v32 = 1;
  if (v29 != v32)
  {
    v40 = this;
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      for (j = *((_QWORD *)this + 4); j; j = *((_QWORD *)v40 + 4))
      {
        v40 = *(WebCore::RenderObject **)(j + 8);
        if (!v40)
          break;
        if ((*((_BYTE *)v40 + 45) & 0x10) != 0)
          goto LABEL_77;
      }
      goto LABEL_47;
    }
LABEL_77:
    if ((*((_BYTE *)v40 + 21) & 0x80) == 0)
    {
      while (1)
      {
        v42 = *((_QWORD *)v40 + 4);
        if (!v42)
          goto LABEL_47;
        v40 = *(WebCore::RenderObject **)(v42 + 8);
        if (!v40)
          goto LABEL_47;
        if ((*((_BYTE *)v40 + 45) & 0x10) != 0)
          goto LABEL_77;
      }
    }
    v43 = *((_QWORD *)v40 + 18);
    if (v43)
    {
      v44 = *(_DWORD *)(v43 + 8);
      *(_DWORD *)(v43 + 8) = v44 + 1;
      if (((*(_BYTE *)(v30 + 239) & 4) != 0 || (*(_BYTE *)(a4 + 40) & 0x30) != 0) && (*(_BYTE *)(v43 + 26) & 8) != 0)
      {
        v56 = *(_QWORD *)(v43 + 32);
        if ((WebCore::RenderObject *)v56 == this
          || (*(_BYTE *)(*(_QWORD *)(v56 + 104) + 239) & 4) != 0
          || (*(_BYTE *)(v56 + 120) & 0x30) != 0)
        {
          if (v44 != -1)
          {
            *(_DWORD *)(v43 + 8) = v44;
            goto LABEL_14;
          }
LABEL_167:
          __break(0xC471u);
          JUMPOUT(0x1963AB6DCLL);
        }
      }
      if (v44 == -1)
        goto LABEL_167;
      *(_DWORD *)(v43 + 8) = v44;
      v28 = *(_DWORD *)(v27 + 236);
      v31 = *(_DWORD *)(v30 + 236);
    }
  }
LABEL_47:
  if (((v31 ^ v28) & 0x18000000) == 0 || (*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
    return 0;
  v33 = this;
  if ((*((_BYTE *)this + 45) & 0x10) == 0)
  {
    v72 = *((_QWORD *)this + 4);
    if (!v72)
      return 0;
    v33 = *(WebCore::RenderObject **)(v72 + 8);
    if (!v33)
      return 0;
    result = 0;
    while ((*((_BYTE *)v33 + 45) & 0x10) == 0)
    {
      v73 = *((_QWORD *)v33 + 4);
      if (!v73)
        return 0;
      v33 = *(WebCore::RenderObject **)(v73 + 8);
      if (!v33)
        return result;
    }
  }
  if ((*((_BYTE *)v33 + 21) & 0x80) == 0)
  {
    result = 0;
    do
    {
      v34 = *((_QWORD *)v33 + 4);
      if (!v34)
        return 0;
      v33 = *(WebCore::RenderObject **)(v34 + 8);
      if (!v33)
        return 0;
      while ((*((_BYTE *)v33 + 45) & 0x10) == 0)
      {
        v74 = *((_QWORD *)v33 + 4);
        if (!v74)
          return 0;
        v33 = *(WebCore::RenderObject **)(v74 + 8);
        if (!v33)
          return result;
      }
    }
    while ((*((_BYTE *)v33 + 21) & 0x80) == 0);
  }
  v35 = *((_QWORD *)v33 + 18);
  if (v35)
  {
    v36 = *(_DWORD *)(v35 + 8);
    *(_DWORD *)(v35 + 8) = v36 + 1;
    v37 = *((_QWORD *)this + 4);
    if (v37
      && (v38 = *(_QWORD *)(v37 + 8)) != 0
      && (*(_BYTE *)(*(_QWORD *)(v38 + 104) + 239) & 0x18) != 0
      && (*(_BYTE *)(v35 + 26) & 8) != 0
      && ((v57 = *(_QWORD *)(v35 + 32), (WebCore::RenderObject *)v57 == this)
       || (*(_BYTE *)(*(_QWORD *)(v57 + 104) + 239) & 4) != 0
       || (*(_BYTE *)(v57 + 120) & 0x30) != 0))
    {
      if (v36 != -1)
      {
        *(_DWORD *)(v35 + 8) = v36;
        goto LABEL_14;
      }
    }
    else if (v36 != -1)
    {
      result = 0;
      *(_DWORD *)(v35 + 8) = v36;
      return result;
    }
    __break(0xC471u);
    JUMPOUT(0x1963AB6FCLL);
  }
  return 0;
}

uint64_t *WebCore::RenderElement::adjustFragmentedFlowStateOnContainingBlockChangeIfNeeded(uint64_t *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  const WebCore::RenderObject *v4;
  int v5;
  const WebCore::RenderObject *v6;
  int v7;
  uint64_t v8;
  WebCore::RenderObject *v9;
  int v10;
  int v11;
  WebCore::RenderStyle *v13;
  int hasTransformRelatedProperty;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WebCore::RenderBlock *v27;
  WebCore::RenderBlock *v28;
  WebCore::RenderObject *i;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return this;
  v27 = (WebCore::RenderBlock *)this;
  if (((*((_DWORD *)this + 24) ^ *((_DWORD *)a2 + 4)) & 0x380000) == 0)
  {
    v13 = (WebCore::RenderStyle *)(this + 10);
    hasTransformRelatedProperty = WebCore::RenderStyle::hasTransformRelatedProperty(a2);
    v15 = WebCore::RenderStyle::hasTransformRelatedProperty(v13);
    this = (uint64_t *)v27;
    if (hasTransformRelatedProperty == v15)
    {
      v16 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
      v17 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 40);
      if (*(_QWORD *)(v16 + 200) == *(_QWORD *)(v17 + 200)
        && (*(_DWORD *)(*(_QWORD *)(v16 + 72) + 20) != 0) == (*(_DWORD *)(*(_QWORD *)(v17 + 72) + 20) != 0))
      {
        v18 = *(unsigned __int8 *)(v16 + 462);
        v19 = *(_BYTE *)(v16 + 642) & 3;
        if (v19 == 2)
        {
          v20 = 25;
        }
        else
        {
          v20 = *(unsigned __int8 *)(v16 + 462);
          if (v19 == 1)
            v20 = 21;
        }
        v21 = *(unsigned __int8 *)(v17 + 462);
        v22 = *(_BYTE *)(v17 + 642) & 3;
        if ((v22 - 1) <= 1)
        {
          this = (uint64_t *)v27;
          if ((v20 & 1) == 0)
            goto LABEL_4;
        }
        else
        {
          this = (uint64_t *)v27;
          if (((v20 ^ v21) & 1) != 0)
            goto LABEL_4;
        }
        if (v19 == 2)
        {
          v18 |= 0x19u;
        }
        else if (v19 == 1)
        {
          v18 = 21;
        }
        if (v22 == 2)
        {
          LOBYTE(v21) = v21 | 0x19;
        }
        else if (v22 == 1)
        {
          this = (uint64_t *)v27;
          if ((v18 & 4) != 0)
            return this;
          goto LABEL_4;
        }
        this = (uint64_t *)v27;
        if (((v18 >> 2) & 1) == (v21 & 4) >> 2)
          return this;
      }
    }
  }
LABEL_4:
  if ((*((_BYTE *)this + 45) & 0x40) != 0)
  {
    ++*((_DWORD *)v27 + 4);
    WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants((uint64_t)v27, 0);
    v5 = *((_DWORD *)v27 + 4);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1963ABAF4);
    }
    *((_DWORD *)v27 + 4) = v5 - 1;
  }
  else
  {
    v28 = v27;
    v23 = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlock>::begin((uint64_t *)&v28);
    if (v4)
    {
      v24 = v23;
      v25 = (uint64_t)v4;
      do
      {
        ++*(_DWORD *)(v25 + 16);
        WebCore::RenderBlock::resetEnclosingFragmentedFlowAndChildInfoIncludingDescendants(v25, 0);
        v26 = *(_DWORD *)(v25 + 16);
        if (!v26)
        {
          __break(0xC471u);
          JUMPOUT(0x1963ABB14);
        }
        *(_DWORD *)(v25 + 16) = v26 - 1;
        v25 = WebCore::RenderTraversal::next<WebCore::RenderBlock,WebCore::RenderBlock>(v25, v24);
      }
      while (v25);
    }
  }
  this = (uint64_t *)WebCore::RenderObject::computedFragmentedFlowState(v27, v4);
  if ((_DWORD)this)
    v7 = 0x10000000;
  else
    v7 = 0;
  *((_DWORD *)v27 + 5) = *((_DWORD *)v27 + 5) & 0xEFFFFFFF | v7;
  v8 = *((unsigned int *)v27 + 16);
  if (v8 | ((unint64_t)*((unsigned __int8 *)v27 + 68) << 32))
  {
    v9 = *(WebCore::RenderObject **)((v8 | ((unint64_t)*((unsigned __int8 *)v27 + 68) << 32)) + 8);
    v28 = v27;
    for (i = v9; i; v9 = i)
    {
      ++*((_DWORD *)v9 + 4);
      if (WebCore::RenderObject::computedFragmentedFlowState(v9, v6))
        v10 = 0x10000000;
      else
        v10 = 0;
      v11 = *((_DWORD *)v9 + 4);
      *((_DWORD *)v9 + 5) = *((_DWORD *)v9 + 5) & 0xEFFFFFFF | v10;
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1963ABA78);
      }
      *((_DWORD *)v9 + 4) = v11 - 1;
      this = WebCore::RenderDescendantIterator<WebCore::RenderObject>::operator++((uint64_t *)&v28);
    }
  }
  return this;
}

void WebCore::RenderElement::setNeedsPositionedMovementLayout(WebCore::RenderElement *this, const WebCore::RenderStyle *a2)
{
  int v2;
  WebCore::RenderElement *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  char v10;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x10) == 0)
  {
    *((_DWORD *)this + 5) = v2 | 0x10;
    v5 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
    WebCore::RenderObject::scheduleLayout(this, v5);
    if ((*((_BYTE *)this + 21) & 0x80) != 0)
    {
      if (a2)
      {
        if ((*((_BYTE *)this + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          goto LABEL_21;
        }
        v6 = *(_QWORD *)(*((_QWORD *)this + 18) + 256);
        v10 = 0;
        v7 = WebCore::RenderStyle::changeRequiresRepaint((uint64_t)this + 80, (uint64_t)a2, (WebCore::CSSValue *)&v10);
        if (v6 && !v7)
        {
          if ((WebCore::RenderStyle::changeRequiresLayerRepaint((uint64_t)this + 80, (uint64_t)a2, &v10) & 1) == 0
            || (v10 & 8) == 0)
          {
            goto LABEL_8;
          }
        }
        else if (!v7)
        {
          goto LABEL_8;
        }
        WebCore::RenderObject::setLayerNeedsFullRepaint((uint64_t)this);
        return;
      }
LABEL_8:
      if ((*((_BYTE *)this + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963ABC9CLL);
      }
      v8 = *((_QWORD *)this + 18);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 8) + 1;
        *(_DWORD *)(v8 + 8) = v9;
      }
      else
      {
        v9 = MEMORY[8];
      }
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
      if (v9)
      {
        *(_DWORD *)(v8 + 8) = v9 - 1;
        return;
      }
      __break(0xC471u);
LABEL_21:
      JUMPOUT(0x1963ABC7CLL);
    }
  }
}

void WebCore::RenderElement::setNeedsSimplifiedNormalFlowLayout(WebCore::RenderElement *this)
{
  int v1;
  WebCore::RenderObject *v3;
  uint64_t v4;
  int v5;
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x80) != 0)
    return;
  *((_DWORD *)this + 5) = v1 | 0x80;
  v3 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
  if (v3)
  {
    if (*((_BYTE *)v3 + 46) == 49)
    {
      v10 = (_DWORD *)*((_QWORD *)v3 + 31);
      ++v10[2];
      ++v10[84];
      WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v10 + 84));
      v11 = v10[84];
      if (v11)
      {
LABEL_21:
        v10[84] = v11 - 1;
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
        goto LABEL_3;
      }
    }
    else
    {
      v6 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) + 40) + 8)
                                     + 1944);
      if (v6 != v3)
      {
        v7 = v3;
        do
        {
          v8 = *((_QWORD *)v7 + 4);
          if (!v8)
            goto LABEL_3;
          v7 = *(WebCore::RenderObject **)(v8 + 8);
        }
        while (v7 != v6 && v7 != 0);
        if (!v7)
          goto LABEL_3;
      }
      v10 = (_DWORD *)*((_QWORD *)v6 + 31);
      ++v10[2];
      ++v10[84];
      WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v10 + 84), (WTF::MonotonicTime **)v3);
      v11 = v10[84];
      if (v11)
        goto LABEL_21;
    }
    __break(0xC471u);
    JUMPOUT(0x1963ABE20);
  }
LABEL_3:
  if ((*((_BYTE *)this + 21) & 0x80) != 0)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963ABE54);
    }
    v4 = *((_QWORD *)this + 18);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 8) + 1;
      *(_DWORD *)(v4 + 8) = v5;
    }
    else
    {
      v5 = MEMORY[8];
    }
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1963ABE80);
    }
    *(_DWORD *)(v4 + 8) = v5 - 1;
  }
}

uint64_t WebCore::RenderChildIteratorAdapter<WebCore::RenderElement>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v3;

  v1 = *(unsigned int *)(result + 64);
  if (v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v1 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v3 + 8))
    {
      if ((*(_BYTE *)(i + 45) & 2) == 0)
        break;
      v3 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v3)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::moveLayers(WebCore::RenderElement *this, WebCore::RenderLayer *a2)
{
  uint64_t result;
  WebCore::RenderElement *v5;
  WebCore::RenderElement *v6;
  int v7;
  uint64_t v8;
  WebCore::RenderLayer *v9;
  int v10;
  int v11;
  uint64_t v12;
  WebCore::RenderElement *v13;

  if ((*((_BYTE *)this + 21) & 0x80) == 0)
  {
    result = WebCore::RenderChildIteratorAdapter<WebCore::RenderElement>::begin((uint64_t)this);
    v12 = result;
    v13 = v5;
    if (!v5)
      return result;
    v6 = v5;
    while (1)
    {
      ++*((_DWORD *)v6 + 4);
      WebCore::RenderElement::moveLayers(v6, a2);
      v7 = *((_DWORD *)v6 + 4);
      if (!v7)
        break;
      *((_DWORD *)v6 + 4) = v7 - 1;
      result = WebCore::RenderChildConstIterator<WebCore::RenderElement>::operator++((uint64_t)&v12);
      v6 = v13;
      if (!v13)
        return result;
    }
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x1963AC030);
  }
  result = WebCore::RenderElement::element(this);
  if ((!result || (*(_BYTE *)(result + 23) & 0x20) == 0)
    && (*((_QWORD *)this + 12) & 0xF80000000000) != 0x480000000000)
  {
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AC050);
    }
    v8 = *((_QWORD *)this + 18);
    if (v8)
      ++*(_DWORD *)(v8 + 8);
    v9 = *(WebCore::RenderLayer **)(v8 + 40);
    if (v9)
    {
      ++*((_DWORD *)v9 + 2);
      WebCore::RenderLayer::removeChild(v9, (WebCore::RenderLayer *)v8);
      v10 = *((_DWORD *)v9 + 2);
      if (!v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AC070);
      }
      *((_DWORD *)v9 + 2) = v10 - 1;
    }
    result = WebCore::RenderLayer::addChild(a2, (WebCore::RenderLayer *)v8, 0);
    v11 = *(_DWORD *)(v8 + 8);
    if (v11)
    {
      *(_DWORD *)(v8 + 8) = v11 - 1;
      return result;
    }
    __break(0xC471u);
    goto LABEL_23;
  }
  return result;
}

uint64_t WebCore::RenderStyle::specifiesColumns(WebCore::RenderStyle *this)
{
  unsigned int v1;
  uint64_t result;
  int v3;
  __int16 v4;
  char v5;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 56);
  if ((v1 & 0x33) == 0x23)
    return 0;
  if ((~v1 & 3) != 0)
    return 1;
  v3 = (v1 >> 4) & 3;
  if (v3 == 2)
    return 0;
  v4 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  v5 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_9;
    case 3:
    case 5:
      LOBYTE(v4) = 3;
      goto LABEL_9;
    case 4:
      goto LABEL_10;
    default:
      LOBYTE(v4) = 0;
LABEL_9:
      v5 = v4;
LABEL_10:
      result = (v3 == 0) ^ ((v5 & 6) != 2);
      break;
  }
  return result;
}

WebCore::StyleMiscNonInheritedData *WebCore::RenderStyle::inheritColumnPropertiesFrom(WTF **this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *v4;
  WebCore::StyleMiscNonInheritedData *result;
  WebCore::StyleMiscNonInheritedData *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  int v8;
  _DWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WebCore::StyleMiscNonInheritedData *v17;
  char v18;
  char v19;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v4 + 4);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy(result, (uint64_t *)&v17);
    v6 = v17;
    v17 = 0;
    v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v4 + 4);
    *((_QWORD *)v4 + 4) = v6;
    if (v7)
    {
      v8 = *(_DWORD *)v7 - 1;
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v3);
        WTF::fastFree(v13, v14);
        v7 = v17;
        v17 = 0;
        if (!v7)
          goto LABEL_5;
        v8 = *(_DWORD *)v7 - 1;
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v3);
          WTF::fastFree(v15, v16);
          goto LABEL_5;
        }
      }
      *(_DWORD *)v7 = v8;
    }
LABEL_5:
    result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v4 + 4);
  }
  v9 = *(_DWORD **)(v2 + 24);
  ++*v9;
  v10 = (unsigned int *)*((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = v9;
  if (v10)
  {
    if (*v10 == 1)
    {
      v11 = v10[12];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v18, v10 + 10);
      v10[12] = -1;
      v12 = v10[6];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v19, v10 + 4);
      v10[6] = -1;
      return (WebCore::StyleMiscNonInheritedData *)WTF::fastFree((WTF *)v10, v3);
    }
    else
    {
      --*v10;
    }
  }
  return result;
}

WebCore::Element *WebCore::RenderElement::isSkippedContentRoot(WebCore::RenderElement *this)
{
  WebCore::Element *result;
  int v3;
  char v4;
  WebCore::RenderElement *v6;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = *(WebCore::Element **)(*((_QWORD *)this + 3) + 8);
    if (result && (*((_WORD *)result + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AC2E0);
    }
  }
  v3 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 636) >> 18) & 3;
  if (!v3)
    return 0;
  v6 = this;
  v4 = *((_BYTE *)this + 96);
  if ((v4 & 0x1F) != 0xD && (v4 & 0x1Eu) - 14 > 0xFFFFFFF5)
    return 0;
  if (v3 == 2)
    return (WebCore::Element *)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 1944)
                                                     + 248)
                                         + 479) == 0);
  if (result)
  {
    if (!WebCore::Element::isRelevantToUser(result))
      return (WebCore::Element *)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 1944)
                                                       + 248)
                                           + 479) == 0);
    return 0;
  }
  return result;
}

int *WebCore::RenderElement::styleDidChange(WebCore::StyleDifference,WebCore::RenderStyle const*)::$_0::operator()<WebCore::RenderStyle,WebCore::RenderStyle>(int *this, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const WebCore::FillLayer *v6;
  int v7;
  WebCore::FillLayer *v8;
  _DWORD *v9;
  WebCore::FillLayer *v10;
  WTF *v11;
  void *v12;
  const WebCore::FillLayer *v13;
  WebCore::FillLayer *v14;
  int v15;
  WebCore::FillLayer *v16;
  _DWORD *v17;
  WebCore::FillLayer *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  const WebCore::FillLayer *v23;
  uint64_t v24;
  WebCore::FillLayer *v25;
  int *v26;
  int v27;
  WTF *v28;
  void *v29;
  int v30;
  _DWORD *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  _DWORD *v36;
  int v37;
  int v38;
  WTF *v39;
  WTF *v40;
  int *v41;
  int v42;
  int *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;

  if (!(a2 | a3))
    return this;
  v5 = (uint64_t)this;
  if (a3)
  {
    v6 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 16) + 8);
    v7 = (*(_DWORD *)v6)++;
    if (!a2)
    {
      *(_DWORD *)v6 = v7 + 2;
      v8 = v6;
      do
      {
        v9 = (_DWORD *)*((_QWORD *)v8 + 2);
        if (v9)
        {
          ++v9[2];
          this = (int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v9 + 104))(v9, v5);
          if (v9[2] == 1)
            this = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[2];
        }
        v10 = (WebCore::FillLayer *)*((_QWORD *)v8 + 1);
        if (v10)
          ++*(_DWORD *)v10;
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::FillLayer::~FillLayer(v8);
          this = (int *)WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v8;
        }
        v8 = v10;
      }
      while (v10);
LABEL_20:
      if (a3)
        goto LABEL_21;
LABEL_38:
      if (!a2)
        return this;
      v14 = 0;
      goto LABEL_40;
    }
  }
  else
  {
    if (!a2)
      return this;
    v6 = 0;
  }
  v13 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) + 8);
  ++*(_DWORD *)v13;
  this = (int *)WebCore::RenderElement::updateFillImages((uint64_t)this, v6, v13);
  if (*(_DWORD *)v13 != 1)
  {
    --*(_DWORD *)v13;
    goto LABEL_20;
  }
  WebCore::FillLayer::~FillLayer(v13);
  this = (int *)WTF::fastFree(v21, v22);
  if (!a3)
    goto LABEL_38;
LABEL_21:
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::FillLayer::~FillLayer(v6);
      this = (int *)WTF::fastFree(v32, v33);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v14 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 48);
  v15 = (*(_DWORD *)v14)++;
  if (!a2)
  {
    *(_DWORD *)v14 = v15 + 2;
    v16 = v14;
    do
    {
      v17 = (_DWORD *)*((_QWORD *)v16 + 2);
      if (v17)
      {
        ++v17[2];
        this = (int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v17 + 104))(v17, v5);
        if (v17[2] == 1)
          this = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      v18 = (WebCore::FillLayer *)*((_QWORD *)v16 + 1);
      if (v18)
        ++*(_DWORD *)v18;
      if (*(_DWORD *)v16 == 1)
      {
        WebCore::FillLayer::~FillLayer(v16);
        this = (int *)WTF::fastFree(v19, v20);
      }
      else
      {
        --*(_DWORD *)v16;
      }
      v16 = v18;
    }
    while (v18);
LABEL_42:
    if (a3)
      goto LABEL_43;
LABEL_53:
    if (!a2)
      return this;
    v25 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 200) + 8);
    if (!v25)
      goto LABEL_69;
    v26 = (int *)((char *)v25 + 8);
    ++*((_DWORD *)v25 + 2);
    goto LABEL_56;
  }
LABEL_40:
  v23 = *(const WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 48);
  ++*(_DWORD *)v23;
  this = (int *)WebCore::RenderElement::updateFillImages(v5, v14, v23);
  if (*(_DWORD *)v23 != 1)
  {
    --*(_DWORD *)v23;
    goto LABEL_42;
  }
  WebCore::FillLayer::~FillLayer(v23);
  this = (int *)WTF::fastFree(v28, v29);
  if (!a3)
    goto LABEL_53;
LABEL_43:
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::FillLayer::~FillLayer(v14);
      this = (int *)WTF::fastFree(v34, v35);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v24 = *(_QWORD *)(a3 + 8);
  v14 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(v24 + 24) + 200) + 8);
  if (v14)
  {
    ++*((_DWORD *)v14 + 2);
    if (!a2
      || (v25 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 200) + 8)) == 0)
    {
      this = (int *)(*(uint64_t (**)(WebCore::FillLayer *, uint64_t))(*(_QWORD *)v14 + 104))(v14, v5);
      goto LABEL_60;
    }
    v26 = (int *)((char *)v25 + 8);
    v27 = *((_DWORD *)v25 + 2) + 1;
    *((_DWORD *)v25 + 2) = v27;
    if (v14 == v25)
    {
      v25 = v14;
      goto LABEL_57;
    }
    (*(void (**)(WebCore::FillLayer *, uint64_t))(*(_QWORD *)v14 + 104))(v14, v5);
  }
  else
  {
    if (!a2)
    {
      v31 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 216) + 8);
      if (!v31)
        goto LABEL_78;
      ++v31[2];
      goto LABEL_64;
    }
    v25 = *(WebCore::FillLayer **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 200) + 8);
    if (!v25)
      goto LABEL_146;
    v26 = (int *)((char *)v25 + 8);
    ++*((_DWORD *)v25 + 2);
    v14 = 0;
  }
LABEL_56:
  this = (int *)(*(uint64_t (**)(WebCore::FillLayer *, uint64_t))(*(_QWORD *)v25 + 96))(v25, v5);
  v27 = *((_DWORD *)v25 + 2);
LABEL_57:
  v30 = v27 - 1;
  if (v30)
  {
    *v26 = v30;
    if (a3)
      goto LABEL_59;
LABEL_69:
    v31 = 0;
    goto LABEL_70;
  }
  this = (int *)(*(uint64_t (**)(WebCore::FillLayer *))(*(_QWORD *)v25 + 8))(v25);
  if (!a3)
    goto LABEL_69;
LABEL_59:
  if (!v14)
  {
    v24 = *(_QWORD *)(a3 + 8);
LABEL_146:
    v31 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 216) + 8);
    if (v31)
      ++v31[2];
LABEL_70:
    v36 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 216) + 8);
    if (v36)
    {
      v37 = v36[2] + 1;
      v36[2] = v37;
      if (v31 != v36)
      {
        if (v31)
          (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v31 + 104))(v31, v5);
        this = (int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v36 + 96))(v36, v5);
        v37 = v36[2];
      }
      v38 = v37 - 1;
      if (v38)
        v36[2] = v38;
      else
        this = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    }
    else if (v31)
    {
      this = (int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v31 + 104))(v31, v5);
    }
    if (!a3)
    {
      v40 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 240);
      if (!v40)
        return this;
      ++*(_DWORD *)v40;
      goto LABEL_88;
    }
    if (!v31)
    {
      v39 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 240);
      if (v39)
        ++*(_DWORD *)v39;
      goto LABEL_80;
    }
    goto LABEL_76;
  }
LABEL_60:
  if (*((_DWORD *)v14 + 2) == 1)
    this = (int *)(*(uint64_t (**)(WebCore::FillLayer *))(*(_QWORD *)v14 + 8))(v14);
  else
    --*((_DWORD *)v14 + 2);
  v31 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 216) + 8);
  if (!v31)
  {
    if (!a2)
      goto LABEL_78;
    goto LABEL_69;
  }
  ++v31[2];
  if (a2)
    goto LABEL_70;
LABEL_64:
  this = (int *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v31 + 104))(v31, v5);
LABEL_76:
  if (v31[2] == 1)
    this = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  else
    --v31[2];
LABEL_78:
  v39 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) + 240);
  if (v39)
  {
    ++*(_DWORD *)v39;
    if (!a2)
    {
LABEL_120:
      this = (int *)*((_QWORD *)v39 + 2);
      if (this)
        this = (int *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)this + 104))(this, v5);
LABEL_122:
      if (*(_DWORD *)v39 == 1)
      {
        v46 = (_DWORD *)*((_QWORD *)v39 + 2);
        *((_QWORD *)v39 + 2) = 0;
        if (v46)
        {
          if (v46[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
          else
            --v46[2];
        }
        v47 = (_DWORD *)*((_QWORD *)v39 + 1);
        *((_QWORD *)v39 + 1) = 0;
        if (v47)
        {
          if (v47[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
          else
            --v47[2];
        }
        return (int *)WTF::fastFree(v39, (void *)a2);
      }
      else
      {
        --*(_DWORD *)v39;
      }
      return this;
    }
  }
  else
  {
    if (!a2)
      return this;
    v39 = 0;
  }
LABEL_80:
  v40 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 240);
  if (!v40)
  {
    if (!v39)
      return this;
    goto LABEL_120;
  }
  ++*(_DWORD *)v40;
  if (!v39)
  {
LABEL_88:
    v41 = (int *)*((_QWORD *)v40 + 2);
    if (!v41)
    {
      v39 = 0;
      goto LABEL_93;
    }
    v39 = 0;
    v43 = v41 + 2;
    ++v41[2];
    goto LABEL_90;
  }
  this = (int *)*((_QWORD *)v39 + 2);
  v41 = (int *)*((_QWORD *)v40 + 2);
  if (v41)
  {
    v43 = v41 + 2;
    v42 = v41[2];
    v41[2] = v42 + 1;
    if (this == v41)
      goto LABEL_91;
    if (this)
      (*(void (**)(int *, uint64_t))(*(_QWORD *)this + 104))(this, v5);
LABEL_90:
    (*(void (**)(int *, uint64_t))(*(_QWORD *)v41 + 96))(v41, v5);
    v42 = v41[2] - 1;
    this = v41;
LABEL_91:
    if (v42)
      *v43 = v42;
    else
      this = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)this + 8))(this);
    goto LABEL_93;
  }
  if (this)
    this = (int *)(*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)this + 104))(this, v5);
LABEL_93:
  if (*(_DWORD *)v40 != 1)
  {
    --*(_DWORD *)v40;
    if (!a3)
      return this;
    goto LABEL_95;
  }
  v44 = (_DWORD *)*((_QWORD *)v40 + 2);
  *((_QWORD *)v40 + 2) = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = (_DWORD *)*((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  this = (int *)WTF::fastFree(v40, (void *)a2);
  if (a3)
  {
LABEL_95:
    if (!v39)
      return this;
    goto LABEL_122;
  }
  return this;
}

WTF *WebCore::RenderElement::updateReferencedSVGResources(WebCore::RenderElement *this, uint64_t a2, const WebCore::Document *a3)
{
  void *v4;
  WTF *result;
  WTF *v6;
  _QWORD *v7;
  void *v8;
  WebCore::ReferencedSVGResources *v9;
  bmalloc::api *v10;
  void *v11;
  WebCore::TreeScope *v12;
  uint64_t v13;
  BOOL v14;
  WTF *v15;
  WebCore::ReferencedSVGResources *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  unsigned int v23;

  WebCore::ReferencedSVGResources::referencedSVGResourceIDs((WebCore::RenderElement *)((char *)this + 80), *(const WebCore::RenderStyle **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), a3, (uint64_t)&v21);
  if (v23)
  {
    v6 = WebCore::RenderObject::ensureRareData(this, v4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    if (!v7)
    {
      v7 = (_QWORD *)bmalloc::api::isoAllocate();
      v7[1] = 0;
      v7[2] = 0;
      *v7 = this;
      *(_QWORD *)((char *)v7 + 21) = 0;
      v9 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = v7;
      if (v9)
      {
        WebCore::ReferencedSVGResources::~ReferencedSVGResources(v9, v8);
        bmalloc::api::isoDeallocate(v10, v11);
        v7 = (_QWORD *)*((_QWORD *)v6 + 1);
      }
    }
    v12 = *(WebCore::TreeScope **)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40);
    v13 = *(_QWORD *)v12;
    if (*(_QWORD *)v12)
      v14 = (*(_WORD *)(*(_QWORD *)v12 + 28) & 0x80) == 0;
    else
      v14 = 1;
    if (!v14 && !*(_BYTE *)(v13 + 193))
    {
      v19 = *(_QWORD *)(v13 + 200);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          if (*(_WORD *)(*(_QWORD *)(v20 + 96) + 10) == 242)
            v12 = (WebCore::TreeScope *)*((_QWORD *)v12 + 2);
        }
      }
    }
    WebCore::ReferencedSVGResources::updateReferencedResources((uint64_t)v7, v12, (uint64_t)&v21);
  }
  else if ((*((_BYTE *)this + 21) & 0x40) != 0)
  {
    v15 = WebCore::RenderObject::ensureRareData(this, v4);
    v16 = (WebCore::ReferencedSVGResources *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = 0;
    if (v16)
    {
      WebCore::ReferencedSVGResources::~ReferencedSVGResources(v16, v4);
      bmalloc::api::isoDeallocate(v17, v18);
    }
  }
  if (v23)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WebCore::SVGQualifiedName,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::destruct(v21, (WTF *)((char *)v21 + 24 * v23));
  result = v21;
  if (v21)
  {
    v21 = 0;
    v22 = 0;
    return (WTF *)WTF::fastFree(result, v4);
  }
  return result;
}

void WebCore::RenderElement::repaintClientsOfReferencedSVGResources(WebCore::RenderElement *this)
{
  WebCore::RenderSVGResourceContainer *v1;
  WebCore::SVGElement *v2;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v1 = (WebCore::RenderSVGResourceContainer *)WebCore::lineageOfType<WebCore::RenderSVGResourceContainer>((uint64_t)this);
    if (v1)
      WebCore::RenderSVGResourceContainer::repaintAllClients(v1, v2);
  }
}

uint64_t WebCore::RenderElement::updateOutlineAutoAncestor(uint64_t this, void *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int i;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  WebCore::RenderElement *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  void *v37;

  v2 = (char)a2;
  v3 = this;
  if (*(_BYTE *)(this + 46) != 27)
    goto LABEL_2;
  v16 = *(_QWORD *)(this + 200);
  if (!v16)
  {
    v17 = 0;
LABEL_21:
    v18 = 1;
    goto LABEL_22;
  }
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    goto LABEL_21;
  v18 = 0;
  ++*(_DWORD *)(v17 + 16);
LABEL_22:
  if ((a2 & 1) != 0 || (*(_BYTE *)(v17 + 21) & 0x40) != 0)
    *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v17, a2) + 1) = (_BYTE)a2;
  this = WebCore::RenderElement::updateOutlineAutoAncestor((WebCore::RenderElement *)v17, v2);
  if ((v18 & 1) == 0)
  {
    v19 = *(_DWORD *)(v17 + 16);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1963ACE58);
    }
    *(_DWORD *)(v17 + 16) = v19 - 1;
  }
LABEL_2:
  v4 = *(unsigned int *)(v3 + 64);
  if (v4 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32))
  {
    v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32)) + 8);
    if (v5)
    {
      if (v2)
      {
        while (1)
        {
          ++*(_DWORD *)(v5 + 16);
          if ((*(_BYTE *)(v5 + 21) & 0x40) == 0)
            goto LABEL_7;
          v12 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
          v13 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v10 = v12 & ((v15 >> 31) ^ v15);
          for (i = 1; ; v10 = (v8 + i++) & v12)
          {
            v8 = v10;
            v9 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v10);
            if (v9 != -1 && *(_QWORD *)(v9 + 8) == v5)
              break;
          }
          if (!*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v8 + 8) + 1))
          {
LABEL_7:
            *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v5, a2) + 1) = 1;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 424))(v5);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 16) + 52) & 0x10) == 0
              && (*(_BYTE *)(v5 + 45) & 2) == 0)
            {
              this = WebCore::RenderElement::updateOutlineAutoAncestor((WebCore::RenderElement *)v5, 1);
            }
          }
          v6 = *(_DWORD *)(v5 + 16);
          if (!v6)
            break;
          *(_DWORD *)(v5 + 16) = v6 - 1;
          v7 = *(unsigned int *)(v5 + 47);
          if (v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
          {
            v5 = *(_QWORD *)((v7 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
            if (v5)
              continue;
          }
          goto LABEL_32;
        }
      }
      else
      {
        while (1)
        {
          v35 = *(_DWORD *)(v5 + 16) + 1;
          *(_DWORD *)(v5 + 16) = v35;
          if ((*(_BYTE *)(v5 + 21) & 0x40) != 0)
          {
            this = WebCore::RenderObject::rareData((WebCore::RenderObject *)v5);
            if (*(_BYTE *)(this + 1))
            {
              if ((*(_BYTE *)(v5 + 21) & 0x40) != 0)
                *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v5, v37) + 1) = 0;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 424))(v5);
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 16) + 52) & 0x10) == 0
                && (*(_BYTE *)(v5 + 45) & 2) == 0)
              {
                this = WebCore::RenderElement::updateOutlineAutoAncestor((WebCore::RenderElement *)v5, 0);
              }
            }
            v35 = *(_DWORD *)(v5 + 16);
          }
          if (!v35)
            break;
          *(_DWORD *)(v5 + 16) = v35 - 1;
          v36 = *(unsigned int *)(v5 + 47);
          if (v36 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32))
          {
            v5 = *(_QWORD *)((v36 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
            if (v5)
              continue;
          }
          goto LABEL_32;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1963ACFDCLL);
    }
  }
LABEL_32:
  if (v3 && (*(_BYTE *)(v3 + 45) & 8) != 0 && (*(_WORD *)(v3 + 69) & 0x10) != 0)
  {
    ++dword_1ECE91378;
    v20 = *(_QWORD *)(v3 + 8);
    v21 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
    v22 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v25);
    if (v26 == -1 || v26 != v20)
    {
      v32 = 1;
      do
      {
        v25 = ((_DWORD)v25 + v32) & v21;
        v33 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v25);
        ++v32;
      }
      while (v33 == -1 || v33 != v20);
    }
    v28 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v25 + 8) + 16);
    if (v28)
    {
      v29 = *v28;
      if (v29)
      {
        v30 = *(WebCore::RenderElement **)(v29 + 8);
        if (v30)
        {
          ++*((_DWORD *)v30 + 4);
          this = WebCore::RenderElement::updateOutlineAutoAncestor(v30, v2);
          v31 = *((_DWORD *)v30 + 4);
          if (!v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1963ACF80);
          }
          *((_DWORD *)v30 + 4) = v31 - 1;
        }
      }
    }
  }
  return this;
}

WTF *WebCore::RenderElement::issueRepaintForOutlineAuto(WebCore::RenderElement *this, float a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF *v9;
  double v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  signed int v30;
  unsigned int v31;
  signed int v32;
  signed int v33;
  unsigned int v34;
  int v35;
  void *v36;
  WTF *result;
  _BYTE v38[8];
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v43 = 0;
  v44 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  WebCore::RenderObject::containerForRepaint(this, (uint64_t)v38);
  (*(void (**)(WebCore::RenderElement *, WTF **, uint64_t *, uint64_t))(*(_QWORD *)this + 600))(this, &v41, &v40, v39);
  if (v39)
  {
    v4 = *(_DWORD *)(v39 + 16);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AD278);
    }
    *(_DWORD *)(v39 + 16) = v4 - 1;
  }
  if (HIDWORD(v42))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v41;
    v10 = a2 * 64.0;
    v11 = (int)fmax(v10, -2147483650.0);
    if (v10 >= 2147483650.0)
      v11 = 0x7FFFFFFF;
    do
    {
      v12 = *((_DWORD *)v9 + 1);
      v13 = *((_DWORD *)v9 + 2);
      v14 = *((_DWORD *)v9 + 3);
      LODWORD(v15) = *(_DWORD *)v9 - v11;
      if (__OFSUB__(*(_DWORD *)v9, v11))
        v15 = ((*(_DWORD *)v9 >> 31) + 0x7FFFFFFF);
      else
        v15 = v15;
      v16 = __OFADD__(v13, v11);
      v17 = v13 + v11;
      v18 = (v13 >> 31) + 0x7FFFFFFF;
      if (v16)
        v17 = v18;
      v16 = __OFADD__(v17, v11);
      v19 = v17 + v11;
      v20 = (v17 >> 31) + 0x7FFFFFFF;
      if (v16)
        v21 = v20;
      else
        v21 = v19;
      v16 = __OFSUB__(v12, v11);
      LODWORD(v22) = v12 - v11;
      v23 = (v12 >> 31) + 0x7FFFFFFF;
      if (v16)
        v22 = v23;
      else
        v22 = v22;
      v24 = v14 + v11;
      if (__OFADD__(v14, v11))
        v24 = (v14 >> 31) + 0x7FFFFFFF;
      v16 = __OFADD__(v24, v11);
      v25 = v24 + v11;
      v26 = (v24 >> 31) + 0x7FFFFFFF;
      if (v16)
        v25 = v26;
      if (v21 < 1 || v25 < 1)
      {
        v22 = v5;
        v15 = v6;
      }
      else if (v8 < 1 || v7 <= 0)
      {
        v43 = __PAIR64__(v22, v15);
        v7 = v25;
        v8 = v21;
      }
      else
      {
        if ((int)v15 >= (int)v6)
          v27 = v6;
        else
          v27 = v15;
        if ((int)v22 >= (int)v5)
          v28 = v5;
        else
          v28 = v22;
        v16 = __OFADD__((_DWORD)v6, v8);
        v29 = v6 + v8;
        if (v16)
          v29 = (v6 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__((_DWORD)v15, v21);
        v30 = v15 + v21;
        v31 = (v15 >> 31) + 0x7FFFFFFF;
        if (v16)
          v30 = v31;
        if ((int)v29 <= v30)
          v29 = v30;
        v16 = __OFADD__((_DWORD)v5, v7);
        v32 = v5 + v7;
        if (v16)
          v32 = (v5 >> 31) + 0x7FFFFFFF;
        v16 = __OFADD__((_DWORD)v22, v25);
        v33 = v22 + v25;
        v34 = (v22 >> 31) + 0x7FFFFFFF;
        if (v16)
          v33 = v34;
        if (v32 > v33)
          v33 = v32;
        v43 = v27 | (v28 << 32);
        v16 = __OFSUB__(v29, (_DWORD)v27);
        v35 = v29 - v27;
        v8 = (v29 >> 31) + 0x7FFFFFFF;
        if (!v16)
          v8 = v35;
        v7 = v33 - v28;
        if (__OFSUB__(v33, (_DWORD)v28))
          v7 = (v33 >> 31) + 0x7FFFFFFF;
        v22 = v28;
        v15 = v27;
      }
      v9 = (WTF *)((char *)v9 + 16);
      v5 = v22;
      v6 = v15;
    }
    while (v9 != (WTF *)((char *)v41 + 16 * HIDWORD(v42)));
    v44 = __PAIR64__(v7, v8);
  }
  WebCore::RenderObject::repaintRectangle((uint64_t)this, (const WebCore::LayoutRect *)&v43);
  result = v41;
  if (v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    return (WTF *)WTF::fastFree(result, v36);
  }
  return result;
}

uint64_t WebCore::RenderElement::insertedIntoTree(uint64_t this, void *a2, uint64_t a3, WebCore::RenderLayer *a4, BOOL a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderElement *v22;
  int v23;

  v5 = this;
  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)
    && *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8))
  {
    if ((*(_BYTE *)(this + 21) & 0x80) == 0)
      goto LABEL_47;
  }
  else if ((*(_BYTE *)(this + 21) & 0x80) == 0)
  {
    goto LABEL_4;
  }
  if ((*(_BYTE *)(this + 45) & 1) == 0)
  {
    this = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (this)
    {
      if ((*(_WORD *)(this + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AD55CLL);
      }
      v17 = *(_DWORD *)(this + 24);
      *(_DWORD *)(this + 24) = v17 + 2;
      if ((*(_BYTE *)(this + 23) & 0x20) != 0)
      {
        if (v17)
        {
          *(_DWORD *)(this + 24) = v17;
        }
        else if ((*(_WORD *)(this + 30) & 0x400) == 0)
        {
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
      }
      else
      {
        v18 = *(_QWORD *)(v5 + 96) & 0xF80000000000;
        if (v17)
        {
          *(_DWORD *)(this + 24) = v17;
        }
        else if ((*(_WORD *)(this + 30) & 0x400) == 0)
        {
          this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
        }
        if (v18 != 0x480000000000)
          goto LABEL_47;
      }
LABEL_61:
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8) + 40) + 8) + 1944);
LABEL_62:
      v22 = *(WebCore::RenderElement **)(v19 + 144);
      if (v22)
      {
        ++*((_DWORD *)v22 + 2);
        this = WebCore::addLayers(v5, (const WebCore::RenderElement *)v5, v22, a4, a5);
        v23 = *((_DWORD *)v22 + 2);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x1963AD57CLL);
        }
        *((_DWORD *)v22 + 2) = v23 - 1;
      }
      goto LABEL_4;
    }
  }
  if ((*(_QWORD *)(v5 + 96) & 0xF80000000000) == 0x480000000000)
    goto LABEL_61;
LABEL_47:
  v19 = *(_QWORD *)(v5 + 32);
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  while ((*(_BYTE *)(v19 + 45) & 0x10) == 0)
  {
    v21 = *(_QWORD *)(v19 + 32);
    if (v21)
    {
      v19 = *(_QWORD *)(v21 + 8);
      if (v19)
        continue;
    }
    goto LABEL_4;
  }
LABEL_50:
  if ((*(_BYTE *)(v19 + 21) & 0x80) != 0)
    goto LABEL_62;
  while (1)
  {
    v20 = *(_QWORD *)(v19 + 32);
    if (!v20)
      break;
    v19 = *(_QWORD *)(v20 + 8);
    if (!v19)
      break;
    if ((*(_BYTE *)(v19 + 45) & 0x10) != 0)
      goto LABEL_50;
  }
LABEL_4:
  v6 = *(_QWORD *)(v5 + 32);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  if (((*(_BYTE *)(*(_QWORD *)(v6 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v6 + 120) & 0x30) != 0)
    && (*(_BYTE *)(*(_QWORD *)(v5 + 104) + 239) & 4) == 0
    && (*(_BYTE *)(v5 + 120) & 0x30) == 0
    && (*(_BYTE *)(v5 + 21) & 0x80) == 0)
  {
    this = WebCore::RenderElement::layerParent((WebCore::RenderElement *)v5, a2);
    if (this)
    {
      v13 = *(_DWORD *)(this + 8) + 1;
      *(_DWORD *)(this + 8) = v13;
      *(_QWORD *)(this + 24) |= 0x40000uLL;
      v14 = *(_QWORD *)(this + 40);
      if (v14)
      {
        do
        {
          v15 = *(_QWORD *)(v14 + 24);
          if ((v15 & 0x100000) != 0)
            break;
          *(_QWORD *)(v14 + 24) = v15 | 0x100000;
          v14 = *(_QWORD *)(v14 + 40);
        }
        while (v14);
        v13 = *(_DWORD *)(this + 8);
      }
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1963AD5C8);
      }
      *(_DWORD *)(this + 8) = v13 - 1;
    }
  }
  if ((*(_BYTE *)(v5 + 21) & 8) != 0)
    return this;
  v7 = *(_QWORD *)(v5 + 32);
  if (v7)
    v8 = *(unsigned __int8 **)(v7 + 8);
  else
    v8 = 0;
  v9 = v8[46];
  if (v9 != 83 && v9 != 103)
  {
    v11 = v8[52] & 7;
    if (v11 == 1)
    {
      if ((v8[53] & 8) != 0)
        goto LABEL_13;
    }
    else if (v11 == 4)
    {
      goto LABEL_13;
    }
    v12 = v9 - 71;
    if (v12 > 0xF || ((1 << v12) & 0xA001) == 0)
      return this;
  }
LABEL_13:
  if (v7)
  {
    v10 = *(_QWORD *)(v7 + 8);
    if ((*(_BYTE *)(v10 + 22) & 4) == 0)
      return this;
    ++*(_DWORD *)(v10 + 16);
  }
  else
  {
    if ((MEMORY[0x16] & 4) == 0)
      return this;
    v10 = 0;
  }
  this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 672))(v10, v5);
  v16 = *(_DWORD *)(v10 + 16);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1963AD59CLL);
  }
  *(_DWORD *)(v10 + 16) = v16 - 1;
  return this;
}

_DWORD *WebCore::RenderElement::willBeRemovedFromTree(_DWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  WebCore::RenderObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if (((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v4 + 120) & 0x30) != 0)
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0
    && (this[30] & 0x30) == 0
    && (*((_BYTE *)this + 21) & 0x80) == 0)
  {
    v20 = v3 ? *(WebCore::RenderObject **)(v3 + 8) : 0;
    this = (_DWORD *)WebCore::RenderObject::enclosingLayer(v20);
    if (this)
    {
      v21 = this[2] + 1;
      this[2] = v21;
      *((_QWORD *)this + 3) |= 0x40000uLL;
      v22 = *((_QWORD *)this + 5);
      if (v22)
      {
        do
        {
          v23 = *(_QWORD *)(v22 + 24);
          if ((v23 & 0x100000) != 0)
            break;
          *(_QWORD *)(v22 + 24) = v23 | 0x100000;
          v22 = *(_QWORD *)(v22 + 40);
        }
        while (v22);
        v21 = this[2];
      }
      if (!v21)
        goto LABEL_57;
      this[2] = v21 - 1;
    }
  }
  v5 = *(unsigned int *)(v2 + 64);
  if (v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)
    && *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8)
    || (*(_BYTE *)(v2 + 21) & 0x80) != 0)
  {
    this = WebCore::RenderElement::removeLayers((WebCore::RenderLayer **)v2, a2);
  }
  v6 = *(_QWORD *)(v2 + 32);
  if (!v6)
    return this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return this;
  *(_DWORD *)(v7 + 16) += 2;
  v8 = v7;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v8 + 46);
    if (v9 == 83 || v9 == 103)
      goto LABEL_14;
    v11 = *(_BYTE *)(v8 + 52) & 7;
    if (v11 == 1)
    {
      if ((*(_BYTE *)(v8 + 53) & 8) != 0)
        goto LABEL_14;
    }
    else if (v11 == 4)
    {
      goto LABEL_14;
    }
    v12 = v9 - 71;
    v13 = v12 > 0xF;
    v14 = (1 << v12) & 0xA001;
    if (v13 || v14 == 0)
      goto LABEL_27;
LABEL_14:
    v10 = *(_BYTE *)(v8 + 52) & 7;
    if ((v10 == 3 || v10 == 4) && (*(_BYTE *)(v8 + 53) & 0x20) != 0)
      break;
    v18 = *(_QWORD *)(v8 + 32);
    if (v18)
    {
      v18 = *(_QWORD *)(v18 + 8);
      if (v18)
        ++*(_DWORD *)(v18 + 16);
    }
    v19 = *(_DWORD *)(v8 + 16);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AD82CLL);
    }
    *(_DWORD *)(v8 + 16) = v19 - 1;
    v8 = v18;
    if (!v18)
      goto LABEL_29;
  }
  this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 216))(v8);
LABEL_27:
  v16 = *(_DWORD *)(v8 + 16);
  if (!v16)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1963AD7ECLL);
  }
  *(_DWORD *)(v8 + 16) = v16 - 1;
LABEL_29:
  v17 = *(_DWORD *)(v7 + 16);
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x1963AD80CLL);
  }
  *(_DWORD *)(v7 + 16) = v17 - 1;
  return this;
}

uint64_t WebCore::RenderElement::willBeDestroyed(void)::$_1::operator()<WebCore::RenderStyle>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = *(_QWORD *)(v4[2] + 8);
  if (v5)
  {
    do
    {
      v6 = *(_DWORD **)(v5 + 16);
      if (v6)
      {
        v7 = (_QWORD *)*v3;
        ++v6[2];
        result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v6 + 104))(v6, *v7);
        if (v6[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    v4 = *(_QWORD **)(a2 + 8);
  }
  v8 = *(_QWORD *)(v4[4] + 48);
  if (v8)
  {
    do
    {
      v9 = *(_DWORD **)(v8 + 16);
      if (v9)
      {
        v10 = (_QWORD *)*v3;
        ++v9[2];
        result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v9 + 104))(v9, *v10);
        if (v9[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8);
    v4 = *(_QWORD **)(a2 + 8);
  }
  v11 = *(_DWORD **)(*(_QWORD *)(v4[3] + 200) + 8);
  if (v11)
  {
    v12 = (_QWORD *)*v3;
    ++v11[2];
    result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v11 + 104))(v11, *v12);
    if (v11[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 216) + 8);
  if (v13)
  {
    v14 = (_QWORD *)*v3;
    ++v13[2];
    result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v13 + 104))(v13, *v14);
    if (v13[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 40) + 240);
  if (v15)
  {
    v16 = *(_DWORD **)(v15 + 16);
    if (v16)
    {
      v17 = (_QWORD *)*v3;
      ++v16[2];
      result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)v16 + 104))(v16, *v17);
      if (v16[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
  }
  return result;
}

uint64_t WebCore::RenderElement::layout(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;

  v1 = this;
  if (*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(this + 64) | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8);
    if (v2)
    {
      ++*(_DWORD *)(v2 + 16);
      do
      {
        if ((*(_BYTE *)(v2 + 20) & 0xF8) != 0)
        {
          if ((*(_BYTE *)(v2 + 45) & 2) != 0)
            goto LABEL_16;
          this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v2 + 688))(v2);
        }
        v3 = *(unsigned int *)(v2 + 47);
        v4 = v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32);
        if (v4)
        {
          v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
          if (v4)
            ++*(_DWORD *)(v4 + 16);
        }
        v5 = *(_DWORD *)(v2 + 16);
        if (!v5)
        {
LABEL_16:
          __break(0xC471u);
          JUMPOUT(0x1963ADB98);
        }
        *(_DWORD *)(v2 + 16) = v5 - 1;
        v2 = v4;
      }
      while (v4);
    }
  }
  v6 = *(_DWORD *)(v1 + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(v1 + 20) = v6;
  if (v1 && (*(_BYTE *)(v1 + 45) & 2) == 0)
  {
    *(_WORD *)(v1 + 69) &= ~1u;
    *(_WORD *)(v1 + 76) = *(_WORD *)(v1 + 76) & 0xF | (16
                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40) + 8)
                                                                                        + 1944)
                                                                            + 248)
                                                                + 472));
  }
  *(_DWORD *)(v1 + 20) = v6 & 0xFFDFFE07;
  return this;
}

uint64_t WebCore::RenderElement::repaintAfterLayoutIfNeeded(WebCore *this, void *a2, const WebCore::FillLayer *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  BOOL v10;
  char v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  signed int v18;
  signed int v19;
  int v20;
  int v21;
  WTF *v22;
  WebCore::LayoutRect *v23;
  void *v24;
  uint64_t result;
  int v26;
  int v27;
  BOOL v28;
  signed int v29;
  signed int v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  WTF *v41;
  void *v42;
  int v43;
  int v44;
  WTF *v45;
  uint64_t v46;
  WebCore::FillLayer *v47;
  uint64_t (*v48)();
  uint64_t (*v49)();
  const WebCore::FillLayer *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  signed int v61;
  unsigned int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  BOOL v79;
  int v80;
  int v81;
  WTF *v82;
  signed int v83;
  void *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  signed int v88;
  unsigned int v89;
  unsigned int v90;
  WebCore::RenderStyle *v91;
  WebCore::RenderStyle *v92;
  uint64_t v93;
  float v94;
  double v95;
  char *v96;
  WebCore::ShadowData *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  double v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  WTF *v109;
  int v110;
  int v111;
  float *v112;
  float v113;
  double v114;
  int v115;
  float *v116;
  float v117;
  double v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  signed int v132;
  WTF *v133;
  void *v134;
  int v135;
  WTF *v136;
  int v137;
  void *v138;
  WTF *v139;
  int v140;
  void *v141;
  WTF *v142;
  WTF *v143;
  signed int v144;
  void *v145;
  float v146;
  float v148;
  WTF *v150;
  WTF *v151;
  int v152;
  double v153;
  int v154;
  int v155;
  int v156;
  int v157;
  float *v158;
  float v159;
  double v160;
  int v161;
  float *v162;
  float v163;
  double v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  signed int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  WTF *v179;
  void *v180;
  int v181;
  float v182;
  float v184;
  float v186;
  BOOL hasImageInAnyLayer;
  WTF *v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  signed int v206;
  int v207;
  __int128 v208;
  __int128 v209;
  WTF *v210;
  signed int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  _QWORD v221[2];
  WTF *v222[3];

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                        + 8)
                                                                            + 1944)
                                                                + 24)
                                                    + 8)
                                        + 40)
                            + 8)
                + 3382))
    return 0;
  v9 = *a4;
  v208 = *a5;
  v209 = v9;
  if (*((_BYTE *)a4 + 32))
    v10 = *((_BYTE *)a5 + 32) == 0;
  else
    v10 = 1;
  v11 = v10;
  if (SDWORD2(v209) < 1 || *((uint64_t *)&v209 + 1) <= 0)
  {
    v27 = DWORD2(v208);
    result = 1;
    if (SDWORD2(v208) < 1)
      return result;
    v26 = HIDWORD(v208);
    if (SHIDWORD(v208) < 1)
      return result;
    v12 = 1;
    if (SDWORD2(v209) < 1 || (a3 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    if ((a3 & 1) != 0)
    {
LABEL_11:
      v12 = 1;
      goto LABEL_12;
    }
    v27 = DWORD2(v208);
    v26 = HIDWORD(v208);
  }
  v12 = 1;
  if (SHIDWORD(v209) >= 1 && v27 >= 1 && v26 >= 1)
  {
    v28 = __OFADD__((_DWORD)v208, v27);
    v29 = v208 + v27;
    if (v28)
      v29 = (v208 >> 31) + 0x7FFFFFFF;
    if ((int)v209 < v29)
    {
      v30 = v209 + DWORD2(v209);
      if (__OFADD__((_DWORD)v209, DWORD2(v209)))
        v30 = (v209 >> 31) + 0x7FFFFFFF;
      if ((int)v208 < v30)
      {
        v28 = __OFADD__(DWORD1(v208), v26);
        v31 = DWORD1(v208) + v26;
        if (v28)
          v31 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
        if (SDWORD1(v209) < v31)
        {
          v32 = DWORD1(v209) + HIDWORD(v209);
          if (__OFADD__(DWORD1(v209), HIDWORD(v209)))
            v32 = (DWORD1(v209) >> 31) + 0x7FFFFFFF;
          v12 = SDWORD1(v208) >= v32;
          v33 = SDWORD1(v208) >= v32 ? 1 : v11;
          if ((v33 & 1) == 0)
          {
            v34 = *((_QWORD *)a4 + 2);
            if (v34 != *((_QWORD *)a5 + 2))
              goto LABEL_11;
            v35 = (WTF *)*((_QWORD *)a4 + 3);
            v36 = (WTF *)*((_QWORD *)a5 + 3);
            if (v35 == v36)
            {
LABEL_61:
              v12 = 0;
              goto LABEL_12;
            }
            v222[0] = *((WTF **)a4 + 2);
            v222[1] = v35;
            v221[0] = v34;
            v221[1] = v36;
            v46 = *((_QWORD *)this + 11);
            v47 = *(WebCore::FillLayer **)(*(_QWORD *)(v46 + 32) + 48);
            if (*((_QWORD *)v47 + 1))
            {
              hasImageInAnyLayer = WebCore::FillLayer::hasImageInAnyLayer(v47);
              v46 = *((_QWORD *)this + 11);
              if (hasImageInAnyLayer)
                goto LABEL_111;
            }
            else
            {
              if (*((_QWORD *)v47 + 2))
                v48 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
              else
                v48 = 0;
              if (v48)
                goto LABEL_111;
            }
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 40) + 216) + 8))
              v49 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v49 = 0;
            if (!v49)
            {
LABEL_112:
              if (WebCore::RenderStyle::hasBorderRadius((WebCore *)((char *)this + 80)))
              {
                WebCore::RenderStyle::getRoundedBorderFor((WebCore *)((char *)this + 80), (const WebCore::LayoutRect *)v222, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v210);
                v52 = v213;
                v51 = v214;
                v54 = v215;
                v53 = v216;
                v203 = v218;
                v205 = v217;
                v199 = v220;
                v201 = v219;
                WebCore::RenderStyle::getRoundedBorderFor((WebCore *)((char *)this + 80), (const WebCore::LayoutRect *)v221, (const WebCore::LayoutSize *)1, 1, (uint64_t)&v210);
                if (v52 != v213
                  || v51 != v214
                  || v54 != v215
                  || v53 != v216
                  || v205 != v217
                  || v203 != v218
                  || v201 != v219
                  || v199 != v220)
                {
                  goto LABEL_11;
                }
              }
              if ((*((_BYTE *)this + 23) & 0x60) != 0)
              {
                if ((WebCore::mustRepaintFillLayers(this, *(const WebCore::RenderElement **)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + 8), v50) & 1) != 0)goto LABEL_11;
                v55 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
                if (*(float *)(v55 + 120) != 0.0 && (*(_BYTE *)(v55 + 124) & 0xF) != 0
                  || *(float *)(v55 + 144) != 0.0 && (*(_BYTE *)(v55 + 148) & 0xF) != 0
                  || *(float *)(v55 + 168) != 0.0 && (*(_BYTE *)(v55 + 172) & 0xF) != 0
                  || *(float *)(v55 + 192) != 0.0 && (*(_BYTE *)(v55 + 196) & 0xF) != 0)
                {
                  v56 = *(_DWORD **)(*(_QWORD *)(v55 + 200) + 8);
                  if (v56)
                  {
                    ++v56[2];
                    if ((*(unsigned int (**)(_DWORD *, WebCore *, float))(*(_QWORD *)v56 + 208))(v56, this, *(float *)(*((_QWORD *)this + 13) + 184)))
                    {
                      v57 = (*(uint64_t (**)(_DWORD *, WebCore *))(*(_QWORD *)v56 + 56))(v56, this);
                      v58 = v57;
                      if (v56[2] == 1)
                      {
                        (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
                        if (v58)
                          goto LABEL_11;
                      }
                      else
                      {
                        --v56[2];
                        if ((v57 & 1) != 0)
                          goto LABEL_11;
                      }
                    }
                    else if (v56[2] == 1)
                    {
                      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
                    }
                    else
                    {
                      --v56[2];
                    }
                  }
                }
              }
              goto LABEL_61;
            }
LABEL_111:
            if ((WebCore::mustRepaintFillLayers(this, *(const WebCore::RenderElement **)(*(_QWORD *)(v46 + 32) + 48), a3) & 1) != 0)goto LABEL_11;
            goto LABEL_112;
          }
        }
      }
    }
  }
LABEL_12:
  if (*(_QWORD *)a2 && *(_QWORD *)(*(_QWORD *)a2 + 8))
    goto LABEL_19;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_16;
  }
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
    goto LABEL_481;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v13;
  v188 = *(WTF **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v14;
  if (!v188)
    goto LABEL_481;
  if (*(_DWORD *)v188 != 1)
  {
    --*(_DWORD *)v188;
LABEL_481:
    ++*(_DWORD *)v14;
    goto LABEL_16;
  }
  WTF::fastFree(v188, a2);
  v14 = *(_QWORD *)(v13 + 8);
  if (v14)
    goto LABEL_481;
LABEL_16:
  v15 = *(WTF **)a2;
  *(_QWORD *)a2 = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, a2);
    else
      --*(_DWORD *)v15;
  }
LABEL_19:
  if (!v12)
  {
    if (*(_DWORD *)a4 == *(_DWORD *)a5
      && *((_DWORD *)a4 + 1) == *((_DWORD *)a5 + 1)
      && *((_DWORD *)a4 + 2) == *((_DWORD *)a5 + 2)
      && *((_DWORD *)a4 + 3) == *((_DWORD *)a5 + 3))
    {
      if (*((_BYTE *)a4 + 32) && *((_BYTE *)a5 + 32))
      {
        if (*((_DWORD *)a4 + 4) != *((_DWORD *)a5 + 4)
          || *((_DWORD *)a4 + 5) != *((_DWORD *)a5 + 5)
          || *((_DWORD *)a4 + 6) != *((_DWORD *)a5 + 6))
        {
          goto LABEL_136;
        }
        v43 = *((_DWORD *)a4 + 7);
        v44 = *((_DWORD *)a5 + 7);
      }
      else
      {
        v44 = *((unsigned __int8 *)a5 + 32) != 0;
        v43 = *((unsigned __int8 *)a4 + 32) != 0;
      }
      if (v43 == v44)
        return 0;
    }
LABEL_136:
    v59 = v208;
    v60 = v209;
    v61 = v208 - v209;
    if (__OFSUB__((_DWORD)v208, (_DWORD)v209))
      v61 = (v208 >> 31) + 0x7FFFFFFF;
    if (v61 >= 1)
    {
      v136 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v136;
        v60 = v209;
      }
      v222[0] = v136;
      v137 = HIDWORD(v209);
      v210 = (WTF *)__PAIR64__(DWORD1(v209), v60);
    }
    else
    {
      if ((v61 & 0x80000000) == 0)
        goto LABEL_140;
      v150 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v150;
        v59 = v208;
      }
      v222[0] = v150;
      if (v61 == 0x80000000)
        v61 = 0x7FFFFFFF;
      else
        v61 = -v61;
      v137 = HIDWORD(v208);
      v210 = (WTF *)__PAIR64__(DWORD1(v208), v59);
    }
    v211 = v61;
    v212 = v137;
    WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
    if (v222[0])
    {
      if (*(_DWORD *)v222[0] == 1)
        WTF::fastFree(v222[0], v138);
      else
        --*(_DWORD *)v222[0];
    }
LABEL_140:
    v62 = v208;
    v63 = v208 + DWORD2(v208);
    v64 = __OFADD__((_DWORD)v208, DWORD2(v208));
    v65 = v208 + DWORD2(v208);
    if (__OFADD__((_DWORD)v208, DWORD2(v208)))
      v65 = (v208 >> 31) + 0x7FFFFFFF;
    v66 = v209;
    v67 = v209 + DWORD2(v209);
    v68 = __OFADD__((_DWORD)v209, DWORD2(v209));
    v69 = v209 + DWORD2(v209);
    if (__OFADD__((_DWORD)v209, DWORD2(v209)))
      v69 = (v209 >> 31) + 0x7FFFFFFF;
    v28 = __OFSUB__(v65, v69);
    v70 = v65 - v69;
    if (v28)
      v70 = (v65 >> 31) + 0x7FFFFFFF;
    if (v70 >= 1)
    {
      v142 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v142;
        v66 = v209;
        v67 = v209 + DWORD2(v209);
        v68 = __OFADD__((_DWORD)v209, DWORD2(v209));
      }
      v222[0] = v142;
      if (v68)
        v67 = (v66 >> 31) + 0x7FFFFFFF;
      v210 = (WTF *)__PAIR64__(DWORD1(v208), v67);
      v211 = v70;
      v212 = HIDWORD(v208);
    }
    else
    {
      if ((v70 & 0x80000000) == 0)
        goto LABEL_154;
      v139 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v139;
        v62 = v208;
        v63 = v208 + DWORD2(v208);
        v64 = __OFADD__((_DWORD)v208, DWORD2(v208));
      }
      v222[0] = v139;
      if (v64)
        v63 = (v62 >> 31) + 0x7FFFFFFF;
      if (v70 == 0x80000000)
        v140 = 0x7FFFFFFF;
      else
        v140 = -v70;
      v210 = (WTF *)__PAIR64__(DWORD1(v209), v63);
      v211 = v140;
      v212 = HIDWORD(v209);
    }
    WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
    if (v222[0])
    {
      if (*(_DWORD *)v222[0] == 1)
        WTF::fastFree(v222[0], v141);
      else
        --*(_DWORD *)v222[0];
    }
LABEL_154:
    v71 = DWORD1(v208);
    v72 = DWORD1(v209);
    v73 = DWORD1(v208) - DWORD1(v209);
    if (__OFSUB__(DWORD1(v208), DWORD1(v209)))
      v73 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
    if (v73 >= 1)
    {
      v151 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v151;
        v72 = DWORD1(v209);
      }
      v222[0] = v151;
      v144 = DWORD2(v209);
      v210 = (WTF *)__PAIR64__(v72, v209);
    }
    else
    {
      if ((v73 & 0x80000000) == 0)
        goto LABEL_158;
      v143 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v143;
        v71 = DWORD1(v208);
      }
      v222[0] = v143;
      v144 = DWORD2(v208);
      if (v73 == 0x80000000)
        v73 = 0x7FFFFFFF;
      else
        v73 = -v73;
      v210 = (WTF *)__PAIR64__(v71, v208);
    }
    v211 = v144;
    v212 = v73;
    WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
    if (v222[0])
    {
      if (*(_DWORD *)v222[0] == 1)
        WTF::fastFree(v222[0], v145);
      else
        --*(_DWORD *)v222[0];
    }
LABEL_158:
    v74 = DWORD1(v208);
    v17 = DWORD1(v208) + HIDWORD(v208);
    v75 = __OFADD__(DWORD1(v208), HIDWORD(v208));
    v76 = DWORD1(v208) + HIDWORD(v208);
    if (__OFADD__(DWORD1(v208), HIDWORD(v208)))
      v76 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
    v77 = DWORD1(v209);
    v78 = DWORD1(v209) + HIDWORD(v209);
    v79 = __OFADD__(DWORD1(v209), HIDWORD(v209));
    v80 = DWORD1(v209) + HIDWORD(v209);
    if (__OFADD__(DWORD1(v209), HIDWORD(v209)))
      v80 = (DWORD1(v209) >> 31) + 0x7FFFFFFF;
    v28 = __OFSUB__(v76, v80);
    v81 = v76 - v80;
    if (v28)
      v81 = (v76 >> 31) + 0x7FFFFFFF;
    if (v81 < 1)
    {
      if ((v81 & 0x80000000) == 0)
        goto LABEL_181;
      v109 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v109;
        v74 = DWORD1(v208);
        v17 = DWORD1(v208) + HIDWORD(v208);
        v75 = __OFADD__(DWORD1(v208), HIDWORD(v208));
      }
      v222[0] = v109;
      if (v75)
        v17 = (v74 >> 31) + 0x7FFFFFFF;
      v83 = DWORD2(v209);
      if (v81 == 0x80000000)
        v81 = 0x7FFFFFFF;
      else
        v81 = -v81;
      v210 = (WTF *)__PAIR64__(v17, v209);
    }
    else
    {
      v82 = *(WTF **)a2;
      if (*(_QWORD *)a2)
      {
        ++*(_DWORD *)v82;
        v77 = DWORD1(v209);
        v78 = DWORD1(v209) + HIDWORD(v209);
        v79 = __OFADD__(DWORD1(v209), HIDWORD(v209));
      }
      v222[0] = v82;
      if (v79)
        v78 = (v77 >> 31) + 0x7FFFFFFF;
      v83 = DWORD2(v208);
      v210 = (WTF *)__PAIR64__(v78, v208);
    }
    v211 = v83;
    v212 = v81;
    WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
    if (v222[0])
    {
      if (*(_DWORD *)v222[0] == 1)
        WTF::fastFree(v222[0], v84);
      else
        --*(_DWORD *)v222[0];
    }
LABEL_181:
    if ((v11 & 1) != 0)
      return 0;
    v16 = *((unsigned __int8 *)a4 + 32);
    if (!*((_BYTE *)a4 + 32) || (v16 = *((unsigned __int8 *)a5 + 32), !*((_BYTE *)a5 + 32)))
    {
      __break(1u);
LABEL_475:
      v37 = (v17 >> 31) + 0x7FFFFFFF;
LABEL_64:
      v38 = v16 + DWORD2(v208);
      if (__OFADD__(v16, DWORD2(v208)))
        v38 = (v16 >> 31) + 0x7FFFFFFF;
      if (v37 >= v38 && SDWORD1(v209) <= SDWORD1(v208))
      {
        v39 = DWORD1(v209) + HIDWORD(v209);
        if (__OFADD__(DWORD1(v209), HIDWORD(v209)))
          v39 = (DWORD1(v209) >> 31) + 0x7FFFFFFF;
        v40 = DWORD1(v208) + HIDWORD(v208);
        if (__OFADD__(DWORD1(v208), HIDWORD(v208)))
          v40 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
        if (v39 >= v40)
        {
          v45 = *(WTF **)a2;
          if (*(_QWORD *)a2)
            ++*(_DWORD *)v45;
          v210 = v45;
          v23 = (WebCore::LayoutRect *)&v209;
          goto LABEL_35;
        }
      }
      goto LABEL_73;
    }
    v86 = *((_DWORD *)a5 + 4);
    v85 = *((_DWORD *)a5 + 5);
    if (*((_DWORD *)a4 + 4) == v86 && *((_DWORD *)a4 + 5) == v85)
    {
      v88 = *((_DWORD *)a4 + 6);
      v87 = *((_DWORD *)a4 + 7);
      v90 = *((_DWORD *)a5 + 6);
      v89 = *((_DWORD *)a5 + 7);
      if (v88 == v90 && v87 == v89)
        return 0;
    }
    else
    {
      v88 = *((_DWORD *)a4 + 6);
      v87 = *((_DWORD *)a4 + 7);
      v90 = *((_DWORD *)a5 + 6);
      v89 = *((_DWORD *)a5 + 7);
    }
    v200 = *((_DWORD *)a4 + 5);
    v91 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 424))(this);
    v92 = v91;
    v93 = *(_QWORD *)(*((_QWORD *)v91 + 1) + 16);
    v94 = 0.0;
    v206 = v90;
    v202 = v85;
    if ((*(_BYTE *)(v93 + 52) & 0x1F) != 0x10 && (*(_BYTE *)(v93 + 52) & 0xF) != 0)
    {
      v94 = *(float *)(v93 + 48);
      if ((*(_BYTE *)(v93 + 52) & 0x10) != 0 && v94 < 3.0)
        v94 = 3.0;
    }
    v95 = fmaxf(v94 + WebCore::RenderStyle::outlineOffset(v91), 0.0) * 64.0;
    if (v95 >= 2147483650.0 || v95 <= -2147483650.0)
    {
      if (v95 >= 2147483650.0)
      {
        v189 = 0x7FFFFFFF;
      }
      else if (v95 <= -2147483650.0)
      {
        v189 = 0x80000000;
      }
      else
      {
        v189 = (int)v95;
      }
      v204 = v189;
      v96 = (char *)this + 88;
      v97 = *(WebCore::ShadowData **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 88);
      if (!v97)
      {
        v98 = 0;
LABEL_193:
        v99 = v90 - v88;
        if (__OFSUB__(v90, v88))
          v99 = (v90 >> 31) + 0x7FFFFFFF;
        if (v99 >= 0)
          v100 = v99;
        else
          v100 = -v99;
        v101 = v89 - v87;
        if (__OFSUB__(v89, v87))
          v101 = (v89 >> 31) + 0x7FFFFFFF;
        if (v101 >= 0)
          v102 = v101;
        else
          v102 = -v101;
        v198 = v102;
        if (!v99)
        {
LABEL_204:
          if (!v101)
            return 0;
          LODWORD(v221[0]) = 0;
          v207 = 0;
          WebCore::RenderStyle::getShadowVerticalExtent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 32) + 88), (int *)v221, &v207);
          v103 = WebCore::RenderStyle::outlineOffset(v92) * 64.0;
          if (v103 >= 2147483650.0)
            goto LABEL_208;
          if (v103 > -2147483650.0)
          {
            v104 = (int)v103;
            if (((int)v103 & 0x80000000) == 0)
            {
LABEL_208:
              v105 = 0;
LABEL_209:
              if ((*((_BYTE *)this + 45) & 4) == 0)
              {
                v106 = 0;
                v107 = v200;
                v108 = v202;
LABEL_239:
                v119 = v221[0];
                if (SLODWORD(v221[0]) >= v98)
                  v119 = v98;
                if (v119 < 0)
                {
                  if (v119 == 0x80000000)
                    v120 = 0x7FFFFFFF;
                  else
                    v120 = -v119;
                  v135 = HIDWORD(v208);
                  if (SHIDWORD(v209) < SHIDWORD(v208))
                    v135 = HIDWORD(v209);
                  if (v135 < v120)
                    v120 = v135;
                }
                else
                {
                  v120 = 0;
                }
                v28 = __OFADD__(v106, v120);
                v121 = v106 + v120;
                if (v28)
                  v121 = (v106 >> 31) + 0x7FFFFFFF;
                if (v105 <= v121)
                  v122 = v121;
                else
                  v122 = v105;
                v123 = v207;
                if (v204 > v207)
                  v123 = v204;
                v28 = __OFADD__(v122, v123);
                v124 = v122 + v123;
                if (v28)
                  v124 = 0x7FFFFFFF;
                v125 = v108 + v89;
                if (__OFADD__(v108, v89))
                  v125 = (v108 >> 31) + 0x7FFFFFFF;
                v126 = v107 + v87;
                if (__OFADD__(v107, v87))
                  v126 = (v107 >> 31) + 0x7FFFFFFF;
                if (v126 >= v125)
                  v126 = v125;
                v127 = v126 - v124;
                if (__OFSUB__(v126, v124))
                  v127 = (v126 >> 31) + 0x7FFFFFFF;
                v128 = DWORD1(v208) + HIDWORD(v208);
                if (__OFADD__(DWORD1(v208), HIDWORD(v208)))
                  v128 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
                v129 = DWORD1(v209) + HIDWORD(v209);
                if (__OFADD__(DWORD1(v209), HIDWORD(v209)))
                  v129 = (DWORD1(v209) >> 31) + 0x7FFFFFFF;
                if (v129 >= v128)
                  v129 = v128;
                v130 = v129 - v127;
                if (__OFSUB__(v129, v127))
                  v130 = (v129 >> 31) + 0x7FFFFFFF;
                if (v130 >= 1)
                {
                  v28 = __OFADD__(v198, v124);
                  v131 = v198 + v124;
                  if (v28)
                    v131 = 0x7FFFFFFF;
                  if (v130 < v131)
                    v131 = v130;
                  if (v206 <= v88)
                    v132 = v88;
                  else
                    v132 = v206;
                  v210 = (WTF *)__PAIR64__(v127, v86);
                  v211 = v132;
                  v212 = v131;
                  v133 = *(WTF **)a2;
                  if (*(_QWORD *)a2)
                    ++*(_DWORD *)v133;
                  v222[0] = v133;
                  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
                  if (v222[0])
                  {
                    if (*(_DWORD *)v222[0] == 1)
                      WTF::fastFree(v222[0], v134);
                    else
                      --*(_DWORD *)v222[0];
                  }
                }
                return 0;
              }
              v194 = v88;
              v196 = v86;
              v110 = *((_DWORD *)this + 41);
              v111 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1008))(this);
              v112 = *(float **)(*((_QWORD *)this + 11) + 24);
              if (*((_BYTE *)v112 + 252) != 4)
              {
                v115 = 0;
                switch(*((_BYTE *)v112 + 252))
                {
                  case 0:
                  case 1:
                  case 9:
                    v115 = v110;
                    goto LABEL_228;
                  case 3:
                    v146 = v112[62];
                    if (!*((_BYTE *)v112 + 254))
                      v146 = (float)SLODWORD(v146);
                    v114 = (float)((float)((float)((float)v110 * 0.015625) * v146) / 100.0) * 64.0;
                    if (v114 < 2147483650.0 && v114 > -2147483650.0)
                      goto LABEL_227;
                    if (v114 >= 2147483650.0)
                      goto LABEL_510;
                    goto LABEL_499;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v112 + 62), (float)v110 * 0.015625);
                    goto LABEL_225;
                  default:
                    goto LABEL_228;
                }
              }
              v113 = v112[62];
              if (!*((_BYTE *)v112 + 254))
                v113 = (float)SLODWORD(v113);
LABEL_225:
              v114 = v113 * 64.0;
              if (v114 < 2147483650.0 && v114 > -2147483650.0)
                goto LABEL_227;
              if (v114 >= 2147483650.0)
              {
LABEL_510:
                v115 = 0x7FFFFFFF;
                goto LABEL_228;
              }
LABEL_499:
              if (v114 > -2147483650.0)
LABEL_227:
                v115 = (int)v114;
              else
                v115 = 0x80000000;
LABEL_228:
              v116 = *(float **)(*(_QWORD *)v96 + 24);
              if (*((_BYTE *)v116 + 268) != 4)
              {
                v106 = 0;
                v108 = v202;
                switch(*((_BYTE *)v116 + 268))
                {
                  case 0:
                  case 1:
                  case 9:
                    v106 = v110;
                    goto LABEL_234;
                  case 3:
                    v148 = v116[66];
                    if (!*((_BYTE *)v116 + 270))
                      v148 = (float)SLODWORD(v148);
                    v118 = (float)((float)((float)((float)v110 * 0.015625) * v148) / 100.0) * 64.0;
                    if (v118 < 2147483650.0 && v118 > -2147483650.0)
                      goto LABEL_233;
                    if (v118 >= 2147483650.0)
                      goto LABEL_509;
                    goto LABEL_496;
                  case 0xB:
                    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v116 + 66), (float)v110 * 0.015625);
                    v118 = v186 * 64.0;
                    if (v118 < 2147483650.0 && v118 > -2147483650.0)
                      goto LABEL_469;
                    goto LABEL_495;
                  default:
                    goto LABEL_234;
                }
              }
              v117 = v116[66];
              if (!*((_BYTE *)v116 + 270))
                v117 = (float)SLODWORD(v117);
              v118 = v117 * 64.0;
              v108 = v202;
              if (v118 >= 2147483650.0 || v118 <= -2147483650.0)
              {
LABEL_495:
                if (v118 >= 2147483650.0)
                {
LABEL_509:
                  v106 = 0x7FFFFFFF;
                }
                else
                {
LABEL_496:
                  if (v118 > -2147483650.0)
LABEL_469:
                    v106 = (int)v118;
                  else
                    v106 = 0x80000000;
                }
                v108 = v202;
              }
              else
              {
LABEL_233:
                v106 = (int)v118;
              }
LABEL_234:
              if (v115 > v106)
                v106 = v115;
              if (v111 > v106)
                v106 = v111;
              v88 = v194;
              v86 = v196;
              v107 = v200;
              goto LABEL_239;
            }
            if (v104 != 0x80000000)
            {
              v105 = -v104;
              goto LABEL_209;
            }
          }
          v105 = 0x7FFFFFFF;
          goto LABEL_209;
        }
        v193 = HIDWORD(v97);
        v192 = v100;
        LODWORD(v221[0]) = 0;
        v207 = 0;
        WebCore::RenderStyle::getShadowHorizontalExtent(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 32) + 88), (int *)v221, &v207);
        v153 = WebCore::RenderStyle::outlineOffset(v92) * 64.0;
        if (v153 >= 2147483650.0)
          goto LABEL_363;
        if (v153 > -2147483650.0)
        {
          v154 = (int)v153;
          if (((int)v153 & 0x80000000) == 0)
          {
LABEL_363:
            v155 = 0;
LABEL_364:
            if ((*((_BYTE *)this + 45) & 4) == 0)
            {
              v156 = 0;
LABEL_383:
              v165 = v221[0];
              if (SLODWORD(v221[0]) >= v193)
                v165 = v193;
              if (v165 < 0)
              {
                if (v165 == 0x80000000)
                  v166 = 0x7FFFFFFF;
                else
                  v166 = -v165;
                v181 = DWORD2(v208);
                if (SDWORD2(v209) < SDWORD2(v208))
                  v181 = DWORD2(v209);
                if (v181 < v166)
                  v166 = v181;
              }
              else
              {
                v166 = 0;
              }
              v28 = __OFADD__(v156, v166);
              v167 = v156 + v166;
              if (v28)
                v167 = (v156 >> 31) + 0x7FFFFFFF;
              if (v155 <= v167)
                v168 = v167;
              else
                v168 = v155;
              v169 = v207;
              if (v204 > v207)
                v169 = v204;
              v28 = __OFADD__(v168, v169);
              v170 = v168 + v169;
              if (v28)
                v170 = 0x7FFFFFFF;
              v171 = v206;
              if (v88 < v206)
                v171 = v88;
              v172 = v86 + v171;
              if (__OFADD__(v86, v171))
                v172 = (v86 >> 31) + 0x7FFFFFFF;
              v173 = v172 - v170;
              if (__OFSUB__(v172, v170))
                v173 = (v172 >> 31) + 0x7FFFFFFF;
              v174 = v208 + DWORD2(v208);
              if (__OFADD__((_DWORD)v208, DWORD2(v208)))
                v174 = (v208 >> 31) + 0x7FFFFFFF;
              v175 = v209 + DWORD2(v209);
              if (__OFADD__((_DWORD)v209, DWORD2(v209)))
                v175 = (v209 >> 31) + 0x7FFFFFFF;
              if ((int)v175 >= v174)
                v175 = v174;
              v176 = v175 - v173;
              if (__OFSUB__(v175, v173))
                v176 = (v175 >> 31) + 0x7FFFFFFF;
              if (v176 >= 1)
              {
                v28 = __OFADD__(v192, v170);
                v177 = v192 + v170;
                if (v28)
                  v177 = 0x7FFFFFFF;
                if (v176 < v177)
                  v177 = v176;
                if ((int)v89 <= v87)
                  v178 = v87;
                else
                  v178 = v89;
                v210 = (WTF *)__PAIR64__(v202, v173);
                v211 = v177;
                v212 = v178;
                v179 = *(WTF **)a2;
                if (*(_QWORD *)a2)
                  ++*(_DWORD *)v179;
                v222[0] = v179;
                WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)v222, (WebCore::LayoutRect *)&v210, 1);
                if (v222[0])
                {
                  if (*(_DWORD *)v222[0] == 1)
                    WTF::fastFree(v222[0], v180);
                  else
                    --*(_DWORD *)v222[0];
                }
              }
              goto LABEL_204;
            }
            v191 = v155;
            v195 = v88;
            v197 = v86;
            v157 = *((_DWORD *)this + 40);
            v190 = (*(uint64_t (**)(WebCore *))(*(_QWORD *)this + 1024))(this);
            v158 = *(float **)(*((_QWORD *)this + 11) + 24);
            if (*((_BYTE *)v158 + 228) != 4)
            {
              v161 = 0;
              switch(*((_BYTE *)v158 + 228))
              {
                case 0:
                case 1:
                case 9:
                  v161 = v157;
                  goto LABEL_372;
                case 3:
                  v182 = v158[56];
                  if (!*((_BYTE *)v158 + 230))
                    v182 = (float)SLODWORD(v182);
                  v160 = (float)((float)((float)((float)v157 * 0.015625) * v182) / 100.0) * 64.0;
                  if (v160 < 2147483650.0 && v160 > -2147483650.0)
                    goto LABEL_371;
                  if (v160 >= 2147483650.0)
                    goto LABEL_511;
                  goto LABEL_503;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v158 + 56), (float)v157 * 0.015625);
                  goto LABEL_369;
                default:
                  goto LABEL_372;
              }
            }
            v159 = v158[56];
            if (!*((_BYTE *)v158 + 230))
              v159 = (float)SLODWORD(v159);
LABEL_369:
            v160 = v159 * 64.0;
            if (v160 < 2147483650.0 && v160 > -2147483650.0)
              goto LABEL_371;
            if (v160 >= 2147483650.0)
            {
LABEL_511:
              v161 = 0x7FFFFFFF;
              goto LABEL_372;
            }
LABEL_503:
            if (v160 > -2147483650.0)
LABEL_371:
              v161 = (int)v160;
            else
              v161 = 0x80000000;
LABEL_372:
            v162 = *(float **)(*(_QWORD *)v96 + 24);
            if (*((_BYTE *)v162 + 260) != 4)
            {
              v156 = 0;
              switch(*((_BYTE *)v162 + 260))
              {
                case 0:
                case 1:
                case 9:
                  v156 = v157;
                  goto LABEL_378;
                case 3:
                  v184 = v162[64];
                  if (!*((_BYTE *)v162 + 262))
                    v184 = (float)SLODWORD(v184);
                  v164 = (float)((float)((float)((float)v157 * 0.015625) * v184) / 100.0) * 64.0;
                  if (v164 < 2147483650.0 && v164 > -2147483650.0)
                    goto LABEL_377;
                  if (v164 >= 2147483650.0)
                    goto LABEL_512;
                  goto LABEL_506;
                case 0xB:
                  WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v162 + 64), (float)v157 * 0.015625);
                  goto LABEL_375;
                default:
                  goto LABEL_378;
              }
            }
            v163 = v162[64];
            if (!*((_BYTE *)v162 + 262))
              v163 = (float)SLODWORD(v163);
LABEL_375:
            v164 = v163 * 64.0;
            if (v164 < 2147483650.0 && v164 > -2147483650.0)
              goto LABEL_377;
            if (v164 >= 2147483650.0)
            {
LABEL_512:
              v156 = 0x7FFFFFFF;
              goto LABEL_378;
            }
LABEL_506:
            if (v164 > -2147483650.0)
LABEL_377:
              v156 = (int)v164;
            else
              v156 = 0x80000000;
LABEL_378:
            if (v161 > v156)
              v156 = v161;
            v155 = v191;
            if (v190 > v156)
              v156 = v190;
            v88 = v195;
            v86 = v197;
            goto LABEL_383;
          }
          if (v154 != 0x80000000)
          {
            v155 = -v154;
            goto LABEL_364;
          }
        }
        v155 = 0x7FFFFFFF;
        goto LABEL_364;
      }
    }
    else
    {
      v204 = (int)v95;
      v96 = (char *)this + 88;
      v97 = *(WebCore::ShadowData **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 88);
      if (!v97)
      {
        v98 = 0;
        goto LABEL_193;
      }
    }
    v97 = (WebCore::ShadowData *)WebCore::ShadowData::shadowInsetExtent(v97);
    v98 = v152;
    goto LABEL_193;
  }
  v16 = v208;
  v17 = v209;
  if ((int)v208 <= (int)v209)
  {
    v18 = v208 + DWORD2(v208);
    if (__OFADD__((_DWORD)v208, DWORD2(v208)))
      v18 = (v208 >> 31) + 0x7FFFFFFF;
    v19 = v209 + DWORD2(v209);
    if (__OFADD__((_DWORD)v209, DWORD2(v209)))
      v19 = (v209 >> 31) + 0x7FFFFFFF;
    if (v18 >= v19 && SDWORD1(v208) <= SDWORD1(v209))
    {
      v20 = DWORD1(v208) + HIDWORD(v208);
      if (__OFADD__(DWORD1(v208), HIDWORD(v208)))
        v20 = (DWORD1(v208) >> 31) + 0x7FFFFFFF;
      v21 = DWORD1(v209) + HIDWORD(v209);
      if (__OFADD__(DWORD1(v209), HIDWORD(v209)))
        v21 = (DWORD1(v209) >> 31) + 0x7FFFFFFF;
      if (v20 >= v21)
        goto LABEL_32;
    }
  }
  if ((int)v209 <= (int)v208)
  {
    v37 = v209 + DWORD2(v209);
    if (!__OFADD__((_DWORD)v209, DWORD2(v209)))
      goto LABEL_64;
    goto LABEL_475;
  }
LABEL_73:
  v41 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    ++*(_DWORD *)v41;
  v210 = v41;
  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v210, (WebCore::LayoutRect *)&v209, 1);
  if (v210)
  {
    if (*(_DWORD *)v210 == 1)
      WTF::fastFree(v210, v42);
    else
      --*(_DWORD *)v210;
  }
LABEL_32:
  v22 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    ++*(_DWORD *)v22;
  v210 = v22;
  v23 = (WebCore::LayoutRect *)&v208;
LABEL_35:
  WebCore::RenderObject::repaintUsingContainer((uint64_t)this, (uint64_t *)&v210, v23, 1);
  if (v210)
  {
    if (*(_DWORD *)v210 == 1)
      WTF::fastFree(v210, v24);
    else
      --*(_DWORD *)v210;
  }
  return 1;
}

uint64_t WebCore::RenderElement::borderImageIsLoadedAndCanBeRendered(WebCore::RenderElement *this)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200) + 8);
  if (!v1)
    return 0;
  ++v1[2];
  if ((*(unsigned int (**)(_DWORD *, WebCore::RenderElement *, float))(*(_QWORD *)v1 + 208))(v1, this, *(float *)(*((_QWORD *)this + 13) + 184)))
  {
    v3 = (*(uint64_t (**)(_DWORD *, WebCore::RenderElement *))(*(_QWORD *)v1 + 56))(v1, this);
  }
  else
  {
    v3 = 0;
  }
  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  else
    --v1[2];
  return v3;
}

BOOL WebCore::RenderElement::isInsideEntirelyHiddenLayer(WebCore::RenderElement *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  unsigned int v8;
  int v9;
  WebCore::RenderElement *v11;
  uint64_t v12;

  v1 = *((unsigned __int8 *)this + 46);
  if (v1 != 83)
  {
    if ((*((_BYTE *)this + 52) & 7) == 4)
    {
      if (v1 != 85 && (*((_BYTE *)this + 53) & 1) != 0)
      {
        v8 = v1 - 67;
        v3 = v8 > 0x13;
        v9 = (1 << v8) & 0xA0011;
        if (v3 || v9 == 0)
          goto LABEL_8;
      }
    }
    else
    {
      v2 = v1 - 67;
      v3 = v2 > 0x13;
      v4 = (1 << v2) & 0xE0011;
      if (v3 || v4 == 0)
        goto LABEL_8;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v11 = this;
    if ((*((_BYTE *)this + 45) & 0x10) == 0)
    {
      v11 = this;
      do
        v11 = *(WebCore::RenderElement **)(*((_QWORD *)v11 + 4) + 8);
      while ((*((_BYTE *)v11 + 45) & 0x10) == 0);
    }
    while ((*((_BYTE *)v11 + 21) & 0x80) == 0)
    {
      do
        v11 = *(WebCore::RenderElement **)(*((_QWORD *)v11 + 4) + 8);
      while ((*((_BYTE *)v11 + 45) & 0x10) == 0);
    }
    v12 = *(_QWORD *)(*((_QWORD *)v11 + 18) + 224);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 8))
        return 1;
    }
  }
LABEL_8:
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0 && (*((_BYTE *)this + 120) & 0x30) == 0)
    return 0;
  while ((*((_BYTE *)this + 45) & 0x10) == 0)
    this = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
  while ((*((_BYTE *)this + 21) & 0x80) == 0)
  {
    do
      this = *(WebCore::RenderElement **)(*((_QWORD *)this + 4) + 8);
    while ((*((_BYTE *)this + 45) & 0x10) == 0);
  }
  return (*(_BYTE *)(*((_QWORD *)this + 18) + 26) & 8) == 0;
}

unsigned __int16 *WebCore::RenderElement::setVisibleInViewportState(unsigned __int16 *result, int a2)
{
  unsigned int v2;

  v2 = result[38];
  if (((v2 >> 1) & 3) != a2)
  {
    result[38] = v2 & 0xFFF9 | (2 * (a2 & 3));
    return (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 696))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::RenderElement::notifyFinished(uint64_t a1, WebCore::CachedResource *a2)
{
  WebCore::Document *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  void *v6;
  WTF *v7;
  void *v8;

  v3 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8);
  v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 90);
  if (!v4)
    v4 = (WTF::StringImpl *)WebCore::Document::ensureCachedResourceLoader(v3, a2);
  ++*(_DWORD *)v4;
  result = WebCore::CachedResourceLoader::notifyFinished(v4, a2);
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v4, v6);
    return (WTF::StringImpl *)WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

uint64_t WebCore::RenderElement::didRemoveCachedImageClient(uint64_t this, WebCore::CachedImage *a2)
{
  WebCore::RenderView *v2;
  int v3;

  if ((*(_WORD *)(this + 69) & 4) != 0)
  {
    v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                 + 1944);
    ++*((_DWORD *)v2 + 4);
    this = (uint64_t)WebCore::RenderView::removeRendererWithPausedImageAnimations(v2, (WebCore::RenderElement *)this, a2);
    v3 = *((_DWORD *)v2 + 4);
    if (v3)
    {
      *((_DWORD *)v2 + 4) = v3 - 1;
    }
    else
    {
      this = 286;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::RenderElement::scheduleRenderingUpdateForImage(uint64_t this, WebCore::CachedImage *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF *v6;
  void *v7;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_DWORD **)(v4 + 8);
        if (v5)
        {
          ++*v5;
          this = WebCore::Page::scheduleRenderingUpdate((uint64_t)v5, 1024);
          if (*v5 == 1)
          {
            WebCore::Page::~Page((uint64_t)v5);
            return WTF::fastFree(v6, v7);
          }
          else
          {
            --*v5;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderElement::getCachedPseudoStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::RenderStyle *v11;
  uint64_t v12;
  void *v13;
  WebCore::RenderStyle *v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;
  WebCore::RenderStyle *v19;

  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= 0x10u && ((*(unsigned __int16 *)(a1 + 102) >> (v6 - 1)) & 1) == 0)
    return 0;
  result = WebCore::RenderStyle::getCachedPseudoStyle(a1 + 80, a2);
  if (!result)
  {
    v15 = v6;
    v8 = *(WTF::StringImpl **)(a2 + 8);
    if (v8)
      *(_DWORD *)v8 += 2;
    v16 = v8;
    v17 = 0;
    v18 = 0;
    WebCore::RenderElement::getUncachedPseudoStyle(a1, &v15, a3, 0, &v19);
    v10 = v16;
    v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v19;
    if (v19)
    {
      v19 = 0;
      v14 = v11;
      v12 = WebCore::RenderStyle::addCachedPseudoStyle(a1 + 80, (uint64_t *)&v14);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v14, v13);
    }
    else
    {
      v12 = 0;
    }
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v19, v9);
    return v12;
  }
  return result;
}

uint64_t WebCore::RenderElement::spellingErrorPseudoStyle(WebCore::RenderElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t CachedPseudoStyle;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  uint64_t v12;
  WebCore::RenderStyle *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::RenderStyle *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderStyle *v26;
  WTF::StringImpl *v27;
  char v28;
  char v29;
  WebCore::Style *v30;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v3 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v4 += 2;
  if ((*((_BYTE *)this + 103) & 4) == 0)
    goto LABEL_5;
  v17 = *((_QWORD *)this + 16);
  if (v17 && (v21 = *(unsigned int *)(v17 + 12), (_DWORD)v21))
  {
    v22 = *(uint64_t **)v17;
    v23 = 8 * v21;
    while (1)
    {
      CachedPseudoStyle = *v22;
      if ((*(_QWORD *)(*v22 + 16) & 0xF80000000000) == 0x580000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(CachedPseudoStyle + 8) + 40) + 592) == v4)
      {
        break;
      }
      ++v22;
      v23 -= 8;
      if (!v23)
        goto LABEL_44;
    }
  }
  else
  {
LABEL_44:
    LODWORD(v26) = 11;
    if (v4)
      *(_DWORD *)v4 += 2;
    v27 = v4;
    v28 = 0;
    v29 = 0;
    WebCore::RenderElement::getUncachedPseudoStyle((uint64_t)this, (int *)&v26, 0, 0, &v30);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v30)
    {
LABEL_5:
      CachedPseudoStyle = 0;
      goto LABEL_6;
    }
    v26 = v30;
    CachedPseudoStyle = WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)this + 80, (uint64_t *)&v26);
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      WebCore::RenderStyle::~RenderStyle(v19, a2);
      if (*(_DWORD *)v20)
      {
        *((_OWORD *)v20 + 2) = 0u;
        *((_OWORD *)v20 + 3) = 0u;
        *(_OWORD *)v20 = 0u;
        *((_OWORD *)v20 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v20, a2);
      }
    }
  }
LABEL_6:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (!CachedPseudoStyle)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AF9FCLL);
    }
    v8 = **(_QWORD **)(v7 + 40);
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (!v9)
    {
      *(_DWORD *)(v8 + 24) += 2;
      if (!*(_BYTE *)(v8 + 193)
        && (v12 = *(_QWORD *)(v8 + 200)) != 0
        && (v13 = *(WebCore::RenderStyle **)(v12 + 8)) != 0)
      {
        *((_DWORD *)v13 + 6) += 2;
        v26 = v13;
        while ((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v14 = *(_QWORD *)((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
          if (!v14 || (*(_QWORD *)(v14 + 16) & 0x1FLL) != 0x12)
            break;
          v24 = *((_QWORD *)v13 + 4);
          if (v24)
          {
            if ((*(_WORD *)(v24 + 28) & 8) != 0)
              v25 = *((_QWORD *)v13 + 4);
            else
              v25 = 0;
          }
          else
          {
            v25 = 0;
          }
          WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v26, v25);
          v13 = v26;
          if (!v26)
            goto LABEL_17;
        }
        v4 = (WTF::StringImpl *)(*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL);
        if (v4 && (*(_BYTE *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963AFA80);
        }
        v26 = 0;
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, a2);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
        v10 = 1;
      }
      else
      {
LABEL_17:
        v10 = 0;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      v11 = v10 ^ 1;
      if (!v4)
        v11 = 1;
      if ((v11 & 1) == 0)
      {
        LODWORD(v26) = 11;
        v15 = *v3;
        if (*v3)
        {
          *(_DWORD *)v15 += 2;
          v27 = v15;
          CachedPseudoStyle = WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v4, (uint64_t)&v26, 0);
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v16);
          else
            *(_DWORD *)v15 -= 2;
        }
        else
        {
          v27 = 0;
          return WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v4, (uint64_t)&v26, 0);
        }
        return CachedPseudoStyle;
      }
    }
    return 0;
  }
  return CachedPseudoStyle;
}

uint64_t WebCore::RenderElement::grammarErrorPseudoStyle(WebCore::RenderElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  uint64_t CachedPseudoStyle;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  uint64_t v12;
  WebCore::RenderStyle *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::RenderStyle *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderStyle *v26;
  WTF::StringImpl *v27;
  char v28;
  char v29;
  WebCore::Style *v30;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v3 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v4 += 2;
  if ((*((_BYTE *)this + 102) & 4) == 0)
    goto LABEL_5;
  v17 = *((_QWORD *)this + 16);
  if (v17 && (v21 = *(unsigned int *)(v17 + 12), (_DWORD)v21))
  {
    v22 = *(uint64_t **)v17;
    v23 = 8 * v21;
    while (1)
    {
      CachedPseudoStyle = *v22;
      if ((*(_QWORD *)(*v22 + 16) & 0xF80000000000) == 0x180000000000
        && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(CachedPseudoStyle + 8) + 40) + 592) == v4)
      {
        break;
      }
      ++v22;
      v23 -= 8;
      if (!v23)
        goto LABEL_44;
    }
  }
  else
  {
LABEL_44:
    LODWORD(v26) = 3;
    if (v4)
      *(_DWORD *)v4 += 2;
    v27 = v4;
    v28 = 0;
    v29 = 0;
    WebCore::RenderElement::getUncachedPseudoStyle((uint64_t)this, (int *)&v26, 0, 0, &v30);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v30)
    {
LABEL_5:
      CachedPseudoStyle = 0;
      goto LABEL_6;
    }
    v26 = v30;
    CachedPseudoStyle = WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)this + 80, (uint64_t *)&v26);
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      WebCore::RenderStyle::~RenderStyle(v19, a2);
      if (*(_DWORD *)v20)
      {
        *((_OWORD *)v20 + 2) = 0u;
        *((_OWORD *)v20 + 3) = 0u;
        *(_OWORD *)v20 = 0u;
        *((_OWORD *)v20 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v20, a2);
      }
    }
  }
LABEL_6:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (!CachedPseudoStyle)
  {
    v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v7 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1963AFD68);
    }
    v8 = **(_QWORD **)(v7 + 40);
    if (v8)
      v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (!v9)
    {
      *(_DWORD *)(v8 + 24) += 2;
      if (!*(_BYTE *)(v8 + 193)
        && (v12 = *(_QWORD *)(v8 + 200)) != 0
        && (v13 = *(WebCore::RenderStyle **)(v12 + 8)) != 0)
      {
        *((_DWORD *)v13 + 6) += 2;
        v26 = v13;
        while ((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        {
          v14 = *(_QWORD *)((*((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
          if (!v14 || (*(_QWORD *)(v14 + 16) & 0x1FLL) != 0x12)
            break;
          v24 = *((_QWORD *)v13 + 4);
          if (v24)
          {
            if ((*(_WORD *)(v24 + 28) & 8) != 0)
              v25 = *((_QWORD *)v13 + 4);
            else
              v25 = 0;
          }
          else
          {
            v25 = 0;
          }
          WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v26, v25);
          v13 = v26;
          if (!v26)
            goto LABEL_17;
        }
        v4 = (WTF::StringImpl *)(*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL);
        if (v4 && (*(_BYTE *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1963AFDECLL);
        }
        v26 = 0;
        if (*((_DWORD *)v13 + 6) == 2)
        {
          if ((*((_WORD *)v13 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v13, a2);
        }
        else
        {
          *((_DWORD *)v13 + 6) -= 2;
        }
        v10 = 1;
      }
      else
      {
LABEL_17:
        v10 = 0;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
      v11 = v10 ^ 1;
      if (!v4)
        v11 = 1;
      if ((v11 & 1) == 0)
      {
        LODWORD(v26) = 3;
        v15 = *v3;
        if (*v3)
        {
          *(_DWORD *)v15 += 2;
          v27 = v15;
          CachedPseudoStyle = WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v4, (uint64_t)&v26, 0);
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v16);
          else
            *(_DWORD *)v15 -= 2;
        }
        else
        {
          v27 = 0;
          return WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v4, (uint64_t)&v26, 0);
        }
        return CachedPseudoStyle;
      }
    }
    return 0;
  }
  return CachedPseudoStyle;
}

uint64_t WebCore::RenderElement::getLeadingCorner(WebCore::RenderElement *this, WebCore::FloatPoint *a2, BOOL *a3)
{
  void (*v5)(void);
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WebCore::RenderElement *v11;
  WebCore::RenderObject *v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::LayoutIntegration::LineLayout *v16;
  char v17;
  uint64_t v18;
  WebCore::RenderElement *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  WebCore::LayoutIntegration::LineLayout *v26;
  int v27;
  int v28;
  float v29;
  __int32 v30;
  uint64_t v31;
  WebCore::RenderElement *v32;
  WebCore::FloatPoint *v33;
  BOOL *v34;
  _QWORD v35[2];
  int v36;
  char v37;
  char *v38;
  _OWORD v39[4];
  char v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  char v44;
  __int16 v45;
  int v46;
  int v47;

  if ((*((_BYTE *)this + 20) & 3) != 0)
  {
    v40 = 0;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v44 = 0;
    memset(v39, 0, 41);
    v45 = 1;
    v46 = 0;
    v47 = 0;
    v5 = *(void (**)(void))(*(_QWORD *)this + 576);
LABEL_3:
    v5();
    WebCore::TransformState::flatten((WebCore::TransformState *)v39, 0);
    v7 = *(_QWORD *)&v39[0];
    v8 = v42;
    v42 = 0;
    if (v8)
      WTF::fastFree(v8, v6);
    v9 = v41;
    v41 = 0;
    if (v9)
      WTF::fastFree(v9, v6);
    *(_QWORD *)a2 = v7;
    return 1;
  }
  else
  {
    v11 = this;
    while (1)
    {
      v13 = (int32x2_t *)(*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)v11 + 112))(v11);
      if (!v13)
      {
        v18 = *(unsigned int *)((char *)v11 + 47);
        if (!(v18 | ((unint64_t)*((unsigned __int8 *)v11 + 51) << 32))
          || (v13 = *(int32x2_t **)((v18 | ((unint64_t)*((unsigned __int8 *)v11 + 51) << 32)) + 8)) == 0)
        {
          v19 = v11;
          while (1)
          {
            v20 = *((_QWORD *)v19 + 4);
            if (!v20)
              break;
            v19 = *(WebCore::RenderElement **)(v20 + 8);
            if (!v19)
              break;
            v21 = *(unsigned int *)((char *)v19 + 47);
            if (v21 | ((unint64_t)*((unsigned __int8 *)v19 + 51) << 32))
            {
              v13 = *(int32x2_t **)((v21 | ((unint64_t)*((unsigned __int8 *)v19 + 51) << 32)) + 8);
              if (v13)
                goto LABEL_11;
            }
          }
          v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v23)
            {
              v24 = *(_QWORD *)(v23 + 288);
              if (v24)
              {
                v25 = (float)*(int *)(v24 + 260);
                *(_DWORD *)a2 = 0;
                *((float *)a2 + 1) = v25;
                return 1;
              }
            }
          }
          return 0;
        }
      }
LABEL_11:
      if ((v13[2].i8[4] & 3) != 0)
      {
        v40 = 0;
        v42 = 0;
        v43 = 0;
        v41 = 0;
        v44 = 0;
        memset(v39, 0, 41);
        v45 = 1;
        v46 = 0;
        v47 = 0;
        v5 = *(void (**)(void))(*(_QWORD *)v13 + 576);
        goto LABEL_3;
      }
      if ((*((_BYTE *)v11 + 45) & 1) != 0)
        goto LABEL_70;
      v14 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 8);
      if (!v14)
        goto LABEL_70;
      if ((*((_BYTE *)this + 45) & 1) != 0)
        goto LABEL_70;
      v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
      if (!v15)
        goto LABEL_70;
      if ((*(_WORD *)(v15 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963B028CLL);
      }
      if (v14 != v15 || (v13[5].i8[5] & 2) == 0)
        goto LABEL_70;
      v16 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v13, v12);
      if (v16)
      {
        WebCore::LayoutIntegration::LineLayout::textBoxesFor(v16, (const WebCore::RenderText *)v13, (uint64_t)v39);
      }
      else
      {
        *(int32x2_t *)&v39[0] = v13[8];
        LODWORD(v39[1]) = 1;
      }
      v17 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v39);
      if (LODWORD(v39[1]) != -1)
        ((void (*)(_QWORD *, _OWORD *))off_1E3425538[LODWORD(v39[1])])(v35, v39);
      v11 = (WebCore::RenderElement *)v13;
      if ((v17 & 1) == 0)
      {
LABEL_70:
        if ((v13[5].i8[5] & 2) != 0)
          break;
        v11 = (WebCore::RenderElement *)v13;
        if ((v13[2].i8[4] & 2) != 0)
          break;
      }
    }
    *(_QWORD *)a2 = 0;
    if ((v13[5].i8[5] & 2) == 0)
    {
      if ((v13[5].i8[5] & 4) != 0)
        *(float32x2_t *)a2 = vadd_f32(vmul_f32(vcvt_f32_s32(v13[19]), (float32x2_t)vdup_n_s32(0x3C800000u)), 0);
      goto LABEL_56;
    }
    ++v13[2].i32[0];
    v26 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing((WebCore::LayoutIntegration::LineLayout *)v13, v12);
    if (v26)
    {
      WebCore::LayoutIntegration::LineLayout::textBoxesFor(v26, (const WebCore::RenderText *)v13, (uint64_t)v39);
    }
    else
    {
      *(int32x2_t *)&v39[0] = v13[8];
      LODWORD(v39[1]) = 1;
    }
    if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v39) & 1) != 0)
      goto LABEL_52;
    v27 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v13 + 672))(v13);
    if (LODWORD(v39[1]) != -1)
    {
      v28 = v27;
      v35[0] = &v38;
      if ((((uint64_t (*)(_QWORD *, _OWORD *))off_1E3425548[LODWORD(v39[1])])(v35, v39) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1963B02F4);
      }
      if (LODWORD(v39[1]) != -1)
      {
        v38 = &v37;
        ((void (*)(_QWORD *__return_ptr, char **, _OWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[LODWORD(v39[1])])(v35, &v38, v39);
        if (v36 != -1)
        {
          v38 = &v37;
          v29 = ((float (*)(char **, _QWORD *))off_1E3425558[v36])(&v38, v35) + *((float *)a2 + 1);
          *(float *)a2 = *(float *)a2 + (float)v28;
          *((float *)a2 + 1) = v29;
          if (v36 != -1)
            ((void (*)(char **, _QWORD *))off_1E3425568[v36])(&v38, v35);
LABEL_52:
          if (LODWORD(v39[1]) != -1)
            ((void (*)(_QWORD *, _OWORD *))off_1E3425538[LODWORD(v39[1])])(v35, v39);
          v30 = v13[2].i32[0];
          if (!v30)
          {
            __break(0xC471u);
            JUMPOUT(0x1963B02D4);
          }
          v13[2].i32[0] = v30 - 1;
LABEL_56:
          v31 = WebCore::RenderObject::container((WebCore::RenderObject *)v13);
          *(_QWORD *)&v39[0] = *(_QWORD *)a2;
          v40 = 0;
          memset((char *)v39 + 8, 0, 33);
          v42 = 0;
          v43 = 0;
          v41 = 0;
          v44 = 0;
          v45 = 1;
          v46 = 0;
          v47 = 0;
          v5 = *(void (**)(void))(*(_QWORD *)v31 + 576);
          goto LABEL_3;
        }
      }
    }
    v32 = (WebCore::RenderElement *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderElement::getTrailingCorner(v32, v33, v34);
  }
}

