unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscription>,(WebCore::DOMConstructorID)190>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1520);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscription>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSPushSubscription::s_info + ~((_QWORD)&WebCore::JSPushSubscription::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscription::s_info + ~((_QWORD)&WebCore::JSPushSubscription::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSPushSubscription::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSPushSubscription::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSPushSubscriptionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSPushSubscriptionPrototype::create((WebCore::JSPushSubscriptionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSPushSubscription::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSPushSubscription::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1520) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsPushSubscriptionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSPushSubscriptionPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscription>,(WebCore::DOMConstructorID)190>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsPushSubscription_endpoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsPushSubscription_expirationTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 32))
    return 2;
  v3 = *(_QWORD *)(v2 + 24);
  if (HIDWORD(v3))
  {
    v5 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v5 = (double)v3;
  }
  return *(_QWORD *)&v5 + 0x2000000000000;
}

unint64_t WebCore::jsPushSubscription_options(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  WebCore::PushSubscriptionOptions *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t SlowCase;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *Allocator;
  bmalloc::api *v56;
  void *v57;
  unint64_t v58;
  _QWORD *v59;
  WTF *v60;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v2 + 96);
  if (!v4)
  {
    v5 = *(_DWORD *)(v2 + 52);
    if (v5)
    {
      v6 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v2 + 52));
      memcpy(v6, *(const void **)(v2 + 40), *(unsigned int *)(v2 + 52));
    }
    else
    {
      v6 = 0;
    }
    v4 = bmalloc::api::isoAllocate();
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 16) = v5;
    *(_DWORD *)(v4 + 20) = v5;
    *(_QWORD *)(v4 + 24) = 0;
    v8 = *(WebCore::PushSubscriptionOptions **)(v2 + 96);
    *(_QWORD *)(v2 + 96) = v4;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::PushSubscriptionOptions::~PushSubscriptionOptions(v8, v7);
        bmalloc::api::isoDeallocate(v56, v57);
        v4 = *(_QWORD *)(v2 + 96);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(_QWORD *)(v9 + 16 * v14);
    if (v15 == v4)
    {
LABEL_13:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v17;
          if (*(_QWORD *)v17)
            return SlowCase;
        }
      }
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(_QWORD *)(v9 + 16 * v14);
        ++v16;
        if (v15 == v4)
          goto LABEL_13;
      }
    }
  }
  ++*(_DWORD *)v4;
  v19 = *(_QWORD *)(v3 + 3296);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSPushSubscriptionOptions::s_info
         + ~((_QWORD)&WebCore::JSPushSubscriptionOptions::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionOptions::s_info
                                                                           + ~((_QWORD)&WebCore::JSPushSubscriptionOptions::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSPushSubscriptionOptions::s_info)
    {
LABEL_21:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v27)
        goto LABEL_23;
    }
    else
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSPushSubscriptionOptions::s_info)
          goto LABEL_21;
      }
    }
  }
  v28 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSPushSubscriptionOptionsPrototype::createStructure(v28, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v32 = (JSC::JSCell *)WebCore::JSPushSubscriptionOptionsPrototype::create((WebCore::JSPushSubscriptionOptionsPrototype *)v28, Structure, v30, v31);
  v33 = WebCore::JSPushSubscriptionOptions::createStructure(v28, v3, v32);
  v27 = WebCore::cacheDOMStructure((JSCell *)v3, v33, (uint64_t)&WebCore::JSPushSubscriptionOptions::s_info);
LABEL_23:
  v34 = *(_QWORD *)(v3 + 56);
  v35 = *(_QWORD *)(v34 + 41456);
  v36 = *(_QWORD *)(v35 + 23536);
  v37 = *(_QWORD **)(v36 + 1560);
  if (v37)
    goto LABEL_43;
  v38 = *(_QWORD *)(v35 + 22648);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v38))
  {
    goto LABEL_28;
  }
  MEMORY[0x19AEA534C](v38);
LABEL_28:
  v40 = *(_QWORD *)(v38 + 2824);
  if (!*(_QWORD *)(v40 + 1560))
  {
    v41 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v60, "IsoSpace T");
    v59 = 0;
    MEMORY[0x19AEA3204](v41, &v60, v34 + 192, v34 + 1872, 32, 8, &v59);
    v43 = (uint64_t)v59;
    v59 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = v60;
    v60 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 1)
        WTF::fastFree(v44, v42);
      else
        --*(_DWORD *)v44;
    }
    v45 = *(_QWORD *)(v40 + 1560);
    *(_QWORD *)(v40 + 1560) = v41;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v47 = *(_QWORD *)(v36 + 1560);
  *(_QWORD *)(v36 + 1560) = v37;
  if (v47)
  {
    v48 = (WTF *)MEMORY[0x19AEA3528](v47, v46);
    WTF::fastFree(v48, v49);
  }
  v50 = __ldxr((unsigned __int8 *)v38);
  if (v50 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_43:
  SlowCase = v37[3];
  if (SlowCase >= v37[4])
  {
    SlowCase = v37[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_45;
    }
    v58 = *(_QWORD *)(SlowCase + 8) ^ v37[6];
    v37[4] = SlowCase + HIDWORD(v58);
    v37[5] = SlowCase + (int)v58;
  }
  v37[3] = SlowCase + 32;
LABEL_45:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v27);
  *(_QWORD *)(SlowCase + 24) = v4;
  if (*(_BYTE *)(v34 + 755))
    __dmb(0xAu);
  v51 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE336550 & 1) == 0)
  {
    qword_1EE336548 = (uint64_t)&off_1E32D2760;
    byte_1EE336550 = 1;
  }
  v60 = (WTF *)v4;
  if ((SlowCase & 8) != 0)
    v52 = (SlowCase - 112) | 1;
  else
    v52 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v52 & 1) != 0)
    v53 = v52 + 47;
  else
    v53 = *(_QWORD *)v52 + 32;
  Allocator = *(_QWORD **)(v53 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v53 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336548;
  Allocator[2] = v51;
  v59 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v51 + 32), (uint64_t *)&v60, (uint64_t *)&v59);
  if (v59)
    v59[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSPushSubscription::subspaceForImpl(WebCore::JSPushSubscription *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1544);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1544))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1544);
    *(_QWORD *)(v8 + 1544) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1544);
  *(_QWORD *)(v3 + 1544) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSPushSubscriptionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSPushSubscriptionOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::PushSubscription *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::PushSubscription *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::PushSubscription **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::PushSubscription **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::PushSubscription **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::PushSubscription::~PushSubscription(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::PushSubscription>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  WebCore::JSPushSubscription *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *Allocator;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSPushSubscription::s_info + ~((_QWORD)&WebCore::JSPushSubscription::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscription::s_info + ~((_QWORD)&WebCore::JSPushSubscription::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSPushSubscription::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSPushSubscription::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSPushSubscriptionPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSPushSubscriptionPrototype::create((WebCore::JSPushSubscriptionPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSPushSubscription::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSPushSubscription::s_info);
LABEL_16:
  v30 = *(WebCore::JSPushSubscription **)(a2 + 56);
  v31 = (_QWORD *)WebCore::JSPushSubscription::subspaceForImpl(v30, (JSC::VM *)a2);
  SlowCase = v31[3];
  if (SlowCase >= v31[4])
  {
    SlowCase = v31[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_18;
    }
    v37 = *(_QWORD *)(SlowCase + 8) ^ v31[6];
    v31[4] = SlowCase + HIDWORD(v37);
    v31[5] = SlowCase + (int)v37;
  }
  v31[3] = SlowCase + 32;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v30 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336540 & 1) == 0)
  {
    qword_1EE336538 = (uint64_t)&off_1E32D2730;
    byte_1EE336540 = 1;
  }
  v39 = a3;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  Allocator = *(_QWORD **)(v34 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336538;
  Allocator[2] = v32;
  v38 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v32 + 32), &v39, (uint64_t *)&v38);
  if (v38)
    v38[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSPushSubscription::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSPushSubscription::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSPushSubscription::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  uint64_t v6;
  int v7;
  JSC::JSCell *v8;
  void (**i)(WebCore::PushSubscriptionChangeEvent *__hidden);
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  void (***v35)(WebCore::PushSubscriptionChangeEvent *__hidden);
  void *v36;
  WebCore::JSDOMGlobalObject *v37;
  void (**v38)(WebCore::PushSubscriptionChangeEvent *__hidden);
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  JSCell *v43;
  JSC::JSCell *v44;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v46;
  JSC::JSGlobalObject *v47;
  JSC::VM *v48;
  JSC::JSObject *v49;
  JSC::Structure *v50;
  JSC::VM *FunctionRealm;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char **v64;
  int v65;
  uint64_t v66;
  JSC::JSCell *Prototype;
  uint64_t v68;
  unint64_t Structure;
  JSC::Structure *v70;
  JSC::JSCell *v71;
  uint64_t v72;
  unint64_t SubclassStructure;
  void (***v74)(WebCore::PushSubscriptionChangeEvent *__hidden);
  uint64_t v75;
  uint64_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v81;
  _BOOL4 v82;
  char **v83;
  BOOL v84;
  void *v86;
  bmalloc::api *v87;
  void *v88;
  bmalloc::api *v89;
  void *v90;
  bmalloc::api *v91;
  void *v92;
  JSValue v93;
  BOOL v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  int *v102;
  int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  int *v107;
  int v108;
  JSC::VM *v109;
  uint64_t v110;
  _BYTE v111[8];
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF::StringImpl *v115;
  int v116;
  void (**v117)(WebCore::PushSubscriptionChangeEvent *__hidden);
  void (***v118)(WebCore::PushSubscriptionChangeEvent *__hidden);

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v93.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v93);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v115);
  v7 = v116;
  if (!v116)
  {
    v109 = v4;
    v110 = v6;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      i = 0;
      goto LABEL_54;
    }
    v8 = *(JSC::JSCell **)(a2 + 56);
    i = (void (**)(WebCore::PushSubscriptionChangeEvent *__hidden))*((_QWORD *)a1 + 7);
    v117 = i;
    if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
LABEL_53:
      for (i = 0; ; ++*(_DWORD *)i)
      {
LABEL_54:
        v111[0] = v10;
        v111[1] = v11;
        v111[2] = v12;
        v114 = 0;
        if (!v116)
        {
          v34 = v115;
          v115 = 0;
          v112 = 0;
          v113 = 0;
          if (v13)
            ++*(_DWORD *)v13;
          if (i)
            ++*(_DWORD *)i;
          v35 = (void (***)(WebCore::PushSubscriptionChangeEvent *__hidden))bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
          v35[1] = 0;
          if (v11)
            v39 = 4;
          else
            v39 = 0;
          if (v12)
            v40 = 8;
          else
            v40 = 0;
          if (v10)
            v41 = 2850818;
          else
            v41 = 2850816;
          v42 = v41 | v39 | v40 | (v34 != 0) | *((_DWORD *)v35 + 5) & 0xFFC00000;
          *((_DWORD *)v35 + 4) = 1;
          *((_DWORD *)v35 + 5) = v42;
          if (v34)
          {
            *(_DWORD *)v34 += 2;
            v42 = *((_DWORD *)v35 + 5);
          }
          v35[3] = (void (**)(WebCore::PushSubscriptionChangeEvent *__hidden))v34;
          v35[4] = 0;
          *(_OWORD *)(v35 + 5) = 0u;
          v35[7] = v38;
          *((_DWORD *)v35 + 5) = v42 | 0x4000;
          *((_OWORD *)v35 + 4) = 0u;
          *((_DWORD *)v35 + 20) = 0;
          *(_OWORD *)(v35 + 11) = 0u;
          *v35 = off_1E3366008;
          v35[13] = (void (**)(WebCore::PushSubscriptionChangeEvent *__hidden))v13;
          v35[14] = i;
          v118 = v35;
          if (i)
          {
            if (*(_DWORD *)i != 1)
            {
              --*(_DWORD *)i;
              goto LABEL_73;
            }
            WebCore::PushSubscription::~PushSubscription((WebCore::PushSubscription *)i, v36);
            bmalloc::api::isoDeallocate(v87, v88);
            if (!v13)
            {
LABEL_76:
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v36);
                else
                  *(_DWORD *)v34 -= 2;
              }
              if (*v118 != off_1E3366008)
              {
                __break(0xC471u);
                JUMPOUT(0x194E1EC40);
              }
              v43 = (JSCell *)WebCore::createWrapper<WebCore::PushSubscriptionChangeEvent,WebCore::PushSubscriptionChangeEvent>(*(JSC::VM **)(v110 + 40), (uint64_t *)&v118, v37);
              v44 = *(JSC::JSCell **)(a2 + 40);
              if (((unint64_t)v44 & 0xFFFE000000000002) != 0)
                goto LABEL_99;
              Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v44);
              if (!Object)
                goto LABEL_99;
              v47 = Object;
              if (Object == *(JSC::JSGlobalObject **)(a2 + 24))
                goto LABEL_99;
              v48 = (JSC::VM *)*((_QWORD *)a1 + 7);
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v46);
              if (*((_DWORD *)v48 + 20))
              {
                if ((JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) != 0)
                  goto LABEL_99;
              }
              v52 = *((_QWORD *)FunctionRealm + 412);
              if (v52)
              {
                v53 = *(_DWORD *)(v52 - 8);
                v54 = ((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
                     + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
                                                                                           + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) >> 22);
                v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
                v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
                v57 = v53 & ((v56 >> 31) ^ v56);
                v58 = *(char ***)(v52 + 16 * v57);
                if (v58 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
                {
LABEL_89:
                  v49 = *(JSC::JSObject **)(v52 + 16 * v57 + 8);
                  if (!v49)
                    goto LABEL_90;
                }
                else
                {
                  v59 = 1;
                  while (v58)
                  {
                    v57 = ((_DWORD)v57 + v59) & v53;
                    v58 = *(char ***)(v52 + 16 * v57);
                    ++v59;
                    if (v58 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
                      goto LABEL_89;
                  }
LABEL_90:
                  v60 = ((unint64_t)&WebCore::JSExtendableEvent::s_info
                       + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
                  v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
                  v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
                  v63 = v53 & ((v62 >> 31) ^ v62);
                  v64 = *(char ***)(v52 + 16 * v63);
                  if (v64 != &WebCore::JSExtendableEvent::s_info)
                  {
                    v65 = 1;
                    while (v64)
                    {
                      v63 = ((_DWORD)v63 + v65) & v53;
                      v64 = *(char ***)(v52 + 16 * v63);
                      ++v65;
                      if (v64 == &WebCore::JSExtendableEvent::s_info)
                        goto LABEL_94;
                    }
                    goto LABEL_95;
                  }
LABEL_94:
                  v66 = *(_QWORD *)(v52 + 16 * v63 + 8);
                  if (!v66)
                    goto LABEL_95;
LABEL_96:
                  Structure = WebCore::JSPushSubscriptionChangeEventPrototype::createStructure((uint64_t *)v48, (uint64_t)FunctionRealm, *(JSC::JSCell **)(v66 + 48));
                  *(_DWORD *)(Structure + 16) |= 0x80000u;
                  v71 = (JSC::JSCell *)WebCore::JSPushSubscriptionChangeEventPrototype::create(v48, FunctionRealm, Structure, v70);
                  v72 = WebCore::JSPushSubscriptionChangeEvent::createStructure((uint64_t *)v48, (uint64_t)FunctionRealm, v71);
                  v49 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v72, (uint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info);
                }
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v47, v49, v50);
                if (!*((_DWORD *)v48 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) == 0)
                  JSC::JSObject::setStructure(v43, v48, SubclassStructure);
LABEL_99:
                if (*((_DWORD *)v109 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v109) & 1) != 0)
                  v43 = 0;
                v74 = v118;
                v118 = 0;
                if (v74)
                {
                  if (*((_DWORD *)v74 + 4) == 1)
                    (*v74)[1]((WebCore::PushSubscriptionChangeEvent *)v74);
                  else
                    --*((_DWORD *)v74 + 4);
                }
                v75 = 0;
                goto LABEL_104;
              }
LABEL_95:
              Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(v48, FunctionRealm, v49);
              v68 = WebCore::JSExtendableEvent::createStructure((uint64_t *)v48, (uint64_t)FunctionRealm, Prototype);
              v66 = WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v68, (uint64_t)&WebCore::JSExtendableEvent::s_info);
              goto LABEL_96;
            }
          }
          else
          {
LABEL_73:
            if (!v13)
              goto LABEL_76;
          }
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::PushSubscription::~PushSubscription((WebCore::PushSubscription *)v13, v36);
            bmalloc::api::isoDeallocate(v89, v90);
          }
          else
          {
            --*(_DWORD *)v13;
          }
          goto LABEL_76;
        }
        v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_178:
        v94 = (_DWORD)v13 == 0;
LABEL_218:
        v10 = !v94;
LABEL_19:
        if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
          goto LABEL_151;
LABEL_20:
        WTF::AtomStringImpl::addLiteral();
        v19 = (WTF::StringImpl *)v118;
        v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v118);
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v20);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (*((_DWORD *)i + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)i))
          goto LABEL_151;
        if (v21 == 10)
        {
          v11 = 0;
          goto LABEL_31;
        }
        v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v21 >= 0xFFFE000000000000)
          break;
        *(_QWORD *)&v23 = v21 - 0x2000000000000;
        if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v21 & 0xFFFE000000000002) != 0)
          {
            v11 = v21 == 7;
            goto LABEL_30;
          }
          v100 = *(unsigned __int8 *)(v21 + 5);
          if (v100 == 3)
          {
            v103 = *(_DWORD *)(v21 + 8);
            goto LABEL_210;
          }
          if (v100 == 2)
          {
            v101 = *(_QWORD *)(v21 + 8);
            if ((v101 & 1) != 0)
              v102 = (int *)(v21 + 16);
            else
              v102 = (int *)(v101 + 4);
            v103 = *v102;
LABEL_210:
            v99 = v103 == 0;
          }
          else
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_212:
              v11 = 1;
              goto LABEL_30;
            }
            v99 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          }
LABEL_222:
          v11 = !v99;
          goto LABEL_30;
        }
        if (v23 > 0.0)
          goto LABEL_212;
        v11 = v23 < 0.0;
LABEL_30:
        if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
          goto LABEL_151;
LABEL_31:
        WTF::AtomStringImpl::addLiteral();
        v24 = (WTF::StringImpl *)v118;
        v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v118);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
        }
        if (*((_DWORD *)i + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)i))
          goto LABEL_151;
        if (v26 == 10)
        {
          v12 = 0;
          goto LABEL_42;
        }
        v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v26 >= 0xFFFE000000000000)
        {
          v104 = (_DWORD)v26 == 0;
          goto LABEL_226;
        }
        *(_QWORD *)&v28 = v26 - 0x2000000000000;
        if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v26 & 0xFFFE000000000002) != 0)
          {
            v12 = v26 == 7;
            goto LABEL_41;
          }
          v105 = *(unsigned __int8 *)(v26 + 5);
          if (v105 == 3)
          {
            v108 = *(_DWORD *)(v26 + 8);
          }
          else
          {
            if (v105 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_216:
                v12 = 1;
                goto LABEL_41;
              }
              v104 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_226;
            }
            v106 = *(_QWORD *)(v26 + 8);
            if ((v106 & 1) != 0)
              v107 = (int *)(v26 + 16);
            else
              v107 = (int *)(v106 + 4);
            v108 = *v107;
          }
          v104 = v108 == 0;
LABEL_226:
          v12 = !v104;
          goto LABEL_41;
        }
        if (v28 > 0.0)
          goto LABEL_216;
        v12 = v28 < 0.0;
LABEL_41:
        if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
          goto LABEL_118;
LABEL_42:
        WTF::AtomStringImpl::addLiteral();
        v29 = (WTF::StringImpl *)v118;
        v31 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v118);
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v30);
          else
            *(_DWORD *)v29 -= 2;
        }
        if (*((_DWORD *)i + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)i))
          goto LABEL_118;
        if ((v31 | 8) == 0xA)
        {
          v13 = 0;
        }
        else
        {
          v118 = (void (***)(WebCore::PushSubscriptionChangeEvent *__hidden))*((_QWORD *)a1 + 7);
          if ((v31 & 0xFFFE000000000002) != 0)
            goto LABEL_117;
          v77 = *(unsigned int *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C);
          v78 = *(_DWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v77)
          {
            v79 = 16 * v77;
            if ((char **)v79 != &WebCore::JSPushSubscription::s_info)
            {
              do
              {
                v79 = *(_QWORD *)(v79 + 16);
                v78 = v79 != 0;
              }
              while ((char **)v79 != &WebCore::JSPushSubscription::s_info && v79 != 0);
            }
          }
          if (!v78 || (v13 = *(_QWORD *)(v31 + 24)) == 0)
          {
LABEL_117:
            JSC::throwTypeError();
LABEL_118:
            v114 = 1;
            goto LABEL_134;
          }
          ++*(_DWORD *)v13;
        }
        WTF::AtomStringImpl::addLiteral();
        v32 = (WTF::StringImpl *)v118;
        v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v118);
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v33);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (*((_DWORD *)i + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)i) & 1) != 0)
          goto LABEL_131;
        if ((v2 | 8) == 0xA)
          goto LABEL_53;
        v118 = (void (***)(WebCore::PushSubscriptionChangeEvent *__hidden))*((_QWORD *)a1 + 7);
        if ((v2 & 0xFFFE000000000002) == 0)
        {
          v81 = *(unsigned int *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C);
          v82 = *(_DWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x4C) != 0;
          v83 = (char **)(16 * v81);
          if ((_DWORD)v81)
            v84 = v83 == &WebCore::JSPushSubscription::s_info;
          else
            v84 = 1;
          if (!v84)
          {
            do
            {
              v83 = (char **)v83[2];
              v82 = v83 != 0;
            }
            while (v83 != &WebCore::JSPushSubscription::s_info && v83 != 0);
          }
          if (v82)
          {
            i = *(void (***)(WebCore::PushSubscriptionChangeEvent *__hidden))(v2 + 24);
            if (i)
              continue;
          }
        }
        JSC::throwTypeError();
LABEL_131:
        v114 = 1;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::PushSubscription::~PushSubscription((WebCore::PushSubscription *)v13, v86);
            bmalloc::api::isoDeallocate(v91, v92);
          }
          else
          {
            --*(_DWORD *)v13;
          }
        }
        goto LABEL_134;
      }
      v99 = (_DWORD)v21 == 0;
      goto LABEL_222;
    }
    if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (v14 = JSC::JSCell::getObject(v8)) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_151;
    }
    v2 = v14;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v118;
    v13 = JSC::JSObject::get((JSC::Structure *)v2, a1, (unint64_t)v118);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)i + 20) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)i))
    {
LABEL_151:
      v114 = 1;
LABEL_134:
      v43 = 0;
      v75 = 1;
LABEL_104:
      ((void (*)(void (****)(WebCore::PushSubscriptionChangeEvent *__hidden), _BYTE *))off_1E32D3180[v75])(&v118, v111);
      v7 = v116;
      goto LABEL_105;
    }
    if (v13 == 10)
    {
      v10 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v13 >= 0xFFFE000000000000)
      goto LABEL_178;
    *(_QWORD *)&v18 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v10 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v10 = v13 == 7;
        goto LABEL_19;
      }
      v95 = *(unsigned __int8 *)(v13 + 5);
      if (v95 == 3)
      {
        v98 = *(_DWORD *)(v13 + 8);
LABEL_206:
        v94 = v98 == 0;
        goto LABEL_218;
      }
      if (v95 == 2)
      {
        v96 = *(_QWORD *)(v13 + 8);
        if ((v96 & 1) != 0)
          v97 = (int *)(v13 + 16);
        else
          v97 = (int *)(v96 + 4);
        v98 = *v97;
        goto LABEL_206;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v94 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_218;
      }
    }
    v10 = 1;
    goto LABEL_19;
  }
  v43 = 0;
LABEL_105:
  if (v7 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32D2930[v7])(v111, &v115);
  return v43;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::prototype(WebCore::JSPushSubscriptionChangeEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  int v19;
  uint64_t v20;
  JSC::JSCell *Prototype;
  uint64_t v22;
  unint64_t Structure;
  JSC::Structure *v24;
  JSC::JSCell *v25;
  uint64_t v26;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_12;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
      + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSPushSubscriptionChangeEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
        goto LABEL_6;
    }
LABEL_7:
    v14 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v6 & ((v16 >> 31) ^ v16);
    v18 = *(char ***)(v5 + 16 * v17);
    if (v18 == &WebCore::JSExtendableEvent::s_info)
    {
LABEL_11:
      v20 = *(_QWORD *)(v5 + 16 * v17 + 8);
      if (v20)
      {
LABEL_13:
        Structure = WebCore::JSPushSubscriptionChangeEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v20 + 48));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v25 = (JSC::JSCell *)WebCore::JSPushSubscriptionChangeEventPrototype::create(this, a2, Structure, v24);
        v26 = WebCore::JSPushSubscriptionChangeEvent::createStructure((uint64_t *)this, (uint64_t)a2, v25);
        v13 = WebCore::cacheDOMStructure((JSCell *)a2, v26, (uint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info);
        return *(_QWORD *)(v13 + 48);
      }
    }
    else
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v6;
        v18 = *(char ***)(v5 + 16 * v17);
        ++v19;
        if (v18 == &WebCore::JSExtendableEvent::s_info)
          goto LABEL_11;
      }
    }
LABEL_12:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    v22 = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v20 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSExtendableEvent::s_info);
    goto LABEL_13;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
    goto LABEL_7;
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSExtendableEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::JSPushSubscriptionChangeEvent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 16);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSPushSubscriptionChangeEvent::createPrototype(WebCore::JSPushSubscriptionChangeEvent *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  unint64_t v16;
  JSC::Structure *v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSExtendableEvent::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSExtendableEvent::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype(this, a2, a3);
    Structure = WebCore::JSExtendableEvent::createStructure((uint64_t *)this, (uint64_t)a2, Prototype);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSExtendableEvent::s_info);
  }
  v16 = WebCore::JSPushSubscriptionChangeEventPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *(JSC::JSCell **)(v13 + 48));
  *(_DWORD *)(v16 + 16) |= 0x80000u;
  return WebCore::JSPushSubscriptionChangeEventPrototype::create(this, a2, v16, v17);
}

uint64_t WebCore::JSPushSubscriptionChangeEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSPushSubscriptionChangeEventPrototype::create(WebCore::JSPushSubscriptionChangeEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info, &WebCore::JSPushSubscriptionChangeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>,(WebCore::DOMConstructorID)191>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1528);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSExtendableEvent>,(WebCore::DOMConstructorID)899>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSPushSubscriptionChangeEvent::prototype((WebCore::JSPushSubscriptionChangeEvent *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1528) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsPushSubscriptionChangeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSPushSubscriptionChangeEventPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSPushSubscriptionChangeEvent>,(WebCore::DOMConstructorID)191>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsPushSubscriptionChangeEvent_newSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v2)
    return WebCore::wrap<WebCore::PushSubscription>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsPushSubscriptionChangeEvent_oldSubscription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 112);
  if (v2)
    return WebCore::wrap<WebCore::PushSubscription>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::subspaceForImpl(WebCore::JSPushSubscriptionChangeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1552);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1552))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1552);
    *(_QWORD *)(v8 + 1552) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1552);
  *(_QWORD *)(v3 + 1552) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::PushSubscriptionChangeEvent,WebCore::PushSubscriptionChangeEvent>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  uint64_t v22;
  JSC::JSCell *Prototype;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
  {
    v15 = (uint64_t *)*((_QWORD *)a1 + 7);
    goto LABEL_12;
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
      + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info
                                                                            + ~((_QWORD)&WebCore::JSPushSubscriptionChangeEvent::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSPushSubscriptionChangeEvent::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSPushSubscriptionChangeEvent::s_info)
        goto LABEL_6;
    }
LABEL_7:
    v15 = (uint64_t *)*((_QWORD *)a1 + 7);
    v16 = ((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSExtendableEvent::s_info + ~((_QWORD)&WebCore::JSExtendableEvent::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v7 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v6 + 16 * v19);
    if (v20 == &WebCore::JSExtendableEvent::s_info)
    {
LABEL_11:
      v22 = *(_QWORD *)(v6 + 16 * v19 + 8);
      if (v22)
      {
LABEL_13:
        Structure = WebCore::JSPushSubscriptionChangeEventPrototype::createStructure(v15, (uint64_t)a1, *(JSC::JSCell **)(v22 + 48));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v27 = (JSC::JSCell *)WebCore::JSPushSubscriptionChangeEventPrototype::create((WebCore::JSPushSubscriptionChangeEventPrototype *)v15, a1, Structure, v26);
        v28 = WebCore::JSPushSubscriptionChangeEvent::createStructure(v15, (uint64_t)a1, v27);
        v14 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSPushSubscriptionChangeEvent::s_info);
        goto LABEL_14;
      }
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v7;
        v20 = *(char ***)(v6 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSExtendableEvent::s_info)
          goto LABEL_11;
      }
    }
LABEL_12:
    Prototype = (JSC::JSCell *)WebCore::JSExtendableEvent::createPrototype((WebCore::JSExtendableEvent *)v15, a1, a3);
    v24 = WebCore::JSExtendableEvent::createStructure(v15, (uint64_t)a1, Prototype);
    v22 = WebCore::cacheDOMStructure((JSCell *)a1, v24, (uint64_t)&WebCore::JSExtendableEvent::s_info);
    goto LABEL_13;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
    goto LABEL_7;
LABEL_14:
  v29 = WebCore::JSPushSubscriptionChangeEvent::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)a1 + 415), v5, v29);
  return v29;
}

uint64_t WebCore::JSPushSubscriptionChangeEvent::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSPushSubscriptionChangeEvent::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSPushSubscriptionChangeEvent::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

WebCore::PushSubscriptionOptions *WebCore::JSPushSubscriptionOptions::destroy(WebCore::JSPushSubscriptionOptions *this, JSC::JSCell *a2)
{
  WebCore::PushSubscriptionOptions *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::PushSubscriptionOptions *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::PushSubscriptionOptions::~PushSubscriptionOptions(result, a2);
      return (WebCore::PushSubscriptionOptions *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSPushSubscriptionOptions::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSPushSubscriptionOptionsPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSPushSubscriptionOptionsPrototype::create(WebCore::JSPushSubscriptionOptionsPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSPushSubscriptionOptions::s_info, &WebCore::JSPushSubscriptionOptionsPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscriptionOptions>,(WebCore::DOMConstructorID)192>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1536);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscriptionOptions>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSPushSubscriptionOptions::s_info
         + ~((_QWORD)&WebCore::JSPushSubscriptionOptions::s_info << 32)) ^ (((unint64_t)&WebCore::JSPushSubscriptionOptions::s_info
                                                                           + ~((_QWORD)&WebCore::JSPushSubscriptionOptions::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSPushSubscriptionOptions::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSPushSubscriptionOptions::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSPushSubscriptionOptionsPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSPushSubscriptionOptionsPrototype::create((WebCore::JSPushSubscriptionOptionsPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSPushSubscriptionOptions::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSPushSubscriptionOptions::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1536) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsPushSubscriptionOptionsConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSPushSubscriptionOptionsPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSPushSubscriptionOptions>,(WebCore::DOMConstructorID)192>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsPushSubscriptionOptions_userVisibleOnly()
{
  return 7;
}

uint64_t WebCore::jsPushSubscriptionOptions_applicationServerKey(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  JSC::ArrayBuffer *v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSValue v11;
  WebCore::JSDOMGlobalObject *v12;
  WTF::StringImpl *v13;
  int v14;
  _BYTE v15[8];
  WTF::StringImpl *v16;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::PushSubscriptionOptions::applicationServerKey(*(_QWORD *)(a2 + 24), (uint64_t)&v12);
  if (v14)
  {
    if (v14 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::JSPushSubscriptionOptionsOwner::isReachableFromOpaqueRoots();
    }
    v9 = (WTF::StringImpl *)v12;
    v15[0] = (_BYTE)v12;
    v10 = v13;
    v13 = 0;
    v16 = v10;
    if (!*((_QWORD *)v3 + 2))
    {
      v11.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v12, (JSC::JSGlobalObject *)&v16);
      JSC::VM::throwException(v3, a1, v11);
      v10 = v16;
    }
    v16 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    v7 = 0;
  }
  else
  {
    v6 = v12;
    v12 = 0;
    if (v6)
    {
      v7 = WebCore::toJS(a1, v4, v6, v5);
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v6);
    }
    else
    {
      v7 = 2;
    }
  }
  if (v14 != -1)
    ((void (*)(_BYTE *, WebCore::JSDOMGlobalObject **))off_1E32D3170[v14])(v15, &v12);
  return v7;
}

uint64_t WebCore::JSPushSubscriptionOptionsOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSPushSubscriptionOptionsOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::PushSubscriptionOptions *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::PushSubscriptionOptions *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::PushSubscriptionOptions **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::PushSubscriptionOptions **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::PushSubscriptionOptions **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::PushSubscriptionOptions::~PushSubscriptionOptions(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

void WebCore::convertDictionary<WebCore::PushSubscriptionOptionsInit>(uint64_t a1, uint64_t *a2, JSC::JSCell *this)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  uint64_t Object;
  WTF::StringImpl *v9;
  unint64_t v10;
  int v11;
  int v12;
  JSC::ArrayBufferView *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  BOOL v17;
  JSC::VM *v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t (*v24)();
  int v25;
  int v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int hasExceptionsAfterHandlingTraps;
  BOOL v34;
  int v35;
  uint64_t v36;
  int *v37;
  int v38;
  char v39[8];
  int v40;
  unsigned __int8 v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  int v44;
  JSC::ArrayBufferView *v45;
  int v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  char v50[8];
  int v51;
  unsigned __int8 v52;
  int v53;
  WTF::StringImpl *v54;
  JSC::ArrayBufferView *v55;
  int v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)a2[7];
  v42 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    v39[0] = 0;
    v41 = 0;
LABEL_10:
    v11 = 0;
    v50[0] = 0;
    v52 = 0;
    v53 = 0;
    LOBYTE(v54) = 0;
    LOBYTE(v56) = 0;
    goto LABEL_11;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    *(_DWORD *)(a1 + 32) = 1;
    return;
  }
  v7 = (JSC::Structure *)Object;
  v39[0] = 0;
  v41 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v49);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v9);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (!*((_DWORD *)v5 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v5))
  {
    if ((v10 | 8) == 0xA)
      goto LABEL_10;
    v13 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped(a2[7], v10);
    if (v13)
    {
      *(_DWORD *)v13 += 2;
      v55 = v13;
      v56 = 1;
LABEL_55:
      v57 = 0;
      goto LABEL_56;
    }
    JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)v10, &v45);
    if (v45)
    {
      v55 = v45;
      v56 = 0;
      goto LABEL_55;
    }
    v54 = (WTF::StringImpl *)v10;
    v27 = (JSC::VM *)a2[7];
    if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, (JSC::JSGlobalObject *)a2);
LABEL_80:
      if (*((_DWORD *)v27 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
        v29 = v43;
        if (hasExceptionsAfterHandlingTraps)
        {
          v46 = 1;
          v43 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v32);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = 1;
          v31 = 1;
LABEL_83:
          v57 = v30;
          ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E32D2D10[v31])(&v43, &v45);
          v25 = v57;
          if (v57)
          {
            v53 = 1;
LABEL_65:
            if (v25 != -1)
              ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32D2DC8[v25])(&v45, &v55);
            v22 = v53;
            if (v53)
            {
              *(_DWORD *)(a1 + 32) = 1;
LABEL_47:
              if (v22 != -1)
                ((void (*)(WTF::StringImpl **, char *))off_1E32D3280[v22])(&v54, v50);
              goto LABEL_49;
            }
            v11 = v52;
            LOBYTE(v54) = 0;
            LOBYTE(v56) = 0;
            if (v52)
            {
              LODWORD(v55) = -1;
              v26 = v51;
              if (v51 != -1)
              {
                ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **, char *))off_1E32D2D38[v51])(&v45, &v54, v50);
                LODWORD(v55) = v26;
              }
              v11 = 1;
              LOBYTE(v56) = 1;
            }
LABEL_11:
            if (v41 != v11)
            {
              if (v41)
              {
                if (v40 != -1)
                  ((void (*)(JSC::ArrayBufferView **, char *))off_1E32D2D20[v40])(&v45, v39);
                v40 = -1;
                v41 = 0;
              }
              else
              {
                v39[0] = 0;
                v40 = -1;
                v12 = (int)v55;
                if ((_DWORD)v55 != -1)
                {
                  ((void (*)(JSC::ArrayBufferView **, char *, WTF::StringImpl **))off_1E32D2D38[v55])(&v45, v39, &v54);
                  v40 = v12;
                }
                v41 = 1;
              }
              goto LABEL_27;
            }
            if (!v41)
            {
LABEL_30:
              if (v6 == 2)
                goto LABEL_36;
              WTF::AtomStringImpl::addLiteral();
              v14 = v54;
              v16 = JSC::JSObject::get(v7, (JSC::JSGlobalObject *)a2, (unint64_t)v54);
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v15);
                else
                  *(_DWORD *)v14 -= 2;
              }
              if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
                goto LABEL_95;
              if (v16 == 10)
              {
LABEL_36:
                v17 = 0;
                goto LABEL_42;
              }
              v18 = (JSC::VM *)a2[7];
              if (v16 >= 0xFFFE000000000000)
              {
                v34 = (_DWORD)v16 == 0;
                goto LABEL_113;
              }
              *(_QWORD *)&v19 = v16 - 0x2000000000000;
              if (v16 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
              {
                if (v19 <= 0.0)
                {
                  v17 = v19 < 0.0;
                  goto LABEL_41;
                }
              }
              else
              {
                if ((v16 & 0xFFFE000000000002) != 0)
                {
                  v17 = v16 == 7;
                  goto LABEL_41;
                }
                v35 = *(unsigned __int8 *)(v16 + 5);
                if (v35 == 3)
                {
                  v38 = *(_DWORD *)(v16 + 8);
LABEL_112:
                  v34 = v38 == 0;
                  goto LABEL_113;
                }
                if (v35 == 2)
                {
                  v36 = *(_QWORD *)(v16 + 8);
                  if ((v36 & 1) != 0)
                    v37 = (int *)(v16 + 16);
                  else
                    v37 = (int *)(v36 + 4);
                  v38 = *v37;
                  goto LABEL_112;
                }
                if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                {
                  v34 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_113:
                  v17 = !v34;
LABEL_41:
                  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
                  {
LABEL_95:
                    v20 = 1;
LABEL_46:
                    *(_DWORD *)(a1 + 32) = v20;
                    v22 = v53;
                    goto LABEL_47;
                  }
LABEL_42:
                  *(_BYTE *)a1 = v17;
                  *(_BYTE *)(a1 + 8) = 0;
                  *(_BYTE *)(a1 + 24) = 0;
                  v20 = v41;
                  if (v41)
                  {
                    *(_DWORD *)(a1 + 16) = -1;
                    v21 = v40;
                    if (v40 != -1)
                    {
                      ((void (*)(WTF::StringImpl **, uint64_t, char *))off_1E32D2D38[v40])(&v54, a1 + 8, v39);
                      *(_DWORD *)(a1 + 16) = v21;
                    }
                    v20 = 0;
                    *(_BYTE *)(a1 + 24) = 1;
                  }
                  goto LABEL_46;
                }
              }
              v17 = 1;
              goto LABEL_41;
            }
            if (v40 == -1)
            {
              if ((_DWORD)v55 == -1)
                goto LABEL_27;
            }
            else if ((_DWORD)v55 == -1)
            {
              ((void (*)(JSC::ArrayBufferView **, char *))off_1E32D2D20[v40])(&v45, v39);
              v40 = -1;
LABEL_27:
              if ((_BYTE)v56 && (_DWORD)v55 != -1)
                ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **))off_1E32D2D20[v55])(&v45, &v54);
              goto LABEL_30;
            }
            v45 = (JSC::ArrayBufferView *)v39;
            ((void (*)(JSC::ArrayBufferView **, char *, WTF::StringImpl **))off_1E32D2DB0[v55])(&v45, v39, &v54);
            goto LABEL_27;
          }
LABEL_56:
          LOBYTE(v43) = 0;
          v44 = -1;
          v23 = v56;
          if (v56 == -1)
          {
            LOBYTE(v45) = 0;
            v47 = 1;
            v50[0] = 0;
            v51 = -1;
            v52 = 1;
            v53 = 0;
          }
          else
          {
            v24 = off_1E32D2D38[v56];
            ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **, JSC::ArrayBufferView **))v24)(&v45, &v43, &v55);
            v44 = v23;
            LOBYTE(v45) = 0;
            v46 = -1;
            ((void (*)(char *, JSC::ArrayBufferView **, WTF::StringImpl **))v24)(&v48, &v45, &v43);
            v46 = v23;
            v47 = 1;
            v50[0] = 0;
            v52 = 0;
            v51 = -1;
            ((void (*)(char *, char *, JSC::ArrayBufferView **))v24)(&v48, v50, &v45);
            v51 = v23;
            v52 = 1;
            v53 = 0;
            if (!v47)
            {
LABEL_62:
              if (v44 != -1)
                ((void (*)(char *, WTF::StringImpl **))off_1E32D2D20[v44])(&v48, &v43);
              v25 = v57;
              goto LABEL_65;
            }
            if (v46 != -1)
              ((void (*)(char *, JSC::ArrayBufferView **))off_1E32D2D20[v46])(&v48, &v45);
          }
          v46 = -1;
          goto LABEL_62;
        }
      }
      else
      {
        v29 = v43;
      }
      v30 = 0;
      v31 = 0;
      v46 = 0;
      v45 = 0;
      v55 = v29;
      v56 = 2;
      goto LABEL_83;
    }
    v28 = *(WTF::StringImpl **)(v10 + 8);
    if ((v28 & 1) != 0)
    {
      v28 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, (JSC::JSGlobalObject *)a2);
      if (!v28)
        goto LABEL_79;
    }
    else if (!v28)
    {
LABEL_79:
      v43 = v28;
      goto LABEL_80;
    }
    *(_DWORD *)v28 += 2;
    goto LABEL_79;
  }
  *(_DWORD *)(a1 + 32) = 1;
LABEL_49:
  if (v41)
  {
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, char *))off_1E32D2D20[v40])(&v49, v39);
  }
}

WebCore::RTCCertificate *WebCore::JSRTCCertificate::destroy(WebCore::JSRTCCertificate *this, JSC::JSCell *a2)
{
  WebCore::RTCCertificate *result;
  WTF *v4;
  void *v5;

  result = (WebCore::RTCCertificate *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCCertificate::~RTCCertificate(result, a2);
      return (WebCore::RTCCertificate *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSRTCCertificate::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCCertificatePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCCertificatePrototype::create(WebCore::JSRTCCertificatePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSRTCCertificate::s_info, &WebCore::JSRTCCertificatePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCCertificate>,(WebCore::DOMConstructorID)145>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1160);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCCertificate>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCCertificate::s_info + ~((_QWORD)&WebCore::JSRTCCertificate::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCCertificate::s_info + ~((_QWORD)&WebCore::JSRTCCertificate::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCCertificate::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCCertificate::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCCertificatePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCCertificatePrototype::create((WebCore::JSRTCCertificatePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCCertificate::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCCertificate::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1160) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCCertificateConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCCertificatePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCCertificate>,(WebCore::DOMConstructorID)145>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCCertificate_expires(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 16);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSRTCCertificateOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCCertificateOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RTCCertificate *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::RTCCertificate *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::RTCCertificate **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::RTCCertificate **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::RTCCertificate **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::RTCCertificate::~RTCCertificate(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::RTCCertificate,WebCore::RTCCertificate>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSRTCCertificate::s_info + ~((_QWORD)&WebCore::JSRTCCertificate::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCCertificate::s_info + ~((_QWORD)&WebCore::JSRTCCertificate::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSRTCCertificate::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSRTCCertificate::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSRTCCertificatePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSRTCCertificatePrototype::create((WebCore::JSRTCCertificatePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSRTCCertificate::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSRTCCertificate::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1184);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 1184))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 1184);
    *(_QWORD *)(v26 + 1184) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 1184);
  *(_QWORD *)(v22 + 1184) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336560 & 1) == 0)
  {
    qword_1EE336558 = (uint64_t)&off_1E32D2790;
    byte_1EE336560 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336558;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::RTCCertificate>(uint64_t a1, uint64_t a2, WebCore::RTCCertificate *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::RTCCertificate *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WebCore::RTCCertificate *v14;
  WTF *v16;
  void *v17;
  WebCore::RTCCertificate *v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::RTCCertificate **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::RTCCertificate **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v18 = a3;
  v12 = WebCore::createWrapper<WebCore::RTCCertificate,WebCore::RTCCertificate>(a2, &v18);
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::RTCCertificate::~RTCCertificate(v14, v13);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return v12;
}

uint64_t WebCore::convertDictionary<WebCore::RTCConfiguration>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t v3;
  JSC::VM *v4;
  uint64_t Object;
  JSC::Structure *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  const char *v12;
  int v13;
  unint64_t v14;
  char **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v20;
  int j;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WebCore::RTCCertificate *v38;
  WTF *v39;
  void *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  __int16 v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  JSValue v49;
  unsigned int i;
  unsigned int v51;
  JSC::JSCell *IndexQuickly;
  int v53;
  int v54;
  JSC::JSCell *v56;
  uint64_t v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  unsigned int v62;
  WTF *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  JSC::VM *v69;
  const char **v70;
  int v71;
  const char *v72;
  int v73;
  uint64_t v74;
  char **v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  JSC::VM *v91;
  int v92;
  const char *v93;
  int v94;
  char **v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF *v104;
  void *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v113;
  uint64_t v114;
  int v115;
  WTF *v116;
  unint64_t v117;
  char v118;
  _BYTE v119[14];
  WTF *v120;
  uint64_t v121;
  JSC::VM *v122;
  JSC::VM *v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  _BYTE v126[9];

  v3 = result;
  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v122 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LOBYTE(v116) = 0;
    v118 = 0;
    v120 = 0;
    v121 = 0;
    *(_WORD *)&v119[12] = 0;
    *(_QWORD *)v119 = 1;
LABEL_228:
    LODWORD(v78) = 1;
LABEL_229:
    *(_DWORD *)&v119[8] = v78;
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 24) = 0;
    if (v118)
    {
      *(_QWORD *)(v3 + 8) = v116;
      v79 = v117;
      v116 = 0;
      v117 = 0;
      *(_QWORD *)(v3 + 16) = v79;
      *(_BYTE *)(v3 + 24) = 1;
    }
    v80 = 0;
    v81 = *(_QWORD *)v119;
    *(_QWORD *)(v3 + 38) = *(_QWORD *)&v119[6];
    *(_QWORD *)(v3 + 32) = v81;
    *(_QWORD *)(v3 + 48) = v120;
    v82 = v121;
    v120 = 0;
    v121 = 0;
    *(_QWORD *)(v3 + 56) = v82;
    goto LABEL_232;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    *(_DWORD *)(v3 + 64) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  LOBYTE(v116) = 0;
  v118 = 0;
  v120 = 0;
  v121 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v7, a2, (unint64_t)v113);
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, a2);
    else
      *(_DWORD *)v113 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) == 0))
  {
    if (v8 == 10)
    {
      LODWORD(v9) = 0;
      goto LABEL_32;
    }
    v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v123 = v10;
    v113 = (WTF::StringImpl *)v8;
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v113, a2);
      v11 = v124;
      if (v124)
        goto LABEL_17;
      goto LABEL_90;
    }
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a2);
      if (!v11)
      {
LABEL_16:
        v124 = v11;
        if (v11)
        {
LABEL_17:
          v12 = (const char *)*((_QWORD *)v11 + 1);
          v13 = *((_DWORD *)v11 + 1);
          v14 = ((unint64_t)*((unsigned int *)v11 + 4) >> 2) & 1;
          if (v12 != "balanced" && v13 == 8)
          {
            if ((_DWORD)v14)
            {
              if (*v12 != 98 || *(_DWORD *)(v12 + 1) != 1851878497 || *((_DWORD *)v12 + 1) != 1684366190)
                goto LABEL_23;
            }
            else
            {
              if (*(_WORD *)v12 != 98)
              {
LABEL_23:
                v9 = 0;
                goto LABEL_28;
              }
              v9 = 0;
              if (*(_QWORD *)(v12 + 2) != 0x6E0061006C0061 || *((_QWORD *)v12 + 1) != 0x6400650063006ELL)
                goto LABEL_28;
            }
            goto LABEL_26;
          }
          if (v12 == "balanced" && v13 == 8)
          {
LABEL_26:
            v15 = &WebCore::parseEnumerationFromString<WebCore::RTCBundlePolicy>(WTF::String const&)::mappings;
            goto LABEL_27;
          }
          v28 = v14 << 32;
          v29 = v13 != 10;
          if (v12 == "max-bundle" || v13 != 10)
          {
            v30 = *((_DWORD *)v11 + 1);
            if (v12 == "max-bundle" && v13 == 10)
              goto LABEL_75;
          }
          else if ((_DWORD)v14)
          {
            if (*v12 == 109
              && *(_QWORD *)(v12 + 1) == 0x6C646E75622D7861
              && *(_QWORD *)(v12 + 2) == 0x656C646E75622D78)
            {
LABEL_75:
              v15 = &off_1E32D0088;
              goto LABEL_27;
            }
            v29 = 0;
            v30 = 10;
            v28 = 0x100000000;
          }
          else
          {
            if (*(_WORD *)v12 == 109)
            {
              v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968C0A90);
              v97.i16[0] = vminvq_u16(v97);
              v29 = v97.i8[0];
              if (v97.i32[0])
              {
                v98 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968C0AA0);
                v98.i16[0] = vminvq_u16(v98);
                v29 = v98.i8[0];
                if (v98.i32[0])
                  goto LABEL_75;
              }
            }
            else
            {
              v29 = 0;
            }
            v30 = 10;
          }
          if (v12 == "max-compat" || v29)
          {
            if (v13 != 10 || v12 != "max-compat")
              goto LABEL_23;
          }
          else if (v30)
          {
            if (v28)
            {
              if (*v12 != 109
                || *(_QWORD *)(v12 + 1) != 0x61706D6F632D7861
                || *(_QWORD *)(v12 + 2) != 0x7461706D6F632D78)
              {
                goto LABEL_23;
              }
            }
            else
            {
              if (*(_WORD *)v12 != 109)
                goto LABEL_23;
              v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 2), (int16x8_t)xmmword_1968C0AB0);
              v99.i16[0] = vminvq_u16(v99);
              if (!v99.i32[0])
                goto LABEL_23;
              v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v12 + 4), (int16x8_t)xmmword_1968C0AC0);
              v100.i16[0] = vminvq_u16(v100);
              if (!v100.i32[0])
                goto LABEL_23;
            }
          }
          v15 = &off_1E32D00A0;
LABEL_27:
          v9 = *((unsigned int *)v15 + 4) | 0x100000000;
LABEL_28:
          v124 = 0;
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
LABEL_30:
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((result & 1) != 0)
              goto LABEL_350;
          }
          if ((v9 & 0x100000000) == 0)
            goto LABEL_282;
LABEL_32:
          *(_DWORD *)&v119[4] = v9;
          WTF::AtomStringImpl::addLiteral();
          v16 = v113;
          v18 = JSC::JSObject::get(v7, a2, (unint64_t)v113);
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v17);
            else
              *(_DWORD *)v16 -= 2;
          }
          if (*((_DWORD *)v4 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
            if ((result & 1) != 0)
              goto LABEL_350;
          }
          if (v18 == 10)
          {
LABEL_118:
            WTF::AtomStringImpl::addLiteral();
            v41 = v113;
            v43 = JSC::JSObject::get(v7, a2, (unint64_t)v113);
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v42);
              else
                *(_DWORD *)v41 -= 2;
            }
            if (*((_DWORD *)v4 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
              if ((result & 1) != 0)
                goto LABEL_350;
            }
            if (v43 == 10)
            {
              v44 = 0;
            }
            else
            {
              result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLOctet>(a2, v43, (uint64_t)&v113);
              if ((unint64_t)v113 >> 32)
                goto LABEL_350;
              v44 = v113;
            }
            *(_WORD *)&v119[12] = v44;
            WTF::AtomStringImpl::addLiteral();
            v45 = v113;
            v47 = JSC::JSObject::get(v7, a2, (unint64_t)v113);
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v46);
              else
                *(_DWORD *)v45 -= 2;
            }
            if (*((_DWORD *)v4 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
              if ((result & 1) != 0)
                goto LABEL_350;
            }
            if (v47 == 10)
            {
LABEL_196:
              WTF::AtomStringImpl::addLiteral();
              v67 = v113;
              v68 = JSC::JSObject::get(v7, a2, (unint64_t)v113);
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, a2);
                else
                  *(_DWORD *)v67 -= 2;
              }
              if (*((_DWORD *)v4 + 20))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                if ((result & 1) != 0)
                  goto LABEL_350;
              }
              if (v68 == 10)
              {
                *(_DWORD *)v119 = 1;
                goto LABEL_223;
              }
              v69 = (JSC::VM *)*((_QWORD *)a2 + 7);
              v123 = v69;
              v113 = (WTF::StringImpl *)v68;
              if ((v68 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v68 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v113, a2);
                v70 = (const char **)v124;
                if (v124)
                  goto LABEL_208;
                goto LABEL_306;
              }
              v70 = *(const char ***)(v68 + 8);
              if ((v70 & 1) != 0)
              {
                v70 = *(const char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v68, a2);
                if (!v70)
                {
LABEL_207:
                  v124 = (WTF::StringImpl *)v70;
                  if (v70)
                  {
LABEL_208:
                    v71 = *((_DWORD *)v70 + 4);
                    v72 = v70[1];
                    v73 = *((_DWORD *)v70 + 1);
                    if (v72 == "all" || v73 != 3)
                    {
                      if (v72 != "all" || v73 != 3)
                      {
                        if (v72 == "relay" || v73 != 5)
                        {
                          if (v73 != 5 || v72 != "relay")
                          {
                            v74 = 0;
LABEL_218:
                            v124 = 0;
                            if (*(_DWORD *)v70 == 2)
                              WTF::StringImpl::destroy((WTF::StringImpl *)v70, a2);
                            else
                              *(_DWORD *)v70 -= 2;
LABEL_220:
                            if (*((_DWORD *)v69 + 20))
                            {
                              result = JSC::VM::hasExceptionsAfterHandlingTraps(v69);
                              if ((result & 1) != 0)
                                goto LABEL_350;
                            }
                            if ((v74 & 0x100000000) != 0)
                            {
                              *(_DWORD *)v119 = v74;
LABEL_223:
                              WTF::AtomStringImpl::addLiteral();
                              v76 = v113;
                              result = JSC::JSObject::get(v7, a2, (unint64_t)v113);
                              v77 = result;
                              if (v76)
                              {
                                if (*(_DWORD *)v76 == 2)
                                  result = WTF::StringImpl::destroy(v76, a2);
                                else
                                  *(_DWORD *)v76 -= 2;
                              }
                              if (*((_DWORD *)v4 + 20))
                              {
                                result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
                                if ((result & 1) != 0)
                                  goto LABEL_350;
                              }
                              if (v77 == 10)
                                goto LABEL_228;
                              v91 = (JSC::VM *)*((_QWORD *)a2 + 7);
                              v123 = v91;
                              v113 = (WTF::StringImpl *)v77;
                              if ((v77 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v77 + 5) != 2)
                              {
                                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v113, a2);
                                result = (uint64_t)v124;
                                if (v124)
                                  goto LABEL_267;
                                goto LABEL_308;
                              }
                              result = *(_QWORD *)(v77 + 8);
                              if ((result & 1) != 0)
                              {
                                result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v77, a2);
                                if (!result)
                                {
LABEL_266:
                                  v124 = (WTF::StringImpl *)result;
                                  if (result)
                                  {
LABEL_267:
                                    v92 = *(_DWORD *)(result + 16);
                                    v93 = *(const char **)(result + 8);
                                    v94 = *(_DWORD *)(result + 4);
                                    if (v93 == "negotiate" || v94 != 9)
                                    {
                                      if (v93 != "negotiate" || v94 != 9)
                                      {
                                        if (v93 == "require" || v94 != 7)
                                        {
                                          if (v94 != 7 || v93 != "require")
                                            goto LABEL_273;
                                        }
                                        else if ((v92 & 4) != 0)
                                        {
                                          if (*v93 != 114
                                            || *(_DWORD *)(v93 + 1) != 1769304421
                                            || *(_DWORD *)(v93 + 3) != 1701996917)
                                          {
                                            goto LABEL_273;
                                          }
                                        }
                                        else
                                        {
                                          if (*(_WORD *)v93 != 114)
                                            goto LABEL_273;
                                          if (*(_QWORD *)(v93 + 6) != 0x65007200690075
                                            || *(_QWORD *)(v93 + 2) != 0x69007500710065)
                                          {
                                            goto LABEL_273;
                                          }
                                        }
                                        v95 = &off_1E32D00D0;
LABEL_277:
                                        v78 = *((unsigned int *)v95 + 4) | 0x100000000;
LABEL_278:
                                        v124 = 0;
                                        if (*(_DWORD *)result == 2)
                                          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                                        else
                                          *(_DWORD *)result -= 2;
                                        goto LABEL_280;
                                      }
                                    }
                                    else if ((v92 & 4) != 0)
                                    {
                                      if (*v93 != 110
                                        || *(_DWORD *)(v93 + 1) != 1953458021
                                        || *(_DWORD *)(v93 + 5) != 1702125929)
                                      {
LABEL_273:
                                        v78 = 0;
                                        goto LABEL_278;
                                      }
                                    }
                                    else
                                    {
                                      if (*(_WORD *)v93 != 110)
                                        goto LABEL_273;
                                      v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v93 + 2), (int16x8_t)xmmword_1968C0AD0);
                                      v96.i16[0] = vminvq_u16(v96);
                                      if (!v96.i32[0])
                                        goto LABEL_273;
                                    }
                                    v95 = &WebCore::parseEnumerationFromString<WebCore::RTCPMuxPolicy>(WTF::String const&)::mappings;
                                    goto LABEL_277;
                                  }
LABEL_308:
                                  v78 = 0;
LABEL_280:
                                  if (*((_DWORD *)v91 + 20))
                                  {
                                    result = JSC::VM::hasExceptionsAfterHandlingTraps(v91);
                                    if ((result & 1) != 0)
                                      goto LABEL_350;
                                  }
                                  if ((v78 & 0x100000000) != 0)
                                    goto LABEL_229;
                                  goto LABEL_282;
                                }
                              }
                              else if (!result)
                              {
                                goto LABEL_266;
                              }
                              *(_DWORD *)result += 2;
                              goto LABEL_266;
                            }
LABEL_282:
                            result = JSC::throwTypeError();
                            goto LABEL_350;
                          }
                          v75 = &off_1E32D0058;
                        }
                        else
                        {
                          if ((v71 & 4) != 0)
                          {
                            if (*v72 != 114 || *(_WORD *)(v72 + 1) != 27749 || *(_WORD *)(v72 + 3) != 31073)
                              goto LABEL_213;
                          }
                          else if (*(_WORD *)v72 != 114 || *(_QWORD *)(v72 + 2) != 0x790061006C0065)
                          {
                            goto LABEL_213;
                          }
                          v75 = &off_1E32D0058;
                        }
LABEL_217:
                        v74 = *((unsigned int *)v75 + 4) | 0x100000000;
                        goto LABEL_218;
                      }
                    }
                    else if ((v71 & 4) != 0)
                    {
                      if (*v72 != 97 || *(_WORD *)(v72 + 1) != 27756)
                      {
LABEL_213:
                        v74 = 0;
                        goto LABEL_218;
                      }
                    }
                    else if (*(_WORD *)v72 != 97 || *(_DWORD *)(v72 + 2) != 7077996)
                    {
                      goto LABEL_213;
                    }
                    v75 = &WebCore::parseEnumerationFromString<WebCore::RTCIceTransportPolicy>(WTF::String const&)::mappings;
                    goto LABEL_217;
                  }
LABEL_306:
                  v74 = 0;
                  goto LABEL_220;
                }
              }
              else if (!v70)
              {
                goto LABEL_207;
              }
              *(_DWORD *)v70 += 2;
              goto LABEL_207;
            }
            v48 = *((_QWORD *)a2 + 7);
            v123 = (JSC::VM *)v48;
            if ((v47 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v47 + 5) <= 0x16u)
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              JSC::throwTypeError();
              result = (uint64_t)v124;
              v124 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                else
                  *(_DWORD *)result -= 2;
              }
              v53 = 1;
              v115 = 1;
              goto LABEL_150;
            }
            v124 = 0;
            v125 = 0;
            result = JSC::getIterationMode();
            if ((_DWORD)result == 2)
            {
              for (i = 1; ; ++i)
              {
                v51 = (*(_BYTE *)(v47 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v47 + 8) - 8) : 0;
                if (i - 1 >= v51)
                  break;
                IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v47, i - 1, 0);
                if (!IndexQuickly)
                  IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v47, a2, i - 1);
                if (*(_DWORD *)(v48 + 80))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48);
                  if ((result & 1) != 0)
                    break;
                }
                result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCIceServer>>::convert((JSC::VM **)a2, IndexQuickly, (uint64_t)&v124);
                if (*(_QWORD *)(v48 + 16))
                {
                  v57 = JSC::JSArrayIterator::create();
                  if ((i & 0x80000000) != 0)
                    v58 = COERCE__INT64((double)i) + 0x2000000000000;
                  else
                    v58 = i | 0xFFFE000000000000;
                  *(_QWORD *)(v57 + 16) = v58;
                  goto LABEL_167;
                }
              }
            }
            else
            {
              JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v47, v49);
              if (!*(_DWORD *)(v48 + 80)
                || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48), (result & 1) == 0))
              {
                while (1)
                {
                  result = JSC::iteratorStep();
                  if (*(_QWORD *)(v48 + 16) || result == 6)
                    break;
                  v56 = (JSC::JSCell *)JSC::iteratorValue();
                  if (*(_DWORD *)(v48 + 80))
                  {
                    result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48);
                    if ((result & 1) != 0)
                      break;
                  }
                  WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCIceServer>>::convert((JSC::VM **)a2, v56, (uint64_t)&v124);
                  if (*(_QWORD *)(v48 + 16))
                  {
LABEL_167:
                    result = JSC::iteratorClose();
                    break;
                  }
                }
              }
            }
            if (*(_DWORD *)(v48 + 80))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48);
              v59 = v124;
              if ((result & 1) != 0)
              {
                v115 = 1;
                if (HIDWORD(v125))
                {
                  v106 = 48 * HIDWORD(v125);
                  v107 = v124;
                  do
                  {
                    v108 = (WTF::StringImpl *)*((_QWORD *)v107 + 4);
                    *((_QWORD *)v107 + 4) = 0;
                    if (v108)
                    {
                      if (*(_DWORD *)v108 == 2)
                        WTF::StringImpl::destroy(v108, a2);
                      else
                        *(_DWORD *)v108 -= 2;
                    }
                    result = *((_QWORD *)v107 + 3);
                    *((_QWORD *)v107 + 3) = 0;
                    if (result)
                    {
                      if (*(_DWORD *)result == 2)
                        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                      else
                        *(_DWORD *)result -= 2;
                    }
                    v109 = *((unsigned int *)v107 + 4);
                    if ((_DWORD)v109 != -1)
                      result = ((uint64_t (*)(_BYTE *, WTF::StringImpl *))off_1E32D3E60[v109])(v126, v107);
                    *((_DWORD *)v107 + 4) = -1;
                    v107 = (WTF::StringImpl *)((char *)v107 + 48);
                    v106 -= 48;
                  }
                  while (v106);
                }
                if (v59)
                  result = WTF::fastFree(v59, a2);
LABEL_171:
                v53 = v115;
                if (!v115)
                {
                  v60 = v113;
                  v62 = v114;
                  v61 = HIDWORD(v114);
                  v113 = 0;
                  v114 = 0;
                  if (!v118)
                  {
                    v116 = v60;
                    v117 = __PAIR64__(v61, v62);
                    v118 = 1;
                    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore12RTCIceServerELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(result, (WTF::StringImpl *)&v113);
                    goto LABEL_196;
                  }
                  v63 = v116;
                  if (HIDWORD(v117))
                  {
                    v64 = 48 * HIDWORD(v117);
                    do
                    {
                      v65 = (WTF::StringImpl *)*((_QWORD *)v63 + 4);
                      *((_QWORD *)v63 + 4) = 0;
                      if (v65)
                      {
                        if (*(_DWORD *)v65 == 2)
                          WTF::StringImpl::destroy(v65, a2);
                        else
                          *(_DWORD *)v65 -= 2;
                      }
                      result = *((_QWORD *)v63 + 3);
                      *((_QWORD *)v63 + 3) = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
                        else
                          *(_DWORD *)result -= 2;
                      }
                      v66 = *((unsigned int *)v63 + 4);
                      if ((_DWORD)v66 != -1)
                        result = ((uint64_t (*)(WTF::StringImpl **, WTF *))off_1E32D3E60[v66])(&v124, v63);
                      *((_DWORD *)v63 + 4) = -1;
                      v63 = (WTF *)((char *)v63 + 48);
                      v64 -= 48;
                    }
                    while (v64);
                    v63 = v116;
                  }
                  if (v63)
                  {
                    v116 = 0;
                    LODWORD(v117) = 0;
                    result = WTF::fastFree(v63, a2);
                  }
                  v116 = v60;
                  v117 = __PAIR64__(v61, v62);
                  v54 = 1;
                  v53 = v115;
                  goto LABEL_190;
                }
LABEL_150:
                v54 = 0;
                *(_DWORD *)(v3 + 64) = 1;
LABEL_190:
                if (v53 == -1)
                {
                  if (!v54)
                    goto LABEL_233;
                }
                else
                {
                  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D3318[v53])(&v124, &v113);
                  if ((v54 & 1) == 0)
                    goto LABEL_233;
                }
                goto LABEL_196;
              }
            }
            else
            {
              v59 = v124;
            }
            v113 = v59;
            v114 = v125;
            v115 = 0;
            goto LABEL_171;
          }
          v19 = *((_QWORD *)a2 + 7);
          v123 = (JSC::VM *)v19;
          if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            JSC::throwTypeError();
            result = (uint64_t)v113;
            v113 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v24 = 1;
            v115 = 1;
            goto LABEL_56;
          }
          v124 = 0;
          v125 = 0;
          result = JSC::getIterationMode();
          if ((_DWORD)result == 2)
          {
            for (j = 1; ; ++j)
            {
              v22 = (*(_BYTE *)(v18 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v18 + 8) - 8) : 0;
              if (j - 1 >= v22)
                break;
              v23 = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v18, j - 1, 0);
              if (!v23)
                v23 = JSC::JSObject::get((JSC::JSObject *)v18, a2, (j - 1));
              if (*(_DWORD *)(v19 + 80))
              {
                result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19);
                if ((result & 1) != 0)
                  break;
              }
              result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::RTCCertificate>>::convert((WebCore::RTCCertificate **)a2, v23, (uint64_t)&v124);
              if (*(_QWORD *)(v19 + 16))
              {
                v31 = JSC::JSArrayIterator::create();
                v32 = j | 0xFFFE000000000000;
                if (j < 0)
                  v32 = COERCE__INT64((double)j) + 0x2000000000000;
                *(_QWORD *)(v31 + 16) = v32;
                goto LABEL_99;
              }
            }
          }
          else
          {
            JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)v18, v20);
            if (!*(_DWORD *)(v19 + 80)
              || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19), (result & 1) == 0))
            {
              while (1)
              {
                result = JSC::iteratorStep();
                if (*(_QWORD *)(v19 + 16) || result == 6)
                  break;
                v27 = JSC::iteratorValue();
                if (*(_DWORD *)(v19 + 80))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19);
                  if ((result & 1) != 0)
                    break;
                }
                WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::RTCCertificate>>::convert((WebCore::RTCCertificate **)a2, v27, (uint64_t)&v124);
                if (*(_QWORD *)(v19 + 16))
                {
LABEL_99:
                  result = JSC::iteratorClose();
                  break;
                }
              }
            }
          }
          if (*(_DWORD *)(v19 + 80))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v19);
            v33 = v124;
            if ((result & 1) != 0)
            {
              v115 = 1;
              if (HIDWORD(v125))
              {
                v102 = 8 * HIDWORD(v125);
                v103 = v124;
                do
                {
                  result = *(_QWORD *)v103;
                  *(_QWORD *)v103 = 0;
                  if (result)
                  {
                    if (*(_DWORD *)result == 1)
                    {
                      WebCore::RTCCertificate::~RTCCertificate((WebCore::RTCCertificate *)result, a2);
                      result = WTF::fastFree(v104, v105);
                    }
                    else
                    {
                      --*(_DWORD *)result;
                    }
                  }
                  v103 = (WTF::StringImpl *)((char *)v103 + 8);
                  v102 -= 8;
                }
                while (v102);
              }
              if (v33)
                result = WTF::fastFree(v33, a2);
LABEL_103:
              v24 = v115;
              if (!v115)
              {
                v34 = v113;
                v35 = v114;
                v113 = 0;
                v114 = 0;
                if (HIDWORD(v121))
                {
                  v36 = v120;
                  v37 = 8 * HIDWORD(v121);
                  do
                  {
                    v38 = *(WebCore::RTCCertificate **)v36;
                    *(_QWORD *)v36 = 0;
                    if (v38)
                    {
                      if (*(_DWORD *)v38 == 1)
                      {
                        WebCore::RTCCertificate::~RTCCertificate(v38, a2);
                        WTF::fastFree(v39, v40);
                      }
                      else
                      {
                        --*(_DWORD *)v38;
                      }
                    }
                    v36 = (WTF *)((char *)v36 + 8);
                    v37 -= 8;
                  }
                  while (v37);
                }
                result = (uint64_t)v120;
                if (v120)
                {
                  v120 = 0;
                  LODWORD(v121) = 0;
                  result = WTF::fastFree((WTF *)result, a2);
                }
                v120 = v34;
                v121 = v35;
                v25 = 1;
                v24 = v115;
LABEL_115:
                if (v24 != -1)
                  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D3308[v24])(&v124, &v113);
                if (!v25)
                  goto LABEL_233;
                goto LABEL_118;
              }
LABEL_56:
              v25 = 0;
              *(_DWORD *)(v3 + 64) = 1;
              goto LABEL_115;
            }
          }
          else
          {
            v33 = v124;
          }
          v113 = v33;
          v114 = v125;
          v115 = 0;
          goto LABEL_103;
        }
LABEL_90:
        v9 = 0;
        goto LABEL_30;
      }
    }
    else if (!v11)
    {
      goto LABEL_16;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
LABEL_350:
  v80 = 1;
LABEL_232:
  *(_DWORD *)(v3 + 64) = v80;
LABEL_233:
  v83 = v120;
  if (HIDWORD(v121))
  {
    v84 = 8 * HIDWORD(v121);
    do
    {
      result = *(_QWORD *)v83;
      *(_QWORD *)v83 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate((WebCore::RTCCertificate *)result, a2);
          result = WTF::fastFree(v85, v86);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v83 = (WTF *)((char *)v83 + 8);
      v84 -= 8;
    }
    while (v84);
    v83 = v120;
  }
  if (v83)
  {
    v120 = 0;
    LODWORD(v121) = 0;
    result = WTF::fastFree(v83, a2);
  }
  if (v118)
  {
    v87 = v116;
    if (HIDWORD(v117))
    {
      v88 = 48 * HIDWORD(v117);
      do
      {
        v89 = (WTF::StringImpl *)*((_QWORD *)v87 + 4);
        *((_QWORD *)v87 + 4) = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
            WTF::StringImpl::destroy(v89, a2);
          else
            *(_DWORD *)v89 -= 2;
        }
        result = *((_QWORD *)v87 + 3);
        *((_QWORD *)v87 + 3) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v90 = *((unsigned int *)v87 + 4);
        if ((_DWORD)v90 != -1)
          result = ((uint64_t (*)(WTF::StringImpl **, WTF *))off_1E32D3E60[v90])(&v113, v87);
        *((_DWORD *)v87 + 4) = -1;
        v87 = (WTF *)((char *)v87 + 48);
        v88 -= 48;
      }
      while (v88);
      v87 = v116;
    }
    if (v87)
    {
      v116 = 0;
      LODWORD(v117) = 0;
      return WTF::fastFree(v87, a2);
    }
  }
  return result;
}

uint64_t WebCore::JSRTCDTMFSender::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCDTMFSenderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCDTMFSenderPrototype::create(WebCore::JSRTCDTMFSenderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSRTCDTMFSender::s_info, &WebCore::JSRTCDTMFSenderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDTMFSender>,(WebCore::DOMConstructorID)146>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1168);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDTMFSender>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCDTMFSender::s_info + ~((_QWORD)&WebCore::JSRTCDTMFSender::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFSender::s_info + ~((_QWORD)&WebCore::JSRTCDTMFSender::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCDTMFSender::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCDTMFSender::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCDTMFSenderPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCDTMFSenderPrototype::create((WebCore::JSRTCDTMFSenderPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCDTMFSender::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCDTMFSender::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1168) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCDTMFSenderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCDTMFSenderPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDTMFSender>,(WebCore::DOMConstructorID)146>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCDTMFSender_ontonechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2064), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCDTMFSender::~RTCDTMFSender(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDTMFSender_ontonechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDTMFSender::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDTMFSender::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2064), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCDTMFSender::~RTCDTMFSender(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDTMFSender_canInsertDTMF(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int (***v14)(_QWORD);

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 112);
  if (!v3)
    return 6;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 6;
  if (!*(_QWORD *)(v4 + 64))
    return 6;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    return 6;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 6;
  v7 = *(unsigned int *)(v6 + 116);
  if (!(_DWORD)v7)
    return 6;
  v8 = *(_QWORD *)(v6 + 104);
  v9 = 8 * v7;
  result = 6;
  while (*(_QWORD *)(*(_QWORD *)v8 + 40) != v4)
  {
    v8 += 8;
    v9 -= 8;
    if (!v9)
      return result;
  }
  v11 = *(_QWORD *)(*(_QWORD *)v8 + 64);
  if (!v11)
    return 6;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if ((v12 & 0xFF00000000) == 0 || (v12 & 0xFFFFFFFE) != 0)
    return 6;
  v14 = *(unsigned int (****)(_QWORD))(v2 + 120);
  if (!v14)
    return 6;
  if ((**v14)(v14))
    return 7;
  return 6;
}

uint64_t WebCore::jsRTCDTMFSender_toneBuffer(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 128);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::JSRTCDTMFSenderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCDTMFSenderOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RTCDTMFSender *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCDTMFSender *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCDTMFSender **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCDTMFSender **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCDTMFSender **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::RTCDTMFSender::~RTCDTMFSender(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::RTCDTMFSender>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::RTCDTMFSender *__hidden))a3 != off_1E3360520)
  {
    __break(0xC471u);
    JUMPOUT(0x194E24900);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCDTMFSender::s_info + ~((_QWORD)&WebCore::JSRTCDTMFSender::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFSender::s_info + ~((_QWORD)&WebCore::JSRTCDTMFSender::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCDTMFSender::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCDTMFSender::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRTCDTMFSenderPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRTCDTMFSenderPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRTCDTMFSender::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRTCDTMFSender::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1192);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1192);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1192);
    *(_QWORD *)(v30 + 1192) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1192);
  *(_QWORD *)(v26 + 1192) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336570 & 1) == 0)
  {
    qword_1EE336568 = (uint64_t)&off_1E32D27C0;
    byte_1EE336570 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336568;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336568;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCDTMFToneChangeEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  JSC::JSCell *v10;
  JSC::VM *v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WebCore::JSDOMGlobalObject *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  JSC::VM *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  int v50;
  unint64_t v51;
  WebCore::JSEvent *v52;
  JSC::JSCell *v53;
  unint64_t Structure;
  JSC::Structure *v55;
  JSC::JSCell *v56;
  uint64_t v57;
  JSCell *v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  _DWORD *v81;
  int v82;
  JSC::VM *v84;
  JSC::VM *v85;
  WTF::StringImpl *v86;
  JSValue v87;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  int *v103;
  int v104;
  JSC::VM *v105;
  BOOL v106;
  char v107;
  BOOL v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  int v112;
  unint64_t v113;
  int v114;
  JSC::VM *v115;
  JSC::VM *v116;
  uint64_t v117;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v87.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v87);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v111);
  v8 = v112;
  if (!v112)
  {
    v105 = v5;
    v9 = 0xFFFE000000000002;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v12 = 0;
      v9 = 0;
      v13 = 0;
      v11 = 0;
LABEL_48:
      v106 = v12;
      v107 = v9;
      v108 = v13;
      v109 = v11;
      v110 = 0;
      while (1)
      {
        if (!v112)
        {
          v30 = v111;
          v111 = 0;
          v31 = v106;
          v32 = v107 != 0;
          v33 = v108;
          v34 = v109;
          v109 = 0;
          v35 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
          *(_QWORD *)(v35 + 8) = 0;
          if (v31)
            v39 = 1245186;
          else
            v39 = 1245184;
          v40 = v39 | (v30 != 0) | (4 * v32) | (8 * v33) | *(_DWORD *)(v35 + 20) & 0xFFC00000;
          *(_DWORD *)(v35 + 16) = 1;
          *(_DWORD *)(v35 + 20) = v40;
          if (v30)
          {
            *(_DWORD *)v30 += 2;
            v40 = *(_DWORD *)(v35 + 20);
          }
          *(_QWORD *)(v35 + 24) = v30;
          *(_QWORD *)(v35 + 32) = 0;
          *(_QWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          *(_QWORD *)(v35 + 56) = v38;
          *(_QWORD *)(v35 + 64) = 0;
          *(_DWORD *)(v35 + 20) = v40 | 0x4000;
          *(_QWORD *)v35 = off_1E3360688;
          if (v34)
          {
            v41 = *(_DWORD *)v34;
            *(_DWORD *)v34 += 2;
            *(_QWORD *)(v35 + 72) = v34;
            v113 = v35;
            if (v41)
              *(_DWORD *)v34 = v41;
            else
              WTF::StringImpl::destroy(v34, v36);
          }
          else
          {
            *(_QWORD *)(v35 + 72) = 0;
            v113 = v35;
          }
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v36);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (*(void (***)(WebCore::RTCDTMFToneChangeEvent *__hidden))v35 != off_1E3360688)
          {
            __break(0xC471u);
            JUMPOUT(0x194E25238);
          }
          v42 = *(JSC::VM **)(v7 + 40);
          v43 = *((_QWORD *)v42 + 412);
          if (!v43)
            goto LABEL_68;
          v44 = *(_DWORD *)(v43 - 8);
          v45 = ((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
               + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
                                                                                + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) >> 22);
          v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
          v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
          v48 = v44 & ((v47 >> 31) ^ v47);
          v49 = *(char ***)(v43 + 16 * v48);
          if (v49 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
          {
LABEL_67:
            v51 = *(_QWORD *)(v43 + 16 * v48 + 8);
            if (!v51)
              goto LABEL_68;
          }
          else
          {
            v50 = 1;
            while (v49)
            {
              v48 = ((_DWORD)v48 + v50) & v44;
              v49 = *(char ***)(v43 + 16 * v48);
              ++v50;
              if (v49 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
                goto LABEL_67;
            }
LABEL_68:
            v52 = (WebCore::JSEvent *)*((_QWORD *)v42 + 7);
            v53 = (JSC::JSCell *)WebCore::JSEvent::prototype(v52, *(JSC::VM **)(v7 + 40), v37);
            Structure = WebCore::JSRTCDTMFToneChangeEventPrototype::createStructure((uint64_t *)v52, (uint64_t)v42, v53);
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v56 = (JSC::JSCell *)WebCore::JSRTCDTMFToneChangeEventPrototype::create(v52, v42, Structure, v55);
            v57 = WebCore::JSRTCDTMFToneChangeEvent::createStructure((uint64_t *)v52, (uint64_t)v42, v56);
            v51 = WebCore::cacheDOMStructure((JSCell *)v42, v57, (uint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info);
          }
          v58 = (JSCell *)WebCore::JSRTCDTMFToneChangeEvent::create(v51, v42, (uint64_t *)&v113);
          WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v42 + 415), v35, (uint64_t)v58);
          v59 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v59 & 0xFFFE000000000002) != 0
            || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
            || (v62 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v63 = (JSC::VM *)*((_QWORD *)a1 + 7),
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v61),
                *((_DWORD *)v63 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
          {
LABEL_82:
            if (*((_DWORD *)v105 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v105) & 1) != 0)
              v58 = 0;
            v81 = (_DWORD *)v113;
            v113 = 0;
            if (v81)
            {
              if (v81[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
              else
                --v81[4];
            }
            v82 = 0;
            goto LABEL_87;
          }
          v67 = *((_QWORD *)FunctionRealm + 412);
          if (v67)
          {
            v68 = *(_DWORD *)(v67 - 8);
            v69 = ((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
                 + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) >> 22);
            v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
            v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
            v72 = v68 & ((v71 >> 31) ^ v71);
            v73 = *(char ***)(v67 + 16 * v72);
            if (v73 != &WebCore::JSRTCDTMFToneChangeEvent::s_info)
            {
              v74 = 1;
              while (v73)
              {
                v72 = ((_DWORD)v72 + v74) & v68;
                v73 = *(char ***)(v67 + 16 * v72);
                ++v74;
                if (v73 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
                  goto LABEL_78;
              }
              goto LABEL_79;
            }
LABEL_78:
            v64 = *(WebCore::JSDOMGlobalObject **)(v67 + 16 * v72 + 8);
            if (!v64)
              goto LABEL_79;
          }
          else
          {
LABEL_79:
            v75 = (JSC::JSCell *)WebCore::JSEvent::prototype(v63, FunctionRealm, v64);
            v76 = WebCore::JSRTCDTMFToneChangeEventPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
            *(_DWORD *)(v76 + 16) |= 0x80000u;
            v78 = (JSC::JSCell *)WebCore::JSRTCDTMFToneChangeEventPrototype::create(v63, FunctionRealm, v76, v77);
            v79 = WebCore::JSRTCDTMFToneChangeEvent::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
            v64 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info);
          }
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v62, v64, v65);
          if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
            JSC::JSObject::setStructure(v58, v63, SubclassStructure);
          goto LABEL_82;
        }
        v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_152:
        v90 = (_DWORD)v3 == 0;
LABEL_192:
        v12 = !v90;
LABEL_19:
        if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
          goto LABEL_120;
LABEL_20:
        WTF::AtomStringImpl::addLiteral();
        v19 = (WTF::StringImpl *)v113;
        v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, v113);
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v20);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
          goto LABEL_120;
        if (v21 == 10)
        {
          v9 = 0;
          goto LABEL_31;
        }
        v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v21 >= 0xFFFE000000000000)
          break;
        *(_QWORD *)&v23 = v21 - 0x2000000000000;
        if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v21 & v9) != 0)
          {
            v9 = v21 == 7;
            goto LABEL_30;
          }
          v96 = *(unsigned __int8 *)(v21 + 5);
          if (v96 == 3)
          {
            v99 = *(_DWORD *)(v21 + 8);
            goto LABEL_184;
          }
          if (v96 == 2)
          {
            v97 = *(_QWORD *)(v21 + 8);
            if ((v97 & 1) != 0)
              v98 = (int *)(v21 + 16);
            else
              v98 = (int *)(v97 + 4);
            v99 = *v98;
LABEL_184:
            v95 = v99 == 0;
          }
          else
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_186:
              v9 = 1;
              goto LABEL_30;
            }
            v95 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          }
LABEL_196:
          v9 = !v95;
          goto LABEL_30;
        }
        if (v23 > 0.0)
          goto LABEL_186;
        v9 = v23 < 0.0;
LABEL_30:
        if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
          goto LABEL_120;
LABEL_31:
        WTF::AtomStringImpl::addLiteral();
        v24 = (WTF::StringImpl *)v113;
        v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, v113);
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v25);
          else
            *(_DWORD *)v24 -= 2;
        }
        if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
          goto LABEL_120;
        if (v26 == 10)
        {
          v13 = 0;
          goto LABEL_42;
        }
        v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v26 >= 0xFFFE000000000000)
        {
          v100 = (_DWORD)v26 == 0;
          goto LABEL_200;
        }
        *(_QWORD *)&v28 = v26 - 0x2000000000000;
        if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          if ((v26 & 0xFFFE000000000002) != 0)
          {
            v13 = v26 == 7;
            goto LABEL_41;
          }
          v101 = *(unsigned __int8 *)(v26 + 5);
          if (v101 == 3)
          {
            v104 = *(_DWORD *)(v26 + 8);
          }
          else
          {
            if (v101 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_190:
                v13 = 1;
                goto LABEL_41;
              }
              v100 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_200;
            }
            v102 = *(_QWORD *)(v26 + 8);
            if ((v102 & 1) != 0)
              v103 = (int *)(v26 + 16);
            else
              v103 = (int *)(v102 + 4);
            v104 = *v103;
          }
          v100 = v104 == 0;
LABEL_200:
          v13 = !v100;
          goto LABEL_41;
        }
        if (v28 > 0.0)
          goto LABEL_190;
        v13 = v28 < 0.0;
LABEL_41:
        if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
          goto LABEL_120;
LABEL_42:
        WTF::AtomStringImpl::addLiteral();
        v3 = v113;
        v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v113);
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v3, v29);
          else
            *(_DWORD *)v3 -= 2;
        }
        if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
          goto LABEL_120;
        if (v2 == 10)
          goto LABEL_47;
        v117 = v2;
        v84 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if ((v2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v2 + 5) == 2)
        {
          v85 = *(JSC::VM **)(v2 + 8);
          if ((v85 & 1) != 0)
          {
            v85 = *(JSC::VM **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
            if (v85)
LABEL_96:
              *(_DWORD *)v85 += 2;
          }
          else if (v85)
          {
            goto LABEL_96;
          }
          v116 = v85;
          goto LABEL_98;
        }
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v117, a1);
LABEL_98:
        if (*((_DWORD *)v84 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v84);
          v11 = v116;
          if (hasExceptionsAfterHandlingTraps)
          {
            v2 = 1;
            v114 = 1;
            v116 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v89);
              else
                *(_DWORD *)v11 -= 2;
            }
            LODWORD(v3) = 0;
            v11 = 0;
            v110 = 1;
            goto LABEL_101;
          }
        }
        else
        {
          v11 = v116;
        }
        v2 = 0;
        v114 = 0;
        v113 = 0;
        LODWORD(v3) = 1;
LABEL_101:
        ((void (*)(uint64_t *, unint64_t *))off_1E32D2D10[v2])(&v117, &v113);
        if ((_DWORD)v3)
          goto LABEL_48;
        if (!v11)
          goto LABEL_105;
        if (*(_DWORD *)v11 != 2)
        {
          *(_DWORD *)v11 -= 2;
          goto LABEL_105;
        }
        WTF::StringImpl::destroy(v11, v86);
        v82 = v110;
        if (v110)
        {
          v58 = 0;
          if (v110 == -1)
            goto LABEL_88;
          goto LABEL_87;
        }
      }
      v95 = (_DWORD)v21 == 0;
      goto LABEL_196;
    }
    v10 = *(JSC::JSCell **)(a2 + 56);
    v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v115 = v11;
    if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v12 = 0;
      v9 = 0;
      v13 = 0;
LABEL_47:
      v11 = 0;
      goto LABEL_48;
    }
    if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (v14 = JSC::JSCell::getObject(v10)) == 0)
    {
      JSC::throwTypeError();
LABEL_120:
      v110 = 1;
LABEL_105:
      v58 = 0;
      v82 = 1;
LABEL_87:
      ((void (*)(unint64_t *, BOOL *))off_1E32D33F0[v82])(&v113, &v106);
LABEL_88:
      v8 = v112;
      goto LABEL_89;
    }
    v2 = v14;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v113;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, v113);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
      goto LABEL_120;
    if (v3 == 10)
    {
      v12 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
      goto LABEL_152;
    *(_QWORD *)&v18 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v12 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v12 = v3 == 7;
        goto LABEL_19;
      }
      v91 = *(unsigned __int8 *)(v3 + 5);
      if (v91 == 3)
      {
        v94 = *(_DWORD *)(v3 + 8);
LABEL_180:
        v90 = v94 == 0;
        goto LABEL_192;
      }
      if (v91 == 2)
      {
        v92 = *(_QWORD *)(v3 + 8);
        if ((v92 & 1) != 0)
          v93 = (int *)(v3 + 16);
        else
          v93 = (int *)(v92 + 4);
        v94 = *v93;
        goto LABEL_180;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v90 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_192;
      }
    }
    v12 = 1;
    goto LABEL_19;
  }
  v58 = 0;
LABEL_89:
  if (v8 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E32D2930[v8])(&v106, &v111);
  return v58;
}

uint64_t WebCore::JSRTCDTMFToneChangeEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCDTMFToneChangeEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCDTMFToneChangeEventPrototype::create(WebCore::JSRTCDTMFToneChangeEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info, (uint64_t)&WebCore::JSRTCDTMFToneChangeEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCDTMFToneChangeEvent>,(WebCore::DOMConstructorID)147>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1176);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCDTMFToneChangeEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info
                                                                          + ~((_QWORD)&WebCore::JSRTCDTMFToneChangeEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCDTMFToneChangeEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCDTMFToneChangeEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCDTMFToneChangeEventPrototype::create((WebCore::JSRTCDTMFToneChangeEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCDTMFToneChangeEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCDTMFToneChangeEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1176) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCDTMFToneChangeEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCDTMFToneChangeEventPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCDTMFToneChangeEvent>,(WebCore::DOMConstructorID)147>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCDTMFToneChangeEvent_tone(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSRTCDTMFToneChangeEvent::subspaceForImpl(WebCore::JSRTCDTMFToneChangeEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1200);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1200))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1200);
    *(_QWORD *)(v8 + 1200) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1200);
  *(_QWORD *)(v3 + 1200) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSRTCDataChannel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 48);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCDataChannelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCDataChannelPrototype::create(WebCore::JSRTCDataChannelPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<21u>(this, (uint64_t)&WebCore::JSRTCDataChannel::s_info, (uint64_t)&WebCore::JSRTCDataChannelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDataChannel>,(WebCore::DOMConstructorID)148>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1184);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDataChannel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCDataChannel::s_info + ~((_QWORD)&WebCore::JSRTCDataChannel::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannel::s_info + ~((_QWORD)&WebCore::JSRTCDataChannel::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCDataChannel::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCDataChannel::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCDataChannelPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCDataChannelPrototype::create((WebCore::JSRTCDataChannelPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCDataChannel::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCDataChannel::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1184) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCDataChannelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCDataChannelPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDataChannel>,(WebCore::DOMConstructorID)148>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCDataChannel_label(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsRTCDataChannel_ordered(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 97))
  {
    if (*(_BYTE *)(v2 + 96))
      return 7;
    else
      return 6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t WebCore::jsRTCDataChannel_maxPacketLifeTime(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 98) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 98) | 0xFFFE000000000000;
  else
    return 2;
}

unint64_t WebCore::jsRTCDataChannel_maxRetransmits(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 102) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 102) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCDataChannel_protocol(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 112);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::jsRTCDataChannel_negotiated(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 121))
  {
    if (*(_BYTE *)(v2 + 120))
      return 7;
    else
      return 6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t WebCore::jsRTCDataChannel_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 124))
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
      *(_WORD *)(v2 + 122) = v4;
      *(_BYTE *)(v2 + 124) = BYTE2(v4);
    }
  }
  if ((*(_DWORD *)(v2 + 122) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(v2 + 122) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCDataChannel_readyState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 81);
  if ((byte_1EE336504 & 1) == 0)
  {
    dword_1ECE79560 += 2;
    byte_1EE336504 = 1;
    dword_1ECE79580 += 2;
    qword_1EE336668 = (uint64_t)&dword_1ECE79560;
    unk_1EE336670 = &dword_1ECE79580;
    dword_1ECE795A0 += 2;
    dword_1ECE795C0 += 2;
    qword_1EE336678 = (uint64_t)&dword_1ECE795A0;
    unk_1EE336680 = &dword_1ECE795C0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * v4 + 360];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsRTCDataChannel_bufferedAmount(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 128) | 0xFFFE000000000000;
}

uint64_t WebCore::jsRTCDataChannel_priority(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCPriorityType>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 126));
}

unint64_t WebCore::jsRTCDataChannel_bufferedAmountLowThreshold(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 136);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 136) | 0xFFFE000000000000;
}

BOOL WebCore::setJSRTCDataChannel_bufferedAmountLowThreshold(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  _BOOL8 result;
  unsigned int v10;
  int v11;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSRTCDataChannel::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSRTCDataChannel::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, a3, &v10);
  result = v11 == 0;
  if (!v11)
    *(_QWORD *)(v8 + 136) = v10;
  return result;
}

uint64_t WebCore::jsRTCDataChannel_binaryType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 82);
  if ((byte_1EE336503 & 1) == 0)
  {
    dword_1ECE79520 += 2;
    byte_1EE336503 = 1;
    qword_1EE336608 = (uint64_t)&dword_1ECE79520;
    dword_1ECE79540 += 2;
    qword_1EE336610 = (uint64_t)&dword_1ECE79540;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * v4 + 264];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSRTCDataChannel_binaryType(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  char v16;
  int v17;
  char **v19;
  uint16x8_t v21;
  uint16x8_t v22;
  uint64_t v25;
  unint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSRTCDataChannel::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSRTCDataChannel::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v26 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, a1);
        v11 = v25;
        if (v25)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "arraybuffer" && v14 == 11)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 97
                || *(_QWORD *)(v13 + 1) != 0x6666756279617272
                || *(_QWORD *)(v13 + 3) != 0x7265666675627961)
              {
                goto LABEL_27;
              }
            }
            else
            {
              if (*(_WORD *)v13 != 97)
                goto LABEL_27;
              v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C0AE0);
              v21.i16[0] = vminvq_u16(v21);
              if (!v21.i32[0])
                goto LABEL_27;
              v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 6), (int16x8_t)xmmword_1968C0AF0);
              v22.i16[0] = vminvq_u16(v22);
              if (!v22.i32[0])
                goto LABEL_27;
            }
          }
          else if (v13 != "arraybuffer" || v14 != 11)
          {
            if (v13 == "blob" || v14 != 4)
            {
              if (v14 == 4 && v13 == "blob")
                goto LABEL_38;
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 == 98 && *(_WORD *)(v13 + 1) == 28524 && *((_WORD *)v13 + 1) == 25199)
              {
LABEL_38:
                v19 = &off_1E32D0608;
LABEL_49:
                v17 = 0;
                v16 = *((_BYTE *)v19 + 16);
LABEL_50:
                if (*(_DWORD *)v11 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v11 -= 2;
                if (*((_DWORD *)v4 + 20))
                {
                  if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                    goto LABEL_54;
                }
                else if ((v17 & 1) == 0)
                {
LABEL_54:
                  *(_BYTE *)(v10 + 82) = v16;
                  return 1;
                }
                return 0;
              }
            }
            else if (*(_WORD *)v13 == 98 && *((_DWORD *)v13 + 1) == 6422639 && *(_DWORD *)(v13 + 2) == 7274604)
            {
              goto LABEL_38;
            }
LABEL_27:
            v16 = 0;
            v17 = 1;
            goto LABEL_50;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::RTCDataChannel::BinaryType>(WTF::String const&)::mappings;
          goto LABEL_49;
        }
LABEL_42:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_42;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onopen(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1376), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onopen(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1376), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onclose(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 408), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onclosing(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 416), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onclosing(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 416), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1192), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDataChannel_onbufferedamountlow(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 320), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore *)((char *)v5 - 48), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCDataChannel_onbufferedamountlow(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDataChannel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDataChannel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 320), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 6) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::EventTarget *)((char *)v11 - 48), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRTCDataChannelOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 40);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 32)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 48) + 64))(v5 - 48), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCDataChannelOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::RTCDataChannel *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::RTCDataChannel *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::RTCDataChannel *)(v3 - 48);
  v5 = *(_DWORD *)(v3 - 24);
  *(_DWORD *)(v3 - 24) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::RTCDataChannel **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::RTCDataChannel **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 24) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 24) = v5;
  }
  else
  {
    WebCore::RTCDataChannel::~RTCDataChannel(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::wrap<WebCore::RTCDataChannel>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 56);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3360750)
  {
    __break(0xC471u);
    JUMPOUT(0x194E284B0);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCDataChannel::s_info + ~((_QWORD)&WebCore::JSRTCDataChannel::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannel::s_info + ~((_QWORD)&WebCore::JSRTCDataChannel::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCDataChannel::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCDataChannel::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRTCDataChannelPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRTCDataChannelPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRTCDataChannel::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRTCDataChannel::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1208);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1208);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1208);
    *(_QWORD *)(v30 + 1208) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1208);
  *(_QWORD *)(v26 + 1208) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 48;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336580 & 1) == 0)
  {
    qword_1EE336578 = (uint64_t)&off_1E32D27F0;
    byte_1EE336580 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336578;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 56);
    *(_QWORD *)(a3 + 56) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336578;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSRTCDataChannel::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSRTCDataChannel::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSRTCDataChannel::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 48;
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCDataChannelEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  _BOOL4 v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  _BOOL4 v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  JSCell *v26;
  uint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebCore::JSDOMGlobalObject *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  JSC::VM *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  int v53;
  unint64_t v54;
  WebCore::JSEvent *v55;
  JSC::JSCell *v56;
  unint64_t Structure;
  JSC::Structure *v58;
  JSC::JSCell *v59;
  uint64_t v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  WebCore::JSDOMGlobalObject *v66;
  JSC::Structure *v67;
  JSC::VM *FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSCell *v77;
  unint64_t v78;
  JSC::Structure *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  unint64_t SubclassStructure;
  JSC::VM *v83;
  JSValue v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  JSC::VM *v100;
  _BOOL4 v101;
  WTF::StringImpl *v102[2];
  int v103;
  WTF::StringImpl *v104;
  int v105;
  JSC::VM *v106;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v84.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v84);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v104);
  v6 = v105;
  if (!v105)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v106 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v106, "channel", 8, "RTCDataChannelEventInit", 24, "RTCDataChannel", 15);
      goto LABEL_45;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_59:
      JSC::throwTypeError();
      goto LABEL_45;
    }
    v9 = Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v102[0]);
    if (v102[0])
    {
      if (*(_DWORD *)v102[0] == 2)
        WTF::StringImpl::destroy(v102[0], v10);
      else
        *(_DWORD *)v102[0] -= 2;
    }
    if (*((_DWORD *)v106 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) != 0)
    {
LABEL_45:
      v26 = 0;
      v27 = 1;
      v103 = 1;
LABEL_46:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D37B8[v27])(&v106, v102);
      v6 = v105;
      goto LABEL_47;
    }
    if (v11 != 10)
    {
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_131;
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v13 > 0.0 || v13 < 0.0;
        goto LABEL_16;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v14 = v11 == 7;
        goto LABEL_16;
      }
      v86 = *(unsigned __int8 *)(v11 + 5);
      if (v86 == 3)
      {
        v89 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v86 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_175;
          }
          v14 = 1;
          goto LABEL_16;
        }
        v87 = *(_QWORD *)(v11 + 8);
        if ((v87 & 1) != 0)
          v88 = (int *)(v11 + 16);
        else
          v88 = (int *)(v87 + 4);
        v89 = *v88;
      }
      v85 = v89 == 0;
      goto LABEL_175;
    }
    v101 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v16 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v102[0]);
      if (v102[0])
      {
        if (*(_DWORD *)v102[0] == 2)
          WTF::StringImpl::destroy(v102[0], v15);
        else
          *(_DWORD *)v102[0] -= 2;
      }
      if (*((_DWORD *)v106 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) != 0)
        goto LABEL_45;
      if (v16 == 10)
      {
        v17 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = v16 == 7;
          goto LABEL_27;
        }
        v91 = *(unsigned __int8 *)(v16 + 5);
        if (v91 == 3)
        {
          v94 = *(_DWORD *)(v16 + 8);
          goto LABEL_164;
        }
        if (v91 == 2)
        {
          v92 = *(_QWORD *)(v16 + 8);
          if ((v92 & 1) != 0)
            v93 = (int *)(v16 + 16);
          else
            v93 = (int *)(v92 + 4);
          v94 = *v93;
LABEL_164:
          v90 = v94 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_166:
            v17 = 1;
            goto LABEL_27;
          }
          v90 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_179:
        v17 = !v90;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_166;
      v17 = v19 < 0.0;
LABEL_27:
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_45;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v102[0]);
      if (v102[0])
      {
        if (*(_DWORD *)v102[0] == 2)
          WTF::StringImpl::destroy(v102[0], v20);
        else
          *(_DWORD *)v102[0] -= 2;
      }
      if (*((_DWORD *)v106 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) != 0)
        goto LABEL_45;
      if (v21 == 10)
      {
        v22 = 0;
        goto LABEL_39;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v21 >= 0xFFFE000000000000)
      {
        v95 = (_DWORD)v21 == 0;
        goto LABEL_169;
      }
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          v22 = v21 == 7;
          goto LABEL_38;
        }
        v96 = *(unsigned __int8 *)(v21 + 5);
        if (v96 == 3)
        {
          v99 = *(_DWORD *)(v21 + 8);
        }
        else
        {
          if (v96 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_173:
              v22 = 1;
              goto LABEL_38;
            }
            v95 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_169;
          }
          v97 = *(_QWORD *)(v21 + 8);
          if ((v97 & 1) != 0)
            v98 = (int *)(v21 + 16);
          else
            v98 = (int *)(v97 + 4);
          v99 = *v98;
        }
        v95 = v99 == 0;
LABEL_169:
        v22 = !v95;
        goto LABEL_38;
      }
      if (v24 > 0.0)
        goto LABEL_173;
      v22 = v24 < 0.0;
LABEL_38:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_45;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      LODWORD(v11) = v102[0];
      v9 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v102[0]);
      if (v102[0])
      {
        if (*(_DWORD *)v102[0] == 2)
          WTF::StringImpl::destroy(v102[0], v25);
        else
          *(_DWORD *)v102[0] -= 2;
      }
      if (*((_DWORD *)v106 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v106) & 1) != 0)
        goto LABEL_45;
      if (v9 == 10)
        goto LABEL_44;
      v102[0] = *((WTF::StringImpl **)a1 + 7);
      if ((v9 & 0xFFFE000000000002) != 0)
        goto LABEL_59;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v29)
      {
        v31 = 16 * v29;
        if ((char **)v31 != &WebCore::JSRTCDataChannel::s_info)
        {
          do
          {
            v31 = *(_QWORD *)(v31 + 16);
            v30 = v31 != 0;
          }
          while ((char **)v31 != &WebCore::JSRTCDataChannel::s_info && v31 != 0);
        }
      }
      if (!v30)
        goto LABEL_59;
      v100 = v3;
      v33 = v5;
      v34 = *(_QWORD *)(v9 + 24);
      ++*(_DWORD *)(v34 - 24);
      v5 = v101;
      LOBYTE(v102[0]) = v101;
      BYTE1(v102[0]) = v17;
      BYTE2(v102[0]) = v22;
      v103 = 0;
      if (!v105)
      {
        v35 = v34 - 48;
        v36 = v104;
        v104 = 0;
        v102[1] = 0;
        v37 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
        *(_QWORD *)(v37 + 8) = 0;
        if (v17)
          v41 = 4;
        else
          v41 = 0;
        if (v22)
          v42 = 8;
        else
          v42 = 0;
        if (v101)
          v43 = 1277954;
        else
          v43 = 1277952;
        v44 = v43 | v41 | v42 | (v36 != 0) | *(_DWORD *)(v37 + 20) & 0xFFC00000;
        *(_DWORD *)(v37 + 16) = 1;
        *(_DWORD *)(v37 + 20) = v44;
        if (v36)
        {
          *(_DWORD *)v36 += 2;
          v44 = *(_DWORD *)(v37 + 20);
        }
        *(_QWORD *)(v37 + 24) = v36;
        *(_QWORD *)(v37 + 32) = 0;
        *(_QWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = v40;
        *(_DWORD *)(v37 + 20) = v44 | 0x4000;
        *(_QWORD *)v37 = off_1E33608C0;
        *(_QWORD *)(v37 + 64) = 0;
        *(_QWORD *)(v37 + 72) = v35;
        v106 = (JSC::VM *)v37;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::destroy(v36, v38);
            if (*(void (***)(WebCore::RTCDataChannelEvent *__hidden))v37 != off_1E33608C0)
            {
              __break(0xC471u);
              JUMPOUT(0x194E28D98);
            }
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
        v45 = *(JSC::VM **)(v33 + 40);
        v46 = *((_QWORD *)v45 + 412);
        if (!v46)
          goto LABEL_81;
        v47 = *(_DWORD *)(v46 - 8);
        v48 = ((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
             + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) >> 22);
        v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
        v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
        v51 = v47 & ((v50 >> 31) ^ v50);
        v52 = *(char ***)(v46 + 16 * v51);
        if (v52 == &WebCore::JSRTCDataChannelEvent::s_info)
        {
LABEL_80:
          v54 = *(_QWORD *)(v46 + 16 * v51 + 8);
          if (!v54)
            goto LABEL_81;
        }
        else
        {
          v53 = 1;
          while (v52)
          {
            v51 = ((_DWORD)v51 + v53) & v47;
            v52 = *(char ***)(v46 + 16 * v51);
            ++v53;
            if (v52 == &WebCore::JSRTCDataChannelEvent::s_info)
              goto LABEL_80;
          }
LABEL_81:
          v55 = (WebCore::JSEvent *)*((_QWORD *)v45 + 7);
          v56 = (JSC::JSCell *)WebCore::JSEvent::prototype(v55, *(JSC::VM **)(v33 + 40), v39);
          Structure = WebCore::JSRTCDataChannelEventPrototype::createStructure((uint64_t *)v55, (uint64_t)v45, v56);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v59 = (JSC::JSCell *)WebCore::JSRTCDataChannelEventPrototype::create(v55, v45, Structure, v58);
          v60 = WebCore::JSRTCDataChannelEvent::createStructure((uint64_t *)v55, (uint64_t)v45, v59);
          v54 = WebCore::cacheDOMStructure((JSCell *)v45, v60, (uint64_t)&WebCore::JSRTCDataChannelEvent::s_info);
        }
        v26 = (JSCell *)WebCore::JSRTCDataChannelEvent::create(v54, v45, (uint64_t *)&v106);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v45 + 415), v37, (uint64_t)v26);
        v61 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v61 & 0xFFFE000000000002) != 0
          || (v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61)) == 0
          || (v64 = v62, v62 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v65 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v62, v63),
              *((_DWORD *)v65 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
        {
LABEL_95:
          if (*((_DWORD *)v100 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100) & 1) != 0)
            v26 = 0;
          v83 = v106;
          v106 = 0;
          if (v83)
          {
            if (*((_DWORD *)v83 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v83 + 8))(v83);
            else
              --*((_DWORD *)v83 + 4);
          }
          v27 = 0;
          goto LABEL_46;
        }
        v69 = *((_QWORD *)FunctionRealm + 412);
        if (v69)
        {
          v70 = *(_DWORD *)(v69 - 8);
          v71 = ((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
               + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) >> 22);
          v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
          v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
          v74 = v70 & ((v73 >> 31) ^ v73);
          v75 = *(char ***)(v69 + 16 * v74);
          if (v75 != &WebCore::JSRTCDataChannelEvent::s_info)
          {
            v76 = 1;
            while (v75)
            {
              v74 = ((_DWORD)v74 + v76) & v70;
              v75 = *(char ***)(v69 + 16 * v74);
              ++v76;
              if (v75 == &WebCore::JSRTCDataChannelEvent::s_info)
                goto LABEL_91;
            }
            goto LABEL_92;
          }
LABEL_91:
          v66 = *(WebCore::JSDOMGlobalObject **)(v69 + 16 * v74 + 8);
          if (!v66)
            goto LABEL_92;
        }
        else
        {
LABEL_92:
          v77 = (JSC::JSCell *)WebCore::JSEvent::prototype(v65, FunctionRealm, v66);
          v78 = WebCore::JSRTCDataChannelEventPrototype::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v77);
          *(_DWORD *)(v78 + 16) |= 0x80000u;
          v80 = (JSC::JSCell *)WebCore::JSRTCDataChannelEventPrototype::create(v65, FunctionRealm, v78, v79);
          v81 = WebCore::JSRTCDataChannelEvent::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v80);
          v66 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v81, (uint64_t)&WebCore::JSRTCDataChannelEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v66, v67);
        if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
          JSC::JSObject::setStructure(v26, v65, SubclassStructure);
        goto LABEL_95;
      }
      v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_131:
      v85 = (_DWORD)v11 == 0;
LABEL_175:
      v14 = !v85;
LABEL_16:
      v101 = v14;
      if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
        goto LABEL_45;
    }
    v90 = (_DWORD)v16 == 0;
    goto LABEL_179;
  }
  v26 = 0;
LABEL_47:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2930[v6])(v102, &v104);
  return v26;
}

uint64_t WebCore::JSRTCDataChannelEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCDataChannelEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCDataChannelEventPrototype::create(WebCore::JSRTCDataChannelEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRTCDataChannelEvent::s_info, (uint64_t)&WebCore::JSRTCDataChannelEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCDataChannelEvent>,(WebCore::DOMConstructorID)149>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1192);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCDataChannelEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDataChannelEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSRTCDataChannelEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCDataChannelEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCDataChannelEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCDataChannelEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCDataChannelEventPrototype::create((WebCore::JSRTCDataChannelEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCDataChannelEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCDataChannelEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1192) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCDataChannelEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCDataChannelEventPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCDataChannelEvent>,(WebCore::DOMConstructorID)149>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCDataChannelEvent_channel(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::RTCDataChannel>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::JSRTCDataChannelEvent::subspaceForImpl(WebCore::JSRTCDataChannelEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1216);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1216))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1216);
    *(_QWORD *)(v8 + 1216) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1216);
  *(_QWORD *)(v3 + 1216) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCDegradationPreference>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_0::operator() const(void)::impl;
    unk_1EE2F49B0 = &WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F49B8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCDegradationPreference)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::RTCDegradationPreference>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  uint16x8_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint64_t v24;
  unint64_t v25;

  v3 = a1;
  v25 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, a1);
  v4 = v24;
  if (!v24)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "balanced" && v7 == 8)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 98 || *(_DWORD *)(v6 + 1) != 1851878497 || *((_DWORD *)v6 + 1) != 1684366190)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 98)
        goto LABEL_16;
      v14 = *(_QWORD *)(v6 + 2);
      v15 = *((_QWORD *)v6 + 1);
      if (v14 != 0x6E0061006C0061 || v15 != 0x6400650063006ELL)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v6 == "balanced" && v7 == 8)
  {
LABEL_41:
    v13 = &WebCore::parseEnumerationFromString<WebCore::RTCDegradationPreference>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 != "maintain-framerate" && v7 == 18)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 109)
        goto LABEL_16;
      v12 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v6 + 2), (int8x16_t)xmmword_1968C0B10), vceqq_s8(*(int8x16_t *)(v6 + 1), (int8x16_t)xmmword_1968C0B00));
      v12.i8[0] = vminvq_u8((uint8x16_t)v12);
    }
    else
    {
      if (*(_WORD *)v6 != 109)
        goto LABEL_16;
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0B20);
      v18.i16[0] = vminvq_u16(v18);
      if (!v18.i32[0])
        goto LABEL_16;
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968C0B30);
      v19.i16[0] = vminvq_u16(v19);
      if (!v19.i32[0])
        goto LABEL_16;
      v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 20), (int16x8_t)xmmword_1968C0B40);
      v12.i16[0] = vminvq_u16(v12);
    }
    if (!v12.i32[0])
      goto LABEL_16;
  }
  else if (v6 != "maintain-framerate" || v7 != 18)
  {
    if (v6 == "maintain-resolution" || v7 != 19)
    {
      if (v7 == 19 && v6 == "maintain-resolution")
        goto LABEL_58;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 109
        && vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v6 + 3), (int8x16_t)xmmword_1968C0B60), vceqq_s8(*(int8x16_t *)(v6 + 1), (int8x16_t)xmmword_1968C0B50))))
      {
LABEL_58:
        v13 = &off_1E32D0A50;
        goto LABEL_42;
      }
    }
    else if (*(_WORD *)v6 == 109)
    {
      v20 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0B20);
      v20.i16[0] = vminvq_u16(v20);
      if (v20.i32[0])
      {
        v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968C0B70);
        v21.i16[0] = vminvq_u16(v21);
        if (v21.i32[0])
        {
          v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 22), (int16x8_t)xmmword_1968C0B80);
          v22.i16[0] = vminvq_u16(v22);
          if (v22.i32[0])
            goto LABEL_58;
        }
      }
    }
LABEL_16:
    v9 = 0;
    goto LABEL_43;
  }
  v13 = &off_1E32D0A38;
LABEL_42:
  v9 = *((unsigned int *)v13 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::JSRTCDtlsTransport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCDtlsTransportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCDtlsTransportPrototype::create(WebCore::JSRTCDtlsTransportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSRTCDtlsTransport::s_info, &WebCore::JSRTCDtlsTransportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDtlsTransport>,(WebCore::DOMConstructorID)150>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1200);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDtlsTransport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCDtlsTransport::s_info + ~((_QWORD)&WebCore::JSRTCDtlsTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDtlsTransport::s_info + ~((_QWORD)&WebCore::JSRTCDtlsTransport::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCDtlsTransport::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCDtlsTransport::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCDtlsTransportPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCDtlsTransportPrototype::create((WebCore::JSRTCDtlsTransportPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCDtlsTransport::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCDtlsTransport::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1200) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCDtlsTransportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCDtlsTransportPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCDtlsTransport>,(WebCore::DOMConstructorID)150>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCDtlsTransport_iceTransport(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::RTCIceTransport>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48));
}

uint64_t WebCore::jsRTCDtlsTransport_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<RTCDtlsTransportState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 56));
}

uint64_t WebCore::jsRTCDtlsTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSRTCDtlsTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDtlsTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDtlsTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1984), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCDtlsTransport_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSRTCDtlsTransport_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCDtlsTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCDtlsTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRTCDtlsTransportOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCDtlsTransportOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::RTCDtlsTransport *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::RTCDtlsTransport *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::RTCDtlsTransport *)(v3 - 32);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::RTCDtlsTransport **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::RTCDtlsTransport **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport(v4);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::wrap<WebCore::RTCDtlsTransport>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3360A20)
  {
    __break(0xC471u);
    JUMPOUT(0x194E2B2C4);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCDtlsTransport::s_info + ~((_QWORD)&WebCore::JSRTCDtlsTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCDtlsTransport::s_info + ~((_QWORD)&WebCore::JSRTCDtlsTransport::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCDtlsTransport::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCDtlsTransport::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRTCDtlsTransportPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRTCDtlsTransportPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRTCDtlsTransport::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRTCDtlsTransport::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1224);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1224);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1224);
    *(_QWORD *)(v30 + 1224) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1224);
  *(_QWORD *)(v26 + 1224) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336590 & 1) == 0)
  {
    qword_1EE336588 = (uint64_t)&off_1E32D2820;
    byte_1EE336590 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336588;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336588;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<RTCDtlsTransportState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_0::operator() const(void)::impl;
    unk_1EE2F49D0 = &WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_1::operator() const(void)::impl;
    qword_1EE2F49D8 = (uint64_t)&WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_2::operator() const(void)::impl;
    unk_1EE2F49E0 = &WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_3::operator() const(void)::impl;
    WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_4::operator() const(void)::impl += 2;
    qword_1EE2F49E8 = (uint64_t)&WebCore::convertEnumerationToString(RTCDtlsTransportState)::$_4::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(RTCDtlsTransportState)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCDtxStatus>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::$_0::operator() const(void)::impl;
    unk_1EE2F4A00 = &WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::$_1::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCDtxStatus)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::RTCDtxStatus>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "disabled" && v7 == 8)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_DWORD *)(v6 + 1) != 1650553705 || *((_DWORD *)v6 + 1) != 1684368482)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v13 = *(_QWORD *)(v6 + 2);
      v14 = *((_QWORD *)v6 + 1);
      if (v13 != 0x62006100730069 || v14 != 0x640065006C0062)
        goto LABEL_16;
    }
LABEL_41:
    v12 = &WebCore::parseEnumerationFromString<WebCore::RTCDtxStatus>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "disabled" && v7 == 8)
    goto LABEL_41;
  if (v6 == "enabled" || v7 != 7)
  {
    if (v7 != 7 || v6 != "enabled")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 101)
      goto LABEL_16;
    if (*(_QWORD *)(v6 + 6) != 0x640065006C0062 || *(_QWORD *)(v6 + 2) != 0x6C00620061006ELL)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 101 || *(_DWORD *)(v6 + 1) != 1818386798 || *(_DWORD *)(v6 + 3) != 1684368482)
  {
LABEL_16:
    v9 = 0;
    goto LABEL_43;
  }
LABEL_30:
  v12 = &off_1E32D0D88;
LABEL_42:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

_DWORD *WebCore::JSRTCEncodedAudioFrame::destroy(WebCore::JSRTCEncodedAudioFrame *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSRTCEncodedAudioFrame::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCEncodedAudioFramePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCEncodedAudioFramePrototype::create(WebCore::JSRTCEncodedAudioFramePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info, &WebCore::JSRTCEncodedAudioFramePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedAudioFrame>,(WebCore::DOMConstructorID)151>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1208);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedAudioFrame>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info
         + ~((_QWORD)&WebCore::JSRTCEncodedAudioFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCEncodedAudioFrame::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCEncodedAudioFrame::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCEncodedAudioFrame::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCEncodedAudioFramePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCEncodedAudioFramePrototype::create((WebCore::JSRTCEncodedAudioFramePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCEncodedAudioFrame::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1208) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCEncodedAudioFrameConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCEncodedAudioFramePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedAudioFrame>,(WebCore::DOMConstructorID)151>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCEncodedAudioFrame_timestamp(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16));
  v3 = v2 | 0xFFFE000000000000;
  if ((v2 & 0x80000000) != 0)
    v3 = COERCE__INT64((double)v2) + 0x2000000000000;
  if (HIDWORD(v2))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v3;
}

uint64_t WebCore::jsRTCEncodedAudioFrame_data(WebCore *a1, uint64_t a2)
{
  uint64_t v3;
  JSC::ArrayBuffer *v4;
  WTF::DeferrableRefCountedBase *v5;
  uint64_t v6;
  WebCore::JSDOMGlobalObject *v8;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::RTCEncodedFrame::data(*(uint64_t **)(a2 + 24), &v8);
  v5 = v8;
  if (!v8)
    return 2;
  v6 = WebCore::toJS(a1, v3, v8, v4);
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  return v6;
}

BOOL WebCore::setJSRTCEncodedAudioFrame_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::ArrayBuffer *v11;
  _BOOL8 v12;
  WTF::DeferrableRefCountedBase *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCEncodedAudioFrame::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCEncodedAudioFrame::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = v4;
  v11 = (JSC::ArrayBuffer *)JSC::JSArrayBuffer::toWrapped(v4, a3);
  v12 = v11 != 0;
  if (v11)
  {
    v13 = v11;
    *(_DWORD *)v11 += 2;
    v17 = 0;
    v16 = 0;
    WebCore::RTCEncodedFrame::setData(v10, v11);
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
    v14 = 0;
  }
  else
  {
    WebCore::throwAttributeTypeError(v3, (int)&v18, "RTCEncodedAudioFrame", 21, "data", 5, "ArrayBuffer", 12);
    v14 = 1;
    v17 = 1;
  }
  ((void (*)(uint64_t *, uint64_t *))off_1E32D3798[v14])(&v18, &v16);
  return v12;
}

uint64_t WebCore::JSRTCEncodedAudioFrameOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSRTCEncodedAudioFrameOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::RTCEncodedAudioFrame>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::RTCEncodedAudioFrame *__hidden))a3 != off_1E3360B50)
  {
    __break(0xC471u);
    JUMPOUT(0x194E2C880);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info
         + ~((_QWORD)&WebCore::JSRTCEncodedAudioFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCEncodedAudioFrame::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSRTCEncodedAudioFrame::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSRTCEncodedAudioFrame::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCEncodedAudioFramePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCEncodedAudioFramePrototype::create((WebCore::JSRTCEncodedAudioFramePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSRTCEncodedAudioFrame::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCEncodedAudioFrame::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1232);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1232))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1232);
    *(_QWORD *)(v36 + 1232) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1232);
  *(_QWORD *)(v32 + 1232) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3365A0 & 1) == 0)
  {
    qword_1EE336598 = (uint64_t)&off_1E32D2850;
    byte_1EE3365A0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336598;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSRTCEncodedVideoFrame::destroy(WebCore::JSRTCEncodedVideoFrame *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSRTCEncodedVideoFrame::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCEncodedVideoFramePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCEncodedVideoFramePrototype::create(WebCore::JSRTCEncodedVideoFramePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info, &WebCore::JSRTCEncodedVideoFramePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedVideoFrame>,(WebCore::DOMConstructorID)152>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1216);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedVideoFrame>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info
         + ~((_QWORD)&WebCore::JSRTCEncodedVideoFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCEncodedVideoFrame::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCEncodedVideoFrame::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCEncodedVideoFrame::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCEncodedVideoFramePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCEncodedVideoFramePrototype::create((WebCore::JSRTCEncodedVideoFramePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCEncodedVideoFrame::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1216) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCEncodedVideoFrameConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCEncodedVideoFramePrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCEncodedVideoFrame>,(WebCore::DOMConstructorID)152>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCEncodedVideoFrame_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 32);
  if ((byte_1EE336505 & 1) == 0)
  {
    dword_1ECE795E0 += 2;
    byte_1EE336505 = 1;
    dword_1ECE79600 += 2;
    qword_1EE336650 = (uint64_t)&dword_1ECE795E0;
    unk_1EE336658 = &dword_1ECE79600;
    dword_1ECE79620 += 2;
    qword_1EE336660 = (uint64_t)&dword_1ECE79620;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * v4 + 336];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsRTCEncodedVideoFrame_timestamp(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16));
  v3 = v2 | 0xFFFE000000000000;
  if ((v2 & 0x80000000) != 0)
    v3 = COERCE__INT64((double)v2) + 0x2000000000000;
  if (HIDWORD(v2))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v3;
}

uint64_t WebCore::jsRTCEncodedVideoFrame_data(WebCore *a1, uint64_t a2)
{
  uint64_t v3;
  JSC::ArrayBuffer *v4;
  WTF::DeferrableRefCountedBase *v5;
  uint64_t v6;
  WebCore::JSDOMGlobalObject *v8;

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::RTCEncodedFrame::data(*(uint64_t **)(a2 + 24), &v8);
  v5 = v8;
  if (!v8)
    return 2;
  v6 = WebCore::toJS(a1, v3, v8, v4);
  WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v5);
  return v6;
}

BOOL WebCore::setJSRTCEncodedVideoFrame_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::ArrayBuffer *v11;
  _BOOL8 v12;
  WTF::DeferrableRefCountedBase *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCEncodedVideoFrame::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCEncodedVideoFrame::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v18 = v4;
  v11 = (JSC::ArrayBuffer *)JSC::JSArrayBuffer::toWrapped(v4, a3);
  v12 = v11 != 0;
  if (v11)
  {
    v13 = v11;
    *(_DWORD *)v11 += 2;
    v17 = 0;
    v16 = 0;
    WebCore::RTCEncodedFrame::setData(v10, v11);
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v13);
    v14 = 0;
  }
  else
  {
    WebCore::throwAttributeTypeError(v3, (int)&v18, "RTCEncodedVideoFrame", 21, "data", 5, "ArrayBuffer", 12);
    v14 = 1;
    v17 = 1;
  }
  ((void (*)(uint64_t *, uint64_t *))off_1E32D3798[v14])(&v18, &v16);
  return v12;
}

uint64_t WebCore::JSRTCEncodedVideoFrameOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSRTCEncodedVideoFrameOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::RTCEncodedVideoFrame>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::RTCEncodedVideoFrame *__hidden))a3 != off_1E3361390)
  {
    __break(0xC471u);
    JUMPOUT(0x194E2DAB0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info
         + ~((_QWORD)&WebCore::JSRTCEncodedVideoFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCEncodedVideoFrame::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSRTCEncodedVideoFrame::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSRTCEncodedVideoFrame::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCEncodedVideoFramePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCEncodedVideoFramePrototype::create((WebCore::JSRTCEncodedVideoFramePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSRTCEncodedVideoFrame::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCEncodedVideoFrame::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1240);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1240))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1240);
    *(_QWORD *)(v36 + 1240) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1240);
  *(_QWORD *)(v32 + 1240) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3365B0 & 1) == 0)
  {
    qword_1EE3365A8 = (uint64_t)&off_1E32D2880;
    byte_1EE3365B0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3365A8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCError>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  JSCell *v11;
  JSC::VM *v12;
  WTF *v13;
  const char *v14;
  int v15;
  unint64_t v16;
  uint16x8_t v17;
  char v18;
  int v19;
  char **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  char v24;
  unsigned __int8 v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  char v30;
  int v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  char v36;
  int v37;
  int v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  char v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  char v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WebCore::JSDOMGlobalObject *v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  int v57;
  JSC::JSCell *v58;
  JSC::JSGlobalObject *v59;
  JSC::JSObject *v60;
  JSC::JSGlobalObject *v61;
  JSC::VM *v62;
  JSC::JSObject *v63;
  JSC::Structure *v64;
  JSC::VM *FunctionRealm;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char **v72;
  int v73;
  uint64_t v74;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  uint64_t v81;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  uint16x8_t v93;
  uint16x8_t v94;
  JSValue v95;
  uint16x8_t v96;
  uint16x8_t v97;
  int v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v104;
  unint64_t v105;
  unint64_t v106;
  uint8x16_t v107;
  uint16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  int v112;
  char v113;
  JSC::VM *v114;
  int v115;
  int v116;
  char v117;
  unsigned int v118;
  char v119;
  char v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  int v123;
  __int16 v124;
  char v125;
  __int16 v126;
  char v127;
  __int16 v128;
  char v129;
  __int16 v130;
  char v131;
  __int16 v132;
  char v133;
  __int16 v134;
  char v135;
  __int16 v136;
  char v137;
  __int16 v138;
  char v139;
  __int16 v140;
  char v141;
  __int16 v142;
  char v143;
  JSC::VM *v144;
  WTF::StringImpl *v145;
  WTF *v146[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v95.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v95);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v144 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_10:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v144, "errorDetail", 12, "RTCErrorInit", 13, "RTCErrorDetailType", 19);
    return 0;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
  {
LABEL_158:
    JSC::throwTypeError();
    return 0;
  }
  v8 = (JSC::Structure *)Object;
  v121 = v5;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, a1, (unint64_t)v122);
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v9);
    else
      *(_DWORD *)v122 -= 2;
  }
  if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
    return 0;
  if (v10 == 10)
    goto LABEL_10;
  v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v145 = v12;
  v122 = (WTF::StringImpl *)v10;
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v122, a1);
    v13 = v146[0];
    if (v146[0])
      goto LABEL_18;
LABEL_138:
    v18 = 0;
    v19 = 0;
    goto LABEL_31;
  }
  v13 = *(WTF **)(v10 + 8);
  if ((v13 & 1) == 0)
  {
    if (!v13)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = *(WTF **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, a1);
  if (v13)
LABEL_16:
    *(_DWORD *)v13 += 2;
LABEL_17:
  v146[0] = v13;
  if (!v13)
    goto LABEL_138;
LABEL_18:
  v14 = (const char *)*((_QWORD *)v13 + 1);
  v15 = *((_DWORD *)v13 + 1);
  v16 = ((unint64_t)*((unsigned int *)v13 + 4) >> 2) & 1;
  if (v14 != "data-channel-failure" && v15 == 20)
  {
    if ((_DWORD)v16)
    {
      if (*v14 != 100)
      {
LABEL_24:
        v18 = 0;
        v19 = 0;
        goto LABEL_29;
      }
      v17 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v14 + 4), (int8x16_t)xmmword_1968C0BA0), vceqq_s8(*(int8x16_t *)(v14 + 1), (int8x16_t)xmmword_1968C0B90));
      v17.i8[0] = vminvq_u8((uint8x16_t)v17);
    }
    else
    {
      if (*(_WORD *)v14 != 100)
        goto LABEL_24;
      v93 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968C0BB0);
      v93.i16[0] = vminvq_u16(v93);
      if (!v93.i32[0])
        goto LABEL_24;
      v94 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 8), (int16x8_t)xmmword_1968C0BC0);
      v94.i16[0] = vminvq_u16(v94);
      if (!v94.i32[0])
        goto LABEL_24;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 24), (int16x8_t)xmmword_1968C0BD0);
      v17.i16[0] = vminvq_u16(v17);
    }
    if (!v17.i32[0])
      goto LABEL_24;
    goto LABEL_27;
  }
  if (v14 == "data-channel-failure" && v15 == 20)
  {
LABEL_27:
    v20 = &WebCore::parseEnumerationFromString<WebCore::RTCErrorDetailType>(WTF::String const&)::mappings;
    goto LABEL_28;
  }
  v83 = v16 << 32;
  v84 = v15 != 12;
  if (v14 != "dtls-failure" && v15 == 12)
  {
    if ((_DWORD)v16)
    {
      if (*v14 == 100 && *(_QWORD *)(v14 + 1) == 0x6C6961662D736C74 && *(_QWORD *)(v14 + 4) == 0x6572756C6961662DLL)
      {
LABEL_118:
        v20 = &off_1E32D16B8;
        goto LABEL_28;
      }
    }
    else if (*(_WORD *)v14 == 100)
    {
      v96 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968C0BE0);
      v96.i16[0] = vminvq_u16(v96);
      v84 = v96.i8[0];
      if (v96.i32[0])
      {
        v97 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 8), (int16x8_t)xmmword_1968C0BD0);
        v97.i16[0] = vminvq_u16(v97);
        v84 = v97.i8[0];
        if (v97.i32[0])
          goto LABEL_118;
      }
      goto LABEL_169;
    }
    v84 = 0;
LABEL_169:
    v98 = 12;
    goto LABEL_170;
  }
  if (v14 == "dtls-failure" && v15 == 12)
    goto LABEL_118;
  if (v14 != "fingerprint-failure" && v15 == 19)
  {
    if ((_DWORD)v16)
    {
      if (*v14 != 102
        || (v107 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v14 + 3), (int8x16_t)xmmword_1968C0C00), vceqq_s8(*(int8x16_t *)(v14 + 1), (int8x16_t)xmmword_1968C0BF0)), v107.i8[0] = vminvq_u8(v107), !v107.i32[0]))
      {
        v98 = 19;
        v83 = 0x100000000;
        goto LABEL_170;
      }
    }
    else if (*(_WORD *)v14 != 102
           || (v109 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968C0C10),
               v109.i16[0] = vminvq_u16(v109),
               !v109.i32[0])
           || (v110 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 6), (int16x8_t)xmmword_1968C0C20),
               v110.i16[0] = vminvq_u16(v110),
               !v110.i32[0])
           || (v111 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 22), (int16x8_t)xmmword_1968C0BD0),
               v111.i16[0] = vminvq_u16(v111),
               !v111.i32[0]))
    {
      v98 = 19;
      goto LABEL_170;
    }
LABEL_230:
    v20 = &off_1E32D16D0;
    goto LABEL_28;
  }
  v98 = *((_DWORD *)v13 + 1);
  if (v14 == "fingerprint-failure" && v15 == 19)
    goto LABEL_230;
LABEL_170:
  if (v14 == "sctp-failure" || v84)
  {
    if (v14 == "sctp-failure" && v15 == 12)
      goto LABEL_177;
  }
  else
  {
    if (!v98)
    {
LABEL_177:
      v20 = &off_1E32D16E8;
      goto LABEL_28;
    }
    if ((v83 & 0x100000000) != 0)
    {
      if (*v14 == 115 && *(_QWORD *)(v14 + 1) == 0x6C6961662D707463 && *(_QWORD *)(v14 + 4) == 0x6572756C6961662DLL)
        goto LABEL_177;
      v83 = 0x100000000;
    }
    else if (*(_WORD *)v14 == 115)
    {
      v99 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968C0C30);
      v99.i16[0] = vminvq_u16(v99);
      if (v99.i32[0])
      {
        v100 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 8), (int16x8_t)xmmword_1968C0BD0);
        v100.i16[0] = vminvq_u16(v100);
        if (v100.i32[0])
          goto LABEL_177;
      }
    }
  }
  if (v14 == "sdp-syntax-error" || v98 != 16)
  {
    if (v98 != 16 || v14 != "sdp-syntax-error")
      goto LABEL_24;
  }
  else if ((v83 & 0x100000000) != 0)
  {
    if (*v14 != 115 || *(_QWORD *)(v14 + 1) != 0x61746E79732D7064 || *((_QWORD *)v14 + 1) != 0x726F7272652D7861)
      goto LABEL_24;
  }
  else
  {
    if (*(_WORD *)v14 != 115)
      goto LABEL_24;
    v101 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v14 + 2), (int16x8_t)xmmword_1968C0C40);
    v101.i16[0] = vminvq_u16(v101);
    if (!v101.i32[0])
      goto LABEL_24;
    v102 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v14 + 1), (int16x8_t)xmmword_1968C0C50);
    v102.i16[0] = vminvq_u16(v102);
    if (!v102.i32[0])
      goto LABEL_24;
  }
  v20 = &off_1E32D1700;
LABEL_28:
  v18 = *((_BYTE *)v20 + 16);
  v19 = 1;
LABEL_29:
  v146[0] = 0;
  if (*(_DWORD *)v13 == 2)
    WTF::StringImpl::destroy(v13, v9);
  else
    *(_DWORD *)v13 -= 2;
LABEL_31:
  if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
    return 0;
  if (!v19)
    goto LABEL_158;
  v120 = v18;
  WTF::AtomStringImpl::addLiteral();
  v21 = v122;
  v23 = JSC::JSObject::get(v8, a1, (unint64_t)v122);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
    return 0;
  if (v23 == 10)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v23, &v122);
    if (HIDWORD(v122))
      return 0;
    v25 = v122;
    v26 = v122 & 0xFFFFFF00;
    v24 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v27 = v122;
  v29 = JSC::JSObject::get(v8, a1, (unint64_t)v122);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  v118 = v26;
  v119 = v24;
  if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
    return 0;
  if (v29 == 10)
  {
    v30 = 0;
    v115 = 0;
    v31 = 0;
  }
  else
  {
    v122 = (WTF::StringImpl *)v29;
    v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v29 < 0xFFFE000000000000)
    {
      v85 = v29 - 0x2000000000000;
      if (v29 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v122, a1);
        v85 = v105;
      }
      v86 = (v85 >> 52) & 0x7FF;
      if ((v86 - 1023) <= 0x53)
      {
        v89 = v85 >> (51 - (v85 >> 52));
        if (v86 > 0x433)
          LODWORD(v89) = v85 << ((v85 >> 52) - 51);
        if (v86 >= 0x41F)
          v90 = v89;
        else
          v90 = (((1 << ((v85 >> 52) + 1)) - 1) & v89) + (1 << ((v85 >> 52) + 1));
        if ((v85 & 0x8000000000000000) == 0)
          LODWORD(v29) = v90;
        else
          LODWORD(v29) = -v90;
      }
      else
      {
        LODWORD(v29) = 0;
      }
    }
    if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
      return 0;
    v31 = v29 & 0xFFFFFF00;
    v115 = v29;
    v30 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v33 = v122;
  v35 = JSC::JSObject::get(v8, a1, (unint64_t)v122);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
  v116 = v31;
  v117 = v30;
  if (!*((_DWORD *)v144 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) == 0)
  {
    if (v35 == 10)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
    }
    else
    {
      v122 = (WTF::StringImpl *)v35;
      v39 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v35 < 0xFFFE000000000000)
      {
        v87 = v35 - 0x2000000000000;
        if (v35 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v122, a1);
          v87 = v106;
        }
        v88 = (v87 >> 52) & 0x7FF;
        if ((v88 - 1023) <= 0x53)
        {
          v91 = v87 >> (51 - (v87 >> 52));
          if (v88 > 0x433)
            LODWORD(v91) = v87 << ((v87 >> 52) - 51);
          if (v88 >= 0x41F)
            v92 = v91;
          else
            v92 = (((1 << ((v87 >> 52) + 1)) - 1) & v91) + (1 << ((v87 >> 52) + 1));
          if ((v87 & 0x8000000000000000) == 0)
            LODWORD(v35) = v92;
          else
            LODWORD(v35) = -v92;
        }
        else
        {
          LODWORD(v35) = 0;
        }
      }
      if (*((_DWORD *)v39 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v39))
        return 0;
      v38 = v35 & 0xFFFFFF00;
      v37 = v35;
      v36 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v40 = v122;
    v42 = JSC::JSObject::get(v8, a1, (unint64_t)v122);
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v41);
      else
        *(_DWORD *)v40 -= 2;
    }
    if (!*((_DWORD *)v144 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) == 0)
    {
      v114 = v3;
      if (v42 == 10)
      {
        v43 = 0;
        v44 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v42, &v122);
        if (HIDWORD(v122))
          return 0;
        v44 = (int)v122;
        v43 = 1;
      }
      v112 = v44;
      v113 = v43;
      v132 = v142;
      v133 = v143;
      v130 = v140;
      v131 = v141;
      v128 = v138;
      v129 = v139;
      v127 = v137;
      v126 = v136;
      v125 = v135;
      v45 = *(int *)(a2 + 32) - 3;
      v124 = v134;
      if (v45 >= 0xFFFFFFFFFFFFFFFELL || (v46 = *(_QWORD *)(a2 + 56), v46 == 10))
      {
        v47 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v47 += 2;
        v48 = v36;
        v123 = 0;
        goto LABEL_81;
      }
      v146[0] = *(WTF **)(a2 + 56);
      v49 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v146, a1);
        goto LABEL_78;
      }
      v50 = *(WTF::StringImpl **)(v46 + 8);
      if ((v50 & 1) != 0)
      {
        v50 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, a1);
        if (!v50)
          goto LABEL_77;
      }
      else if (!v50)
      {
LABEL_77:
        v145 = v50;
LABEL_78:
        if (*((_DWORD *)v49 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v49);
          v47 = v145;
          if (hasExceptionsAfterHandlingTraps)
          {
            v123 = 1;
            v145 = 0;
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v104);
              else
                *(_DWORD *)v47 -= 2;
            }
            v11 = 0;
            v81 = 1;
            goto LABEL_109;
          }
        }
        else
        {
          v47 = v145;
        }
        v48 = v36;
        v123 = 0;
LABEL_81:
        v122 = 0;
        v51 = WTF::fastMalloc((WTF *)0x48);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_DWORD *)(v51 + 8) = 1;
        *(_QWORD *)v51 = off_1E334F098;
        *(_BYTE *)(v51 + 12) = 0;
        v54 = v146[0];
        if (v146[0])
          *(_DWORD *)v146[0] += 2;
        v55 = v25;
        *(_QWORD *)(v51 + 16) = v54;
        if (v47)
          *(_DWORD *)v47 += 2;
        v56 = v38 | v37;
        v57 = v118 | v55;
        *(_QWORD *)(v51 + 24) = v47;
        v146[0] = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v52);
          else
            *(_DWORD *)v54 -= 2;
        }
        *(_QWORD *)v51 = off_1E3360DF0;
        *(_BYTE *)(v51 + 32) = v120;
        *(_WORD *)(v51 + 33) = v132;
        *(_BYTE *)(v51 + 35) = v133;
        *(_DWORD *)(v51 + 36) = v56;
        *(_BYTE *)(v51 + 40) = v48;
        *(_WORD *)(v51 + 41) = v130;
        *(_BYTE *)(v51 + 43) = v131;
        *(_DWORD *)(v51 + 44) = v116 | v115;
        *(_BYTE *)(v51 + 48) = v117;
        *(_WORD *)(v51 + 49) = v128;
        *(_BYTE *)(v51 + 51) = v129;
        *(_DWORD *)(v51 + 52) = v57;
        *(_BYTE *)(v51 + 56) = v119;
        *(_BYTE *)(v51 + 59) = v127;
        *(_WORD *)(v51 + 57) = v126;
        *(_DWORD *)(v51 + 60) = v112;
        *(_BYTE *)(v51 + 64) = v113;
        *(_BYTE *)(v51 + 67) = v125;
        *(_WORD *)(v51 + 65) = v124;
        v146[0] = (WTF *)v51;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v52);
          else
            *(_DWORD *)v47 -= 2;
        }
        v11 = (JSCell *)WebCore::createWrapper<WebCore::RTCError,WebCore::RTCError>(*(JSC::VM **)(v121 + 40), v146, v53);
        v58 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v58 & 0xFFFE000000000002) != 0)
          goto LABEL_104;
        v59 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v58);
        if (!v59)
          goto LABEL_104;
        v61 = v59;
        if (v59 == *(JSC::JSGlobalObject **)(a2 + 24))
          goto LABEL_104;
        v62 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v59, v60);
        if (*((_DWORD *)v62 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) != 0)
            goto LABEL_104;
        }
        v66 = *((_QWORD *)FunctionRealm + 412);
        if (v66)
        {
          v67 = *(_DWORD *)(v66 - 8);
          v68 = ((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) >> 22);
          v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
          v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
          v71 = v67 & ((v70 >> 31) ^ v70);
          v72 = *(char ***)(v66 + 16 * v71);
          if (v72 == &WebCore::JSRTCError::s_info)
          {
LABEL_100:
            v63 = *(JSC::JSObject **)(v66 + 16 * v71 + 8);
            if (v63)
            {
LABEL_102:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v61, v63, v64);
              if (!*((_DWORD *)v62 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v62) & 1) == 0)
                JSC::JSObject::setStructure(v11, v62, SubclassStructure);
LABEL_104:
              if (*((_DWORD *)v114 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v114) & 1) != 0)
                v11 = 0;
              if (v146[0])
              {
                if (*((_DWORD *)v146[0] + 2) == 1)
                  (*(void (**)(WTF *))(*(_QWORD *)v146[0] + 8))(v146[0]);
                else
                  --*((_DWORD *)v146[0] + 2);
              }
              v81 = 0;
LABEL_109:
              ((void (*)(WTF **, WTF::StringImpl **))off_1E32D2D10[v81])(v146, &v122);
              return v11;
            }
          }
          else
          {
            v73 = 1;
            while (v72)
            {
              v71 = ((_DWORD)v71 + v73) & v67;
              v72 = *(char ***)(v66 + 16 * v71);
              ++v73;
              if (v72 == &WebCore::JSRTCError::s_info)
                goto LABEL_100;
            }
          }
        }
        v74 = WebCore::getDOMStructure<WebCore::JSDOMException>(v62, FunctionRealm, v63);
        Structure = WebCore::JSRTCErrorPrototype::createStructure((uint64_t *)v62, (uint64_t)FunctionRealm, *(JSC::JSCell **)(v74 + 48));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v78 = (JSC::JSCell *)WebCore::JSRTCErrorPrototype::create(v62, Structure, v76, v77);
        v79 = WebCore::JSRTCError::createStructure((uint64_t *)v62, (uint64_t)FunctionRealm, v78);
        v63 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSRTCError::s_info);
        goto LABEL_102;
      }
      *(_DWORD *)v50 += 2;
      goto LABEL_77;
    }
  }
  return 0;
}

uint64_t WebCore::JSRTCError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSDOMException::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSDOMException::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSDOMException::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCErrorPrototype::create(WebCore::JSRTCErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSRTCError::s_info, &WebCore::JSRTCErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCError>,(WebCore::DOMConstructorID)153>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1224);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSDOMException>,(WebCore::DOMConstructorID)426>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructor<WebCore::JSRTCError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCError::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCError::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = WebCore::getDOMStructure<WebCore::JSDOMException>((WebCore::JSDOMException *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(v27 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCErrorPrototype::create((WebCore::JSRTCErrorPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCError::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCError::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1224) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCErrorPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCError>,(WebCore::DOMConstructorID)153>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCError_errorDetail(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 32);
  if ((byte_1EE336506 & 1) == 0)
  {
    dword_1ECE79640 += 2;
    byte_1EE336506 = 1;
    dword_1ECE79660 += 2;
    qword_1EE336688 = (uint64_t)&dword_1ECE79640;
    unk_1EE336690 = &dword_1ECE79660;
    dword_1ECE79680 += 2;
    dword_1ECE796A0 += 2;
    qword_1EE336698 = (uint64_t)&dword_1ECE79680;
    unk_1EE3366A0 = &dword_1ECE796A0;
    dword_1ECE796C0 += 2;
    qword_1EE3366A8 = (uint64_t)&dword_1ECE796C0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * v4 + 392];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsRTCError_sdpLineNumber(uint64_t a1, uint64_t a2)
{
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 36) & 0xFF00000000) != 0)
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 36) | 0xFFFE000000000000;
  else
    return 2;
}

unint64_t WebCore::jsRTCError_sctpCauseCode(uint64_t a1, uint64_t a2)
{
  if ((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 44) & 0xFF00000000) != 0)
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 44) | 0xFFFE000000000000;
  else
    return 2;
}

unint64_t WebCore::jsRTCError_receivedAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 52);
  if ((v2 & 0xFF00000000) == 0)
    return 2;
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 52) | 0xFFFE000000000000;
}

unint64_t WebCore::jsRTCError_sentAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 60);
  if ((v2 & 0xFF00000000) == 0)
    return 2;
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 60) | 0xFFFE000000000000;
}

unint64_t WebCore::createWrapper<WebCore::RTCError,WebCore::RTCError>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSDOMException *v15;
  uint64_t v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  unint64_t v45;
  _QWORD *v46;
  WTF *v47;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCError::s_info + ~((_QWORD)&WebCore::JSRTCError::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSRTCError::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSRTCError::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSDOMException *)*((_QWORD *)a1 + 7);
  v16 = WebCore::getDOMStructure<WebCore::JSDOMException>(v15, a1, a3);
  Structure = WebCore::JSRTCErrorPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, *(JSC::JSCell **)(v16 + 48));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSRTCErrorPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSRTCError::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSRTCError::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 1248);
  if (v25)
    goto LABEL_28;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  if (!*(_QWORD *)(v28 + 1248))
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v47, "IsoSpace T");
    v46 = 0;
    MEMORY[0x19AEA3204](v29, &v47, v22 + 192, v22 + 1872, 32, 8, &v46);
    v31 = (uint64_t)v46;
    v46 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v47;
    v47 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v33 = *(_QWORD *)(v28 + 1248);
    *(_QWORD *)(v28 + 1248) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v24 + 1248);
  *(_QWORD *)(v24 + 1248) = v25;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v26);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_28:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_29:
    v25[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v45);
    v25[5] = SlowCase + (int)v45;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  v39 = *a2;
  *a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v39;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v40 = *((_QWORD *)a1 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::DOMException *)::owner = (uint64_t)&off_1E326AD60;
  }
  v47 = v5;
  if ((SlowCase & 8) != 0)
    v41 = (SlowCase - 112) | 1;
  else
    v41 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v41 & 1) != 0)
    v42 = v41 + 47;
  else
    v42 = *(_QWORD *)v41 + 32;
  Allocator = *(_QWORD **)(v42 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v42 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::DOMException *)::owner;
  Allocator[2] = v40;
  v46 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v47, (uint64_t *)&v46);
  if (v46)
    v46[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  _BOOL4 v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  _BOOL4 v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  JSCell *v26;
  uint64_t v27;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WebCore::JSDOMGlobalObject *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  JSC::VM *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  unint64_t v52;
  WebCore::JSEvent *v53;
  JSC::JSCell *v54;
  unint64_t Structure;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  JSC::VM *v81;
  JSValue v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  JSC::VM *v98;
  _BOOL4 v99;
  WTF::StringImpl *v100[2];
  int v101;
  WTF::StringImpl *v102;
  int v103;
  JSC::VM *v104;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v82);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v102);
  v6 = v103;
  if (!v103)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v104 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_44:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v104, "error", 6, "RTCErrorEventInit", 18, "RTCError", 9);
      goto LABEL_45;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
LABEL_59:
      JSC::throwTypeError();
      goto LABEL_45;
    }
    v9 = Object;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
    if (v100[0])
    {
      if (*(_DWORD *)v100[0] == 2)
        WTF::StringImpl::destroy(v100[0], v10);
      else
        *(_DWORD *)v100[0] -= 2;
    }
    if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
    {
LABEL_45:
      v26 = 0;
      v27 = 1;
      v101 = 1;
LABEL_46:
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D3B60[v27])(&v104, v100);
      v6 = v103;
      goto LABEL_47;
    }
    if (v11 != 10)
    {
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_132;
      *(_QWORD *)&v13 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v14 = v13 > 0.0 || v13 < 0.0;
        goto LABEL_16;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v14 = v11 == 7;
        goto LABEL_16;
      }
      v84 = *(unsigned __int8 *)(v11 + 5);
      if (v84 == 3)
      {
        v87 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v84 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v83 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_176;
          }
          v14 = 1;
          goto LABEL_16;
        }
        v85 = *(_QWORD *)(v11 + 8);
        if ((v85 & 1) != 0)
          v86 = (int *)(v11 + 16);
        else
          v86 = (int *)(v85 + 4);
        v87 = *v86;
      }
      v83 = v87 == 0;
      goto LABEL_176;
    }
    v99 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v16 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v15);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v16 == 10)
      {
        v17 = 0;
        goto LABEL_28;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = v16 == 7;
          goto LABEL_27;
        }
        v89 = *(unsigned __int8 *)(v16 + 5);
        if (v89 == 3)
        {
          v92 = *(_DWORD *)(v16 + 8);
          goto LABEL_165;
        }
        if (v89 == 2)
        {
          v90 = *(_QWORD *)(v16 + 8);
          if ((v90 & 1) != 0)
            v91 = (int *)(v16 + 16);
          else
            v91 = (int *)(v90 + 4);
          v92 = *v91;
LABEL_165:
          v88 = v92 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_167:
            v17 = 1;
            goto LABEL_27;
          }
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_180:
        v17 = !v88;
        goto LABEL_27;
      }
      if (v19 > 0.0)
        goto LABEL_167;
      v17 = v19 < 0.0;
LABEL_27:
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_45;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v20);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v21 == 10)
      {
        v22 = 0;
        goto LABEL_39;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v21 >= 0xFFFE000000000000)
      {
        v93 = (_DWORD)v21 == 0;
        goto LABEL_170;
      }
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          v22 = v21 == 7;
          goto LABEL_38;
        }
        v94 = *(unsigned __int8 *)(v21 + 5);
        if (v94 == 3)
        {
          v97 = *(_DWORD *)(v21 + 8);
        }
        else
        {
          if (v94 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_174:
              v22 = 1;
              goto LABEL_38;
            }
            v93 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_170;
          }
          v95 = *(_QWORD *)(v21 + 8);
          if ((v95 & 1) != 0)
            v96 = (int *)(v21 + 16);
          else
            v96 = (int *)(v95 + 4);
          v97 = *v96;
        }
        v93 = v97 == 0;
LABEL_170:
        v22 = !v93;
        goto LABEL_38;
      }
      if (v24 > 0.0)
        goto LABEL_174;
      v22 = v24 < 0.0;
LABEL_38:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_45;
LABEL_39:
      WTF::AtomStringImpl::addLiteral();
      LODWORD(v11) = v100[0];
      v9 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v100[0]);
      if (v100[0])
      {
        if (*(_DWORD *)v100[0] == 2)
          WTF::StringImpl::destroy(v100[0], v25);
        else
          *(_DWORD *)v100[0] -= 2;
      }
      if (*((_DWORD *)v104 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v104) & 1) != 0)
        goto LABEL_45;
      if (v9 == 10)
        goto LABEL_44;
      v98 = v3;
      v100[0] = *((WTF::StringImpl **)a1 + 7);
      if ((v9 & 0xFFFE000000000002) != 0)
        goto LABEL_59;
      v29 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
      v30 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v29)
      {
        v31 = 16 * v29;
        if ((char **)v31 != &WebCore::JSRTCError::s_info)
        {
          do
          {
            v31 = *(_QWORD *)(v31 + 16);
            v30 = v31 != 0;
          }
          while ((char **)v31 != &WebCore::JSRTCError::s_info && v31 != 0);
        }
      }
      if (!v30)
        goto LABEL_59;
      v3 = *(JSC::VM **)(v9 + 24);
      if (!v3)
        goto LABEL_59;
      v33 = v5;
      ++*((_DWORD *)v3 + 2);
      v5 = v99;
      LOBYTE(v100[0]) = v99;
      BYTE1(v100[0]) = v17;
      BYTE2(v100[0]) = v22;
      v101 = 0;
      if (!v103)
      {
        v34 = v102;
        v102 = 0;
        v100[1] = 0;
        v35 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v35);
        *(_QWORD *)(v35 + 8) = 0;
        if (v17)
          v39 = 4;
        else
          v39 = 0;
        if (v22)
          v40 = 8;
        else
          v40 = 0;
        if (v99)
          v41 = 1310722;
        else
          v41 = 1310720;
        v42 = v41 | v39 | v40 | (v34 != 0) | *(_DWORD *)(v35 + 20) & 0xFFC00000;
        *(_DWORD *)(v35 + 16) = 1;
        *(_DWORD *)(v35 + 20) = v42;
        if (v34)
        {
          *(_DWORD *)v34 += 2;
          v42 = *(_DWORD *)(v35 + 20);
        }
        *(_QWORD *)(v35 + 24) = v34;
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = v38;
        *(_DWORD *)(v35 + 20) = v42 | 0x4000;
        *(_QWORD *)v35 = off_1E33613B0;
        *(_QWORD *)(v35 + 64) = 0;
        *(_QWORD *)(v35 + 72) = v3;
        v104 = (JSC::VM *)v35;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::destroy(v34, v36);
            if (*(void (***)(WebCore::RTCErrorEvent *__hidden))v35 != off_1E33613B0)
            {
              __break(0xC471u);
              JUMPOUT(0x194E30084);
            }
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
        v43 = *(JSC::VM **)(v33 + 40);
        v44 = *((_QWORD *)v43 + 412);
        if (!v44)
          goto LABEL_82;
        v45 = *(_DWORD *)(v44 - 8);
        v46 = ((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) >> 22);
        v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
        v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
        v49 = v45 & ((v48 >> 31) ^ v48);
        v50 = *(char ***)(v44 + 16 * v49);
        if (v50 == &WebCore::JSRTCErrorEvent::s_info)
        {
LABEL_81:
          v52 = *(_QWORD *)(v44 + 16 * v49 + 8);
          if (!v52)
            goto LABEL_82;
        }
        else
        {
          v51 = 1;
          while (v50)
          {
            v49 = ((_DWORD)v49 + v51) & v45;
            v50 = *(char ***)(v44 + 16 * v49);
            ++v51;
            if (v50 == &WebCore::JSRTCErrorEvent::s_info)
              goto LABEL_81;
          }
LABEL_82:
          v53 = (WebCore::JSEvent *)*((_QWORD *)v43 + 7);
          v54 = (JSC::JSCell *)WebCore::JSEvent::prototype(v53, *(JSC::VM **)(v33 + 40), v37);
          Structure = WebCore::JSRTCErrorEventPrototype::createStructure((uint64_t *)v53, (uint64_t)v43, v54);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v57 = (JSC::JSCell *)WebCore::JSRTCErrorEventPrototype::create(v53, v43, Structure, v56);
          v58 = WebCore::JSRTCErrorEvent::createStructure((uint64_t *)v53, (uint64_t)v43, v57);
          v52 = WebCore::cacheDOMStructure((JSCell *)v43, v58, (uint64_t)&WebCore::JSRTCErrorEvent::s_info);
        }
        v26 = (JSCell *)WebCore::JSRTCErrorEvent::create(v52, v43, (uint64_t *)&v104);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v43 + 415), v35, (uint64_t)v26);
        v59 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v59 & 0xFFFE000000000002) != 0
          || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
          || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v63 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v60, v61),
              *((_DWORD *)v63 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
        {
LABEL_96:
          if (*((_DWORD *)v98 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
            v26 = 0;
          v81 = v104;
          v104 = 0;
          if (v81)
          {
            if (*((_DWORD *)v81 + 4) == 1)
              (*(void (**)(JSC::VM *))(*(_QWORD *)v81 + 8))(v81);
            else
              --*((_DWORD *)v81 + 4);
          }
          v27 = 0;
          goto LABEL_46;
        }
        v67 = *((_QWORD *)FunctionRealm + 412);
        if (v67)
        {
          v68 = *(_DWORD *)(v67 - 8);
          v69 = ((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) >> 22);
          v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
          v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
          v72 = v68 & ((v71 >> 31) ^ v71);
          v73 = *(char ***)(v67 + 16 * v72);
          if (v73 != &WebCore::JSRTCErrorEvent::s_info)
          {
            v74 = 1;
            while (v73)
            {
              v72 = ((_DWORD)v72 + v74) & v68;
              v73 = *(char ***)(v67 + 16 * v72);
              ++v74;
              if (v73 == &WebCore::JSRTCErrorEvent::s_info)
                goto LABEL_92;
            }
            goto LABEL_93;
          }
LABEL_92:
          v64 = *(WebCore::JSDOMGlobalObject **)(v67 + 16 * v72 + 8);
          if (!v64)
            goto LABEL_93;
        }
        else
        {
LABEL_93:
          v75 = (JSC::JSCell *)WebCore::JSEvent::prototype(v63, FunctionRealm, v64);
          v76 = WebCore::JSRTCErrorEventPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
          *(_DWORD *)(v76 + 16) |= 0x80000u;
          v78 = (JSC::JSCell *)WebCore::JSRTCErrorEventPrototype::create(v63, FunctionRealm, v76, v77);
          v79 = WebCore::JSRTCErrorEvent::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
          v64 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSRTCErrorEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v62, v64, v65);
        if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
          JSC::JSObject::setStructure(v26, v63, SubclassStructure);
        goto LABEL_96;
      }
      v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_132:
      v83 = (_DWORD)v11 == 0;
LABEL_176:
      v14 = !v83;
LABEL_16:
      v99 = v14;
      if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
        goto LABEL_45;
    }
    v88 = (_DWORD)v16 == 0;
    goto LABEL_180;
  }
  v26 = 0;
LABEL_47:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2930[v6])(v100, &v102);
  return v26;
}

uint64_t WebCore::JSRTCErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCErrorEventPrototype::create(WebCore::JSRTCErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRTCErrorEvent::s_info, (uint64_t)&WebCore::JSRTCErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCErrorEvent>,(WebCore::DOMConstructorID)154>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1232);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCErrorEvent::s_info + ~((_QWORD)&WebCore::JSRTCErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCErrorEventPrototype::create((WebCore::JSRTCErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1232) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCErrorEventPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCErrorEvent>,(WebCore::DOMConstructorID)154>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCErrorEvent_error(uint64_t a1, uint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v3;
  JSC::VM *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  WTF *v16;

  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 72);
  v4 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(*((_QWORD *)v4 + 415) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == v3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == v3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)v3 + 2);
  v16 = v3;
  v14 = WebCore::createWrapper<WebCore::RTCError,WebCore::RTCError>(v4, &v16, a3);
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(void))(*(_QWORD *)v16 + 8))();
    else
      --*((_DWORD *)v16 + 2);
  }
  return v14;
}

uint64_t WebCore::JSRTCErrorEvent::subspaceForImpl(WebCore::JSRTCErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1256);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1256))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1256);
    *(_QWORD *)(v8 + 1256) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1256);
  *(_QWORD *)(v3 + 1256) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCIceCandidate>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSCell *v17;
  JSC::JSCell *v18;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v20;
  JSC::JSGlobalObject *v21;
  JSC::VM *v22;
  JSC::Structure *v23;
  uint64_t FunctionRealm;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  int v32;
  JSC::JSObject *v33;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v35;
  JSC::Structure *v36;
  JSC::JSCell *v37;
  uint64_t v38;
  unint64_t SubclassStructure;
  JSCell *result;
  bmalloc::api *v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  JSValue v45;
  WebCore::JSRTCIceCandidate *v46;
  JSC::JSCell *v47;
  WTF::StringImpl *v48[2];
  int v49;
  WTF::StringImpl *v50;
  int v51[2];
  WTF::StringImpl *v52;
  int v53;
  __int128 v54;
  int v55;
  WTF::StringImpl *v56;
  unsigned int v57;

  if (*(_DWORD *)(a2 + 32) == 1)
    v4 = 10;
  else
    v4 = *(_QWORD *)(a2 + 48);
  v5 = *((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convertDictionary<WebCore::RTCIceCandidateInit>((uint64_t)&v54, a1, (JSC::JSCell *)v4);
  v7 = v57;
  if (!v57)
  {
    v8 = v54;
    v54 = 0uLL;
    *(_OWORD *)v48 = v8;
    v49 = v55;
    v9 = v56;
    v56 = 0;
    v50 = v9;
    WebCore::RTCIceCandidate::create((uint64_t)v48, (uint64_t)v51);
    v11 = v50;
    v50 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v48[1];
    v48[1] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v48[0];
    v48[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v10);
      else
        *(_DWORD *)v13 -= 2;
    }
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_56;
    if (v53)
    {
      if (v53 != 1)
      {
        v46 = (WebCore::JSRTCIceCandidate *)std::__throw_bad_variant_access[abi:sn180100]();
        return (JSCell *)WebCore::JSRTCIceCandidate::destroy(v46, v47);
      }
      v43 = (WTF::StringImpl *)LOBYTE(v51[0]);
      LOBYTE(v48[0]) = v51[0];
      v44 = v52;
      v52 = 0;
      v48[1] = v44;
      if (!*(_QWORD *)(v5 + 16))
      {
        v45.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v51[0]), (JSC::JSGlobalObject *)&v48[1]);
        JSC::VM::throwException((JSC::VM *)v5, a1, v45);
        v44 = v48[1];
      }
      v48[1] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v43);
        else
          *(_DWORD *)v44 -= 2;
      }
      v17 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(v6 + 40);
      v15 = *(WTF::StringImpl **)v51;
      *(_QWORD *)v51 = 0;
      v48[0] = v15;
      v17 = (JSCell *)WebCore::toJSNewlyCreated(v14, v48);
      if (v48[0])
      {
        if (*(_DWORD *)v48[0] == 1)
        {
          WebCore::RTCIceCandidate::~RTCIceCandidate(v48[0], v16);
          bmalloc::api::isoDeallocate(v41, v42);
        }
        else
        {
          --*(_DWORD *)v48[0];
        }
      }
    }
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    {
LABEL_56:
      v17 = 0;
LABEL_34:
      if (v53 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E32D3BC0[v53])(v48, v51);
      goto LABEL_36;
    }
    v18 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v18 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v18)) == 0
      || (v21 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v22 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = JSC::getFunctionRealm(a1, Object, v20),
          *((_DWORD *)v22 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    {
LABEL_33:
      if (!*(_DWORD *)(v5 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) == 0)
        goto LABEL_34;
      goto LABEL_56;
    }
    v25 = *(_QWORD *)(FunctionRealm + 3296);
    if (v25)
    {
      v26 = *(_DWORD *)(v25 - 8);
      v27 = ((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) >> 22);
      v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
      v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
      v30 = v26 & ((v29 >> 31) ^ v29);
      v31 = *(char ***)(v25 + 16 * v30);
      if (v31 == &WebCore::JSRTCIceCandidate::s_info)
      {
LABEL_29:
        v33 = *(JSC::JSObject **)(v25 + 16 * v30 + 8);
        if (v33)
        {
LABEL_31:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v21, v33, v23);
          if (!*((_DWORD *)v22 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) == 0)
            JSC::JSObject::setStructure(v17, v22, SubclassStructure);
          goto LABEL_33;
        }
      }
      else
      {
        v32 = 1;
        while (v31)
        {
          v30 = ((_DWORD)v30 + v32) & v26;
          v31 = *(char ***)(v25 + 16 * v30);
          ++v32;
          if (v31 == &WebCore::JSRTCIceCandidate::s_info)
            goto LABEL_29;
        }
      }
    }
    Structure = WebCore::JSRTCIceCandidatePrototype::createStructure((uint64_t *)v22, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v37 = (JSC::JSCell *)WebCore::JSRTCIceCandidatePrototype::create(v22, Structure, v35, v36);
    v38 = WebCore::JSRTCIceCandidate::createStructure((uint64_t *)v22, FunctionRealm, v37);
    v33 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v38, (uint64_t)&WebCore::JSRTCIceCandidate::s_info);
    goto LABEL_31;
  }
  v17 = 0;
  result = 0;
  if (v57 != -1)
  {
LABEL_36:
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E32D3BD0[v7])(v48, &v54);
    return v17;
  }
  return result;
}

WebCore::RTCIceCandidate *WebCore::JSRTCIceCandidate::destroy(WebCore::JSRTCIceCandidate *this, JSC::JSCell *a2)
{
  WebCore::RTCIceCandidate *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(result, a2);
      return (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSRTCIceCandidate::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCIceCandidatePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCIceCandidatePrototype::create(WebCore::JSRTCIceCandidatePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<16u>(this, (uint64_t)&WebCore::JSRTCIceCandidate::s_info, (uint64_t)&WebCore::JSRTCIceCandidatePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCIceCandidate>,(WebCore::DOMConstructorID)155>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1240);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSRTCIceCandidate>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCIceCandidate::s_info + ~((_QWORD)&WebCore::JSRTCIceCandidate::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCIceCandidate::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCIceCandidate::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCIceCandidatePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCIceCandidatePrototype::create((WebCore::JSRTCIceCandidatePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCIceCandidate::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCIceCandidate::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1240) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCIceCandidateConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCIceCandidatePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCIceCandidate>,(WebCore::DOMConstructorID)155>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCIceCandidate_candidate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsRTCIceCandidate_sdpMid(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsRTCIceCandidate_sdpMLineIndex(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 32) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCIceCandidate_foundation(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)v2;
  v5 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v3 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 41968);
  }
LABEL_7:
  if (v4)
    *(_DWORD *)v2 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsRTCIceCandidate_component(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 48);
  if ((v2 & 0xFF00000000) == 0)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE336507 & 1) == 0)
  {
    dword_1ECE796E0 += 2;
    byte_1EE336507 = 1;
    qword_1EE336618 = (uint64_t)&dword_1ECE796E0;
    dword_1ECE79700 += 2;
    qword_1EE336620 = (uint64_t)&dword_1ECE79700;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * (int)v2 + 280];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_7:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_10;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_7;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_10:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsRTCIceCandidate_priority(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if ((v2 & 0xFF00000000) == 0)
    return 2;
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56) | 0xFFFE000000000000;
}

uint64_t WebCore::jsRTCIceCandidate_address(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)v2;
  v5 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v3 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 41968);
  }
LABEL_7:
  if (v4)
    *(_DWORD *)v2 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsRTCIceCandidate_protocol(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if ((v2 & 0xFF00000000) == 0)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = (uint64_t *)(v3 + 41968);
  if ((byte_1EE336509 & 1) == 0)
  {
    dword_1ECE79800 += 2;
    byte_1EE336509 = 1;
    qword_1EE336628 = (uint64_t)&dword_1ECE79800;
    dword_1ECE79820 += 2;
    qword_1EE336630 = (uint64_t)&dword_1ECE79820;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * (int)v2 + 296];
  if (!v5)
    return *v4;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_7:
      v8 = *(_QWORD *)(v3 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_10;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_7;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v3 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v4;
  }
LABEL_10:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsRTCIceCandidate_port(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCIceCandidate_type(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 84);
  if (((unint64_t)v2 & 0xFF00000000) != 0)
    return WebCore::convertEnumerationToJS<WebCore::RTCIceCandidateType>(*(_QWORD *)(a1 + 56), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCIceCandidate_tcpType(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 92);
  if (((unint64_t)v2 & 0xFF00000000) != 0)
    return WebCore::convertEnumerationToJS<WebCore::RTCIceTcpCandidateType>(*(_QWORD *)(a1 + 56), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCIceCandidate_relatedAddress(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 104);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)v2;
  v5 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v3 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 41968);
  }
LABEL_7:
  if (v4)
    *(_DWORD *)v2 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

unint64_t WebCore::jsRTCIceCandidate_relatedPort(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 112) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 112) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCIceCandidate_usernameFragment(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 120);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)v2;
  v5 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v3 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v3 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 41968);
  }
LABEL_7:
  if (v4)
    *(_DWORD *)v2 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::JSRTCIceCandidateOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCIceCandidateOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RTCIceCandidate *v3;
  int v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCIceCandidate *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCIceCandidate **)(*(_QWORD *)a2 + 24);
  v4 = (*(_DWORD *)v3)++;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCIceCandidate **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCIceCandidate **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_12;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_12:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *(_DWORD *)v3 - 1;
  }
  else
  {
    v5 = *((_QWORD *)v3 + 1);
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 3;
      *((_QWORD *)v3 + 1) = 0;
    }
  }
  if (v4)
  {
    *(_DWORD *)v3 = v4;
  }
  else
  {
    WebCore::RTCIceCandidate::~RTCIceCandidate(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::RTCIceCandidate>(uint64_t a1, WebCore::RTCIceCandidate *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::RTCIceCandidate *v15;
  int v16;
  WebCore::RTCIceCandidate *v17;

  v2 = *(_QWORD *)(a1 + 3320);
  if (*(_DWORD *)(v2 + 48))
  {
    v9 = *(_QWORD *)(v2 + 32);
    if (v9)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(WebCore::RTCIceCandidate **)(v9 + 16 * v14);
      if (v15 == a2)
      {
LABEL_15:
        v3 = *(_QWORD *)(v9 + 16 * v14 + 8);
        if (v3)
          goto LABEL_3;
      }
      else
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(WebCore::RTCIceCandidate **)(v9 + 16 * v14);
          ++v16;
          if (v15 == a2)
            goto LABEL_15;
        }
      }
    }
  }
  else
  {
    v3 = *((_QWORD *)a2 + 1);
    if (v3)
    {
LABEL_3:
      if ((*(_BYTE *)(v3 + 8) & 3) == 0)
      {
        v4 = *(_QWORD *)v3;
        if (*(_QWORD *)v3)
          return v4;
      }
    }
  }
  ++*(_DWORD *)a2;
  v17 = a2;
  v4 = WebCore::toJSNewlyCreated(a1, &v17);
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v17, v5);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  return v4;
}

uint64_t WebCore::convertDictionary<WebCore::RTCIceCandidateInit>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  uint64_t Object;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t result;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  double v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  JSC::VM *v43;
  char v44;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v43 = v5;
  v6 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_85:
    *(_DWORD *)(a1 + 32) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v7, a2, (unint64_t)v41);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v9);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((_DWORD)result)
      goto LABEL_85;
  }
  if (v10 == 10)
  {
LABEL_10:
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v11 += 2;
    v42 = 0;
    v41 = 0;
    if (v6 == 2)
    {
      v12 = 0;
      v13 = 0;
      v40 = 0;
      v39 = 0;
      goto LABEL_57;
    }
LABEL_23:
    WTF::AtomStringImpl::addLiteral();
    v16 = v39;
    v18 = JSC::JSObject::get(v7, a2, (unint64_t)v39);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*((_DWORD *)v43 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
      if ((_DWORD)result)
        goto LABEL_92;
    }
    if ((v18 | 8) == 0xA)
    {
      v12 = 0;
    }
    else
    {
      v39 = (WTF::StringImpl *)v18;
      v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if (v18 < 0xFFFE000000000000 || (v18 & 0x80000000) != 0)
      {
        if (v18 >= 0xFFFE000000000000)
        {
          v20 = (double)(int)v18;
        }
        else if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v36 = (JSC::VM *)*((_QWORD *)a2 + 7);
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v39, a2);
          v19 = v36;
        }
        else
        {
          *(_QWORD *)&v20 = v18 - 0x2000000000000;
        }
        if (*((_DWORD *)v19 + 20))
        {
          v35 = v20;
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
          v20 = v35;
          if ((result & 1) != 0)
            goto LABEL_92;
        }
        LOWORD(v18) = 0;
        if (fabs(v20) != INFINITY && v20 != 0.0)
        {
          v21 = -floor(-v20);
          v22 = floor(v20);
          if (v20 >= 0.0)
            v23 = v22;
          else
            v23 = v21;
          v24 = fmod(v23, 65536.0);
          if (v24 < 0.0)
            v24 = v24 + 65536.0;
          LODWORD(v18) = (int)v24;
        }
      }
      v12 = (unsigned __int16)v18 | 0x10000;
    }
    WTF::AtomStringImpl::addLiteral();
    v25 = v39;
    v27 = JSC::JSObject::get(v7, a2, (unint64_t)v39);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (!*((_DWORD *)v43 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v43), !(_DWORD)result))
    {
      if (v27 == 10)
      {
        v13 = 0;
        v40 = 0;
      }
      else
      {
        result = (uint64_t)WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a2, v27, (uint64_t)&v39);
        v30 = v40;
        if (v40)
        {
          v13 = 0;
          *(_DWORD *)(a1 + 32) = 1;
LABEL_63:
          if (v30 != -1)
            result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2D10[v30])(&v37, &v39);
          goto LABEL_65;
        }
        v13 = v39;
      }
      v39 = 0;
      WTF::AtomStringImpl::addLiteral();
      v32 = JSC::JSObject::get(v7, a2, (unint64_t)v37);
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v31);
        else
          *(_DWORD *)v37 -= 2;
      }
      if (*((_DWORD *)v43 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
        if ((_DWORD)result)
        {
          *(_DWORD *)(a1 + 32) = 1;
          goto LABEL_62;
        }
      }
      if (v32 != 10)
      {
        result = (uint64_t)WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a2, v32, (uint64_t)&v37);
        v34 = v38;
        if (v38)
        {
          *(_DWORD *)(a1 + 32) = 1;
          if (v34 == -1)
            goto LABEL_62;
          goto LABEL_61;
        }
        v33 = v37;
LABEL_60:
        v34 = 0;
        v37 = 0;
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v13;
        *(_DWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 24) = v33;
        *(_DWORD *)(a1 + 32) = 0;
        v11 = 0;
        v13 = 0;
LABEL_61:
        result = ((uint64_t (*)(char *, WTF::StringImpl **))off_1E32D2D10[v34])(&v44, &v37);
LABEL_62:
        v30 = v40;
        goto LABEL_63;
      }
LABEL_57:
      v33 = 0;
      v38 = 0;
      goto LABEL_60;
    }
LABEL_92:
    v13 = 0;
    *(_DWORD *)(a1 + 32) = 1;
    goto LABEL_65;
  }
  v39 = (WTF::StringImpl *)v10;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
  {
    v15 = *(WTF::StringImpl **)(v10 + 8);
    if ((v15 & 1) != 0)
    {
      v15 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, a2);
      if (!v15)
        goto LABEL_19;
    }
    else if (!v15)
    {
LABEL_19:
      v37 = v15;
      goto LABEL_20;
    }
    *(_DWORD *)v15 += 2;
    goto LABEL_19;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, a2);
LABEL_20:
  if (!*((_DWORD *)v14 + 20))
  {
    v11 = v37;
LABEL_22:
    v42 = 0;
    v41 = 0;
    goto LABEL_23;
  }
  result = JSC::VM::hasExceptionsAfterHandlingTraps(v14);
  v11 = v37;
  if (!(_DWORD)result)
    goto LABEL_22;
  v42 = 1;
  v37 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      result = WTF::StringImpl::destroy(v11, v29);
    else
      *(_DWORD *)v11 -= 2;
  }
  v13 = 0;
  v11 = 0;
  *(_DWORD *)(a1 + 32) = 1;
LABEL_65:
  if (v42 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2D10[v42])(&v39, &v41);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      result = WTF::StringImpl::destroy(v13, v29);
      if (!v11)
        return result;
      goto LABEL_71;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v11)
    return result;
LABEL_71:
  if (*(_DWORD *)v11 == 2)
    return WTF::StringImpl::destroy(v11, v29);
  *(_DWORD *)v11 -= 2;
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceCandidateType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4A18 = &WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_1::operator() const(void)::impl;
    qword_1EE2F4A20 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_2::operator() const(void)::impl;
    unk_1EE2F4A28 = &WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::$_3::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceCandidateType)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceGatheringState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl;
    unk_1EE2F4A40 = &WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4A48 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceRole>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceRole)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_0::operator() const(void)::impl;
    unk_1EE2F4A60 = &WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4A68 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceRole)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceRole)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceServerTransportProtocol>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_0::operator() const(void)::impl;
    unk_1EE2F4A80 = &WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4A88 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceServerTransportProtocol)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceTcpCandidateType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_0::operator() const(void)::impl;
    unk_1EE2F4AA0 = &WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4AA8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceTcpCandidateType)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::RTCIceTcpCandidateType>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v17;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "active" && v4 == 6)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 97 || *(_DWORD *)(v3 + 1) != 1986622563 || *(_DWORD *)(v3 + 2) != 1702259060)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 97)
        return 0;
      v10 = *(_QWORD *)(v3 + 2);
      v11 = *(_QWORD *)(v3 + 4);
      if (v10 != 0x76006900740063 || v11 != 0x65007600690074)
        return 0;
    }
    goto LABEL_32;
  }
  if (v3 == "active" && v4 == 6)
  {
LABEL_32:
    v9 = &WebCore::parseEnumerationFromString<WebCore::RTCIceTcpCandidateType>(WTF::String const&)::mappings;
    return *((unsigned int *)v9 + 4) | 0x100000000;
  }
  if (v3 != "passive" && v4 == 7)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112 || *(_DWORD *)(v3 + 1) != 1769173857 || *(_DWORD *)(v3 + 3) != 1702259059)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 112)
        return 0;
      v13 = *(_QWORD *)(v3 + 2);
      v14 = *(_QWORD *)(v3 + 6);
      if (v13 != 0x69007300730061 || v14 != 0x65007600690073)
        return 0;
    }
  }
  else if (v3 != "passive" || v4 != 7)
  {
    if (v3 == "so" || v4 != 2)
    {
      if (v4 == 2 && v3 == "so")
        goto LABEL_51;
    }
    else
    {
      if ((v2 & 4) != 0)
      {
        if (*v3 != 115)
          return 0;
        v17 = *((unsigned __int8 *)v3 + 1);
      }
      else
      {
        if (*(_WORD *)v3 != 115)
          return 0;
        v17 = *((unsigned __int16 *)v3 + 1);
      }
      if (v17 == 111)
      {
LABEL_51:
        v9 = &off_1E32D1C50;
        return *((unsigned int *)v9 + 4) | 0x100000000;
      }
    }
    return 0;
  }
  v9 = &off_1E32D1C38;
  return *((unsigned int *)v9 + 4) | 0x100000000;
}

unint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, WebCore::RTCIceCandidate **a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::RTCIceCandidate *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  if (*a3)
  {
    v10 = WebCore::wrap<WebCore::RTCIceCandidate>(a2, *a3);
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v11 = v18;
    v18 = 0;
    v19 = v8;
    v20 = -1;
    v21 = 0x1000000;
    v22 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v11, v10, 0, (uint64_t)&v18);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v12);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v13 = a3[1];
  if (v13)
  {
    v14 = WebCore::wrap<WebCore::RTCIceCandidate>(a2, v13);
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v15 = v18;
    v18 = 0;
    v19 = v8;
    v20 = -1;
    v21 = 0x1000000;
    v22 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, (JSC::VM *)v5, (unint64_t)v15, v14, 0, (uint64_t)&v18);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return v8;
}

uint64_t WebCore::JSRTCIceTransport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCIceTransportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCIceTransportPrototype::create(WebCore::JSRTCIceTransportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSRTCIceTransport::s_info, &WebCore::JSRTCIceTransportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCIceTransport>,(WebCore::DOMConstructorID)156>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1248);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCIceTransport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCIceTransport::s_info + ~((_QWORD)&WebCore::JSRTCIceTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCIceTransport::s_info + ~((_QWORD)&WebCore::JSRTCIceTransport::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCIceTransport::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCIceTransport::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCIceTransportPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCIceTransportPrototype::create((WebCore::JSRTCIceTransportPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCIceTransport::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCIceTransport::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1248) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCIceTransportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCIceTransportPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCIceTransport>,(WebCore::DOMConstructorID)156>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCIceTransport_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCIceTransportState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 64));
}

uint64_t WebCore::jsRTCIceTransport_gatheringState(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCIceGatheringState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 68));
}

uint64_t WebCore::jsRTCIceTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSRTCIceTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCIceTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCIceTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1984), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCIceTransport_ongatheringstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 880), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSRTCIceTransport_ongatheringstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCIceTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCIceTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 880), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCIceTransport_onselectedcandidatepairchange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
    (*(void (**)(uint64_t))(*((_QWORD *)v5 - 4) + 16))((uint64_t)v5 - 32);
  else
    --*((_DWORD *)v5 - 2);
  return v9;
}

BOOL WebCore::setJSRTCIceTransport_onselectedcandidatepairchange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCIceTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCIceTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        (*(void (**)(uint64_t))(*((_QWORD *)v11 - 4) + 16))((uint64_t)v11 - 32);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRTCIceTransportOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSRTCIceTransportOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = v3 - 32;
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v7 = (uint64_t *)(a3 + 32);
    v8 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v8 - 8);
      v11 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD *)(v8 + 16 * v14);
      if (v15 != result)
      {
        v16 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v16) & v10;
          v15 = *(_QWORD *)(v8 + 16 * v14);
          ++v16;
          if (v15 == result)
            goto LABEL_12;
        }
        v14 = *(unsigned int *)(v8 - 4);
      }
LABEL_12:
      if (v14 != *(_DWORD *)(v8 - 4))
      {
        v17 = (_QWORD *)(v8 + 16 * v14);
        *v17 = -1;
        v20 = v17[1];
        v19 = v17 + 1;
        v18 = v20;
        if (v20)
        {
          *(_QWORD *)(v18 + 8) = 3;
          *v19 = 0;
        }
        ++*(_DWORD *)(*v7 - 16);
        v21 = *v7;
        if (*v7)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v7;
        if (*v7)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
          {
            v27 = v3;
            v28 = v3 - 32;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v7, v25 >> 1, 0);
            v3 = v27;
            result = v28;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  *(_DWORD *)(v3 - 8) = v5;
  return result;
}

unint64_t WebCore::wrap<WebCore::RTCIceTransport>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_65;
      }
      goto LABEL_5;
    }
LABEL_65:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCIceTransport::s_info + ~((_QWORD)&WebCore::JSRTCIceTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCIceTransport::s_info + ~((_QWORD)&WebCore::JSRTCIceTransport::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCIceTransport::s_info)
    {
LABEL_10:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_12;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCIceTransport::s_info)
          goto LABEL_10;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRTCIceTransportPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRTCIceTransportPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRTCIceTransport::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRTCIceTransport::s_info);
LABEL_12:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1272);
  if (v27)
    goto LABEL_35;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_17:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1272);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1272);
    *(_QWORD *)(v30 + 1272) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1272);
  *(_QWORD *)(v26 + 1272) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_34:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_35:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_36:
    v27[3] = SlowCase + 32;
    goto LABEL_37;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_37:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3365D0 & 1) == 0)
  {
    qword_1EE3365C8 = (uint64_t)&off_1E32D28E0;
    byte_1EE3365D0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3365C8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_59:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE3365C8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_59;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCIceTransportState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_0::operator() const(void)::impl;
    unk_1EE2F4AC0 = &WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_1::operator() const(void)::impl;
    qword_1EE2F4AC8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_2::operator() const(void)::impl;
    unk_1EE2F4AD0 = &WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_3::operator() const(void)::impl;
    qword_1EE2F4AD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_4::operator() const(void)::impl;
    unk_1EE2F4AE0 = &WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_5::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_6::operator() const(void)::impl += 2;
    qword_1EE2F4AE8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::$_6::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCIceTransportState)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

WebCore::JSRTCLogsCallback *WebCore::JSRTCLogsCallback::JSRTCLogsCallback(WebCore::JSRTCLogsCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E32D1F80;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSRTCLogsCallback::~JSRTCLogsCallback(WebCore::JSRTCLogsCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSRTCLogsCallback::handleEvent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Structure *v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  JSValue v49;
  _QWORD *v50;
  char v51[8];
  uint64_t v52;
  WTF *v53;
  _OWORD v54[4];
  uint64_t v55;
  _BYTE v56[8];
  uint64_t *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(JSC::VM **)v4;
  MEMORY[0x19AEA3294](v56, *((_QWORD *)v5 + 7));
  v51[0] = 0;
  v52 = 0x800000000;
  v53 = (WTF *)((char *)v54 + 8);
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  v6 = *((_QWORD *)v5 + 7);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = a2[3];
  if (v11)
  {
    v12 = WebCore::wrap<WebCore::RTCPeerConnection>((int)v5, v5, v11);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      goto LABEL_97;
    WTF::AtomStringImpl::addLiteral();
    v13 = (WTF::StringImpl *)v57;
    v57 = 0;
    v58 = v9;
    v59 = -1;
    v60 = 0x1000000;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v13, v12, 0, (uint64_t)&v57);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v15 = a2[2];
  if (!v15)
    goto LABEL_22;
  v16 = *((_QWORD *)v5 + 7);
  v17 = *(_DWORD *)(v15 + 4);
  if (v17)
  {
    if (v17 != 1)
    {
LABEL_15:
      v18 = *(_QWORD *)(v16 + 64760);
      if (!v18 || v15 != *(_QWORD *)(v18 + 8))
        v18 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_18;
    }
    v40 = *(unsigned __int8 **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      v41 = *v40;
    }
    else
    {
      v46 = *(unsigned __int16 *)v40;
      if (v46 > 0xFF)
        goto LABEL_15;
      v41 = v46;
    }
    v18 = *(_QWORD *)(v16 + 8 * v41 + 42216);
  }
  else
  {
    v18 = *(_QWORD *)(v16 + 41968);
  }
LABEL_18:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    goto LABEL_97;
  WTF::AtomStringImpl::addLiteral();
  v19 = (WTF::StringImpl *)v57;
  v57 = 0;
  v58 = v9;
  v59 = -1;
  v60 = 0x1000000;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v19, v18, 0, (uint64_t)&v57);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
LABEL_22:
  v21 = a2[1];
  if (!v21)
    goto LABEL_32;
  v22 = *((_QWORD *)v5 + 7);
  v23 = *(_DWORD *)(v21 + 4);
  if (!v23)
  {
    v24 = *(_QWORD *)(v22 + 41968);
    goto LABEL_28;
  }
  if (v23 == 1)
  {
    v42 = *(unsigned __int8 **)(v21 + 8);
    if ((*(_BYTE *)(v21 + 16) & 4) != 0)
    {
      v43 = *v42;
    }
    else
    {
      v47 = *(unsigned __int16 *)v42;
      if (v47 > 0xFF)
        goto LABEL_25;
      v43 = v47;
    }
    v24 = *(_QWORD *)(v22 + 8 * v43 + 42216);
    goto LABEL_28;
  }
LABEL_25:
  v24 = *(_QWORD *)(v22 + 64760);
  if (!v24 || v21 != *(_QWORD *)(v24 + 8))
    v24 = JSC::jsStringWithCacheSlowCase();
LABEL_28:
  if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v25 = (WTF::StringImpl *)v57;
    v57 = 0;
    v58 = v9;
    v59 = -1;
    v60 = 0x1000000;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v25, v24, 0, (uint64_t)&v57);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
LABEL_32:
    v27 = *a2;
    if (!*a2)
      goto LABEL_42;
    v28 = *((_QWORD *)v5 + 7);
    v29 = *(_DWORD *)(v27 + 4);
    if (!v29)
    {
      v30 = *(_QWORD *)(v28 + 41968);
      goto LABEL_38;
    }
    if (v29 != 1)
    {
LABEL_35:
      v30 = *(_QWORD *)(v28 + 64760);
      if (!v30 || v27 != *(_QWORD *)(v30 + 8))
        v30 = JSC::jsStringWithCacheSlowCase();
LABEL_38:
      if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v31 = (WTF::StringImpl *)v57;
        v57 = 0;
        v58 = v9;
        v59 = -1;
        v60 = 0x1000000;
        v61 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v31, v30, 0, (uint64_t)&v57);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v27);
          else
            *(_DWORD *)v31 -= 2;
        }
        goto LABEL_42;
      }
      goto LABEL_97;
    }
    v44 = *(unsigned __int8 **)(v27 + 8);
    if ((*(_BYTE *)(v27 + 16) & 4) != 0)
    {
      v45 = *v44;
    }
    else
    {
      v48 = *(unsigned __int16 *)v44;
      if (v48 > 0xFF)
        goto LABEL_35;
      v45 = v48;
    }
    v30 = *(_QWORD *)(v28 + 8 * v45 + 42216);
    goto LABEL_38;
  }
LABEL_97:
  v9 = 0;
LABEL_42:
  v32 = v52;
  if ((_DWORD)v52 == HIDWORD(v52) || v53 != (WTF *)((char *)v54 + 8) && v53)
  {
    v49.super.isa = (Class)v9;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v52, v49) == 1)
      v51[0] = 1;
  }
  else
  {
    *((_QWORD *)v53 + v52) = v9;
    LODWORD(v52) = v32 + 1;
  }
  v57 = 0;
  v33 = *(uint64_t **)(a1 + 24);
  v34 = *v33;
  if (*v33
    && (*(_BYTE *)(v34 + 8) & 3) == 0
    && *(_QWORD *)v34
    && ((v35 = v33[2]) == 0 || (*(_BYTE *)(v35 + 8) & 3) != 0 ? (v36 = 0) : (v36 = *(JSC::Structure **)v35),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v34, v36, 10, (uint64_t)v51, 0, 0, (uint64_t *)&v57), (v27 = (uint64_t)v57) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v57, 0, 0, 0);
    v37 = 1;
  }
  else
  {
    v37 = 0;
  }
  v38 = *(uint64_t **)&v54[0];
  if (*(_QWORD *)&v54[0])
  {
    v57 = &v52;
    v50 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v54[0], (uint64_t *)&v57);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v38, v50);
  }
  if (v53 != (WTF *)((char *)v54 + 8) && v53)
    WTF::fastFree(v53, (void *)v27);
  MEMORY[0x19AEA32A0](v56);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v37;
}

uint64_t WebCore::convertDictionary<WebCore::RTCPeerConnection::CertificateParameters>@<X0>(JSC::JSCell *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  char v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  double v11;
  JSC::JSGlobalObject *v12;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  char v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v48;
  char v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  double v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  _BYTE v57[7];
  JSC::VM *v58;
  WTF::StringImpl *v59;
  JSC::VM *v60;

  v4 = *(JSC::VM **)(result + 56);
  v58 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0.0;
LABEL_84:
    *(_QWORD *)a3 = v8;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = v10;
    *(double *)(a3 + 40) = v11;
    *(_BYTE *)(a3 + 48) = v5;
    *(_DWORD *)(a3 + 49) = *(_DWORD *)v57;
    *(_QWORD *)(a3 + 52) = *(unsigned int *)&v57[3];
    return result;
  }
  v12 = (JSC::JSGlobalObject *)result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_102;
  }
  v14 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v16 = (WTF::StringImpl *)JSC::JSObject::get(v14, v12, (unint64_t)v55);
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v15);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_102;
  }
  if (v16 == (WTF::StringImpl *)10)
  {
    v5 = 0;
    v11 = 0.0;
    goto LABEL_17;
  }
  v55 = v16;
  v17 = (JSC::VM *)*((_QWORD *)v12 + 7);
  v60 = v17;
  if ((unint64_t)v16 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v16;
  }
  else if ((unint64_t)v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v55, v12);
    v11 = v53;
  }
  else
  {
    *(_QWORD *)&v11 = (char *)v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    if ((result & 1) != 0)
    {
LABEL_102:
      *(_DWORD *)(a3 + 56) = 1;
      return result;
    }
  }
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    result = JSC::throwTypeError();
    goto LABEL_102;
  }
  v5 = 1;
LABEL_17:
  WTF::AtomStringImpl::addLiteral();
  v18 = v55;
  v20 = JSC::JSObject::get(v14, v12, (unint64_t)v55);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_102;
  }
  if (v20 == 10)
  {
    v6 = 0;
    goto LABEL_34;
  }
  v60 = (JSC::VM *)v20;
  v21 = (JSC::VM *)*((_QWORD *)v12 + 7);
  if ((v20 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v20 + 5) == 2)
  {
    v22 = *(WTF::StringImpl **)(v20 + 8);
    if ((v22 & 1) != 0)
    {
      v22 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, v12);
      if (!v22)
        goto LABEL_28;
    }
    else if (!v22)
    {
LABEL_28:
      v59 = v22;
      goto LABEL_29;
    }
    *(_DWORD *)v22 += 2;
    goto LABEL_28;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v60, v12);
LABEL_29:
  if (!*((_DWORD *)v21 + 20))
  {
    v6 = v59;
LABEL_31:
    v56 = 0;
LABEL_32:
    v23 = 0;
    v55 = 0;
    v24 = 1;
    goto LABEL_33;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
  v6 = v59;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_31;
  v23 = 1;
  v56 = 1;
  v59 = 0;
  if (!v6)
    goto LABEL_121;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_121:
    v6 = 0;
    v24 = 0;
    *(_DWORD *)(a3 + 56) = 1;
    goto LABEL_33;
  }
  result = WTF::StringImpl::destroy(v6, v48);
  v23 = v56;
  if (!v56)
  {
    v6 = v55;
    goto LABEL_32;
  }
  *(_DWORD *)(a3 + 56) = 1;
  if (v23 == -1)
    return result;
  v6 = 0;
  v24 = 0;
LABEL_33:
  result = ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E32D2D10[v23])(&v60, &v55);
  if (!v24)
    goto LABEL_147;
LABEL_34:
  WTF::AtomStringImpl::addLiteral();
  v26 = v55;
  v28 = JSC::JSObject::get(v14, v12, (unint64_t)v55);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_110;
  }
  if (v28 == 10)
  {
    v54 = 0;
  }
  else
  {
    result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v12, v28, &v55);
    if (HIDWORD(v55))
    {
LABEL_110:
      v8 = 0;
LABEL_111:
      *(_DWORD *)(a3 + 56) = 1;
      goto LABEL_148;
    }
    v54 = v55 | 0x100000000;
  }
  WTF::AtomStringImpl::addLiteral();
  v29 = v55;
  v31 = JSC::JSObject::get(v14, v12, (unint64_t)v55);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_110;
  }
  if (v31 == 10)
  {
    v8 = 0;
    goto LABEL_59;
  }
  v60 = (JSC::VM *)v31;
  v32 = (JSC::VM *)*((_QWORD *)v12 + 7);
  if ((v31 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v31 + 5) == 2)
  {
    v33 = *(WTF::StringImpl **)(v31 + 8);
    if ((v33 & 1) != 0)
    {
      v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v31, v12);
      if (!v33)
        goto LABEL_53;
    }
    else if (!v33)
    {
LABEL_53:
      v59 = v33;
      goto LABEL_54;
    }
    *(_DWORD *)v33 += 2;
    goto LABEL_53;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v60, v12);
LABEL_54:
  if (!*((_DWORD *)v32 + 20))
  {
    v8 = v59;
LABEL_56:
    v56 = 0;
LABEL_57:
    v34 = 0;
    v55 = 0;
    v35 = 1;
    goto LABEL_58;
  }
  v49 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
  v8 = v59;
  if ((v49 & 1) == 0)
    goto LABEL_56;
  v34 = 1;
  v56 = 1;
  v59 = 0;
  if (!v8)
    goto LABEL_128;
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
LABEL_128:
    v8 = 0;
    v35 = 0;
    *(_DWORD *)(a3 + 56) = 1;
    goto LABEL_58;
  }
  result = WTF::StringImpl::destroy(v8, v50);
  v34 = v56;
  if (!v56)
  {
    v8 = v55;
    goto LABEL_57;
  }
  *(_DWORD *)(a3 + 56) = 1;
  if (v34 == -1)
  {
LABEL_147:
    v8 = 0;
    goto LABEL_148;
  }
  v8 = 0;
  v35 = 0;
LABEL_58:
  result = ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E32D2D10[v34])(&v60, &v55);
  if (!v35)
    goto LABEL_148;
LABEL_59:
  WTF::AtomStringImpl::addLiteral();
  v36 = v55;
  v38 = JSC::JSObject::get(v14, v12, (unint64_t)v55);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v37);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_111;
  }
  if (v38 != 10)
  {
    v60 = (JSC::VM *)v38;
    v39 = (JSC::VM *)*((_QWORD *)v12 + 7);
    if ((v38 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v38 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v60, v12);
LABEL_71:
      if (*((_DWORD *)v39 + 20))
      {
        v51 = JSC::VM::hasExceptionsAfterHandlingTraps(v39);
        v9 = v59;
        if (v51)
        {
          v56 = 1;
          v59 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v52);
            else
              *(_DWORD *)v9 -= 2;
          }
          v42 = 0;
          v9 = 0;
          v41 = 1;
          *(_DWORD *)(a3 + 56) = 1;
LABEL_74:
          result = ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E32D2D10[v41])(&v60, &v55);
          if ((v42 & 1) == 0)
            goto LABEL_136;
          goto LABEL_75;
        }
      }
      else
      {
        v9 = v59;
      }
      v41 = 0;
      v56 = 0;
      v55 = 0;
      v42 = 1;
      goto LABEL_74;
    }
    v40 = *(WTF::StringImpl **)(v38 + 8);
    if ((v40 & 1) != 0)
    {
      v40 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v38, v12);
      if (!v40)
        goto LABEL_70;
    }
    else if (!v40)
    {
LABEL_70:
      v59 = v40;
      goto LABEL_71;
    }
    *(_DWORD *)v40 += 2;
    goto LABEL_70;
  }
  v9 = 0;
LABEL_75:
  WTF::AtomStringImpl::addLiteral();
  v43 = v55;
  result = JSC::JSObject::get(v14, v12, (unint64_t)v55);
  v45 = result;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      result = WTF::StringImpl::destroy(v43, v44);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (!*((_DWORD *)v4 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), !(_DWORD)result))
  {
    if (v45 == 10)
    {
      v10 = 0;
    }
    else
    {
      result = (uint64_t)WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>(v45, (uint64_t)&v55);
      v46 = v56;
      if (v56)
      {
        *(_DWORD *)(a3 + 56) = 1;
        if ((_DWORD)v46 != -1)
          result = ((uint64_t (*)(JSC::VM **, WTF::StringImpl **))off_1E32D3FB8[v46])(&v60, &v55);
        goto LABEL_136;
      }
      v10 = v55;
      v55 = 0;
      result = (uint64_t)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_((uint64_t)&v60, (_DWORD **)&v55);
    }
    v7 = v54;
    goto LABEL_84;
  }
  *(_DWORD *)(a3 + 56) = 1;
LABEL_136:
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      result = WTF::StringImpl::destroy(v9, v25);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_148:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      result = WTF::StringImpl::destroy(v6, v25);
      if (!v8)
        return result;
      goto LABEL_152;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v8)
    return result;
LABEL_152:
  if (*(_DWORD *)v8 == 2)
    return WTF::StringImpl::destroy(v8, v25);
  *(_DWORD *)v8 -= 2;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnection>::construct(JSC *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WebCore::JSDOMGlobalObject *v13;
  WTF *v14;
  uint64_t v15;
  WebCore::RTCCertificate *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF *v26;
  WTF *v27;
  JSCell *v28;
  JSC::JSCell *v29;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  JSC::JSObject *v34;
  JSC::Structure *v35;
  JSC::VM *FunctionRealm;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  int v44;
  JSC::JSCell *v45;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v47;
  JSC::Structure *v48;
  JSC::JSCell *v49;
  uint64_t v50;
  unint64_t SubclassStructure;
  bmalloc::api *v53;
  void *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  JSValue v57;
  WebCore::JSRTCPeerConnection *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  WTF *v61;
  WTF::StringImpl *v62;
  char v63;
  _QWORD v64[2];
  WTF *v65;
  uint64_t v66;
  int v67[2];
  WTF::StringImpl *v68;
  int v69;
  JSC::VM *v70;
  char v71;
  _BYTE v72[8];
  WTF *v73;
  WTF::StringImpl *v74;
  char v75;
  _QWORD v76[2];
  WTF *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 7);
  v70 = (JSC::VM *)v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v70, (uint64_t)"RTCPeerConnection", 18);
  v7 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E36638);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    v8 = 10;
  else
    v8 = *(_QWORD *)(a2 + 48);
  WebCore::convertDictionary<WebCore::RTCConfiguration>((uint64_t)v72, a1, (JSC::JSCell *)v8);
  v9 = v79;
  if (v79)
  {
    v28 = 0;
LABEL_59:
    if ((_DWORD)v9 != -1)
      ((void (*)(WTF **, WTF **))off_1E32D3FF8[v9])(&v61, &v73);
    return v28;
  }
  LOBYTE(v61) = 0;
  v63 = 0;
  if (v75)
  {
    v61 = v73;
    v10 = v74;
    v73 = 0;
    v74 = 0;
    v62 = v10;
    v63 = 1;
  }
  v64[0] = v76[0];
  *(_QWORD *)((char *)v64 + 6) = *(_QWORD *)((char *)v76 + 6);
  v65 = v77;
  v11 = v78;
  v77 = 0;
  v78 = 0;
  v66 = v11;
  WebCore::RTCPeerConnection::create((WebCore::Document *)(v7 - 192), (uint64_t)&v61, (uint64_t)v67);
  if (HIDWORD(v66))
  {
    v14 = v65;
    v15 = 8 * HIDWORD(v66);
    do
    {
      v16 = *(WebCore::RTCCertificate **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v16, v12);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v16;
        }
      }
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
  }
  v19 = v65;
  if (v65)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v19, v12);
  }
  if (v63)
  {
    v20 = v61;
    if (HIDWORD(v62))
    {
      v21 = 48 * HIDWORD(v62);
      do
      {
        v22 = (WTF::StringImpl *)*((_QWORD *)v20 + 4);
        *((_QWORD *)v20 + 4) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v12);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = (WTF::StringImpl *)*((_QWORD *)v20 + 3);
        *((_QWORD *)v20 + 3) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v12);
          else
            *(_DWORD *)v23 -= 2;
        }
        v24 = *((unsigned int *)v20 + 4);
        if ((_DWORD)v24 != -1)
          ((void (*)(char *, WTF *))off_1E32D3E60[v24])(&v71, v20);
        *((_DWORD *)v20 + 4) = -1;
        v20 = (WTF *)((char *)v20 + 48);
        v21 -= 48;
      }
      while (v21);
      v20 = v61;
    }
    if (v20)
    {
      v61 = 0;
      LODWORD(v62) = 0;
      WTF::fastFree(v20, v12);
    }
  }
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
    goto LABEL_79;
  if (!v69)
  {
    v25 = *(JSC::VM **)(v5 + 40);
    v26 = *(WTF **)v67;
    *(_QWORD *)v67 = 0;
    v61 = v26;
    if (*(uint64_t (***)(WebCore::RTCPeerConnection *__hidden))v26 != off_1E3361478)
    {
      __break(0xC471u);
      JUMPOUT(0x194E366E8);
    }
    v28 = (JSCell *)WebCore::createWrapper<WebCore::RTCPeerConnection,WebCore::RTCPeerConnection>(v25, (JSC::VM *)&v61, v13);
    if (v61)
    {
      if (*((_DWORD *)v61 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v61, v27);
        bmalloc::api::isoDeallocate(v53, v54);
      }
      else
      {
        --*((_DWORD *)v61 + 6);
      }
    }
    goto LABEL_42;
  }
  if (v69 == 1)
  {
    v55 = (WTF::StringImpl *)LOBYTE(v67[0]);
    LOBYTE(v61) = v67[0];
    v56 = v68;
    v68 = 0;
    v62 = v56;
    if (!*(_QWORD *)(v4 + 16))
    {
      v57.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v67[0]), (JSC::JSGlobalObject *)&v62);
      JSC::VM::throwException((JSC::VM *)v4, a1, v57);
      v56 = v62;
    }
    v62 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v55);
      else
        *(_DWORD *)v56 -= 2;
    }
    v28 = 0;
LABEL_42:
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      goto LABEL_79;
    v29 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v29 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v29)) == 0
      || (v32 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v33 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v31),
          *((_DWORD *)v33 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
    {
LABEL_56:
      if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
      {
LABEL_57:
        if (v69 != -1)
          ((void (*)(WTF **, int *))off_1E32D3FE8[v69])(&v61, v67);
        goto LABEL_59;
      }
LABEL_79:
      v28 = 0;
      goto LABEL_57;
    }
    v37 = *((_QWORD *)FunctionRealm + 412);
    if (v37)
    {
      v38 = *(_DWORD *)(v37 - 8);
      v39 = ((unint64_t)&WebCore::JSRTCPeerConnection::s_info
           + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnection::s_info
                                                                       + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) >> 22);
      v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      v42 = v38 & ((v41 >> 31) ^ v41);
      v43 = *(char ***)(v37 + 16 * v42);
      if (v43 == &WebCore::JSRTCPeerConnection::s_info)
      {
LABEL_52:
        v34 = *(JSC::JSObject **)(v37 + 16 * v42 + 8);
        if (v34)
        {
LABEL_54:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v32, v34, v35);
          if (!*((_DWORD *)v33 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) == 0)
            JSC::JSObject::setStructure(v28, v33, SubclassStructure);
          goto LABEL_56;
        }
      }
      else
      {
        v44 = 1;
        while (v43)
        {
          v42 = ((_DWORD)v42 + v44) & v38;
          v43 = *(char ***)(v37 + 16 * v42);
          ++v44;
          if (v43 == &WebCore::JSRTCPeerConnection::s_info)
            goto LABEL_52;
        }
      }
    }
    v45 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v33, FunctionRealm, v34);
    Structure = WebCore::JSRTCPeerConnectionPrototype::createStructure((uint64_t *)v33, (uint64_t)FunctionRealm, v45);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v49 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionPrototype::create(v33, Structure, v47, v48);
    v50 = WebCore::JSRTCPeerConnection::createStructure((uint64_t *)v33, (uint64_t)FunctionRealm, v49);
    v34 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v50, (uint64_t)&WebCore::JSRTCPeerConnection::s_info);
    goto LABEL_54;
  }
  v58 = (WebCore::JSRTCPeerConnection *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSRTCPeerConnection::prototype(v58, v59, v60);
}

uint64_t WebCore::JSRTCPeerConnection::prototype(WebCore::JSRTCPeerConnection *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSRTCPeerConnection::s_info + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnection::s_info + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSRTCPeerConnection::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSRTCPeerConnection::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSRTCPeerConnectionPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSRTCPeerConnection::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSRTCPeerConnection::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSRTCPeerConnection::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCPeerConnection::JSRTCPeerConnection(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSRTCPeerConnection::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSRTCPeerConnection::createPrototype(WebCore::JSRTCPeerConnection *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSRTCPeerConnectionPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSRTCPeerConnectionPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSRTCPeerConnectionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCPeerConnectionPrototype::create(WebCore::JSRTCPeerConnectionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t i;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 195; i += 5)
  {
    v10 = (&WebCore::JSRTCPeerConnectionPrototypeTableValues)[i + 1];
    if (v10)
    {
      if (v10 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSRTCPeerConnectionPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v11 = v22[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSRTCPeerConnection::s_info, (unint64_t *)v22, (uint64_t)&(&WebCore::JSRTCPeerConnectionPrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create((uint64_t)this, v22);
  v16 = v14;
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v13, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnection>,(WebCore::DOMConstructorID)157>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1256);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v24) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v22);
    v5[2] = SlowCase + (int)v22;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v24, &WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnection>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v23 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v23);
    v10[2848] = v2 + (int)v23;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v24 = 0;
  v25 = v2;
  v26 = -1;
  v27 = 0x1000000;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v24);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v24);
  v14 = v24;
  v24 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v24 = 0;
  v25 = v2;
  v26 = -1;
  v27 = 0x1000000;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v24);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSRTCPeerConnection::prototype((WebCore::JSRTCPeerConnection *)a1, (JSC::VM *)a2, v17);
  v24 = 0;
  v25 = v2;
  v26 = -1;
  v27 = 0x1000000;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v24);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v19 = v24;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSRTCPeerConnection::s_info, (unint64_t *)&v24, (uint64_t)&WebCore::JSRTCPeerConnectionConstructorTableValues, (unsigned __int8 *)v2);
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1256) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCPeerConnectionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCPeerConnectionPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnection>,(WebCore::DOMConstructorID)157>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCPeerConnection_localDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  bmalloc::api *v4;
  WTF::StringImpl *v5;
  unint64_t v6;
  WTF::StringImpl *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(bmalloc::api **)(v2 + 312);
  if (!v4)
  {
    v4 = *(bmalloc::api **)(v2 + 304);
    if (!v4)
      return 2;
  }
  ++*(_DWORD *)v4;
  v6 = WebCore::wrap<WebCore::RTCSessionDescription>(a1, v3, v4);
  if (*(_DWORD *)v4 == 1)
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((_QWORD *)v4 + 1);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *((_QWORD *)v4 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v4, v5);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return v6;
}

uint64_t WebCore::jsRTCPeerConnection_currentLocalDescription(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v7;
  uint64_t v8;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 304);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)v2;
  v5 = WebCore::wrap<WebCore::RTCSessionDescription>(a1, v3, v2);
  if (*(_DWORD *)v2 == 1)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *((_QWORD *)v2 + 1);
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 3;
      *((_QWORD *)v2 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return v5;
}

uint64_t WebCore::jsRTCPeerConnection_pendingLocalDescription(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  unint64_t v5;
  WTF::StringImpl *v7;
  uint64_t v8;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 312);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)v2;
  v5 = WebCore::wrap<WebCore::RTCSessionDescription>(a1, v3, v2);
  if (*(_DWORD *)v2 == 1)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v4);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *((_QWORD *)v2 + 1);
    if (v8)
    {
      *(_QWORD *)(v8 + 8) = 3;
      *((_QWORD *)v2 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v2, v4);
  }
  else
  {
    --*(_DWORD *)v2;
  }
  return v5;
}

uint64_t WebCore::jsRTCPeerConnection_remoteDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  bmalloc::api *v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(bmalloc::api **)(v2 + 328);
  if (v4)
    return WebCore::wrap<WebCore::RTCSessionDescription>(a1, v3, v4);
  v4 = *(bmalloc::api **)(v2 + 320);
  if (v4)
    return WebCore::wrap<WebCore::RTCSessionDescription>(a1, v3, v4);
  else
    return 2;
}

unint64_t WebCore::jsRTCPeerConnection_currentRemoteDescription(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 320);
  if (v2)
    return WebCore::wrap<WebCore::RTCSessionDescription>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsRTCPeerConnection_pendingRemoteDescription(uint64_t a1, uint64_t a2)
{
  bmalloc::api *v2;

  v2 = *(bmalloc::api **)(*(_QWORD *)(a2 + 24) + 328);
  if (v2)
    return WebCore::wrap<WebCore::RTCSessionDescription>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCPeerConnection_signalingState(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCSignalingState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 68));
}

uint64_t WebCore::jsRTCPeerConnection_iceGatheringState(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCIceGatheringState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::jsRTCPeerConnection_iceConnectionState(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 76);
  if ((byte_1EE336508 & 1) == 0)
  {
    dword_1ECE79720 += 2;
    dword_1ECE79740 += 2;
    qword_1EE3366B0 = (uint64_t)&dword_1ECE79720;
    unk_1EE3366B8 = &dword_1ECE79740;
    dword_1ECE79760 += 2;
    dword_1ECE79780 += 2;
    qword_1EE3366C0 = (uint64_t)&dword_1ECE79760;
    unk_1EE3366C8 = &dword_1ECE79780;
    dword_1ECE797A0 += 2;
    dword_1ECE797C0 += 2;
    qword_1EE3366D0 = (uint64_t)&dword_1ECE797A0;
    unk_1EE3366D8 = &dword_1ECE797C0;
    dword_1ECE797E0 += 2;
    qword_1EE3366E0 = (uint64_t)&dword_1ECE797E0;
    byte_1EE336508 = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_468[8 * v4 + 432];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsRTCPeerConnection_connectionState(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCPeerConnectionState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 80));
}

uint64_t WebCore::jsRTCPeerConnection_canTrickleIceCandidates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(v2 + 80) == 5 || !*(_QWORD *)(v2 + 328) && !*(_QWORD *)(v2 + 320))
    return 2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 168))(*(_QWORD *)(v2 + 120));
  v5 = 6;
  if ((_BYTE)v4)
    v5 = 7;
  if ((v4 & 0xFF00) != 0)
    return v5;
  else
    return 2;
}

uint64_t WebCore::jsRTCPeerConnection_onnegotiationneeded(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1304), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onnegotiationneeded(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1304), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_onicecandidate(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 968), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onicecandidate(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 968), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_onsignalingstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1856), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onsignalingstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1856), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_oniceconnectionstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_oniceconnectionstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 984), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_onicegatheringstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 992), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onicegatheringstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 992), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_onconnectionstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 480), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onconnectionstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 480), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_onicecandidateerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 976), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_onicecandidateerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 976), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRTCPeerConnection_ontrack(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2112), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_ontrack(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2112), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

unint64_t WebCore::jsRTCPeerConnection_sctp(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 296);
  if (v2)
    return WebCore::wrap<WebCore::RTCSctpTransport>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCPeerConnection_ondatachannel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 576), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSRTCPeerConnection_ondatachannel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 576), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRTCPeerConnection::subspaceForImpl(WebCore::JSRTCPeerConnection *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1280);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1280);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1280);
    *(_QWORD *)(v8 + 1280) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1280);
  *(_QWORD *)(v3 + 1280) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSRTCPeerConnectionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCPeerConnectionOwner::finalize(uint64_t a1, WTF *a2, uint64_t a3)
{
  WebCore::RTCPeerConnection *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCPeerConnection *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCPeerConnection **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCPeerConnection **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCPeerConnection **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::createWrapper<WebCore::RTCPeerConnection,WebCore::RTCPeerConnection>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  WebCore::JSRTCPeerConnection *v22;
  _QWORD *v23;
  unint64_t SlowCase;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *Allocator;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSRTCPeerConnection::s_info
        + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnection::s_info
                                                                    + ~((_QWORD)&WebCore::JSRTCPeerConnection::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSRTCPeerConnection::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSRTCPeerConnection::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSRTCPeerConnectionPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSRTCPeerConnection::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSRTCPeerConnection::s_info);
LABEL_8:
  v22 = (WebCore::JSRTCPeerConnection *)*((_QWORD *)a1 + 7);
  v23 = (_QWORD *)WebCore::JSRTCPeerConnection::subspaceForImpl(v22, a2);
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_9:
    v23[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v36);
    v23[5] = SlowCase + (int)v36;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v25 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v25;
  if (*((_BYTE *)v22 + 755))
    __dmb(0xAu);
  v26 = *((_QWORD *)a1 + 415);
  if ((byte_1EE3365E0 & 1) == 0)
  {
    qword_1EE3365D8 = (uint64_t)&off_1E32D2910;
    byte_1EE3365E0 = 1;
  }
  if (v5)
    v27 = (uint64_t *)(v5 + 8);
  else
    v27 = 0;
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v28 = (SlowCase - 112) | 1;
    else
      v28 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v28 & 1) != 0)
      v29 = v28 + 47;
    else
      v29 = *(_QWORD *)v28 + 32;
    Allocator = *(_QWORD **)(v29 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v29 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3365D8;
    Allocator[2] = v26;
    v31 = *v27;
    *v27 = (uint64_t)Allocator;
    if (!v31)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v31 + 8) = 3;
    return SlowCase;
  }
  v38 = v5;
  if ((SlowCase & 8) != 0)
    v33 = (SlowCase - 112) | 1;
  else
    v33 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v33 & 1) != 0)
    v34 = v33 + 47;
  else
    v34 = *(_QWORD *)v33 + 32;
  v35 = *(_QWORD **)(v34 + 16);
  if (!v35)
    v35 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v34 + 16) = *v35;
  *v35 = SlowCase;
  v35[1] = &qword_1EE3365D8;
  v35[2] = v26;
  v37 = v35;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), &v38, (uint64_t *)&v37);
  v31 = (uint64_t)v37;
  if (v37)
    goto LABEL_35;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::RTCPeerConnection>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF *v6;
  uint64_t result;
  bmalloc::api *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WebCore::RTCPeerConnection *v18;

  v3 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v3 + 48))
  {
    v10 = *(_QWORD *)(v3 + 32);
    if (!v10)
      goto LABEL_5;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v4 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (!v4)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v4 + 8) & 3) == 0)
  {
    v5 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      return v5;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v18 = (WebCore::RTCPeerConnection *)a3;
  if (*(uint64_t (***)(WebCore::RTCPeerConnection *__hidden))a3 == off_1E3361478)
  {
    v5 = WebCore::createWrapper<WebCore::RTCPeerConnection,WebCore::RTCPeerConnection>(a2, (JSC::VM *)&v18, (WebCore::JSDOMGlobalObject *)a3);
    if (v18)
    {
      if (*((_DWORD *)v18 + 6) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection(v18, v6);
        bmalloc::api::isoDeallocate(v8, v9);
      }
      else
      {
        --*((_DWORD *)v18 + 6);
      }
    }
    return v5;
  }
  result = 1369;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCPeerConnection::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSRTCPeerConnection::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  JSC::VM *v4;
  JSC::Structure *v6;
  int v7;
  unint64_t v8;
  JSC::JSCell *v9;
  uint64_t Object;
  WTF::StringImpl *v11;
  BOOL v12;
  JSC::VM *v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  BOOL v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  BOOL v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  _BOOL4 v34;
  unint64_t v35;
  int v36;
  JSC::Structure *v37;
  __int16 v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WebCore::JSDOMGlobalObject *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  JSC::VM *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char **v53;
  int v54;
  unint64_t v55;
  WebCore::JSEvent *v56;
  JSC::JSCell *v57;
  unint64_t Structure;
  JSC::Structure *v59;
  JSC::JSCell *v60;
  uint64_t v61;
  JSCell *v62;
  JSC::JSCell *v63;
  JSC::JSGlobalObject *v64;
  JSC::JSObject *v65;
  JSC::JSGlobalObject *v66;
  JSC::VM *v67;
  WebCore::JSDOMGlobalObject *v68;
  JSC::Structure *v69;
  JSC::VM *FunctionRealm;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char **v77;
  int v78;
  JSC::JSCell *v79;
  unint64_t v80;
  JSC::Structure *v81;
  JSC::JSCell *v82;
  uint64_t v83;
  unint64_t SubclassStructure;
  _DWORD *v85;
  JSCell *v86;
  JSC::VM *v88;
  double v89;
  double v90;
  double v91;
  long double v92;
  double v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  int v100;
  JSC::VM *v101;
  double v102;
  double v103;
  double v104;
  long double v105;
  double v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  BOOL v109;
  WTF::StringImpl *v110;
  JSC::VM *v111;
  _DWORD *v112;
  uint64_t v113;
  JSValue v114;
  double v115;
  char hasExceptionsAfterHandlingTraps;
  int v117;
  WTF::StringImpl *v118;
  double v119;
  char v120;
  BOOL v121;
  int v122;
  uint64_t v123;
  int *v124;
  int v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  int *v129;
  int v130;
  BOOL v131;
  int v132;
  uint64_t v133;
  int *v134;
  int v135;
  BOOL v136;
  BOOL v137;
  BOOL v138;
  WTF::StringImpl *v139;
  JSC::Structure *v140;
  uint64_t v141;
  JSC::VM *v142;
  JSC *v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  int v146;
  JSC::Structure *v147;
  __int16 v148;
  WTF::StringImpl *v149;
  unsigned int v150;
  WTF::StringImpl *v151;
  int v152;
  _DWORD *v153;
  int v154;
  JSC::VM *v155;
  _QWORD v156[2];

  v3 = (uint64_t)a1;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v114.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, (JSC::JSGlobalObject *)v3, v114);
  }
  v6 = *(JSC::Structure **)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v151);
  v7 = v152;
  if (v152)
  {
    v86 = 0;
    goto LABEL_95;
  }
  v8 = 0xFFFE000000000002;
  v141 = a2;
  v142 = v4;
  v9 = *(JSC::JSCell **)(a2 + 56);
  v155 = *(JSC::VM **)(v3 + 56);
  v143 = (JSC *)v3;
  v140 = v6;
  if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
    }
    else
    {
      v6 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v2 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
          WTF::StringImpl::destroy(v144, v11);
        else
          *(_DWORD *)v144 -= 2;
      }
      if (!*((_DWORD *)v155 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v155))
      {
        if (v2 == 10)
        {
          v12 = 0;
          goto LABEL_18;
        }
        v13 = *(JSC::VM **)(v3 + 56);
        if (v2 >= 0xFFFE000000000000)
          goto LABEL_235;
        *(_QWORD *)&v14 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v12 = v14 > 0.0 || v14 < 0.0;
          goto LABEL_17;
        }
        if ((v2 & 0xFFFE000000000002) != 0)
        {
          v12 = v2 == 7;
          goto LABEL_17;
        }
        v122 = *(unsigned __int8 *)(v2 + 5);
        if (v122 == 3)
        {
          v125 = *(_DWORD *)(v2 + 8);
        }
        else
        {
          if (v122 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v121 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == v3;
              goto LABEL_236;
            }
            v12 = 1;
            goto LABEL_17;
          }
          v123 = *(_QWORD *)(v2 + 8);
          if ((v123 & 1) != 0)
            v124 = (int *)(v2 + 16);
          else
            v124 = (int *)(v123 + 4);
          v125 = *v124;
        }
        v12 = v125 != 0;
        goto LABEL_17;
      }
    }
    goto LABEL_174;
  }
  v2 = 0;
LABEL_53:
  WebCore::throwRequiredMemberTypeError(v3, (int)&v155, "errorCode", 10, "RTCPeerConnectionIceErrorEventInit", 35, "unsigned short", 15);
LABEL_54:
  v30 = 1;
LABEL_55:
  v150 = v30;
LABEL_56:
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v2, v29);
    else
      *(_DWORD *)v2 -= 2;
  }
  while (1)
  {
    v31 = v150;
    if (v150)
      break;
    if (!v152)
    {
      v32 = v151;
      v151 = 0;
      v33 = v144;
      v34 = BYTE1(v144) != 0;
      v35 = v145;
      v36 = v146;
      v37 = v147;
      v145 = 0;
      v147 = 0;
      v38 = v148;
      v39 = v149;
      v149 = 0;
      v40 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v40);
      *(_QWORD *)(v40 + 8) = 0;
      v44 = *(_DWORD *)(v40 + 20) & 0xFFC00000;
      if (v33)
        v45 = 1344002;
      else
        v45 = 1344000;
      *(_DWORD *)(v40 + 16) = 1;
      *(_DWORD *)(v40 + 20) = v45 | (v32 != 0) | (4 * v34) | v44;
      if (v32)
        *(_DWORD *)v32 += 2;
      *(_QWORD *)(v40 + 24) = v32;
      *(_QWORD *)(v40 + 32) = 0;
      *(_QWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = v43;
      *(_QWORD *)v40 = off_1E33615D8;
      *(_QWORD *)(v40 + 64) = 0;
      *(_QWORD *)(v40 + 72) = v35;
      *(_DWORD *)(v40 + 80) = v36;
      *(_QWORD *)(v40 + 88) = v37;
      *(_WORD *)(v40 + 96) = v38;
      *(_QWORD *)(v40 + 104) = v39;
      v153 = (_DWORD *)v40;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::destroy(v32, v41);
          if (*(void (***)(WebCore::RTCPeerConnectionIceErrorEvent *__hidden))v40 != off_1E33615D8)
          {
            __break(0xC471u);
            JUMPOUT(0x194E39D8CLL);
          }
        }
        else
        {
          *(_DWORD *)v32 -= 2;
        }
      }
      v46 = (JSC::VM *)*((_QWORD *)v140 + 5);
      v47 = *((_QWORD *)v46 + 412);
      if (!v47)
        goto LABEL_75;
      v48 = *(_DWORD *)(v47 - 8);
      v49 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
           + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
                                                                                    + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      v52 = v48 & ((v51 >> 31) ^ v51);
      v53 = *(char ***)(v47 + 16 * v52);
      if (v53 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
      {
LABEL_74:
        v55 = *(_QWORD *)(v47 + 16 * v52 + 8);
        if (!v55)
          goto LABEL_75;
      }
      else
      {
        v54 = 1;
        while (v53)
        {
          v52 = ((_DWORD)v52 + v54) & v48;
          v53 = *(char ***)(v47 + 16 * v52);
          ++v54;
          if (v53 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
            goto LABEL_74;
        }
LABEL_75:
        v56 = (WebCore::JSEvent *)*((_QWORD *)v46 + 7);
        v57 = (JSC::JSCell *)WebCore::JSEvent::prototype(v56, *((JSC::VM **)v140 + 5), v42);
        Structure = WebCore::JSRTCPeerConnectionIceErrorEventPrototype::createStructure((uint64_t *)v56, (uint64_t)v46, v57);
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v60 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceErrorEventPrototype::create(v56, v46, Structure, v59);
        v61 = WebCore::JSRTCPeerConnectionIceErrorEvent::createStructure((uint64_t *)v56, (uint64_t)v46, v60);
        v55 = WebCore::cacheDOMStructure((JSCell *)v46, v61, (uint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info);
      }
      v62 = (JSCell *)WebCore::JSRTCPeerConnectionIceErrorEvent::create(v55, v46, (uint64_t *)&v153);
      WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v46 + 415), v40, (uint64_t)v62);
      v63 = *(JSC::JSCell **)(v141 + 40);
      if (((unint64_t)v63 & 0xFFFE000000000002) != 0
        || (v64 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v63)) == 0
        || (v66 = v64, v64 == *(JSC::JSGlobalObject **)(v141 + 24))
        || (v67 = (JSC::VM *)*((_QWORD *)v143 + 7),
            FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(v143, v64, v65),
            *((_DWORD *)v67 + 20))
        && (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) != 0)
      {
LABEL_89:
        if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
          v62 = 0;
        v85 = v153;
        v153 = 0;
        if (v85)
        {
          if (v85[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
          else
            --v85[4];
        }
        goto LABEL_93;
      }
      v71 = *((_QWORD *)FunctionRealm + 412);
      if (v71)
      {
        v72 = *(_DWORD *)(v71 - 8);
        v73 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
             + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
                                                                                      + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) >> 22);
        v74 = 9 * ((v73 + ~(v73 << 13)) ^ ((v73 + ~(v73 << 13)) >> 8));
        v75 = (v74 ^ (v74 >> 15)) + ~((v74 ^ (v74 >> 15)) << 27);
        v76 = v72 & ((v75 >> 31) ^ v75);
        v77 = *(char ***)(v71 + 16 * v76);
        if (v77 != &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
        {
          v78 = 1;
          while (v77)
          {
            v76 = ((_DWORD)v76 + v78) & v72;
            v77 = *(char ***)(v71 + 16 * v76);
            ++v78;
            if (v77 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
              goto LABEL_85;
          }
          goto LABEL_86;
        }
LABEL_85:
        v68 = *(WebCore::JSDOMGlobalObject **)(v71 + 16 * v76 + 8);
        if (!v68)
          goto LABEL_86;
      }
      else
      {
LABEL_86:
        v79 = (JSC::JSCell *)WebCore::JSEvent::prototype(v67, FunctionRealm, v68);
        v80 = WebCore::JSRTCPeerConnectionIceErrorEventPrototype::createStructure((uint64_t *)v67, (uint64_t)FunctionRealm, v79);
        *(_DWORD *)(v80 + 16) |= 0x80000u;
        v82 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceErrorEventPrototype::create(v67, FunctionRealm, v80, v81);
        v83 = WebCore::JSRTCPeerConnectionIceErrorEvent::createStructure((uint64_t *)v67, (uint64_t)FunctionRealm, v82);
        v68 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v83, (uint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info);
      }
      SubclassStructure = JSC::InternalFunction::createSubclassStructure(v143, v66, v68, v69);
      if (!*((_DWORD *)v67 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) == 0)
        JSC::JSObject::setStructure(v62, v67, SubclassStructure);
      goto LABEL_89;
    }
    v13 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_235:
    v121 = (_DWORD)v2 == 0;
LABEL_236:
    v12 = !v121;
LABEL_17:
    if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    {
LABEL_174:
      v150 = 1;
    }
    else
    {
LABEL_18:
      WTF::AtomStringImpl::addLiteral();
      v15 = v144;
      v2 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
        goto LABEL_174;
      if (v2 == 10)
      {
        v17 = 0;
        goto LABEL_29;
      }
      v18 = *(JSC::VM **)(v3 + 56);
      if (v2 >= 0xFFFE000000000000)
      {
        v126 = (_DWORD)v2 == 0;
      }
      else
      {
        *(_QWORD *)&v19 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v19 > 0.0)
LABEL_279:
            v17 = 1;
          else
            v17 = v19 < 0.0;
          goto LABEL_280;
        }
        if ((v2 & v8) != 0)
        {
          v17 = v2 == 7;
          goto LABEL_28;
        }
        v127 = *(unsigned __int8 *)(v2 + 5);
        if (v127 == 3)
        {
          v130 = *(_DWORD *)(v2 + 8);
          goto LABEL_277;
        }
        if (v127 == 2)
        {
          v128 = *(_QWORD *)(v2 + 8);
          if ((v128 & 1) != 0)
            v129 = (int *)(v2 + 16);
          else
            v129 = (int *)(v128 + 4);
          v130 = *v129;
LABEL_277:
          v17 = v130 != 0;
LABEL_280:
          v3 = (uint64_t)v143;
          goto LABEL_28;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          goto LABEL_279;
        v3 = (uint64_t)v143;
        v126 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)v143;
      }
      v17 = !v126;
LABEL_28:
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
        goto LABEL_174;
LABEL_29:
      WTF::AtomStringImpl::addLiteral();
      v20 = v144;
      v2 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v21);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
        goto LABEL_174;
      if (v2 == 10)
      {
        v22 = 0;
        goto LABEL_40;
      }
      v23 = *(JSC::VM **)(v3 + 56);
      if (v2 >= 0xFFFE000000000000)
      {
        v131 = (_DWORD)v2 == 0;
      }
      else
      {
        *(_QWORD *)&v24 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v24 > 0.0)
LABEL_284:
            v22 = 1;
          else
            v22 = v24 < 0.0;
          goto LABEL_285;
        }
        if ((v2 & v8) != 0)
        {
          v22 = v2 == 7;
          goto LABEL_39;
        }
        v132 = *(unsigned __int8 *)(v2 + 5);
        if (v132 == 3)
        {
          v135 = *(_DWORD *)(v2 + 8);
          goto LABEL_282;
        }
        if (v132 == 2)
        {
          v133 = *(_QWORD *)(v2 + 8);
          if ((v133 & 1) != 0)
            v134 = (int *)(v2 + 16);
          else
            v134 = (int *)(v133 + 4);
          v135 = *v134;
LABEL_282:
          v22 = v135 != 0;
LABEL_285:
          v3 = (uint64_t)v143;
          goto LABEL_39;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          goto LABEL_284;
        v3 = (uint64_t)v143;
        v131 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)v143;
      }
      v22 = !v131;
LABEL_39:
      if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
        goto LABEL_174;
LABEL_40:
      WTF::AtomStringImpl::addLiteral();
      v2 = (unint64_t)v144;
      v26 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
      if (v2)
      {
        if (*(_DWORD *)v2 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v2, v25);
        else
          *(_DWORD *)v2 -= 2;
      }
      if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
        goto LABEL_174;
      if (v26 == 10)
      {
        v2 = 0;
        goto LABEL_48;
      }
      WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert((JSC::JSGlobalObject *)v3, v26, (uint64_t)&v153);
      if (!v154)
      {
        v2 = (unint64_t)v153;
LABEL_48:
        WTF::AtomStringImpl::addLiteral();
        v27 = v144;
        v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v28);
          else
            *(_DWORD *)v27 -= 2;
        }
        if (*((_DWORD *)v155 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v155))
          goto LABEL_54;
        if (v8 == 10)
          goto LABEL_53;
        v137 = v17;
        v144 = (WTF::StringImpl *)v8;
        v88 = *(JSC::VM **)(v3 + 56);
        if (v8 < 0xFFFE000000000000 || (v8 & 0x80000000) != 0)
        {
          if (v8 >= 0xFFFE000000000000)
          {
            v89 = (double)(int)v8;
          }
          else if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v144, (JSC::JSGlobalObject *)v3);
          }
          else
          {
            *(_QWORD *)&v89 = v8 - 0x2000000000000;
          }
          if (*((_DWORD *)v88 + 20))
          {
            v115 = v89;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v88);
            v89 = v115;
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
              goto LABEL_54;
          }
          v8 = 0;
          if (fabs(v89) != INFINITY && v89 != 0.0)
          {
            v90 = -floor(-v89);
            v91 = floor(v89);
            if (v89 >= 0.0)
              v92 = v91;
            else
              v92 = v90;
            v93 = fmod(v92, 65536.0);
            if (v93 < 0.0)
              v93 = v93 + 65536.0;
            v8 = (int)v93;
          }
        }
        WTF::AtomStringImpl::addLiteral();
        v94 = v144;
        v96 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
            WTF::StringImpl::destroy(v94, v95);
          else
            *(_DWORD *)v94 -= 2;
        }
        if (*((_DWORD *)v155 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v155) & 1) != 0)
          goto LABEL_54;
        v136 = v12;
        v138 = v22;
        if (v96 == 10)
        {
          v139 = 0;
          goto LABEL_120;
        }
        WebCore::valueToUSVString((JSC::JSGlobalObject *)v3, v96, (uint64_t)&v153);
        if (!v154)
        {
          v139 = (WTF::StringImpl *)v153;
LABEL_120:
          WTF::AtomStringImpl::addLiteral();
          v97 = v144;
          v99 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
              WTF::StringImpl::destroy(v97, v98);
            else
              *(_DWORD *)v97 -= 2;
          }
          if (*((_DWORD *)v155 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v155) & 1) != 0)
            goto LABEL_210;
          if ((v99 | 8) == 0xA)
          {
            v100 = 0;
          }
          else
          {
            v144 = (WTF::StringImpl *)v99;
            v101 = *(JSC::VM **)(v3 + 56);
            if (v99 < 0xFFFE000000000000 || (v99 & 0x80000000) != 0)
            {
              if (v99 >= 0xFFFE000000000000)
              {
                v102 = (double)(int)v99;
              }
              else if (v99 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v144, (JSC::JSGlobalObject *)v3);
              }
              else
              {
                *(_QWORD *)&v102 = v99 - 0x2000000000000;
              }
              if (*((_DWORD *)v101 + 20))
              {
                v119 = v102;
                v120 = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
                v102 = v119;
                if ((v120 & 1) != 0)
                  goto LABEL_210;
              }
              LOWORD(v99) = 0;
              if (fabs(v102) != INFINITY && v102 != 0.0)
              {
                v103 = -floor(-v102);
                v104 = floor(v102);
                if (v102 >= 0.0)
                  v105 = v104;
                else
                  v105 = v103;
                v106 = fmod(v105, 65536.0);
                if (v106 < 0.0)
                  v106 = v106 + 65536.0;
                LODWORD(v99) = (int)v106;
              }
            }
            v100 = (unsigned __int16)v99 | 0x10000;
          }
          WTF::AtomStringImpl::addLiteral();
          v107 = v144;
          v108 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)v3, (unint64_t)v144);
          if (v107)
          {
            if (*(_DWORD *)v107 == 2)
              WTF::StringImpl::destroy(v107, v29);
            else
              *(_DWORD *)v107 -= 2;
          }
          if (*((_DWORD *)v155 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v155) & 1) != 0)
          {
LABEL_210:
            v6 = 0;
            v150 = 1;
            v110 = v139;
            goto LABEL_211;
          }
          if (v108 == 10)
          {
            v6 = 0;
            v109 = v138;
            v110 = v139;
LABEL_157:
            v30 = 0;
            LOBYTE(v144) = v136;
            BYTE1(v144) = v137;
            BYTE2(v144) = v109;
            v145 = v2;
            v146 = v100;
            v147 = v6;
            v148 = v8;
            v149 = v110;
            v2 = 0;
            goto LABEL_55;
          }
          v144 = (WTF::StringImpl *)v108;
          v111 = *(JSC::VM **)(v3 + 56);
          if ((v108 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v108 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v144, (JSC::JSGlobalObject *)v3);
          }
          else
          {
            v112 = *(_DWORD **)(v108 + 8);
            if ((v112 & 1) != 0)
            {
              v112 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v108, (JSC::JSGlobalObject *)v3);
              if (v112)
LABEL_151:
                *v112 += 2;
            }
            else if (v112)
            {
              goto LABEL_151;
            }
            v156[0] = v112;
          }
          if (!*((_DWORD *)v111 + 20))
          {
            v6 = (JSC::Structure *)v156[0];
            goto LABEL_155;
          }
          v117 = JSC::VM::hasExceptionsAfterHandlingTraps(v111);
          v6 = (JSC::Structure *)v156[0];
          if (v117)
          {
            v113 = 1;
            v154 = 1;
            v156[0] = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, v118);
              else
                *(_DWORD *)v6 -= 2;
            }
            v3 = 0;
            v6 = 0;
            v150 = 1;
          }
          else
          {
LABEL_155:
            v113 = 0;
            v154 = 0;
            v153 = 0;
            v3 = 1;
          }
          v109 = v138;
          ((void (*)(_QWORD *, _DWORD **))off_1E32D2D10[v113])(v156, &v153);
          v110 = v139;
          if ((_DWORD)v3)
            goto LABEL_157;
LABEL_211:
          if (v110)
          {
            if (*(_DWORD *)v110 != 2)
            {
              *(_DWORD *)v110 -= 2;
              goto LABEL_214;
            }
            WTF::StringImpl::destroy(v110, v29);
            if (!v6)
              goto LABEL_56;
          }
          else
          {
LABEL_214:
            if (!v6)
              goto LABEL_56;
          }
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v29);
          else
            *(_DWORD *)v6 -= 2;
          goto LABEL_56;
        }
        v150 = 1;
        if (v154 != -1)
          ((void (*)(_QWORD *, _DWORD **))off_1E32D2D10[v154])(v156, &v153);
        goto LABEL_56;
      }
      v150 = 1;
      if (v154 != -1)
        ((void (*)(_QWORD *, _DWORD **))off_1E32D2D10[v154])(v156, &v153);
    }
  }
  v62 = 0;
  v86 = 0;
  if (v150 != -1)
  {
LABEL_93:
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E32D4758[v31])(&v153, &v144);
    v86 = v62;
  }
  v7 = v152;
LABEL_95:
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2930[v7])(&v144, &v151);
  return v86;
}

uint64_t WebCore::JSRTCPeerConnectionIceErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCPeerConnectionIceErrorEventPrototype::create(WebCore::JSRTCPeerConnectionIceErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info, &WebCore::JSRTCPeerConnectionIceErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceErrorEvent>,(WebCore::DOMConstructorID)158>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1264);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info
                                                                                  + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCPeerConnectionIceErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCPeerConnectionIceErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceErrorEventPrototype::create((WebCore::JSRTCPeerConnectionIceErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCPeerConnectionIceErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCPeerConnectionIceErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1264) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCPeerConnectionIceErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCPeerConnectionIceErrorEventPrototype::s_info != (char **)(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceErrorEvent>,(WebCore::DOMConstructorID)158>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCPeerConnectionIceErrorEvent_address(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsRTCPeerConnectionIceErrorEvent_port(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCPeerConnectionIceErrorEvent_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsRTCPeerConnectionIceErrorEvent_errorCode(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 96) | 0xFFFE000000000000;
}

uint64_t WebCore::jsRTCPeerConnectionIceErrorEvent_errorText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSRTCPeerConnectionIceErrorEvent::subspaceForImpl(WebCore::JSRTCPeerConnectionIceErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1288);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1288))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1288);
    *(_QWORD *)(v8 + 1288) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1288);
  *(_QWORD *)(v3 + 1288) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v2;
  JSC::Structure *v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  unint64_t v9;
  JSC::JSCell *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t i;
  uint64_t Object;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WebCore::JSDOMGlobalObject *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  JSC::VM *v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  unint64_t v53;
  WebCore::JSEvent *v54;
  JSC::JSCell *v55;
  unint64_t v56;
  JSC::Structure *v57;
  JSC::JSCell *v58;
  uint64_t v59;
  JSCell *v60;
  JSC::JSCell *v61;
  JSC::JSGlobalObject *v62;
  JSC::JSObject *v63;
  JSC::JSGlobalObject *v64;
  JSC::VM *v65;
  JSC::JSObject *v66;
  JSC::Structure *v67;
  JSC::VM *FunctionRealm;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  int v76;
  JSC::JSCell *v77;
  unint64_t Structure;
  JSC::Structure *v79;
  JSC::JSCell *v80;
  uint64_t v81;
  unint64_t SubclassStructure;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  JSValue v90;
  bmalloc::api *v91;
  void *v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  BOOL v98;
  int v99;
  uint64_t v100;
  int *v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int *v106;
  int v107;
  JSC::VM *v108;
  uint64_t v109;
  _BYTE v110[8];
  uint64_t v111;
  uint64_t v112;
  int v113;
  WTF::StringImpl *v114;
  int v115;
  unint64_t v116;
  int v117;
  JSC::VM *v118;
  char v119;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v90.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v90);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v114);
  v8 = v115;
  if (v115)
  {
    v60 = 0;
    goto LABEL_94;
  }
  v9 = 0xFFFE000000000002;
  v109 = v7;
  v108 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = 0;
    v12 = 0;
    v9 = 0;
    v13 = 0;
    i = 0;
    goto LABEL_56;
  }
  v10 = *(JSC::JSCell **)(a2 + 56);
  v2 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v118 = v2;
  if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
    {
      JSC::throwTypeError();
LABEL_120:
      v113 = 1;
      goto LABEL_108;
    }
    v3 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v16 = (WTF::StringImpl *)v116;
    v13 = JSC::JSObject::get(v3, a1, v116);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
      goto LABEL_120;
    if (v13 == 10)
    {
      v11 = 0;
      goto LABEL_20;
    }
    v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v13 >= 0xFFFE000000000000)
      goto LABEL_152;
    *(_QWORD *)&v19 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v19 <= 0.0)
      {
        v11 = v19 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v13 & 0xFFFE000000000002) != 0)
      {
        v11 = v13 == 7;
        goto LABEL_19;
      }
      v94 = *(unsigned __int8 *)(v13 + 5);
      if (v94 == 3)
      {
        v97 = *(_DWORD *)(v13 + 8);
LABEL_180:
        v93 = v97 == 0;
        goto LABEL_192;
      }
      if (v94 == 2)
      {
        v95 = *(_QWORD *)(v13 + 8);
        if ((v95 & 1) != 0)
          v96 = (int *)(v13 + 16);
        else
          v96 = (int *)(v95 + 4);
        v97 = *v96;
        goto LABEL_180;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v93 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_192;
      }
    }
    v11 = 1;
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v13 = 0;
LABEL_53:
  for (i = 0; ; i = v116)
  {
LABEL_56:
    v110[0] = v11;
    v110[1] = v12;
    v110[2] = v9;
    v113 = 0;
    if (!v115)
    {
      v36 = v114;
      v114 = 0;
      v111 = 0;
      v112 = 0;
      v37 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v37);
      *(_QWORD *)(v37 + 8) = 0;
      v41 = *(_DWORD *)(v37 + 20) & 0xFFC00000;
      if (v12)
        v42 = 4;
      else
        v42 = 0;
      if (v11)
        v43 = 1376770;
      else
        v43 = 1376768;
      *(_DWORD *)(v37 + 16) = 1;
      *(_DWORD *)(v37 + 20) = v43 | v42 | (v36 != 0) | v41;
      if (v36)
        *(_DWORD *)v36 += 2;
      *(_QWORD *)(v37 + 24) = v36;
      *(_QWORD *)(v37 + 32) = 0;
      *(_QWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = v40;
      *(_QWORD *)v37 = off_1E3361B00;
      *(_QWORD *)(v37 + 64) = 0;
      *(_QWORD *)(v37 + 72) = v13;
      *(_QWORD *)(v37 + 80) = i;
      v116 = v37;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
        {
          WTF::StringImpl::destroy(v36, v38);
          if (*(void (***)(WebCore::RTCPeerConnectionIceEvent *__hidden))v37 != off_1E3361B00)
          {
            __break(0xC471u);
            JUMPOUT(0x194E3B660);
          }
        }
        else
        {
          *(_DWORD *)v36 -= 2;
        }
      }
      v44 = *(JSC::VM **)(v109 + 40);
      v45 = *((_QWORD *)v44 + 412);
      if (v45)
      {
        v46 = *(_DWORD *)(v45 - 8);
        v47 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
             + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
                                                                                 + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) >> 22);
        v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
        v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
        v50 = v46 & ((v49 >> 31) ^ v49);
        v51 = *(char ***)(v45 + 16 * v50);
        if (v51 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
        {
LABEL_73:
          v53 = *(_QWORD *)(v45 + 16 * v50 + 8);
          if (v53)
          {
LABEL_75:
            v60 = (JSCell *)WebCore::JSRTCPeerConnectionIceEvent::create(v53, v44, (uint64_t *)&v116);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v44 + 415), v37, (uint64_t)v60);
            v61 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v61 & 0xFFFE000000000002) != 0
              || (v62 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v61)) == 0
              || (v64 = v62, v62 == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v65 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v62, v63),
                  *((_DWORD *)v65 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) != 0)
            {
LABEL_88:
              if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
                v60 = 0;
              v83 = (_DWORD *)v116;
              v116 = 0;
              if (v83)
              {
                if (v83[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v83 + 8))(v83);
                else
                  --v83[4];
              }
              v84 = 0;
              goto LABEL_93;
            }
            v69 = *((_QWORD *)FunctionRealm + 412);
            if (v69)
            {
              v70 = *(_DWORD *)(v69 - 8);
              v71 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
                   + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
                                                                                       + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) >> 22);
              v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
              v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
              v74 = v70 & ((v73 >> 31) ^ v73);
              v75 = *(char ***)(v69 + 16 * v74);
              if (v75 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
              {
LABEL_84:
                v66 = *(JSC::JSObject **)(v69 + 16 * v74 + 8);
                if (v66)
                {
LABEL_86:
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v64, v66, v67);
                  if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
                    JSC::JSObject::setStructure(v60, v65, SubclassStructure);
                  goto LABEL_88;
                }
              }
              else
              {
                v76 = 1;
                while (v75)
                {
                  v74 = ((_DWORD)v74 + v76) & v70;
                  v75 = *(char ***)(v69 + 16 * v74);
                  ++v76;
                  if (v75 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
                    goto LABEL_84;
                }
              }
            }
            v77 = (JSC::JSCell *)WebCore::JSEvent::prototype(v65, FunctionRealm, v66);
            Structure = WebCore::JSRTCPeerConnectionIceEventPrototype::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v77);
            *(_DWORD *)(Structure + 16) |= 0x80000u;
            v80 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceEventPrototype::create(v65, FunctionRealm, Structure, v79);
            v81 = WebCore::JSRTCPeerConnectionIceEvent::createStructure((uint64_t *)v65, (uint64_t)FunctionRealm, v80);
            v66 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v81, (uint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info);
            goto LABEL_86;
          }
        }
        else
        {
          v52 = 1;
          while (v51)
          {
            v50 = ((_DWORD)v50 + v52) & v46;
            v51 = *(char ***)(v45 + 16 * v50);
            ++v52;
            if (v51 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
              goto LABEL_73;
          }
        }
      }
      v54 = (WebCore::JSEvent *)*((_QWORD *)v44 + 7);
      v55 = (JSC::JSCell *)WebCore::JSEvent::prototype(v54, v44, v39);
      v56 = WebCore::JSRTCPeerConnectionIceEventPrototype::createStructure((uint64_t *)v54, (uint64_t)v44, v55);
      *(_DWORD *)(v56 + 16) |= 0x80000u;
      v58 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceEventPrototype::create(v54, v44, v56, v57);
      v59 = WebCore::JSRTCPeerConnectionIceEvent::createStructure((uint64_t *)v54, (uint64_t)v44, v58);
      v53 = WebCore::cacheDOMStructure((JSCell *)v44, v59, (uint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info);
      goto LABEL_75;
    }
    v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_152:
    v93 = (_DWORD)v13 == 0;
LABEL_192:
    v11 = !v93;
LABEL_19:
    if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      goto LABEL_120;
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v20 = (WTF::StringImpl *)v116;
    v22 = JSC::JSObject::get(v3, a1, v116);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
      goto LABEL_120;
    if (v22 == 10)
    {
      v12 = 0;
      goto LABEL_31;
    }
    v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v22 >= 0xFFFE000000000000)
    {
      v98 = (_DWORD)v22 == 0;
      goto LABEL_196;
    }
    *(_QWORD *)&v24 = v22 - 0x2000000000000;
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v22 & v9) != 0)
      {
        v12 = v22 == 7;
        goto LABEL_30;
      }
      v99 = *(unsigned __int8 *)(v22 + 5);
      if (v99 == 3)
      {
        v102 = *(_DWORD *)(v22 + 8);
      }
      else
      {
        if (v99 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_186:
            v12 = 1;
            goto LABEL_30;
          }
          v98 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_196;
        }
        v100 = *(_QWORD *)(v22 + 8);
        if ((v100 & 1) != 0)
          v101 = (int *)(v22 + 16);
        else
          v101 = (int *)(v100 + 4);
        v102 = *v101;
      }
      v98 = v102 == 0;
LABEL_196:
      v12 = !v98;
      goto LABEL_30;
    }
    if (v24 > 0.0)
      goto LABEL_186;
    v12 = v24 < 0.0;
LABEL_30:
    if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
      goto LABEL_107;
LABEL_31:
    WTF::AtomStringImpl::addLiteral();
    v25 = (WTF::StringImpl *)v116;
    v27 = JSC::JSObject::get(v3, a1, v116);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
      goto LABEL_107;
    if (v27 == 10)
    {
      v9 = 0;
      goto LABEL_42;
    }
    v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v27 >= 0xFFFE000000000000)
    {
      v103 = (_DWORD)v27 == 0;
      goto LABEL_200;
    }
    *(_QWORD *)&v29 = v27 - 0x2000000000000;
    if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v27 & v9) != 0)
      {
        v9 = v27 == 7;
        goto LABEL_41;
      }
      v104 = *(unsigned __int8 *)(v27 + 5);
      if (v104 == 3)
      {
        v107 = *(_DWORD *)(v27 + 8);
      }
      else
      {
        if (v104 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_190:
            v9 = 1;
            goto LABEL_41;
          }
          v103 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_200;
        }
        v105 = *(_QWORD *)(v27 + 8);
        if ((v105 & 1) != 0)
          v106 = (int *)(v27 + 16);
        else
          v106 = (int *)(v105 + 4);
        v107 = *v106;
      }
      v103 = v107 == 0;
LABEL_200:
      v9 = !v103;
      goto LABEL_41;
    }
    if (v29 > 0.0)
      goto LABEL_190;
    v9 = v29 < 0.0;
LABEL_41:
    if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
      goto LABEL_107;
LABEL_42:
    WTF::AtomStringImpl::addLiteral();
    v30 = (WTF::StringImpl *)v116;
    v32 = JSC::JSObject::get(v3, a1, v116);
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v31);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
      goto LABEL_107;
    if ((v32 | 8) == 0xA)
    {
      v13 = 0;
    }
    else
    {
      v116 = *((_QWORD *)a1 + 7);
      if ((v32 & 0xFFFE000000000002) != 0)
        goto LABEL_106;
      v86 = *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C);
      v87 = *(_DWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v86)
      {
        v88 = 16 * v86;
        if ((char **)v88 != &WebCore::JSRTCIceCandidate::s_info)
        {
          do
          {
            v88 = *(_QWORD *)(v88 + 16);
            v87 = v88 != 0;
          }
          while ((char **)v88 != &WebCore::JSRTCIceCandidate::s_info && v88 != 0);
        }
      }
      if (!v87 || (v13 = *(_QWORD *)(v32 + 24)) == 0)
      {
LABEL_106:
        JSC::throwTypeError();
LABEL_107:
        v113 = 1;
        goto LABEL_108;
      }
      ++*(_DWORD *)v13;
    }
    WTF::AtomStringImpl::addLiteral();
    v33 = (WTF::StringImpl *)v116;
    v3 = (JSC::Structure *)JSC::JSObject::get(v3, a1, v116);
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v34);
      else
        *(_DWORD *)v33 -= 2;
    }
    if (*((_DWORD *)v2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2))
    {
      v113 = 1;
      goto LABEL_147;
    }
    if (v3 == (JSC::Structure *)10)
      goto LABEL_53;
    WebCore::Converter<WebCore::IDLNullable<WebCore::IDLDOMString>>::convert(a1, (unint64_t)v3, (uint64_t)&v116);
    if (v117)
      break;
  }
  v113 = 1;
  if (v117 != -1)
    ((void (*)(char *, unint64_t *))off_1E32D2D10[v117])(&v119, &v116);
LABEL_147:
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate((WebCore::RTCIceCandidate *)v13, v35);
      bmalloc::api::isoDeallocate(v91, v92);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
LABEL_108:
  v60 = 0;
  v84 = 1;
LABEL_93:
  ((void (*)(unint64_t *, _BYTE *))off_1E32D4858[v84])(&v116, v110);
  v8 = v115;
LABEL_94:
  if (v8 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32D2930[v8])(v110, &v114);
  return v60;
}

uint64_t WebCore::JSRTCPeerConnectionIceEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCPeerConnectionIceEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCPeerConnectionIceEventPrototype::create(WebCore::JSRTCPeerConnectionIceEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info, &WebCore::JSRTCPeerConnectionIceEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceEvent>,(WebCore::DOMConstructorID)159>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1272);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSRTCPeerConnectionIceEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCPeerConnectionIceEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCPeerConnectionIceEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCPeerConnectionIceEventPrototype::create((WebCore::JSRTCPeerConnectionIceEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCPeerConnectionIceEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCPeerConnectionIceEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1272) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCPeerConnectionIceEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCPeerConnectionIceEventPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCPeerConnectionIceEvent>,(WebCore::DOMConstructorID)159>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCPeerConnectionIceEvent_candidate(uint64_t a1, uint64_t a2)
{
  WebCore::RTCIceCandidate *v3;

  v3 = *(WebCore::RTCIceCandidate **)(*(_QWORD *)(a2 + 24) + 72);
  if (v3)
    return WebCore::wrap<WebCore::RTCIceCandidate>(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v3);
  else
    return 2;
}

uint64_t WebCore::jsRTCPeerConnectionIceEvent_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v2 + 4);
  if (!v4)
    return *(_QWORD *)(v3 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v3 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v3 + 64760);
  if (!v5 || v2 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSRTCPeerConnectionIceEvent::subspaceForImpl(WebCore::JSRTCPeerConnectionIceEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1296);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1296))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1296);
    *(_QWORD *)(v8 + 1296) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1296);
  *(_QWORD *)(v3 + 1296) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

BOOL WebCore::JSPositionCallback::hasCallback(WebCore::JSPositionCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSPositionErrorCallback::hasCallback(WebCore::JSPositionErrorCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSPushManagerOwner::~JSPushManagerOwner(WebCore::JSPushManagerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPushMessageDataOwner::~JSPushMessageDataOwner(WebCore::JSPushMessageDataOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPushNotificationEventOwner::~JSPushNotificationEventOwner(WebCore::JSPushNotificationEventOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPushSubscriptionOwner::~JSPushSubscriptionOwner(WebCore::JSPushSubscriptionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSPushSubscriptionOptionsOwner::~JSPushSubscriptionOptionsOwner(WebCore::JSPushSubscriptionOptionsOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCCertificateOwner::~JSRTCCertificateOwner(WebCore::JSRTCCertificateOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCDTMFSenderOwner::~JSRTCDTMFSenderOwner(WebCore::JSRTCDTMFSenderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCDataChannelOwner::~JSRTCDataChannelOwner(WebCore::JSRTCDataChannelOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCDtlsTransportOwner::~JSRTCDtlsTransportOwner(WebCore::JSRTCDtlsTransportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCEncodedAudioFrameOwner::~JSRTCEncodedAudioFrameOwner(WebCore::JSRTCEncodedAudioFrameOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCEncodedVideoFrameOwner::~JSRTCEncodedVideoFrameOwner(WebCore::JSRTCEncodedVideoFrameOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCIceCandidateOwner::~JSRTCIceCandidateOwner(WebCore::JSRTCIceCandidateOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCIceTransportOwner::~JSRTCIceTransportOwner(WebCore::JSRTCIceTransportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSRTCLogsCallback::hasCallback(WebCore::JSRTCLogsCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSRTCPeerConnectionOwner::~JSRTCPeerConnectionOwner(WebCore::JSRTCPeerConnectionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21PromiseRejectionEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsPublicKeyCredentialConstructorFunction_isUserVerifyingPlatformAuthenticatorAvailable(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  WebCore::DOMGuardedObject *v13;
  WebCore::DOMGuardedObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v22;
  WebCore::DOMGuardedObject *v23;
  WebCore::DOMGuardedObject *v24;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3C908);
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *((_DWORD *)this + 291);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v12 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v11, a3);
  v13 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v14 = WebCore::DOMGuardedObject::DOMGuardedObject(v13, (unint64_t)this, v12);
  *(_QWORD *)v14 = &off_1E3226868;
  *((_DWORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 44) = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v15)
    goto LABEL_21;
  if (*(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E3C928);
  }
  v24 = v13;
  v16 = *(_QWORD *)(v15 + 336);
  if (!v16
    || (v17 = *(_QWORD *)(v16 + 8)) == 0
    || (v18 = *(_QWORD *)(v17 + 24)) == 0
    || (v19 = *(_QWORD *)(v18 + 8)) == 0
    || (WebCore::AuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(*(_QWORD *)(v19 + 1256), v15 - 192, (uint64_t *)&v24), (v13 = v24) != 0))
  {
LABEL_21:
    if (*((_DWORD *)v13 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v13 + 16))(v13);
    else
      --*((_DWORD *)v13 + 4);
  }
  v20 = *(_QWORD *)(v9 + 16);
  if (v20)
  {
    if (*(_QWORD *)(v9 + 24) != v20)
    {
      v22 = *(objc_class **)(v20 + 8);
      JSC::VM::clearException((JSC::VM *)v9);
      WebCore::DeferredPromise::create((unint64_t)this, v12, 0, &v24);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v24, v22, 0);
      v23 = v24;
      v24 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v23 + 16))(v23);
        else
          --*((_DWORD *)v23 + 4);
      }
    }
  }
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 10;
  return v12;
}

unint64_t WebCore::jsPublicKeyCredentialConstructorFunction_getClientCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  WebCore::DOMGuardedObject *v13;
  WebCore::DOMGuardedObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v22;
  WebCore::DOMGuardedObject *v23;
  WebCore::DOMGuardedObject *v24;

  v4 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSDOMGlobalObject::s_info && v6 != 0);
  }
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3CB18);
  }
  v9 = *((_QWORD *)this + 7);
  v10 = *((_DWORD *)this + 291);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v12 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v11, a3);
  v13 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v14 = WebCore::DOMGuardedObject::DOMGuardedObject(v13, (unint64_t)this, v12);
  *(_QWORD *)v14 = &off_1E3226868;
  *((_DWORD *)v14 + 10) = 0;
  *((_BYTE *)v14 + 44) = 0;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v15)
    goto LABEL_21;
  if (*(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E3CB38);
  }
  v24 = v13;
  v16 = *(_QWORD *)(v15 + 336);
  if (!v16
    || (v17 = *(_QWORD *)(v16 + 8)) == 0
    || (v18 = *(_QWORD *)(v17 + 24)) == 0
    || (v19 = *(_QWORD *)(v18 + 8)) == 0
    || (WebCore::AuthenticatorCoordinator::getClientCapabilities(*(_QWORD *)(v19 + 1256), v15 - 192, (uint64_t *)&v24),
        (v13 = v24) != 0))
  {
LABEL_21:
    if (*((_DWORD *)v13 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v13 + 16))(v13);
    else
      --*((_DWORD *)v13 + 4);
  }
  v20 = *(_QWORD *)(v9 + 16);
  if (v20)
  {
    if (*(_QWORD *)(v9 + 24) != v20)
    {
      v22 = *(objc_class **)(v20 + 8);
      JSC::VM::clearException((JSC::VM *)v9);
      WebCore::DeferredPromise::create((unint64_t)this, v12, 0, &v24);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v24, v22, 0);
      v23 = v24;
      v24 = 0;
      if (v23)
      {
        if (*((_DWORD *)v23 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v23 + 16))(v23);
        else
          --*((_DWORD *)v23 + 4);
      }
    }
  }
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 10;
  return v12;
}

_BYTE *WebCore::jsPublicKeyCredentialPrototypeFunction_getClientExtensionResults(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  __int16 v18;
  _DWORD *v19;
  __int16 v20;
  char v21;
  __int16 v22;
  _QWORD v23[2];
  char v24;
  char v25;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "PublicKeyCredential", "getClientExtensionResults");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSPublicKeyCredential::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSPublicKeyCredential::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "PublicKeyCredential", "getClientExtensionResults");
  v9 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28);
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 32);
  v17 = *(_DWORD *)(v10 + 24);
  LOBYTE(v18) = 0;
  v21 = 0;
  if (*(_BYTE *)(v10 + 56))
  {
    v18 = *(_WORD *)(v10 + 32);
    v11 = *(_DWORD **)(v10 + 40);
    if (v11)
      *v11 += 2;
    v19 = v11;
    v20 = *(_WORD *)(v10 + 48);
    v21 = 1;
  }
  LOBYTE(v22) = 0;
  v25 = 0;
  if (*(_BYTE *)(v10 + 96))
  {
    v22 = *(_WORD *)(v10 + 64);
    LOBYTE(v23[0]) = 0;
    v24 = 0;
    if (*(_BYTE *)(v10 + 88))
    {
      v12 = *(_DWORD **)(v10 + 72);
      if (v12)
        *v12 += 2;
      v23[0] = v12;
      v13 = *(_DWORD **)(v10 + 80);
      if (v13)
        *v13 += 2;
      v23[1] = v13;
      v24 = 1;
    }
    v25 = 1;
  }
  v14 = WebCore::convertDictionaryToJS(this, v9, (uint64_t)&v17);
  if (v25 && v24)
    WebCore::AuthenticationExtensionsClientOutputs::PRFValues::~PRFValues((WebCore::AuthenticationExtensionsClientOutputs::PRFValues *)v23);
  std::__optional_destruct_base<WebCore::AuthenticationExtensionsClientOutputs::LargeBlobOutputs,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18);
  return (_BYTE *)v14;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore36AuthenticationExtensionsClientInputsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::AuthenticationExtensionsClientInputs *this)
{
  WebCore::AuthenticationExtensionsClientInputs::~AuthenticationExtensionsClientInputs(this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptions10UserEntityENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  char v7;

  v3 = *(WTF::StringImpl **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E32D2C80[v4])(&v7, a2 + 16);
  *(_DWORD *)(a2 + 24) = -1;
  v5 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore34PublicKeyCredentialCreationOptions8RpEntityENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(WTF::StringImpl **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  v4 = *(WTF::StringImpl **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore34PublicKeyCredentialCreationOptions10ParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore29PublicKeyCredentialDescriptorELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF *result;
  uint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  char v9;

  v3 = a2[3];
  result = *(WTF **)a2;
  if ((_DWORD)v3)
  {
    v5 = 40 * v3;
    v6 = (unsigned int *)((char *)result + 16);
    do
    {
      v7 = (WTF *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        *((_QWORD *)v6 + 1) = 0;
        v6[4] = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *v6;
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, unsigned int *))off_1E32D2C80[v8])(&v9, v6 - 2);
      *v6 = -1;
      v6 += 10;
      v5 -= 40;
    }
    while (v5);
    result = *(WTF **)a2;
  }
  if (result)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSG_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSG_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSG_SK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13PushEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)result;
  }
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS10_EEEDcSS_DpT0_(WTF::DeferrableRefCountedBase *result, WTF::DeferrableRefCountedBase **a2, WTF::DeferrableRefCountedBase **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::DeferrableRefCountedBase *v6;
  WTF::DeferrableRefCountedBase *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 1)
  {
    result = (WTF::DeferrableRefCountedBase *)((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v5])(&v8, v4);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEENS8_6StringEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJSG_SK_SL_EEEOS10_EEEDcSS_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v5])(&v8, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_11ArrayBufferENSD_ISI_EENSF_ISI_EEEENS9_6StringEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSN_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

unint64_t WebCore::jsPushManagerPrototypeFunction_subscribe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  WebCore::DOMGuardedObject *v32;
  uint64_t v33;
  objc_class *v35;
  WebCore::DOMGuardedObject *v36;
  char v37[8];
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  WebCore::DOMGuardedObject *v42;
  char v43;
  char v44[8];
  int v45;
  char v46;
  WebCore::DOMGuardedObject *v47;
  char v48[8];
  int v49;
  char v50;
  char v51;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3D654);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_58;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSPushManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSPushManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_58:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"PushManager", "subscribe", v16);
LABEL_51:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_53;
  }
  v23 = *(_QWORD **)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
    goto LABEL_51;
  v25 = (char *)v24;
  if (*((_DWORD *)a2 + 8) == 1)
    v26 = 10;
  else
    v26 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::PushSubscriptionOptionsInit>((uint64_t)v37, (uint64_t *)this, (JSC::JSCell *)v26);
  v27 = v41;
  if (!v41)
  {
    v43 = v37[0];
    v44[0] = 0;
    v46 = 0;
    if (v40)
    {
      v45 = -1;
      v28 = v39;
      if (v39 == -1)
      {
        v46 = 1;
        LOBYTE(v47) = v37[0];
        v48[0] = 0;
        v49 = -1;
      }
      else
      {
        v29 = v13;
        v30 = v10;
        v31 = off_1E32D2D38[v39];
        ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))v31)(&v47, v44, &v38);
        v45 = v28;
        v46 = 1;
        LOBYTE(v47) = v43;
        v48[0] = 0;
        v50 = 0;
        v49 = -1;
        ((void (*)(WebCore::DOMGuardedObject **, char *, char *))v31)(&v42, v48, v44);
        v10 = v30;
        v13 = v29;
        v49 = v28;
      }
      v50 = 1;
    }
    else
    {
      LOBYTE(v47) = v37[0];
      v48[0] = 0;
      v50 = 0;
    }
    v51 = 1;
    v42 = v14;
    WebCore::PushManager::subscribe(v23, v25, (char *)&v47, &v42);
    v32 = v42;
    v42 = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v32 + 16))(v32);
      else
        --*((_DWORD *)v32 + 4);
    }
    if (v51 && v50)
    {
      if (v49 != -1)
        ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E32D2D20[v49])(&v42, v48);
      v49 = -1;
    }
    if (v46 && v45 != -1)
      ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E32D2D20[v45])(&v42, v44);
    v14 = 0;
    v27 = v41;
  }
  if (v27 != -1)
    ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E32D2EA0[v27])(&v47, v37);
  if (v14)
    goto LABEL_51;
LABEL_53:
  v33 = *(_QWORD *)(v10 + 16);
  if (v33)
  {
    if (*(_QWORD *)(v10 + 24) != v33)
    {
      v35 = *(objc_class **)(v33 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v47);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v47, v35, 0);
      v36 = v47;
      v47 = 0;
      if (v36)
      {
        if (*((_DWORD *)v36 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v36 + 16))(v36);
        else
          --*((_DWORD *)v36 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsPushManagerPrototypeFunction_getSubscription(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;
  void (*v28)(void);
  uint64_t v29;
  objc_class *v31;
  WebCore::DOMGuardedObject *v32;
  WebCore::DOMGuardedObject *v33;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3D8DCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSPushManager::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSPushManager::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"PushManager", "getSubscription", v16);
    goto LABEL_33;
  }
  v23 = *(_QWORD **)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
  {
LABEL_33:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_29;
    }
    v28 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_28;
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24);
  (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 16))(*v23);
  v26 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v26 = &off_1E3365C70;
  *((_QWORD *)v26 + 1) = v23;
  *((_QWORD *)v26 + 2) = v23;
  *((_QWORD *)v26 + 3) = v14;
  v33 = v26;
  WebCore::EventLoopTaskGroup::queueTask(v25, 11, (uint64_t *)&v33);
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    v28 = *(void (**)(void))(*(_QWORD *)v27 + 8);
LABEL_28:
    v28();
  }
LABEL_29:
  v29 = *(_QWORD *)(v10 + 16);
  if (v29)
  {
    if (*(_QWORD *)(v10 + 24) != v29)
    {
      v31 = *(objc_class **)(v29 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v33);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v33, v31, 0);
      v32 = v33;
      v33 = 0;
      if (v32)
      {
        if (*((_DWORD *)v32 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v32 + 16))(v32);
        else
          --*((_DWORD *)v32 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsPushManagerPrototypeFunction_permissionState(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v38;
  WebCore::DOMGuardedObject *v39;
  char v40[8];
  uint64_t v41;
  int v42;
  char v43;
  int v44;
  char v45;
  char v46[8];
  int v47;
  char v48;
  WebCore::DOMGuardedObject *v49;
  char v50[8];
  int v51;
  char v52;
  char v53;
  _QWORD *v54;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3DD74);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_58;
  v18 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
  v19 = *(unsigned int *)(v18 + 76);
  v20 = *(_DWORD *)(v18 + 76) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSPushManager::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSPushManager::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_58:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"PushManager", "permissionState", v16);
LABEL_52:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_54;
  }
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
    goto LABEL_52;
  v25 = (char *)v24;
  if (*((_DWORD *)a2 + 8) == 1)
    v26 = 10;
  else
    v26 = *((_QWORD *)a2 + 6);
  WebCore::convertDictionary<WebCore::PushSubscriptionOptionsInit>((uint64_t)v40, (uint64_t *)this, (JSC::JSCell *)v26);
  v27 = v44;
  if (!v44)
  {
    v45 = v40[0];
    v46[0] = 0;
    v48 = 0;
    if (v43)
    {
      v47 = -1;
      v28 = v42;
      if (v42 == -1)
      {
        v48 = 1;
        LOBYTE(v49) = v40[0];
        v50[0] = 0;
        v51 = -1;
      }
      else
      {
        v29 = v10;
        v30 = v13;
        v31 = off_1E32D2D38[v42];
        ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))v31)(&v49, v46, &v41);
        v47 = v28;
        v48 = 1;
        LOBYTE(v49) = v45;
        v50[0] = 0;
        v52 = 0;
        v51 = -1;
        ((void (*)(_QWORD **, char *, char *))v31)(&v54, v50, v46);
        v13 = v30;
        v10 = v29;
        v51 = v28;
      }
      v52 = 1;
    }
    else
    {
      LOBYTE(v49) = v40[0];
      v50[0] = 0;
      v52 = 0;
    }
    v53 = 1;
    v32 = (*(uint64_t (**)(char *))(*(_QWORD *)v25 + 104))(v25);
    v33 = v25[274];
    if (v33 <= 2)
      *(_DWORD *)&v25[qword_1968C0C60[v33]] += dword_1968C0C78[v33];
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v34 = &off_1E3365C98;
    v34[1] = v25;
    v34[2] = v14;
    v54 = v34;
    WebCore::EventLoopTaskGroup::queueTask(v32, 11, (uint64_t *)&v54);
    v35 = (uint64_t)v54;
    v54 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (v53 && v52)
    {
      if (v51 != -1)
        ((void (*)(_QWORD **, char *))off_1E32D2D20[v51])(&v54, v50);
      v51 = -1;
    }
    if (v48 && v47 != -1)
      ((void (*)(_QWORD **, char *))off_1E32D2D20[v47])(&v54, v46);
    v14 = 0;
    v27 = v44;
  }
  if (v27 != -1)
    ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E32D2EA0[v27])(&v49, v40);
  if (v14)
    goto LABEL_52;
LABEL_54:
  v36 = *(_QWORD *)(v10 + 16);
  if (v36)
  {
    if (*(_QWORD *)(v10 + 24) != v36)
    {
      v38 = *(objc_class **)(v36 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v49);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v49, v38, 0);
      v39 = v49;
      v49 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v39 + 16))(v39);
        else
          --*((_DWORD *)v39 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27PushSubscriptionOptionsInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 16) = -1;
  }
  return result;
}

_BYTE *WebCore::jsPushMessageDataPrototypeFunction_arrayBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSC::ArrayBuffer *v12;
  uint64_t v13;
  WebCore::JSDOMGlobalObject *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WebCore *v20;
  JSC::JSGlobalObject *v21;
  JSC::CallFrame *v22;
  JSC::VM *v23;
  WebCore::JSDOMGlobalObject *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "PushMessageData", "arrayBuffer");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSPushMessageData::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSPushMessageData::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "PushMessageData", "arrayBuffer");
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::PushMessageData::arrayBuffer((uint64_t)&v24);
  v13 = v26;
  if (!v26)
  {
    v14 = v24;
    v24 = 0;
    v15 = WebCore::toJS(this, v11, v14, v12);
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v14);
LABEL_14:
    ((void (*)(_BYTE *, WebCore::JSDOMGlobalObject **))off_1E32D2FA0[v13])(v27, &v24);
    return (_BYTE *)v15;
  }
  if (v26 == 1)
  {
    v17 = (WTF::StringImpl *)v24;
    v27[0] = (_BYTE)v24;
    v18 = v25;
    v25 = 0;
    v28 = v18;
    if (!*((_QWORD *)v5 + 2))
    {
      v19.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v24, (JSC::JSGlobalObject *)&v28);
      JSC::VM::throwException(v5, this, v19);
      v18 = v28;
    }
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v15 = 0;
    goto LABEL_14;
  }
  v20 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsPushMessageDataPrototypeFunction_blob(v20, v21, v22);
}

unint64_t WebCore::jsPushMessageDataPrototypeFunction_blob(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  const void **v10;
  WebCore::ScriptExecutionContext *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v16;
  _DWORD *v17;

  v4 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "PushMessageData", "blob");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSPushMessageData::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSPushMessageData::s_info && v7 != 0);
  }
  if (!v6)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "PushMessageData", "blob");
  v10 = *(const void ***)(v4 + 24);
  v11 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v11)
    return 10;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::PushMessageData::blob(v10, v11, (uint64_t *)&v17);
  v13 = v17;
  v14 = WebCore::wrap<WebCore::Blob>((uint64_t)this, v12, (uint64_t)v17);
  if (v13[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  else
    --v13[4];
  return v14;
}

_BYTE *WebCore::jsPushMessageDataPrototypeFunction_bytes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  const void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  JSC::ArrayBufferView *v21;
  uint64_t v22;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSC::VM *v27;
  JSC::ArrayBufferView *v28[2];
  int v29;
  char v30[8];
  WTF::StringImpl *v31;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v5;
  if ((v4 & 0xFFFE000000000002) == 0)
  {
    v6 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
    v7 = *(unsigned int *)(v6 + 0x4C);
    v8 = *(_DWORD *)(v6 + 0x4C) != 0;
    v9 = (char **)(16 * v7);
    if ((_DWORD)v7)
      v10 = v9 == &WebCore::JSPushMessageData::s_info;
    else
      v10 = 1;
    if (!v10)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSPushMessageData::s_info && v9 != 0);
    }
    if (v8)
    {
      v12 = *(_QWORD *)(v4 + 24);
      v13 = *(JSC::JSGlobalObject **)(v6 + 40);
      v14 = *(const void **)(v12 + 8);
      v15 = *(unsigned int *)(v12 + 20);
      JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v15, (uint64_t *)v28);
      if (!v28[0])
        goto LABEL_28;
      v16 = *((_QWORD *)v28[0] + 4);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (!v18 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
          {
            v19 = *((_QWORD *)v28[0] + 3);
            goto LABEL_25;
          }
          if ((v17 & 0x3FFFFFFFFLL) + v18)
          {
            v19 = *((_QWORD *)v28[0] + 3);
            if (v19 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v19 = (v19 & 0x3FFFFFFFFLL) + v18;
LABEL_25:
            memcpy((void *)v19, v14, v15);
            v21 = v28[0];
            if (v28[0])
            {
              v29 = 0;
              v28[0] = 0;
              v20 = JSC::ArrayBufferView::wrap(v21, this, v13);
              if (*(_DWORD *)v21 == 1)
              {
                JSC::ArrayBufferView::operator delete();
                v22 = 0;
              }
              else
              {
                v22 = 0;
                --*(_DWORD *)v21;
              }
LABEL_33:
              ((void (*)(char *, JSC::ArrayBufferView **))off_1E32D2FB0[v22])(v30, v28);
              return (_BYTE *)v20;
            }
LABEL_28:
            LOBYTE(v28[0]) = 36;
            v29 = 1;
            v30[0] = 36;
            v28[1] = 0;
            v31 = 0;
            if (!*((_QWORD *)v5 + 2))
            {
              v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x24, (JSC::JSGlobalObject *)&v31);
              JSC::VM::throwException(v5, this, v23);
              v25 = v31;
              v31 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2)
                  WTF::StringImpl::destroy(v25, v24);
                else
                  *(_DWORD *)v25 -= 2;
              }
            }
            v20 = 0;
            v22 = 1;
            goto LABEL_33;
          }
        }
      }
      v19 = 0;
      goto LABEL_25;
    }
  }
  return WebCore::throwThisTypeError((int)this, (int)&v27, "PushMessageData", "bytes");
}

_BYTE *WebCore::jsPushMessageDataPrototypeFunction_json(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  int v11;
  uint64_t v12;
  _BYTE *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WebCore *v17;
  JSC::JSGlobalObject *v18;
  JSC::CallFrame *v19;
  JSC::VM *v20;
  int v21[2];
  WTF::StringImpl *v22;
  int v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v20 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "PushMessageData", "json");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSPushMessageData::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSPushMessageData::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "PushMessageData", "json");
  WebCore::PushMessageData::json(*(const char ***)(v4 + 24), (uint64_t)v21);
  v11 = v23;
  if (!v23)
  {
    v12 = *(_QWORD *)v21;
LABEL_14:
    ((void (*)(_BYTE *, int *))off_1E32D2FC0[v11])(v24, v21);
    return (_BYTE *)v12;
  }
  if (v23 == 1)
  {
    v14 = (WTF::StringImpl *)LOBYTE(v21[0]);
    v24[0] = v21[0];
    v15 = v22;
    v22 = 0;
    v25 = v15;
    if (!*((_QWORD *)v5 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v21[0]), (JSC::JSGlobalObject *)&v25);
      JSC::VM::throwException(v5, this, v16);
      v15 = v25;
    }
    v25 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v12 = 0;
    result = 0;
    v11 = v23;
    if (v23 != -1)
      goto LABEL_14;
  }
  else
  {
    v17 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_BYTE *)WebCore::jsPushMessageDataPrototypeFunction_text(v17, v18, v19);
  }
  return result;
}

_BYTE *WebCore::jsPushMessageDataPrototypeFunction_text(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v4 = *((_QWORD *)a2 + 5);
  v18 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "PushMessageData", "text");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSPushMessageData::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSPushMessageData::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "PushMessageData", "text");
  WebCore::TextResourceDecoder::textFromUTF8(*(const char **)(*(_QWORD *)(v4 + 24) + 8), *(unsigned int *)(*(_QWORD *)(v4 + 24) + 20), &v19);
  v10 = *((_QWORD *)this + 7);
  v11 = v19;
  if (!v19 || (v12 = *((_DWORD *)v19 + 1)) == 0)
  {
    v13 = *(_QWORD *)(v10 + 41968);
LABEL_18:
    v19 = 0;
    if (!v11)
      return (_BYTE *)v13;
    goto LABEL_25;
  }
  if (v12 != 1)
    goto LABEL_15;
  v14 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  if ((*((_BYTE *)v19 + 16) & 4) != 0)
  {
    v15 = *v14;
LABEL_23:
    v13 = *(_QWORD *)(v10 + 8 * v15 + 42216);
    goto LABEL_24;
  }
  v17 = *(unsigned __int16 *)v14;
  if (v17 <= 0xFF)
  {
    v15 = v17;
    goto LABEL_23;
  }
LABEL_15:
  v13 = *(_QWORD *)(v10 + 64760);
  if (!v13 || v19 != *(WTF::StringImpl **)(v13 + 8))
  {
    v13 = JSC::jsStringWithCacheSlowCase();
    v11 = v19;
    goto LABEL_18;
  }
LABEL_24:
  v19 = 0;
LABEL_25:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v11);
  else
    *(_DWORD *)v11 -= 2;
  return (_BYTE *)v13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC21GenericTypedArrayViewINSA_12Uint8AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Notification *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25PushNotificationEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::Notification *result;
  bmalloc::api *v3;
  void *v4;

  result = (WebCore::Notification *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::Notification::~Notification(result, a2);
      return (WebCore::Notification *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

_BYTE *WebCore::jsPushSubscriptionPrototypeFunction_getKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  int v20;
  int v22;
  int v24;
  int v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::ArrayBuffer *v29;
  WTF::DeferrableRefCountedBase *v30;
  uint64_t v31;
  uint64_t v32;
  JSValue v33;
  WTF::StringImpl *v34;
  JSValue v38;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;

  v9 = *((_QWORD *)this + 7);
  v40 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "PushSubscription", "getKey");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSPushSubscription::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSPushSubscription::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "PushSubscription", "getKey");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, this, v38);
  }
  v16 = *((_QWORD *)a2 + 6);
  v43 = v9;
  v41[0] = v16;
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v17 = *(_QWORD *)(v16 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v16, this);
      if (!v17)
      {
LABEL_18:
        v44 = v17;
        if (v17)
          goto LABEL_19;
        goto LABEL_43;
      }
    }
    else if (!v17)
    {
      goto LABEL_18;
    }
    *(_DWORD *)v17 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v41, this);
  v17 = v44;
  if (v44)
  {
LABEL_19:
    v18 = *(_DWORD *)(v17 + 16);
    v19 = *(const char **)(v17 + 8);
    v20 = *(_DWORD *)(v17 + 4);
    if (v19 != "auth" && v20 == 4)
    {
      if ((v18 & 4) != 0)
      {
        if (*v19 == 97 && *(_WORD *)(v19 + 1) == 29813 && *((_WORD *)v19 + 1) == 26740)
          goto LABEL_50;
      }
      else if (*(_WORD *)v19 == 97)
      {
        v24 = *(_DWORD *)(v19 + 2);
        v25 = *((_DWORD *)v19 + 1);
        if (v24 == 7602293 && v25 == 6815860)
          goto LABEL_50;
      }
    }
    else
    {
      if (v19 == "auth" && v20 == 4)
        goto LABEL_50;
      if (v19 == "p256dh" || v20 != 6)
      {
        if (v20 == 6 && v19 == "p256dh")
          goto LABEL_50;
      }
      else if ((v18 & 4) != 0)
      {
        if (*v19 == 112 && *(_DWORD *)(v19 + 1) == 1681274162 && *(_DWORD *)(v19 + 2) == 1751397941)
        {
LABEL_50:
          v22 = 1;
LABEL_51:
          v44 = 0;
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v17, a2);
          else
            *(_DWORD *)v17 -= 2;
          goto LABEL_53;
        }
      }
      else if (*(_WORD *)v19 == 112
             && *(_QWORD *)(v19 + 4) == 0x68006400360035
             && *(_QWORD *)(v19 + 2) == 0x64003600350032)
      {
        goto LABEL_50;
      }
    }
    v22 = 0;
    goto LABEL_51;
  }
LABEL_43:
  v22 = 0;
LABEL_53:
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 0;
  if (!v22)
  {
    WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v43, 0, "name", 5, "PushSubscription", 17, a8, "getKey", 7, "\"p256dh\", \"auth\"", 17);
    return 0;
  }
  v27 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  JSC::ArrayBuffer::tryCreate();
  v30 = (WTF::DeferrableRefCountedBase *)v44;
  if (v44)
  {
    v42 = 0;
    v41[0] = 0;
    v31 = WebCore::toJS(this, v27, (WebCore::JSDOMGlobalObject *)v44, v29);
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v30);
    v32 = 0;
  }
  else
  {
    LOBYTE(v41[0]) = 36;
    v41[1] = 0;
    v42 = 1;
    v44 = 36;
    v45 = 0;
    if (*(_QWORD *)(v9 + 16))
    {
      v34 = 0;
    }
    else
    {
      v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)0x24, (JSC::JSGlobalObject *)&v45);
      JSC::VM::throwException((JSC::VM *)v9, this, v33);
      v34 = v45;
    }
    v45 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v28);
      else
        *(_DWORD *)v34 -= 2;
    }
    v31 = 0;
    v32 = 1;
  }
  ((void (*)(uint64_t *, _QWORD *))off_1E32D3170[v32])(&v44, v41);
  return (_BYTE *)v31;
}

unint64_t WebCore::jsPushSubscriptionPrototypeFunction_unsubscribe(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::DOMGuardedObject *v27;
  WebCore::DOMGuardedObject *v28;
  void (*v29)(void);
  uint64_t v30;
  objc_class *v32;
  WebCore::DOMGuardedObject *v33;
  WebCore::DOMGuardedObject *v34;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E3ED28);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSPushSubscription::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSPushSubscription::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"PushSubscription", "unsubscribe", v16);
    goto LABEL_33;
  }
  v23 = *(_QWORD *)(v17 + 24);
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v24)
  {
LABEL_33:
    if (*((_DWORD *)v14 + 4) != 1)
    {
      --*((_DWORD *)v14 + 4);
      goto LABEL_29;
    }
    v29 = *(void (**)(void))(*(_QWORD *)v14 + 16);
    goto LABEL_28;
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24);
  ++*(_DWORD *)v23;
  v26 = *(_QWORD *)(v23 + 8);
  v27 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v27 = &off_1E3366100;
  *((_QWORD *)v27 + 1) = v23;
  *((_QWORD *)v27 + 2) = v23;
  *((_QWORD *)v27 + 3) = v26;
  *((_QWORD *)v27 + 4) = v14;
  v34 = v27;
  WebCore::EventLoopTaskGroup::queueTask(v25, 11, (uint64_t *)&v34);
  v28 = v34;
  v34 = 0;
  if (v28)
  {
    v29 = *(void (**)(void))(*(_QWORD *)v28 + 8);
LABEL_28:
    v29();
  }
LABEL_29:
  v30 = *(_QWORD *)(v10 + 16);
  if (v30)
  {
    if (*(_QWORD *)(v10 + 24) != v30)
    {
      v32 = *(objc_class **)(v30 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v34);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v34, v32, 0);
      v33 = v34;
      v34 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v33 + 16))(v33);
        else
          --*((_DWORD *)v33 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unsigned __int8 *WebCore::jsPushSubscriptionPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  _QWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  _QWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  char *v47;
  _DWORD *v48;
  _DWORD *v49;
  char v50;
  JSC::VM *v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl **v69;
  unsigned __int8 *v70;
  JSC::VM *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  WTF::StringImpl *v77;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WTF *v91;
  JSC::VM *v92;
  unsigned __int8 *v93;
  uint64_t v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  char v98;
  WTF *v99;
  int v100;
  unsigned int v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  int v104;
  int v105;
  uint64_t v106;

  v3 = *((_QWORD *)a2 + 5);
  v95 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v95, "PushSubscription", "toJSON");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSPushSubscription::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSPushSubscription::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v95, "PushSubscription", "toJSON");
  WebCore::PushSubscription::toJSON(*(WebCore::PushSubscription **)(v3 + 24), (uint64_t)&v96);
  v9 = *((_QWORD *)this + 7);
  v10 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v11 = 8 * *(unsigned __int8 *)(v10 + 14);
  v12 = JSC::allocateCell<JSC::JSFinalObject>(v9, v11 + 16);
  v13 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)v12 = v10 >> 4;
  *(_DWORD *)(v12 + 4) = v13;
  *(_QWORD *)(v12 + 8) = 0;
  bzero((void *)(v12 + 16), v11);
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  if (v96)
  {
    v14 = *((_QWORD *)this + 7);
    v15 = *((_DWORD *)v96 + 1);
    if (v15)
    {
      if (v15 != 1)
      {
LABEL_17:
        v16 = *(_QWORD *)(v14 + 64760);
        if (!v16 || v96 != *(WTF::StringImpl **)(v16 + 8))
          v16 = JSC::jsStringWithCacheSlowCase();
        goto LABEL_20;
      }
      v87 = (unsigned __int8 *)*((_QWORD *)v96 + 1);
      if ((*((_BYTE *)v96 + 16) & 4) != 0)
      {
        v88 = *v87;
      }
      else
      {
        v89 = *(unsigned __int16 *)v87;
        if (v89 > 0xFF)
          goto LABEL_17;
        v88 = v89;
      }
      v16 = *(_QWORD *)(v14 + 8 * v88 + 42216);
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 41968);
    }
LABEL_20:
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_166;
    WTF::AtomStringImpl::addLiteral();
    v17 = v102;
    v102 = 0;
    v103 = v12;
    v104 = -1;
    v105 = 0x1000000;
    v106 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v17, v16, 0, (uint64_t)&v102);
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v18);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  if (v98)
  {
    if ((v97 & 0x80000000) != 0)
      v19 = COERCE__INT64((double)v97) + 0x2000000000000;
    else
      v19 = v97 | 0xFFFE000000000000;
    if (HIDWORD(v97))
      v20 = COERCE__INT64((double)v97) + 0x2000000000000;
    else
      v20 = v19;
    if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
      goto LABEL_166;
    WTF::AtomStringImpl::addLiteral();
    v21 = v102;
    v102 = 0;
    v103 = v12;
    v104 = -1;
    v105 = 0x1000000;
    v106 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v12, (JSC::VM *)v9, (unint64_t)v21, v20, 0, (uint64_t)&v102);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v92 = (JSC::VM *)v9;
  v93 = (unsigned __int8 *)v12;
  if (v101)
  {
    if (v101 >> 28)
      goto LABEL_167;
    v23 = (WTF *)(16 * v101);
    v24 = WTF::fastMalloc(v23);
    v26 = (WTF *)v24;
    if (v101)
    {
      v27 = v99;
      v28 = (WTF *)((char *)v99 + 16 * v101);
      v29 = (_QWORD *)v24;
      do
      {
        v30 = *(_DWORD **)v27;
        if (*(_QWORD *)v27)
          *v30 += 2;
        *v29 = v30;
        v31 = (_DWORD *)*((_QWORD *)v27 + 1);
        if (v31)
          *v31 += 2;
        v29[1] = v31;
        v27 = (WTF *)((char *)v27 + 16);
        v29 += 2;
      }
      while (v27 != v28);
    }
    v32 = 0;
    do
    {
      v33 = (WTF::StringImpl **)((char *)v32 + (_QWORD)v26);
      v34 = *(WTF::StringImpl **)((char *)v32 + (_QWORD)v26 + 8);
      *(_QWORD *)((char *)v32 + (_QWORD)v26 + 8) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v25);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = *v33;
      *v33 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v25);
        else
          *(_DWORD *)v35 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 16);
    }
    while (v23 != v32);
    WTF::fastFree(v26, v25);
    v36 = v101;
    if (v101)
    {
      if (!(v101 >> 28))
      {
        v37 = WTF::fastMalloc((WTF *)(16 * v101));
        v38 = (WTF *)v37;
        if (v101)
        {
          v39 = v99;
          v40 = (WTF *)((char *)v99 + 16 * v101);
          v41 = (_QWORD *)v37;
          do
          {
            v42 = *(_DWORD **)v39;
            if (*(_QWORD *)v39)
              *v42 += 2;
            *v41 = v42;
            v43 = (_DWORD *)*((_QWORD *)v39 + 1);
            if (v43)
              *v43 += 2;
            v41[1] = v43;
            v39 = (WTF *)((char *)v39 + 16);
            v41 += 2;
          }
          while (v39 != v40);
        }
        v44 = WTF::fastMalloc((WTF *)(16 * v36));
        v45 = (WTF *)v44;
        v46 = 0;
        do
        {
          v47 = (char *)v38 + v46;
          v48 = *(_DWORD **)((char *)v38 + v46);
          if (v48)
            *v48 += 2;
          *(_QWORD *)(v44 + v46) = v48;
          v49 = (_DWORD *)*((_QWORD *)v47 + 1);
          if (v49)
            *v49 += 2;
          *(_QWORD *)(v44 + v46 + 8) = v49;
          v46 += 16;
        }
        while (v47 + 16 != (char *)v38 + 16 * v36);
        v50 = 0;
        v90 = v36;
        goto LABEL_73;
      }
LABEL_167:
      __break(0xC471u);
      JUMPOUT(0x194E3F6D0);
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  v45 = 0;
  v38 = 0;
  v90 = 0;
  v50 = 1;
LABEL_73:
  v51 = (JSC::VM *)*((_QWORD *)this + 7);
  v52 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v53 = 8 * *(unsigned __int8 *)(v52 + 14);
  v54 = JSC::allocateCell<JSC::JSFinalObject>((uint64_t)v51, v53 + 16);
  v55 = *(_DWORD *)(v52 + 8);
  *(_DWORD *)v54 = v52 >> 4;
  *(_DWORD *)(v54 + 4) = v55;
  *(_QWORD *)(v54 + 8) = 0;
  bzero((void *)(v54 + 16), v53);
  if (*((_BYTE *)v51 + 755))
    __dmb(0xAu);
  v91 = v38;
  if (!(_DWORD)v36)
  {
    v71 = v92;
    v70 = (unsigned __int8 *)v12;
    goto LABEL_112;
  }
  v57 = 16 * v36;
  v58 = (uint64_t *)((char *)v45 + 8);
  v59 = v57;
  do
  {
    v60 = *((_QWORD *)this + 7);
    v61 = *v58;
    if (!*v58 || (v62 = *(_DWORD *)(v61 + 4)) == 0)
    {
      v63 = *(_QWORD *)(v60 + 41968);
      goto LABEL_83;
    }
    if (v62 != 1)
      goto LABEL_80;
    v66 = *(unsigned __int8 **)(v61 + 8);
    if ((*(_BYTE *)(v61 + 16) & 4) != 0)
    {
      v67 = *v66;
LABEL_98:
      v63 = *(_QWORD *)(v60 + 8 * v67 + 42216);
      goto LABEL_83;
    }
    v68 = *(unsigned __int16 *)v66;
    if (v68 <= 0xFF)
    {
      v67 = v68;
      goto LABEL_98;
    }
LABEL_80:
    v63 = *(_QWORD *)(v60 + 64760);
    if (!v63 || v61 != *(_QWORD *)(v63 + 8))
      v63 = JSC::jsStringWithCacheSlowCase();
LABEL_83:
    v64 = (WTF::StringImpl *)*(v58 - 1);
    if (v64)
    {
      if ((*((_BYTE *)v64 + 16) & 0x10) != 0)
      {
        *(_DWORD *)v64 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase();
        v64 = v102;
      }
    }
    v65 = *(_DWORD *)v64;
    *(_DWORD *)v64 += 2;
    if (v65)
      *(_DWORD *)v64 = v65;
    else
      WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v61);
    v102 = 0;
    v103 = v54;
    v104 = -1;
    v105 = 0x1000000;
    v106 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v54, v51, (unint64_t)v64, v63, 0, (uint64_t)&v102);
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v56);
    else
      *(_DWORD *)v64 -= 2;
    v58 += 2;
    v59 -= 16;
  }
  while (v59);
  v69 = (WTF::StringImpl **)((char *)v45 + 8);
  v71 = v92;
  v70 = v93;
  do
  {
    v72 = *v69;
    *v69 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v56);
      else
        *(_DWORD *)v72 -= 2;
    }
    v73 = *(v69 - 1);
    *(v69 - 1) = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v56);
      else
        *(_DWORD *)v73 -= 2;
    }
    v69 += 2;
    v57 -= 16;
  }
  while (v57);
LABEL_112:
  if (v45)
    WTF::fastFree(v45, v56);
  if ((v50 & 1) == 0)
  {
    v83 = 16 * v90;
    v84 = (WTF::StringImpl **)((char *)v91 + 8);
    do
    {
      v85 = *v84;
      *v84 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v56);
        else
          *(_DWORD *)v85 -= 2;
      }
      v86 = *(v84 - 1);
      *(v84 - 1) = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
          WTF::StringImpl::destroy(v86, v56);
        else
          *(_DWORD *)v86 -= 2;
      }
      v84 += 2;
      v83 -= 16;
    }
    while (v83);
  }
  if (v91)
    WTF::fastFree(v91, v56);
  if (*((_DWORD *)v71 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) != 0)
  {
LABEL_166:
    v70 = 0;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v74 = v102;
    v102 = 0;
    v103 = (unint64_t)v70;
    v104 = -1;
    v105 = 0x1000000;
    v106 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v70, v71, (unint64_t)v74, v54, 0, (uint64_t)&v102);
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v75);
      else
        *(_DWORD *)v74 -= 2;
    }
  }
  if (v101)
  {
    v79 = 16 * v101;
    v80 = (WTF::StringImpl **)((char *)v99 + 8);
    do
    {
      v81 = *v80;
      *v80 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
          WTF::StringImpl::destroy(v81, v75);
        else
          *(_DWORD *)v81 -= 2;
      }
      v82 = *(v80 - 1);
      *(v80 - 1) = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v75);
        else
          *(_DWORD *)v82 -= 2;
      }
      v80 += 2;
      v79 -= 16;
    }
    while (v79);
  }
  v76 = v99;
  if (v99)
  {
    v99 = 0;
    v100 = 0;
    WTF::fastFree(v76, v75);
  }
  v77 = v96;
  v96 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v75);
    else
      *(_DWORD *)v77 -= 2;
  }
  return v70;
}

WebCore::PushSubscription *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore31PushSubscriptionChangeEventInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::PushSubscription *v3;
  WebCore::PushSubscription *result;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WebCore::PushSubscription *)a2[2];
  a2[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::PushSubscription::~PushSubscription(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  result = (WebCore::PushSubscription *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::PushSubscription::~PushSubscription(result, a2);
      return (WebCore::PushSubscription *)bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_11ArrayBufferENSE_ISJ_EENSG_ISJ_EEEENSA_6StringEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILST_1EJSP_SR_EEEEEEDcSV_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32D2D20[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

_BYTE *WebCore::jsRTCCertificatePrototypeFunction_getFingerprints(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  JSValue v40;
  void *v41;
  JSC::VM *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v46;
  JSC::VM *v47;
  BOOL v48;
  uint64_t v49;
  WTF *v50;
  _OWORD v51[4];
  uint64_t v52;
  JSC::VM *v53;
  WTF *v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "RTCCertificate", "getFingerprints");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCCertificate::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCCertificate::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "RTCCertificate", "getFingerprints");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v52 = 0;
  v53 = v5;
  v48 = 0;
  v49 = 0x800000000;
  v50 = (WTF *)((char *)v51 + 8);
  memset(v51, 0, sizeof(v51));
  v13 = *(_DWORD *)(v11 + 36);
  if (v13 >= 9)
  {
    v48 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v49) == 1;
    v13 = *(_DWORD *)(v11 + 36);
    if (v13)
      goto LABEL_14;
  }
  else if (v13)
  {
LABEL_14:
    v14 = 16 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 8);
    do
    {
      v16 = *((_QWORD *)this + 7);
      v17 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v18 = 8 * *(unsigned __int8 *)(v17 + 14);
      v19 = JSC::allocateCell<JSC::JSFinalObject>(v16, v18 + 16);
      v20 = *(_DWORD *)(v17 + 8);
      *(_DWORD *)v19 = v17 >> 4;
      *(_DWORD *)(v19 + 4) = v20;
      *(_QWORD *)(v19 + 8) = 0;
      bzero((void *)(v19 + 16), v18);
      if (*(_BYTE *)(v16 + 755))
        __dmb(0xAu);
      v21 = *(v15 - 1);
      if (!v21)
        goto LABEL_27;
      v22 = *((_QWORD *)this + 7);
      v23 = *(_DWORD *)(v21 + 4);
      if (v23)
      {
        if (v23 == 1)
        {
          v34 = *(unsigned __int8 **)(v21 + 8);
          if ((*(_BYTE *)(v21 + 16) & 4) != 0)
          {
            v35 = *v34;
LABEL_49:
            v24 = *(_QWORD *)(v22 + 8 * v35 + 42216);
            goto LABEL_23;
          }
          v38 = *(unsigned __int16 *)v34;
          if (v38 <= 0xFF)
          {
            v35 = v38;
            goto LABEL_49;
          }
        }
        v24 = *(_QWORD *)(v22 + 64760);
        if (!v24 || v21 != *(_QWORD *)(v24 + 8))
          v24 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v24 = *(_QWORD *)(v22 + 41968);
      }
LABEL_23:
      if (!*(_DWORD *)(v16 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v25 = v54;
        v54 = 0;
        v55 = v19;
        v56 = -1;
        v57 = 0x1000000;
        v58 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v19, (JSC::VM *)v16, (unint64_t)v25, v24, 0, (uint64_t)&v54);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v26);
          else
            *(_DWORD *)v25 -= 2;
        }
LABEL_27:
        v27 = *v15;
        if (!*v15)
          goto LABEL_37;
        v28 = *((_QWORD *)this + 7);
        v29 = *(_DWORD *)(v27 + 4);
        if (v29)
        {
          if (v29 != 1)
            goto LABEL_30;
          v36 = *(unsigned __int8 **)(v27 + 8);
          if ((*(_BYTE *)(v27 + 16) & 4) != 0)
          {
            v37 = *v36;
            goto LABEL_52;
          }
          v39 = *(unsigned __int16 *)v36;
          if (v39 > 0xFF)
          {
LABEL_30:
            v30 = *(_QWORD *)(v28 + 64760);
            if (!v30 || v27 != *(_QWORD *)(v30 + 8))
              v30 = JSC::jsStringWithCacheSlowCase();
          }
          else
          {
            v37 = v39;
LABEL_52:
            v30 = *(_QWORD *)(v28 + 8 * v37 + 42216);
          }
        }
        else
        {
          v30 = *(_QWORD *)(v28 + 41968);
        }
        if (!*(_DWORD *)(v16 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v31 = v54;
          v54 = 0;
          v55 = v19;
          v56 = -1;
          v57 = 0x1000000;
          v58 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v19, (JSC::VM *)v16, (unint64_t)v31, v30, 0, (uint64_t)&v54);
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
          goto LABEL_37;
        }
      }
      v19 = 0;
LABEL_37:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_79;
      v33 = v49;
      if ((_DWORD)v49 == HIDWORD(v49) || v50 != (WTF *)((char *)v51 + 8) && v50)
      {
        v40.super.isa = (Class)v19;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v49, v40) == 1)
          v48 = 1;
      }
      else
      {
        *((_QWORD *)v50 + v49) = v19;
        LODWORD(v49) = v33 + 1;
      }
      v15 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  if (v48)
  {
    JSC::throwOutOfMemoryError();
LABEL_79:
    v43 = 0;
    goto LABEL_70;
  }
  v54 = v50;
  LODWORD(v55) = v49;
  v42 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
    goto LABEL_79;
  v43 = JSC::constructArray();
LABEL_70:
  v44 = *(uint64_t **)&v51[0];
  if (*(_QWORD *)&v51[0])
  {
    v54 = (WTF *)&v49;
    v46 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v51[0], (uint64_t *)&v54);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v44, v46);
  }
  if (v50 != (WTF *)((char *)v51 + 8) && v50)
    WTF::fastFree(v50, v41);
  return (_BYTE *)v43;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore14RTCCertificateENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::RTCCertificate **v4;
  uint64_t v5;
  WebCore::RTCCertificate *v6;
  WTF *v7;
  void *v8;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::RTCCertificate ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v6, a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore12RTCIceServerELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

_BYTE *WebCore::jsRTCDTMFSenderPrototypeFunction_insertDTMF(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::RTCDTMFSender *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39[2];
  WTF::StringImpl *v40;
  char v41;

  v4 = *((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "RTCDTMFSender", "insertDTMF");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCDTMFSender::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRTCDTMFSender::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "RTCDTMFSender", "insertDTMF");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v25);
  }
  v12 = *(WebCore::RTCDTMFSender **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v39 = v13;
  if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
  {
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
    {
      v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
      if (!v14)
        goto LABEL_18;
    }
    else if (!v14)
    {
LABEL_18:
      v37 = v14;
      goto LABEL_19;
    }
    *(_DWORD *)v14 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v39, this);
LABEL_19:
  if (*(_DWORD *)(v4 + 80))
  {
    v15 = v37;
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4))
    {
      v36 = 1;
      v37 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v26);
        else
          *(_DWORD *)v15 -= 2;
      }
      v21 = 0;
      v22 = 1;
      goto LABEL_38;
    }
  }
  else
  {
    v15 = v37;
  }
  v35 = v15;
  v36 = 0;
  v16 = *((int *)a2 + 8);
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL || *((_QWORD *)a2 + 7) == 10)
  {
    v34 = 100;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), &v34);
    if (HIDWORD(v34))
    {
      v21 = 0;
      goto LABEL_37;
    }
    v16 = *((int *)a2 + 8);
  }
  if ((unint64_t)(v16 - 4) >= 0xFFFFFFFFFFFFFFFDLL || (v17 = *((_QWORD *)a2 + 8), v17 == 10))
  {
    v35 = 0;
    v37 = v15;
    v18 = 70;
LABEL_32:
    WebCore::RTCDTMFSender::insertDTMF(v12, (const WTF::String *)&v37, v34, v18, (uint64_t)v39);
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (!v41)
    {
      v21 = 10;
LABEL_37:
      v22 = 0;
LABEL_38:
      ((void (*)(int *, WTF::StringImpl **))off_1E32D2D10[v22])(v39, &v35);
      return (_BYTE *)v21;
    }
    v27 = (WTF::StringImpl *)LOBYTE(v39[0]);
    LOBYTE(v37) = v39[0];
    v28 = v40;
    v40 = 0;
    v38 = v28;
    if (!*(_QWORD *)(v4 + 16))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v39[0]), (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException((JSC::VM *)v4, this, v29);
      v28 = v38;
    }
    v38 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v41)
    {
      v30 = v40;
      v40 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 != 2)
        {
          v21 = 0;
          *(_DWORD *)v30 -= 2;
          goto LABEL_37;
        }
        WTF::StringImpl::destroy(v30, v27);
      }
    }
LABEL_64:
    v21 = 0;
    goto LABEL_37;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v17, &v33);
  if (HIDWORD(v33))
    goto LABEL_64;
  v35 = 0;
  v37 = v15;
  if (!HIDWORD(v34))
  {
    v18 = v33;
    goto LABEL_32;
  }
  v31 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22RTCDTMFToneChangeEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(v31);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22RTCDTMFToneChangeEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsRTCDataChannelPrototypeFunction_send(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  JSValue v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::DeferrableRefCountedBase *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSValue v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v43;
  int v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  JSValue v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  JSValue v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  JSValue v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  JSC::VM *v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  JSC::VM *v67;
  WTF::StringImpl *v68;
  char v69;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "RTCDataChannel", "send");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRTCDataChannel::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRTCDataChannel::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "RTCDataChannel", "send");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v16);
  }
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned __int8 *)(v19 + 5);
    if (v20 >= 0x17)
    {
      if (v20 == 38)
      {
        v21 = *(_QWORD *)(v10 + 24);
        v67 = v9;
        v22 = JSC::JSArrayBuffer::toWrapped((uint64_t)v9, v19);
        if (v22)
        {
          v24 = (WTF::DeferrableRefCountedBase *)v22;
          *(_DWORD *)v22 += 2;
          LODWORD(v66) = 0;
          v65 = 0;
          if (*(_BYTE *)(v21 + 81) == 1)
          {
            if (*(_BYTE *)(v22 + 64) && (v61 = *(_QWORD *)(v22 + 32)) != 0)
            {
              *(_QWORD *)(v21 + 128) += *(_QWORD *)(v61 + 32);
              v25 = *(_QWORD *)(v61 + 32);
            }
            else
            {
              v25 = *(_QWORD *)(v22 + 48);
              *(_QWORD *)(v21 + 128) += v25;
            }
            WebCore::NetworkSendQueue::enqueue((WebCore::NetworkSendQueue *)(v21 + 152), (const JSC::ArrayBuffer *)v22, 0, v25);
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24);
            v26 = 0;
            v18 = 10;
          }
          else
          {
            WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)v22);
            LOBYTE(v67) = 8;
            v68 = 0;
            if (!*((_QWORD *)v9 + 2))
            {
              v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v68);
              JSC::VM::throwException(v9, this, v37);
              v39 = v68;
              v68 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, v38);
                else
                  *(_DWORD *)v39 -= 2;
              }
            }
            v18 = 0;
            v26 = 0;
          }
        }
        else
        {
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v67, 0, "data", 5, "RTCDataChannel", 15, v23, "send", 5, "ArrayBuffer", 12);
          v18 = 0;
          v26 = 1;
          LODWORD(v66) = 1;
        }
        ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D3798[v26])(&v67, &v65);
        return v18;
      }
      if (v20 - 39 <= 0xB)
      {
        v27 = *(_QWORD *)(v10 + 24);
        v67 = v9;
        JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)v19, &v65);
        v29 = v65;
        if (!v65)
        {
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v67, 0, "data", 5, "RTCDataChannel", 15, v28, "send", 5, "ArrayBufferView", 16);
          v64 = 1;
          v56 = v65;
          v65 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
              JSC::ArrayBufferView::operator delete();
            else
              --*(_DWORD *)v56;
          }
          v18 = 0;
          v30 = 1;
          goto LABEL_30;
        }
        v64 = 0;
        v63 = 0;
        WebCore::RTCDataChannel::send(v27 - 48, v65, (uint64_t)&v67);
        if (*(_DWORD *)v29 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v29;
        if (!v69)
        {
          v18 = 10;
LABEL_29:
          v30 = 0;
LABEL_30:
          ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D37A8[v30])(&v67, &v63);
          return v18;
        }
        v57 = (WTF::StringImpl *)v67;
        LOBYTE(v65) = (_BYTE)v67;
        v58 = v68;
        v68 = 0;
        v66 = v58;
        if (!*((_QWORD *)v9 + 2))
        {
          v59.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v67, (JSC::JSGlobalObject *)&v66);
          JSC::VM::throwException(v9, this, v59);
          v58 = v66;
        }
        v66 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v57);
          else
            *(_DWORD *)v58 -= 2;
        }
        if (v69)
        {
          v60 = v68;
          v68 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 != 2)
            {
              v18 = 0;
              *(_DWORD *)v60 -= 2;
              goto LABEL_29;
            }
            WTF::StringImpl::destroy(v60, v57);
          }
        }
        v18 = 0;
        goto LABEL_29;
      }
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
      v32 = 16 * v31;
      if ((char **)(16 * v31) != &WebCore::JSBlob::s_info
        && *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0)
      {
        v40 = 16 * v31;
        do
          v40 = *(_QWORD *)(v40 + 16);
        while ((char **)v40 != &WebCore::JSBlob::s_info && v40 != 0);
        if (v40)
        {
          v34 = *(_QWORD *)(v10 + 24);
          v67 = v9;
          do
            v32 = *(_QWORD *)(v32 + 16);
          while ((char **)v32 != &WebCore::JSBlob::s_info && v32 != 0);
          if (!v32)
            goto LABEL_61;
          goto LABEL_37;
        }
      }
      else if ((_DWORD)v31)
      {
        v34 = *(_QWORD *)(v10 + 24);
        v67 = v9;
LABEL_37:
        v35 = *(_QWORD *)(v19 + 24);
        if (v35)
        {
          if (*(_BYTE *)(v34 + 81) == 1)
          {
            if (*(_BYTE *)(v35 + 64))
            {
              v36 = *(_QWORD *)(v35 + 56);
            }
            else
            {
              v52 = WebCore::ThreadableBlobRegistry::blobSize((WebCore::ThreadableBlobRegistry *)(v35 + 80), a2);
              v36 = v52 & ~(v52 >> 63);
              *(_QWORD *)(v35 + 56) = v36;
              *(_BYTE *)(v35 + 64) = 1;
            }
            *(_QWORD *)(v34 + 128) += v36;
            WebCore::NetworkSendQueue::enqueue((uint64_t *)(v34 + 152), (WebCore::Blob *)v35);
            return 10;
          }
          LOBYTE(v67) = 8;
          v68 = 0;
          if (!*((_QWORD *)v9 + 2))
          {
            v49.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v68);
            JSC::VM::throwException(v9, this, v49);
            v51 = v68;
            v68 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v50);
              else
                *(_DWORD *)v51 -= 2;
            }
          }
          return 0;
        }
LABEL_61:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v67, 0, "data", 5, "RTCDataChannel", 15, a8, "send", 5, "Blob", 5);
        return 0;
      }
    }
  }
  v43 = *(_QWORD *)(v10 + 24);
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v63);
  v44 = v64;
  if (v64)
  {
    v18 = 0;
  }
  else
  {
    v45 = v63;
    v63 = 0;
    v65 = v45;
    WebCore::RTCDataChannel::send((WTF *)(v43 - 48), (uint64_t)&v67);
    v47 = v65;
    v65 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v46);
      else
        *(_DWORD *)v47 -= 2;
    }
    if (v69)
    {
      v53 = (WTF::StringImpl *)v67;
      LOBYTE(v65) = (_BYTE)v67;
      v54 = v68;
      v66 = v68;
      if (!*((_QWORD *)v9 + 2))
      {
        v55.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v67, (JSC::JSGlobalObject *)&v66);
        JSC::VM::throwException(v9, this, v55);
        v54 = v66;
      }
      v66 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v53);
        else
          *(_DWORD *)v54 -= 2;
      }
      v18 = 0;
    }
    else
    {
      v18 = 10;
    }
    v44 = v64;
  }
  if (v44 != -1)
    ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D2D10[v44])(&v67, &v63);
  return v18;
}

uint64_t WebCore::jsRTCDataChannelPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "RTCDataChannel", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRTCDataChannel::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRTCDataChannel::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "RTCDataChannel", "close");
  v9 = *(_QWORD *)(v3 + 24);
  if (!*(_BYTE *)(v9 + 80) && (*(_BYTE *)(v9 + 81) & 0xFE) != 2)
  {
    *(_BYTE *)(v9 + 81) = 2;
    WebCore::NetworkSendQueue::clear(v9 + 152, a2);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return 10;
}

void WebCore::RTCDataChannel::~RTCDataChannel(WebCore::RTCDataChannel *this, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  WebCore::NetworkSendQueue::~NetworkSendQueue((WebCore::RTCDataChannel *)((char *)this + 200), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WebCore::EventTarget::~EventTarget((WebCore::RTCDataChannel *)((char *)this + 48), v3);
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v7);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v7);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCDataChannel::~RTCDataChannel(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WebCore::RTCDataChannel *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19RTCDataChannelEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  WebCore::RTCDataChannel *result;
  bmalloc::api *v3;
  void *v4;

  result = (WebCore::RTCDataChannel *)a2[1];
  a2[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(result, a2);
      return (WebCore::RTCDataChannel *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WebCore *WebCore::jsRTCDtlsTransportPrototypeFunction_getRemoteCertificates(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::ArrayBuffer *a4)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  JSC::VM *v21;
  WTF::DeferrableRefCountedBase **v22;
  WebCore::JSDOMGlobalObject **v23;
  objc_class *v24;
  int v25;
  BOOL v26;
  JSValue v27;
  void *v28;
  JSC::VM *v29;
  uint64_t v30;
  uint64_t *v31;
  WTF::DeferrableRefCountedBase **v32;
  WTF::DeferrableRefCountedBase *v33;
  _QWORD *v34;
  uint64_t v35;
  WTF *v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  WTF *v40;
  _OWORD v41[4];
  uint64_t v42;
  JSC::VM *v43;

  v4 = this;
  v5 = *((_QWORD *)a2 + 5);
  v35 = *((_QWORD *)this + 7);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (WebCore *)WebCore::throwThisTypeError((int)this, (int)&v35, "RTCDtlsTransport", "getRemoteCertificates");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCDtlsTransport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCDtlsTransport::s_info && v8 != 0);
  }
  if (!v7)
    return (WebCore *)WebCore::throwThisTypeError((int)this, (int)&v35, "RTCDtlsTransport", "getRemoteCertificates");
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = *(unsigned int *)(v11 + 76);
  if (!(_DWORD)v13)
  {
    v15 = 0;
    goto LABEL_19;
  }
  if (!(v13 >> 29))
  {
    v14 = WTF::fastMalloc((WTF *)(8 * v13));
    v15 = (WTF *)v14;
    v16 = *(unsigned int *)(v11 + 76);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v11 + 64);
      v19 = 8 * v16;
      do
      {
        v20 = *(_DWORD **)(v18 + v17);
        *v20 += 2;
        *(_QWORD *)(v14 + v17) = v20;
        v17 += 8;
      }
      while (v19 != v17);
    }
LABEL_19:
    v21 = (JSC::VM *)*((_QWORD *)v4 + 7);
    v43 = v21;
    v38 = 0;
    v39 = 0x800000000;
    v40 = (WTF *)((char *)v41 + 8);
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    if (v13 >= 9)
    {
      v38 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v39) == 1;
      v22 = (WTF::DeferrableRefCountedBase **)((char *)v15 + 8 * v13);
    }
    else
    {
      v22 = (WTF::DeferrableRefCountedBase **)((char *)v15 + 8 * v13);
      if (!(_DWORD)v13)
      {
LABEL_37:
        v36 = v40;
        v37 = v39;
        v29 = *(JSC::VM **)(v12 + 56);
        if (!*((_DWORD *)v29 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) == 0)
        {
          v30 = JSC::constructArray();
LABEL_39:
          v31 = *(uint64_t **)&v41[0];
          if (*(_QWORD *)&v41[0])
          {
            v36 = (WTF *)&v39;
            v34 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v41[0], (uint64_t *)&v36);
            WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v31, v34);
          }
          if (v40 != (WTF *)((char *)v41 + 8) && v40)
            WTF::fastFree(v40, v28);
          if ((_DWORD)v13)
          {
            v32 = (WTF::DeferrableRefCountedBase **)v15;
            do
            {
              v33 = *v32;
              *v32 = 0;
              if (v33)
                WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v33);
              ++v32;
            }
            while (v32 != v22);
          }
          if (v15)
            WTF::fastFree(v15, v28);
          return (WebCore *)v30;
        }
LABEL_56:
        v30 = 0;
        goto LABEL_39;
      }
    }
    v23 = (WebCore::JSDOMGlobalObject **)v15;
    while (1)
    {
      v24 = (objc_class *)WebCore::toJS(v4, v12, *v23, a4);
      if (*((_DWORD *)v21 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
          goto LABEL_56;
      }
      v25 = v39;
      if ((_DWORD)v39 != HIDWORD(v39) && (v40 != (WTF *)((char *)v41 + 8) ? (v26 = v40 == 0) : (v26 = 1), v26))
      {
        *((_QWORD *)v40 + v39) = v24;
        LODWORD(v39) = v25 + 1;
      }
      else
      {
        v27.super.isa = v24;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v39, v27) == 1)
          v38 = 1;
      }
      if (++v23 == v22)
      {
        if (!v38)
          goto LABEL_37;
        JSC::throwOutOfMemoryError();
        goto LABEL_56;
      }
    }
  }
  __break(0xC471u);
  return this;
}

_BYTE *WebCore::jsRTCEncodedAudioFramePrototypeFunction_getMetadata(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  void *v33;
  int v34;
  WTF *v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *((_QWORD *)a2 + 5);
  v37 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "RTCEncodedAudioFrame", "getMetadata");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCEncodedAudioFrame::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCEncodedAudioFrame::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v37, "RTCEncodedAudioFrame", "getMetadata");
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v10 + 56))
    goto LABEL_13;
  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(v10 + 16) + 40))(&v38);
  v34 = *(unsigned __int8 *)(v10 + 56);
  *(_DWORD *)(v10 + 32) = (_DWORD)v38;
  if (!v34)
    goto LABEL_40;
  v35 = *(WTF **)(v10 + 40);
  if (!v35)
  {
    *(_QWORD *)(v10 + 40) = v39;
    *(_QWORD *)(v10 + 48) = v40;
    goto LABEL_13;
  }
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 48) = 0;
  WTF::fastFree(v35, v33);
  v36 = *(unsigned __int8 *)(v10 + 56);
  *(_QWORD *)(v10 + 40) = v39;
  *(_QWORD *)(v10 + 48) = v40;
  if (!v36)
  {
    __break(1u);
LABEL_40:
    *(_QWORD *)(v10 + 40) = v39;
    *(_QWORD *)(v10 + 48) = v40;
    *(_BYTE *)(v10 + 56) = 1;
  }
LABEL_13:
  v12 = *((_QWORD *)this + 7);
  v13 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v14 = 8 * *(unsigned __int8 *)(v13 + 14);
  v15 = JSC::allocateCell<JSC::JSFinalObject>(v12, v14 + 16);
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v15 = v13 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  bzero((void *)(v15 + 16), v14);
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  v17 = *(unsigned int *)(v10 + 52);
  if (!(_DWORD)v17)
    goto LABEL_20;
  if (v17 >> 30)
  {
LABEL_50:
    __break(0xC471u);
    JUMPOUT(0x194E410D4);
  }
  v18 = (void *)WTF::fastMalloc((WTF *)(4 * v17));
  memcpy(v18, *(const void **)(v10 + 40), 4 * *(unsigned int *)(v10 + 52));
  WTF::fastFree((WTF *)v18, v19);
  v20 = *(unsigned int *)(v10 + 52);
  if (!(_DWORD)v20)
  {
LABEL_20:
    v21 = 0;
    v38 = 0;
    v39 = 0;
    goto LABEL_21;
  }
  if (v20 >> 30)
    goto LABEL_50;
  v21 = (void *)WTF::fastMalloc((WTF *)(4 * v20));
  memcpy(v21, *(const void **)(v10 + 40), 4 * *(unsigned int *)(v10 + 52));
  HIDWORD(v39) = v20;
  v22 = (WTF *)WTF::fastMalloc((WTF *)(4 * v20));
  LODWORD(v39) = v20;
  v38 = v22;
  memcpy(v22, v21, 4 * v20);
LABEL_21:
  v24 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert<unsigned int,0ul>((uint64_t)this, v11, (unsigned int **)&v38);
  v25 = v38;
  if (v38)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v25, v23);
  }
  if (v21)
    WTF::fastFree((WTF *)v21, v23);
  if (*(_DWORD *)(v12 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v26 = v38;
  v38 = 0;
  v39 = v15;
  v40 = 0x1000000FFFFFFFFLL;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v12, (unint64_t)v26, v24, 0, (uint64_t)&v38);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v27);
    else
      *(_DWORD *)v26 -= 2;
  }
  v28 = *(unsigned int *)(v10 + 32);
  v29 = (v28 & 0x80000000) != 0
      ? COERCE__INT64((double)v28) + 0x2000000000000
      : v28 | 0xFFFE000000000000;
  if (*(_DWORD *)(v12 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v30 = v38;
  v38 = 0;
  v39 = v15;
  v40 = 0x1000000FFFFFFFFLL;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v12, (unint64_t)v30, v29, 0, (uint64_t)&v38);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsRTCEncodedVideoFramePrototypeFunction_getMetadata(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  WTF *v15;
  _BOOL4 v16;
  unint64_t v17;
  size_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  JSC::VM *v26;
  uint64_t v27;
  objc_class *v28;
  int v29;
  JSValue v30;
  void *v31;
  WTF *v32;
  int v33;
  JSC::VM *v34;
  uint64_t v35;
  uint64_t *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  unint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  WTF *v68;
  int v69;
  __int128 v70;
  WTF *v71;
  _OWORD v72[4];
  uint64_t v73;
  JSC::VM *v74;

  v4 = this;
  v5 = *((_QWORD *)a2 + 5);
  v67 = *((_QWORD *)this + 7);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v67, "RTCEncodedVideoFrame", "getMetadata");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCEncodedVideoFrame::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCEncodedVideoFrame::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v67, "RTCEncodedVideoFrame", "getMetadata");
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v13 = v11 + 40;
  if (!*(_BYTE *)(v11 + 96))
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v11 + 16) + 48))(&v70);
    if (*(_BYTE *)(v11 + 96))
    {
      *(_QWORD *)v13 = v70;
      *(_BYTE *)(v11 + 48) = BYTE8(v70);
      v15 = *(WTF **)(v11 + 56);
      if (v15)
      {
        *(_QWORD *)(v11 + 56) = 0;
        *(_DWORD *)(v11 + 64) = 0;
        WTF::fastFree(v15, v14);
        v16 = *(_BYTE *)(v11 + 96) == 0;
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)(v11 + 56) = v71;
      *(_QWORD *)(v11 + 64) = *(_QWORD *)&v72[0];
      *(_OWORD *)(v11 + 72) = *(_OWORD *)((char *)v72 + 8);
      *(_QWORD *)(v11 + 88) = *((_QWORD *)&v72[1] + 1);
      if (v16)
      {
        __break(1u);
LABEL_119:
        if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
          return 0;
        goto LABEL_67;
      }
    }
    else
    {
      *(_OWORD *)v13 = v70;
      *(_QWORD *)(v11 + 56) = v71;
      *(_QWORD *)(v11 + 64) = *(_QWORD *)&v72[0];
      *(_OWORD *)(v11 + 72) = *(_OWORD *)((char *)v72 + 8);
      *(_QWORD *)(v11 + 88) = *((_QWORD *)&v72[1] + 1);
      *(_BYTE *)(v11 + 96) = 1;
    }
  }
  v66 = (uint64_t *)(v11 + 40);
  v3 = *((_QWORD *)v4 + 7);
  v17 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v18 = 8 * *(unsigned __int8 *)(v17 + 14);
  v13 = JSC::allocateCell<JSC::JSFinalObject>(v3, v18 + 16);
  v19 = *(_DWORD *)(v17 + 8);
  *(_DWORD *)v13 = v17 >> 4;
  *(_DWORD *)(v13 + 4) = v19;
  *(_QWORD *)(v13 + 8) = 0;
  bzero((void *)(v13 + 16), v18);
  if (*(_BYTE *)(v3 + 755))
    __dmb(0xAu);
  v20 = *(unsigned int *)(v11 + 68);
  if ((_DWORD)v20)
  {
    if (v20 >> 29)
      goto LABEL_127;
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    memcpy(v21, *(const void **)(v11 + 56), 8 * *(unsigned int *)(v11 + 68));
    WTF::fastFree((WTF *)v21, v22);
    v23 = *(unsigned int *)(v11 + 68);
    if ((_DWORD)v23)
    {
      if (!(v23 >> 29))
      {
        v24 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
        memcpy(v24, *(const void **)(v11 + 56), 8 * *(unsigned int *)(v11 + 68));
        v25 = (uint64_t *)WTF::fastMalloc((WTF *)(8 * v23));
        memcpy(v25, v24, 8 * v23);
        goto LABEL_29;
      }
LABEL_127:
      __break(0xC471u);
      JUMPOUT(0x194E419D8);
    }
    v25 = 0;
  }
  else
  {
    v25 = 0;
    LODWORD(v23) = 0;
  }
  v24 = 0;
LABEL_29:
  v26 = (JSC::VM *)*((_QWORD *)v4 + 7);
  v74 = v26;
  LOBYTE(v70) = 0;
  *((_QWORD *)&v70 + 1) = 0x800000000;
  v71 = (WTF *)((char *)v72 + 8);
  memset(v72, 0, sizeof(v72));
  v73 = 0;
  if (v23 >= 9)
  {
    v23 = v23;
    v63 = v12;
    v65 = v24;
    LOBYTE(v70) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)((char *)&v70 + 8)) == 1;
  }
  else
  {
    if (!(_DWORD)v23)
    {
      v33 = 0;
      v32 = (WTF *)((char *)v72 + 8);
LABEL_50:
      v68 = v32;
      v69 = v33;
      v34 = *(JSC::VM **)(v12 + 56);
      if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
        v35 = 0;
      else
        v35 = JSC::constructArray();
      goto LABEL_52;
    }
    v65 = v24;
    v63 = v12;
    v23 = v23;
  }
  v27 = 8 * v23;
  v64 = v25;
  while (1)
  {
    v28 = (objc_class *)(*v25 == (int)*v25
                       ? *v25 | 0xFFFE000000000000
                       : COERCE__INT64((double)*v25) + 0x2000000000000);
    if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
      break;
    v29 = DWORD2(v70);
    if (DWORD2(v70) == HIDWORD(v70) || v71 != (WTF *)((char *)v72 + 8) && v71)
    {
      v30.super.isa = v28;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)((char *)&v70 + 8), v30) == 1)
        LOBYTE(v70) = 1;
    }
    else
    {
      *((_QWORD *)v71 + DWORD2(v70)) = v28;
      DWORD2(v70) = v29 + 1;
    }
    ++v25;
    v27 -= 8;
    if (!v27)
    {
      if (!(_BYTE)v70)
      {
        v32 = v71;
        v33 = DWORD2(v70);
        v12 = v63;
        v25 = v64;
        v24 = v65;
        goto LABEL_50;
      }
      JSC::throwOutOfMemoryError();
      break;
    }
  }
  v35 = 0;
  v25 = v64;
  v24 = v65;
LABEL_52:
  v36 = *(uint64_t **)&v72[0];
  if (*(_QWORD *)&v72[0])
  {
    v68 = (WTF *)((char *)&v70 + 8);
    v62 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v72[0], (uint64_t *)&v68);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v36, v62);
  }
  if (v71 != (WTF *)((char *)v72 + 8) && v71)
    WTF::fastFree(v71, v31);
  if (v25)
    WTF::fastFree((WTF *)v25, v31);
  if (v24)
    WTF::fastFree((WTF *)v24, v31);
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v37 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = v13;
  v71 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v72[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v37, v35, 0, (uint64_t)&v70);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (!*(_BYTE *)(v11 + 48))
    goto LABEL_70;
  if (*v66 == (int)*v66)
    v4 = (WebCore *)(*v66 | 0xFFFE000000000000);
  else
    v4 = (WebCore *)(COERCE__INT64((double)*v66) + 0x2000000000000);
  if (*(_DWORD *)(v3 + 80))
    goto LABEL_119;
LABEL_67:
  WTF::AtomStringImpl::addLiteral();
  v39 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = v13;
  v71 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v72[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v39, (uint64_t)v4, 0, (uint64_t)&v70);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v40);
    else
      *(_DWORD *)v39 -= 2;
  }
LABEL_70:
  v41 = *(unsigned __int16 *)(v11 + 74);
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    return 0;
  v42 = v41 | 0xFFFE000000000000;
  WTF::AtomStringImpl::addLiteral();
  v43 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = v13;
  v71 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v72[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v43, v42, 0, (uint64_t)&v70);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v44);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (*(_BYTE *)(v11 + 80))
  {
    v45 = *(unsigned int *)(v11 + 76);
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
      return 0;
    v46 = v45 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v47 = (WTF::StringImpl *)v70;
    *(_QWORD *)&v70 = 0;
    *((_QWORD *)&v70 + 1) = v13;
    v71 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v72[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v47, v46, 0, (uint64_t)&v70);
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v48);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  v49 = *(unsigned int *)(v11 + 92);
  if ((v49 & 0x80000000) != 0)
    v50 = COERCE__INT64((double)v49) + 0x2000000000000;
  else
    v50 = v49 | 0xFFFE000000000000;
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v51 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = v13;
  v71 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v72[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v51, v50, 0, (uint64_t)&v70);
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v52);
    else
      *(_DWORD *)v51 -= 2;
  }
  if (*(_BYTE *)(v11 + 88))
  {
    v53 = *(unsigned int *)(v11 + 84);
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
      return 0;
    v54 = v53 | 0xFFFE000000000000;
    WTF::AtomStringImpl::addLiteral();
    v55 = (WTF::StringImpl *)v70;
    *(_QWORD *)&v70 = 0;
    *((_QWORD *)&v70 + 1) = v13;
    v71 = (WTF *)0x1000000FFFFFFFFLL;
    *(_QWORD *)&v72[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v55, v54, 0, (uint64_t)&v70);
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v56);
      else
        *(_DWORD *)v55 -= 2;
    }
  }
  v57 = *(unsigned __int16 *)(v11 + 72);
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    return 0;
  v58 = v57 | 0xFFFE000000000000;
  WTF::AtomStringImpl::addLiteral();
  v59 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  *((_QWORD *)&v70 + 1) = v13;
  v71 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v72[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v13, (JSC::VM *)v3, (unint64_t)v59, v58, 0, (uint64_t)&v70);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v60);
    else
      *(_DWORD *)v59 -= 2;
  }
  return (_BYTE *)v13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13RTCErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *result;

  result = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

WebCore::RTCIceCandidate *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15RTCIceCandidateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *result;
  bmalloc::api *v3;
  void *v4;

  result = *(WebCore::RTCIceCandidate **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(result, a2);
      return (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore15RTCIceCandidateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19RTCIceCandidateInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsRTCIceCandidatePrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v42 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "RTCIceCandidate", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCIceCandidate::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCIceCandidate::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "RTCIceCandidate", "toJSON");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = *(_QWORD *)(v11 + 24);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = *(unsigned __int16 *)(v11 + 32);
  v15 = *(unsigned __int8 *)(v11 + 34);
  v16 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v17 = 8 * *(unsigned __int8 *)(v16 + 14);
  v18 = JSC::allocateCell<JSC::JSFinalObject>(v5, v17 + 16);
  v19 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)v18 = v16 >> 4;
  *(_DWORD *)(v18 + 4) = v19;
  *(_QWORD *)(v18 + 8) = 0;
  bzero((void *)(v18 + 16), v17);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v20 = *((_QWORD *)this + 7);
  if (!v12 || (v21 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v22 = *(_QWORD *)(v20 + 41968);
    goto LABEL_24;
  }
  if (v21 != 1)
    goto LABEL_21;
  v36 = *(unsigned __int8 **)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
  {
    v37 = *v36;
LABEL_68:
    v22 = *(_QWORD *)(v20 + 8 * v37 + 42216);
    goto LABEL_24;
  }
  v40 = *(unsigned __int16 *)v36;
  if (v40 <= 0xFF)
  {
    v37 = v40;
    goto LABEL_68;
  }
LABEL_21:
  v22 = *(_QWORD *)(v20 + 64760);
  if (!v22 || v12 != *(_QWORD *)(v22 + 8))
    v22 = JSC::jsStringWithCacheSlowCase();
LABEL_24:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_84;
  WTF::AtomStringImpl::addLiteral();
  v23 = v43;
  v43 = 0;
  v44 = v18;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v5, (unint64_t)v23, v22, 0, (uint64_t)&v43);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  v25 = v15 ? v14 | 0xFFFE000000000000 : 2;
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_84;
  WTF::AtomStringImpl::addLiteral();
  v26 = v43;
  v43 = 0;
  v44 = v18;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v5, (unint64_t)v26, v25, 0, (uint64_t)&v43);
  if (!v26)
  {
LABEL_35:
    if (v13)
      goto LABEL_36;
LABEL_43:
    v30 = 2;
    goto LABEL_44;
  }
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
    goto LABEL_35;
  }
  WTF::StringImpl::destroy(v26, v27);
  if (!v13)
    goto LABEL_43;
LABEL_36:
  v28 = *((_QWORD *)this + 7);
  v29 = *(_DWORD *)(v13 + 4);
  if (!v29)
  {
    v30 = *(_QWORD *)(v28 + 41968);
    goto LABEL_44;
  }
  if (v29 != 1)
    goto LABEL_38;
  v38 = *(unsigned __int8 **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    v39 = *v38;
LABEL_71:
    v30 = *(_QWORD *)(v28 + 8 * v39 + 42216);
    goto LABEL_44;
  }
  v41 = *(unsigned __int16 *)v38;
  if (v41 <= 0xFF)
  {
    v39 = v41;
    goto LABEL_71;
  }
LABEL_38:
  v30 = *(_QWORD *)(v28 + 64760);
  if (!v30 || v13 != *(_QWORD *)(v30 + 8))
    v30 = JSC::jsStringWithCacheSlowCase();
LABEL_44:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_84;
  WTF::AtomStringImpl::addLiteral();
  v31 = v43;
  v43 = 0;
  v44 = v18;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v5, (unint64_t)v31, v30, 0, (uint64_t)&v43);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
  {
LABEL_84:
    v18 = 0;
    goto LABEL_52;
  }
  WTF::AtomStringImpl::addLiteral();
  v33 = v43;
  v43 = 0;
  v44 = v18;
  v45 = -1;
  v46 = 0x1000000;
  v47 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v5, (unint64_t)v33, 2, 0, (uint64_t)&v43);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v34);
    else
      *(_DWORD *)v33 -= 2;
  }
LABEL_52:
  if (!v13)
    goto LABEL_55;
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
LABEL_55:
    if (!v12)
      return (_BYTE *)v18;
    goto LABEL_56;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v13, v34);
  if (!v12)
    return (_BYTE *)v18;
LABEL_56:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v34);
  else
    *(_DWORD *)v12 -= 2;
  return (_BYTE *)v18;
}

unint64_t WebCore::jsRTCIceTransportPrototypeFunction_getSelectedCandidatePair(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  WebCore::RTCIceCandidate *v12;
  WebCore::RTCIceCandidate *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  bmalloc::api *v17;
  void *v18;
  bmalloc::api *v19;
  void *v20;
  bmalloc::api *v21;
  void *v22;
  bmalloc::api *v23;
  void *v24;
  uint64_t v25;
  WebCore::RTCIceCandidate *v26;
  WebCore::RTCIceCandidate *v27;

  v3 = *((_QWORD *)a2 + 5);
  v25 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "RTCIceTransport", "getSelectedCandidatePair");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 0x4C);
  v6 = *(_DWORD *)(v4 + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCIceTransport::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCIceTransport::s_info && v7 != 0);
  }
  if (!v6)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "RTCIceTransport", "getSelectedCandidatePair");
  v10 = *(_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v10 + 64) == 6 || !*(_BYTE *)(v10 + 88))
    return 2;
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(WebCore::RTCIceCandidate **)(v10 + 72);
  if (v12)
    ++*(_DWORD *)v12;
  v13 = *(WebCore::RTCIceCandidate **)(v10 + 80);
  if (v13)
    ++*(_DWORD *)v13;
  if (v12)
    ++*(_DWORD *)v12;
  v26 = v12;
  if (v13)
  {
    ++*(_DWORD *)v13;
    v27 = v13;
    v15 = WebCore::convertDictionaryToJS((uint64_t)this, v11, &v26);
    if (*(_DWORD *)v13 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v13, v14);
      bmalloc::api::isoDeallocate(v17, v18);
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  else
  {
    v27 = 0;
    v15 = WebCore::convertDictionaryToJS((uint64_t)this, v11, &v26);
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v12, v14);
      bmalloc::api::isoDeallocate(v19, v20);
      if (!v13)
        goto LABEL_29;
      goto LABEL_27;
    }
    --*(_DWORD *)v12;
  }
  if (!v13)
    goto LABEL_29;
LABEL_27:
  if (*(_DWORD *)v13 == 1)
  {
    WebCore::RTCIceCandidate::~RTCIceCandidate(v13, v14);
    bmalloc::api::isoDeallocate(v21, v22);
  }
  else
  {
    --*(_DWORD *)v13;
  }
LABEL_29:
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v12, v14);
      bmalloc::api::isoDeallocate(v23, v24);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  return v15;
}

void WebCore::RTCIceCandidate::~RTCIceCandidate(WebCore::RTCIceCandidate *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore11MediaStreamENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WebCore::MediaStream *v6;
  bmalloc::api *v7;
  void *v8;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = 8 * v3;
    do
    {
      v6 = *(WebCore::MediaStream **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v6);
          bmalloc::api::isoDeallocate(v7, v8);
        }
        else
        {
          --*((_DWORD *)v6 + 22);
        }
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24RTCRtpEncodingParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 72 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 9;
      v5 -= 72;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WebCore::RTCPeerConnection *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17RTCPeerConnectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF *a2)
{
  WebCore::RTCPeerConnection *result;
  bmalloc::api *v3;
  void *v4;

  result = *(WebCore::RTCPeerConnection **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(result, a2);
      return (WebCore::RTCPeerConnection *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17RTCPeerConnectionENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16RTCConfigurationENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::RTCCertificate **v4;
  uint64_t v5;
  WebCore::RTCCertificate *v6;
  WTF *v7;
  void *v8;
  WTF *result;

  v3 = *(unsigned int *)(a2 + 52);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::RTCCertificate ***)(a2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v6, (WTF::StringImpl *)a2);
          WTF::fastFree(v7, v8);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)(a2 + 40);
  if (result)
  {
    *(_QWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 48) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)a2);
  }
  if (*(_BYTE *)(a2 + 16))
    return (WTF *)WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2, (WTF::StringImpl *)a2);
  return result;
}

unint64_t WebCore::jsRTCPeerConnectionConstructorFunction_generateCertificate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  int v17;
  int v18;
  WebCore::DOMGuardedObject *v19;
  uint64_t v20;
  JSC::VM *v22;
  JSValue v23;
  objc_class *v24;
  WebCore::DOMGuardedObject *v25;
  WebCore::DOMGuardedObject *v26;
  char v27[8];
  int v28;
  WebCore::DOMGuardedObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E42750);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v22, this, v23);
LABEL_27:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_29;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)this, *((_QWORD *)a2 + 6), (uint64_t)&v29);
  v17 = v32;
  if (!v32)
  {
    v27[0] = 0;
    v28 = -1;
    v18 = v31;
    if (v31 != -1)
    {
      ((void (*)(WebCore::DOMGuardedObject **, char *, uint64_t *))off_1E32D4040[v31])(&v26, v27, &v30);
      v28 = v18;
    }
    v26 = v14;
    WebCore::RTCPeerConnection::generateCertificate(this, (uint64_t)v27, (uint64_t *)&v26);
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v19 + 16))(v19);
      else
        --*((_DWORD *)v19 + 4);
    }
    if (v28 != -1)
      ((void (*)(WebCore::DOMGuardedObject **, char *))off_1E32D4030[v28])(&v26, v27);
    v14 = 0;
    v17 = v32;
  }
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))off_1E32D4050[v17])(v27, &v30);
  if (v14)
    goto LABEL_27;
LABEL_29:
  v20 = *(_QWORD *)(v10 + 16);
  if (v20)
  {
    if (*(_QWORD *)(v10 + 24) != v20)
    {
      v24 = *(objc_class **)(v20 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v29);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v29, v24, 0);
      v25 = v29;
      v29 = 0;
      if (v25)
      {
        if (*((_DWORD *)v25 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v25 + 16))(v25);
        else
          --*((_DWORD *)v25 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_createOffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  JSC::JSCell *v24;
  WebCore::ActiveDOMCallback *v25;
  __int16 v26;
  __int16 v27;
  uint64_t Object;
  JSC::Structure *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  JSC::VM *v36;
  double v37;
  _BOOL4 v38;
  uint64_t v39;
  objc_class *v41;
  WebCore::DOMGuardedObject *v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  int *v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  WebCore::ActiveDOMCallback *v53[2];
  WebCore::DOMGuardedObject *v54;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E42B90);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v53[0] = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSRTCPeerConnection::s_info && v20 != 0);
    }
    if (v19)
    {
      v23 = *(_QWORD *)(v17 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v26 = 0;
        v27 = 1;
        goto LABEL_56;
      }
      v24 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v25 = (WebCore::ActiveDOMCallback *)*((_QWORD *)this + 7);
      v53[1] = v25;
      if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v26 = 0;
        v27 = 1;
LABEL_56:
        LOWORD(v54) = v26 | v27;
        WebCore::RTCPeerConnection::createOffer(v23, (__int16 *)&v54, v53);
        goto LABEL_57;
      }
      if (((unint64_t)v24 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v24)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_57;
      }
      v29 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v31 = JSC::JSObject::get(v29, this, (unint64_t)v54);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v30);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
      {
LABEL_57:
        v14 = v53[0];
        v53[0] = 0;
        if (!v14)
          goto LABEL_60;
        goto LABEL_58;
      }
      if (v31 == 10)
      {
        v27 = 1;
        goto LABEL_42;
      }
      v32 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v31 >= 0xFFFE000000000000)
      {
        v43 = (_DWORD)v31 == 0;
        goto LABEL_111;
      }
      *(_QWORD *)&v33 = v31 - 0x2000000000000;
      if (v31 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v33 <= 0.0)
        {
          v27 = v33 < 0.0;
          goto LABEL_41;
        }
      }
      else
      {
        if ((v31 & 0xFFFE000000000002) != 0)
        {
          v27 = v31 == 7;
          goto LABEL_41;
        }
        v44 = *(unsigned __int8 *)(v31 + 5);
        if (v44 == 3)
        {
          v47 = *(_DWORD *)(v31 + 8);
LABEL_103:
          v43 = v47 == 0;
          goto LABEL_111;
        }
        if (v44 == 2)
        {
          v45 = *(_QWORD *)(v31 + 8);
          if ((v45 & 1) != 0)
            v46 = (int *)(v31 + 16);
          else
            v46 = (int *)(v45 + 4);
          v47 = *v46;
          goto LABEL_103;
        }
        if ((*(_BYTE *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xA) & 1) != 0)
        {
          v43 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_111:
          v27 = !v43;
LABEL_41:
          if (*((_DWORD *)v32 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
            goto LABEL_57;
LABEL_42:
          WTF::AtomStringImpl::addLiteral();
          v35 = JSC::JSObject::get(v29, this, (unint64_t)v54);
          if (v54)
          {
            if (*(_DWORD *)v54 == 2)
              WTF::StringImpl::destroy(v54, v34);
            else
              *(_DWORD *)v54 -= 2;
          }
          if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
            goto LABEL_57;
          if (v35 == 10)
          {
            v26 = 0;
            goto LABEL_56;
          }
          v36 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v35 >= 0xFFFE000000000000)
          {
            v48 = (_DWORD)v35 == 0;
            goto LABEL_115;
          }
          *(_QWORD *)&v37 = v35 - 0x2000000000000;
          if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v37 <= 0.0)
            {
              v38 = v37 < 0.0;
              goto LABEL_52;
            }
          }
          else
          {
            if ((v35 & 0xFFFE000000000002) != 0)
            {
              v38 = v35 == 7;
              goto LABEL_52;
            }
            v49 = *(unsigned __int8 *)(v35 + 5);
            if (v49 == 3)
            {
              v52 = *(_DWORD *)(v35 + 8);
LABEL_107:
              v48 = v52 == 0;
              goto LABEL_115;
            }
            if (v49 == 2)
            {
              v50 = *(_QWORD *)(v35 + 8);
              if ((v50 & 1) != 0)
                v51 = (int *)(v35 + 16);
              else
                v51 = (int *)(v50 + 4);
              v52 = *v51;
              goto LABEL_107;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v48 = *(_QWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_115:
              v38 = !v48;
LABEL_52:
              if (!*((_DWORD *)v36 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) == 0)
              {
                if (v38)
                  v26 = 256;
                else
                  v26 = 0;
                goto LABEL_56;
              }
              goto LABEL_57;
            }
          }
          v38 = 1;
          goto LABEL_52;
        }
      }
      v27 = 1;
      goto LABEL_41;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "createOffer", v16);
  v53[0] = 0;
LABEL_58:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_60:
  v39 = *(_QWORD *)(v10 + 16);
  if (v39)
  {
    if (*(_QWORD *)(v10 + 24) != v39)
    {
      v41 = *(objc_class **)(v39 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v54);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v54, v41, 0);
      v42 = v54;
      v54 = 0;
      if (v42)
      {
        if (*((_DWORD *)v42 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v42 + 16))(v42);
        else
          --*((_DWORD *)v42 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_createAnswer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  JSC::JSCell *v24;
  WebCore::ActiveDOMCallback *v25;
  uint64_t Object;
  JSC::Structure *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  BOOL v30;
  JSC::VM *v31;
  uint64_t v32;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  WebCore::ActiveDOMCallback *v41[2];
  WebCore::DOMGuardedObject *v42;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E43030);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v41[0] = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSRTCPeerConnection::s_info && v20 != 0);
    }
    if (v19)
    {
      v23 = *(_QWORD *)(v17 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v30 = 1;
        goto LABEL_41;
      }
      v24 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v25 = (WebCore::ActiveDOMCallback *)*((_QWORD *)this + 7);
      v41[1] = v25;
      if (((unint64_t)v24 & 0xFFFFFFFFFFFFFFF7) == 2)
        goto LABEL_34;
      if (((unint64_t)v24 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v24)) == 0)
      {
        JSC::throwTypeError();
        goto LABEL_42;
      }
      v27 = (JSC::Structure *)Object;
      WTF::AtomStringImpl::addLiteral();
      v29 = JSC::JSObject::get(v27, this, (unint64_t)v42);
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v28);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
      {
LABEL_42:
        v14 = v41[0];
        v41[0] = 0;
        if (!v14)
          goto LABEL_45;
        goto LABEL_43;
      }
      if (v29 == 10)
      {
LABEL_34:
        v30 = 1;
        goto LABEL_41;
      }
      v31 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v29 >= 0xFFFE000000000000)
      {
        v36 = (_DWORD)v29 == 0;
      }
      else
      {
        if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v30 = COERCE_DOUBLE(v29 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v29 - 0x2000000000000) < 0.0;
LABEL_40:
          if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
            goto LABEL_42;
LABEL_41:
          LOBYTE(v42) = v30;
          WebCore::RTCPeerConnection::createAnswer(v23, (char *)&v42, v41);
          goto LABEL_42;
        }
        if ((v29 & 0xFFFE000000000002) != 0)
        {
          v30 = v29 == 7;
          goto LABEL_40;
        }
        v37 = *(unsigned __int8 *)(v29 + 5);
        if (v37 == 3)
        {
          v40 = *(_DWORD *)(v29 + 8);
        }
        else
        {
          if (v37 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
              v30 = 1;
              goto LABEL_40;
            }
            v36 = *(_QWORD *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
            goto LABEL_79;
          }
          v38 = *(_QWORD *)(v29 + 8);
          if ((v38 & 1) != 0)
            v39 = (int *)(v29 + 16);
          else
            v39 = (int *)(v38 + 4);
          v40 = *v39;
        }
        v36 = v40 == 0;
      }
LABEL_79:
      v30 = !v36;
      goto LABEL_40;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "createAnswer", v16);
  v41[0] = 0;
LABEL_43:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_45:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v34 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v34, 0);
      v35 = v42;
      v42 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_setLocalDescription(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  WTF::StringImpl *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  JSC::JSCell *v25;
  JSC::VM *v26;
  uint64_t Object;
  JSC::Structure *v28;
  uint64_t v29;
  char v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  objc_class *v45;
  WebCore::DOMGuardedObject *v46;
  WebCore::ActiveDOMCallback *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  char v50;
  JSC::VM *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WebCore::DOMGuardedObject *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E43640);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v47 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSRTCPeerConnection::s_info && v21 != 0);
    }
    if (v20)
    {
      v24 = *(_QWORD *)(v18 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v51 = (JSC::VM *)*((_QWORD *)this + 7);
      }
      else
      {
        v25 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
        v26 = (JSC::VM *)*((_QWORD *)this + 7);
        v51 = v26;
        if (((unint64_t)v25 & 0xFFFFFFFFFFFFFFF7) != 2)
        {
          if (((unint64_t)v25 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v25)) == 0)
          {
            JSC::throwTypeError();
LABEL_89:
            v39 = 1;
            v57 = 1;
            goto LABEL_71;
          }
          v28 = (JSC::Structure *)Object;
          WTF::AtomStringImpl::addLiteral();
          v29 = JSC::JSObject::get(v28, this, (unint64_t)v48);
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v16);
            else
              *(_DWORD *)v48 -= 2;
          }
          if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
            goto LABEL_89;
          if (v29 == 10)
          {
            v30 = 0;
            goto LABEL_37;
          }
          v53 = (WTF::StringImpl *)v29;
          v33 = (JSC::VM *)*((_QWORD *)this + 7);
          if ((v29 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v29 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v53, this);
            goto LABEL_47;
          }
          v34 = *(WTF::StringImpl **)(v29 + 8);
          if ((v34 & 1) != 0)
          {
            v34 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v29, this);
            if (!v34)
              goto LABEL_46;
          }
          else if (!v34)
          {
LABEL_46:
            v52 = v34;
LABEL_47:
            if (*((_DWORD *)v33 + 20))
            {
              v31 = v52;
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v33))
              {
                LODWORD(v49) = 1;
                v52 = 0;
                if (v31)
                {
                  if (*(_DWORD *)v31 == 2)
                    WTF::StringImpl::destroy(v31, v16);
                  else
                    *(_DWORD *)v31 -= 2;
                }
                v31 = 0;
                goto LABEL_110;
              }
            }
            else
            {
              v31 = v52;
            }
            LODWORD(v49) = 0;
            v48 = 0;
LABEL_50:
            WTF::AtomStringImpl::addLiteral();
            v35 = v53;
            v36 = JSC::JSObject::get(v28, this, (unint64_t)v53);
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v16);
              else
                *(_DWORD *)v35 -= 2;
            }
            if (*((_DWORD *)v51 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v51) & 1) != 0)
              goto LABEL_110;
            if (v36 == 10)
            {
              v32 = 0;
LABEL_59:
              v39 = 0;
              v55 = (WTF::StringImpl *)v32;
              v56 = v31;
              v31 = 0;
              goto LABEL_60;
            }
            v53 = (WTF::StringImpl *)*((_QWORD *)this + 7);
            v37 = v53;
            v38 = WebCore::parseEnumeration<WebCore::RTCSdpType>(this, v36);
            if (!*((_DWORD *)v37 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) == 0)
            {
              if ((v38 & 0xFF00000000) != 0)
              {
                v32 = v38 | 0x100000000;
                goto LABEL_59;
              }
              JSC::throwTypeError();
            }
LABEL_110:
            v39 = 1;
LABEL_60:
            v57 = v39;
            if ((_DWORD)v49 != -1)
              ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2D10[v49])(&v53, &v48);
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
              {
                WTF::StringImpl::destroy(v31, v16);
                v39 = v57;
                if (!v57)
                {
LABEL_66:
                  v40 = v56;
                  v56 = 0;
                  v48 = v55;
                  v49 = v40;
                  v50 = 1;
                  WebCore::RTCPeerConnection::setLocalDescription(v24, (uint64_t *)&v48, &v47);
                  if (v50)
                  {
                    v42 = v49;
                    v49 = 0;
                    if (v42)
                    {
                      if (*(_DWORD *)v42 == 2)
                        WTF::StringImpl::destroy(v42, v41);
                      else
                        *(_DWORD *)v42 -= 2;
                    }
                  }
                  v39 = 0;
                  goto LABEL_71;
                }
LABEL_79:
                if (v39 == -1)
                {
LABEL_72:
                  v14 = v47;
                  v47 = 0;
                  if (!v14)
                    goto LABEL_75;
                  goto LABEL_73;
                }
LABEL_71:
                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D4678[v39])(&v48, &v55);
                goto LABEL_72;
              }
              *(_DWORD *)v31 -= 2;
            }
            if (!v39)
              goto LABEL_66;
            goto LABEL_79;
          }
          *(_DWORD *)v34 += 2;
          goto LABEL_46;
        }
      }
      v28 = 0;
      v30 = 1;
LABEL_37:
      v31 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v31 += 2;
      v32 = 0;
      LODWORD(v49) = 0;
      v48 = 0;
      if ((v30 & 1) != 0)
        goto LABEL_59;
      goto LABEL_50;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "setLocalDescription", v17);
  v47 = 0;
LABEL_73:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_75:
  v43 = *(_QWORD *)(v10 + 16);
  if (v43)
  {
    if (*(_QWORD *)(v10 + 24) != v43)
    {
      v45 = *(objc_class **)(v43 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v54);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v54, v45, 0);
      v46 = v54;
      v54 = 0;
      if (v46)
      {
        if (*((_DWORD *)v46 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v46 + 16))(v46);
        else
          --*((_DWORD *)v46 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_setRemoteDescription(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSC::VM *v31;
  JSValue v32;
  objc_class *v33;
  WebCore::DOMGuardedObject *v34;
  WebCore::ActiveDOMCallback *v35;
  WebCore::DOMGuardedObject *v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E439A0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v35 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_41;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSRTCPeerConnection::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_41:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "setRemoteDescription", v17);
LABEL_44:
    v35 = 0;
LABEL_34:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_36;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v31 = (JSC::VM *)*((_QWORD *)this + 7);
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v31, this, v32);
    goto LABEL_44;
  }
  v24 = *(_QWORD *)(v18 + 24);
  WebCore::convertDictionary<WebCore::RTCSessionDescriptionInit>(*((JSC::JSCell **)a2 + 6), (JSC::VM **)this, (uint64_t)&v36);
  v25 = v38;
  if (!v38)
  {
    LODWORD(v39) = (_DWORD)v36;
    v26 = v37;
    v37 = 0;
    v40 = v26;
    WebCore::RTCPeerConnection::setRemoteDescription(v24, &v39, &v35);
    v28 = v40;
    v40 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v25 = v38;
  }
  if (v25 != -1)
    ((void (*)(uint64_t *, WebCore::DOMGuardedObject **))off_1E32D4688[v25])(&v39, &v36);
  v14 = v35;
  v35 = 0;
  if (v14)
    goto LABEL_34;
LABEL_36:
  v29 = *(_QWORD *)(v10 + 16);
  if (v29)
  {
    if (*(_QWORD *)(v10 + 24) != v29)
    {
      v33 = *(objc_class **)(v29 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v36);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v36, v33, 0);
      v34 = v36;
      v36 = 0;
      if (v34)
      {
        if (*((_DWORD *)v34 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v34 + 16))(v34);
        else
          --*((_DWORD *)v34 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_addIceCandidate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  _DWORD *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  int v34;
  uint64_t (*v35)();
  int v36;
  int v37;
  uint64_t v38;
  objc_class *v40;
  WebCore::DOMGuardedObject *v41;
  WebCore::ActiveDOMCallback *v42;
  _QWORD v43[4];
  int v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  WebCore::DOMGuardedObject *v51;
  _BYTE v52[32];
  int v53;
  char v54;
  int v55;
  _BYTE v56[8];
  __int128 v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E43F98);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v42 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_80;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCPeerConnection::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_80:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "addIceCandidate", v16);
    v42 = 0;
LABEL_74:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_76;
  }
  v23 = *(_QWORD *)(v17 + 24);
  if (*((_DWORD *)a2 + 8) == 1 || (v24 = *((_QWORD *)a2 + 6), v24 == 10))
  {
    v52[0] = 0;
    v54 = 0;
    v55 = 0;
    v56[0] = 0;
    LOBYTE(v60) = 0;
LABEL_67:
    WebCore::RTCPeerConnection::addIceCandidate(v23, (uint64_t)v56, &v42);
    if ((_BYTE)v60 && (_DWORD)v59 != -1)
      ((void (*)(__int128 *, _BYTE *))off_1E32D4698[v59])(&v45, v56);
    v36 = v55;
    goto LABEL_71;
  }
  v43[0] = *((_QWORD *)this + 7);
  if ((v24 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if ((v24 & 0xFFFE000000000002) != 0)
      goto LABEL_48;
    v25 = *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C);
    v26 = *(_DWORD *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C) != 0;
    v27 = (char **)(16 * v25);
    if ((_DWORD)v25)
      v28 = v27 == &WebCore::JSRTCIceCandidate::s_info;
    else
      v28 = 1;
    if (!v28)
    {
      do
      {
        v27 = (char **)v27[2];
        v26 = v27 != 0;
      }
      while (v27 != &WebCore::JSRTCIceCandidate::s_info && v27 != 0);
    }
    if (v26)
    {
      v30 = *(_DWORD **)(v24 + 24);
      if (v30)
      {
        ++*v30;
        *(_QWORD *)&v57 = v30;
        v60 = 1;
        v61 = 0;
        goto LABEL_49;
      }
    }
    if (*(unsigned __int8 *)(v24 + 5) < 0x17u)
    {
LABEL_48:
      JSC::throwTypeError();
      v61 = 1;
      goto LABEL_49;
    }
  }
  WebCore::convertDictionary<WebCore::RTCIceCandidateInit>((uint64_t)&v45, this, (JSC::JSCell *)v24);
  if (!v48)
  {
    v31 = v47;
    v47 = 0;
    v32 = v45;
    v45 = 0uLL;
    v57 = v32;
    v58 = v46;
    v59 = v31;
    v60 = 0;
    v61 = 0;
    goto LABEL_47;
  }
  v61 = 1;
  if (v48 != -1)
LABEL_47:
    ((void (*)(char *, __int128 *))off_1E32D3BD0[v48])(&v50, &v45);
LABEL_49:
  v33 = v61;
  if (v61)
  {
    v55 = 1;
    goto LABEL_60;
  }
  LOBYTE(v43[0]) = 0;
  v44 = -1;
  v34 = v60;
  if (v60 == -1)
  {
    LOBYTE(v45) = 0;
    v49 = 1;
    v52[0] = 0;
    v53 = -1;
    v54 = 1;
    v55 = 0;
LABEL_56:
    v48 = -1;
    goto LABEL_57;
  }
  v35 = off_1E32D46A8[v60];
  ((void (*)(__int128 *, _QWORD *, __int128 *))v35)(&v45, v43, &v57);
  v44 = v34;
  LOBYTE(v45) = 0;
  v48 = -1;
  ((void (*)(char *, __int128 *, _QWORD *))v35)(&v50, &v45, v43);
  v48 = v34;
  v49 = 1;
  v52[0] = 0;
  v54 = 0;
  v53 = -1;
  ((void (*)(char *, _BYTE *, __int128 *))v35)(&v50, v52, &v45);
  v53 = v34;
  v54 = 1;
  v55 = 0;
  if (v49)
  {
    if (v48 != -1)
      ((void (*)(char *, __int128 *))off_1E32D4698[v48])(&v50, &v45);
    goto LABEL_56;
  }
LABEL_57:
  if (v44 != -1)
    ((void (*)(char *, _QWORD *))off_1E32D4698[v44])(&v50, v43);
  v33 = v61;
LABEL_60:
  if (v33 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E32D46B8[v33])(&v45, &v57);
  v36 = v55;
  if (!v55)
  {
    v56[0] = 0;
    LOBYTE(v60) = 0;
    if (v54)
    {
      LODWORD(v59) = -1;
      v37 = v53;
      if (v53 != -1)
      {
        ((void (*)(__int128 *, _BYTE *, _BYTE *))off_1E32D46A8[v53])(&v45, v56, v52);
        LODWORD(v59) = v37;
      }
      LOBYTE(v60) = 1;
    }
    goto LABEL_67;
  }
LABEL_71:
  if (v36 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E32D46C8[v36])(v56, v52);
  v14 = v42;
  v42 = 0;
  if (v14)
    goto LABEL_74;
LABEL_76:
  v38 = *(_QWORD *)(v10 + 16);
  if (v38)
  {
    if (*(_QWORD *)(v10 + 24) != v38)
    {
      v40 = *(objc_class **)(v38 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v51);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v51, v40, 0);
      v41 = v51;
      v51 = 0;
      if (v41)
      {
        if (*((_DWORD *)v41 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v41 + 16))(v41);
        else
          --*((_DWORD *)v41 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_restartIce(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "RTCPeerConnection", "restartIce");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRTCPeerConnection::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "RTCPeerConnection", "restartIce");
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 24) + 120) + 64))(*(_QWORD *)(*(_QWORD *)(v3 + 24)
                                                                                                  + 120));
  return 10;
}

unsigned __int8 *WebCore::jsRTCPeerConnectionPrototypeFunction_getConfiguration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  _DWORD **v33;
  uint64_t v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  WebCore::RTCCertificate *v38;
  WTF *v39;
  void *v40;
  JSC::VM *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _DWORD **v45;
  uint64_t v46;
  _QWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  _DWORD *v52;
  JSC::VM *v53;
  int v54;
  WebCore::RTCCertificate **v55;
  WebCore::RTCCertificate **v56;
  objc_class *v57;
  int v58;
  BOOL v59;
  JSValue v60;
  void *v61;
  char v62;
  WTF *v63;
  int v64;
  JSC::VM *v65;
  uint64_t v66;
  uint64_t *v67;
  JSC::VM *v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  WebCore::RTCCertificate **v90;
  WebCore::RTCCertificate *v91;
  WTF *v92;
  void *v93;
  uint64_t v94;
  WebCore::RTCCertificate **v95;
  WebCore::RTCCertificate *v96;
  WTF *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  size_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  int v128;
  unsigned __int8 *v129;
  unsigned int v130;
  unsigned __int8 *v131;
  unsigned int v132;
  unsigned __int8 *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  JSValue v138;
  void *v139;
  WTF *v140;
  int v141;
  JSC::VM *v142;
  uint64_t *v143;
  WTF *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  unsigned __int8 *v168;
  unsigned int v169;
  unsigned __int8 *v170;
  unsigned int v171;
  unsigned __int8 *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  int v181;
  WTF *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  JSC::VM *v185;
  JSC::VM *v186;
  JSC::VM *v187;
  char v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF *v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  JSC::VM *v198;
  JSC::VM *v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v189 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v189, "RTCPeerConnection", "getConfiguration");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v189, "RTCPeerConnection", "getConfiguration");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v13 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v14 = 8 * *(unsigned __int8 *)(v13 + 14);
  v15 = JSC::allocateCell<JSC::JSFinalObject>(v5, v14 + 16);
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v15 = v13 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  bzero((void *)(v15 + 16), v14);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v18 = *(int *)(v11 + 156);
  v19 = *((_QWORD *)this + 7);
  v20 = (uint64_t *)(v19 + 41968);
  if ((byte_1EE336501 & 1) == 0)
  {
LABEL_321:
    dword_1ECE79480 += 2;
    byte_1EE336501 = 1;
    dword_1ECE794A0 += 2;
    qword_1EE336638 = (uint64_t)&dword_1ECE79480;
    unk_1EE336640 = &dword_1ECE794A0;
    dword_1ECE794C0 += 2;
    qword_1EE336648 = (uint64_t)&dword_1ECE794C0;
  }
  v21 = *(_QWORD *)&_MergedGlobals_468[8 * v18 + 312];
  if (!v21)
  {
    v24 = *v20;
    goto LABEL_23;
  }
  v22 = *(_DWORD *)v21;
  v23 = *(_DWORD *)(v21 + 4);
  *(_DWORD *)v21 += 2;
  if (v23)
  {
    if (v23 != 1)
    {
LABEL_18:
      v24 = v20[2849];
      if (!v24 || v21 != *(_QWORD *)(v24 + 8))
      {
        v24 = JSC::jsStringWithCacheSlowCase();
        v22 = *(_DWORD *)v21 - 2;
      }
      goto LABEL_21;
    }
    v168 = *(unsigned __int8 **)(v21 + 8);
    if ((*(_BYTE *)(v21 + 16) & 4) != 0)
    {
      v169 = *v168;
    }
    else
    {
      v174 = *(unsigned __int16 *)v168;
      if (v174 > 0xFF)
        goto LABEL_18;
      v169 = v174;
    }
    v24 = *(_QWORD *)(v19 + 8 * v169 + 42216);
  }
  else
  {
    v24 = *v20;
  }
LABEL_21:
  if (v22)
    *(_DWORD *)v21 = v22;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v21, v17);
LABEL_23:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v25 = v190;
  v190 = 0;
  v191 = v15;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v25, v24, 0, (uint64_t)&v190);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  v27 = *(unsigned int *)(v11 + 180);
  v184 = (unsigned __int8 *)v15;
  v185 = (JSC::VM *)v5;
  v183 = v11;
  if (!(_DWORD)v27)
  {
    LODWORD(v41) = 0;
LABEL_48:
    v50 = 0;
    v43 = 0;
    v186 = 0;
    v188 = 1;
    goto LABEL_49;
  }
  if (v27 >> 29)
    goto LABEL_324;
  v28 = 8 * v27;
  v29 = WTF::fastMalloc((WTF *)(8 * v27));
  v31 = (WTF *)v29;
  v32 = *(unsigned int *)(v11 + 180);
  if ((_DWORD)v32)
  {
    v33 = *(_DWORD ***)(v11 + 168);
    v34 = 8 * v32;
    v35 = (_QWORD *)v29;
    do
    {
      v36 = *v33++;
      ++*v36;
      *v35++ = v36;
      v34 -= 8;
    }
    while (v34);
  }
  v37 = 0;
  do
  {
    v38 = *(WebCore::RTCCertificate **)((char *)v31 + v37);
    *(_QWORD *)((char *)v31 + v37) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
      {
        WebCore::RTCCertificate::~RTCCertificate(v38, v30);
        WTF::fastFree(v39, v40);
      }
      else
      {
        --*(_DWORD *)v38;
      }
    }
    v37 += 8;
  }
  while (v28 != v37);
  WTF::fastFree(v31, v30);
  v41 = (JSC::VM *)*(unsigned int *)(v11 + 180);
  if (!(_DWORD)v41)
    goto LABEL_48;
  if (v41 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x194E45498);
  }
  v42 = WTF::fastMalloc((WTF *)(8 * (_QWORD)v41));
  v43 = (WTF *)v42;
  v44 = *(unsigned int *)(v11 + 180);
  if ((_DWORD)v44)
  {
    v45 = *(_DWORD ***)(v11 + 168);
    v46 = 8 * v44;
    v47 = (_QWORD *)v42;
    do
    {
      v48 = *v45++;
      ++*v48;
      *v47++ = v48;
      v46 -= 8;
    }
    while (v46);
  }
  v49 = WTF::fastMalloc((WTF *)(8 * (_QWORD)v41));
  v50 = (WTF *)v49;
  v51 = 0;
  do
  {
    v52 = *(_DWORD **)((char *)v43 + v51);
    ++*v52;
    *(_QWORD *)(v49 + v51) = v52;
    v51 += 8;
  }
  while (8 * (_QWORD)v41 != v51);
  v188 = 0;
  v186 = v41;
LABEL_49:
  v53 = (JSC::VM *)*((_QWORD *)this + 7);
  v199 = v53;
  LOBYTE(v190) = 0;
  v191 = 0x800000000;
  v192 = (WTF *)((char *)&v193 + 8);
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v197 = 0;
  v54 = (int)v41;
  if (v41 >= 9)
  {
    LOBYTE(v190) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v191) == 1;
    v55 = (WebCore::RTCCertificate **)((char *)v50 + 8 * v41);
LABEL_51:
    v56 = (WebCore::RTCCertificate **)v50;
    while (1)
    {
      v57 = (objc_class *)WebCore::wrap<WebCore::RTCCertificate>((uint64_t)this, v12, *v56);
      if (*((_DWORD *)v53 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
          break;
      }
      v58 = v191;
      if ((_DWORD)v191 != HIDWORD(v191) && (v192 != (WTF *)((char *)&v193 + 8) ? (v59 = v192 == 0) : (v59 = 1), v59))
      {
        *((_QWORD *)v192 + v191) = v57;
        LODWORD(v191) = v58 + 1;
      }
      else
      {
        v60.super.isa = v57;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v191, v60) == 1)
          LOBYTE(v190) = 1;
      }
      if (++v56 == v55)
      {
        if (!(_BYTE)v190)
        {
          v62 = 0;
          v63 = v192;
          v64 = v191;
          goto LABEL_69;
        }
        JSC::throwOutOfMemoryError();
        break;
      }
    }
    v62 = 0;
    goto LABEL_310;
  }
  v55 = (WebCore::RTCCertificate **)((char *)v50 + 8 * v41);
  if (v54)
    goto LABEL_51;
  v64 = 0;
  v62 = 1;
  v63 = (WTF *)((char *)&v193 + 8);
LABEL_69:
  v203 = (uint64_t *)v63;
  LODWORD(v204) = v64;
  v65 = *(JSC::VM **)(v12 + 56);
  if (!*((_DWORD *)v65 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v65) & 1) == 0)
  {
    v66 = JSC::constructArray();
    goto LABEL_71;
  }
LABEL_310:
  v66 = 0;
LABEL_71:
  v67 = (uint64_t *)v193;
  if ((_QWORD)v193)
  {
    v203 = &v191;
    v179 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v193, (uint64_t *)&v203);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v67, v179);
  }
  if (v192 != (WTF *)((char *)&v193 + 8) && v192)
    WTF::fastFree(v192, v61);
  v69 = v184;
  v68 = v185;
  if ((v62 & 1) == 0)
  {
    v90 = (WebCore::RTCCertificate **)v50;
    do
    {
      v91 = *v90;
      *v90 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v91, (WTF::StringImpl *)v61);
          WTF::fastFree(v92, v93);
        }
        else
        {
          --*(_DWORD *)v91;
        }
      }
      ++v90;
    }
    while (v90 != v55);
  }
  if (v50)
    WTF::fastFree(v50, v61);
  if ((v188 & 1) == 0)
  {
    v94 = 8 * (_QWORD)v186;
    v95 = (WebCore::RTCCertificate **)v43;
    do
    {
      v96 = *v95;
      *v95 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v96, (WTF::StringImpl *)v61);
          WTF::fastFree(v97, v98);
        }
        else
        {
          --*(_DWORD *)v96;
        }
      }
      ++v95;
      v94 -= 8;
    }
    while (v94);
  }
  if (v43)
    WTF::fastFree(v43, v61);
  if (*((_DWORD *)v185 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v185) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v70 = v190;
  v190 = 0;
  v191 = (uint64_t)v184;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v184, v185, (unint64_t)v70, v66, 0, (uint64_t)&v190);
  v72 = v183;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v71);
    else
      *(_DWORD *)v70 -= 2;
  }
  v73 = *(unsigned __int8 *)(v183 + 164);
  if (*((_DWORD *)v185 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v185) & 1) != 0)
      return 0;
  }
  v74 = v73 | 0xFFFE000000000000;
  WTF::AtomStringImpl::addLiteral();
  v75 = v190;
  v190 = 0;
  v191 = (uint64_t)v184;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v184, v185, (unint64_t)v75, v74, 0, (uint64_t)&v190);
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v76);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (!*(_BYTE *)(v183 + 144))
    goto LABEL_234;
  v77 = *(unsigned int *)(v183 + 140);
  v181 = v77;
  if ((_DWORD)v77)
  {
    if (v77 < 0x5555556)
    {
      v78 = WTF::fastMalloc((WTF *)(48 * v77));
      v79 = *(unsigned int *)(v183 + 140);
      if ((_DWORD)v79)
      {
        v80 = 0;
        v81 = *(_QWORD *)(v183 + 128);
        v82 = 48 * v79;
        do
        {
          v83 = v12;
          v84 = v78 + v80;
          *(_BYTE *)v84 = 0;
          *(_DWORD *)(v84 + 16) = -1;
          v85 = *(unsigned int *)(v81 + v80 + 16);
          if ((_DWORD)v85 != -1)
          {
            v86 = v78;
            ((void (*)(WTF::StringImpl **, uint64_t, uint64_t))off_1E32D4910[v85])(&v190, v84, v81 + v80);
            v78 = v86;
            *(_DWORD *)(v84 + 16) = v85;
          }
          v87 = *(_DWORD **)(v81 + v80 + 24);
          if (v87)
            *v87 += 2;
          *(_QWORD *)(v84 + 24) = v87;
          v88 = *(_DWORD **)(v81 + v80 + 32);
          v12 = v83;
          if (v88)
            *v88 += 2;
          v89 = v78 + v80;
          *(_QWORD *)(v89 + 32) = v88;
          *(_DWORD *)(v89 + 40) = *(_DWORD *)(v81 + v80 + 40);
          v80 += 48;
        }
        while (v82 != v80);
        v69 = v184;
        v68 = v185;
        v72 = v183;
        LODWORD(v77) = v181;
      }
      goto LABEL_116;
    }
LABEL_324:
    __break(0xC471u);
    JUMPOUT(0x194E45490);
  }
  v78 = 0;
LABEL_116:
  v187 = (JSC::VM *)*((_QWORD *)this + 7);
  v197 = 0;
  v198 = v187;
  LOBYTE(v190) = 0;
  v191 = 0x800000000;
  v192 = (WTF *)((char *)&v193 + 8);
  v193 = 0u;
  v194 = 0u;
  v195 = 0u;
  v196 = 0u;
  v182 = (WTF *)v78;
  if (v77 >= 9)
  {
    v177 = v78;
    LOBYTE(v190) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v191) == 1;
    v78 = v177;
    v99 = v177 + 48 * v77;
  }
  else
  {
    v99 = v78 + 48 * v77;
    if (!(_DWORD)v77)
    {
      v141 = 0;
      v140 = (WTF *)((char *)&v193 + 8);
LABEL_209:
      v203 = (uint64_t *)v140;
      LODWORD(v204) = v141;
      v142 = *(JSC::VM **)(v12 + 56);
      if (*((_DWORD *)v142 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v142) & 1) != 0)
        v178 = 0;
      else
        v178 = JSC::constructArray();
      goto LABEL_211;
    }
  }
  v11 = 41968;
  v100 = v78;
  do
  {
    v15 = *((_QWORD *)this + 7);
    v101 = JSC::StructureCache::emptyObjectStructureForPrototype();
    v102 = 8 * *(unsigned __int8 *)(v101 + 14);
    v103 = JSC::allocateCell<JSC::JSFinalObject>(v15, v102 + 16);
    v104 = *(_DWORD *)(v101 + 8);
    *(_DWORD *)v103 = v101 >> 4;
    *(_DWORD *)(v103 + 4) = v104;
    *(_QWORD *)(v103 + 8) = 0;
    bzero((void *)(v103 + 16), v102);
    if (*(_BYTE *)(v15 + 755))
      __dmb(0xAu);
    v105 = *(_QWORD *)(v100 + 32);
    if (!v105)
      goto LABEL_131;
    v106 = *((_QWORD *)this + 7);
    v107 = *(_DWORD *)(v105 + 4);
    if (v107)
    {
      if (v107 != 1)
        goto LABEL_124;
      v131 = *(unsigned __int8 **)(v105 + 8);
      if ((*(_BYTE *)(v105 + 16) & 4) != 0)
      {
        v132 = *v131;
      }
      else
      {
        v136 = *(unsigned __int16 *)v131;
        if (v136 > 0xFF)
        {
LABEL_124:
          v108 = *(_QWORD *)(v106 + 64760);
          if (!v108 || v105 != *(_QWORD *)(v108 + 8))
            v108 = JSC::jsStringWithCacheSlowCase();
          goto LABEL_127;
        }
        v132 = v136;
      }
      v108 = *(_QWORD *)(v106 + 8 * v132 + 42216);
    }
    else
    {
      v108 = *(_QWORD *)(v106 + 41968);
    }
LABEL_127:
    if (*(_DWORD *)(v15 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
      goto LABEL_205;
    WTF::AtomStringImpl::addLiteral();
    v109 = (WTF::StringImpl *)v203;
    v203 = 0;
    v204 = (uint64_t *)v103;
    v205 = 0x1000000FFFFFFFFLL;
    v206 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v103, (JSC::VM *)v15, (unint64_t)v109, v108, 0, (uint64_t)&v203);
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v105);
      else
        *(_DWORD *)v109 -= 2;
    }
LABEL_131:
    v110 = *(int *)(v100 + 40);
    v111 = *((_QWORD *)this + 7);
    if ((byte_1EE33650A & 1) == 0)
    {
      dword_1ECE79840 += 2;
      unk_1EE336510 = &dword_1ECE79840;
      byte_1EE33650A = 1;
    }
    v112 = (uint64_t *)(v111 + 41968);
    v113 = *(_QWORD *)&_MergedGlobals_468[8 * v110 + 16];
    if (v113)
    {
      v114 = *(_DWORD *)v113;
      v115 = *(_DWORD *)(v113 + 4);
      *(_DWORD *)v113 += 2;
      if (v115)
      {
        if (v115 != 1)
        {
LABEL_136:
          v116 = *(_QWORD *)(v111 + 64760);
          if (!v116 || v113 != *(_QWORD *)(v116 + 8))
          {
            v116 = JSC::jsStringWithCacheSlowCase();
            v114 = *(_DWORD *)v113 - 2;
          }
          goto LABEL_139;
        }
        v129 = *(unsigned __int8 **)(v113 + 8);
        if ((*(_BYTE *)(v113 + 16) & 4) != 0)
        {
          v130 = *v129;
        }
        else
        {
          v135 = *(unsigned __int16 *)v129;
          if (v135 > 0xFF)
            goto LABEL_136;
          v130 = v135;
        }
        v116 = *(_QWORD *)(v111 + 8 * v130 + 42216);
      }
      else
      {
        v116 = *v112;
      }
LABEL_139:
      if (v114)
        *(_DWORD *)v113 = v114;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v113, (WTF::StringImpl *)v105);
      goto LABEL_141;
    }
    v116 = *v112;
LABEL_141:
    if (*(_DWORD *)(v15 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
      goto LABEL_205;
    WTF::AtomStringImpl::addLiteral();
    v5 = (uint64_t)v203;
    v203 = 0;
    v204 = (uint64_t *)v103;
    v205 = 0x1000000FFFFFFFFLL;
    v206 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v103, (JSC::VM *)v15, v5, v116, 0, (uint64_t)&v203);
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v5, v117);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (*(_DWORD *)(v100 + 16) == -1)
      v118 = -1;
    else
      v118 = *(unsigned int *)(v100 + 16);
    LOBYTE(v200) = 0;
    v201 = 0;
    v202 = v118;
    v203 = &v202;
    v204 = &v200;
    v205 = (uint64_t)this;
    v206 = v12;
    v207 = v100;
    _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLDOMStringENS_11IDLSequenceIS4_EEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6StringENSG_6VectorISH_Lm0ENSG_15CrashOnOverflowELm16ENSG_10FastMallocEEEEEEEUlTyvE_JNSE_17integral_constantIlLl0EEENSQ_IlLl1EEEEEET_ST_((uint64_t)&v203, (uint64_t)&v199);
    if (!v201)
    {
      v19 = std::__throw_bad_optional_access[abi:sn180100]();
      goto LABEL_321;
    }
    v119 = v200;
    if (*(_DWORD *)(v15 + 80))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
      {
LABEL_205:
        v103 = 0;
        goto LABEL_163;
      }
    }
    WTF::AtomStringImpl::addLiteral();
    v120 = (WTF::StringImpl *)v203;
    v203 = 0;
    v204 = (uint64_t *)v103;
    v205 = 0x1000000FFFFFFFFLL;
    v206 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v103, (JSC::VM *)v15, (unint64_t)v120, v119, 0, (uint64_t)&v203);
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
        WTF::StringImpl::destroy(v120, v121);
      else
        *(_DWORD *)v120 -= 2;
    }
    v122 = *(_QWORD *)(v100 + 24);
    if (v122)
    {
      v123 = *((_QWORD *)this + 7);
      v124 = *(_DWORD *)(v122 + 4);
      if (v124)
      {
        if (v124 != 1)
          goto LABEL_156;
        v133 = *(unsigned __int8 **)(v122 + 8);
        if ((*(_BYTE *)(v122 + 16) & 4) != 0)
        {
          v134 = *v133;
          goto LABEL_185;
        }
        v137 = *(unsigned __int16 *)v133;
        if (v137 > 0xFF)
        {
LABEL_156:
          v125 = *(_QWORD *)(v123 + 64760);
          if (!v125 || v122 != *(_QWORD *)(v125 + 8))
            v125 = JSC::jsStringWithCacheSlowCase();
        }
        else
        {
          v134 = v137;
LABEL_185:
          v125 = *(_QWORD *)(v123 + 8 * v134 + 42216);
        }
      }
      else
      {
        v125 = *(_QWORD *)(v123 + 41968);
      }
      if (*(_DWORD *)(v15 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
        goto LABEL_205;
      WTF::AtomStringImpl::addLiteral();
      v126 = (WTF::StringImpl *)v203;
      v203 = 0;
      v204 = (uint64_t *)v103;
      v205 = 0x1000000FFFFFFFFLL;
      v206 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v103, (JSC::VM *)v15, (unint64_t)v126, v125, 0, (uint64_t)&v203);
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v127);
        else
          *(_DWORD *)v126 -= 2;
      }
    }
LABEL_163:
    if (*((_DWORD *)v187 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v187) & 1) != 0)
    {
      v178 = 0;
      v68 = v185;
      goto LABEL_319;
    }
    v128 = v191;
    if ((_DWORD)v191 == HIDWORD(v191) || v192 != (WTF *)((char *)&v193 + 8) && v192)
    {
      v138.super.isa = (Class)v103;
      if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v191, v138) == 1)
        LOBYTE(v190) = 1;
    }
    else
    {
      *((_QWORD *)v192 + v191) = v103;
      LODWORD(v191) = v128 + 1;
    }
    v100 += 48;
  }
  while (v100 != v99);
  v68 = v185;
  if (!(_BYTE)v190)
  {
    v140 = v192;
    v141 = v191;
    v72 = v183;
    v69 = v184;
    LODWORD(v77) = v181;
    goto LABEL_209;
  }
  JSC::throwOutOfMemoryError();
  v178 = 0;
LABEL_319:
  v72 = v183;
  v69 = v184;
  LODWORD(v77) = v181;
LABEL_211:
  v143 = (uint64_t *)v193;
  if ((_QWORD)v193)
  {
    v203 = &v191;
    v180 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v193, (uint64_t *)&v203);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v143, v180);
  }
  if (v192 != (WTF *)((char *)&v193 + 8) && v192)
    WTF::fastFree(v192, v139);
  if ((_DWORD)v77)
  {
    v144 = v182;
    do
    {
      v145 = (WTF::StringImpl *)*((_QWORD *)v144 + 4);
      *((_QWORD *)v144 + 4) = 0;
      if (v145)
      {
        if (*(_DWORD *)v145 == 2)
          WTF::StringImpl::destroy(v145, (WTF::StringImpl *)v139);
        else
          *(_DWORD *)v145 -= 2;
      }
      v146 = (WTF::StringImpl *)*((_QWORD *)v144 + 3);
      *((_QWORD *)v144 + 3) = 0;
      if (v146)
      {
        if (*(_DWORD *)v146 == 2)
          WTF::StringImpl::destroy(v146, (WTF::StringImpl *)v139);
        else
          *(_DWORD *)v146 -= 2;
      }
      v147 = *((unsigned int *)v144 + 4);
      if ((_DWORD)v147 != -1)
        ((void (*)(WTF::StringImpl **, WTF *))off_1E32D3E60[v147])(&v190, v144);
      *((_DWORD *)v144 + 4) = -1;
      v144 = (WTF *)((char *)v144 + 48);
    }
    while (v144 != (WTF *)v99);
  }
  if (v182)
    WTF::fastFree(v182, v139);
  if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v148 = v190;
  v190 = 0;
  v191 = (uint64_t)v69;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v69, v68, (unint64_t)v148, v178, 0, (uint64_t)&v190);
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, v76);
    else
      *(_DWORD *)v148 -= 2;
  }
LABEL_234:
  v149 = *(int *)(v72 + 152);
  v150 = *((_QWORD *)this + 7);
  v151 = (uint64_t *)(v150 + 41968);
  if ((_MergedGlobals_468[0] & 1) == 0)
  {
    qword_1EE3365E8 = (uint64_t)&_MergedGlobals_23;
    _MergedGlobals_23 += 2;
    dword_1ECE79460 += 2;
    qword_1EE3365F0 = (uint64_t)&dword_1ECE79460;
    _MergedGlobals_468[0] = 1;
  }
  v152 = *(_QWORD *)&_MergedGlobals_468[8 * v149 + 232];
  if (v152)
  {
    v153 = *(_DWORD *)v152;
    v154 = *(_DWORD *)(v152 + 4);
    *(_DWORD *)v152 += 2;
    if (v154)
    {
      if (v154 != 1)
        goto LABEL_239;
      v170 = *(unsigned __int8 **)(v152 + 8);
      if ((*(_BYTE *)(v152 + 16) & 4) != 0)
      {
        v171 = *v170;
        goto LABEL_280;
      }
      v175 = *(unsigned __int16 *)v170;
      if (v175 > 0xFF)
      {
LABEL_239:
        v155 = *(_QWORD *)(v150 + 64760);
        if (!v155 || v152 != *(_QWORD *)(v155 + 8))
        {
          v155 = JSC::jsStringWithCacheSlowCase();
          v153 = *(_DWORD *)v152 - 2;
        }
      }
      else
      {
        v171 = v175;
LABEL_280:
        v155 = *(_QWORD *)(v150 + 8 * v171 + 42216);
      }
    }
    else
    {
      v155 = *v151;
    }
    if (v153)
      *(_DWORD *)v152 = v153;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v152, v76);
  }
  else
  {
    v155 = *v151;
  }
  if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v156 = v190;
  v190 = 0;
  v191 = (uint64_t)v69;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v69, v68, (unint64_t)v156, v155, 0, (uint64_t)&v190);
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, v157);
    else
      *(_DWORD *)v156 -= 2;
  }
  v158 = *(int *)(v72 + 160);
  v159 = *((_QWORD *)this + 7);
  v160 = (uint64_t *)(v159 + 41968);
  if ((byte_1EE336502 & 1) == 0)
  {
    unk_1EE3365F8 = &dword_1ECE794E0;
    dword_1ECE794E0 += 2;
    dword_1ECE79500 += 2;
    unk_1EE336600 = &dword_1ECE79500;
    byte_1EE336502 = 1;
  }
  v161 = *(_QWORD *)&_MergedGlobals_468[8 * v158 + 248];
  if (v161)
  {
    v162 = *(_DWORD *)v161;
    v163 = *(_DWORD *)(v161 + 4);
    *(_DWORD *)v161 += 2;
    if (v163)
    {
      if (v163 != 1)
        goto LABEL_253;
      v172 = *(unsigned __int8 **)(v161 + 8);
      if ((*(_BYTE *)(v161 + 16) & 4) != 0)
      {
        v173 = *v172;
        goto LABEL_283;
      }
      v176 = *(unsigned __int16 *)v172;
      if (v176 > 0xFF)
      {
LABEL_253:
        v164 = *(_QWORD *)(v159 + 64760);
        if (!v164 || v161 != *(_QWORD *)(v164 + 8))
        {
          v164 = JSC::jsStringWithCacheSlowCase();
          v162 = *(_DWORD *)v161 - 2;
        }
      }
      else
      {
        v173 = v176;
LABEL_283:
        v164 = *(_QWORD *)(v159 + 8 * v173 + 42216);
      }
    }
    else
    {
      v164 = *v160;
    }
    if (v162)
      *(_DWORD *)v161 = v162;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v161, v157);
  }
  else
  {
    v164 = *v160;
  }
  if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v165 = v190;
  v190 = 0;
  v191 = (uint64_t)v69;
  v192 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v193 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v69, v68, (unint64_t)v165, v164, 0, (uint64_t)&v190);
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, v166);
    else
      *(_DWORD *)v165 -= 2;
  }
  return v69;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_setConfiguration(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  WebCore::RTCCertificate *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSValue v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  int v35;
  WTF::StringImpl *v36;
  char v37;
  WTF *v38;
  WTF::StringImpl *v39;
  char v40;
  _QWORD v41[2];
  WTF *v42;
  uint64_t v43;
  char v44;
  _BYTE v45[8];
  WTF *v46;
  WTF::StringImpl *v47;
  char v48;
  _QWORD v49[2];
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "RTCPeerConnection", "setConfiguration");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "RTCPeerConnection", "setConfiguration");
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::RTCConfiguration>((uint64_t)v45, this, (JSC::JSCell *)v11);
  v13 = v52;
  if (!v52)
  {
    LOBYTE(v38) = 0;
    v40 = 0;
    if (v48)
    {
      v38 = v46;
      v14 = v47;
      v46 = 0;
      v47 = 0;
      v39 = v14;
      v40 = 1;
    }
    v41[0] = v49[0];
    *(_QWORD *)((char *)v41 + 6) = *(_QWORD *)((char *)v49 + 6);
    v42 = v50;
    v15 = v51;
    v50 = 0;
    v51 = 0;
    v43 = v15;
    WebCore::RTCPeerConnection::setConfiguration(v12, (uint64_t)&v38, (uint64_t)&v35);
    if (HIDWORD(v43))
    {
      v17 = v42;
      v18 = 8 * HIDWORD(v43);
      do
      {
        v19 = *(WebCore::RTCCertificate **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WebCore::RTCCertificate::~RTCCertificate(v19, v16);
            WTF::fastFree(v20, v21);
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
    v22 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v22, v16);
    }
    if (v40)
    {
      v23 = v38;
      if (HIDWORD(v39))
      {
        v24 = 48 * HIDWORD(v39);
        do
        {
          v25 = (WTF::StringImpl *)*((_QWORD *)v23 + 4);
          *((_QWORD *)v23 + 4) = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v16);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = (WTF::StringImpl *)*((_QWORD *)v23 + 3);
          *((_QWORD *)v23 + 3) = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v16);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = *((unsigned int *)v23 + 4);
          if ((_DWORD)v27 != -1)
            ((void (*)(char *, WTF *))off_1E32D3E60[v27])(&v44, v23);
          *((_DWORD *)v23 + 4) = -1;
          v23 = (WTF *)((char *)v23 + 48);
          v24 -= 48;
        }
        while (v24);
        v23 = v38;
      }
      if (v23)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree(v23, v16);
      }
    }
    if (!v37)
    {
      v28 = 10;
      goto LABEL_47;
    }
    v30 = (WTF::StringImpl *)v35;
    LOBYTE(v38) = v35;
    v31 = v36;
    v36 = 0;
    v39 = v31;
    if (!*((_QWORD *)v4 + 2))
    {
      v32.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v35, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v4, this, v32);
      v31 = v39;
    }
    v39 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (v37)
    {
      v33 = v36;
      v36 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 != 2)
        {
          v28 = 0;
          *(_DWORD *)v33 -= 2;
          goto LABEL_47;
        }
        WTF::StringImpl::destroy(v33, v30);
      }
    }
  }
  v28 = 0;
LABEL_47:
  if ((_DWORD)v13 != -1)
    ((void (*)(WTF **, WTF **))off_1E32D3FF8[v13])(&v38, &v46);
  return (_BYTE *)v28;
}

uint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::RTCPeerConnection *v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "RTCPeerConnection", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRTCPeerConnection::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "RTCPeerConnection", "close");
  v9 = *(WebCore::RTCPeerConnection **)(v3 + 24);
  if (WebCore::RTCPeerConnection::doClose(v9, a2))
    (*(void (**)(_QWORD *))(**((_QWORD **)v9 + 15) + 56))(*((_QWORD **)v9 + 15));
  return 10;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_getSenders(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::VM *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  objc_class *v15;
  int v16;
  BOOL v17;
  JSValue v18;
  void *v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  _QWORD *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  _DWORD v29[5];
  BOOL v30;
  uint64_t v31;
  WTF *v32;
  _OWORD v33[4];
  uint64_t v34;
  JSC::VM *v35;

  v4 = *((_QWORD *)a2 + 5);
  v26 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getSenders");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCPeerConnection::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getSenders");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::RtpTransceiverSet::senders(*(_QWORD *)(v4 + 24) + 104, (uint64_t)&v27);
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v11;
  v30 = 0;
  v31 = 0x800000000;
  v32 = (WTF *)((char *)v33 + 8);
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v12 = v29[0];
  if (v29[0] >= 9u)
  {
    v30 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v31) == 1;
    v12 = v29[0];
    if (v29[0])
    {
LABEL_14:
      v13 = (uint64_t *)v27;
      v14 = 8 * v12;
      do
      {
        v15 = (objc_class *)WebCore::wrap<WebCore::RTCRtpSender>((uint64_t)this, v10, *v13);
        if (*((_DWORD *)v11 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
            goto LABEL_44;
        }
        v16 = v31;
        if ((_DWORD)v31 != HIDWORD(v31) && (v32 != (WTF *)((char *)v33 + 8) ? (v17 = v32 == 0) : (v17 = 1), v17))
        {
          *((_QWORD *)v32 + v31) = v15;
          LODWORD(v31) = v16 + 1;
        }
        else
        {
          v18.super.isa = v15;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v31, v18) == 1)
            v30 = 1;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else if (v29[0])
  {
    goto LABEL_14;
  }
  if (v30)
  {
    JSC::throwOutOfMemoryError();
LABEL_44:
    v21 = 0;
    goto LABEL_33;
  }
  *(_QWORD *)&v29[1] = v32;
  v29[3] = v31;
  v20 = *(JSC::VM **)(v10 + 56);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    goto LABEL_44;
  v21 = JSC::constructArray();
LABEL_33:
  v22 = *(uint64_t **)&v33[0];
  if (*(_QWORD *)&v33[0])
  {
    *(_QWORD *)&v29[1] = &v31;
    v25 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v33[0], (uint64_t *)&v29[1]);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v22, v25);
  }
  if (v32 != (WTF *)((char *)v33 + 8) && v32)
    WTF::fastFree(v32, v19);
  v23 = v27;
  if (v27)
  {
    v27 = 0;
    v28 = 0;
    WTF::fastFree(v23, v19);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_getReceivers(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  JSC::VM *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  objc_class *v15;
  int v16;
  BOOL v17;
  JSValue v18;
  void *v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t *v22;
  WTF *v23;
  _QWORD *v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  _DWORD v29[5];
  BOOL v30;
  uint64_t v31;
  WTF *v32;
  _OWORD v33[4];
  uint64_t v34;
  JSC::VM *v35;

  v4 = *((_QWORD *)a2 + 5);
  v26 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getReceivers");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCPeerConnection::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getReceivers");
  v10 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::RtpTransceiverSet::receivers(*(_QWORD *)(v4 + 24) + 104, (uint64_t)&v27);
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v11;
  v30 = 0;
  v31 = 0x800000000;
  v32 = (WTF *)((char *)v33 + 8);
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v12 = v29[0];
  if (v29[0] >= 9u)
  {
    v30 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v31) == 1;
    v12 = v29[0];
    if (v29[0])
    {
LABEL_14:
      v13 = (uint64_t *)v27;
      v14 = 8 * v12;
      do
      {
        v15 = (objc_class *)WebCore::wrap<WebCore::RTCRtpReceiver>((uint64_t)this, v10, *v13);
        if (*((_DWORD *)v11 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v11) & 1) != 0)
            goto LABEL_44;
        }
        v16 = v31;
        if ((_DWORD)v31 != HIDWORD(v31) && (v32 != (WTF *)((char *)v33 + 8) ? (v17 = v32 == 0) : (v17 = 1), v17))
        {
          *((_QWORD *)v32 + v31) = v15;
          LODWORD(v31) = v16 + 1;
        }
        else
        {
          v18.super.isa = v15;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v31, v18) == 1)
            v30 = 1;
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
  }
  else if (v29[0])
  {
    goto LABEL_14;
  }
  if (v30)
  {
    JSC::throwOutOfMemoryError();
LABEL_44:
    v21 = 0;
    goto LABEL_33;
  }
  *(_QWORD *)&v29[1] = v32;
  v29[3] = v31;
  v20 = *(JSC::VM **)(v10 + 56);
  if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
    goto LABEL_44;
  v21 = JSC::constructArray();
LABEL_33:
  v22 = *(uint64_t **)&v33[0];
  if (*(_QWORD *)&v33[0])
  {
    *(_QWORD *)&v29[1] = &v31;
    v25 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v33[0], (uint64_t *)&v29[1]);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v22, v25);
  }
  if (v32 != (WTF *)((char *)v33 + 8) && v32)
    WTF::fastFree(v32, v19);
  v23 = v27;
  if (v27)
  {
    v27 = 0;
    v28 = 0;
    WTF::fastFree(v23, v19);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_getTransceivers(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  objc_class *v16;
  int v17;
  BOOL v18;
  JSValue v19;
  void *v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v25;
  JSC::VM *v26;
  WTF *v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  WTF *v31;
  _OWORD v32[4];
  uint64_t v33;
  JSC::VM *v34;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getTransceivers");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCPeerConnection::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "RTCPeerConnection", "getTransceivers");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v34 = v5;
  v29 = 0;
  v30 = 0x800000000;
  v31 = (WTF *)((char *)v32 + 8);
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v13 = *(_DWORD *)(v11 + 116);
  if (v13 >= 9)
  {
    v29 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v30) == 1;
    v13 = *(_DWORD *)(v11 + 116);
    if (v13)
    {
LABEL_14:
      v14 = *(uint64_t **)(v11 + 104);
      v15 = 8 * v13;
      do
      {
        v16 = (objc_class *)(*v14 ? WebCore::wrap<WebCore::RTCRtpTransceiver>((uint64_t)this, v12, *v14) : 2);
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
          goto LABEL_45;
        v17 = v30;
        if ((_DWORD)v30 != HIDWORD(v30) && (v31 != (WTF *)((char *)v32 + 8) ? (v18 = v31 == 0) : (v18 = 1), v18))
        {
          *((_QWORD *)v31 + v30) = v16;
          LODWORD(v30) = v17 + 1;
        }
        else
        {
          v19.super.isa = v16;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v30, v19) == 1)
            v29 = 1;
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
  }
  else if (v13)
  {
    goto LABEL_14;
  }
  if (v29)
  {
    JSC::throwOutOfMemoryError();
LABEL_45:
    v22 = 0;
    goto LABEL_36;
  }
  v27 = v31;
  v28 = v30;
  v21 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_45;
  v22 = JSC::constructArray();
LABEL_36:
  v23 = *(uint64_t **)&v32[0];
  if (*(_QWORD *)&v32[0])
  {
    v27 = (WTF *)&v30;
    v25 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v32[0], (uint64_t *)&v27);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v25);
  }
  if (v31 != (WTF *)((char *)v32 + 8) && v31)
    WTF::fastFree(v31, v20);
  return (_BYTE *)v22;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_addTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RTCRtpSender *v26;
  void *v27;
  _DWORD *v28;
  WTF *v29;
  bmalloc::api *v31;
  void *v32;
  JSValue v34;
  WTF::StringImpl *v35;
  JSValue v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  uint64_t v40;
  _DWORD *v41;
  int v42[2];
  WTF::StringImpl *v43;
  int v44;
  WTF *v45;
  _BYTE v46[8];
  WTF::StringImpl *v47;

  v9 = *((_QWORD *)this + 7);
  v40 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "RTCPeerConnection", "addTrack");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRTCPeerConnection::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "RTCPeerConnection", "addTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v9, this, v34);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v42 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSMediaStreamTrack::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSMediaStreamTrack::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v42, 0, "track", 6, "RTCPeerConnection", 18, a8, "addTrack", 9, "MediaStreamTrack", 17);
    return 0;
  }
  v24 = *(_QWORD *)(v17 + 24);
  WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::MediaStream>>((uint64_t)this, (uint64_t)a2, 1uLL, &v45);
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
  {
    v23 = 0;
LABEL_34:
    v29 = v45;
    v45 = 0;
    if (v29)
      WTF::fastFree(v29, v27);
    return (_BYTE *)v23;
  }
  v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  ++*(_DWORD *)(v24 - 8);
  v41 = (_DWORD *)(v24 - 32);
  WebCore::RTCPeerConnection::addTrack(v16, (uint64_t *)&v41, (const WTF::StringImpl *)&v45, (uint64_t)v42);
  if (!v44)
  {
    v26 = *(WebCore::RTCRtpSender **)v42;
    *(_QWORD *)v42 = 0;
    v23 = WebCore::wrap<WebCore::RTCRtpSender>((uint64_t)this, v25, (uint64_t)v26);
    if (*((_DWORD *)v26 + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(v26, (WTF::StringImpl *)v27);
      bmalloc::api::isoDeallocate(v31, v32);
    }
    else
    {
      --*((_DWORD *)v26 + 2);
    }
LABEL_29:
    if (v44 != -1)
      ((void (*)(_BYTE *, int *))off_1E32D46D8[v44])(v46, v42);
    v44 = -1;
    v28 = v41;
    v41 = 0;
    if (v28)
    {
      if (v28[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
      else
        --v28[6];
    }
    goto LABEL_34;
  }
  if (v44 == 1)
  {
    v27 = (void *)LOBYTE(v42[0]);
    v46[0] = v42[0];
    v35 = v43;
    v43 = 0;
    v47 = v35;
    if (!*(_QWORD *)(v9 + 16))
    {
      v36.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v42[0]), (JSC::JSGlobalObject *)&v47);
      JSC::VM::throwException((JSC::VM *)v9, this, v36);
      v35 = v47;
    }
    v47 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v35 -= 2;
    }
    v23 = 0;
    goto LABEL_29;
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsRTCPeerConnectionPrototypeFunction_removeTrack(v37, v38, v39);
}

uint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_removeTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  WebCore::RTCRtpSender *v24;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  char v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "RTCPeerConnection", "removeTrack");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRTCPeerConnection::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "RTCPeerConnection", "removeTrack");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCRtpSender::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCRtpSender::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::RTCRtpSender **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "sender", 7, "RTCPeerConnection", 18, a8, "removeTrack", 12, "RTCRtpSender", 13);
    return 0;
  }
  WebCore::RTCPeerConnection::removeTrack(v16, v24, (uint64_t)&v33);
  if (!v35)
    return 10;
  v26 = (WTF::StringImpl *)v33;
  v31 = (char)v33;
  v27 = v34;
  v34 = 0;
  v32 = v27;
  if (!*((_QWORD *)v9 + 2))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v9, this, v28);
    v27 = v32;
  }
  v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v35)
    return 0;
  v29 = v34;
  v34 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_addTransceiver(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v24;
  JSC::JSCell *v25;
  JSC::VM *v26;
  uint64_t Object;
  JSC::Structure *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  WTF *v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  int v39;
  WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unint64_t v50;
  WebCore::RTCRtpTransceiver *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  WebCore::MediaStream *v59;
  bmalloc::api *v60;
  void *v61;
  WTF *v62;
  JSC::VM *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  bmalloc::api *v72;
  void *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  JSValue v77;
  WTF::StringImpl *v78;
  JSValue v79;
  WTF::StringImpl *v80;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  unint64_t v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  JSC::VM *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 7);
  v84 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v84, "RTCPeerConnection", "addTransceiver");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRTCPeerConnection::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v84, "RTCPeerConnection", "addTransceiver");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v77.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v77);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v85 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  }
  else
  {
    v14 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
    v15 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v16 = v15 == &WebCore::JSMediaStreamTrack::s_info;
    else
      v16 = 1;
    if (v16)
    {
      if ((_DWORD)v14)
      {
LABEL_36:
        v24 = *(_QWORD *)(v13 + 24);
        ++*(_DWORD *)(v24 - 8);
        v105 = (WTF::StringImpl *)(v24 - 32);
        v106 = 0;
        v107 = 0;
        goto LABEL_37;
      }
    }
    else
    {
      do
        v15 = (char **)v15[2];
      while (v15 != &WebCore::JSMediaStreamTrack::s_info && v15 != 0);
      if (v15)
        goto LABEL_36;
    }
    v85 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    if (*(_BYTE *)(v13 + 5) == 2)
    {
      v17 = *(WTF::StringImpl **)(v13 + 8);
      if ((v17 & 1) != 0)
      {
        v17 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v13, this);
        if (!v17)
          goto LABEL_24;
      }
      else if (!v17)
      {
LABEL_24:
        v104 = v17;
        goto LABEL_25;
      }
      *(_DWORD *)v17 += 2;
      goto LABEL_24;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v85, this);
LABEL_25:
  if (!*(_DWORD *)(v4 + 80))
  {
    v18 = v104;
LABEL_27:
    v19 = 0;
    v20 = 0;
    LODWORD(v93) = 0;
    v92 = 0;
    v105 = v18;
    v106 = 1;
    goto LABEL_28;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
  v18 = v104;
  if (!hasExceptionsAfterHandlingTraps)
    goto LABEL_27;
  LODWORD(v93) = 1;
  v104 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v80);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = 1;
  v20 = 1;
LABEL_28:
  v107 = v19;
  ((void (*)(WTF::StringImpl **, uint64_t *, JSC::CallFrame *))off_1E32D2D10[v20])(&v85, &v92, a3);
  v21 = v107;
  if (v107)
  {
    v22 = 0;
    goto LABEL_100;
  }
LABEL_37:
  v83 = v12;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v103 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_48;
  }
  v25 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v26 = (JSC::VM *)*((_QWORD *)this + 7);
  v103 = v26;
  if (((unint64_t)v25 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_48:
    v33 = 0;
    v34 = 0;
    v35 = 0;
    LODWORD(v32) = 0;
    v85 = 0;
    v86 = 0;
    LODWORD(v87) = 0;
    goto LABEL_49;
  }
  v82 = v4;
  if (((unint64_t)v25 & 0xFFFE000000000002) != 0)
    goto LABEL_142;
  Object = JSC::JSCell::getObject(v25);
  if (!Object)
    goto LABEL_142;
  v28 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v29 = v85;
  v31 = JSC::JSObject::get(v28, this, (unint64_t)v85);
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v30);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    goto LABEL_143;
  if (v31 == 10)
  {
    LODWORD(v32) = 0;
    goto LABEL_105;
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v64 = v85;
  v32 = WebCore::parseEnumeration<WebCore::RTCRtpTransceiverDirection>(this, v31);
  if (*((_DWORD *)v64 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v64) & 1) != 0)
  {
LABEL_143:
    v22 = 0;
    v38 = 1;
    v97 = 1;
    goto LABEL_98;
  }
  if ((v32 & 0xFF00000000) == 0)
  {
LABEL_142:
    JSC::throwTypeError();
    goto LABEL_143;
  }
LABEL_105:
  WTF::AtomStringImpl::addLiteral();
  v65 = v85;
  v67 = JSC::JSObject::get(v28, this, (unint64_t)v85);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v66);
    else
      *(_DWORD *)v65 -= 2;
  }
  if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    goto LABEL_143;
  if (v67 == 10)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v85 = 0;
    v86 = 0;
    LODWORD(v87) = 0;
LABEL_115:
    WTF::AtomStringImpl::addLiteral();
    v68 = v100;
    v70 = JSC::JSObject::get(v28, this, (unint64_t)v100);
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v69);
      else
        *(_DWORD *)v68 -= 2;
    }
    if (*((_DWORD *)v26 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v26))
    {
      v38 = 1;
      v97 = 1;
      v4 = v82;
      goto LABEL_53;
    }
    if (v70 != 10)
    {
      v90 = *((_QWORD *)this + 7);
      if ((v70 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v70 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v75 = v98;
        v98 = 0;
        v4 = v82;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v74);
          else
            *(_DWORD *)v75 -= 2;
        }
        v38 = 1;
        v102 = 1;
        goto LABEL_51;
      }
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStream>>>::convert(this, v70, (uint64_t)&v100);
      v39 = v102;
      if (v102)
      {
        v38 = 1;
        v97 = 1;
        v4 = v82;
        if (v102 == -1)
          goto LABEL_53;
        goto LABEL_52;
      }
      v36 = (unint64_t)v100;
      v37 = v101;
      v4 = v82;
LABEL_50:
      v38 = 0;
      v100 = 0;
      v101 = 0;
      LODWORD(v92) = v32;
      v93 = (WTF *)v36;
      v94 = v37;
      v95 = v35;
      v96 = __PAIR64__(v33, v34);
      v35 = 0;
      v33 = 0;
LABEL_51:
      v97 = v38;
      v39 = v38;
LABEL_52:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D3FC8[v39])(&v98, &v100);
LABEL_53:
      v41 = (int)v87;
      goto LABEL_54;
    }
    v4 = v82;
LABEL_49:
    v36 = 0;
    v102 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if ((v67 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v67 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v71 = v100;
    v100 = 0;
    v4 = v82;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v40);
      else
        *(_DWORD *)v71 -= 2;
    }
    v41 = 1;
    LODWORD(v87) = 1;
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>>::convert(this, v67, (uint64_t)&v85);
    v41 = (int)v87;
    if (!(_DWORD)v87)
    {
      v35 = v85;
      v34 = v86;
      v33 = HIDWORD(v86);
      v85 = 0;
      v86 = 0;
      goto LABEL_115;
    }
    v4 = v82;
  }
  v33 = 0;
  v35 = 0;
  v38 = 1;
  v97 = 1;
LABEL_54:
  if (v41 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D3FD8[v41])(&v100, &v85);
  if (v33)
  {
    v42 = 72 * v33;
    v43 = (WTF::StringImpl **)v35;
    do
    {
      v44 = *v43;
      *v43 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v40);
        else
          *(_DWORD *)v44 -= 2;
      }
      v43 += 9;
      v42 -= 72;
    }
    while (v42);
  }
  if (v35)
  {
    WTF::fastFree(v35, v40);
    v38 = v97;
  }
  if (v38)
    goto LABEL_173;
  if (v107)
  {
LABEL_172:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_173:
    v22 = 0;
    goto LABEL_97;
  }
  v45 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v90) = 0;
  v91 = -1;
  v46 = v106;
  if (v106 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *, WTF::StringImpl **))off_1E32D46F8[v106])(&v85, &v90, &v105);
    v91 = v46;
  }
  LODWORD(v85) = v92;
  v47 = v93;
  v93 = 0;
  v86 = v47;
  v48 = v94;
  v94 = 0;
  v87 = v48;
  v49 = v95;
  v95 = 0;
  v88 = v49;
  v50 = v96;
  v96 = 0;
  v89 = v50;
  WebCore::RTCPeerConnection::addTransceiver(v83, &v90, (uint64_t)&v85, (uint64_t)&v100);
  if (v102)
  {
    if (v102 == 1)
    {
      v52 = (WTF::StringImpl *)v100;
      LOBYTE(v98) = (_BYTE)v100;
      v78 = v101;
      v101 = 0;
      v99 = v78;
      if (!*(_QWORD *)(v4 + 16))
      {
        v79.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v100, (JSC::JSGlobalObject *)&v99);
        JSC::VM::throwException((JSC::VM *)v4, this, v79);
        v78 = v99;
      }
      v99 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, v52);
        else
          *(_DWORD *)v78 -= 2;
      }
      v22 = 0;
      goto LABEL_73;
    }
    goto LABEL_172;
  }
  v51 = v100;
  v100 = 0;
  v22 = WebCore::wrap<WebCore::RTCRtpTransceiver>((uint64_t)this, v45, (uint64_t)v51);
  if (*((_DWORD *)v51 + 2) == 1)
  {
    WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v51, v52);
    bmalloc::api::isoDeallocate(v72, v73);
  }
  else
  {
    --*((_DWORD *)v51 + 2);
  }
LABEL_73:
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D4708[v102])(&v98, &v100);
  v102 = -1;
  if (HIDWORD(v89))
  {
    v53 = v88;
    v54 = 72 * HIDWORD(v89);
    do
    {
      v55 = *(WTF::StringImpl **)v53;
      *(_QWORD *)v53 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v52);
        else
          *(_DWORD *)v55 -= 2;
      }
      v53 = (WTF *)((char *)v53 + 72);
      v54 -= 72;
    }
    while (v54);
  }
  v56 = v88;
  if (v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree(v56, v52);
  }
  if (HIDWORD(v87))
  {
    v57 = v86;
    v58 = 8 * HIDWORD(v87);
    do
    {
      v59 = *(WebCore::MediaStream **)v57;
      *(_QWORD *)v57 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v59);
          bmalloc::api::isoDeallocate(v60, v61);
        }
        else
        {
          --*((_DWORD *)v59 + 22);
        }
      }
      v57 = (WTF *)((char *)v57 + 8);
      v58 -= 8;
    }
    while (v58);
  }
  v62 = v86;
  if (v86)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v62, v52);
  }
  if (v91 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32D46E8[v91])(&v85, &v90);
LABEL_97:
  if (v38 != -1)
LABEL_98:
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32D4718[v38])(&v85, &v92);
  v21 = v107;
LABEL_100:
  if (v21 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32D4728[v21])(&v92, &v105);
  return (_BYTE *)v22;
}

_BYTE *WebCore::jsRTCPeerConnectionPrototypeFunction_createDataChannel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  JSC::Structure *v14;
  __int16 v15;
  __int16 v16;
  int v17;
  JSC::JSCell *v18;
  uint64_t Object;
  WTF::StringImpl *v20;
  unint64_t v21;
  char v22;
  __int16 v23;
  char v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  __int16 v28;
  __int16 v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore::RTCDataChannel *v32;
  void *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  JSC::VM *v42;
  unint64_t v43;
  bmalloc::api *v44;
  void *v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  double v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  JSC::VM *v54;
  unint64_t v55;
  double v56;
  double v57;
  double v58;
  long double v59;
  double v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  JSC::VM *v64;
  double v65;
  __int16 v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  JSC::VM *v70;
  double v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  JSValue v76;
  WTF::StringImpl *v77;
  JSValue v78;
  double v79;
  char hasExceptionsAfterHandlingTraps;
  double v81;
  char v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  __int16 v93;
  __int16 v94;
  char v95;
  __int16 v96;
  __int16 v97;
  JSC::Structure *v98;
  JSC::VM *v99;
  uint64_t v100;
  JSC::VM *v101;
  unint64_t v102;
  int v103;
  WTF::StringImpl *v104;
  _DWORD v105[2];
  WTF::StringImpl *v106;
  int v107[2];
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  int v111;
  _BYTE v112[8];
  WTF::StringImpl *v113;
  _BYTE v114[8];
  WTF::StringImpl *v115;
  char v116;
  uint64_t v117;
  _BYTE v118[7];
  int v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v101 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v101, "RTCPeerConnection", "createDataChannel");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSRTCPeerConnection::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSRTCPeerConnection::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v101, "RTCPeerConnection", "createDataChannel");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v76.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v76);
  }
  v13 = *(_QWORD *)(v6 + 24);
  v14 = (JSC::Structure *)*((_QWORD *)a2 + 6);
  WebCore::valueToUSVString(this, (uint64_t)v14, (uint64_t)&v110);
  v17 = v111;
  if (v111)
  {
    v34 = 0;
    goto LABEL_42;
  }
  v99 = v5;
  v100 = v13;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *(_QWORD *)v107 = *((_QWORD *)this + 7);
    goto LABEL_25;
  }
  v18 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  *(_QWORD *)v107 = v3;
  if (((unint64_t)v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_25:
    v22 = 0;
    v23 = 0;
    v24 = 0;
    LOBYTE(v25) = 0;
    v26 = 0;
    LOBYTE(v27) = 0;
    v28 = 1;
    v29 = 256;
    goto LABEL_26;
  }
  v98 = v14;
  if (((unint64_t)v18 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v18)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_133;
  }
  v14 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v21 = JSC::JSObject::get(v14, this, v102);
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v102, v20);
    else
      *(_DWORD *)v102 -= 2;
  }
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    goto LABEL_133;
  if (v21 != 10)
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedShort>(this, v21, (uint64_t)&v102);
    v97 = v102;
    if (!HIDWORD(v102))
    {
      v95 = 1;
      goto LABEL_47;
    }
LABEL_133:
    v34 = 0;
    v37 = 1;
    v119 = 1;
    goto LABEL_41;
  }
  v95 = 0;
  v97 = 0;
LABEL_47:
  WTF::AtomStringImpl::addLiteral();
  v39 = (WTF::StringImpl *)v102;
  v25 = JSC::JSObject::get(v14, this, v102);
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v40);
    else
      *(_DWORD *)v39 -= 2;
  }
  v41 = *((_DWORD *)v3 + 20);
  if (v41 && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    goto LABEL_133;
  if (v25 != 10)
  {
    v102 = v25;
    v42 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v25 >= 0xFFFE000000000000 && (v25 & 0x80000000) == 0)
    {
      v43 = v25 >> 8;
      goto LABEL_74;
    }
    if (v25 >= 0xFFFE000000000000)
    {
      v46 = (double)(int)v25;
    }
    else if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v102, this);
    }
    else
    {
      *(_QWORD *)&v46 = v25 - 0x2000000000000;
    }
    if (!*((_DWORD *)v42 + 20)
      || (v79 = v46,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v42),
          v46 = v79,
          (hasExceptionsAfterHandlingTraps & 1) == 0))
    {
      LOBYTE(v25) = 0;
      if (fabs(v46) == INFINITY)
      {
        LOWORD(v43) = 0;
      }
      else
      {
        LOWORD(v43) = 0;
        if (v46 != 0.0)
        {
          v47 = -floor(-v46);
          v48 = floor(v46);
          if (v46 >= 0.0)
            v49 = v48;
          else
            v49 = v47;
          v50 = fmod(v49, 65536.0);
          if (v50 < 0.0)
            v50 = v50 + 65536.0;
          LODWORD(v25) = (int)v50;
          LODWORD(v43) = (int)v50 >> 8;
        }
      }
      goto LABEL_74;
    }
    goto LABEL_133;
  }
  v24 = 0;
  LOBYTE(v25) = 0;
  v94 = v41;
  while (1)
  {
    WTF::AtomStringImpl::addLiteral();
    v51 = (WTF::StringImpl *)v102;
    v27 = JSC::JSObject::get(v14, this, v102);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v52);
      else
        *(_DWORD *)v51 -= 2;
    }
    v53 = *((_DWORD *)v3 + 20);
    if (v53 && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_133;
    if (v27 == 10)
    {
      v26 = 0;
      LOBYTE(v27) = 0;
      v93 = v53;
    }
    else
    {
      v102 = v27;
      v54 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v27 < 0xFFFE000000000000 || (v27 & 0x80000000) != 0)
      {
        if (v27 >= 0xFFFE000000000000)
        {
          v56 = (double)(int)v27;
        }
        else if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v102, this);
        }
        else
        {
          *(_QWORD *)&v56 = v27 - 0x2000000000000;
        }
        if (*((_DWORD *)v54 + 20))
        {
          v81 = v56;
          v82 = JSC::VM::hasExceptionsAfterHandlingTraps(v54);
          v56 = v81;
          if ((v82 & 1) != 0)
            goto LABEL_133;
        }
        LOBYTE(v27) = 0;
        if (fabs(v56) == INFINITY)
        {
          LOWORD(v55) = 0;
        }
        else
        {
          LOWORD(v55) = 0;
          if (v56 != 0.0)
          {
            v57 = -floor(-v56);
            v58 = floor(v56);
            if (v56 >= 0.0)
              v59 = v58;
            else
              v59 = v57;
            v60 = fmod(v59, 65536.0);
            if (v60 < 0.0)
              v60 = v60 + 65536.0;
            LODWORD(v27) = (int)v60;
            LODWORD(v55) = (int)v60 >> 8;
          }
        }
      }
      else
      {
        v55 = v27 >> 8;
      }
      v93 = v55;
      v26 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v61 = (WTF::StringImpl *)v102;
    v63 = JSC::JSObject::get(v14, this, v102);
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v62);
      else
        *(_DWORD *)v61 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_133;
    if (v63 == 10)
    {
      v96 = 0;
      goto LABEL_110;
    }
    v64 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v63 >= 0xFFFE000000000000)
    {
      v83 = (_DWORD)v63 == 0;
      goto LABEL_201;
    }
    *(_QWORD *)&v65 = v63 - 0x2000000000000;
    if (v63 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v63 & 0xFFFE000000000002) != 0)
      {
        v66 = v63 == 7;
        goto LABEL_109;
      }
      v84 = *(unsigned __int8 *)(v63 + 5);
      if (v84 == 3)
      {
        v87 = *(_DWORD *)(v63 + 8);
      }
      else
      {
        if (v84 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_195:
            v66 = 1;
            goto LABEL_109;
          }
          v83 = *(_QWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_201;
        }
        v85 = *(_QWORD *)(v63 + 8);
        if ((v85 & 1) != 0)
          v86 = (int *)(v63 + 16);
        else
          v86 = (int *)(v85 + 4);
        v87 = *v86;
      }
      v83 = v87 == 0;
LABEL_201:
      v66 = !v83;
      goto LABEL_109;
    }
    if (v65 > 0.0)
      goto LABEL_195;
    v66 = v65 < 0.0;
LABEL_109:
    v96 = v66;
    if (*((_DWORD *)v64 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v64) & 1) != 0)
      goto LABEL_133;
LABEL_110:
    WTF::AtomStringImpl::addLiteral();
    v67 = (WTF::StringImpl *)v102;
    v69 = JSC::JSObject::get(v14, this, v102);
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v68);
      else
        *(_DWORD *)v67 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_133;
    if (v69 == 10)
    {
      v28 = 1;
      goto LABEL_121;
    }
    v70 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v69 >= 0xFFFE000000000000)
    {
      v88 = (_DWORD)v69 == 0;
      goto LABEL_205;
    }
    *(_QWORD *)&v71 = v69 - 0x2000000000000;
    if (v69 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v69 & 0xFFFE000000000002) != 0)
      {
        v28 = v69 == 7;
        goto LABEL_120;
      }
      v89 = *(unsigned __int8 *)(v69 + 5);
      if (v89 == 3)
      {
        v92 = *(_DWORD *)(v69 + 8);
      }
      else
      {
        if (v89 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_199:
            v28 = 1;
            goto LABEL_120;
          }
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_205;
        }
        v90 = *(_QWORD *)(v69 + 8);
        if ((v90 & 1) != 0)
          v91 = (int *)(v69 + 16);
        else
          v91 = (int *)(v90 + 4);
        v92 = *v91;
      }
      v88 = v92 == 0;
LABEL_205:
      v28 = !v88;
      goto LABEL_120;
    }
    if (v71 > 0.0)
      goto LABEL_199;
    v28 = v71 < 0.0;
LABEL_120:
    if (*((_DWORD *)v70 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v70) & 1) != 0)
      goto LABEL_133;
LABEL_121:
    WTF::AtomStringImpl::addLiteral();
    v72 = (WTF::StringImpl *)v102;
    v74 = JSC::JSObject::get(v14, this, v102);
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v73);
      else
        *(_DWORD *)v72 -= 2;
    }
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      goto LABEL_133;
    v29 = v96 | 0x100;
    if (v74 != 10)
      break;
    v23 = v97;
    v14 = v98;
    v22 = v95;
    v16 = v93;
    v15 = v94;
LABEL_26:
    v30 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v30 += 2;
LABEL_28:
    LOWORD(v115) = v28 | 0x100;
    LOWORD(v25) = v25 | (unsigned __int16)(v15 << 8);
    WORD1(v115) = v25;
    BYTE4(v115) = v24;
    HIWORD(v115) = v27 | (unsigned __int16)(v16 << 8);
    v116 = v26;
    *(_WORD *)v118 = v29;
    *(_WORD *)&v118[2] = v23;
    v118[4] = v22;
    v118[6] = 1;
    v119 = 0;
    if (!v111)
    {
      v3 = *(JSC::VM **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
      v31 = v110;
      v110 = 0;
      v106 = v31;
      v102 = (unint64_t)v115;
      LOBYTE(v103) = v116;
      v117 = 0;
      v104 = v30;
      v105[0] = *(_DWORD *)v118;
      *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)&v118[3];
      WebCore::RTCPeerConnection::createDataChannel(v100, (uint64_t *)&v106, (uint64_t)&v102, (uint64_t)v107);
      if (!v109)
      {
        v32 = *(WebCore::RTCDataChannel **)v107;
        *(_QWORD *)v107 = 0;
        v34 = WebCore::wrap<WebCore::RTCDataChannel>((int)this, v3, (uint64_t)v32);
        if (*((_DWORD *)v32 + 6) == 1)
        {
          WebCore::RTCDataChannel::~RTCDataChannel(v32, v33);
          bmalloc::api::isoDeallocate(v44, v45);
        }
        else
        {
          --*((_DWORD *)v32 + 6);
        }
LABEL_32:
        if (v109 != -1)
          ((void (*)(_BYTE *, int *))off_1E32D4738[v109])(v112, v107);
        v109 = -1;
        v35 = v104;
        v104 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v33);
          else
            *(_DWORD *)v35 -= 2;
        }
        v36 = v106;
        v106 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v33);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = 0;
        goto LABEL_41;
      }
      if (v109 == 1)
      {
        v33 = (void *)LOBYTE(v107[0]);
        v112[0] = v107[0];
        v77 = v108;
        v108 = 0;
        v113 = v77;
        if (!*((_QWORD *)v99 + 2))
        {
          v78.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v107[0]), (JSC::JSGlobalObject *)&v113);
          JSC::VM::throwException(v99, this, v78);
          v77 = v113;
        }
        v113 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, (WTF::StringImpl *)v33);
          else
            *(_DWORD *)v77 -= 2;
        }
        v34 = 0;
        goto LABEL_32;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    LOWORD(v43) = 0;
LABEL_74:
    v94 = v43;
    v24 = 1;
  }
  WebCore::valueToUSVString(this, v74, (uint64_t)&v102);
  if (!v103)
  {
    v30 = (WTF::StringImpl *)v102;
    v23 = v97;
    v14 = v98;
    v22 = v95;
    v16 = v93;
    v15 = v94;
    goto LABEL_28;
  }
  v119 = 1;
  if (v103 != -1)
    ((void (*)(_BYTE *, unint64_t *))off_1E32D2D10[v103])(v112, &v102);
  v34 = 0;
  v37 = 1;
LABEL_41:
  ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32D4748[v37])(&v102, &v115);
  v17 = v111;
LABEL_42:
  if (v17 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E32D2D10[v17])(v114, &v110);
  return (_BYTE *)v34;
}

unint64_t WebCore::jsRTCPeerConnectionPrototypeFunction_getStats(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  char **v29;
  BOOL v30;
  uint64_t v32;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  WebCore::ActiveDOMCallback *v36;
  WebCore::DOMGuardedObject *v37;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E47E2CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v36 = v15;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSRTCPeerConnection::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSRTCPeerConnection::s_info && v21 != 0);
    }
    if (v20)
    {
      v24 = *(_QWORD *)(v18 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        v26 = 0;
      }
      else
      {
        v25 = *((_QWORD *)a2 + 6);
        if ((v25 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v26 = 0;
        }
        else
        {
          v37 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
          if ((v25 & 0xFFFE000000000002) != 0)
            goto LABEL_40;
          v27 = *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C);
          v28 = *(_DWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C) != 0;
          v29 = (char **)(16 * v27);
          if ((_DWORD)v27)
            v30 = v29 == &WebCore::JSMediaStreamTrack::s_info;
          else
            v30 = 1;
          if (!v30)
          {
            do
            {
              v29 = (char **)v29[2];
              v28 = v29 != 0;
            }
            while (v29 != &WebCore::JSMediaStreamTrack::s_info && v29 != 0);
          }
          if (!v28)
          {
LABEL_40:
            WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v37, 0, "selector", 9, "RTCPeerConnection", 18, v17, "getStats", 9, "MediaStreamTrack", 17);
            goto LABEL_43;
          }
          v26 = *(_QWORD *)(v25 + 24) - 32;
        }
      }
      WebCore::RTCPeerConnection::getStats(v24, v26, &v36);
LABEL_43:
      v14 = v36;
      v36 = 0;
      if (!v14)
        goto LABEL_46;
      goto LABEL_44;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCPeerConnection", "getStats", v16);
  v36 = 0;
LABEL_44:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_46:
  v32 = *(_QWORD *)(v10 + 16);
  if (v32)
  {
    if (*(_QWORD *)(v10 + 24) != v32)
    {
      v34 = *(objc_class **)(v32 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v37);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v37, v34, 0);
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30RTCLocalSessionDescriptionInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25RTCSessionDescriptionInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINS8_15RTCIceCandidateENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::RTCIceCandidate *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINS8_15RTCIceCandidateENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *result;
  bmalloc::api *v3;
  void *v4;

  result = *(WebCore::RTCIceCandidate **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(result, a2);
      return (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINS8_15RTCIceCandidateENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  v5 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a2 + 24) = v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINS8_15RTCIceCandidateENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINS9_15RTCIceCandidateENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEEEEENS9_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32D4698[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN7WebCore19RTCIceCandidateInitEN3WTF6RefPtrINSA_15RTCIceCandidateENSC_12RawPtrTraitsISE_EENSC_21DefaultRefDerefTraitsISE_EEEEEEEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSL_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E32D4698[v3])(&v5, a2);
    *(_DWORD *)(a2 + 32) = -1;
  }
  return result;
}

uint64_t WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::MediaStream>>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, WTF **a4@<X8>)
{
  unint64_t v5;
  unsigned int v6;
  WTF *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  JSC::VM *v11;
  unint64_t v12;

  v11 = *(JSC::VM **)(result + 56);
  v12 = a3;
  v5 = *(int *)(a2 + 32) - 1;
  v6 = v5 - a3;
  if (v5 <= a3)
  {
    *a4 = 0;
  }
  else
  {
    v10[0] = result;
    v10[1] = a2;
    v10[2] = &v12;
    v10[3] = &v11;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * (v5 - a3) + 8));
    if (*WTF::TrailingArray<WTF::EmbeddedFixedVector<std::reference_wrapper<WebCore::MediaStream>>,std::reference_wrapper<WebCore::MediaStream>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLInterface<WebCore::MediaStream>>::Item> WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::MediaStream>>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>((unsigned int *)v7, v6, (uint64_t)v10) != v6)
    {
      WTF::fastFree(v7, v8);
      v7 = 0;
    }
    result = (uint64_t)v11;
    if (*((_DWORD *)v11 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v11), (result & 1) != 0))
    {
      *a4 = 0;
      if (v7)
        return WTF::fastFree(v7, v9);
    }
    else
    {
      *a4 = v7;
    }
  }
  return result;
}

unsigned int *WTF::TrailingArray<WTF::EmbeddedFixedVector<std::reference_wrapper<WebCore::MediaStream>>,std::reference_wrapper<WebCore::MediaStream>>::TrailingArray<WTF::FixedVector<WebCore::VariadicConverter<WebCore::IDLInterface<WebCore::MediaStream>>::Item> WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::MediaStream>>(JSC::JSGlobalObject &,JSC::CallFrame &,unsigned long)::{lambda(unsigned long)#1}>(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  JSC::VM *v14;
  JSC::VM *v15;

  *a1 = a2;
  if (a2)
  {
    v5 = 0;
    v6 = a2;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a3 + 8)
                     + ((uint64_t)(((unint64_t)(**(_DWORD **)(a3 + 16) + v5) << 32) + 0x600000000) >> 29));
      if ((v7 & 0xFFFE000000000002) != 0)
        break;
      v8 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
      v9 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
      v10 = (char **)(16 * v8);
      if ((_DWORD)v8)
        v11 = v10 == &WebCore::JSMediaStream::s_info;
      else
        v11 = 1;
      if (!v11)
      {
        do
        {
          v10 = (char **)v10[2];
          v9 = v10 != 0;
        }
        while (v10 != &WebCore::JSMediaStream::s_info && v10 != 0);
      }
      if (!v9)
        break;
      v13 = *(_QWORD *)(v7 + 24);
      if (!v13)
        break;
      v14 = **(JSC::VM ***)(a3 + 24);
      if (*((_DWORD *)v14 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
          goto LABEL_22;
        v6 = *a1;
      }
      *(_QWORD *)&a1[2 * v5++ + 2] = v13;
      if (v5 >= v6)
        return a1;
    }
    JSC::throwTypeError();
    v15 = **(JSC::VM ***)(a3 + 24);
    if (*((_DWORD *)v15 + 20))
      JSC::VM::hasExceptionsAfterHandlingTraps(v15);
LABEL_22:
    *a1 = v5;
  }
  return a1;
}

WebCore::RTCRtpSender *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12RTCRtpSenderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::RTCRtpSender *result;
  bmalloc::api *v3;
  void *v4;

  result = *(WebCore::RTCRtpSender **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(result, a2);
      return (WebCore::RTCRtpSender *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore12RTCRtpSenderENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16MediaStreamTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16MediaStreamTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16MediaStreamTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16MediaStreamTrackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WebCore::RTCRtpTransceiver *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17RTCRtpTransceiverENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::RTCRtpTransceiver **a2)
{
  WebCore::RTCRtpTransceiver *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(result, a2);
      return (WebCore::RTCRtpTransceiver *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore17RTCRtpTransceiverENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21RTCRtpTransceiverInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WebCore::MediaStream **v9;
  uint64_t v10;
  WebCore::MediaStream *v11;
  bmalloc::api *v12;
  void *v13;
  WTF *result;

  v3 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)(a2 + 24);
    v5 = 72 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 9;
      v5 -= 72;
    }
    while (v5);
  }
  v7 = *(WTF **)(a2 + 24);
  if (v7)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v7, (void *)a2);
  }
  v8 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v8)
  {
    v9 = *(WebCore::MediaStream ***)(a2 + 8);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v11);
          bmalloc::api::isoDeallocate(v12, v13);
        }
        else
        {
          --*((_DWORD *)v11 + 22);
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore16MediaStreamTrackENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENS9_6StringEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E32D46E8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

WebCore::RTCDataChannel *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14RTCDataChannelENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::RTCDataChannel **a2)
{
  WebCore::RTCDataChannel *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(result, a2);
      return (WebCore::RTCDataChannel *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14RTCDataChannelENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18RTCDataChannelInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore30RTCPeerConnectionIceErrorEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::RTCIceCandidate *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25RTCPeerConnectionIceEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::RTCIceCandidate *result;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = (WebCore::RTCIceCandidate *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(result, a2);
      return (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSProcessingInstruction::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSProcessingInstruction::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSProcessingInstruction *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSProcessingInstruction *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSProcessingInstruction::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>::create(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  unint64_t v5;

  v5 = JSC::allocateCell<WebCore::JSDOMConstructor<WebCore::JSBlob>>(a1);
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>::initializeProperties(v5, a1, a3);
  return v5;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSPromiseRejectionEvent>::createStructure(uint64_t *a1, int a2, JSC::JSCell *a3)
{
  uint64_t result;

  result = JSC::Structure::create(a1, a2, a3);
  *(_DWORD *)(result + 16) |= 0x80000u;
  return result;
}

uint64_t WebCore::JSPublicKeyCredential::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

WTF *WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PublicKeyCredentialDescriptor>>>::convert(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3)
{
  uint64_t v6;
  JSValue v7;
  int i;
  unsigned int v9;
  JSC::JSCell *IndexQuickly;
  uint64_t v11;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;
  WTF *result;
  void *v17;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  char v26;

  v24 = 0;
  v25 = 0;
  v6 = *((_QWORD *)a2 + 7);
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v9 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a3 + 8) - 8) : 0;
      if (i - 1 >= v9)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a3, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a3, a2, (i - 1));
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::PublicKeyCredentialDescriptor>>::convert((JSC::VM **)a2, IndexQuickly, (unsigned int *)&v24);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        goto LABEL_27;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a2, (JSC::JSGlobalObject *)a3, v7);
    if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
    {
      while (1)
      {
        v11 = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || v11 == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::PublicKeyCredentialDescriptor>>::convert((JSC::VM **)a2, v13, (unsigned int *)&v24);
        if (*(_QWORD *)(v6 + 16))
        {
LABEL_27:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (!*(_DWORD *)(v6 + 80))
  {
    result = v24;
LABEL_30:
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v25;
    *(_DWORD *)(a1 + 16) = 0;
    return result;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
  result = v24;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_30;
  v19 = HIDWORD(v25);
  *(_DWORD *)(a1 + 16) = 1;
  if ((_DWORD)v19)
  {
    v20 = 40 * v19;
    v21 = (unsigned int *)((char *)result + 16);
    do
    {
      v22 = (WTF *)*((_QWORD *)v21 + 1);
      if (v22)
      {
        *((_QWORD *)v21 + 1) = 0;
        v21[4] = 0;
        WTF::fastFree(v22, v17);
      }
      v23 = *v21;
      if ((_DWORD)v23 != -1)
        ((void (*)(char *, unsigned int *))off_1E32D2C80[v23])(&v26, v21 - 2);
      *v21 = -1;
      v21 += 10;
      v20 -= 40;
    }
    while (v20);
    result = v24;
  }
  if (result)
    return (WTF *)WTF::fastFree(result, v17);
  return result;
}

WTF *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::PublicKeyCredentialDescriptor>>::convert(JSC::VM **a1, JSC::JSCell *this, unsigned int *a3)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  JSC::JSArrayBufferView *v8;
  WTF::StringImpl *v9;
  WTF *result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  WTF *v31;
  JSC::ArrayBufferView *v32;
  int v33;
  uint64_t (*v34)();
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSC::VM *v38;
  JSValue v39;
  unsigned int i;
  unsigned int v41;
  unint64_t IndexQuickly;
  JSC::ArrayBufferView *v43;
  unsigned __int16 v44;
  int v45;
  char *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unint64_t v50;
  JSC::ArrayBufferView *v51;
  unsigned __int16 v52;
  int v53;
  char *v54;
  unsigned __int16 v55;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v57;
  unint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  unsigned __int16 v67;
  int v68;
  uint64_t v69;
  int v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  int v74;
  WTF *v75;
  uint64_t v76;
  int v77;
  JSC::ArrayBufferView *v78;
  int v79;
  char v80[8];
  uint64_t v81;
  int v82;
  WTF *v83;
  uint64_t v84;
  JSC::VM *v85;
  JSC::VM *v86;
  char v87[8];
  JSC::ArrayBufferView *v88;
  int v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v85 = a1[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    v11 = 1;
    v77 = 1;
    return (WTF *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E32D48E0[v11])(v80, &v72);
  }
  v6 = (JSC::Structure *)Object;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v72);
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, v7);
    else
      *(_DWORD *)v72 -= 2;
  }
  if (*((_DWORD *)v85 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v85))
    goto LABEL_11;
  if (v8 == (JSC::JSArrayBufferView *)10)
  {
LABEL_10:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v85, "id", 3, "PublicKeyCredentialDescriptor", 30, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_11:
    v77 = 1;
    goto LABEL_12;
  }
  v72 = a1[7];
  v32 = (JSC::ArrayBufferView *)JSC::JSArrayBuffer::toWrapped((uint64_t)v72, (uint64_t)v8);
  if (v32)
  {
    *(_DWORD *)v32 += 2;
    v88 = v32;
    v33 = 1;
    v89 = 1;
    goto LABEL_38;
  }
  JSC::JSArrayBufferView::toWrapped(v8, &v78);
  if (v78)
  {
    v33 = 0;
    v88 = v78;
    v89 = 0;
LABEL_38:
    v90 = 0;
    LOBYTE(v78) = 0;
    v79 = -1;
    v34 = off_1E32D2C90[v33];
    ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **, JSC::ArrayBufferView **))v34)(&v72, &v78, &v88);
    v79 = v33;
    LOBYTE(v72) = 0;
    LODWORD(v73) = -1;
    ((void (*)(JSC::VM **, WTF::StringImpl **, JSC::ArrayBufferView **))v34)(&v86, &v72, &v78);
    LODWORD(v73) = v33;
    v86 = (JSC::VM *)&v81;
    ((void (*)(JSC::VM **, uint64_t *, WTF::StringImpl **))off_1E32D2CA0[v33])(&v86, &v81, &v72);
    if ((_DWORD)v73 != -1)
      ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32D2C80[v73])(&v86, &v72);
    LODWORD(v73) = -1;
    if (v79 != -1)
      ((void (*)(JSC::VM **, JSC::ArrayBufferView **))off_1E32D2C80[v79])(&v86, &v78);
    WTF::AtomStringImpl::addLiteral();
    v35 = v72;
    v37 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v72);
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v36);
      else
        *(_DWORD *)v35 -= 2;
    }
    if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
      goto LABEL_111;
    if (v37 != 10)
    {
      v38 = a1[7];
      v86 = v38;
      if ((v37 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v37 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v47 = v72;
        v72 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v9);
          else
            *(_DWORD *)v47 -= 2;
        }
        goto LABEL_111;
      }
      v72 = 0;
      v73 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v41 = (*(_BYTE *)(v37 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v37 + 8) - 8) : 0;
          if (i - 1 >= v41)
            break;
          IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v37, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = JSC::JSObject::get((JSC::JSObject *)v37, (JSC::JSGlobalObject *)a1, i - 1);
          if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
            break;
          v78 = a1[7];
          v43 = v78;
          v44 = WebCore::parseEnumeration<WebCore::AuthenticatorTransport>((JSC::JSGlobalObject *)a1, IndexQuickly);
          if (!*((_DWORD *)v43 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) == 0)
          {
            if (v44 <= 0xFFu)
            {
              JSC::throwTypeError();
            }
            else
            {
              LOBYTE(v78) = v44;
              v45 = HIDWORD(v73);
              if (HIDWORD(v73) == (_DWORD)v73)
              {
                v46 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v72, (WTF *)(HIDWORD(v73) + 1), (unint64_t)&v78);
                v45 = HIDWORD(v73);
                *((_BYTE *)v72 + HIDWORD(v73)) = *v46;
              }
              else
              {
                *((_BYTE *)v72 + HIDWORD(v73)) = v44;
              }
              HIDWORD(v73) = v45 + 1;
            }
          }
          if (*((_QWORD *)v38 + 2))
          {
            v57 = JSC::JSArrayIterator::create();
            if ((i & 0x80000000) != 0)
              v58 = COERCE__INT64((double)i) + 0x2000000000000;
            else
              v58 = i | 0xFFFE000000000000;
            *(_QWORD *)(v57 + 16) = v58;
            goto LABEL_100;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable((JSC *)a1, (JSC::JSGlobalObject *)v37, v39);
        if (!*((_DWORD *)v38 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) == 0)
        {
          while (1)
          {
            v48 = JSC::iteratorStep();
            if (*((_QWORD *)v38 + 2) || v48 == 6)
              break;
            v50 = JSC::iteratorValue();
            if (*((_DWORD *)v38 + 20))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
                break;
            }
            v78 = a1[7];
            v51 = v78;
            v52 = WebCore::parseEnumeration<WebCore::AuthenticatorTransport>((JSC::JSGlobalObject *)a1, v50);
            if (!*((_DWORD *)v51 + 20)
              || (v55 = v52,
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v51),
                  v52 = v55,
                  (hasExceptionsAfterHandlingTraps & 1) == 0))
            {
              if (v52 <= 0xFFu)
              {
                JSC::throwTypeError();
              }
              else
              {
                LOBYTE(v78) = v52;
                v53 = HIDWORD(v73);
                if (HIDWORD(v73) == (_DWORD)v73)
                {
                  v54 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v72, (WTF *)(HIDWORD(v73) + 1), (unint64_t)&v78);
                  v53 = HIDWORD(v73);
                  *((_BYTE *)v72 + HIDWORD(v73)) = *v54;
                }
                else
                {
                  *((_BYTE *)v72 + HIDWORD(v73)) = v52;
                }
                HIDWORD(v73) = v53 + 1;
              }
            }
            if (*((_QWORD *)v38 + 2))
            {
LABEL_100:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
      {
        v71 = v72;
        if (v72)
        {
          v72 = 0;
          LODWORD(v73) = 0;
          WTF::fastFree(v71, v9);
        }
        goto LABEL_111;
      }
      v59 = v72;
      v60 = v73;
      v61 = v83;
      if (v83)
      {
        v83 = 0;
        LODWORD(v84) = 0;
        WTF::fastFree(v61, v9);
      }
      v83 = v59;
      v84 = v60;
    }
    WTF::AtomStringImpl::addLiteral();
    v62 = v72;
    v64 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v72);
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v63);
      else
        *(_DWORD *)v62 -= 2;
    }
    if (!*((_DWORD *)v85 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) == 0)
    {
      if (v64 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a1, (int)&v85, "type", 5, "PublicKeyCredentialDescriptor", 30, "PublicKeyCredentialType", 24);
      }
      else
      {
        v72 = a1[7];
        v66 = v72;
        v67 = WebCore::parseEnumeration<WebCore::PublicKeyCredentialType>((JSC::JSGlobalObject *)a1, v64);
        if (!*((_DWORD *)v66 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v66) & 1) == 0)
        {
          if (v67 > 0xFFu)
          {
            v80[0] = v67 != 0;
            LOBYTE(v72) = v80[0];
            LOBYTE(v73) = 0;
            v74 = -1;
            v68 = v82;
            if (v82 != -1)
            {
              ((void (*)(JSC::ArrayBufferView **, uint64_t *, uint64_t *))off_1E32D2C90[v82])(&v78, &v73, &v81);
              v74 = v68;
            }
            v65 = 0;
            v75 = v83;
            v69 = v84;
            v83 = 0;
            v84 = 0;
            v76 = v69;
LABEL_117:
            v77 = v65;
            v70 = v90;
            if (v90 == -1)
              goto LABEL_12;
            goto LABEL_118;
          }
          JSC::throwTypeError();
        }
      }
    }
LABEL_111:
    v65 = 1;
    goto LABEL_117;
  }
  JSC::throwTypeError();
  v70 = 1;
  v90 = 1;
  v77 = 1;
LABEL_118:
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E32D2D00[v70])(&v78, &v88);
LABEL_12:
  result = v83;
  if (v83)
  {
    v83 = 0;
    LODWORD(v84) = 0;
    result = (WTF *)WTF::fastFree(result, v9);
  }
  if (v82 != -1)
    result = (WTF *)((uint64_t (*)(char *, uint64_t *))off_1E32D2C80[v82])(v87, &v81);
  v11 = v77;
  if (!v77)
  {
    v80[0] = (char)v72;
    LOBYTE(v81) = 0;
    v82 = -1;
    v12 = v74;
    if (v74 != -1)
    {
      ((void (*)(char *, uint64_t *, uint64_t *))off_1E32D2C90[v74])(v87, &v81, &v73);
      v82 = v12;
    }
    v83 = v75;
    v13 = v76;
    v75 = 0;
    v76 = 0;
    v84 = v13;
    v14 = a3[3];
    if ((_DWORD)v14 == a3[2])
    {
      v15 = WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v14 + 1, (unint64_t)v80);
      v16 = v15;
      v17 = a3[3];
      v18 = *(_QWORD *)a3;
      v19 = *(_QWORD *)a3 + 40 * v17;
      v20 = *(_BYTE *)v15;
      *(_BYTE *)(v19 + 8) = 0;
      v21 = (void *)(v19 + 8);
      *(_BYTE *)v19 = v20;
      *(_DWORD *)(v19 + 16) = -1;
      v22 = (_DWORD *)(v19 + 16);
      v23 = *(unsigned int *)(v15 + 16);
      if ((_DWORD)v23 != -1)
      {
        ((void (*)(char *, void *, unint64_t))off_1E32D2C90[v23])(v87, v21, v15 + 8);
        *v22 = v23;
      }
      v24 = v18 + 40 * v17;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      v25 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v24 + 24) = v25;
      LODWORD(v25) = *(_DWORD *)(v16 + 32);
      *(_DWORD *)(v16 + 32) = 0;
      *(_DWORD *)(v24 + 32) = v25;
      v26 = *(_DWORD *)(v16 + 36);
      *(_DWORD *)(v16 + 36) = 0;
    }
    else
    {
      v27 = *(_QWORD *)a3;
      v28 = *(_QWORD *)a3 + 40 * v14;
      *(_BYTE *)v28 = v80[0];
      *(_BYTE *)(v28 + 8) = 0;
      v21 = (void *)(v28 + 8);
      *(_DWORD *)(v28 + 16) = -1;
      v29 = (int *)(v28 + 16);
      v30 = v82;
      if (v82 != -1)
      {
        ((void (*)(char *, void *, uint64_t *))off_1E32D2C90[v82])(v87, v21, &v81);
        *v29 = v30;
      }
      v24 = v27 + 40 * v14;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0;
      v31 = v83;
      v83 = 0;
      *(_QWORD *)(v24 + 24) = v31;
      LODWORD(v31) = v84;
      LODWORD(v84) = 0;
      *(_DWORD *)(v24 + 32) = (_DWORD)v31;
      v26 = HIDWORD(v84);
      HIDWORD(v84) = 0;
    }
    *(_DWORD *)(v24 + 36) = v26;
    ++a3[3];
    result = v83;
    if (v83)
    {
      v83 = 0;
      LODWORD(v84) = 0;
      result = (WTF *)WTF::fastFree(result, v21);
    }
    if (v82 != -1)
      result = (WTF *)((uint64_t (*)(char *, uint64_t *))off_1E32D2C80[v82])(v87, &v81);
    v11 = v77;
  }
  if (v11 != -1)
    return (WTF *)((uint64_t (*)(char *, WTF::StringImpl **))off_1E32D48E0[v11])(v80, &v72);
  return result;
}

unint64_t WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::PublicKeyCredentialDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  char v17;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      v15 = v2;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 0;
        v9 = 40 * v4;
        do
        {
          v10 = (char *)v3 + v8;
          v11 = &v7[v8 / 4];
          *(_BYTE *)v11 = *((_BYTE *)v3 + v8);
          LOBYTE(v7[v8 / 4 + 2]) = 0;
          v6 = &v7[v8 / 4 + 2];
          v11[4] = -1;
          v12 = *(unsigned int *)((char *)v3 + v8 + 16);
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, unsigned int *, char *))off_1E32D2C90[v12])(&v16, v6, v10 + 8);
            v11[4] = v12;
          }
          *((_QWORD *)v11 + 3) = 0;
          *((_QWORD *)v11 + 4) = 0;
          v13 = *((_QWORD *)v10 + 3);
          *((_QWORD *)v10 + 3) = 0;
          *((_QWORD *)v11 + 3) = v13;
          LODWORD(v13) = *((_DWORD *)v10 + 8);
          *((_DWORD *)v10 + 8) = 0;
          v11[8] = v13;
          LODWORD(v13) = *((_DWORD *)v10 + 9);
          *((_DWORD *)v10 + 9) = 0;
          v11[9] = v13;
          result = (unsigned int *)*((_QWORD *)v10 + 3);
          if (result)
          {
            *((_QWORD *)v10 + 3) = 0;
            *((_DWORD *)v10 + 8) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v14 = *((unsigned int *)v10 + 4);
          if ((_DWORD)v14 != -1)
            result = (unsigned int *)((uint64_t (*)(char *, char *))off_1E32D2C80[v14])(&v17, (char *)v3 + v8 + 8);
          *((_DWORD *)v10 + 4) = -1;
          v8 += 40;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v15 == v3)
        {
          *(_QWORD *)v15 = 0;
          v15[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore29PublicKeyCredentialDescriptorENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *result;
  uint64_t v4;
  char v5;

  result = *(WTF **)(a2 + 24);
  if (result)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)a2);
  }
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = (WTF *)((uint64_t (*)(char *, uint64_t))off_1E32D2C80[v4])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::JSPushManager::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushMessageData::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushSubscription::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSPushSubscriptionOptions::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WebCore::RTCCertificate::~RTCCertificate(WebCore::RTCCertificate *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 9);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v10 = (WTF *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)this + 1, a2);
}

uint64_t *WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(WTF::StringImpl **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(WTF::StringImpl **)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(unsigned int *)(v3 + 32);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v9])(&v10, v3 + 8);
      *(_DWORD *)(v3 + 32) = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WebCore::JSRTCCertificate::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  char v11;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 48 * v3;
    do
    {
      v6 = (WTF::StringImpl *)*((_QWORD *)v4 + 4);
      *((_QWORD *)v4 + 4) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((unsigned int *)v4 + 4);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, WTF *))off_1E32D3E60[v8])(&v11, v4);
      *((_DWORD *)v4 + 4) = -1;
      v4 = (WTF *)((char *)v4 + 48);
      v5 -= 48;
    }
    while (v5);
  }
  v9 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

WebCore::RTCCertificate **WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::RTCCertificate>>::convert(WebCore::RTCCertificate **result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  WebCore::RTCCertificate *v9;
  uint64_t v10;
  char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WebCore::RTCCertificate *v18;

  v18 = result[7];
  if ((a2 & 0xFFFE000000000002) != 0)
    return (WebCore::RTCCertificate **)JSC::throwTypeError();
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRTCCertificate::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRTCCertificate::s_info && v6 != 0);
  }
  if (!v5)
    return (WebCore::RTCCertificate **)JSC::throwTypeError();
  v9 = *(WebCore::RTCCertificate **)(a2 + 24);
  if (!v9)
    return (WebCore::RTCCertificate **)JSC::throwTypeError();
  ++*(_DWORD *)v9;
  v18 = v9;
  v10 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a3 + 8))
  {
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v10 + 1, (unint64_t)&v18);
    v13 = *(unsigned int *)(a3 + 12);
    v14 = *(char **)a3;
    v15 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v14[8 * v13] = v15;
    result = (WebCore::RTCCertificate **)v18;
    *(_DWORD *)(a3 + 12) = v13 + 1;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::RTCCertificate::~RTCCertificate((WebCore::RTCCertificate *)result, v12);
        return (WebCore::RTCCertificate **)WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v10) = v9;
    *(_DWORD *)(a3 + 12) = v10 + 1;
  }
  return result;
}

WTF::StringImpl *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCIceServer>>::convert(JSC::VM **a1, JSC::JSCell *this, uint64_t a3)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const char *v17;
  int v18;
  unint64_t v20;
  int v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::JSObject *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  int v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;
  __int128 v59;
  char hasExceptionsAfterHandlingTraps;
  int v61;
  int v62;
  _QWORD v63[2];
  int v64;
  WTF::StringImpl *v65[2];
  int v66;
  JSC::VM *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  char v70[8];
  int v71;
  int v72;
  __int128 v73;
  int v74;
  int v75;
  WTF::StringImpl *v76;
  _DWORD v77[4];
  unsigned int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v67 = a1[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v63[0] = 0;
    v64 = 0;
    v65[0] = 0;
    v65[1] = 0;
    v66 = 0;
LABEL_75:
    WebCore::throwRequiredMemberTypeError((int)a1, (int)&v67, "urls", 5, "RTCIceServer", 13, "(DOMString or sequence)", 24);
LABEL_76:
    v75 = 1;
    goto LABEL_77;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    JSC::throwTypeError();
    v21 = 1;
    v75 = 1;
    return (WTF::StringImpl *)((uint64_t (*)(_QWORD *, char *))off_1E32D4900[v21])(v63, v70);
  }
  v6 = (JSC::Structure *)Object;
  v63[0] = 0;
  v64 = 0;
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v69);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v7);
    else
      *(_DWORD *)v69 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67))
    goto LABEL_76;
  if (v8 != 10)
  {
    v69 = (WTF::StringImpl *)v8;
    v9 = a1[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v69, (JSC::JSGlobalObject *)a1);
LABEL_16:
      if (!*((_DWORD *)v9 + 20))
      {
        v11 = v68;
LABEL_18:
        v77[0] = 0;
        goto LABEL_19;
      }
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
      v11 = v68;
      if ((hasExceptionsAfterHandlingTraps & 1) == 0)
        goto LABEL_18;
      v61 = 1;
      v77[0] = 1;
      v68 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v7);
          v61 = v77[0];
          if (!v77[0])
          {
            v11 = v76;
LABEL_19:
            v76 = 0;
            v12 = v65[1];
            v65[1] = v11;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
              {
                WTF::StringImpl::destroy(v12, v7);
                if (v77[0] != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2D10[v77[0]])(&v68, &v76);
              }
              else
              {
                *(_DWORD *)v12 -= 2;
              }
            }
            goto LABEL_22;
          }
          v75 = 1;
          if (v77[0] == -1)
            goto LABEL_77;
LABEL_158:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D2D10[v61])(&v68, &v76);
          goto LABEL_77;
        }
        *(_DWORD *)v11 -= 2;
      }
      v75 = 1;
      goto LABEL_158;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a1);
      if (!v10)
        goto LABEL_15;
    }
    else if (!v10)
    {
LABEL_15:
      v68 = v10;
      goto LABEL_16;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_15;
  }
LABEL_22:
  WTF::AtomStringImpl::addLiteral();
  v13 = v69;
  v14 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v69);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v7);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67))
    goto LABEL_76;
  if (v14 == 10)
  {
    v66 = 0;
    goto LABEL_70;
  }
  v15 = a1[7];
  v68 = v15;
  v69 = (WTF::StringImpl *)v14;
  if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v69, (JSC::JSGlobalObject *)a1);
    v16 = v76;
    if (v76)
      goto LABEL_34;
    goto LABEL_57;
  }
  v16 = *(WTF::StringImpl **)(v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (!v16)
      goto LABEL_33;
    goto LABEL_32;
  }
  v16 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v14, (JSC::JSGlobalObject *)a1);
  if (v16)
LABEL_32:
    *(_DWORD *)v16 += 2;
LABEL_33:
  v76 = v16;
  if (v16)
  {
LABEL_34:
    v17 = (const char *)*((_QWORD *)v16 + 1);
    v18 = *((_DWORD *)v16 + 1);
    if (v17 == "password" || v18 != 8)
    {
      if (v18 != 8 || v17 != "password")
        goto LABEL_64;
    }
    else if ((*((_BYTE *)v16 + 16) & 4) != 0)
    {
      if (*v17 != 112 || *(_DWORD *)(v17 + 1) != 2004054881 || *((_DWORD *)v17 + 1) != 1685221239)
      {
LABEL_64:
        v20 = 0;
LABEL_65:
        v76 = 0;
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v7);
        else
          *(_DWORD *)v16 -= 2;
        goto LABEL_67;
      }
    }
    else
    {
      if (*(_WORD *)v17 != 112)
        goto LABEL_64;
      if (*((_QWORD *)v17 + 1) != 0x640072006F0077 || *(_QWORD *)(v17 + 2) != 0x77007300730061)
        goto LABEL_64;
    }
    v20 = 0x100000000;
    goto LABEL_65;
  }
LABEL_57:
  v20 = 0;
LABEL_67:
  if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
    goto LABEL_76;
  if (!HIDWORD(v20))
  {
    JSC::throwTypeError();
    goto LABEL_76;
  }
  v66 = v20;
LABEL_70:
  WTF::AtomStringImpl::addLiteral();
  v23 = v69;
  v26 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v69);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  if (*((_DWORD *)v67 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v67))
    goto LABEL_76;
  if (v26 == 10)
    goto LABEL_75;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLDOMString,WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert((JSC::JSGlobalObject *)a1, v26, v25, (uint64_t)&v76);
  v49 = v79;
  if (!v79)
  {
    LOBYTE(v69) = 0;
    v71 = -1;
    v50 = v78;
    if (v78 == -1)
    {
      if (v64 != -1)
      {
        ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32D3E60[v64])(&v68, v63);
        v64 = -1;
      }
    }
    else
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **, _DWORD *))off_1E32D3E70[v78])(&v68, &v69, v77);
      v71 = v50;
      v68 = (WTF::StringImpl *)v63;
      ((void (*)(WTF::StringImpl **, _QWORD *, WTF::StringImpl **))off_1E32D3E80[v50])(&v68, v63, &v69);
    }
    if (v71 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D3E60[v71])(&v68, &v69);
    WTF::AtomStringImpl::addLiteral();
    v51 = v69;
    v52 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v69);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v7);
      else
        *(_DWORD *)v51 -= 2;
    }
    if (*((_DWORD *)v67 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v67) & 1) != 0)
      goto LABEL_169;
    if (v52 == 10)
      goto LABEL_130;
    v69 = (WTF::StringImpl *)v52;
    v53 = a1[7];
    if ((v52 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v52 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v69, (JSC::JSGlobalObject *)a1);
      goto LABEL_125;
    }
    v54 = *(WTF::StringImpl **)(v52 + 8);
    if ((v54 & 1) != 0)
    {
      v54 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v52, (JSC::JSGlobalObject *)a1);
      if (!v54)
        goto LABEL_124;
    }
    else if (!v54)
    {
LABEL_124:
      v68 = v54;
LABEL_125:
      if (*((_DWORD *)v53 + 20))
      {
        v62 = JSC::VM::hasExceptionsAfterHandlingTraps(v53);
        v55 = v68;
        if (v62)
        {
          v68 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v7);
            else
              *(_DWORD *)v55 -= 2;
          }
LABEL_169:
          v58 = 1;
LABEL_133:
          v75 = v58;
          v49 = v79;
          goto LABEL_134;
        }
      }
      else
      {
        v55 = v68;
      }
      v56 = v65[0];
      v65[0] = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v7);
        else
          *(_DWORD *)v56 -= 2;
      }
LABEL_130:
      v70[0] = 0;
      v72 = -1;
      v57 = v64;
      if (v64 != -1)
      {
        ((void (*)(WTF::StringImpl **, char *, _QWORD *))off_1E32D3E70[v64])(&v68, v70, v63);
        v72 = v57;
      }
      v58 = 0;
      v59 = *(_OWORD *)v65;
      v65[0] = 0;
      v65[1] = 0;
      v73 = v59;
      v74 = v66;
      goto LABEL_133;
    }
    *(_DWORD *)v54 += 2;
    goto LABEL_124;
  }
  v75 = 1;
LABEL_134:
  if (v49 != -1)
    ((void (*)(WTF::StringImpl **, _DWORD *))off_1E32D3E90[v49])(&v68, v77);
LABEL_77:
  v27 = v65[1];
  v65[1] = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v7);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v65[0];
  v65[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  if (v64 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32D3E60[v64])(&v76, v63);
  v21 = v75;
  if (!v75)
  {
    LOBYTE(v63[0]) = 0;
    v64 = -1;
    v29 = v72;
    if (v72 != -1)
    {
      ((void (*)(WTF::StringImpl **, _QWORD *, char *))off_1E32D3E70[v72])(&v76, v63, v70);
      v64 = v29;
    }
    v30 = v73;
    v73 = 0uLL;
    *(_OWORD *)v65 = v30;
    v66 = v74;
    v31 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v31 == *(_DWORD *)(a3 + 8))
    {
      v32 = WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v31 + 1, (unint64_t)v63);
      v33 = *(_DWORD *)(a3 + 12);
      v34 = *(_QWORD *)a3;
      v35 = *(_QWORD *)a3 + 48 * v33;
      *(_BYTE *)v35 = 0;
      *(_DWORD *)(v35 + 16) = -1;
      v36 = *((unsigned int *)v32 + 4);
      if ((_DWORD)v36 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, char *))off_1E32D3E70[v36])(&v76, v35, v32);
        *(_DWORD *)(v35 + 16) = v36;
      }
      v37 = v34 + 48 * v33;
      v38 = *((_QWORD *)v32 + 3);
      *((_QWORD *)v32 + 3) = 0;
      *(_QWORD *)(v37 + 24) = v38;
      v39 = *((_QWORD *)v32 + 4);
      *((_QWORD *)v32 + 4) = 0;
      *(_QWORD *)(v37 + 32) = v39;
      v40 = (int *)(v37 + 40);
      v41 = (int *)(v32 + 40);
    }
    else
    {
      v41 = &v66;
      v42 = *(_QWORD *)a3;
      v43 = *(_QWORD *)a3 + 48 * v31;
      *(_BYTE *)v43 = 0;
      *(_DWORD *)(v43 + 16) = -1;
      v44 = v64;
      if (v64 != -1)
      {
        ((void (*)(WTF::StringImpl **, uint64_t, _QWORD *))off_1E32D3E70[v64])(&v76, v43, v63);
        *(_DWORD *)(v43 + 16) = v44;
      }
      v45 = v42 + 48 * v31;
      v46 = v65[0];
      v65[0] = 0;
      *(_QWORD *)(v45 + 24) = v46;
      v47 = v65[1];
      v65[1] = 0;
      *(_QWORD *)(v45 + 32) = v47;
      v40 = (int *)(v45 + 40);
    }
    *v40 = *v41;
    ++*(_DWORD *)(a3 + 12);
    v48 = v65[1];
    v65[1] = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v7);
      else
        *(_DWORD *)v48 -= 2;
    }
    result = v65[0];
    v65[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
    if (v64 != -1)
      result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, _QWORD *))off_1E32D3E60[v64])(&v76, v63);
    v21 = v75;
  }
  if (v21 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_QWORD *, char *))off_1E32D4900[v21])(v63, v70);
  return result;
}

char *WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF::StringImpl **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x194E4AE84);
      }
      v17 = (WTF::StringImpl *)((char *)v5 + 48 * *(unsigned int *)(a1 + 12));
      v18 = 48 * v16;
      v19 = WTF::fastMalloc((WTF *)(48 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::RTCIceServer>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WTF::StringImpl **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF::StringImpl **)a1;
    }
    else
    {
      if (v9 >= 0x5555556)
      {
        __break(0xC471u);
        JUMPOUT(0x194E4AE8CLL);
      }
      v10 = 48 * v9;
      v11 = WTF::fastMalloc((WTF *)(48 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::RTCIceServer>::move(v5, v6, v11);
      v13 = *(WTF::StringImpl **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF::StringImpl **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::RTCIceServer>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if (result != a2)
  {
    v15 = v3;
    v16 = v4;
    v7 = result;
    do
    {
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 16) = -1;
      v8 = *((unsigned int *)v7 + 4);
      if ((_DWORD)v8 != -1)
      {
        ((void (*)(char *, uint64_t, WTF::StringImpl *))off_1E32D3E70[v8])(&v13, a3, v7);
        *(_DWORD *)(a3 + 16) = v8;
      }
      v9 = *((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v9;
      v10 = *((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v10;
      *(_DWORD *)(a3 + 40) = *((_DWORD *)v7 + 10);
      v11 = (WTF::StringImpl *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      result = (WTF::StringImpl *)*((_QWORD *)v7 + 3);
      *((_QWORD *)v7 + 3) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v12 = *((unsigned int *)v7 + 4);
      if ((_DWORD)v12 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))off_1E32D3E60[v12])(&v14, v7);
      *((_DWORD *)v7 + 4) = -1;
      a3 += 48;
      v7 = (WTF::StringImpl *)((char *)v7 + 48);
    }
    while (v7 != a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12RTCIceServerENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  char v6;

  v3 = *(WTF::StringImpl **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
    result = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E32D3E60[v5])(&v6, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::JSRTCDTMFSender::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDataChannel::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCDtlsTransport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCEncodedAudioFrame::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCEncodedVideoFrame::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCError::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCIceCandidate::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSRTCIceTransport::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_DWORD *WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>@<X0>(uint64_t this@<X1>, uint64_t a2@<X8>)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  int v8;
  _DWORD *v9;

  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 40)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl(this, &v9);
    result = v9;
    if (v9)
    {
      v4 = *((_QWORD *)v9 + 4);
      if (v4
        && (v5 = *(_QWORD *)(v4 + 16)) != 0
        && ((v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v5 & 0x3FFFFFFFFLL) + v6)
        && (*(_QWORD *)(v4 + 32)
          ? (v7 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v7 = 0),
            v7))
      {
        v9 = 0;
      }
      else if ((*((_BYTE *)v9 + 6) & 3) == 0)
      {
        v8 = 0;
        *(_QWORD *)a2 = v9;
        goto LABEL_18;
      }
      if (*result == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*result;
    }
  }
  result = (_DWORD *)JSC::throwTypeError();
  v8 = 1;
LABEL_18:
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  WTF **v12;

  v10 = 0;
  v11 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = &v10;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v12);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v11);
    v8 = v10;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v9 = 72 * v7;
      do
      {
        result = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
          else
            *(_DWORD *)result -= 2;
        }
        v8 = (WTF *)((char *)v8 + 72);
        v9 -= 72;
      }
      while (v9);
      v8 = v10;
    }
    if (v8)
    {
      v10 = 0;
      LODWORD(v11) = 0;
      return WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v11;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSCell *IndexQuickly;
  JSC::JSCell *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>::convert((int)&v16, a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>::convert((int)&v16, a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>::convert(int a1, JSC::JSGlobalObject *a2, JSC::JSCell *this, uint64_t a4)
{
  WTF::StringImpl *result;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  result = WebCore::convertDictionary<WebCore::RTCRtpEncodingParameters>(this, a2, (uint64_t)&v25);
  v6 = v30;
  if (!v30)
  {
    v7 = v25;
    v25 = 0;
    v20 = v7;
    v21 = v26;
    v22 = v27;
    v23 = v28;
    v24 = v29;
    v8 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(a4 + 8))
    {
      v9 = WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v8 + 1, (unint64_t)&v20);
      v11 = *(_QWORD *)a4 + 72 * *(unsigned int *)(a4 + 12);
      v12 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)v11 = v12;
      v13 = *(_OWORD *)(v9 + 8);
      v14 = *(_OWORD *)(v9 + 24);
      v15 = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v11 + 40) = v15;
      *(_OWORD *)(v11 + 24) = v14;
      *(_OWORD *)(v11 + 8) = v13;
      result = v20;
      ++*(_DWORD *)(a4 + 12);
      v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      v16 = *(_QWORD *)a4 + 72 * v8;
      v20 = 0;
      *(_QWORD *)v16 = v7;
      v17 = v21;
      v18 = v22;
      v19 = v23;
      *(_OWORD *)(v16 + 56) = v24;
      *(_OWORD *)(v16 + 40) = v19;
      *(_OWORD *)(v16 + 24) = v18;
      *(_OWORD *)(v16 + 8) = v17;
      ++*(_DWORD *)(a4 + 12);
    }
    v6 = v30;
  }
  if (v6 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32D4920[v6])(&v20, &v25);
  return result;
}

unint64_t WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  WTF::StringImpl *v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0x38E38E4)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(_DWORD *)(result + 12);
    v5 = 72 * a2;
    v6 = WTF::fastMalloc((WTF *)(72 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v2 = v6;
    if (v4)
    {
      v8 = v6;
      v9 = (WTF *)((char *)v3 + 72 * v4);
      v10 = v3;
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)v8 = v11;
        v12 = *(_OWORD *)((char *)v10 + 8);
        v13 = *(_OWORD *)((char *)v10 + 24);
        v14 = *(_OWORD *)((char *)v10 + 40);
        *(_OWORD *)(v8 + 56) = *(_OWORD *)((char *)v10 + 56);
        *(_OWORD *)(v8 + 40) = v14;
        *(_OWORD *)(v8 + 24) = v13;
        *(_OWORD *)(v8 + 8) = v12;
        v15 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v7);
          else
            *(_DWORD *)v15 -= 2;
        }
        v10 = (WTF *)((char *)v10 + 72);
        v8 += 72;
      }
      while (v10 != v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore24RTCRtpEncodingParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStream>>>::convert@<X0>(JSC::JSGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;

  v12 = 0;
  v13 = 0;
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v14 = &v12;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStream>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a1, a2, (uint64_t *)&v14);
  if (*((_DWORD *)v4 + 20) && (result = JSC::VM::hasExceptionsAfterHandlingTraps(v4), (result & 1) != 0))
  {
    v7 = HIDWORD(v13);
    v8 = v12;
    *(_DWORD *)(a3 + 16) = 1;
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        result = *(_QWORD *)v8;
        *(_QWORD *)v8 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 88) == 1)
          {
            WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
            result = bmalloc::api::isoDeallocate(v10, v11);
          }
          else
          {
            --*(_DWORD *)(result + 88);
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
      v8 = v12;
    }
    if (v8)
    {
      v12 = 0;
      LODWORD(v13) = 0;
      return WTF::fastFree(v8, v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStream>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WTF::Ref<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  uint64_t IndexQuickly;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v16 = v6;
      result = (uint64_t)WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStream>>::convert((uint64_t)&v16, (WebCore::MediaStream **)a1, IndexQuickly, *a3);
      if (*(_QWORD *)(v6 + 16))
      {
        v14 = JSC::JSArrayIterator::create();
        v15 = i | 0xFFFE000000000000;
        if (i < 0)
          v15 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v14 + 16) = v15;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v13 = JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v16 = v6;
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStream>>::convert((uint64_t)&v16, (WebCore::MediaStream **)a1, v13, *a3);
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

WebCore::MediaStream *WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLInterface<WebCore::MediaStream>>::convert(uint64_t a1, WebCore::MediaStream **a2, uint64_t a3, uint64_t a4)
{
  WebCore::MediaStream *result;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  WebCore::MediaStream *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  bmalloc::api *v17;
  void *v18;
  WebCore::MediaStream *v19;

  result = (WebCore::MediaStream *)a2;
  v19 = a2[7];
  if ((a3 & 0xFFFE000000000002) != 0)
    return (WebCore::MediaStream *)JSC::throwTypeError();
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSMediaStream::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSMediaStream::s_info && v8 != 0);
  }
  if (!v7)
    return (WebCore::MediaStream *)JSC::throwTypeError();
  v11 = *(WebCore::MediaStream **)(a3 + 24);
  if (!v11)
    return (WebCore::MediaStream *)JSC::throwTypeError();
  ++*((_DWORD *)v11 + 22);
  v19 = v11;
  v12 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a4 + 8))
  {
    v13 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v12 + 1, (unint64_t)&v19);
    v14 = *(unsigned int *)(a4 + 12);
    v15 = *(char **)a4;
    v16 = *(_QWORD *)v13;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)&v15[8 * v14] = v16;
    result = v19;
    *(_DWORD *)(a4 + 12) = v14 + 1;
    v19 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 22) == 1)
      {
        WebCore::MediaStream::~MediaStream(result);
        return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v17, v18);
      }
      else
      {
        --*((_DWORD *)result + 22);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
    *(_DWORD *)(a4 + 12) = v12 + 1;
  }
  return result;
}

uint64_t WebCore::JSRTCPeerConnection::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unsigned int *WebCore::CaptionUserPreferencesMediaAF::createWeakObserver@<X0>(WebCore::CaptionUserPreferencesMediaAF *this@<X0>, _QWORD *a2@<X8>)
{
  WebCaptionUserPreferencesMediaAFWeakObserver *v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  unsigned int *result;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;

  v5 = [WebCaptionUserPreferencesMediaAFWeakObserver alloc];
  v6 = *((_QWORD *)this + 2);
  if (v6)
    goto LABEL_14;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = this;
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;
  if (!v8)
    goto LABEL_14;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
LABEL_14:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v16 = (WTF *)v6;
  *a2 = -[WebCaptionUserPreferencesMediaAFWeakObserver initWithWeakPtr:](v5, "initWithWeakPtr:", &v16);
  result = (unsigned int *)v16;
  v16 = 0;
  if (result)
  {
    do
    {
      v14 = __ldaxr(result);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, result));
    if (!v15)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v12);
    }
  }
  return result;
}

void sub_194E4C66C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  unsigned int v11;
  unsigned int v12;

  if (a10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)a10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)a10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::CaptionUserPreferencesMediaAF::extractCaptionUserPreferencesMediaAF(WebCore::CaptionUserPreferencesMediaAF *this@<X0>, _QWORD *a2@<X8>)
{
  char isKindOfClass;
  uint64_t v6;

  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (this && (isKindOfClass & 1) != 0)
  {
    CFRetain(this);
    v6 = *((_QWORD *)this + 1);
    if (v6)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (v6)
        ++*(_DWORD *)(v6 + 8);
    }
    *a2 = v6;
    CFRelease(this);
  }
  else
  {
    *a2 = 0;
  }
}

void WebCore::EventHandler::selectClosestWordFromHitTestResultBasedOnLookup(WebCore::EventHandler *this@<X0>, const WebCore::HitTestResult *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Document *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  void *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Editor *v11;
  void *v12;
  WebCore::Editor *v13;
  uint64_t v14;
  void *v15;
  const WebCore::HitTestResult *v16;
  WebCore::Node *v17[2];
  WebCore::Node *v18;
  char v19;

  v4 = *(WebCore::Document **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  v5 = *((_QWORD *)v4 + 382);
  if (!v5)
  {
    v16 = a2;
    v11 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v11, v4);
    v13 = (WebCore::Editor *)*((_QWORD *)v4 + 382);
    *((_QWORD *)v4 + 382) = v11;
    if (v13)
    {
      WebCore::Editor::~Editor(v13, v12);
      if (*(_DWORD *)v14)
      {
        *(_QWORD *)(v14 + 496) = 0;
        *(_OWORD *)(v14 + 464) = 0u;
        *(_OWORD *)(v14 + 480) = 0u;
        *(_OWORD *)(v14 + 432) = 0u;
        *(_OWORD *)(v14 + 448) = 0u;
        *(_OWORD *)(v14 + 400) = 0u;
        *(_OWORD *)(v14 + 416) = 0u;
        *(_OWORD *)(v14 + 368) = 0u;
        *(_OWORD *)(v14 + 384) = 0u;
        *(_OWORD *)(v14 + 336) = 0u;
        *(_OWORD *)(v14 + 352) = 0u;
        *(_OWORD *)(v14 + 304) = 0u;
        *(_OWORD *)(v14 + 320) = 0u;
        *(_OWORD *)(v14 + 272) = 0u;
        *(_OWORD *)(v14 + 288) = 0u;
        *(_OWORD *)(v14 + 240) = 0u;
        *(_OWORD *)(v14 + 256) = 0u;
        *(_OWORD *)(v14 + 208) = 0u;
        *(_OWORD *)(v14 + 224) = 0u;
        *(_OWORD *)(v14 + 176) = 0u;
        *(_OWORD *)(v14 + 192) = 0u;
        *(_OWORD *)(v14 + 144) = 0u;
        *(_OWORD *)(v14 + 160) = 0u;
        *(_OWORD *)(v14 + 112) = 0u;
        *(_OWORD *)(v14 + 128) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_OWORD *)v14 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v14, v15);
      }
    }
    v5 = *((_QWORD *)v4 + 382);
    a2 = v16;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 8) + 680) + 370);
  if (v6)
    v7 = v6 == 3;
  else
    v7 = 1;
  if (v7 && (WebCore::DictionaryLookup::rangeAtHitTestResult(a2, (uint64_t)v17), v19))
  {
    WebCore::VisibleSelection::VisibleSelection(a3, (uint64_t)v17, 1, 0);
    if (v19)
    {
      v9 = v18;
      v18 = 0;
      if (v9)
      {
        if (*((_DWORD *)v9 + 6) == 2)
        {
          if ((*((_WORD *)v9 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v9, v8);
        }
        else
        {
          *((_DWORD *)v9 + 6) -= 2;
        }
      }
      v10 = v17[0];
      v17[0] = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 6) == 2)
        {
          if ((*((_WORD *)v10 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v10, v8);
        }
        else
        {
          *((_DWORD *)v10 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) &= 0xF0u;
    *(_QWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 28) &= 0xF0u;
    *(_QWORD *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 44) &= 0xF0u;
    *(_QWORD *)(a3 + 48) = 0;
    *(_DWORD *)(a3 + 56) = 0;
    *(_BYTE *)(a3 + 60) &= 0xF0u;
    *(_QWORD *)(a3 + 64) = 0;
    *(_DWORD *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 76) &= 0xF0u;
    *(_QWORD *)(a3 + 80) = 0;
    *(_DWORD *)(a3 + 88) = 0;
    *(_BYTE *)(a3 + 92) &= 0xF0u;
    *(_WORD *)(a3 + 96) = 1;
    *(_BYTE *)(a3 + 98) = *(_BYTE *)(a3 + 98) & 0xFC | 1;
  }
}

void sub_194E4C928(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebCore::Node *a10, uint64_t a11, WebCore::Node *a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (a12)
    {
      if (*((_DWORD *)a12 + 6) == 2)
      {
        if ((*((_WORD *)a12 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a12, a2);
      }
      else
      {
        *((_DWORD *)a12 + 6) -= 2;
      }
    }
    if (a10)
    {
      if (*((_DWORD *)a10 + 6) == 2)
      {
        if ((*((_WORD *)a10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(a10, a2);
      }
      else
      {
        *((_DWORD *)a10 + 6) -= 2;
      }
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::platformReleaseMemory()
{
  WebCore::LocaleCocoa *v0;
  WTF::StringImpl *v1;
  WebCore::LayerPool *v2;
  uint64_t *v3;
  WebCore::LegacyTileCache *v4;
  WebCore::LayerPool **v5;
  WebCore::LayerPool **v6;
  WebCore::LayerPool **v7;
  uint64_t v8;
  WebCore::LayerPool *v9;
  WebCore *v10;
  uint64_t *v11;
  void *v12;
  unsigned __int8 *v13;
  char v15;

  GSFontInitialize();
  v0 = (WebCore::LocaleCocoa *)GSFontPurgeFontCache();
  v2 = (WebCore::LayerPool *)WebCore::LocaleCocoa::releaseMemory(v0, v1);
  v3 = WebCore::LayerPool::allLayerPools(v2);
  v4 = (WebCore::LegacyTileCache *)WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin((_QWORD **)v3);
  v6 = (WebCore::LayerPool **)v4;
  v7 = v5;
  if (*v3)
    v8 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
  else
    v8 = 0;
  if ((WebCore::LegacyTileCache *)v8 != v4)
  {
    do
    {
      v9 = *v6++;
      v4 = (WebCore::LegacyTileCache *)WebCore::LayerPool::drain(v9);
      while (v6 != v7)
      {
        if ((unint64_t)*v6 + 1 > 1)
          goto LABEL_10;
        ++v6;
      }
      v6 = v7;
LABEL_10:
      ;
    }
    while (v6 != (WebCore::LayerPool **)v8);
  }
  v10 = (WebCore *)WebCore::LegacyTileCache::drainLayerPool(v4, v5);
  v11 = WebCore::tileControllerMemoryHandler(v10);
  WebCore::TileControllerMemoryHandler::trimUnparentedTilesToTarget((uint64_t)v11, 0);
  std::call_once[abi:sn180100]<WebCore::IOSurfacePool::sharedPool(void)::$_0>((uint64_t)&v15);
  v13 = (unsigned __int8 *)WebCore::IOSurfacePool::discardAllSurfaces((WebCore::IOSurfacePool *)&WebCore::IOSurfacePool::sharedPool(void)::pool, v12);
  return WebCore::CGSubimageCacheWithTimer::clear(v13);
}

WTF::StringImpl **WebCore::jettisonExpensiveObjectsOnTopLevelNavigation(WebCore *this)
{
  WTF::StringImpl **result;
  uint64_t v2;
  double v3;
  WTF::StringImpl *v4;
  uint64_t i;
  WTF::StringImpl *v6;
  uint64_t j;
  WTF *v8;
  void *v9;
  uint64_t v10;

  {
    this = (WebCore *)WTF::MonotonicTime::now(this);
    WebCore::jettisonExpensiveObjectsOnTopLevelNavigation(void)::timeOfLastNavigation = v10;
  }
  result = (WTF::StringImpl **)WTF::MonotonicTime::now(this);
  v3 = *(double *)&v2 - *(double *)&WebCore::jettisonExpensiveObjectsOnTopLevelNavigation(void)::timeOfLastNavigation;
  WebCore::jettisonExpensiveObjectsOnTopLevelNavigation(void)::timeOfLastNavigation = v2;
  if (v3 >= 2.0)
  {
    {
      WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
    }
    WebCore::GCController::deleteAllLinkedCode((WTF::RunLoop *)&WebCore::GCController::singleton(void)::controller);
    {
      bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
    }
    for (i = 0; i != 512; ++i)
    {
      v6 = (WTF::StringImpl *)WebCore::HTMLNameCache::atomStringCache(void)::cache[i];
      WebCore::HTMLNameCache::atomStringCache(void)::cache[i] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    {
      bzero(WebCore::HTMLNameCache::qualifiedNameCache(void)::cache, 0x1000uLL);
    }
    for (j = 0; j != 512; ++j)
    {
      result = (WTF::StringImpl **)WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[j];
      WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[j] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
          result = (WTF::StringImpl **)WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

void std::call_once[abi:sn180100]<WebCore::registerMemoryReleaseNotifyCallbacks(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::registerMemoryReleaseNotifyCallbacks(void)::onceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::registerMemoryReleaseNotifyCallbacks(void)::onceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::registerMemoryReleaseNotifyCallbacks(void)::$_0 &&>>);
  }
}

uint64_t WebCore::PerformanceLogging::physicalFootprint(WebCore::PerformanceLogging *this)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  uint64_t v4;

  task_info_outCnt = 93;
  if (task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt))
    return 0;
  else
    return v4;
}

uint64_t WebCore::PerformanceLogging::getPlatformMemoryUsageStatistics(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[4];
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  task_info_outCnt = 93;
  result = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
  if (!(_DWORD)result)
  {
    *(_QWORD *)&v18 = "internal_mb";
    *((_QWORD *)&v18 + 1) = 12;
    v19 = v23 >> 20;
    v3 = *(_DWORD *)(a1 + 12);
    if (v3 == *(_DWORD *)(a1 + 8))
    {
      result = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a1, (unint64_t)&v18);
      v6 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v4 = *(_QWORD *)a1 + 24 * v3;
      v5 = v18;
      *(_QWORD *)(v4 + 16) = v19;
      *(_OWORD *)v4 = v5;
      v6 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v6;
    }
    *(_QWORD *)&v18 = "compressed_mb";
    *((_QWORD *)&v18 + 1) = 14;
    v19 = v24 >> 20;
    if (v6 == *(_DWORD *)(a1 + 8))
    {
      result = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a1, (unint64_t)&v18);
      v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v7 = *(_QWORD *)a1 + 24 * v6;
      v8 = v18;
      *(_QWORD *)(v7 + 16) = v19;
      *(_OWORD *)v7 = v8;
      v9 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v9;
    }
    *(_QWORD *)&v18 = "phys_footprint_mb";
    *((_QWORD *)&v18 + 1) = 18;
    v19 = v25 >> 20;
    if (v9 == *(_DWORD *)(a1 + 8))
    {
      result = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a1, (unint64_t)&v18);
      v12 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v10 = *(_QWORD *)a1 + 24 * v9;
      v11 = v18;
      *(_QWORD *)(v10 + 16) = v19;
      *(_OWORD *)v10 = v11;
      v12 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v12;
    }
    *(_QWORD *)&v18 = "resident_size_mb";
    *((_QWORD *)&v18 + 1) = 17;
    v19 = v22 >> 20;
    if (v12 == *(_DWORD *)(a1 + 8))
    {
      result = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a1, (unint64_t)&v18);
      v15 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v13 = *(_QWORD *)a1 + 24 * v12;
      v14 = v18;
      *(_QWORD *)(v13 + 16) = v19;
      *(_OWORD *)v13 = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      *(_DWORD *)(a1 + 12) = v15;
    }
    *(_QWORD *)&v18 = "virtual_size_mb";
    *((_QWORD *)&v18 + 1) = 16;
    v19 = *(_QWORD *)task_info_out >> 20;
    if (v15 == *(_DWORD *)(a1 + 8))
    {
      return WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(a1, (unint64_t)&v18);
    }
    else
    {
      v16 = *(_QWORD *)a1 + 24 * v15;
      v17 = v18;
      *(_QWORD *)(v16 + 16) = v19;
      *(_OWORD *)v16 = v17;
      ++*(_DWORD *)(a1 + 12);
    }
  }
  return result;
}

void sub_194E4E8E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,WTF::StringImpl *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,WTF::StringImpl *a47,WTF::StringImpl *a48)
{
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WebCore::ResourceUsageOverlay::platformInitialize(WebCore::ResourceUsageOverlay *this)
{
  WebResourceUsageOverlayLayer *v2;
  const void *v3;
  id v4;
  const void *v5;
  double *v6;
  void *v7;
  unint64_t v8;
  CGColorRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v25;
  char v26;
  char **v27;
  char *v28;
  _QWORD v29[3];
  _QWORD *v30;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v2 = -[WebResourceUsageOverlayLayer initWithResourceUsageOverlay:]([WebResourceUsageOverlayLayer alloc], "initWithResourceUsageOverlay:", this);
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v2;
  if (v3)
    CFRelease(v3);
  v4 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v5 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v4;
  if (v5)
  {
    CFRelease(v5);
    v4 = (id)*((_QWORD *)this + 6);
  }
  objc_msgSend(v4, "addSublayer:", *((_QWORD *)this + 5));
  v6 = (double *)MEMORY[0x1E0C9D538];
  objc_msgSend(*((id *)this + 6), "setAnchorPoint:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  objc_msgSend(*((id *)this + 6), "setBounds:", 0.0, 0.0, 570.0, 180.0);
  objc_msgSend(*((id *)this + 5), "setAnchorPoint:", *v6, v6[1]);
  objc_msgSend(*((id *)this + 5), "setContentsScale:", 2.0);
  v7 = (void *)*((_QWORD *)this + 5);
  memset(components, 0, 24);
  components[3] = 0.800000012;
  {
    WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
  }
  v8 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
  if (v8 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
  }
  v9 = CGColorCreate((CGColorSpaceRef)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace, components);
  objc_msgSend(v7, "setBackgroundColor:", v9);
  if (v9)
    CFRelease(v9);
  objc_msgSend(*((id *)this + 5), "setBounds:", 0.0, 0.0, 570.0, 180.0);
  v10 = *((_QWORD *)this + 2);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 8) + 1232);
  ++*(_DWORD *)(v11 + 40);
  v12 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v11 + 32);
  v14 = *(_DWORD *)(v13 - 8);
  v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(_QWORD *)(v13 + 16 * v18);
  if (v19 == -1 || v19 != v12)
  {
    v21 = 1;
    do
    {
      v18 = ((_DWORD)v18 + v21) & v14;
      v22 = *(_QWORD *)(v13 + 16 * v18);
      ++v21;
    }
    while (v22 == -1 || v22 != v12);
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v13 + 16 * v18 + 8) + 512))(*(_QWORD *)(v13 + 16 * v18 + 8), *((_QWORD *)this + 5), 0);
  v29[0] = &off_1E32D58D8;
  v29[1] = this;
  v30 = v29;
  WebCore::ResourceUsageThread::addObserver(this, (const void *)3, (char *)v29);
  result = v30;
  if (v30 == v29)
  {
    v25 = 4;
    result = v29;
  }
  else
  {
    if (!v30)
      return result;
    v25 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_194E4EE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void WebCore::showText(WebCore *this, CGContext *a2, float a3, float a4, CGColor *a5, const WTF::String *a6)
{
  CTFontRef v11;
  void *v12;
  void *v13;
  const __CFAllocator *v14;
  const __CFDictionary *v15;
  const UInt8 *v16;
  CFIndex v17;
  const __CFString *v18;
  const __CFAttributedString *v19;
  const __CTLine *v20;
  void *v21;
  WTF *v22;
  CGAffineTransform matrix;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  CGContextSaveGState(this);
  CGContextSetTextDrawingMode(this, kCGTextFill);
  CGContextSetFillColorWithColor(this, a2);
  memset(&matrix, 0, sizeof(matrix));
  CGAffineTransformMakeScale(&matrix, 1.0, -1.0);
  v11 = CTFontCreateWithName(CFSTR("Courier"), 10.0, &matrix);
  v12 = (void *)*MEMORY[0x1E0CA8558];
  keys[0] = *(void **)MEMORY[0x1E0CA8188];
  keys[1] = v12;
  v13 = (void *)*MEMORY[0x1E0C9AE50];
  values[0] = v11;
  values[1] = v13;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  WTF::String::ascii(a5);
  if (v22)
  {
    v16 = (const UInt8 *)v22 + 16;
    v17 = *((_QWORD *)v22 + 1);
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v18 = CFStringCreateWithBytesNoCopy(v14, v16, v17, 0x600u, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v19 = CFAttributedStringCreate(v14, v18, v15);
  v20 = CTLineCreateWithAttributedString(v19);
  CGContextSetTextPosition(this, a3, a4);
  CTLineDraw(v20, this);
  CGContextRestoreGState(this);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (v18)
    CFRelease(v18);
  if (!v22)
  {
LABEL_12:
    if (!v15)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
    goto LABEL_12;
  }
  WTF::fastFree(v22, v21);
  if (v15)
LABEL_13:
    CFRelease(v15);
LABEL_14:
  if (v11)
    CFRelease(v11);
}

void sub_194E4F0BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10)
{
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (v13)
  {
    CFRelease(v13);
    if (!v12)
    {
LABEL_4:
      if (a10)
      {
        if (*(_DWORD *)a10 == 1)
        {
          WTF::fastFree(a10, a2);
          if (!v11)
          {
LABEL_9:
            if (v10)
              CFRelease(v10);
            _Unwind_Resume(exception_object);
          }
LABEL_8:
          CFRelease(v11);
          goto LABEL_9;
        }
        --*(_DWORD *)a10;
      }
      if (!v11)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if (!v12)
  {
    goto LABEL_4;
  }
  CFRelease(v12);
  goto LABEL_4;
}

uint64_t WebCore::formatByteNumber(WebCore *this, WTF::String *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char __s[124];
  unsigned int __src;
  char __src_4[124];
  unsigned int __n;
  char __n_4[124];
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a2 >> 30)
  {
    WTF::numberToFixedWidthString();
    v3 = strlen(__n_4);
    v22 = v3;
    if ((v3 & 0x80000000) == 0)
    {
      v4 = v3 + 3;
      if (!__OFADD__(v3, 3))
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
        v6 = v16;
        if (v16)
        {
          v7 = (_BYTE *)(v16 + 20);
          *(_DWORD *)v16 = 2;
          *(_DWORD *)(v16 + 4) = v4;
          *(_QWORD *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 4;
          if (v22)
          {
            if (v22 == 1)
              *v7 = __n_4[0];
            else
              result = (uint64_t)memcpy((void *)(v16 + 20), __n_4, v22);
          }
          v8 = &v7[v22];
          v8[2] = 66;
          v9 = 18208;
LABEL_25:
          *(_WORD *)v8 = v9;
          *(_QWORD *)this = v6;
          return result;
        }
      }
    }
    *(_QWORD *)this = 0;
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x194E4F408);
  }
  if ((unint64_t)a2 >= 0x100000)
  {
    WTF::numberToFixedWidthString();
    v10 = strlen(__src_4);
    __n = v10;
    if ((v10 & 0x80000000) != 0
      || (v11 = v10 + 3, __OFADD__(v10, 3))
      || (result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20)), (v6 = v16) == 0))
    {
      *(_QWORD *)this = 0;
      __break(0xC471u);
      JUMPOUT(0x194E4F414);
    }
    v12 = (_BYTE *)(v16 + 20);
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = v11;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 4;
    if (__n)
    {
      if (__n == 1)
        *v12 = __src_4[0];
      else
        result = (uint64_t)memcpy((void *)(v16 + 20), __src_4, __n);
    }
    v8 = &v12[__n];
    v8[2] = 66;
    v9 = 19744;
    goto LABEL_25;
  }
  if ((unint64_t)a2 >= 0x400)
  {
    WTF::numberToFixedWidthString();
    v13 = strlen(__s);
    __src = v13;
    if ((v13 & 0x80000000) == 0)
    {
      v14 = v13 + 3;
      if (!__OFADD__(v13, 3))
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
        v6 = v16;
        if (v16)
        {
          v15 = (_BYTE *)(v16 + 20);
          *(_DWORD *)v16 = 2;
          *(_DWORD *)(v16 + 4) = v14;
          *(_QWORD *)(v16 + 8) = v16 + 20;
          *(_DWORD *)(v16 + 16) = 4;
          if (__src)
          {
            if (__src == 1)
              *v15 = __s[0];
            else
              result = (uint64_t)memcpy((void *)(v16 + 20), __s, __src);
          }
          v8 = &v15[__src];
          v8[2] = 66;
          v9 = 27424;
          goto LABEL_25;
        }
      }
    }
    *(_QWORD *)this = 0;
    __break(0xC471u);
    goto LABEL_33;
  }
  return WTF::String::number(a2);
}

void WebCore::ResourceUsageThread::platformCollectCPUData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  vm_map_t *v4;
  kern_return_t v5;
  WTF *v6;
  unsigned int v7;
  unint64_t i;
  float v9;
  const char *label;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char *v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  char *v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  char *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  mach_vm_size_t v27;
  uint64_t v28;
  void *v29;
  WTF::Thread *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  WTF *v36;
  WebCore::WorkerOrWorkletThread *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  WTF *v52;
  WTF *v53;
  _QWORD *v54;
  float v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  thread_act_t v67;
  int v68;
  WTF::StringImpl *v69;
  char v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  char v81;
  _DWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  thread_act_array_t v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  thread_act_t v103;
  thread_act_array_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  thread_act_t *v109;
  thread_act_t v110;
  thread_act_t *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  thread_act_array_t v115;
  thread_act_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  WTF::StringImpl *v122;
  WTF *v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  mach_msg_type_number_t v130;
  mach_msg_type_number_t v131;
  integer_t v132[2];
  uint64_t v133;
  dispatch_queue_t *v134;
  mach_msg_type_number_t thread_info_outCnt;
  thread_inspect_t target_act;
  mach_msg_type_number_t act_listCnt;
  thread_act_array_t act_list;
  integer_t v139[2];
  uint64_t v140;
  uint64_t v141;
  char v142[64];
  __int128 thread_info_out;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  act_list = 0;
  act_listCnt = 0;
  v4 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  v5 = task_threads(*MEMORY[0x1E0C83DA0], &act_list, &act_listCnt);
  v124 = 0;
  v125 = 0;
  if (!v5)
  {
    if (act_listCnt)
    {
      v6 = 0;
      v7 = 0;
      for (i = 0; i < act_listCnt; ++i)
      {
        WTF::MachSendRight::adopt((WTF::MachSendRight *)act_list[i]);
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v145 = 0u;
        v146 = 0u;
        thread_info_out = 0u;
        v144 = 0u;
        thread_info_outCnt = 32;
        if (!thread_info(target_act, 3u, (thread_info_t)&thread_info_out, &thread_info_outCnt))
        {
          v131 = 6;
          if (!thread_info(target_act, 4u, v132, &v131))
          {
            v130 = 28;
            if (!thread_info(target_act, 5u, v139, &v130))
            {
              v9 = 0.0;
              if ((BYTE12(v144) & 2) == 0)
                v9 = (float)((float)(int)v144 / 1000.0) * 100.0;
              WTF::String::String((WTF::String *)&v129, v142);
              if (v134)
              {
                label = dispatch_queue_get_label(*v134);
                WTF::String::String((WTF::String *)&v126, label);
                v11 = v126;
              }
              else
              {
                v11 = 0;
              }
              WTF::MachSendRight::MachSendRight();
              *((float *)&v126 + 1) = v9;
              v12 = v129;
              if (v129)
                *(_DWORD *)v129 += 2;
              v127 = v12;
              if (v11)
                *(_DWORD *)v11 += 2;
              v128 = v11;
              if (v7 == (_DWORD)v125)
              {
                v13 = WTF::Vector<WebCore::ThreadInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v7 + 1, (unint64_t)&v126);
                v14 = HIDWORD(v125);
                v6 = v124;
                WTF::MachSendRight::MachSendRight();
                v16 = (char *)v6 + 24 * v14;
                *((_DWORD *)v16 + 1) = *((_DWORD *)v13 + 1);
                v17 = *((_QWORD *)v13 + 1);
                *((_QWORD *)v13 + 1) = 0;
                *((_QWORD *)v16 + 1) = v17;
                v18 = (WTF::StringImpl **)(v16 + 16);
                v19 = (WTF::StringImpl **)(v13 + 16);
              }
              else
              {
                WTF::MachSendRight::MachSendRight();
                v20 = (char *)v6 + 24 * v7;
                *((_DWORD *)v20 + 1) = HIDWORD(v126);
                v21 = v127;
                v127 = 0;
                *((_QWORD *)v20 + 1) = v21;
                v18 = (WTF::StringImpl **)(v20 + 16);
                v14 = HIDWORD(v125);
                v19 = &v128;
              }
              v22 = *v19;
              *v19 = 0;
              *v18 = v22;
              v7 = v14 + 1;
              HIDWORD(v125) = v14 + 1;
              v23 = v128;
              v128 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v15);
                else
                  *(_DWORD *)v23 -= 2;
              }
              v24 = v127;
              v127 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v15);
                else
                  *(_DWORD *)v24 -= 2;
              }
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v126);
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                  WTF::StringImpl::destroy(v11, v25);
                else
                  *(_DWORD *)v11 -= 2;
              }
              v26 = v129;
              v129 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 2)
                  WTF::StringImpl::destroy(v26, v25);
                else
                  *(_DWORD *)v26 -= 2;
              }
            }
          }
        }
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&target_act);
      }
      v27 = 4 * act_listCnt;
      v4 = (vm_map_t *)MEMORY[0x1E0C83DA0];
    }
    else
    {
      v7 = 0;
      v27 = 0;
    }
    v28 = mach_vm_deallocate(*v4, (mach_vm_address_t)act_list, v27);
    if (!v7)
    {
      v36 = v124;
LABEL_160:
      if (v36)
        WTF::fastFree(v36, v29);
      return;
    }
    v30 = (WTF::Thread *)MEMORY[0x19AEA7C38](v28);
    v31 = (int)v30;
    v32 = *(_DWORD *)v124;
    v126 = 0;
    v33 = (unsigned __int8 *)WTF::Thread::allThreadsLock(v30);
    v34 = v33;
    if (__ldaxr(v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, v33))
    {
      goto LABEL_44;
    }
    v33 = (unsigned __int8 *)MEMORY[0x19AEA534C](v33);
LABEL_44:
    v37 = (WebCore::WorkerOrWorkletThread *)WTF::Thread::allThreads((WTF::Thread *)v33);
    v38 = *(_QWORD *)v37;
    if (*(_QWORD *)v37)
    {
      v39 = *(unsigned int *)(v38 - 4);
      v40 = v38 + 8 * v39;
      if (*(_DWORD *)(v38 - 12))
      {
        v41 = *(_QWORD *)v37;
        if ((_DWORD)v39)
        {
          v42 = 8 * v39;
          v41 = *(_QWORD *)v37;
          while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
          {
            v41 += 8;
            v42 -= 8;
            if (!v42)
            {
              v41 = v40;
              break;
            }
          }
        }
LABEL_54:
        if (v38)
          v43 = v38 + 8 * *(unsigned int *)(v38 - 4);
        else
          v43 = 0;
        while (v41 != v43)
        {
          v139[0] = *(_DWORD *)(*(_QWORD *)v41 + 52);
          if ((v139[0] - 1) <= 0xFFFFFFFD)
            v37 = (WebCore::WorkerOrWorkletThread *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)&v126, v139, (uint64_t)&thread_info_out);
          v44 = v41 + 8;
          v41 = v40;
          if (v44 != v40)
          {
            v41 = v44;
            while ((unint64_t)(*(_QWORD *)v41 + 1) <= 1)
            {
              v41 += 8;
              if (v41 == v40)
              {
                v41 = v40;
                break;
              }
            }
          }
        }
        v45 = __ldxr(v34);
        if (v45 == 1)
        {
          if (!__stlxr(0, v34))
          {
LABEL_71:
            act_list = 0;
            v46 = WebCore::WorkerOrWorkletThread::workerOrWorkletThreads(v37);
            WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::begin((uint64_t)v46, &thread_info_out);
            *(_QWORD *)v132 = 0;
            *(_QWORD *)v139 = 0;
            v133 = 0;
            v140 = 0;
            v141 = 0;
            WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v132, v47);
            v49 = v144;
            v50 = HIDWORD(thread_info_out);
            if ((_QWORD)v144 == HIDWORD(thread_info_out))
            {
LABEL_72:
              WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v139, v48);
              WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&thread_info_out, v51);
              if (HIDWORD(v125))
              {
                v52 = v124;
                v53 = (WTF *)((char *)v124 + 24 * HIDWORD(v125));
                v54 = (_QWORD *)(a3 + 8);
                while (1)
                {
                  v55 = *((float *)v52 + 1);
                  *(float *)a3 = v55 + *(float *)a3;
                  v56 = *(_DWORD *)v52;
                  if (*(_DWORD *)v52 == v31 || *(_DWORD *)(a1 + 40) == v56)
                    goto LABEL_126;
                  *(float *)(a3 + 4) = v55 + *(float *)(a3 + 4);
                  if (v56 == v32)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    thread_info_out = *(unint64_t *)v139;
                    LODWORD(v144) = *((_DWORD *)v52 + 1);
                    BYTE4(v144) = 1;
                    v57 = *(unsigned int *)(a3 + 20);
                    if ((_DWORD)v57 == *(_DWORD *)(a3 + 16))
                    {
                      v58 = WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a3 + 8), v57 + 1, (unint64_t)&thread_info_out);
                      v59 = *(_QWORD *)(a3 + 8) + 24 * *(unsigned int *)(a3 + 20);
                      v60 = *(_QWORD *)v58;
                      *(_QWORD *)v58 = 0;
                      *(_QWORD *)v59 = v60;
                      v61 = *(_QWORD *)(v58 + 8);
                      *(_QWORD *)(v58 + 8) = 0;
                      *(_QWORD *)(v59 + 8) = v61;
                      LODWORD(v61) = *(_DWORD *)(v58 + 16);
                      *(_BYTE *)(v59 + 20) = *(_BYTE *)(v58 + 20);
                      *(_DWORD *)(v59 + 16) = v61;
                    }
                    else
                    {
                      v77 = *v54 + 24 * v57;
                      *(_QWORD *)&thread_info_out = 0;
                      *(_QWORD *)v77 = *(_QWORD *)v139;
                      v78 = *((_QWORD *)&thread_info_out + 1);
                      *((_QWORD *)&thread_info_out + 1) = 0;
                      *(_QWORD *)(v77 + 8) = v78;
                      LODWORD(v78) = v144;
                      *(_BYTE *)(v77 + 20) = BYTE4(v144);
                      *(_DWORD *)(v77 + 16) = v78;
                    }
                    ++*(_DWORD *)(a3 + 20);
                    v79 = (WTF::StringImpl *)*((_QWORD *)&thread_info_out + 1);
                    *((_QWORD *)&thread_info_out + 1) = 0;
                    if (v79)
                    {
                      if (*(_DWORD *)v79 == 2)
                        WTF::StringImpl::destroy(v79, (WTF::StringImpl *)v29);
                      else
                        *(_DWORD *)v79 -= 2;
                    }
                    v80 = (WTF::StringImpl *)thread_info_out;
                    *(_QWORD *)&thread_info_out = 0;
                    if (!v80)
                      goto LABEL_126;
                    if (*(_DWORD *)v80 == 2)
                      goto LABEL_132;
                    *(_DWORD *)v80 -= 2;
                    goto LABEL_126;
                  }
                  v62 = ~(v56 << 15);
                  if (!act_list)
                    goto LABEL_87;
                  v63 = *(act_list - 2);
                  v64 = 9 * ((v56 + v62) ^ ((v56 + v62) >> 10));
                  v65 = (v64 ^ (v64 >> 6)) + ~((v64 ^ (v64 >> 6)) << 11);
                  v66 = v63 & (v65 ^ HIWORD(v65));
                  v67 = act_list[4 * v66];
                  if (v67 != v56)
                    break;
LABEL_84:
                  v69 = *(WTF::StringImpl **)&act_list[4 * v66 + 2];
                  if (!v69)
                    goto LABEL_88;
                  v70 = 0;
                  v71 = *((_DWORD *)v69 + 1);
                  *(_DWORD *)v69 += 2;
                  if (v71)
                    goto LABEL_109;
LABEL_89:
                  if (v126)
                  {
                    v72 = *((_DWORD *)v126 - 2);
                    v73 = 9 * ((v56 + v62) ^ ((v56 + v62) >> 10));
                    v74 = v72 & (((v73 ^ (v73 >> 6)) + ~((v73 ^ (v73 >> 6)) << 11)) ^ (((v73 ^ (v73 >> 6))
                                                                                      + ~((v73 ^ (v73 >> 6)) << 11)) >> 16));
                    v75 = *((_DWORD *)v126 + v74);
                    if (v75 == v56)
                      goto LABEL_109;
                    v76 = 1;
                    while (v75)
                    {
                      v74 = (v74 + v76) & v72;
                      v75 = *((_DWORD *)v126 + v74);
                      ++v76;
                      if (v75 == v56)
                        goto LABEL_109;
                    }
                  }
                  if ((MEMORY[0x19AEA53F4](*((_QWORD *)v52 + 1), "JavaScriptCore bmalloc scavenger", 32) & 1) != 0
                    || *((_QWORD *)v52 + 2)
                    && ((WTF::StringImpl::startsWith() & 1) != 0
                     || *((_QWORD *)v52 + 2)
                     && ((WTF::StringImpl::startsWith() & 1) != 0
                      || *((_QWORD *)v52 + 2) && WTF::StringImpl::startsWith())))
                  {
LABEL_109:
                    v81 = 2;
                    goto LABEL_110;
                  }
                  v81 = 0;
LABEL_110:
                  v82 = (_DWORD *)*((_QWORD *)v52 + 1);
                  if (v82)
                    *v82 += 2;
                  *(_QWORD *)&thread_info_out = v82;
                  if ((v70 & 1) == 0)
                    *(_DWORD *)v69 += 2;
                  *((_QWORD *)&thread_info_out + 1) = v69;
                  LODWORD(v144) = *((_DWORD *)v52 + 1);
                  BYTE4(v144) = v81;
                  v83 = *(unsigned int *)(a3 + 20);
                  if ((_DWORD)v83 == *(_DWORD *)(a3 + 16))
                  {
                    v84 = WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a3 + 8), v83 + 1, (unint64_t)&thread_info_out);
                    v85 = *(_QWORD *)(a3 + 8) + 24 * *(unsigned int *)(a3 + 20);
                    v86 = *(_QWORD *)v84;
                    *(_QWORD *)v84 = 0;
                    *(_QWORD *)v85 = v86;
                    v87 = *(_QWORD *)(v84 + 8);
                    *(_QWORD *)(v84 + 8) = 0;
                    *(_QWORD *)(v85 + 8) = v87;
                    v88 = *(_DWORD *)(v84 + 16);
                    v89 = *(_BYTE *)(v84 + 20);
                  }
                  else
                  {
                    v85 = *v54 + 24 * v83;
                    *(_QWORD *)&thread_info_out = 0;
                    *(_QWORD *)v85 = v82;
                    v90 = *((_QWORD *)&thread_info_out + 1);
                    *((_QWORD *)&thread_info_out + 1) = 0;
                    *(_QWORD *)(v85 + 8) = v90;
                    v88 = v144;
                    v89 = BYTE4(v144);
                  }
                  *(_BYTE *)(v85 + 20) = v89;
                  *(_DWORD *)(v85 + 16) = v88;
                  ++*(_DWORD *)(a3 + 20);
                  v91 = (WTF::StringImpl *)*((_QWORD *)&thread_info_out + 1);
                  *((_QWORD *)&thread_info_out + 1) = 0;
                  if (v91)
                  {
                    if (*(_DWORD *)v91 == 2)
                      WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v29);
                    else
                      *(_DWORD *)v91 -= 2;
                  }
                  v92 = (WTF::StringImpl *)thread_info_out;
                  *(_QWORD *)&thread_info_out = 0;
                  if (!v92)
                    goto LABEL_123;
                  if (*(_DWORD *)v92 != 2)
                  {
                    *(_DWORD *)v92 -= 2;
LABEL_123:
                    if ((v70 & 1) != 0)
                      goto LABEL_126;
                    goto LABEL_124;
                  }
                  WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v29);
                  if ((v70 & 1) != 0)
                    goto LABEL_126;
LABEL_124:
                  if (*(_DWORD *)v69 == 2)
                  {
                    v80 = v69;
LABEL_132:
                    WTF::StringImpl::destroy(v80, (WTF::StringImpl *)v29);
                    goto LABEL_126;
                  }
                  *(_DWORD *)v69 -= 2;
LABEL_126:
                  v52 = (WTF *)((char *)v52 + 24);
                  if (v52 == v53)
                    goto LABEL_135;
                }
                v68 = 1;
                while (v67)
                {
                  v66 = ((_DWORD)v66 + v68) & v63;
                  v67 = act_list[4 * v66];
                  ++v68;
                  if (v67 == v56)
                    goto LABEL_84;
                }
LABEL_87:
                v69 = 0;
LABEL_88:
                v70 = 1;
                goto LABEL_89;
              }
LABEL_135:
              v93 = act_list;
              if (act_list)
              {
                v94 = *(act_list - 1);
                if ((_DWORD)v94)
                {
                  v95 = (WTF::StringImpl **)(act_list + 2);
                  do
                  {
                    if (*((_DWORD *)v95 - 2) != -1)
                    {
                      v96 = *v95;
                      *v95 = 0;
                      if (v96)
                      {
                        if (*(_DWORD *)v96 == 2)
                          WTF::StringImpl::destroy(v96, (WTF::StringImpl *)v29);
                        else
                          *(_DWORD *)v96 -= 2;
                      }
                    }
                    v95 += 2;
                    --v94;
                  }
                  while (v94);
                }
                WTF::fastFree((WTF *)(v93 - 4), v29);
              }
              if (v126)
                WTF::fastFree((WTF::StringImpl *)((char *)v126 - 16), v29);
              v36 = v124;
              if (HIDWORD(v125))
              {
                v97 = 0;
                v98 = 24 * HIDWORD(v125);
                do
                {
                  v99 = (char *)v36 + v97;
                  v100 = *(WTF::StringImpl **)((char *)v36 + v97 + 16);
                  *(_QWORD *)((char *)v36 + v97 + 16) = 0;
                  if (v100)
                  {
                    if (*(_DWORD *)v100 == 2)
                      WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v29);
                    else
                      *(_DWORD *)v100 -= 2;
                  }
                  v101 = (WTF::StringImpl *)*((_QWORD *)v99 + 1);
                  *((_QWORD *)v99 + 1) = 0;
                  if (v101)
                  {
                    if (*(_DWORD *)v101 == 2)
                      WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v29);
                    else
                      *(_DWORD *)v101 -= 2;
                  }
                  WTF::MachSendRight::~MachSendRight((WTF *)((char *)v36 + v97));
                  v97 += 24;
                }
                while (v98 != v97);
              }
              goto LABEL_160;
            }
            while (1)
            {
              if (v49 >= v50)
              {
                __break(0xC471u);
                JUMPOUT(0x194E50058);
              }
              v102 = *(_QWORD *)(*(_QWORD *)(thread_info_out + 8 * v49) + 40);
              if (v102)
              {
                v103 = *(_DWORD *)(v102 + 52);
                if (v103 - 1 <= 0xFFFFFFFD)
                  break;
              }
LABEL_197:
              if (v49 >= v50)
              {
                __break(0xC471u);
                JUMPOUT(0x194E50078);
              }
              *(_QWORD *)&v144 = ++v49;
              if (v49 == v50)
                goto LABEL_72;
            }
            WTF::String::isolatedCopy();
            v104 = act_list;
            if (act_list
              || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::String>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::String,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)&act_list, 8u), (v104 = act_list) != 0))
            {
              v105 = *(v104 - 2);
            }
            else
            {
              v105 = 0;
            }
            v106 = 9 * ((v103 + ~(v103 << 15)) ^ ((v103 + ~(v103 << 15)) >> 10));
            v107 = (v106 ^ (v106 >> 6)) + ~((v106 ^ (v106 >> 6)) << 11);
            v108 = v105 & (v107 ^ HIWORD(v107));
            v109 = &v104[4 * v108];
            v110 = *v109;
            if (*v109)
            {
              v111 = 0;
              v112 = 1;
              while (v110 != v103)
              {
                if (v110 == -1)
                  v111 = v109;
                v108 = (v108 + v112) & v105;
                v109 = &v104[4 * v108];
                v110 = *v109;
                ++v112;
                if (!*v109)
                {
                  if (v111)
                  {
                    *(_QWORD *)v111 = 0;
                    *((_QWORD *)v111 + 1) = 0;
                    --*(v104 - 4);
                    v109 = v111;
                  }
                  goto LABEL_177;
                }
              }
              v117 = *(WTF::StringImpl **)v132;
              *(_QWORD *)v132 = 0;
              v118 = (WTF::StringImpl *)*((_QWORD *)v109 + 1);
              *((_QWORD *)v109 + 1) = v117;
              if (!v118)
                goto LABEL_196;
              if (*(_DWORD *)v118 == 2)
                WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v48);
              else
                *(_DWORD *)v118 -= 2;
              goto LABEL_193;
            }
LABEL_177:
            *v109 = v103;
            v113 = *(WTF::StringImpl **)v132;
            *(_QWORD *)v132 = 0;
            v114 = (WTF::StringImpl *)*((_QWORD *)v109 + 1);
            *((_QWORD *)v109 + 1) = v113;
            if (v114)
            {
              if (*(_DWORD *)v114 == 2)
                WTF::StringImpl::destroy(v114, (WTF::StringImpl *)v48);
              else
                *(_DWORD *)v114 -= 2;
            }
            v115 = act_list;
            if (act_list)
              v116 = *(act_list - 3) + 1;
            else
              v116 = 1;
            *(act_list - 3) = v116;
            v119 = *(v115 - 4) + v116;
            v120 = *(v115 - 1);
            if (v120 > 0x400)
            {
              if (v120 > 2 * v119)
                goto LABEL_193;
            }
            else
            {
              if (3 * v120 > 4 * v119)
              {
LABEL_193:
                v122 = *(WTF::StringImpl **)v132;
                *(_QWORD *)v132 = 0;
                if (v122)
                {
                  if (*(_DWORD *)v122 == 2)
                    WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v48);
                  else
                    *(_DWORD *)v122 -= 2;
                }
LABEL_196:
                v49 = v144;
                v50 = HIDWORD(thread_info_out);
                goto LABEL_197;
              }
              if (!(_DWORD)v120)
              {
                v121 = 8;
                goto LABEL_192;
              }
            }
            v121 = (_DWORD)v120 << (6 * v116 >= 2 * (int)v120);
LABEL_192:
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::String>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::String,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)&act_list, v121);
            goto LABEL_193;
          }
        }
        else
        {
          __clrex();
        }
        v37 = (WebCore::WorkerOrWorkletThread *)WTF::Lock::unlockSlow((WTF::Lock *)v34);
        goto LABEL_71;
      }
      v41 = v38 + 8 * v39;
    }
    else
    {
      v41 = 0;
      v39 = 0;
    }
    v40 = v38 + 8 * v39;
    goto LABEL_54;
  }
}

void sub_194E5008C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::MachSendRight *a12, int a13, unsigned int a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,WTF::StringImpl *a40,WTF::StringImpl *a41)
{
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  if (a25)
  {
    v42 = *(unsigned int *)(a25 - 4);
    if ((_DWORD)v42)
    {
      v43 = (WTF::StringImpl **)(a25 + 8);
      do
      {
        if (*((_DWORD *)v43 - 2) != -1)
        {
          v44 = *v43;
          *v43 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, a2);
            else
              *(_DWORD *)v44 -= 2;
          }
        }
        v43 += 2;
        --v42;
      }
      while (v42);
    }
    WTF::fastFree((WTF *)(a25 - 16), a2);
  }
  if (a15)
    WTF::fastFree((WTF *)(a15 - 16), a2);
  if (a14)
  {
    v45 = 0;
    do
    {
      v46 = (char *)a12 + v45;
      v47 = *(WTF::StringImpl **)((char *)a12 + v45 + 16);
      *(_QWORD *)((char *)a12 + v45 + 16) = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, a2);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = (WTF::StringImpl *)*((_QWORD *)v46 + 1);
      *((_QWORD *)v46 + 1) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, a2);
        else
          *(_DWORD *)v48 -= 2;
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)a12 + v45));
      v45 += 24;
    }
    while (24 * a14 != v45);
  }
  if (a12)
    WTF::fastFree(a12, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ResourceUsageThread::platformCollectMemoryData(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Heap *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  char *v60;
  int isFastMallocEnabled;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  JSC::JSRunLoopTimer *v65;
  double v66;
  char v67;
  JSC::JSRunLoopTimer *v68;
  double v69;
  char v70;
  _OWORD v71[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v2 = (WTF *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  WTF::pagesPerVMTag(v2);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v10 = &v88;
  memset(v71, 0, sizeof(v71));
  do
  {
    v11 = *(v10 - 1);
    v12 = 8;
    if (v7 > 0x15)
    {
LABEL_6:
      switch((int)v7)
      {
        case '3':
          goto LABEL_14;
        case '4':
          goto LABEL_9;
        case '5':
          v8 += v11;
          v13 = *v10;
LABEL_19:
          v14 = 0;
          goto LABEL_26;
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
          goto LABEL_13;
        case '?':
          *((_QWORD *)&v74 + 1) += v11;
          v13 = *v10;
LABEL_20:
          v14 = 3;
          goto LABEL_26;
        case '@':
          *((_QWORD *)&v72 + 1) += v11;
          v13 = *v10;
LABEL_21:
          v14 = 2;
          goto LABEL_26;
        case 'A':
          *((_QWORD *)&v86 + 1) += v11;
          v13 = *v10;
LABEL_22:
          v14 = 9;
          goto LABEL_26;
        default:
          if ((_DWORD)v7 == 70)
LABEL_9:
            v12 = 4;
          else
LABEL_13:
            v12 = 7;
          break;
      }
      goto LABEL_14;
    }
    if (((1 << v7) & 0x89E) != 0)
    {
      v12 = 1;
    }
    else if ((_DWORD)v7 != 21)
    {
      goto LABEL_6;
    }
LABEL_14:
    *((_QWORD *)&v71[2 * v12] + 1) += v11;
    v13 = *v10;
    v14 = 8;
    if (v7 > 0x15)
      goto LABEL_18;
    if (((1 << v7) & 0x89E) != 0)
    {
      v14 = 1;
      goto LABEL_26;
    }
    if ((_DWORD)v7 != 21)
    {
LABEL_18:
      switch((int)v7)
      {
        case '3':
          break;
        case '4':
          goto LABEL_24;
        case '5':
          goto LABEL_19;
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
          goto LABEL_25;
        case '?':
          goto LABEL_20;
        case '@':
          goto LABEL_21;
        case 'A':
          goto LABEL_22;
        default:
          if ((_DWORD)v7 == 70)
LABEL_24:
            v14 = 4;
          else
LABEL_25:
            v14 = 7;
          break;
      }
    }
LABEL_26:
    result = (uint64_t)&v71[2 * v14];
    *(_QWORD *)(result + 16) += v13;
    v9 += v11;
    ++v7;
    v10 += 4;
  }
  while (v7 != 256);
  *((_QWORD *)&v71[0] + 1) = v8;
  if (*(_BYTE *)(v4 + 64))
    goto LABEL_31;
  v16 = *(unsigned int *)(v4 + 68);
  if (v16 >= 0xA)
    goto LABEL_77;
  v17 = *((_QWORD *)&v71[2 * v16] + 1);
  result = WTF::vmPageSize((WTF *)result);
  *(_QWORD *)(v4 + 40) = result * v17;
  v18 = *(unsigned int *)(v4 + 68);
  if (v18 >= 0xA)
    goto LABEL_77;
  v19 = *(_QWORD *)&v71[2 * v18 + 1];
  result = WTF::vmPageSize((WTF *)result);
  *(_QWORD *)(v4 + 48) = result * v19;
LABEL_31:
  if (*(_BYTE *)(v4 + 96))
  {
LABEL_35:
    if (!*(_BYTE *)(v4 + 128))
    {
      v24 = *(unsigned int *)(v4 + 132);
      if (v24 > 9)
        goto LABEL_77;
      v25 = *((_QWORD *)&v71[2 * v24] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 104) = result * v25;
      v26 = *(unsigned int *)(v4 + 132);
      if (v26 > 9)
        goto LABEL_77;
      v27 = *(_QWORD *)&v71[2 * v26 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 112) = result * v27;
    }
    if (!*(_BYTE *)(v4 + 160))
    {
      v28 = *(unsigned int *)(v4 + 164);
      if (v28 > 9)
        goto LABEL_77;
      v29 = *((_QWORD *)&v71[2 * v28] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 136) = result * v29;
      v30 = *(unsigned int *)(v4 + 164);
      if (v30 > 9)
        goto LABEL_77;
      v31 = *(_QWORD *)&v71[2 * v30 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 144) = result * v31;
    }
    if (!*(_BYTE *)(v4 + 192))
    {
      v32 = *(unsigned int *)(v4 + 196);
      if (v32 > 9)
        goto LABEL_77;
      v33 = *((_QWORD *)&v71[2 * v32] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 168) = result * v33;
      v34 = *(unsigned int *)(v4 + 196);
      if (v34 > 9)
        goto LABEL_77;
      v35 = *(_QWORD *)&v71[2 * v34 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 176) = result * v35;
    }
    if (!*(_BYTE *)(v4 + 224))
    {
      v36 = *(unsigned int *)(v4 + 228);
      if (v36 > 9)
        goto LABEL_77;
      v37 = *((_QWORD *)&v71[2 * v36] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 200) = result * v37;
      v38 = *(unsigned int *)(v4 + 228);
      if (v38 > 9)
        goto LABEL_77;
      v39 = *(_QWORD *)&v71[2 * v38 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 208) = result * v39;
    }
    if (!*(_BYTE *)(v4 + 256))
    {
      v40 = *(unsigned int *)(v4 + 260);
      if (v40 > 9)
        goto LABEL_77;
      v41 = *((_QWORD *)&v71[2 * v40] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 232) = result * v41;
      v42 = *(unsigned int *)(v4 + 260);
      if (v42 > 9)
        goto LABEL_77;
      v43 = *(_QWORD *)&v71[2 * v42 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 240) = result * v43;
    }
    if (!*(_BYTE *)(v4 + 288))
    {
      v44 = *(unsigned int *)(v4 + 292);
      if (v44 > 9)
        goto LABEL_77;
      v45 = *((_QWORD *)&v71[2 * v44] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 264) = result * v45;
      v46 = *(unsigned int *)(v4 + 292);
      if (v46 > 9)
        goto LABEL_77;
      v47 = *(_QWORD *)&v71[2 * v46 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 272) = result * v47;
    }
    if (!*(_BYTE *)(v4 + 320))
    {
      v48 = *(unsigned int *)(v4 + 324);
      if (v48 > 9)
        goto LABEL_77;
      v49 = *((_QWORD *)&v71[2 * v48] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 296) = result * v49;
      v50 = *(unsigned int *)(v4 + 324);
      if (v50 > 9)
        goto LABEL_77;
      v51 = *(_QWORD *)&v71[2 * v50 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 304) = result * v51;
    }
    if (!*(_BYTE *)(v4 + 352))
    {
      v52 = *(unsigned int *)(v4 + 356);
      if (v52 > 9)
        goto LABEL_77;
      v53 = *((_QWORD *)&v71[2 * v52] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 328) = result * v53;
      v54 = *(unsigned int *)(v4 + 356);
      if (v54 > 9)
        goto LABEL_77;
      v55 = *(_QWORD *)&v71[2 * v54 + 1];
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 336) = result * v55;
    }
    *(_QWORD *)(v4 + 24) = WTF::vmPageSize((WTF *)result) * v9;
    v56 = (JSC::Heap *)(v6 + 24);
    v57 = v6[134];
    v58 = (WTF *)JSC::Heap::extraMemorySize((JSC::Heap *)(v6 + 24));
    v59 = v6[135];
    *(_QWORD *)(v4 + 200) = v57;
    v60 = (char *)v58 - v59;
    *(_QWORD *)(v4 + 232) = (char *)v58 - v59;
    *(_QWORD *)(v4 + 248) = v59;
    isFastMallocEnabled = WTF::isFastMallocEnabled(v58);
    v62 = 72;
    if (isFastMallocEnabled)
      v62 = 40;
    v63 = *(_QWORD *)(v4 + v62) - v57;
    if ((unint64_t)v60 >= v63)
      v64 = 0;
    else
      v64 = v60;
    *(_QWORD *)(v4 + v62) = v63 - (_QWORD)v64;
    *(_QWORD *)(v4 + 32) = v59;
    v65 = (JSC::JSRunLoopTimer *)JSC::Heap::edenActivityCallback(v56);
    v66 = COERCE_DOUBLE(JSC::JSRunLoopTimer::timeUntilFire(v65));
    if (!v67)
      v66 = INFINITY;
    *(double *)(v4 + 368) = *(double *)(v4 + 360) + v66;
    v68 = (JSC::JSRunLoopTimer *)JSC::Heap::fullActivityCallback(v56);
    result = JSC::JSRunLoopTimer::timeUntilFire(v68);
    v69 = *(double *)&result;
    if (!v70)
      v69 = INFINITY;
    *(double *)(v4 + 376) = *(double *)(v4 + 360) + v69;
  }
  else
  {
    v20 = *(unsigned int *)(v4 + 100);
    if (v20 <= 9)
    {
      v21 = *((_QWORD *)&v71[2 * v20] + 1);
      result = WTF::vmPageSize((WTF *)result);
      *(_QWORD *)(v4 + 72) = result * v21;
      v22 = *(unsigned int *)(v4 + 100);
      if (v22 <= 9)
      {
        v23 = *(_QWORD *)&v71[2 * v22 + 1];
        result = WTF::vmPageSize((WTF *)result);
        *(_QWORD *)(v4 + 80) = result * v23;
        goto LABEL_35;
      }
    }
LABEL_77:
    __break(1u);
  }
  return result;
}

uint64_t WebCore::SettingsBase::platformDefaultMediaSourceEnabled(WebCore::SettingsBase *this)
{
  return 0;
}

void sub_194E51280(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,const void *a22,const void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF *a32,int a33,int a34,WTF *a35,int a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  uint64_t v47;
  const void *v48;
  const void *v49;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;

  if (cf)
  {
    CFRelease(cf);
    if (!v49)
    {
LABEL_3:
      if (!v48)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if (!v49)
  {
    goto LABEL_3;
  }
  CFRelease(v49);
  if (!v48)
  {
LABEL_4:
    if (!a22)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  CFRelease(v48);
  if (!a22)
  {
LABEL_5:
    if (!a23)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_29:
  CFRelease(a22);
  if (!a23)
  {
LABEL_7:
    if (!v47)
      goto LABEL_25;
    v51 = *(_QWORD *)(v47 + 8);
    if (__ldaxr((unsigned __int8 *)v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v51))
    {
LABEL_13:
      v53 = *(_QWORD *)(v51 + 8);
      v54 = v53 - 1;
      *(_QWORD *)(v51 + 8) = v53 - 1;
      if (v53 == 1)
      {
        v58 = *(_QWORD *)(v51 + 16);
        v55 = *(_QWORD *)(v51 + 24);
        *(_QWORD *)(v51 + 24) = 0;
        v56 = v58 != 0;
      }
      else
      {
        v55 = 0;
        v56 = 1;
      }
      v57 = __ldxr((unsigned __int8 *)v51);
      if (v57 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v51))
        {
LABEL_20:
          if (!v54)
          {
            if (v55)
              (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
            if (!v56)
              WTF::fastFree((WTF *)v51, a2);
          }
LABEL_25:
          _Unwind_Resume(exception_object);
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v51);
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v51);
    goto LABEL_13;
  }
LABEL_6:
  CFRelease(a23);
  goto LABEL_7;
}

BOOL indicatorWantsContentCrossfade(_BOOL8 result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;

  v2 = result;
  v3 = *(unsigned int *)(result + 68);
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v10 = WTF::fastMalloc((WTF *)(16 * v3));
    v4 = (WTF *)v10;
    v11 = *(unsigned int *)(v2 + 68);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *(_QWORD *)(v2 + 56);
      v14 = 16 * v11;
      do
      {
        *(_OWORD *)(v10 + v12) = *(_OWORD *)(v13 + v12);
        v12 += 16;
      }
      while (v14 != v12);
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_DWORD **)(v2 + 80);
  if (v5)
    ++v5[2];
  v6 = *(_DWORD **)(v2 + 88);
  if (v6)
    ++v6[2];
  v7 = *(_DWORD **)(v2 + 96);
  if (v7)
    ++v7[2];
  v8 = *(_QWORD *)(v2 + 104);
  if ((v8 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    do
    {
      v17 = __ldaxr(v15);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v15));
    if (!v18)
    {
      atomic_store(1u, v15);
      v19 = v7;
      WTF::fastFree((WTF *)v15, a2);
      v7 = v19;
    }
  }
  if (v7)
  {
    if (v7[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      if (!v6)
        goto LABEL_16;
      goto LABEL_14;
    }
    --v7[2];
  }
  if (!v6)
    goto LABEL_16;
LABEL_14:
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_16:
  if (!v5)
    goto LABEL_19;
  if (v5[2] != 1)
  {
    --v5[2];
LABEL_19:
    if (!v4)
      goto LABEL_20;
    goto LABEL_28;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  if (!v4)
  {
LABEL_20:
    if (v5)
      goto LABEL_21;
    return 0;
  }
LABEL_28:
  WTF::fastFree(v4, a2);
  if (!v5)
    return 0;
LABEL_21:
  v9 = *(unsigned __int8 *)(v2 + 112);
  return v9 <= 3 && (v9 & 0xF) == 2;
}

void sub_194E51EF4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  WebCore::TextIndicator *v23;
  WTF *v25;
  void *v26;

  if (*(_DWORD *)v23 == 1)
  {
    WebCore::TextIndicator::~TextIndicator(v23, a2);
    WTF::fastFree(v25, v26);
  }
  else
  {
    --*(_DWORD *)v23;
  }
  _Unwind_Resume(exception_object);
}

void sub_194E521D8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo(uint64_t a1, const WebCore::Color *a2, unsigned int a3, uint64_t *a4, char a5)
{
  int v6;
  uint64_t v8;
  void *v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v6 = (int)a2;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)a1 = v8;
  v14 = bswap32(a3) | 0x1104000000000000;
  WebCore::cachedCGColor((WebCore *)&v14, a2, (_QWORD *)(a1 + 8));
  if ((v14 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v9);
    }
  }
  bzero((void *)(a1 + 16), 0x234uLL);
  bzero((void *)(a1 + 584), 0x234uLL);
  bzero((void *)(a1 + 1152), 0x234uLL);
  *(_BYTE *)(a1 + 1720) = a5;
  *(_DWORD *)(a1 + 1724) = v6;
  return a1;
}

void sub_194E52548(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if ((a10 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  v12 = *v10;
  *v10 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::historicUsageData(void)::$_0 &&>>()
{
  uint64_t v0;
  WTF::StringImpl **v1;
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  const void *v11;
  const void *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const void *v19;
  const void *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const void *v27;
  const void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const void *v35;
  const void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const void *v43;
  const void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  const void *v51;
  const void *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  const void *v59;
  const void *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  const void *v67;
  const void *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  const void *v75;
  const void *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  const void *v83;
  const void *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t result;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  WTF::StringImpl **v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  const void *v111;
  _BYTE v112[1712];
  WTF::StringImpl *v113;

  v0 = WTF::fastMalloc((WTF *)0x4B58);
  *(_OWORD *)(v0 + 268) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  bzero((void *)(v0 + 288), 0x234uLL);
  bzero((void *)(v0 + 856), 0x234uLL);
  bzero((void *)(v0 + 1424), 0x234uLL);
  bzero((void *)(v0 + 2576), 0x234uLL);
  bzero((void *)(v0 + 3144), 0x234uLL);
  *(_BYTE *)(v0 + 3712) = 0;
  v98 = (WTF::StringImpl **)(v0 + 1992);
  bzero((void *)(v0 + 1992), 0x244uLL);
  *(_DWORD *)(v0 + 3716) = 10;
  bzero((void *)(v0 + 4304), 0x234uLL);
  bzero((void *)(v0 + 4872), 0x234uLL);
  *(_BYTE *)(v0 + 5440) = 0;
  v99 = (WTF::StringImpl **)(v0 + 3720);
  bzero((void *)(v0 + 3720), 0x244uLL);
  *(_DWORD *)(v0 + 5444) = 10;
  bzero((void *)(v0 + 6032), 0x234uLL);
  bzero((void *)(v0 + 6600), 0x234uLL);
  *(_BYTE *)(v0 + 7168) = 0;
  bzero((void *)(v0 + 5448), 0x244uLL);
  *(_DWORD *)(v0 + 7172) = 10;
  v1 = (WTF::StringImpl **)(v0 + 7176);
  bzero((void *)(v0 + 7760), 0x234uLL);
  bzero((void *)(v0 + 8328), 0x234uLL);
  *(_BYTE *)(v0 + 8896) = 0;
  bzero((void *)(v0 + 7176), 0x244uLL);
  *(_DWORD *)(v0 + 8900) = 10;
  v2 = (WTF::StringImpl **)(v0 + 8904);
  bzero((void *)(v0 + 9488), 0x234uLL);
  bzero((void *)(v0 + 10056), 0x234uLL);
  *(_BYTE *)(v0 + 10624) = 0;
  bzero((void *)(v0 + 8904), 0x244uLL);
  *(_DWORD *)(v0 + 10628) = 10;
  v3 = (WTF::StringImpl **)(v0 + 10632);
  bzero((void *)(v0 + 11216), 0x234uLL);
  bzero((void *)(v0 + 11784), 0x234uLL);
  *(_BYTE *)(v0 + 12352) = 0;
  bzero((void *)(v0 + 10632), 0x244uLL);
  *(_DWORD *)(v0 + 12356) = 10;
  v4 = (WTF::StringImpl **)(v0 + 12360);
  bzero((void *)(v0 + 12944), 0x234uLL);
  bzero((void *)(v0 + 13512), 0x234uLL);
  *(_BYTE *)(v0 + 14080) = 0;
  bzero((void *)(v0 + 12360), 0x244uLL);
  *(_DWORD *)(v0 + 14084) = 10;
  v5 = (WTF::StringImpl **)(v0 + 14088);
  bzero((void *)(v0 + 14672), 0x234uLL);
  bzero((void *)(v0 + 15240), 0x234uLL);
  *(_BYTE *)(v0 + 15808) = 0;
  bzero((void *)(v0 + 14088), 0x244uLL);
  *(_DWORD *)(v0 + 15812) = 10;
  v6 = (WTF::StringImpl **)(v0 + 15816);
  bzero((void *)(v0 + 16400), 0x234uLL);
  bzero((void *)(v0 + 16968), 0x234uLL);
  *(_BYTE *)(v0 + 17536) = 0;
  bzero((void *)(v0 + 15816), 0x244uLL);
  *(_DWORD *)(v0 + 17540) = 10;
  v7 = (WTF::StringImpl **)(v0 + 17544);
  bzero((void *)(v0 + 18128), 0x234uLL);
  bzero((void *)(v0 + 18696), 0x234uLL);
  *(_BYTE *)(v0 + 19264) = 0;
  bzero((void *)(v0 + 17544), 0x244uLL);
  *(_DWORD *)(v0 + 19268) = 10;
  *(_QWORD *)(v0 + 19272) = 0x7FF8000000000000;
  *(_QWORD *)(v0 + 19280) = 0x7FF8000000000000;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v109 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)2, 0xFFFF60FF, (uint64_t *)&v109, 0);
  v9 = v110;
  v110 = 0;
  v10 = *(WTF::StringImpl **)(v0 + 5448);
  *(_QWORD *)(v0 + 5448) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v111;
  v111 = 0;
  v12 = *(const void **)(v0 + 5456);
  *(_QWORD *)(v0 + 5456) = v11;
  if (v12)
  {
    CFRelease(v12);
    v88 = v111;
    memcpy((void *)(v0 + 5464), v112, 0x6B0uLL);
    v111 = 0;
    if (v88)
      CFRelease(v88);
  }
  else
  {
    memcpy((void *)(v0 + 5464), v112, 0x6B0uLL);
    v111 = 0;
  }
  v14 = v110;
  v110 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v109;
  v109 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v108 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)3, 0xFFF04F65, (uint64_t *)&v108, 0);
  v17 = v110;
  v110 = 0;
  v18 = *v1;
  *v1 = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v111;
  v111 = 0;
  v20 = *(const void **)(v0 + 7184);
  *(_QWORD *)(v0 + 7184) = v19;
  if (v20)
  {
    CFRelease(v20);
    v89 = v111;
    memcpy((void *)(v0 + 7192), v112, 0x6B0uLL);
    v111 = 0;
    if (v89)
      CFRelease(v89);
  }
  else
  {
    memcpy((void *)(v0 + 7192), v112, 0x6B0uLL);
    v111 = 0;
  }
  v22 = v110;
  v110 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v108;
  v108 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v107 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)4, 0xFF00FFFF, (uint64_t *)&v107, 0);
  v25 = v110;
  v110 = 0;
  v26 = *v2;
  *v2 = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v111;
  v111 = 0;
  v28 = *(const void **)(v0 + 8912);
  *(_QWORD *)(v0 + 8912) = v27;
  if (v28)
  {
    CFRelease(v28);
    v90 = v111;
    memcpy((void *)(v0 + 8920), v112, 0x6B0uLL);
    v111 = 0;
    if (v90)
      CFRelease(v90);
  }
  else
  {
    memcpy((void *)(v0 + 8920), v112, 0x6B0uLL);
    v111 = 0;
  }
  v30 = v110;
  v110 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v107;
  v107 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v106 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)8, 0xFFFFFF00, (uint64_t *)&v106, 0);
  v33 = v110;
  v110 = 0;
  v34 = *v6;
  *v6 = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v32);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v111;
  v111 = 0;
  v36 = *(const void **)(v0 + 15824);
  *(_QWORD *)(v0 + 15824) = v35;
  if (v36)
  {
    CFRelease(v36);
    v91 = v111;
    memcpy((void *)(v0 + 15832), v112, 0x6B0uLL);
    v111 = 0;
    if (v91)
      CFRelease(v91);
  }
  else
  {
    memcpy((void *)(v0 + 15832), v112, 0x6B0uLL);
    v111 = 0;
  }
  v38 = v110;
  v110 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v37);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = v106;
  v106 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v37);
    else
      *(_DWORD *)v39 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v105 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)1, 0xFF00FF00, (uint64_t *)&v105, 0);
  v41 = v110;
  v110 = 0;
  v42 = *v99;
  *v99 = v41;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v40);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v111;
  v111 = 0;
  v44 = *(const void **)(v0 + 3728);
  *(_QWORD *)(v0 + 3728) = v43;
  if (v44)
  {
    CFRelease(v44);
    v92 = v111;
    memcpy((void *)(v0 + 3736), v112, 0x6B0uLL);
    v111 = 0;
    if (v92)
      CFRelease(v92);
  }
  else
  {
    memcpy((void *)(v0 + 3736), v112, 0x6B0uLL);
    v111 = 0;
  }
  v46 = v110;
  v110 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v45);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = v105;
  v105 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v45);
    else
      *(_DWORD *)v47 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v104 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, 0, 0xFF6060FF, (uint64_t *)&v104, 0);
  v49 = v110;
  v110 = 0;
  v50 = *v98;
  *v98 = v49;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v48);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = v111;
  v111 = 0;
  v52 = *(const void **)(v0 + 2000);
  *(_QWORD *)(v0 + 2000) = v51;
  if (v52)
  {
    CFRelease(v52);
    v93 = v111;
    memcpy((void *)(v0 + 2008), v112, 0x6B0uLL);
    v111 = 0;
    if (v93)
      CFRelease(v93);
  }
  else
  {
    memcpy((void *)(v0 + 2008), v112, 0x6B0uLL);
    v111 = 0;
  }
  v54 = v110;
  v110 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v53);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = v104;
  v104 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v53);
    else
      *(_DWORD *)v55 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v103 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)9, 0xFF409F80, (uint64_t *)&v103, 0);
  v57 = v110;
  v110 = 0;
  v58 = *v7;
  *v7 = v57;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v56);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v111;
  v111 = 0;
  v60 = *(const void **)(v0 + 17552);
  *(_QWORD *)(v0 + 17552) = v59;
  if (v60)
  {
    CFRelease(v60);
    v94 = v111;
    memcpy((void *)(v0 + 17560), v112, 0x6B0uLL);
    v111 = 0;
    if (v94)
      CFRelease(v94);
  }
  else
  {
    memcpy((void *)(v0 + 17560), v112, 0x6B0uLL);
    v111 = 0;
  }
  v62 = v110;
  v110 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v103;
  v103 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v61);
    else
      *(_DWORD *)v63 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v102 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)7, 0xFF00FFC0, (uint64_t *)&v102, 0);
  v65 = v110;
  v110 = 0;
  v66 = *v5;
  *v5 = v65;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v64);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = v111;
  v111 = 0;
  v68 = *(const void **)(v0 + 14096);
  *(_QWORD *)(v0 + 14096) = v67;
  if (v68)
  {
    CFRelease(v68);
    v95 = v111;
    memcpy((void *)(v0 + 14104), v112, 0x6B0uLL);
    v111 = 0;
    if (v95)
      CFRelease(v95);
  }
  else
  {
    memcpy((void *)(v0 + 14104), v112, 0x6B0uLL);
    v111 = 0;
  }
  v70 = v110;
  v110 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v69);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = v102;
  v102 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v69);
    else
      *(_DWORD *)v71 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v101 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)5, 0xFFFFA0A0, (uint64_t *)&v101, 1);
  v73 = v110;
  v110 = 0;
  v74 = *v3;
  *v3 = v73;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v72);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = v111;
  v111 = 0;
  v76 = *(const void **)(v0 + 10640);
  *(_QWORD *)(v0 + 10640) = v75;
  if (v76)
  {
    CFRelease(v76);
    v96 = v111;
    memcpy((void *)(v0 + 10648), v112, 0x6B0uLL);
    v111 = 0;
    if (v96)
      CFRelease(v96);
  }
  else
  {
    memcpy((void *)(v0 + 10648), v112, 0x6B0uLL);
    v111 = 0;
  }
  v78 = v110;
  v110 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v77);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = v101;
  v101 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v77);
    else
      *(_DWORD *)v79 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v100 = v113;
  WebCore::HistoricMemoryCategoryInfo::HistoricMemoryCategoryInfo((uint64_t)&v110, (const WebCore::Color *)6, 0xFF60C0FF, (uint64_t *)&v100, 1);
  v81 = v110;
  v110 = 0;
  v82 = *v4;
  *v4 = v81;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v80);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = v111;
  v111 = 0;
  v84 = *(const void **)(v0 + 12368);
  *(_QWORD *)(v0 + 12368) = v83;
  if (v84)
  {
    CFRelease(v84);
    v97 = v111;
    memcpy((void *)(v0 + 12376), v112, 0x6B0uLL);
    v111 = 0;
    if (v97)
      CFRelease(v97);
  }
  else
  {
    memcpy((void *)(v0 + 12376), v112, 0x6B0uLL);
    v111 = 0;
  }
  v86 = v110;
  v110 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, v85);
    else
      *(_DWORD *)v86 -= 2;
  }
  result = (uint64_t)v100;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      result = WTF::StringImpl::destroy(v100, v85);
    else
      *(_DWORD *)v100 -= 2;
  }
  qword_1ECE814C0 = v0;
  return result;
}

void sub_194E53350(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10, WTF::StringImpl **a11, WTF::StringImpl **a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22)
{
  WTF *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  const void *v31;
  WTF::StringImpl *v32;
  const void *v33;
  WTF::StringImpl *v34;
  const void *v35;
  WTF::StringImpl *v36;
  const void *v37;
  WTF::StringImpl *v38;
  const void *v39;
  WTF::StringImpl *v40;
  const void *v41;
  WTF::StringImpl *v42;
  const void *v43;
  WTF::StringImpl *v44;
  const void *v45;
  WTF::StringImpl *v46;
  const void *v47;
  WTF::StringImpl *v48;
  const void *v49;
  WTF::StringImpl *v50;

  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  v31 = (const void *)*((_QWORD *)v22 + 2194);
  *((_QWORD *)v22 + 2194) = 0;
  if (v31)
    CFRelease(v31);
  v32 = *v23;
  *v23 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (const void *)*((_QWORD *)v22 + 1978);
  *((_QWORD *)v22 + 1978) = 0;
  if (v33)
    CFRelease(v33);
  v34 = *v29;
  *v29 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (const void *)*((_QWORD *)v22 + 1762);
  *((_QWORD *)v22 + 1762) = 0;
  if (v35)
    CFRelease(v35);
  v36 = *v28;
  *v28 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (const void *)*((_QWORD *)v22 + 1546);
  *((_QWORD *)v22 + 1546) = 0;
  if (v37)
    CFRelease(v37);
  v38 = *v27;
  *v27 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, a2);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = (const void *)*((_QWORD *)v22 + 1330);
  *((_QWORD *)v22 + 1330) = 0;
  if (v39)
    CFRelease(v39);
  v40 = *v26;
  *v26 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (const void *)*((_QWORD *)v22 + 1114);
  *((_QWORD *)v22 + 1114) = 0;
  if (v41)
    CFRelease(v41);
  v42 = *v25;
  *v25 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, a2);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (const void *)*((_QWORD *)v22 + 898);
  *((_QWORD *)v22 + 898) = 0;
  if (v43)
    CFRelease(v43);
  v44 = *v24;
  *v24 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (const void *)*((_QWORD *)v22 + 682);
  *((_QWORD *)v22 + 682) = 0;
  if (v45)
    CFRelease(v45);
  v46 = *a12;
  *a12 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = (const void *)*((_QWORD *)v22 + 466);
  *((_QWORD *)v22 + 466) = 0;
  if (v47)
    CFRelease(v47);
  v48 = *a11;
  *a11 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, a2);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (const void *)*((_QWORD *)v22 + 250);
  *((_QWORD *)v22 + 250) = 0;
  if (v49)
    CFRelease(v49);
  v50 = *a10;
  *a10 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  WTF::fastFree(v22, a2);
  _Unwind_Resume(a1);
}

void WebCore::drawGraphLabel(WebCore *this, CGContext *a2, float a3, float a4, const WTF::String *a5, const WTF::String *a6)
{
  CGContext *v10;
  const WTF::String *v11;
  CGContext *v12;
  unint64_t v13;
  unint64_t v19;
  char v20;
  char **v21;
  char *v22;
  CGFloat components[2];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (byte_1ECE814B2 == 1)
  {
    v10 = (CGContext *)qword_1ECE814D8;
  }
  else
  {
    components[0] = 0.0;
    components[1] = 0.0;
    *(_QWORD *)&v24 = 0;
    *((_QWORD *)&v24 + 1) = 0x3FF0000000000000;
    {
      WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
    }
    v13 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
    if (v13 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
    }
    v10 = CGColorCreate((CGColorSpaceRef)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace, components);
    qword_1ECE814D8 = (uint64_t)v10;
    byte_1ECE814B2 = 1;
  }
  WebCore::showText(this, v10, a3 + 5.0, a4 + -3.0, a2, a6);
  if (byte_1ECE814B3 == 1)
  {
    v12 = (CGContext *)qword_1ECE814E0;
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)components = _Q0;
    v24 = _Q0;
    {
      WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace = 0;
    }
    v19 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag);
    if (v19 != -1)
    {
      v22 = &v20;
      v21 = &v22;
      std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::onceFlag, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::{lambda(void)#1} &&>>);
    }
    v12 = CGColorCreate((CGColorSpaceRef)WebCore::namedColorSpace<kCGColorSpaceSRGB>(void)::colorSpace, components);
    qword_1ECE814E0 = (uint64_t)v12;
    byte_1ECE814B3 = 1;
  }
  WebCore::showText(this, v12, a3 + 4.0, a4 + -4.0, a2, v11);
}

void WTF::Detail::CallableWrapper<WebCore::drawCpuHistory(CGContext *,float,float,float,WebCore::RingBuffer<float,70ul> &)::$_0,void,float>::call(uint64_t a1, float a2)
{
  float v3;
  float v4;

  v3 = a2 / -100.0;
  v4 = **(float **)(a1 + 8) - **(float **)(a1 + 16);
  CGContextBeginPath(**(CGContextRef **)(a1 + 24));
  CGContextMoveToPoint(**(CGContextRef **)(a1 + 24), (float)(**(float **)(a1 + 32) + (float)**(int **)(a1 + 40)), **(float **)(a1 + 8));
  CGContextAddLineToPoint(**(CGContextRef **)(a1 + 24), (float)(**(float **)(a1 + 32) + (float)**(int **)(a1 + 40)), (float)(**(float **)(a1 + 8) + (float)(v4 * v3)));
  CGContextStrokePath(**(CGContextRef **)(a1 + 24));
  ++**(_DWORD **)(a1 + 40);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::drawGCHistory(CGContext *,float,float,float,WebCore::RingBuffer<unsigned long,70ul> &,WebCore::RingBuffer<unsigned long,70ul> &)::$_0,void,unsigned long>::call(uint64_t result, unint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 8);
  if (*v2 < a2)
    *v2 = a2;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::drawGCHistory(CGContext *,float,float,float,WebCore::RingBuffer<unsigned long,70ul> &,WebCore::RingBuffer<unsigned long,70ul> &)::$_1,void,unsigned long>::call(uint64_t a1, unint64_t a2)
{
  float v3;

  v3 = (float)a2 / (float)**(unint64_t **)(a1 + 8);
  CGContextBeginPath(**(CGContextRef **)(a1 + 16));
  CGContextMoveToPoint(**(CGContextRef **)(a1 + 16), (float)(**(float **)(a1 + 24) + (float)**(unint64_t **)(a1 + 32)), **(float **)(a1 + 40));
  CGContextAddLineToPoint(**(CGContextRef **)(a1 + 16), (float)(**(float **)(a1 + 24) + (float)**(unint64_t **)(a1 + 32)), (float)(**(float **)(a1 + 40) - (float)(**(float **)(a1 + 48) * v3)));
  CGContextStrokePath(**(CGContextRef **)(a1 + 16));
  ++**(_QWORD **)(a1 + 32);
}

void WTF::Detail::CallableWrapper<WebCore::drawGCHistory(CGContext *,float,float,float,WebCore::RingBuffer<unsigned long,70ul> &,WebCore::RingBuffer<unsigned long,70ul> &)::$_2,void,unsigned long>::call(uint64_t a1, unint64_t a2)
{
  float v3;

  v3 = (float)a2 / (float)**(unint64_t **)(a1 + 8);
  CGContextBeginPath(**(CGContextRef **)(a1 + 16));
  CGContextMoveToPoint(**(CGContextRef **)(a1 + 16), (float)(**(float **)(a1 + 24) + (float)**(unint64_t **)(a1 + 32)), **(float **)(a1 + 40));
  CGContextAddLineToPoint(**(CGContextRef **)(a1 + 16), (float)(**(float **)(a1 + 24) + (float)**(unint64_t **)(a1 + 32)), (float)(**(float **)(a1 + 40) - (float)(**(float **)(a1 + 48) * v3)));
  CGContextStrokePath(**(CGContextRef **)(a1 + 16));
  ++**(_QWORD **)(a1 + 32);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::drawMemHistory(CGContext *,float,float,float,WebCore::HistoricResourceUsageData &)::$_0,void,unsigned long>::call(uint64_t result, unint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 8);
  if (*v2 < a2)
    *v2 = a2;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::drawMemHistory(CGContext *,float,float,float,WebCore::HistoricResourceUsageData &)::$_1,void,unsigned long>::call(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = **(_DWORD **)(result + 16);
  if (v2 >= 0x46 || (v3 = *(_QWORD *)(result + 24), v4 = *(unsigned int *)(v3 + 1724), v4 >= 0xA))
  {
    __break(1u);
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)(result + 8) + 160 * v2 + 16 * v4);
    *v5 = *(_QWORD *)(v3 + 8);
    v5[1] = a2;
    ++**(_DWORD **)(result + 16);
  }
  return result;
}

char *WTF::Vector<WebCore::ThreadInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (unint64_t)v5 + 24 * *(unsigned int *)(a1 + 12), v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x194E53D20);
      }
      v17 = (uint64_t)v5 + 24 * *(unsigned int *)(a1 + 12);
      v18 = 24 * v16;
      v19 = WTF::fastMalloc((WTF *)(24 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ThreadInfo>::move((uint64_t)v5, v17, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v9 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x194E53D28);
      }
      v10 = 24 * v9;
      v11 = WTF::fastMalloc((WTF *)(24 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ThreadInfo>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
  }
  return (char *)v3;
}

void WTF::VectorMover<false,WebCore::ThreadInfo>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      WTF::MachSendRight::MachSendRight();
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(v5 + 4);
      v7 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v8;
      v9 = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(WTF::StringImpl **)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v6);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
      a3 += 24;
      v5 += 24;
    }
    while (v5 != a2);
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>>::destruct(*(_QWORD *)a1, (uint64_t *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void sub_194E53E40(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;

  v4 = *(WTF **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::VectorTypeOperations<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if ((uint64_t *)result != a2)
  {
    for (i = (uint64_t *)result; i != a2; ++i)
    {
      v4 = *i;
      *i = 0;
      if (!v4)
        continue;
      v5 = *(_QWORD *)(v4 + 8);
      if (__ldaxr((unsigned __int8 *)v5))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v5))
      {
        goto LABEL_8;
      }
      result = MEMORY[0x19AEA534C](v5);
LABEL_8:
      v7 = *(_QWORD *)(v5 + 8);
      v8 = v7 - 1;
      *(_QWORD *)(v5 + 8) = v7 - 1;
      if (v7 == 1)
      {
        v12 = *(_QWORD *)(v5 + 16);
        v9 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        v10 = v12 != 0;
      }
      else
      {
        v9 = 0;
        v10 = 1;
      }
      v11 = __ldxr((unsigned __int8 *)v5);
      if (v11 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
          if (!v8)
            goto LABEL_16;
          continue;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (!v8)
      {
LABEL_16:
        if (v9)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if (!v10)
          result = WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  return result;
}

uint64_t *WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;

  v3 = *a1;
  *a1 = 0;
  if (!v3)
    return a1;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (v7)
        return a1;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (v7)
    return a1;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t ___ZZN7WebCore36registerMemoryReleaseNotifyCallbacksEvENK3__0clEv_block_invoke()
{
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return WebCore::GCController::garbageCollectNow((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
}

uint64_t ___ZZN7WebCore36registerMemoryReleaseNotifyCallbacksEvENK3__0clEv_block_invoke_2()
{
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  WebCore::GCController::deleteAllCode((WTF::RunLoop *)&WebCore::GCController::singleton(void)::controller);
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return WebCore::GCController::garbageCollectNow((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
}

uint64_t WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::ASCIILiteral,unsigned long>>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  __int128 v5;

  v3 = WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v3 + 2);
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

char *WTF::Vector<std::pair<WTF::ASCIILiteral,unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[24 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = (char *)WTF::fastMalloc((WTF *)(24 * v9));
        *((_DWORD *)a1 + 2) = (v10 & 0xFFFFFFF8) / 0x18;
        *a1 = v11;
        memcpy(v11, v5, 24 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x194E54308);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0xAAAAAAB)
      goto LABEL_28;
    v17 = *((unsigned int *)a1 + 3);
    v18 = 24 * v16;
    v19 = (char *)WTF::fastMalloc((WTF *)(24 * v16));
    *((_DWORD *)a1 + 2) = (v18 & 0xFFFFFFF8) / 0x18;
    *a1 = v19;
    memcpy(v19, v5, 24 * v17);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

void std::__function::__func<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0,std::allocator<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0,std::allocator<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E32D58D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0,std::allocator<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E32D58D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0,std::allocator<WebCore::ResourceUsageOverlay::platformInitialize(void)::$_0>,void ()(WebCore::ResourceUsageData const&)>::operator()(WTF::RunLoop *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  JSC::Heap *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  char v33;
  unsigned int **v34;
  unsigned int *v35;

  v3 = *((_QWORD *)a1 + 1);
  v4 = atomic_load(&qword_1ECE814C8);
  if (v4 != -1)
  {
    v35 = (unsigned int *)&v33;
    v34 = &v35;
    std::__call_once(&qword_1ECE814C8, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::historicUsageData(void)::$_0 &&>>);
  }
  v5 = qword_1ECE814C0;
  v6 = *(unsigned int *)(qword_1ECE814C0 + 280);
  if (v6 >= 0x46)
    goto LABEL_43;
  *(_DWORD *)(qword_1ECE814C0 + 4 * v6) = *(_DWORD *)a2;
  v7 = (_DWORD)v6 == 69 ? 0 : v6 + 1;
  *(_DWORD *)(v5 + 280) = v7;
  v8 = *(unsigned int *)(v5 + 848);
  if (v8 >= 0x46
    || ((*(_QWORD *)(v5 + 8 * v8 + 288) = *(_QWORD *)(a2 + 24), (_DWORD)v8 != 69) ? (v9 = v8 + 1) : (v9 = 0),
        *(_DWORD *)(v5 + 848) = v9,
        v10 = *(unsigned int *)(v5 + 1416),
        v10 >= 0x46))
  {
LABEL_43:
    __break(1u);
    JUMPOUT(0x194E54674);
  }
  v11 = 0;
  *(_QWORD *)(v5 + 8 * v10 + 856) = *(_QWORD *)(a2 + 32);
  if ((_DWORD)v10 == 69)
    v12 = 0;
  else
    v12 = v10 + 1;
  *(_DWORD *)(v5 + 1416) = v12;
  v13 = a2 + 40;
  do
  {
    v14 = v5 + v11;
    v15 = *(unsigned int *)(v5 + v11 + 3716);
    if (v15 >= 0xA)
      goto LABEL_43;
    v16 = *(unsigned int *)(v14 + 2568);
    if (v16 >= 0x46)
      goto LABEL_43;
    v17 = v5 + v11;
    *(_QWORD *)(v5 + v11 + 8 * v16 + 2008) = *(_QWORD *)(v13 + 32 * v15);
    v18 = (_DWORD)v16 == 69 ? 0 : v16 + 1;
    *(_DWORD *)(v14 + 2568) = v18;
    v19 = *(unsigned int *)(v17 + 3136);
    if (v19 >= 0x46)
      goto LABEL_43;
    v20 = v13 + 32 * v15;
    *(_QWORD *)(v17 + 8 * v19 + 2576) = *(_QWORD *)(v20 + 8);
    v21 = (_DWORD)v19 == 69 ? 0 : v19 + 1;
    *(_DWORD *)(v17 + 3136) = v21;
    v22 = *(unsigned int *)(v17 + 3704);
    if (v22 >= 0x46)
      goto LABEL_43;
    *(_QWORD *)(v5 + 8 * v22 + v11 + 3144) = *(_QWORD *)(v20 + 16);
    if ((_DWORD)v22 == 69)
      v23 = 0;
    else
      v23 = v22 + 1;
    *(_DWORD *)(v17 + 3704) = v23;
    v11 += 1728;
  }
  while (v11 != 17280);
  *(_QWORD *)(v5 + 19272) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(v5 + 19280) = *(_QWORD *)(a2 + 376);
  v24 = WebCore::g_commonVMOrNull;
  if (!WebCore::g_commonVMOrNull)
  {
    WTF::RunLoop::webIfExists(a1);
    JSC::VM::create();
    v24 = (uint64_t)v35;
    WebCore::g_commonVMOrNull = (uint64_t)v35;
    if (__ldaxr(v35 + 274))
    {
      __clrex();
    }
    else if (!__stlxr(4u, v35 + 274))
    {
LABEL_35:
      if (webThreadStarted == 1)
        *(_BYTE *)(*(_QWORD *)(v24 + 112) + 5) = 1;
      WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v24 + 584));
      WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v24, 0);
      goto LABEL_38;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v24 + 192));
    goto LABEL_35;
  }
LABEL_38:
  MEMORY[0x19AEA3288](&v35, v24);
  v26 = (JSC::Heap *)(v24 + 192);
  v27 = JSC::Heap::size((JSC::Heap *)(v24 + 192));
  v28 = JSC::Heap::extraMemorySize(v26);
  v29 = *(unsigned int *)(v5 + 1984);
  if (v29 >= 0x46)
    goto LABEL_43;
  *(_QWORD *)(v5 + 8 * v29 + 1424) = v27 - v28;
  if ((_DWORD)v29 == 69)
    v30 = 0;
  else
    v30 = v29 + 1;
  *(_DWORD *)(v5 + 1984) = v30;
  MEMORY[0x19AEA32A0](&v35);
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  v31 = (void *)objc_msgSend(*(id *)(v3 + 40), "superlayer");
  objc_msgSend(*(id *)(v3 + 40), "setBounds:", 0.0, 0.0, 570.0, 180.0);
  objc_msgSend(v31, "setBounds:", 0.0, 0.0, 570.0, 180.0);
  objc_msgSend(*(id *)(v3 + 40), "setNeedsDisplay");
  return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unsigned __int128 v17;
  char v18;

  v5 = *a3;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *a3);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v8 = result;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = v9;
      v11 = *a3;
      if ((_DWORD)v9)
      {
        v12 = *(int8x16_t **)a2;
        if ((_DWORD)v9 == 1)
          *result = v12->i8[0];
        else
          result = (char *)memcpy(result, v12, *(_QWORD *)(a2 + 8));
      }
      if (v11)
      {
        result = &v8[v10];
        v13 = *(char **)(v11 + 8);
        v14 = *(unsigned int *)(v11 + 4);
        if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        {
          if ((_DWORD)v14)
          {
            if ((_DWORD)v14 == 1)
              *result = *v13;
            else
              return (char *)memcpy(result, v13, v14);
          }
        }
        else
        {
          v15 = &result[v14];
          if (v14 >= 0x10)
          {
            v16 = &result[v14 & 0xFFFFFFF0];
            do
            {
              v17 = (unsigned __int128)vld2q_s8(v13);
              v13 += 32;
              *(_OWORD *)result = v17;
              result += 16;
            }
            while (result != v16);
            result = v16;
          }
          while (result != v15)
          {
            v18 = *v13;
            v13 += 2;
            *result++ = v18;
          }
        }
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  __int16 v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  int8x16_t *v25;
  uint64_t v26;
  char *v27;
  int8x16_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  int8x16_t *v32;
  char *v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  unsigned __int128 *v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  char v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = a2[1];
      v12 = *a3;
      v13 = *a4;
      v14 = &result[2 * v11];
      v15 = v11 & 0xFFFFFFC0;
      if (v15)
      {
        v16 = &result[2 * v15];
        v17 = 0uLL;
        do
        {
          v53.val[0] = *v10;
          v18 = v10[1];
          v55.val[0] = v10[2];
          v19 = v10[3];
          v10 += 4;
          v20 = v19;
          v55.val[1] = 0uLL;
          v57.val[0] = v18;
          v53.val[1] = 0uLL;
          v21 = result;
          vst2q_s8(v21, v53);
          v21 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v21, v57);
          v22 = result + 64;
          vst2q_s8(v22, v55);
          v23 = result + 96;
          vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
          result += 128;
        }
        while (result != v16);
        result = v16;
      }
      while (result != v14)
      {
        v24 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v24;
        result += 2;
      }
      if (v12)
      {
        v25 = *(int8x16_t **)(v12 + 8);
        v26 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          v37 = &v14[2 * v26];
          if (v26 >= 0x40)
          {
            v38 = &v14[2 * (v26 & 0xFFFFFFC0)];
            v40 = 0uLL;
            v41 = v14;
            do
            {
              v54.val[0] = *v25;
              v42 = v25[1];
              v56.val[0] = v25[2];
              v43 = v25[3];
              v25 += 4;
              v44 = v43;
              v56.val[1] = 0uLL;
              v58.val[0] = v42;
              v54.val[1] = 0uLL;
              v45 = v41;
              vst2q_s8(v45, v54);
              v45 += 32;
              v58.val[1] = 0uLL;
              vst2q_s8(v45, v58);
              v46 = v41 + 64;
              vst2q_s8(v46, v56);
              v47 = v41 + 96;
              vst2q_s8(v47, *(int8x16x2_t *)(&v40 - 1));
              v41 += 128;
            }
            while (v41 != v38);
          }
          else
          {
            v38 = v14;
          }
          while (v38 != v37)
          {
            v48 = v25->u8[0];
            v25 = (int8x16_t *)((char *)v25 + 1);
            *(_WORD *)v38 = v48;
            v38 += 2;
          }
        }
        else if ((_DWORD)v26 == 1)
        {
          *(_WORD *)v14 = v25->i16[0];
        }
        else if ((_DWORD)v26)
        {
          result = (char *)memcpy(v14, v25, 2 * v26);
        }
        v39 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v39 = 0;
      }
      *(_WORD *)&v14[2 * v39] = v13;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v27 = result;
      v28 = a2[1];
      v29 = v28;
      v30 = *a3;
      v31 = *a4;
      if ((_DWORD)v28)
      {
        v32 = *a2;
        if ((_DWORD)v28 == 1)
          *result = v32->i8[0];
        else
          result = (char *)memcpy(result, v32, a2[1]);
      }
      v33 = &v27[v29];
      if (v30)
      {
        v34 = *(char **)(v30 + 8);
        v35 = *(unsigned int *)(v30 + 4);
        if ((*(_BYTE *)(v30 + 16) & 4) != 0)
        {
          if ((_DWORD)v35)
          {
            if ((_DWORD)v35 == 1)
              *v33 = *v34;
            else
              result = (char *)memcpy(&v27[v29], v34, v35);
          }
        }
        else
        {
          if (v35 < 0x10)
          {
            v49 = (unsigned __int128 *)&v27[v29];
          }
          else
          {
            v49 = (unsigned __int128 *)&v33[v35 & 0xFFFFFFF0];
            v50 = (unsigned __int128 *)&v27[v29];
            do
            {
              v51 = (unsigned __int128)vld2q_s8(v34);
              v34 += 32;
              *v50++ = v51;
            }
            while (v50 != v49);
          }
          while (v49 != (unsigned __int128 *)&v33[v35])
          {
            v52 = *v34;
            v34 += 2;
            *(_BYTE *)v49 = v52;
            v49 = (unsigned __int128 *)((char *)v49 + 1);
          }
        }
        v36 = *(unsigned int *)(v30 + 4);
      }
      else
      {
        v36 = 0;
      }
      v33[v36] = v31;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add@<X0>(uint64_t *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v8;
  v13 = (int *)(v6 + 4 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v9)
      {
        if ((v7 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v26 = v6 + 4 * v24;
        goto LABEL_31;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v8;
      v13 = (int *)(v6 + 4 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v13 = v15;
    }
  }
  *v13 = v9;
  v17 = *v4;
  if (*v4)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v4;
  if (*v4)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
      goto LABEL_19;
  }
  else if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
LABEL_26:
      result = (uint64_t *)WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v4, v23, v13);
      v13 = (int *)result;
      v19 = *v4;
      if (*v4)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_30;
    }
LABEL_19:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_26;
  }
LABEL_30:
  v26 = v19 + 4 * v22;
  v25 = 1;
LABEL_31:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_DWORD *WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(4 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (int *)(v6 + 4 * v11);
    v14 = *v13;
    if ((*v13 + 1) >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = 0;
      v18 = 9 * ((v14 + ~(v14 << 15)) ^ ((v14 + ~(v14 << 15)) >> 10));
      v19 = ((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) ^ (((v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11)) >> 16);
      do
      {
        v20 = v19 & v16;
        v19 = ++v17 + v20;
      }
      while (*(_DWORD *)(v15 + 4 * v20));
      v21 = (_DWORD *)(v15 + 4 * v20);
      *v21 = v14;
      if (v13 == a3)
        v12 = v21;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>>::destruct(*(_QWORD *)a1, (uint64_t *)(*(_QWORD *)a1 + 8 * v4));
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

unsigned int *_ZN3WTF13CompactMapperIZNKS_21ThreadSafeWeakHashSetIN7WebCore21WorkerOrWorkletThreadEE6valuesEvEUlRT_E_NS_6VectorINS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEERNS_7HashMapIPKS3_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENSA_ISM_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEENS_11DefaultHashISK_EENS_10HashTraitsISK_EENSS_ISP_EENS_15HashTableTraitsEEEvE10compactMapERSH_SX_RKS7_(unsigned int *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::begin(a2);
  v7 = v6;
  v9 = v8;
  if (*a2)
    v10 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v10 = 0;
  if ((uint64_t *)v10 != v6)
  {
    do
    {
      WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values(void)const::{lambda(WebCore::WorkerOrWorkletThread &)#1}::operator()<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>(a3, v7, &v19);
      v13 = v19;
      if (v19)
      {
        v18 = v19;
        v19 = 0;
        v14 = a1[3];
        if ((_DWORD)v14 == a1[2])
        {
          WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>>((uint64_t)a1, (unint64_t)&v18);
        }
        else
        {
          v15 = *(_QWORD *)a1;
          v18 = 0;
          *(_QWORD *)(v15 + 8 * v14) = v13;
          a1[3] = v14 + 1;
        }
        WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>::~Ref(&v18, v12);
        v17 = v19;
        v19 = 0;
        if (v17)
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v17 + 8), v16);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9)
          break;
        if ((unint64_t)(*v7 + 1) > 1)
          goto LABEL_16;
      }
      v7 = v9;
LABEL_16:
      ;
    }
    while (v7 != (uint64_t *)v10);
  }
  return WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, a1[3]);
}

void sub_194E54ED8(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v11;
  uint64_t v12;

  WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>::~Ref(&a9, a2);
  v12 = a10;
  a10 = 0;
  if (v12)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v12 + 8), v11);
  _Unwind_Resume(a1);
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::WorkerOrWorkletThread>::values(void)const::{lambda(WebCore::WorkerOrWorkletThread &)#1}::operator()<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE **v3;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v3 = (_BYTE **)result;
  v6 = *a2;
  v5 = a2[1];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  *a3 = v6;
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!*a3)
  {
    **v3 = 1;
    *a3 = 0;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v3 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = (unsigned int *)WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, (void *)a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WorkerOrWorkletThread,WTF::RawPtrTraits<WebCore::WorkerOrWorkletThread>,WTF::DefaultRefDerefTraits<WebCore::WorkerOrWorkletThread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, void *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((void *)v4 != a2)
  {
    v5 = (uint64_t *)(*(_QWORD *)result + 8 * (_QWORD)a2);
    for (i = 8 * v4 - 8 * (_QWORD)a2; i; i -= 8)
    {
      v7 = *v5;
      *v5 = 0;
      if (!v7)
        goto LABEL_21;
      v8 = *(_QWORD *)(v7 + 8);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_9;
      }
      result = MEMORY[0x19AEA534C](v8);
LABEL_9:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v15 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v15 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
          if (!v11)
            goto LABEL_17;
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (!v11)
      {
LABEL_17:
        if (v12)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          result = WTF::fastFree((WTF *)v8, a2);
      }
LABEL_21:
      ++v5;
    }
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

BOOL _ZN3WTF9HashTableIPKN7WebCore21WorkerOrWorkletThreadENS_12KeyValuePairIS4_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS7_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISC_EENS_11DefaultHashIS4_EENS_7HashMapIS4_SB_SG_NS_10HashTraitsIS4_EENSI_ISB_EENS_15HashTableTraitsEE18KeyValuePairTraitsESJ_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS2_E6valuesEvEUlRT_E0_EEbRKSS_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  unsigned int v35;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 4);
  if (!v3)
    return 0;
  v5 = 0;
  v6 = v3 - 1;
  do
  {
    v7 = v6;
    v8 = (_QWORD *)(v2 + 16 * v6);
    if ((unint64_t)(*v8 + 1) < 2)
      goto LABEL_29;
    v9 = v2 + 16 * v6;
    v12 = *(unsigned __int8 **)(v9 + 8);
    v11 = (uint64_t *)(v9 + 8);
    v10 = v12;
    if (__ldaxr(v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_9:
    v14 = *((_QWORD *)v10 + 3);
    v15 = __ldxr(v10);
    if (v15 == 1)
    {
      if (!__stlxr(0, v10))
      {
        if (v14)
          goto LABEL_29;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v14)
      goto LABEL_29;
LABEL_15:
    *v8 = -1;
    v16 = *v11;
    *v11 = 0;
    if (!v16)
      goto LABEL_28;
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_20:
    v18 = *(_QWORD *)(v16 + 16) - 1;
    *(_QWORD *)(v16 + 16) = v18;
    if (v18)
    {
      v21 = __ldxr((unsigned __int8 *)v16);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
          goto LABEL_28;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      goto LABEL_28;
    }
    v19 = *(_QWORD *)(v16 + 8);
    v20 = __ldxr((unsigned __int8 *)v16);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v19)
          goto LABEL_27;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v19)
LABEL_27:
      WTF::fastFree((WTF *)v16, a2);
LABEL_28:
    ++v5;
LABEL_29:
    --v6;
  }
  while (v7);
  v22 = *a1;
  v23 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v22 - 16) += v5;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    *(_DWORD *)(v24 - 12) = v25 - v5;
    v22 = *a1;
  }
  if (v22)
  {
    v26 = *(_DWORD *)(v22 - 4);
    v27 = *(unsigned int *)(v22 - 12);
    if (6 * (int)v27 < v26 && v26 >= 9)
    {
      v29 = (v27 - 1) | ((v27 - 1) >> 1) | ((((_DWORD)v27 - 1) | ((v27 - 1) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v31 = (v30 | HIWORD(v30)) + 1;
      if (v31 > 0x400)
      {
        if (v31 > 2 * v27)
          goto LABEL_53;
      }
      else if (3 * v31 > 4 * v27)
      {
LABEL_51:
        v32 = (double)v27;
        v33 = (double)v31;
        v34 = 0.604166667;
LABEL_54:
        if (v33 * v34 <= v32)
          LODWORD(v31) = 2 * v31;
        if (v31 <= 8)
          v35 = 8;
        else
          v35 = v31;
        WTF::HashTable<WebCore::WorkerOrWorkletThread const*,WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>>::rehash(a1, v35, 0);
        return v23;
      }
      LODWORD(v31) = 2 * v31;
      if (v31 <= 0x400)
        goto LABEL_51;
LABEL_53:
      v32 = (double)v27;
      v33 = (double)v31;
      v34 = 0.416666667;
      goto LABEL_54;
    }
  }
  return v23;
}

_QWORD *WTF::HashTable<WebCore::WorkerOrWorkletThread const*,WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = (_QWORD *)v6;
    v13 = v7;
    while (1)
    {
      if (*v12)
      {
        if (*v12 != -1)
        {
          v19 = WTF::HashTable<WebCore::WorkerOrWorkletThread const*,WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>>::reinsert(a1, v12);
          v20 = v12[1];
          v12[1] = 0;
          if (!v20)
            goto LABEL_25;
          if (__ldaxr((unsigned __int8 *)v20))
          {
            __clrex();
            goto LABEL_19;
          }
          if (__stxr(1u, (unsigned __int8 *)v20))
LABEL_19:
            MEMORY[0x19AEA534C](v20);
          v22 = *(_QWORD *)(v20 + 16) - 1;
          *(_QWORD *)(v20 + 16) = v22;
          if (!v22)
          {
            v23 = *(_QWORD *)(v20 + 8);
            v24 = __ldxr((unsigned __int8 *)v20);
            if (v24 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v20))
              {
LABEL_23:
                if (!v23)
                  WTF::fastFree((WTF *)v20, v10);
                goto LABEL_25;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v20);
            goto LABEL_23;
          }
          v26 = __ldxr((unsigned __int8 *)v20);
          if (v26 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v20))
            {
LABEL_25:
              if (v12 == a3)
                v11 = v19;
              goto LABEL_27;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v20);
          goto LABEL_25;
        }
        goto LABEL_27;
      }
      v14 = v12[1];
      v12[1] = 0;
      if (!v14)
        goto LABEL_27;
      if (__ldaxr((unsigned __int8 *)v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v14))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v14);
LABEL_10:
      v16 = *(_QWORD *)(v14 + 16) - 1;
      *(_QWORD *)(v14 + 16) = v16;
      if (!v16)
      {
        v17 = *(_QWORD *)(v14 + 8);
        v18 = __ldxr((unsigned __int8 *)v14);
        if (v18 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v14))
            goto LABEL_13;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_13:
        if (!v17)
          WTF::fastFree((WTF *)v14, v10);
        goto LABEL_27;
      }
      v25 = __ldxr((unsigned __int8 *)v14);
      if (v25 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_27:
      v12 += 2;
      if (!--v13)
        goto LABEL_49;
    }
  }
  result = 0;
  if (v6)
  {
LABEL_49:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::WorkerOrWorkletThread const*,WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashMap<WebCore::WorkerOrWorkletThread const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::WorkerOrWorkletThread const*>>::reinsert(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v20;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = *(_QWORD *)(v3 + 16 * v8);
    v8 = (v8 + v9++) & v4;
  }
  while (v11);
  v12 = (_QWORD *)(v3 + 16 * v10);
  v13 = v12[1];
  v12[1] = 0;
  if (!v13)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
LABEL_8:
    MEMORY[0x19AEA534C](v13);
    goto LABEL_9;
  }
  if (__stxr(1u, (unsigned __int8 *)v13))
    goto LABEL_8;
LABEL_9:
  v15 = *(_QWORD *)(v13 + 16) - 1;
  *(_QWORD *)(v13 + 16) = v15;
  if (!v15)
  {
    v16 = *(_QWORD *)(v13 + 8);
    v17 = __ldxr((unsigned __int8 *)v13);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_12:
    if (!v16)
      WTF::fastFree((WTF *)v13, a2);
    goto LABEL_14;
  }
  v20 = __ldxr((unsigned __int8 *)v13);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v13);
LABEL_14:
  *v12 = *a2;
  v18 = a2[1];
  a2[1] = 0;
  v12[1] = v18;
  return v12;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::String>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::String,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (int *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
          v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
          do
          {
            v19 = v18 & v15;
            v18 = ++v16 + v19;
          }
          while (*(_DWORD *)(v14 + 16 * v19));
          v20 = v14 + 16 * v19;
          v21 = *(WTF::StringImpl **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v8);
            else
              *(_DWORD *)v21 -= 2;
          }
          *(_DWORD *)v20 = *v10;
          v22 = v4 + 16 * v9;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          *(_QWORD *)(v20 + 8) = v23;
          v13 = *(WTF::StringImpl **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v13)
            goto LABEL_22;
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_22;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              goto LABEL_24;
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_22:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unint64_t WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::ThreadCPUInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *((_DWORD *)v9 + 4);
          *((_BYTE *)v7 + 20) = *((_BYTE *)v9 + 20);
          v7[4] = v11;
          v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 6;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCPeerConnectionState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl;
    unk_1EE2F4B10 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl;
    qword_1EE2F4B18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl;
    unk_1EE2F4B20 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl;
    qword_1EE2F4B28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl;
    unk_1EE2F4B30 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCPriorityType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4B48 = &WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_1::operator() const(void)::impl;
    qword_1EE2F4B50 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_2::operator() const(void)::impl;
    unk_1EE2F4B58 = &WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::$_3::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCPriorityType)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::RTCPriorityType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  int v14;
  int v15;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_33:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    goto LABEL_33;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "high" && v7 == 4)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 104 || *(_WORD *)(v6 + 1) != 26473 || *((_WORD *)v6 + 1) != 26727)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 104)
        goto LABEL_16;
      v14 = *(_DWORD *)(v6 + 2);
      v15 = *((_DWORD *)v6 + 1);
      if (v14 != 6750313 || v15 != 6815847)
        goto LABEL_16;
    }
    goto LABEL_40;
  }
  if (v6 == "high" && v7 == 4)
  {
LABEL_40:
    v13 = &WebCore::parseEnumerationFromString<WebCore::RTCPriorityType>(WTF::String const&)::mappings;
    goto LABEL_41;
  }
  if (v6 != "low" && v7 == 3)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 108 || *(_WORD *)(v6 + 1) != 30575)
        goto LABEL_16;
    }
    else if (*(_WORD *)v6 != 108 || *(_DWORD *)(v6 + 2) != 7798895)
    {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (v6 == "low" && v7 == 3)
  {
LABEL_29:
    v13 = &off_1E32D5928;
LABEL_41:
    v10 = *((unsigned __int8 *)v13 + 16);
    v9 = 1;
    goto LABEL_42;
  }
  if (v6 == "medium" || v7 != 6)
  {
    if (v6 == "medium" && v7 == 6)
      goto LABEL_60;
    if (v6 == "very-low" || v7 != 8)
    {
      if (v7 != 8 || v6 != "very-low")
        goto LABEL_16;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 != 118 || *(_DWORD *)(v6 + 1) != 762933861 || *((_DWORD *)v6 + 1) != 2003790893)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 118)
        goto LABEL_16;
      if (*((_QWORD *)v6 + 1) != 0x77006F006C002DLL || *(_QWORD *)(v6 + 2) != 0x2D007900720065)
        goto LABEL_16;
    }
    v13 = &off_1E32D5958;
    goto LABEL_41;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 109 && *(_DWORD *)(v6 + 1) == 1969841253 && *(_DWORD *)(v6 + 2) == 1836411236)
      goto LABEL_60;
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_42;
  }
  if (*(_WORD *)v6 != 109)
    goto LABEL_16;
  v9 = 0;
  if (*(_QWORD *)(v6 + 2) == 0x75006900640065)
  {
    v10 = 0;
    if (*(_QWORD *)(v6 + 4) == 0x6D007500690064)
    {
LABEL_60:
      v13 = &off_1E32D5940;
      goto LABEL_41;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_42:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

unsigned __int8 *WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::RTCRtpCapabilities *a4)
{
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  JSValue v46;
  void *v47;
  JSC::VM *v48;
  uint64_t v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  JSC::VM *v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t i;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  unsigned __int8 *v69;
  unsigned int v70;
  unsigned int v71;
  JSValue v72;
  void *v73;
  JSC::VM *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  _QWORD *v81;
  _QWORD *v82;
  WebCore::JSDOMGlobalObject *v83;
  unsigned __int8 *v84;
  JSC::VM *v85;
  JSC::VM *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  JSC::VM *v95;
  WTF *v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;

  v7 = *((_QWORD *)this + 7);
  v8 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v9 = 8 * *(unsigned __int8 *)(v8 + 14);
  v10 = JSC::allocateCell<JSC::JSFinalObject>(v7, v9 + 16);
  v11 = *(_DWORD *)(v8 + 8);
  *(_DWORD *)v10 = v8 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  v84 = (unsigned __int8 *)v10;
  bzero((void *)(v10 + 16), v9);
  v85 = (JSC::VM *)v7;
  if (*(_BYTE *)(v7 + 755))
    __dmb(0xAu);
  v86 = (JSC::VM *)*((_QWORD *)this + 7);
  v95 = v86;
  LOBYTE(v87) = 0;
  v88 = 0x800000000;
  v89 = (WTF *)((char *)&v90 + 8);
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  v12 = *((_DWORD *)a3 + 3);
  if (v12 >= 9)
  {
    LOBYTE(v87) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v88) == 1;
    v12 = *((_DWORD *)a3 + 3);
  }
  v83 = a3;
  if (v12)
  {
    v13 = 32 * v12;
    v14 = (unsigned __int16 *)(*(_QWORD *)a3 + 16);
    do
    {
      v15 = *((_QWORD *)this + 7);
      v16 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v17 = 8 * *(unsigned __int8 *)(v16 + 14);
      v18 = JSC::allocateCell<JSC::JSFinalObject>(v15, v17 + 16);
      v19 = *(_DWORD *)(v16 + 8);
      *(_DWORD *)v18 = v16 >> 4;
      *(_DWORD *)(v18 + 4) = v19;
      *(_QWORD *)(v18 + 8) = 0;
      bzero((void *)(v18 + 16), v17);
      if (*(_BYTE *)(v15 + 755))
        __dmb(0xAu);
      if (*((_BYTE *)v14 + 2))
      {
        v20 = *v14;
        if (*(_DWORD *)(v15 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
        {
          v18 = 0;
          goto LABEL_41;
        }
        WTF::AtomStringImpl::addLiteral();
        v21 = v96;
        v96 = 0;
        v97 = v18;
        v98 = -1;
        v99 = 0x1000000;
        v100 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v15, (unint64_t)v21, v20 | 0xFFFE000000000000, 0, (uint64_t)&v96);
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v22);
          else
            *(_DWORD *)v21 -= 2;
        }
      }
      v23 = *((_QWORD *)v14 - 1);
      if ((int)v23 < 0)
        v24 = COERCE__INT64((double)v23) + 0x2000000000000;
      else
        v24 = *((_QWORD *)v14 - 1) | 0xFFFE000000000000;
      if (*(_DWORD *)(v15 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) != 0)
        goto LABEL_75;
      WTF::AtomStringImpl::addLiteral();
      v25 = v96;
      v96 = 0;
      v97 = v18;
      v98 = -1;
      v99 = 0x1000000;
      v100 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v15, (unint64_t)v25, v24, 0, (uint64_t)&v96);
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v26);
        else
          *(_DWORD *)v25 -= 2;
      }
      v27 = *((_QWORD *)this + 7);
      v28 = *((_QWORD *)v14 - 2);
      if (v28 && (v29 = *(_DWORD *)(v28 + 4)) != 0)
      {
        if (v29 == 1)
        {
          v40 = *(unsigned __int8 **)(v28 + 8);
          if ((*(_BYTE *)(v28 + 16) & 4) != 0)
          {
            v41 = *v40;
LABEL_54:
            v30 = *(_QWORD *)(v27 + 8 * v41 + 42216);
            goto LABEL_27;
          }
          v44 = *(unsigned __int16 *)v40;
          if (v44 <= 0xFF)
          {
            v41 = v44;
            goto LABEL_54;
          }
        }
        v30 = *(_QWORD *)(v27 + 64760);
        if (!v30 || v28 != *(_QWORD *)(v30 + 8))
          v30 = JSC::jsStringWithCacheSlowCase();
      }
      else
      {
        v30 = *(_QWORD *)(v27 + 41968);
      }
LABEL_27:
      if (!*(_DWORD *)(v15 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v31 = v96;
        v96 = 0;
        v97 = v18;
        v98 = -1;
        v99 = 0x1000000;
        v100 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v15, (unint64_t)v31, v30, 0, (uint64_t)&v96);
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v32);
          else
            *(_DWORD *)v31 -= 2;
        }
        v33 = *((_QWORD *)v14 + 1);
        if (!v33)
          goto LABEL_41;
        v34 = *((_QWORD *)this + 7);
        v35 = *(_DWORD *)(v33 + 4);
        if (v35)
        {
          if (v35 != 1)
            goto LABEL_34;
          v42 = *(unsigned __int8 **)(v33 + 8);
          if ((*(_BYTE *)(v33 + 16) & 4) != 0)
          {
            v43 = *v42;
            goto LABEL_58;
          }
          v45 = *(unsigned __int16 *)v42;
          if (v45 > 0xFF)
          {
LABEL_34:
            v36 = *(_QWORD *)(v34 + 64760);
            if (!v36 || v33 != *(_QWORD *)(v36 + 8))
              v36 = JSC::jsStringWithCacheSlowCase();
          }
          else
          {
            v43 = v45;
LABEL_58:
            v36 = *(_QWORD *)(v34 + 8 * v43 + 42216);
          }
        }
        else
        {
          v36 = *(_QWORD *)(v34 + 41968);
        }
        if (!*(_DWORD *)(v15 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v37 = v96;
          v96 = 0;
          v97 = v18;
          v98 = -1;
          v99 = 0x1000000;
          v100 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v18, (JSC::VM *)v15, (unint64_t)v37, v36, 0, (uint64_t)&v96);
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v38);
            else
              *(_DWORD *)v37 -= 2;
          }
          goto LABEL_41;
        }
      }
LABEL_75:
      v18 = 0;
LABEL_41:
      if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
        goto LABEL_141;
      v39 = v88;
      if ((_DWORD)v88 == HIDWORD(v88) || v89 != (WTF *)((char *)&v90 + 8) && v89)
      {
        v46.super.isa = (Class)v18;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v88, v46) == 1)
          LOBYTE(v87) = 1;
      }
      else
      {
        *((_QWORD *)v89 + v88) = v18;
        LODWORD(v88) = v39 + 1;
      }
      v14 += 16;
      v13 -= 32;
    }
    while (v13);
  }
  if ((_BYTE)v87)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v96 = v89;
    LODWORD(v97) = v88;
    v48 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (!*((_DWORD *)v48 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v48) & 1) == 0)
    {
      v49 = JSC::constructArray();
      goto LABEL_79;
    }
  }
LABEL_141:
  v49 = 0;
LABEL_79:
  v50 = (uint64_t *)v90;
  if ((_QWORD)v90)
  {
    v96 = (WTF *)&v88;
    v81 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v90, (uint64_t *)&v96);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v50, v81);
  }
  if (v89 != (WTF *)((char *)&v90 + 8) && v89)
    WTF::fastFree(v89, v47);
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v51 = v87;
  v87 = 0;
  v88 = (uint64_t)v84;
  v89 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v90 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v84, v85, (unint64_t)v51, v49, 0, (uint64_t)&v87);
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v52);
    else
      *(_DWORD *)v51 -= 2;
  }
  v53 = (JSC::VM *)*((_QWORD *)this + 7);
  v95 = v53;
  LOBYTE(v87) = 0;
  v88 = 0x800000000;
  v89 = (WTF *)((char *)&v90 + 8);
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  v54 = *((_DWORD *)v83 + 7);
  if (v54 >= 9)
  {
    LOBYTE(v87) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v88) == 1;
    v54 = *((_DWORD *)v83 + 7);
    if (v54)
      goto LABEL_88;
  }
  else if (v54)
  {
LABEL_88:
    v55 = (uint64_t *)*((_QWORD *)v83 + 2);
    for (i = 8 * v54; i; i -= 8)
    {
      v57 = *((_QWORD *)this + 7);
      v58 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v59 = 8 * *(unsigned __int8 *)(v58 + 14);
      v60 = JSC::allocateCell<JSC::JSFinalObject>(v57, v59 + 16);
      v61 = *(_DWORD *)(v58 + 8);
      *(_DWORD *)v60 = v58 >> 4;
      *(_DWORD *)(v60 + 4) = v61;
      *(_QWORD *)(v60 + 8) = 0;
      bzero((void *)(v60 + 16), v59);
      if (*(_BYTE *)(v57 + 755))
        __dmb(0xAu);
      v62 = *v55;
      if (!*v55)
        goto LABEL_101;
      v63 = *((_QWORD *)this + 7);
      v64 = *(_DWORD *)(v62 + 4);
      if (v64)
      {
        if (v64 != 1)
          goto LABEL_94;
        v69 = *(unsigned __int8 **)(v62 + 8);
        if ((*(_BYTE *)(v62 + 16) & 4) != 0)
        {
          v70 = *v69;
        }
        else
        {
          v71 = *(unsigned __int16 *)v69;
          if (v71 > 0xFF)
          {
LABEL_94:
            v65 = *(_QWORD *)(v63 + 64760);
            if (!v65 || v62 != *(_QWORD *)(v65 + 8))
              v65 = JSC::jsStringWithCacheSlowCase();
            goto LABEL_97;
          }
          v70 = v71;
        }
        v65 = *(_QWORD *)(v63 + 8 * v70 + 42216);
      }
      else
      {
        v65 = *(_QWORD *)(v63 + 41968);
      }
LABEL_97:
      if (*(_DWORD *)(v57 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v57) & 1) != 0)
      {
        v60 = 0;
      }
      else
      {
        WTF::AtomStringImpl::addLiteral();
        v66 = v96;
        v96 = 0;
        v97 = v60;
        v98 = -1;
        v99 = 0x1000000;
        v100 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v60, (JSC::VM *)v57, (unint64_t)v66, v65, 0, (uint64_t)&v96);
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, v67);
          else
            *(_DWORD *)v66 -= 2;
        }
      }
LABEL_101:
      if (*((_DWORD *)v53 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
        goto LABEL_146;
      v68 = v88;
      if ((_DWORD)v88 == HIDWORD(v88) || v89 != (WTF *)((char *)&v90 + 8) && v89)
      {
        v72.super.isa = (Class)v60;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v88, v72) == 1)
          LOBYTE(v87) = 1;
      }
      else
      {
        *((_QWORD *)v89 + v88) = v60;
        LODWORD(v88) = v68 + 1;
      }
      ++v55;
    }
  }
  if ((_BYTE)v87)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v96 = v89;
    LODWORD(v97) = v88;
    v74 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if (!*((_DWORD *)v74 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) == 0)
    {
      v75 = JSC::constructArray();
      goto LABEL_128;
    }
  }
LABEL_146:
  v75 = 0;
LABEL_128:
  v76 = v84;
  v77 = (uint64_t *)v90;
  if ((_QWORD)v90)
  {
    v96 = (WTF *)&v88;
    v82 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>((uint64_t *)v90, (uint64_t *)&v96);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v77, v82);
  }
  if (v89 != (WTF *)((char *)&v90 + 8) && v89)
    WTF::fastFree(v89, v73);
  if (*((_DWORD *)v85 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v85) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v78 = v87;
  v87 = 0;
  v88 = (uint64_t)v84;
  v89 = (WTF *)0x1000000FFFFFFFFLL;
  *(_QWORD *)&v90 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v84, v85, (unint64_t)v78, v75, 0, (uint64_t)&v87);
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v79);
    else
      *(_DWORD *)v78 -= 2;
  }
  return v76;
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::RTCRtpEncodingParameters>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  JSC::VM *v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned __int16 v16;
  double v17;
  char v18;
  JSC::JSGlobalObject *v19;
  uint64_t Object;
  JSC::Structure *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  JSC::VM *v33;
  double v34;
  BOOL v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  JSC::Structure *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  __int16 v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  JSC::VM *v68;
  uint64_t v69;
  JSC::Structure *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v82;
  double v83;
  BOOL v84;
  int v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  int v99;
  __int16 v100;
  char v101;
  JSC::VM *v102;
  WTF::StringImpl *v103;
  JSC::VM *v104;

  v7 = (JSC::VM *)*((_QWORD *)result + 7);
  v102 = v7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v8 = 0;
    LOBYTE(v9) = 0;
    v10 = 0;
    v11 = 0;
    LOBYTE(v12) = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    LOBYTE(v16) = 1;
    v17 = 1.0;
    v18 = 1;
LABEL_123:
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v15;
    *(_QWORD *)(a3 + 16) = v5;
    *(_QWORD *)(a3 + 24) = v4;
    *(_DWORD *)(a3 + 32) = v12 | (v3 << 8);
    *(_BYTE *)(a3 + 36) = v13;
    *(_WORD *)(a3 + 37) = v100;
    *(_BYTE *)(a3 + 39) = v101;
    *(_BYTE *)(a3 + 40) = v18;
    *(_BYTE *)(a3 + 41) = v16;
    *(_WORD *)(a3 + 42) = v9 | (unsigned __int16)(v8 << 8);
    *(_QWORD *)(a3 + 48) = v11;
    *(_QWORD *)(a3 + 56) = v10;
    *(double *)(a3 + 64) = v17;
    *(_DWORD *)(a3 + 72) = 0;
    return result;
  }
  v19 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
LABEL_143:
    *(_DWORD *)(a3 + 72) = 1;
    return result;
  }
  v21 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v23 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, v22);
    else
      *(_DWORD *)v98 -= 2;
  }
  if (*((_DWORD *)v7 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
    if ((_DWORD)result)
      goto LABEL_143;
  }
  if (v23 == 10)
  {
    v97 = 0;
    goto LABEL_21;
  }
  v104 = (JSC::VM *)v23;
  v24 = (JSC::VM *)*((_QWORD *)v19 + 7);
  if ((v23 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v23 + 5) == 2)
  {
    v25 = *(WTF::StringImpl **)(v23 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, v19);
      if (!v25)
        goto LABEL_16;
    }
    else if (!v25)
    {
LABEL_16:
      v103 = v25;
      goto LABEL_17;
    }
    *(_DWORD *)v25 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v104, v19);
LABEL_17:
  if (!*((_DWORD *)v24 + 20))
  {
    v26 = v103;
LABEL_19:
    v97 = v26;
    v99 = 0;
    v27 = 0;
    v98 = 0;
    v28 = 1;
    goto LABEL_20;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
  v26 = v103;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0)
    goto LABEL_19;
  v27 = 1;
  v99 = 1;
  v103 = 0;
  if (!v26)
    goto LABEL_176;
  if (*(_DWORD *)v26 != 2)
  {
    *(_DWORD *)v26 -= 2;
LABEL_176:
    v97 = 0;
    v28 = 0;
    *(_DWORD *)(a3 + 72) = 1;
    goto LABEL_20;
  }
  WTF::StringImpl::destroy(v26, v82);
  v27 = v99;
  *(_DWORD *)(a3 + 72) = 1;
  v97 = 0;
  v28 = 0;
LABEL_20:
  ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32DAE20[v27])(&v104, &v98);
  if (!v28)
    goto LABEL_146;
LABEL_21:
  WTF::AtomStringImpl::addLiteral();
  v30 = v98;
  v32 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v31);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v32 == 10)
  {
    v96 = 1;
    goto LABEL_32;
  }
  v33 = (JSC::VM *)*((_QWORD *)v19 + 7);
  if (v32 >= 0xFFFE000000000000)
  {
    v84 = (_DWORD)v32 == 0;
    goto LABEL_205;
  }
  *(_QWORD *)&v34 = v32 - 0x2000000000000;
  if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v34 <= 0.0)
    {
      v35 = v34 < 0.0;
      goto LABEL_31;
    }
    goto LABEL_209;
  }
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    v35 = v32 == 7;
    goto LABEL_31;
  }
  v85 = *(unsigned __int8 *)(v32 + 5);
  if (v85 == 3)
  {
    v88 = *(_DWORD *)(v32 + 8);
LABEL_204:
    v84 = v88 == 0;
    goto LABEL_205;
  }
  if (v85 == 2)
  {
    v86 = *(_QWORD *)(v32 + 8);
    if ((v86 & 1) != 0)
      v87 = (int *)(v32 + 16);
    else
      v87 = (int *)(v86 + 4);
    v88 = *v87;
    goto LABEL_204;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_209:
    v35 = 1;
    goto LABEL_31;
  }
  v84 = *(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x28) == (_QWORD)v19;
LABEL_205:
  v35 = !v84;
LABEL_31:
  v96 = v35;
  if (*((_DWORD *)v33 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v33))
    goto LABEL_145;
LABEL_32:
  WTF::AtomStringImpl::addLiteral();
  v36 = v98;
  v38 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v37);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v38 == 10)
  {
    v95 = 0;
    LOBYTE(v12) = 0;
  }
  else
  {
    v98 = (WTF::StringImpl *)*((_QWORD *)v19 + 7);
    v39 = v98;
    v12 = WebCore::parseEnumeration<WebCore::RTCDtxStatus>(v19, v38);
    if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      goto LABEL_145;
    if ((v12 & 0xFF00000000) == 0)
      goto LABEL_144;
    v91 = v12 >> 8;
    v95 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v40 = v98;
  v42 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v42 != 10)
  {
    v43 = (JSC::VM *)*((_QWORD *)v19 + 7);
    v104 = v43;
    if ((v42 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((v42 & 0xFFFE000000000002) != 0)
        goto LABEL_144;
      v44 = JSC::JSCell::getObject((JSC::JSCell *)v42);
      if (!v44)
        goto LABEL_144;
      v45 = (JSC::Structure *)v44;
      WTF::AtomStringImpl::addLiteral();
      v46 = v98;
      v48 = JSC::JSObject::get(v45, v19, (unint64_t)v98);
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v47);
        else
          *(_DWORD *)v46 -= 2;
      }
      if (*((_DWORD *)v43 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) != 0)
        goto LABEL_145;
      if (v48 != 10)
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v19, v48, &v98);
        if (HIDWORD(v98))
          goto LABEL_145;
        v90 = v98;
      }
    }
  }
  WTF::AtomStringImpl::addLiteral();
  v49 = v98;
  v51 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v50);
    else
      *(_DWORD *)v49 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v51 == 10)
  {
    v52 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v19, v51, &v98);
    if (HIDWORD(v98))
      goto LABEL_145;
    v52 = v98;
  }
  WTF::AtomStringImpl::addLiteral();
  v53 = v98;
  v55 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v54);
    else
      *(_DWORD *)v53 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v55 == 10)
  {
    v93 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v19, v55, &v98);
    if (HIDWORD(v98))
      goto LABEL_145;
    v93 = v98;
  }
  WTF::AtomStringImpl::addLiteral();
  v56 = v98;
  v58 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v57);
    else
      *(_DWORD *)v56 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  v94 = v52;
  if (v58 == 10)
  {
    LOBYTE(v9) = 0;
    v59 = 0;
  }
  else
  {
    v98 = (WTF::StringImpl *)*((_QWORD *)v19 + 7);
    v60 = v98;
    v9 = WebCore::parseEnumeration<WebCore::RTCPriorityType>(v19, v58);
    if (*((_DWORD *)v60 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v60) & 1) != 0)
      goto LABEL_145;
    if (v9 <= 0xFFu)
      goto LABEL_144;
    v59 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v61 = v98;
  v63 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v62);
    else
      *(_DWORD *)v61 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  v92 = v59;
  if (v63 == 10)
  {
    LOBYTE(v16) = 1;
  }
  else
  {
    v98 = (WTF::StringImpl *)*((_QWORD *)v19 + 7);
    v64 = v98;
    v16 = WebCore::parseEnumeration<WebCore::RTCPriorityType>(v19, v63);
    if (*((_DWORD *)v64 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v64) & 1) != 0)
      goto LABEL_145;
    if (v16 <= 0xFFu)
      goto LABEL_144;
  }
  WTF::AtomStringImpl::addLiteral();
  v65 = v98;
  v67 = JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, v66);
    else
      *(_DWORD *)v65 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  if (v67 != 10)
  {
    v68 = (JSC::VM *)*((_QWORD *)v19 + 7);
    v104 = v68;
    if ((v67 & 0xFFFFFFFFFFFFFFF7) != 2)
    {
      if ((v67 & 0xFFFE000000000002) == 0)
      {
        v69 = JSC::JSCell::getObject((JSC::JSCell *)v67);
        if (v69)
        {
          v70 = (JSC::Structure *)v69;
          WTF::AtomStringImpl::addLiteral();
          v71 = v98;
          v73 = JSC::JSObject::get(v70, v19, (unint64_t)v98);
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
              WTF::StringImpl::destroy(v71, v72);
            else
              *(_DWORD *)v71 -= 2;
          }
          if (*((_DWORD *)v68 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v68) & 1) != 0)
            goto LABEL_145;
          if (v73 != 10)
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v19, v73, &v98);
            if (HIDWORD(v98))
              goto LABEL_145;
            v89 = v98;
          }
          goto LABEL_104;
        }
      }
LABEL_144:
      JSC::throwTypeError();
      goto LABEL_145;
    }
  }
LABEL_104:
  WTF::AtomStringImpl::addLiteral();
  v74 = v98;
  v76 = (WTF::StringImpl *)JSC::JSObject::get(v21, v19, (unint64_t)v98);
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, v75);
    else
      *(_DWORD *)v74 -= 2;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    goto LABEL_145;
  v17 = 1.0;
  if (v76 == (WTF::StringImpl *)10)
    goto LABEL_114;
  v98 = v76;
  v77 = (JSC::VM *)*((_QWORD *)v19 + 7);
  v104 = v77;
  if ((unint64_t)v76 >= 0xFFFE000000000000)
  {
    v17 = (double)(int)v76;
  }
  else if ((unint64_t)v76 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v98, v19);
    v17 = v83;
  }
  else
  {
    *(_QWORD *)&v17 = (char *)v76 - 0x2000000000000;
  }
  if (*((_DWORD *)v77 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v77) & 1) != 0)
    goto LABEL_145;
  if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
LABEL_114:
    WTF::AtomStringImpl::addLiteral();
    v78 = v98;
    result = (JSC::JSGlobalObject *)JSC::JSObject::get(v21, v19, (unint64_t)v98);
    v80 = (unint64_t)result;
    v11 = v94;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v78, v79);
      else
        *(_DWORD *)v78 -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_145;
    }
    v8 = v92;
    if (v80 == 10)
    {
      v15 = 0;
      v14 = v97;
LABEL_122:
      v13 = v95;
      v18 = v96;
      v3 = v91;
      v5 = v89;
      v4 = v90;
      v10 = v93;
      goto LABEL_123;
    }
    result = (JSC::JSGlobalObject *)WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v19, v80, &v98);
    v14 = v97;
    if (!HIDWORD(v98))
    {
      v15 = v98;
      goto LABEL_122;
    }
  }
  else
  {
    JSC::throwTypeError();
  }
LABEL_145:
  *(_DWORD *)(a3 + 72) = 1;
LABEL_146:
  result = v97;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      return (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v97, v29);
    else
      *(_DWORD *)v97 -= 2;
  }
  return result;
}

WebCore::RTCRtpReceiver *WebCore::JSRTCRtpReceiver::destroy(WebCore::JSRTCRtpReceiver *this, JSC::JSCell *a2)
{
  WebCore::RTCRtpReceiver *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::RTCRtpReceiver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(result, a2);
      return (WebCore::RTCRtpReceiver *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSRTCRtpReceiver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpReceiverPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpReceiverPrototype::create(WebCore::JSRTCRtpReceiverPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WebCore::JSDOMGlobalObject *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  JSC::Structure *v24;
  int v25;
  unint64_t v27;
  WTF::StringImpl *v28[6];
  int v29;
  int v30;
  JSC::Structure *v31;
  int v32;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v27);
    *((_QWORD *)this + 4865) = SlowCase + (int)v27;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSRTCRtpReceiver::s_info, (uint64_t)&WebCore::JSRTCRtpReceiverPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSDOMWindowBase::s_info;
  else
    v13 = 1;
  if (!v13)
  {
    do
    {
      v12 = (char **)v12[2];
      v11 = v12 != 0;
    }
    while (v12 != &WebCore::JSDOMWindowBase::s_info && v12 != 0);
  }
  if (!v11)
    goto LABEL_20;
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v9);
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E58038);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v16 + 680) + 720) & 0x8000) == 0)
  {
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v17 = v28[0];
    v18 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v28[0]) = -1;
    WORD2(v28[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v18;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v19);
      else
        *(_DWORD *)v17 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v20 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22 = JSC::JSString::create((uint64_t)this, v28);
  v23 = v28[0];
  v28[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v21);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v32 = *(_DWORD *)SlowCase;
  v31 = v24;
  v25 = JSC::Structure::outOfLineCapacity(v24);
  v29 = 0;
  v30 = v25;
  v28[0] = (WTF::StringImpl *)&v30;
  v28[1] = (WTF::StringImpl *)SlowCase;
  v28[2] = this;
  v28[3] = (WTF::StringImpl *)&v32;
  v28[4] = (WTF::StringImpl *)&v31;
  v28[5] = (WTF::StringImpl *)&v29;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v24, this, v20, 6, (uint64_t)v28);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v29, v22);
  *((_DWORD *)v24 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpReceiver>,(WebCore::DOMConstructorID)160>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1280);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v36) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpReceiver>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v35);
    v9[2848] = v2 + (int)v35;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v36);
  v13 = v36;
  v36 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v36);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSRTCRtpReceiver::s_info + ~((_QWORD)&WebCore::JSRTCRtpReceiver::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpReceiver::s_info + ~((_QWORD)&WebCore::JSRTCRtpReceiver::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSRTCRtpReceiver::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSRTCRtpReceiver::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSRTCRtpReceiverPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSRTCRtpReceiverPrototype::create((WebCore::JSRTCRtpReceiverPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSRTCRtpReceiver::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCRtpReceiver::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v36);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v31 = v36;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSRTCRtpReceiver::s_info, (unint64_t *)&v36, (uint64_t)&WebCore::JSRTCRtpReceiverConstructorTableValues, (unsigned __int8 *)v2);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1280) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpReceiverConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpReceiverPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpReceiver>,(WebCore::DOMConstructorID)160>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCRtpReceiver_track(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::MediaStreamTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsRTCRtpReceiver_transport(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v2)
    return WebCore::wrap<WebCore::RTCDtlsTransport>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCRtpReceiver_transform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[8];
  unsigned int v11;
  char v12;
  _BYTE v13[8];
  int v14;
  _BYTE v15[40];
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (!v2)
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v19) = 0;
  LODWORD(v20) = -1;
  v5 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v5 == -1)
  {
    v10[0] = 0;
    v11 = -1;
    v12 = 1;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v5])(v15, &v19, v2 + 8);
    LODWORD(v20) = v5;
    v10[0] = 0;
    v11 = -1;
    ((void (*)(_BYTE *, _BYTE *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v5])(v15, v10, &v19);
    v11 = v5;
    v12 = 1;
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(_BYTE *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(v15, &v19);
      if (!v12)
        return 2;
    }
  }
  v13[0] = 0;
  v14 = -1;
  v7 = v11;
  if (v11 == -1)
  {
    v7 = -1;
  }
  else
  {
    ((void (*)(uint64_t **, _BYTE *, _BYTE *))off_1E32DCD78[v11])(&v19, v13, v10);
    v14 = v7;
  }
  LOBYTE(v16) = 0;
  v17 = 0;
  v18 = v7;
  v19 = &v18;
  v20 = &v16;
  v21 = a1;
  v22 = v4;
  v23 = v13;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_21RTCRtpSFrameTransformEEENS4_INS_21RTCRtpScriptTransformEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((unint64_t)v15, &v19);
  if (v17)
  {
    v6 = v16;
    if (v14 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E32DCD68[v14])(&v19, v13);
    if (v12)
    {
      if (v11 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E32DCD68[v11])(&v19, v10);
    }
    return v6;
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSRTCRtpReceiver_transform(v9);
}

BOOL WebCore::setJSRTCRtpReceiver_transform(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::RTCRtpTransform *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WebCore::RTCRtpTransform *v26;
  char v27;
  _BYTE v28[8];
  _BYTE v29[8];
  int v30;
  char v31;
  int v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;
  char v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCRtpReceiver::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCRtpReceiver::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::RTCRtpTransform **)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v29[0] = 0;
    v31 = 0;
    v32 = 0;
    v33[0] = 0;
    v35 = 0;
    goto LABEL_22;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::RTCRtpSFrameTransform>,WebCore::IDLInterface<WebCore::RTCRtpScriptTransform>>>::convert((uint64_t)v33, a1, a3);
  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>((uint64_t)v28, (uint64_t)v33);
  if (v36 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32DCD98[v36])(&v23, &v34);
  v11 = v32;
  if (!v32)
  {
    v33[0] = 0;
    v35 = 0;
    if (v31)
    {
      LODWORD(v34) = -1;
      v12 = v30;
      if (v30 != -1)
      {
        ((void (*)(WebCore::RTCRtpTransform **, _BYTE *, _BYTE *))off_1E32DCD88[v30])(&v26, v33, v29);
        LODWORD(v34) = v12;
      }
      v35 = 1;
      v13 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = -1;
      v14 = (int)v34;
      if ((_DWORD)v34 != -1)
      {
        ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v34])(&v27, v13 + 8, v33);
        *(_DWORD *)(v13 + 16) = v14;
      }
      goto LABEL_23;
    }
LABEL_22:
    v13 = 0;
LABEL_23:
    v26 = (WebCore::RTCRtpTransform *)v13;
    WebCore::RTCRtpReceiver::setTransform(v10, (uint64_t **)&v26, &v23);
    if (v26)
    {
      WebCore::RTCRtpTransform::~RTCRtpTransform(v26);
      WTF::fastFree(v15, v16);
    }
    if (v35 && (_DWORD)v34 != -1)
      ((void (*)(WebCore::RTCRtpTransform **, _BYTE *))off_1E32DCD68[v34])(&v26, v33);
    if (v25)
    {
      v19 = (WTF::StringImpl *)v23;
      v33[0] = v23;
      v20 = v24;
      v24 = 0;
      v34 = v20;
      if (!*((_QWORD *)v4 + 2))
      {
        v21.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v34);
        JSC::VM::throwException(v4, a1, v21);
        v20 = v34;
      }
      v34 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (v25)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v19);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
    }
    v17 = 1;
    v11 = v32;
    goto LABEL_30;
  }
  v17 = 0;
LABEL_30:
  if (v11 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E32DCDA8[v11])(v33, v29);
  return v17;
}

uint64_t WebCore::JSRTCRtpReceiverOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCRtpReceiverOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::RTCRtpReceiver *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCRtpReceiver *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCRtpReceiver **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 16);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCRtpReceiver **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCRtpReceiver **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::RTCRtpReceiver::~RTCRtpReceiver(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::RTCRtpReceiver>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  if (*(void (***)(WebCore::RTCRtpReceiver *__hidden))a3 != off_1E3361BC8)
  {
    __break(0xC471u);
    JUMPOUT(0x194E59060);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCRtpReceiver::s_info + ~((_QWORD)&WebCore::JSRTCRtpReceiver::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpReceiver::s_info + ~((_QWORD)&WebCore::JSRTCRtpReceiver::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCRtpReceiver::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCRtpReceiver::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCRtpReceiverPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSRTCRtpReceiverPrototype::create((WebCore::JSRTCRtpReceiverPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSRTCRtpReceiver::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSRTCRtpReceiver::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 1304);
  if (v26)
    goto LABEL_33;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 1304))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 1304);
    *(_QWORD *)(v29 + 1304) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 1304);
  *(_QWORD *)(v25 + 1304) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_33:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_34:
    v26[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3366F8 & 1) == 0)
  {
    qword_1EE3366F0 = (uint64_t)&off_1E32DAB00;
    byte_1EE3366F8 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3366F0;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE3366F0;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_57;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransform>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  JSC::JSCell *v8;
  JSC::VM *v9;
  uint64_t Object;
  JSC::Structure *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  const char *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  char **v29;
  int v31;
  JSC::VM *v32;
  uint64_t *v33;
  JSC::VM *v34;
  JSCell *v35;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  int v42;
  const char *v43;
  int v44;
  BOOL v45;
  int v46;
  char **v47;
  WebCore::JSDOMGlobalObject *v50;
  void *v51;
  JSC::JSCell *v52;
  JSC::JSGlobalObject *v53;
  JSC::JSObject *v54;
  JSC::JSGlobalObject *v55;
  JSC::VM *v56;
  JSC::JSObject *v57;
  JSC::Structure *v58;
  JSC::VM *FunctionRealm;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  int v67;
  JSC::JSCell *v68;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v70;
  JSC::Structure *v71;
  JSC::JSCell *v72;
  uint64_t v73;
  unint64_t SubclassStructure;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  int v82;
  uint64_t v84;
  JSC::VM *v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  char v89;
  _BYTE v90[7];
  JSC::VM *v91;
  uint64_t v92;
  _BYTE v93[7];
  JSC::VM *v94;
  JSC::VM *v95;
  uint64_t v96;
  WTF::StringImpl *v97;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v91 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v91, (uint64_t)"SFrameTransform", 16);
  v7 = v6;
  if (*(_DWORD *)(a2 + 32) == 1
    || (v8 = *(JSC::JSCell **)(a2 + 48),
        v9 = (JSC::VM *)*((_QWORD *)a1 + 7),
        v94 = v9,
        ((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    LODWORD(v15) = 0;
    v16 = 0;
    v17 = 10;
    goto LABEL_142;
  }
  if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
  {
LABEL_65:
    JSC::throwTypeError();
    return 0;
  }
  v11 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v13 = JSC::JSObject::get(v11, a1, (unint64_t)v97);
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, v12);
    else
      *(_DWORD *)v97 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    return 0;
  if (v13 == 10)
  {
    v92 = 10;
    v14 = 10;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v13, &v92);
    if (HIDWORD(v92))
      return 0;
    v14 = v92;
  }
  v86 = v14;
  WTF::AtomStringImpl::addLiteral();
  v18 = v97;
  v20 = JSC::JSObject::get(v11, a1, (unint64_t)v97);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v20 == 10)
  {
    v16 = 0;
    goto LABEL_82;
  }
  v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v95 = v21;
  v97 = (WTF::StringImpl *)v20;
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
  {
    v34 = v21;
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v97, a1);
    v21 = v34;
    v22 = v96;
    if (v96)
      goto LABEL_27;
LABEL_64:
    v16 = 0;
    v31 = 0;
    goto LABEL_80;
  }
  v22 = *(_QWORD *)(v20 + 8);
  if ((v22 & 1) == 0)
  {
    if (!v22)
      goto LABEL_26;
    goto LABEL_25;
  }
  v32 = v21;
  v33 = (uint64_t *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v20, a1);
  v21 = v32;
  v22 = *v33;
  if (v22)
LABEL_25:
    *(_DWORD *)v22 += 2;
LABEL_26:
  v96 = v22;
  if (!v22)
    goto LABEL_64;
LABEL_27:
  v23 = *(const char **)(v22 + 8);
  v24 = *(_DWORD *)(v22 + 4);
  v25 = ((unint64_t)*(unsigned int *)(v22 + 16) >> 2) & 1;
  v26 = v25 << 32;
  v27 = v24 != 4;
  if (v23 != "H264" && v24 == 4)
  {
    if ((_DWORD)v25)
    {
      if (*v23 != 72 || *(_WORD *)(v23 + 1) != 13874 || *((_WORD *)v23 + 1) != 13366)
      {
        v27 = 0;
LABEL_34:
        v28 = 3;
        v26 = 0x100000000;
        goto LABEL_35;
      }
      goto LABEL_45;
    }
    if (*(_WORD *)v23 == 72)
    {
      v27 = 0;
      v28 = 3;
      if (*(_DWORD *)(v23 + 2) != 3538994 || *((_DWORD *)v23 + 1) != 3407926)
        goto LABEL_35;
LABEL_45:
      v29 = &WebCore::parseEnumerationFromString<WebCore::RTCRtpSFrameTransformer::CompatibilityMode>(WTF::String const&)::mappings;
LABEL_60:
      v16 = *((_BYTE *)v29 + 16);
      v31 = 1;
      goto LABEL_78;
    }
    v27 = 0;
LABEL_186:
    v28 = 3;
    goto LABEL_35;
  }
  if (v23 == "H264" && v24 == 4)
    goto LABEL_45;
  if (v23 != "VP8" && v24 == 3)
  {
    if ((_DWORD)v25)
    {
      if (*v23 != 86 || *(_WORD *)(v23 + 1) != 14416)
        goto LABEL_34;
    }
    else if (*(_WORD *)v23 != 86 || *(_DWORD *)(v23 + 2) != 3670096)
    {
      goto LABEL_186;
    }
LABEL_53:
    v29 = &off_1E32D5CB8;
    goto LABEL_60;
  }
  v28 = *(_DWORD *)(v22 + 4);
  if (v23 == "VP8" && v24 == 3)
    goto LABEL_53;
LABEL_35:
  if (v23 == "none" || v27)
  {
    if (v24 != 4 || v23 != "none")
      goto LABEL_77;
    goto LABEL_59;
  }
  if (!v28)
    goto LABEL_59;
  if (!v26)
  {
    if (*(_WORD *)v23 != 110)
      goto LABEL_77;
    if (*((_DWORD *)v23 + 1) != 6619246 || *(_DWORD *)(v23 + 2) != 7209071)
      goto LABEL_77;
    goto LABEL_59;
  }
  if (*v23 == 110 && *(_WORD *)(v23 + 1) == 28271 && *((_WORD *)v23 + 1) == 25966)
  {
LABEL_59:
    v29 = &off_1E32D5CD0;
    goto LABEL_60;
  }
LABEL_77:
  v31 = 0;
  v16 = 0;
LABEL_78:
  v96 = 0;
  if (*(_DWORD *)v22 == 2)
  {
    v85 = v21;
    WTF::StringImpl::destroy((WTF::StringImpl *)v22, v19);
    v21 = v85;
  }
  else
  {
    *(_DWORD *)v22 -= 2;
  }
LABEL_80:
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  if (!v31)
    goto LABEL_65;
LABEL_82:
  WTF::AtomStringImpl::addLiteral();
  v37 = v97;
  v39 = JSC::JSObject::get(v11, a1, (unint64_t)v97);
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v38);
    else
      *(_DWORD *)v37 -= 2;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v39 != 10)
  {
    v40 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v95 = v40;
    v97 = (WTF::StringImpl *)v39;
    if ((v39 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v39 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v97, a1);
      v41 = v96;
      if (v96)
        goto LABEL_94;
      goto LABEL_126;
    }
    v41 = *(_QWORD *)(v39 + 8);
    if ((v41 & 1) != 0)
    {
      v41 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v39, a1);
      if (!v41)
      {
LABEL_93:
        v96 = v41;
        if (v41)
        {
LABEL_94:
          v42 = *(_DWORD *)(v41 + 16);
          v43 = *(const char **)(v41 + 8);
          v44 = *(_DWORD *)(v41 + 4);
          v45 = v44 != 7;
          if (v43 == "decrypt" || v44 != 7)
          {
            if (v43 != "decrypt")
            {
              v46 = *(_DWORD *)(v41 + 4);
              goto LABEL_101;
            }
            v46 = *(_DWORD *)(v41 + 4);
            if (v44 != 7)
            {
LABEL_101:
              if (v43 == "encrypt")
                v45 = 1;
              if (v45)
              {
                if (v44 != 7 || v43 != "encrypt")
                  goto LABEL_136;
              }
              else if (v46)
              {
                if ((v42 & 4) != 0)
                {
                  if (*v43 != 101 || *(_DWORD *)(v43 + 1) != 2037539694 || *(_DWORD *)(v43 + 3) != 1953528178)
                  {
LABEL_136:
                    v15 = 0;
LABEL_137:
                    v96 = 0;
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v41, v38);
                    else
                      *(_DWORD *)v41 -= 2;
                    goto LABEL_139;
                  }
                }
                else
                {
                  if (*(_WORD *)v43 != 101)
                    goto LABEL_136;
                  if (*(_QWORD *)(v43 + 6) != 0x74007000790072 || *(_QWORD *)(v43 + 2) != 0x7900720063006ELL)
                    goto LABEL_136;
                }
              }
              v47 = &off_1E32D5C88;
LABEL_120:
              v15 = *((unsigned int *)v47 + 4) | 0x100000000;
              goto LABEL_137;
            }
          }
          else if ((v42 & 4) != 0)
          {
            if (*v43 != 100 || *(_DWORD *)(v43 + 1) != 2037539685 || *(_DWORD *)(v43 + 3) != 1953528178)
              goto LABEL_100;
          }
          else
          {
            if (*(_WORD *)v43 != 100)
            {
LABEL_100:
              v46 = 7;
              goto LABEL_101;
            }
            v46 = 7;
            if (*(_QWORD *)(v43 + 2) != 0x79007200630065 || *(_QWORD *)(v43 + 6) != 0x74007000790072)
              goto LABEL_101;
          }
          v47 = &WebCore::parseEnumerationFromString<WebCore::RTCRtpSFrameTransform::Role>(WTF::String const&)::mappings;
          goto LABEL_120;
        }
LABEL_126:
        v15 = 0;
LABEL_139:
        if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
          return 0;
        if (HIDWORD(v15))
          goto LABEL_141;
        goto LABEL_65;
      }
    }
    else if (!v41)
    {
      goto LABEL_93;
    }
    *(_DWORD *)v41 += 2;
    goto LABEL_93;
  }
  LODWORD(v15) = 0;
LABEL_141:
  v17 = v86;
LABEL_142:
  *(_DWORD *)v90 = *(_DWORD *)v93;
  *(_DWORD *)&v90[3] = *(_DWORD *)&v93[3];
  v87 = v15;
  v88 = v17;
  v89 = v16;
  WebCore::RTCRtpSFrameTransform::create(v7, &v87, (uint64_t *)&v97);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v97 != &off_1E3361C08)
  {
    __break(0xC471u);
    JUMPOUT(0x194E59A80);
  }
  v35 = (JSCell *)WebCore::createWrapper<WebCore::RTCRtpSFrameTransform,WebCore::RTCRtpSFrameTransform>(*(JSC::VM **)(v5 + 40), (JSC::VM *)&v97, v50);
  v52 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v52 & 0xFFFE000000000002) == 0)
  {
    v53 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v52);
    if (v53)
    {
      v55 = v53;
      if (v53 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v56 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v53, v54);
        if (!*((_DWORD *)v56 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) == 0)
        {
          v60 = *((_QWORD *)FunctionRealm + 412);
          if (v60)
          {
            v61 = *(_DWORD *)(v60 - 8);
            v62 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
                 + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
                                                                                 + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) >> 22);
            v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
            v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
            v65 = v61 & ((v64 >> 31) ^ v64);
            v66 = *(char ***)(v60 + 16 * v65);
            if (v66 == &WebCore::JSRTCRtpSFrameTransform::s_info)
            {
LABEL_152:
              v57 = *(JSC::JSObject **)(v60 + 16 * v65 + 8);
              if (v57)
              {
LABEL_154:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v55, v57, v58);
                if (!*((_DWORD *)v56 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v56) & 1) == 0)
                  JSC::JSObject::setStructure(v35, v56, SubclassStructure);
                goto LABEL_156;
              }
            }
            else
            {
              v67 = 1;
              while (v66)
              {
                v65 = ((_DWORD)v65 + v67) & v61;
                v66 = *(char ***)(v60 + 16 * v65);
                ++v67;
                if (v66 == &WebCore::JSRTCRtpSFrameTransform::s_info)
                  goto LABEL_152;
              }
            }
          }
          v68 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v56, FunctionRealm, v57);
          Structure = WebCore::JSRTCRtpSFrameTransformPrototype::createStructure((uint64_t *)v56, (uint64_t)FunctionRealm, v68);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v72 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformPrototype::create(v56, Structure, v70, v71);
          v73 = WebCore::JSRTCRtpSFrameTransform::createStructure((uint64_t *)v56, (uint64_t)FunctionRealm, v72);
          v57 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v73, (uint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info);
          goto LABEL_154;
        }
      }
    }
  }
LABEL_156:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v35 = 0;
  v75 = v97;
  v97 = 0;
  if (v75)
  {
    v76 = *((_QWORD *)v75 + 3);
    if (__ldaxr((unsigned __int8 *)v76))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v76))
    {
      goto LABEL_162;
    }
    MEMORY[0x19AEA534C](v76);
LABEL_162:
    v78 = *(_QWORD *)(v76 + 8);
    v79 = v78 - 1;
    *(_QWORD *)(v76 + 8) = v78 - 1;
    if (v78 == 1)
    {
      v84 = *(_QWORD *)(v76 + 16);
      v80 = *(_QWORD *)(v76 + 24);
      *(_QWORD *)(v76 + 24) = 0;
      v81 = v84 != 0;
    }
    else
    {
      v80 = 0;
      v81 = 1;
    }
    v82 = __ldxr((unsigned __int8 *)v76);
    if (v82 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v76))
      {
        if (v79)
          return v35;
        goto LABEL_170;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v76);
    if (v79)
      return v35;
LABEL_170:
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
    if (!v81)
      WTF::fastFree((WTF *)v76, v51);
  }
  return v35;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::prototype(WebCore::JSRTCRtpSFrameTransform *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
      + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
                                                                      + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSRTCRtpSFrameTransform::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSRTCRtpSFrameTransform::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSRTCRtpSFrameTransformPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v18 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformPrototype::create(this, Structure, v16, v17);
    v19 = WebCore::JSRTCRtpSFrameTransform::createStructure((uint64_t *)this, (uint64_t)a2, v18);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v19, (uint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSRTCRtpSFrameTransform::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::JSRTCRtpSFrameTransform(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  v5 = v4 + 32;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v5;
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v6;

  v3 = *(_QWORD *)(this + 24);
  v4 = *(_QWORD *)(v3 - 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_10:
  *a2 = v3 - 32;
  return this;
}

unint64_t WebCore::JSRTCRtpSFrameTransform::createPrototype(WebCore::JSRTCRtpSFrameTransform *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSRTCRtpSFrameTransformPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSRTCRtpSFrameTransformPrototype::create(this, Structure, v7, v8);
}

uint64_t WebCore::JSRTCRtpSFrameTransformPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpSFrameTransformPrototype::create(WebCore::JSRTCRtpSFrameTransformPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info, &WebCore::JSRTCRtpSFrameTransformPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransform>,(WebCore::DOMConstructorID)161>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransform>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSRTCRtpSFrameTransform::prototype((WebCore::JSRTCRtpSFrameTransform *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpSFrameTransformConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpSFrameTransformPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransform>,(WebCore::DOMConstructorID)161>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCRtpSFrameTransform_readable(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  JSC::VM *v6;
  void *v7;
  unint64_t v8;
  int v9;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  _QWORD v15[2];
  int v16;
  int v17;
  WTF::StringImpl *v18;
  char v19;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 40);
  if (v5)
  {
LABEL_4:
    ++*(_DWORD *)v5;
    v16 = 0;
    v15[0] = 0;
    v8 = WebCore::wrap<WebCore::ReadableStream>((uint64_t)a1, v4, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v11 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      WTF::fastFree(v5, v7);
      v9 = 0;
    }
    else
    {
      v9 = 0;
      --*(_DWORD *)v5;
    }
    goto LABEL_6;
  }
  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::RTCRtpSFrameTransform::createStreams((WebCore::JSDOMGlobalObject *)(v3 - 32), (uint64_t)&v17);
  if (!v19)
  {
    v5 = *(WTF **)(v3 + 40);
    if (!v5)
    {
      v9 = 0;
      v16 = 0;
      v15[0] = 0;
      v8 = 2;
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  v12 = (WTF::StringImpl *)v17;
  v13 = v18;
  LOBYTE(v15[0]) = v17;
  v16 = 1;
  v15[1] = 0;
  if (!*((_QWORD *)v6 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v6, a1, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v12);
      v8 = 0;
      v9 = v16;
      goto LABEL_6;
    }
    *(_DWORD *)v13 -= 2;
  }
  v8 = 0;
  v9 = 1;
LABEL_6:
  ((void (*)(int *, _QWORD *))off_1E32DCDB8[v9])(&v17, v15);
  return v8;
}

unint64_t WebCore::jsRTCRtpSFrameTransform_writable(JSC *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  JSC::VM *v6;
  void *v7;
  unint64_t v8;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  _QWORD v18[2];
  int v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(WTF **)(v3 + 48);
  if (v5)
  {
    *(_BYTE *)(v3 + 25) = 1;
LABEL_5:
    ++*(_DWORD *)v5;
    v19 = 0;
    v18[0] = 0;
    v8 = WebCore::wrap<WebCore::WritableStream>((uint64_t)a1, v4, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v10 = (_DWORD *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v10)
      {
        if (v10[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
        else
          --v10[4];
      }
      v11 = *((_QWORD *)v5 + 1);
      if (v11)
      {
        *(_QWORD *)(v11 + 8) = 0;
        v12 = (unsigned int *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v12)
        {
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v7);
          }
        }
      }
      else
      {
        *((_QWORD *)v5 + 1) = 0;
      }
      WTF::fastFree(v5, v7);
    }
    else
    {
      --*(_DWORD *)v5;
    }
    goto LABEL_7;
  }
  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::RTCRtpSFrameTransform::createStreams((WebCore::JSDOMGlobalObject *)(v3 - 32), (uint64_t)&v20);
  if (!v22)
  {
    v5 = *(WTF **)(v3 + 48);
    *(_BYTE *)(v3 + 25) = 1;
    if (!v5)
    {
      v19 = 0;
      v18[0] = 0;
      v8 = 2;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  v15 = (WTF::StringImpl *)v20;
  v16 = v21;
  LOBYTE(v18[0]) = v20;
  v19 = 1;
  v18[1] = 0;
  if (!*((_QWORD *)v6 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v21);
    JSC::VM::throwException(v6, a1, v17);
    v16 = v21;
  }
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v8 = 0;
LABEL_7:
  if (v19 != -1)
    ((void (*)(int *, _QWORD *))off_1E32DCDC8[v19])(&v20, v18);
  return v8;
}

uint64_t WebCore::jsRTCRtpSFrameTransform_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSRTCRtpSFrameTransform_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpSFrameTransform::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpSFrameTransform::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  v12 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(a1);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 784), a3, (_DWORD *)a2);
  v19 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_30:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_38:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v18);
  }
LABEL_42:
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::subspaceForImpl(WebCore::JSRTCRtpSFrameTransform *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1312);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 1312);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 1312);
    *(_QWORD *)(v8 + 1312) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 1312);
  *(_QWORD *)(v3 + 1312) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSRTCRtpSFrameTransformOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransformOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v19 = *(_QWORD *)(a3 + 32);
    v18 = (uint64_t *)(a3 + 32);
    v17 = v19;
    if (v19)
    {
      v20 = *(_DWORD *)(v17 - 8);
      v21 = ~((v4 - 32) << 32) + v4 - 32;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v17 + 16 * v24);
      if (v25 != v4 - 32)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          ++v26;
          if (v25 == v4 - 32)
            goto LABEL_35;
        }
        v24 = *(unsigned int *)(v17 - 4);
      }
LABEL_35:
      if (v24 != *(_DWORD *)(v17 - 4))
      {
        v27 = (_QWORD *)(v17 + 16 * v24);
        *v27 = -1;
        v30 = v27[1];
        v29 = v27 + 1;
        v28 = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = 3;
          *v29 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v31 = *v18;
        if (*v18)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v18;
        if (*v18)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = (uint64_t)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v35 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v10 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_17:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v37 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v37 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_24;
  if (v13)
    return result;
LABEL_25:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, a2);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::RTCRtpSFrameTransform,WebCore::RTCRtpSFrameTransform>(JSC::VM *a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  WebCore::JSRTCRtpSFrameTransform *v22;
  _QWORD *v23;
  unint64_t SlowCase;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *Allocator;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v5 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
        + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransform::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSRTCRtpSFrameTransform::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSRTCRtpSFrameTransform::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSRTCRtpSFrameTransformPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSRTCRtpSFrameTransform::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSRTCRtpSFrameTransform::s_info);
LABEL_8:
  v22 = (WebCore::JSRTCRtpSFrameTransform *)*((_QWORD *)a1 + 7);
  v23 = (_QWORD *)WebCore::JSRTCRtpSFrameTransform::subspaceForImpl(v22, a2);
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_9:
    v23[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v37);
    v23[5] = SlowCase + (int)v37;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v25 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v26 = v25 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v26;
  if (*((_BYTE *)v22 + 755))
    __dmb(0xAu);
  v27 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336708 & 1) == 0)
  {
    qword_1EE336700 = (uint64_t)&off_1E32DAB30;
    byte_1EE336708 = 1;
  }
  if (v5)
    v28 = (uint64_t *)(v5 + 40);
  else
    v28 = 0;
  if (!*(_DWORD *)(v27 + 48))
  {
    if ((SlowCase & 8) != 0)
      v29 = (SlowCase - 112) | 1;
    else
      v29 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v29 & 1) != 0)
      v30 = v29 + 47;
    else
      v30 = *(_QWORD *)v29 + 32;
    Allocator = *(_QWORD **)(v30 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v30 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336700;
    Allocator[2] = v27;
    v32 = *v28;
    *v28 = (uint64_t)Allocator;
    if (!v32)
      return SlowCase;
LABEL_35:
    *(_QWORD *)(v32 + 8) = 3;
    return SlowCase;
  }
  v39 = v5;
  if ((SlowCase & 8) != 0)
    v34 = (SlowCase - 112) | 1;
  else
    v34 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v34 & 1) != 0)
    v35 = v34 + 47;
  else
    v35 = *(_QWORD *)v34 + 32;
  v36 = *(_QWORD **)(v35 + 16);
  if (!v36)
    v36 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v35 + 16) = *v36;
  *v36 = SlowCase;
  v36[1] = &qword_1EE336700;
  v36[2] = v27;
  v38 = v36;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v27 + 32), &v39, (uint64_t *)&v38);
  v32 = (uint64_t)v38;
  if (v38)
    goto LABEL_35;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::RTCRtpSFrameTransform>(int a1, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  WebCore::JSDOMGlobalObject *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::JSDOMGlobalObject *v27;
  int v28;
  uint64_t v29;
  WebCore::JSDOMGlobalObject *v30;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v21 = *(_QWORD *)(v5 + 32);
    if (!v21)
      goto LABEL_5;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(WebCore::JSDOMGlobalObject **)(v21 + 16 * v26);
    if (v27 != a3)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(WebCore::JSDOMGlobalObject **)(v21 + 16 * v26);
        ++v28;
        if (v27 == a3)
          goto LABEL_38;
      }
      goto LABEL_5;
    }
LABEL_38:
    v6 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 5);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = *((_QWORD *)a3 + 3);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_9:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v30 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3361C08)
  {
    __break(0xC471u);
    JUMPOUT(0x194E5B6B8);
  }
  v7 = WebCore::createWrapper<WebCore::RTCRtpSFrameTransform,WebCore::RTCRtpSFrameTransform>(a2, (JSC::VM *)&v30, a3);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 3);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_20:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v29 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v29 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return v7;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return v7;
LABEL_28:
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
  return v7;
}

uint64_t WebCore::JSRTCRtpSFrameTransform::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSRTCRtpSFrameTransform::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSRTCRtpSFrameTransform::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24) - 32;
  else
    return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransformErrorEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  _BOOL4 v12;
  JSC::VM *v13;
  double v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  _BOOL4 v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSCell *v27;
  uint64_t v29;
  int v30;
  const char *v31;
  int v32;
  uint64_t v33;
  char **v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  WebCore::JSDOMGlobalObject *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  JSC::VM *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char **v50;
  int v51;
  unint64_t v52;
  WebCore::JSEvent *v53;
  JSC::JSCell *v54;
  unint64_t Structure;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  JSC::JSCell *v59;
  JSC::JSGlobalObject *v60;
  JSC::JSObject *v61;
  JSC::JSGlobalObject *v62;
  JSC::VM *v63;
  WebCore::JSDOMGlobalObject *v64;
  JSC::Structure *v65;
  JSC::VM *FunctionRealm;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char **v73;
  int v74;
  JSC::JSCell *v75;
  unint64_t v76;
  JSC::Structure *v77;
  JSC::JSCell *v78;
  uint64_t v79;
  unint64_t SubclassStructure;
  _DWORD *v81;
  uint16x8_t v82;
  uint16x8_t v83;
  JSValue v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  JSC::VM *v97;
  WTF::StringImpl *v98;
  int v99;
  JSC::VM *v100[2];
  uint64_t v101;
  unint64_t v102;

  v97 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v84.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v97, a1, v84);
  }
  v4 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v98);
  v5 = v99;
  if (!v99)
  {
    v6 = *(JSC::JSCell **)(a2 + 56);
    v100[0] = *((JSC::VM **)a1 + 7);
    if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_39:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)v100, "errorType", 10, "RTCRtpSFrameTransformErrorEventInit", 36, "RTCRtpSFrameTransformErrorEventType", 36);
      goto LABEL_40;
    }
    if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
    {
LABEL_121:
      JSC::throwTypeError();
      goto LABEL_40;
    }
    v8 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v9 = (WTF::StringImpl *)v102;
    v11 = JSC::JSObject::get(v8, a1, v102);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (*((_DWORD *)v100[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100[0]) & 1) != 0)
    {
LABEL_40:
      v27 = 0;
LABEL_41:
      v5 = v99;
      goto LABEL_42;
    }
    if (v11 != 10)
    {
      v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_155;
      *(_QWORD *)&v14 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v12 = v14 > 0.0 || v14 < 0.0;
        goto LABEL_16;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v12 = v11 == 7;
        goto LABEL_16;
      }
      v86 = *(unsigned __int8 *)(v11 + 5);
      if (v86 == 3)
      {
        v89 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v86 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_176;
          }
          v12 = 1;
          goto LABEL_16;
        }
        v87 = *(_QWORD *)(v11 + 8);
        if ((v87 & 1) != 0)
          v88 = (int *)(v11 + 16);
        else
          v88 = (int *)(v87 + 4);
        v89 = *v88;
      }
      v85 = v89 == 0;
      goto LABEL_176;
    }
    v12 = 0;
    while (1)
    {
      WTF::AtomStringImpl::addLiteral();
      v15 = (WTF::StringImpl *)v102;
      v17 = JSC::JSObject::get(v8, a1, v102);
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v16);
        else
          *(_DWORD *)v15 -= 2;
      }
      if (*((_DWORD *)v100[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100[0]) & 1) != 0)
        goto LABEL_40;
      if (v17 == 10)
      {
        v18 = 0;
        goto LABEL_28;
      }
      v19 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v17 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v20 = v17 - 0x2000000000000;
      if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v17 & 0xFFFE000000000002) != 0)
        {
          v18 = v17 == 7;
          goto LABEL_27;
        }
        v91 = *(unsigned __int8 *)(v17 + 5);
        if (v91 == 3)
        {
          v94 = *(_DWORD *)(v17 + 8);
          goto LABEL_182;
        }
        if (v91 == 2)
        {
          v92 = *(_QWORD *)(v17 + 8);
          if ((v92 & 1) != 0)
            v93 = (int *)(v17 + 16);
          else
            v93 = (int *)(v92 + 4);
          v94 = *v93;
LABEL_182:
          v90 = v94 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_187:
            v18 = 1;
            goto LABEL_27;
          }
          v90 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_183:
        v18 = !v90;
        goto LABEL_27;
      }
      if (v20 > 0.0)
        goto LABEL_187;
      v18 = v20 < 0.0;
LABEL_27:
      if (*((_DWORD *)v19 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v19) & 1) != 0)
        goto LABEL_40;
LABEL_28:
      WTF::AtomStringImpl::addLiteral();
      v21 = (WTF::StringImpl *)v102;
      v23 = JSC::JSObject::get(v8, a1, v102);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v22);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v100[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100[0]) & 1) != 0)
        goto LABEL_40;
      if (v23 != 10)
      {
        v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (*((_DWORD *)v24 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
            goto LABEL_40;
        }
      }
      WTF::AtomStringImpl::addLiteral();
      v25 = (WTF::StringImpl *)v102;
      v11 = JSC::JSObject::get(v8, a1, v102);
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v26);
        else
          *(_DWORD *)v25 -= 2;
      }
      if (*((_DWORD *)v100[0] + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v100[0]) & 1) != 0)
        goto LABEL_40;
      if (v11 == 10)
        goto LABEL_39;
      v8 = (JSC::Structure *)*((_QWORD *)a1 + 7);
      v100[1] = v8;
      v102 = v11;
      if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
      {
        v29 = *(_QWORD *)(v11 + 8);
        if ((v29 & 1) != 0)
        {
          v29 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v11, a1);
          if (v29)
LABEL_49:
            *(_DWORD *)v29 += 2;
        }
        else if (v29)
        {
          goto LABEL_49;
        }
        v101 = v29;
        if (!v29)
          goto LABEL_120;
        goto LABEL_51;
      }
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v102, a1);
      v29 = v101;
      if (!v101)
      {
LABEL_120:
        v33 = 0;
        goto LABEL_64;
      }
LABEL_51:
      v30 = *(_DWORD *)(v29 + 16);
      v31 = *(const char **)(v29 + 8);
      v32 = *(_DWORD *)(v29 + 4);
      if (v31 != "authentication" && v32 == 14)
      {
        if ((v30 & 4) != 0)
        {
          if (*v31 != 97
            || *(_QWORD *)(v31 + 1) != 0x6369746E65687475
            || *(_QWORD *)(v31 + 6) != 0x6E6F697461636974)
          {
            goto LABEL_57;
          }
        }
        else
        {
          if (*(_WORD *)v31 != 97)
            goto LABEL_57;
          v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 2), (int16x8_t)xmmword_1968C0DB0);
          v82.i16[0] = vminvq_u16(v82);
          if (!v82.i32[0])
            goto LABEL_57;
          v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 12), (int16x8_t)xmmword_1968C0DC0);
          v83.i16[0] = vminvq_u16(v83);
          if (!v83.i32[0])
            goto LABEL_57;
        }
LABEL_60:
        v34 = &WebCore::parseEnumerationFromString<WebCore::RTCRtpSFrameTransformErrorEvent::Type>(WTF::String const&)::mappings;
        goto LABEL_61;
      }
      if (v31 == "authentication" && v32 == 14)
        goto LABEL_60;
      if (v31 != "keyID" && v32 == 5)
      {
        if ((v30 & 4) != 0)
        {
          if (*v31 != 107 || *(_WORD *)(v31 + 1) != 31077 || *(_WORD *)(v31 + 3) != 17481)
            goto LABEL_57;
        }
        else if (*(_WORD *)v31 != 107 || *(_QWORD *)(v31 + 2) != 0x44004900790065)
        {
          goto LABEL_57;
        }
LABEL_112:
        v34 = &off_1E32D6008;
        goto LABEL_61;
      }
      if (v31 == "keyID" && v32 == 5)
        goto LABEL_112;
      if (v31 == "syntax" || v32 != 6)
      {
        if (v32 != 6 || v31 != "syntax")
        {
LABEL_57:
          v33 = 0;
          goto LABEL_62;
        }
      }
      else if ((v30 & 4) != 0)
      {
        if (*v31 != 115 || *(_DWORD *)(v31 + 1) != 1635020409 || *(_DWORD *)(v31 + 2) != 2019652718)
          goto LABEL_57;
      }
      else
      {
        if (*(_WORD *)v31 != 115)
          goto LABEL_57;
        if (*(_QWORD *)(v31 + 4) != 0x7800610074006ELL || *(_QWORD *)(v31 + 2) != 0x610074006E0079)
          goto LABEL_57;
      }
      v34 = &off_1E32D6020;
LABEL_61:
      v33 = *((unsigned int *)v34 + 4) | 0x100000000;
LABEL_62:
      v101 = 0;
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v29, v26);
      else
        *(_DWORD *)v29 -= 2;
LABEL_64:
      if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
        goto LABEL_40;
      if ((v33 & 0x100000000) == 0)
        goto LABEL_121;
      if (!v99)
      {
        v35 = v98;
        v98 = 0;
        v36 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
        *(_QWORD *)(v36 + 8) = 0;
        v40 = *(_DWORD *)(v36 + 20) & 0xFFC00000;
        if (v18)
          v41 = 4;
        else
          v41 = 0;
        if (v12)
          v42 = 1409538;
        else
          v42 = 1409536;
        *(_DWORD *)(v36 + 16) = 1;
        *(_DWORD *)(v36 + 20) = v41 | v42 | (v35 != 0) | v40;
        if (v35)
          *(_DWORD *)v35 += 2;
        *(_QWORD *)(v36 + 24) = v35;
        *(_QWORD *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = v39;
        *(_QWORD *)(v36 + 64) = 0;
        *(_QWORD *)v36 = off_1E3361CF8;
        *(_DWORD *)(v36 + 72) = v33;
        v102 = v36;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::destroy(v35, v37);
            if (*(void (***)(WebCore::RTCRtpSFrameTransformErrorEvent *__hidden))v36 != off_1E3361CF8)
            {
              __break(0xC471u);
              JUMPOUT(0x194E5BF64);
            }
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v43 = *(JSC::VM **)(v4 + 40);
        v44 = *((_QWORD *)v43 + 412);
        if (!v44)
          goto LABEL_84;
        v45 = *(_DWORD *)(v44 - 8);
        v46 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
             + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
                                                                                       + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) >> 22);
        v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
        v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
        v49 = v45 & ((v48 >> 31) ^ v48);
        v50 = *(char ***)(v44 + 16 * v49);
        if (v50 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
        {
LABEL_83:
          v52 = *(_QWORD *)(v44 + 16 * v49 + 8);
          if (!v52)
            goto LABEL_84;
        }
        else
        {
          v51 = 1;
          while (v50)
          {
            v49 = ((_DWORD)v49 + v51) & v45;
            v50 = *(char ***)(v44 + 16 * v49);
            ++v51;
            if (v50 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
              goto LABEL_83;
          }
LABEL_84:
          v53 = (WebCore::JSEvent *)*((_QWORD *)v43 + 7);
          v54 = (JSC::JSCell *)WebCore::JSEvent::prototype(v53, *(JSC::VM **)(v4 + 40), v38);
          Structure = WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::createStructure((uint64_t *)v53, (uint64_t)v43, v54);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v57 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::create(v53, v43, Structure, v56);
          v58 = WebCore::JSRTCRtpSFrameTransformErrorEvent::createStructure((uint64_t *)v53, (uint64_t)v43, v57);
          v52 = WebCore::cacheDOMStructure((JSCell *)v43, v58, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info);
        }
        v27 = (JSCell *)WebCore::JSRTCRtpSFrameTransformErrorEvent::create(v52, v43, (uint64_t *)&v102);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v43 + 415), v36, (uint64_t)v27);
        v59 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v59 & 0xFFFE000000000002) != 0
          || (v60 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v59)) == 0
          || (v62 = v60, v60 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v63 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v60, v61),
              *((_DWORD *)v63 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
        {
LABEL_98:
          if (*((_DWORD *)v97 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v97) & 1) != 0)
            v27 = 0;
          v81 = (_DWORD *)v102;
          v102 = 0;
          if (v81)
          {
            if (v81[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
            else
              --v81[4];
          }
          goto LABEL_41;
        }
        v67 = *((_QWORD *)FunctionRealm + 412);
        if (v67)
        {
          v68 = *(_DWORD *)(v67 - 8);
          v69 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
               + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) >> 22);
          v70 = 9 * ((v69 + ~(v69 << 13)) ^ ((v69 + ~(v69 << 13)) >> 8));
          v71 = (v70 ^ (v70 >> 15)) + ~((v70 ^ (v70 >> 15)) << 27);
          v72 = v68 & ((v71 >> 31) ^ v71);
          v73 = *(char ***)(v67 + 16 * v72);
          if (v73 != &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
          {
            v74 = 1;
            while (v73)
            {
              v72 = ((_DWORD)v72 + v74) & v68;
              v73 = *(char ***)(v67 + 16 * v72);
              ++v74;
              if (v73 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
                goto LABEL_94;
            }
            goto LABEL_95;
          }
LABEL_94:
          v64 = *(WebCore::JSDOMGlobalObject **)(v67 + 16 * v72 + 8);
          if (!v64)
            goto LABEL_95;
        }
        else
        {
LABEL_95:
          v75 = (JSC::JSCell *)WebCore::JSEvent::prototype(v63, FunctionRealm, v64);
          v76 = WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v75);
          *(_DWORD *)(v76 + 16) |= 0x80000u;
          v78 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::create(v63, FunctionRealm, v76, v77);
          v79 = WebCore::JSRTCRtpSFrameTransformErrorEvent::createStructure((uint64_t *)v63, (uint64_t)FunctionRealm, v78);
          v64 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v79, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v62, v64, v65);
        if (!*((_DWORD *)v63 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) == 0)
          JSC::JSObject::setStructure(v27, v63, SubclassStructure);
        goto LABEL_98;
      }
      v13 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_155:
      v85 = (_DWORD)v11 == 0;
LABEL_176:
      v12 = !v85;
LABEL_16:
      if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
        goto LABEL_40;
    }
    v90 = (_DWORD)v17 == 0;
    goto LABEL_183;
  }
  v27 = 0;
LABEL_42:
  if (v5 != -1)
    ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32DB060[v5])(&v102, &v98);
  return v27;
}

uint64_t WebCore::JSRTCRtpSFrameTransformErrorEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::create(WebCore::JSRTCRtpSFrameTransformErrorEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransformErrorEvent>,(WebCore::DOMConstructorID)162>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1296);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransformErrorEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info
                                                                                   + ~((_QWORD)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::create((WebCore::JSRTCRtpSFrameTransformErrorEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCRtpSFrameTransformErrorEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCRtpSFrameTransformErrorEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1296) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpSFrameTransformErrorEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpSFrameTransformErrorEventPrototype::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpSFrameTransformErrorEvent>,(WebCore::DOMConstructorID)162>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCRtpSFrameTransformErrorEvent_errorType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 72);
  if ((_MergedGlobals_514[0] & 1) == 0)
  {
    _MergedGlobals_24 += 2;
    dword_1ECE798A0 += 2;
    qword_1EE336810 = (uint64_t)&_MergedGlobals_24;
    unk_1EE336818 = &dword_1ECE798A0;
    dword_1ECE798C0 += 2;
    qword_1EE336820 = (uint64_t)&dword_1ECE798C0;
    _MergedGlobals_514[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_514[8 * v4 + 296];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::JSRTCRtpSFrameTransformErrorEvent::subspaceForImpl(WebCore::JSRTCRtpSFrameTransformErrorEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1320);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1320))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1320);
    *(_QWORD *)(v8 + 1320) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1320);
  *(_QWORD *)(v3 + 1320) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCRtpScriptTransform>::construct(JSC *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  JSCell *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WebCore::JSDOMGlobalObject *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  JSC::JSCell *v28;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v30;
  JSC::JSGlobalObject *v31;
  JSC::VM *v32;
  JSC::Structure *v33;
  uint64_t FunctionRealm;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  int v42;
  JSC::JSObject *v43;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v45;
  JSC::Structure *v46;
  JSC::JSCell *v47;
  uint64_t v48;
  unint64_t SubclassStructure;
  JSValue v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSValue v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  WebCore::JSRTCRtpScriptTransform *v63;
  JSC::JSCell *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  WTF *v68;
  WTF::StringImpl *v69;
  int v70;
  WTF *v71;
  WTF *v72;
  WTF::StringImpl *v73;

  v3 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v51.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, this, v51);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  v68 = (WTF *)*((_QWORD *)this + 7);
  v7 = JSC::jsDynamicCast<WebCore::JSWorker *>(v6);
  if (!v7 || (v9 = *(_QWORD *)(v7 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v68, 0, "worker", 7, "RTCRtpScriptTransform", 22, v8, 0, 0, "Worker", 7);
    return 0;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 1) < 2)
  {
    v10 = 10;
LABEL_14:
    v14 = 0;
    v70 = 0;
    v15 = 0;
    goto LABEL_22;
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(a2 + 32) == 3)
    goto LABEL_14;
  v11 = *(_QWORD *)(a2 + 64);
  if (v11 == 10)
    goto LABEL_14;
  v72 = (WTF *)*((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) != 0 || (v12 = *(unsigned __int8 *)(v11 + 5), v12 <= 0x16))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v17 = v65;
    v65 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v70 = 1;
  }
  else if (v12 == 36 && (JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)v11) & 1) != 0)
  {
    WebCore::Detail::SequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLObject>>::convertArray((JSC::VM **)this, v11, (uint64_t)&v68);
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLObject>>::convert(this, v11, (uint64_t)&v68);
  }
  v18 = v70;
  if (v70)
  {
    v13 = 0;
LABEL_49:
    if (v18 != -1)
      ((void (*)(WTF::StringImpl **, WTF **))off_1E32DB0D0[v18])(&v65, &v68);
    return v13;
  }
  v14 = v68;
  v15 = v69;
LABEL_22:
  v19 = *(WebCore::JSDOMGlobalObject **)(v5 + 40);
  v68 = 0;
  v69 = 0;
  v72 = v14;
  v73 = v15;
  WebCore::RTCRtpScriptTransform::create(v19, v9, v10, (uint64_t)&v72, (uint64_t)&v65);
  v21 = v72;
  if (!HIDWORD(v73))
  {
    if (!v72)
      goto LABEL_24;
LABEL_82:
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree(v21, v20);
    goto LABEL_24;
  }
  v57 = 8 * HIDWORD(v73);
  do
  {
    v58 = *(_QWORD *)v21;
    if (*(_QWORD *)v21)
    {
      v59 = (uint64_t *)(v58 - 16);
      v60 = *(_QWORD *)(((v58 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v61 = *(uint64_t **)(v58 - 8);
      if (v61)
      {
        v62 = *v59;
        *v61 = *v59;
        *(_QWORD *)(v62 + 8) = v61;
        *v59 = 0;
        v59[1] = 0;
      }
      *v59 = *(_QWORD *)(v60 + 40);
      *(_QWORD *)(v60 + 40) = v59;
      *(_QWORD *)v21 = 0;
    }
    v21 = (WTF *)((char *)v21 + 8);
    v57 -= 8;
  }
  while (v57);
  v21 = v72;
  if (v72)
    goto LABEL_82;
LABEL_24:
  if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    goto LABEL_67;
  if (!v67)
  {
    v22 = *(_QWORD *)(v5 + 40);
    v23 = v65;
    v65 = 0;
    v71 = v23;
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v23 != &off_1E3361DC0)
    {
      __break(0xC471u);
      JUMPOUT(0x194E5D2F8);
    }
    v13 = (JSCell *)WebCore::createWrapper<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpScriptTransform>(v22, &v71);
    v24 = v71;
    v71 = 0;
    if (v24)
    {
      v25 = (unsigned int *)((char *)v24 + 24);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v55 = off_1E32DD4B0;
        *((_QWORD *)v55 + 1) = v25;
        v72 = v55;
        WTF::ensureOnMainThread();
        v56 = v72;
        v72 = 0;
        if (v56)
          (*(void (**)(WTF *))(*(_QWORD *)v56 + 8))(v56);
      }
    }
    goto LABEL_31;
  }
  if (v67 == 1)
  {
    v52 = (WTF::StringImpl *)v65;
    LOBYTE(v72) = (_BYTE)v65;
    v53 = v66;
    v66 = 0;
    v73 = v53;
    if (!*(_QWORD *)(v3 + 16))
    {
      v54.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v65, (JSC::JSGlobalObject *)&v73);
      JSC::VM::throwException((JSC::VM *)v3, this, v54);
      v53 = v73;
    }
    v73 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
    v13 = 0;
LABEL_31:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    {
LABEL_67:
      v13 = 0;
LABEL_46:
      if (v67 != -1)
        ((void (*)(WTF **, WTF::StringImpl **))off_1E32DB0C0[v67])(&v72, &v65);
      v18 = v70;
      goto LABEL_49;
    }
    v28 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v28 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v28)) == 0
      || (v31 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v32 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = JSC::getFunctionRealm(this, Object, v30),
          *((_DWORD *)v32 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) != 0)
    {
LABEL_45:
      if (!*(_DWORD *)(v3 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) == 0)
        goto LABEL_46;
      goto LABEL_67;
    }
    v35 = *(_QWORD *)(FunctionRealm + 3296);
    if (v35)
    {
      v36 = *(_DWORD *)(v35 - 8);
      v37 = ((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
           + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
                                                                           + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = *(char ***)(v35 + 16 * v40);
      if (v41 == &WebCore::JSRTCRtpScriptTransform::s_info)
      {
LABEL_41:
        v43 = *(JSC::JSObject **)(v35 + 16 * v40 + 8);
        if (v43)
        {
LABEL_43:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v31, v43, v33);
          if (!*((_DWORD *)v32 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v32) & 1) == 0)
            JSC::JSObject::setStructure(v13, v32, SubclassStructure);
          goto LABEL_45;
        }
      }
      else
      {
        v42 = 1;
        while (v41)
        {
          v40 = ((_DWORD)v40 + v42) & v36;
          v41 = *(char ***)(v35 + 16 * v40);
          ++v42;
          if (v41 == &WebCore::JSRTCRtpScriptTransform::s_info)
            goto LABEL_41;
        }
      }
    }
    Structure = WebCore::JSRTCRtpScriptTransformPrototype::createStructure((uint64_t *)v32, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v47 = (JSC::JSCell *)WebCore::JSRTCRtpScriptTransformPrototype::create(v32, Structure, v45, v46);
    v48 = WebCore::JSRTCRtpScriptTransform::createStructure((uint64_t *)v32, FunctionRealm, v47);
    v43 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v48, (uint64_t)&WebCore::JSRTCRtpScriptTransform::s_info);
    goto LABEL_43;
  }
  v63 = (WebCore::JSRTCRtpScriptTransform *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSRTCRtpScriptTransform::destroy(v63, v64);
}

uint64_t WebCore::JSRTCRtpScriptTransform::destroy(uint64_t this, JSC::JSCell *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E32DD4B0;
      v6[1] = v3;
      v7 = (uint64_t)v6;
      WTF::ensureOnMainThread();
      this = v7;
      if (v7)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return this;
}

uint64_t WebCore::JSRTCRtpScriptTransform::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpScriptTransformPrototype::create(WebCore::JSRTCRtpScriptTransformPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSRTCRtpScriptTransform::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSRTCRtpScriptTransformPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpScriptTransform>,(WebCore::DOMConstructorID)163>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1304);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSRTCRtpScriptTransform>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
                                                                         + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCRtpScriptTransform::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCRtpScriptTransform::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCRtpScriptTransformPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCRtpScriptTransformPrototype::create((WebCore::JSRTCRtpScriptTransformPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCRtpScriptTransform::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCRtpScriptTransform::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1304) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpScriptTransformConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpScriptTransformPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCRtpScriptTransform>,(WebCore::DOMConstructorID)163>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSRTCRtpScriptTransformOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCRtpScriptTransformOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (unsigned int *)(v3 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v8 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v7 = v8;
  if (!v8)
    goto LABEL_18;
  v9 = *(_DWORD *)(v7 - 8);
  v10 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v7 + 16 * v13);
  if (v14 != v3)
  {
    v15 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v15) & v9;
      v14 = *(_QWORD *)(v7 + 16 * v13);
      ++v15;
      if (v14 == v3)
        goto LABEL_8;
    }
    v13 = *(unsigned int *)(v7 - 4);
  }
  if (v13 == *(_DWORD *)(v7 - 4))
    goto LABEL_18;
LABEL_8:
  v16 = (_QWORD *)(v7 + 16 * v13);
  *v16 = -1;
  v19 = v16[1];
  v18 = v16 + 1;
  v17 = v19;
  if (v19)
  {
    *(_QWORD *)(v17 + 8) = 3;
    *v18 = 0;
  }
  ++*(_DWORD *)(*v6 - 16);
  v20 = *v6;
  v21 = *v6 ? *(_DWORD *)(v20 - 12) - 1 : -1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6
    && ((v23 = 6 * *(_DWORD *)(v22 - 12), v24 = *(_DWORD *)(v22 - 4), v23 < v24) ? (v25 = v24 >= 9) : (v25 = 0), v25))
  {
    WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
    if (!v3)
      return;
  }
  else
  {
LABEL_18:
    if (!v3)
      return;
  }
  do
  {
    v26 = __ldaxr(v4);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v4));
  if (!v27)
  {
    atomic_store(1u, v4);
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E32DD4B0;
    v28[1] = v4;
    v29 = v28;
    WTF::ensureOnMainThread();
    if (v29)
      (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  }
}

unint64_t WebCore::createWrapper<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpScriptTransform>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
        + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpScriptTransform::s_info
                                                                        + ~((_QWORD)&WebCore::JSRTCRtpScriptTransform::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSRTCRtpScriptTransform::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSRTCRtpScriptTransform::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSRTCRtpScriptTransformPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSRTCRtpScriptTransformPrototype::create((WebCore::JSRTCRtpScriptTransformPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSRTCRtpScriptTransform::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSRTCRtpScriptTransform::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1328);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 1328))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 1328);
    *(_QWORD *)(v26 + 1328) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 1328);
  *(_QWORD *)(v22 + 1328) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336718 & 1) == 0)
  {
    qword_1EE336710 = (uint64_t)&off_1E32DAB60;
    byte_1EE336718 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336710;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSRTCRtpScriptTransformer::destroy(WebCore::JSRTCRtpScriptTransformer *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformer::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformer::visitChildren(WebCore::JSRTCRtpScriptTransformer *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSRTCRtpScriptTransformerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpScriptTransformerPrototype::create(WebCore::JSRTCRtpScriptTransformerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info, &WebCore::JSRTCRtpScriptTransformerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpScriptTransformer>,(WebCore::DOMConstructorID)164>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1312);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpScriptTransformer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpScriptTransformer::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info
                                                                           + ~((_QWORD)&WebCore::JSRTCRtpScriptTransformer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCRtpScriptTransformer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCRtpScriptTransformer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCRtpScriptTransformerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCRtpScriptTransformerPrototype::create((WebCore::JSRTCRtpScriptTransformerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCRtpScriptTransformer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1312) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpScriptTransformerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpScriptTransformerPrototype::s_info != (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpScriptTransformer>,(WebCore::DOMConstructorID)164>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCRtpScriptTransformer_readable(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::ReadableStream>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(WTF **)(*(_QWORD *)(a2 + 24) + 72));
}

uint64_t WebCore::jsRTCRtpScriptTransformer_writable(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  unint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  uint64_t v17;
  int v18[2];
  WTF::StringImpl *v19;
  int v20;
  _BYTE v21[8];
  WTF::StringImpl *v22;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::RTCRtpScriptTransformer::writable(*(WTF::StringImpl **)(a2 + 24), (uint64_t)v18);
  if (v20)
  {
    if (v20 != 1)
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::jsRTCRtpScriptTransformer_options(v17);
    }
    v14 = (WTF::StringImpl *)LOBYTE(v18[0]);
    v21[0] = v18[0];
    v15 = v19;
    v19 = 0;
    v22 = v15;
    if (!*((_QWORD *)v3 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v18[0]), (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException(v3, a1, v16);
      v15 = v22;
    }
    v22 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v7 = 0;
  }
  else
  {
    v5 = *(WTF **)v18;
    *(_QWORD *)v18 = 0;
    v7 = WebCore::wrap<WebCore::WritableStream>((uint64_t)a1, v4, v5);
    if (*(_DWORD *)v5 == 1)
    {
      v9 = (_DWORD *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v9)
      {
        if (v9[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        else
          --v9[4];
      }
      v10 = *((_QWORD *)v5 + 1);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 0;
        v11 = (unsigned int *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
          {
            atomic_store(1u, v11);
            WTF::fastFree((WTF *)v11, v6);
          }
        }
      }
      else
      {
        *((_QWORD *)v5 + 1) = 0;
      }
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  if (v20 != -1)
    ((void (*)(_BYTE *, int *))off_1E32DCDE8[v20])(v21, v18);
  return v7;
}

uint64_t WebCore::jsRTCRtpScriptTransformer_options(WTF::StringImpl *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14[2];
  WTF *v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 + 32);
  if (v2)
    return v2;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(v6 + 40);
  v15 = 0;
  v16 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v2 = WebCore::SerializedScriptValue::deserialize(v7, a1, a1, v6 + 48, (uint64_t)&v15, v14, 1, 0);
  v9 = v15;
  if (HIDWORD(v16))
  {
    v12 = 8 * HIDWORD(v16);
    do
    {
      v13 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      v9 = (WTF *)((char *)v9 + 8);
      v12 -= 8;
    }
    while (v12);
    v9 = v15;
    if (!v15)
      goto LABEL_4;
    goto LABEL_16;
  }
  if (v15)
  {
LABEL_16:
    v15 = 0;
    LODWORD(v16) = 0;
    WTF::fastFree(v9, v8);
  }
LABEL_4:
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  v10 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(a2 + 32) = v2;
  if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v10 + 192), (const JSCell *)a2);
  return v2;
}

uint64_t WebCore::JSRTCRtpScriptTransformerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSRTCRtpScriptTransformerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

WebCore::RTCRtpSender *WebCore::JSRTCRtpSender::destroy(WebCore::JSRTCRtpSender *this, JSC::JSCell *a2)
{
  WebCore::RTCRtpSender *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::RTCRtpSender *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(result, a2);
      return (WebCore::RTCRtpSender *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSRTCRtpSender::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpSenderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpSenderPrototype::create(WebCore::JSRTCRtpSenderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __int16 v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::Structure *v31;
  int v32;
  unint64_t v34;
  WTF::StringImpl *v35[6];
  int v36;
  int v37;
  JSC::Structure *v38;
  int v39;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v34);
    *((_QWORD *)this + 4865) = SlowCase + (int)v34;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSRTCRtpSender::s_info, (uint64_t)&WebCore::JSRTCRtpSenderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E5F900);
  }
  v10 = (int *)((char *)this + 93124);
  v11 = v9 - 192;
  if (!v9)
    v11 = 0;
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 680) + 720);
  if ((v12 & 0x4000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v13 = v35[0];
    v14 = *v10;
    *v10 = 1;
    LODWORD(v35[0]) = -1;
    WORD2(v35[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v14;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  v16 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSDOMWindowBase::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSDOMWindowBase::s_info && v19 != 0);
  }
  if (!v18)
    goto LABEL_28;
  v22 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v16);
  if (v22 && *(_BYTE *)(v22 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E5F930);
  }
  v23 = v22 - 192;
  if (!v22)
    v23 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v23 + 680) + 720) & 0x8000) != 0)
  {
    if ((v12 & 0x4000) != 0)
      goto LABEL_33;
  }
  else
  {
LABEL_28:
    WTF::AtomStringImpl::addLiteral();
    v24 = v35[0];
    v25 = *v10;
    *v10 = 1;
    LODWORD(v35[0]) = -1;
    WORD2(v35[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v10 = v25;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v26);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_33:
  v27 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = JSC::JSString::create((uint64_t)this, v35);
  v30 = v35[0];
  v35[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v39 = *(_DWORD *)SlowCase;
  v38 = v31;
  v32 = JSC::Structure::outOfLineCapacity(v31);
  v36 = 0;
  v37 = v32;
  v35[0] = (WTF::StringImpl *)&v37;
  v35[1] = (WTF::StringImpl *)SlowCase;
  v35[2] = this;
  v35[3] = (WTF::StringImpl *)&v39;
  v35[4] = (WTF::StringImpl *)&v38;
  v35[5] = (WTF::StringImpl *)&v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v31, this, v27, 6, (uint64_t)v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v36, v29);
  *((_DWORD *)v31 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpSender>,(WebCore::DOMConstructorID)165>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1320);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v36) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v36, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpSender>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v35);
    v9[2848] = v2 + (int)v35;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v36);
  v13 = v36;
  v36 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v36);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSRTCRtpSender::s_info + ~((_QWORD)&WebCore::JSRTCRtpSender::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSender::s_info + ~((_QWORD)&WebCore::JSRTCRtpSender::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSRTCRtpSender::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSRTCRtpSender::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSRTCRtpSenderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSRTCRtpSenderPrototype::create((WebCore::JSRTCRtpSenderPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSRTCRtpSender::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCRtpSender::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v36);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v31 = v36;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSRTCRtpSender::s_info, (unint64_t *)&v36, (uint64_t)&WebCore::JSRTCRtpSenderConstructorTableValues, (unsigned __int8 *)v2);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1320) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpSenderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpSenderPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpSender>,(WebCore::DOMConstructorID)165>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCRtpSender_track(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v2)
    return WebCore::wrap<WebCore::MediaStreamTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsRTCRtpSender_transport(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (v2)
    return WebCore::wrap<WebCore::RTCDtlsTransport>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsRTCRtpSender_dtmf(int a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;

  v3 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = WebCore::RTCRtpSender::dtmf(*(WebCore::RTCRtpSender **)(a2 + 24));
  if (v4)
    return WebCore::wrap<WebCore::RTCDTMFSender>(a1, v3, v4);
  else
    return 2;
}

uint64_t WebCore::jsRTCRtpSender_transform(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[8];
  unsigned int v11;
  char v12;
  _BYTE v13[8];
  int v14;
  _BYTE v15[40];
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 88);
  if (!v2)
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  LOBYTE(v19) = 0;
  LODWORD(v20) = -1;
  v5 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v5 == -1)
  {
    v10[0] = 0;
    v11 = -1;
    v12 = 1;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JSR_SQ_EEEDcmST_DpOT0____fdiagonal[v5])(v15, &v19, v2 + 8);
    LODWORD(v20) = v5;
    v10[0] = 0;
    v11 = -1;
    ((void (*)(_BYTE *, _BYTE *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v5])(v15, v10, &v19);
    v11 = v5;
    v12 = 1;
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(_BYTE *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v20])(v15, &v19);
      if (!v12)
        return 2;
    }
  }
  v13[0] = 0;
  v14 = -1;
  v7 = v11;
  if (v11 == -1)
  {
    v7 = -1;
  }
  else
  {
    ((void (*)(uint64_t **, _BYTE *, _BYTE *))off_1E32DCD78[v11])(&v19, v13, v10);
    v14 = v7;
  }
  LOBYTE(v16) = 0;
  v17 = 0;
  v18 = v7;
  v19 = &v18;
  v20 = &v16;
  v21 = a1;
  v22 = v4;
  v23 = v13;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_21RTCRtpSFrameTransformEEENS4_INS_21RTCRtpScriptTransformEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((unint64_t)v15, &v19);
  if (v17)
  {
    v6 = v16;
    if (v14 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E32DCD68[v14])(&v19, v13);
    if (v12)
    {
      if (v11 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E32DCD68[v11])(&v19, v10);
    }
    return v6;
  }
  v9 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSRTCRtpSender_transform(v9);
}

BOOL WebCore::setJSRTCRtpSender_transform(JSC *a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  WebCore::RTCRtpTransform *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSValue v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  WebCore::RTCRtpTransform *v26;
  char v27;
  _BYTE v28[8];
  _BYTE v29[8];
  int v30;
  char v31;
  int v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;
  char v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCRtpSender::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCRtpSender::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(WebCore::RTCRtpTransform **)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v29[0] = 0;
    v31 = 0;
    v32 = 0;
    v33[0] = 0;
    v35 = 0;
    goto LABEL_22;
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::RTCRtpSFrameTransform>,WebCore::IDLInterface<WebCore::RTCRtpScriptTransform>>>::convert((uint64_t)v33, a1, a3);
  WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>>>((uint64_t)v28, (uint64_t)v33);
  if (v36 != -1)
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E32DCD98[v36])(&v23, &v34);
  v11 = v32;
  if (!v32)
  {
    v33[0] = 0;
    v35 = 0;
    if (v31)
    {
      LODWORD(v34) = -1;
      v12 = v30;
      if (v30 != -1)
      {
        ((void (*)(WebCore::RTCRtpTransform **, _BYTE *, _BYTE *))off_1E32DCD88[v30])(&v26, v33, v29);
        LODWORD(v34) = v12;
      }
      v35 = 1;
      v13 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 0;
      *(_DWORD *)(v13 + 16) = -1;
      v14 = (int)v34;
      if ((_DWORD)v34 != -1)
      {
        ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore21RTCRtpSFrameTransformENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_21RTCRtpScriptTransformENSA_ISF_EENSC_ISF_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal_0[v34])(&v27, v13 + 8, v33);
        *(_DWORD *)(v13 + 16) = v14;
      }
      goto LABEL_23;
    }
LABEL_22:
    v13 = 0;
LABEL_23:
    v26 = (WebCore::RTCRtpTransform *)v13;
    WebCore::RTCRtpSender::setTransform(v10, (uint64_t **)&v26, &v23);
    if (v26)
    {
      WebCore::RTCRtpTransform::~RTCRtpTransform(v26);
      WTF::fastFree(v15, v16);
    }
    if (v35 && (_DWORD)v34 != -1)
      ((void (*)(WebCore::RTCRtpTransform **, _BYTE *))off_1E32DCD68[v34])(&v26, v33);
    if (v25)
    {
      v19 = (WTF::StringImpl *)v23;
      v33[0] = v23;
      v20 = v24;
      v24 = 0;
      v34 = v20;
      if (!*((_QWORD *)v4 + 2))
      {
        v21.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v34);
        JSC::VM::throwException(v4, a1, v21);
        v20 = v34;
      }
      v34 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      if (v25)
      {
        v22 = v24;
        v24 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v19);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
    }
    v17 = 1;
    v11 = v32;
    goto LABEL_30;
  }
  v17 = 0;
LABEL_30:
  if (v11 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E32DCDA8[v11])(v33, v29);
  return v17;
}

uint64_t WebCore::JSRTCRtpSenderOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCRtpSenderOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::RTCRtpSender *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCRtpSender *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCRtpSender **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 16);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCRtpSender **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCRtpSender **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::RTCRtpSender::~RTCRtpSender(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::RTCRtpSender>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  if (*(void (***)(WebCore::RTCRtpSender *__hidden))a3 != off_1E3361E70)
  {
    __break(0xC471u);
    JUMPOUT(0x194E609B8);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCRtpSender::s_info + ~((_QWORD)&WebCore::JSRTCRtpSender::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpSender::s_info + ~((_QWORD)&WebCore::JSRTCRtpSender::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCRtpSender::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCRtpSender::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCRtpSenderPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSRTCRtpSenderPrototype::create((WebCore::JSRTCRtpSenderPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSRTCRtpSender::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSRTCRtpSender::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 1344);
  if (v26)
    goto LABEL_33;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 1344))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 1344);
    *(_QWORD *)(v29 + 1344) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 1344);
  *(_QWORD *)(v25 + 1344) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_33:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_34:
    v26[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336738 & 1) == 0)
  {
    qword_1EE336730 = (uint64_t)&off_1E32DABC0;
    byte_1EE336738 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336730;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336730;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_57;
  return SlowCase;
}

WebCore::RTCRtpTransceiver *WebCore::JSRTCRtpTransceiver::destroy(WebCore::JSRTCRtpTransceiver *this, JSC::JSCell *a2)
{
  WebCore::RTCRtpTransceiver *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::RTCRtpTransceiver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(result, a2);
      return (WebCore::RTCRtpTransceiver *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSRTCRtpTransceiver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCRtpTransceiverPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCRtpTransceiverPrototype::create(WebCore::JSRTCRtpTransceiverPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSRTCRtpTransceiver::s_info, (uint64_t)&WebCore::JSRTCRtpTransceiverPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpTransceiver>,(WebCore::DOMConstructorID)166>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1328);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpTransceiver>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCRtpTransceiver::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpTransceiver::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpTransceiver::s_info
                                                                     + ~((_QWORD)&WebCore::JSRTCRtpTransceiver::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCRtpTransceiver::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCRtpTransceiver::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCRtpTransceiverPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCRtpTransceiverPrototype::create((WebCore::JSRTCRtpTransceiverPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCRtpTransceiver::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCRtpTransceiver::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1328) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCRtpTransceiverConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCRtpTransceiverPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCRtpTransceiver>,(WebCore::DOMConstructorID)166>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCRtpTransceiver_mid(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (!v3)
    return 2;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v3 + 40))(&v13);
  v4 = v13;
  if (!v13)
    return 2;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  v7 = *((_DWORD *)v13 + 1);
  if (!v7)
    goto LABEL_13;
  if (v7 == 1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    if ((*((_BYTE *)v13 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v12 = *(unsigned __int16 *)v9;
      if (v12 > 0xFF)
        goto LABEL_5;
      v10 = v12;
    }
    v6 = (uint64_t *)(v5 + 8 * v10 + 42216);
LABEL_13:
    v8 = *v6;
    goto LABEL_14;
  }
LABEL_5:
  v8 = *(_QWORD *)(v5 + 64760);
  if (!v8 || v13 != *(WTF::StringImpl **)(v8 + 8))
  {
    v8 = JSC::jsStringWithCacheSlowCase();
    v4 = v13;
    v13 = 0;
    if (!v4)
      return v8;
    goto LABEL_15;
  }
LABEL_14:
  v13 = 0;
LABEL_15:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v8;
}

unint64_t WebCore::jsRTCRtpTransceiver_sender(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::RTCRtpSender>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40));
}

unint64_t WebCore::jsRTCRtpTransceiver_receiver(uint64_t a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::RTCRtpReceiver>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48));
}

uint64_t WebCore::jsRTCRtpTransceiver_stopped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  else
    v4 = *(unsigned __int8 *)(v2 + 56) != 0;
  if (v4)
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsRTCRtpTransceiver_direction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4)
    v5 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  else
    v5 = (WTF::StringImpl *)*(unsigned int *)(v3 + 24);
  return WebCore::convertEnumerationToJS<WebCore::RTCRtpTransceiverDirection>(*(_QWORD *)(a1 + 56), v5);
}

BOOL WebCore::setJSRTCRtpTransceiver_direction(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRTCRtpTransceiver::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRTCRtpTransceiver::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::RTCRtpTransceiverDirection>(a1, (unint64_t)this);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !BYTE4(v10))
      return result;
  }
  else if (!BYTE4(v10))
  {
    return 0;
  }
  *(_DWORD *)(v9 + 24) = v10;
  v11 = *(_QWORD *)(v9 + 64);
  if (v11)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v10);
  return 1;
}

uint64_t WebCore::jsRTCRtpTransceiver_currentDirection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (v3 && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3), (v4 & 0xFF00000000) != 0))
    return WebCore::convertEnumerationToJS<WebCore::RTCRtpTransceiverDirection>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)v4);
  else
    return 2;
}

uint64_t WebCore::JSRTCRtpTransceiverOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCRtpTransceiverOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::RTCRtpTransceiver *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::RTCRtpTransceiver *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::RTCRtpTransceiver **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 2);
  *((_DWORD *)v3 + 2) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 16);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::RTCRtpTransceiver **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::RTCRtpTransceiver **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 2) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 2) = v4;
  }
  else
  {
    WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::RTCRtpTransceiver>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v49 = *(_QWORD *)(v5 + 32);
    if (!v49)
      goto LABEL_5;
    v50 = *(_DWORD *)(v49 - 8);
    v51 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
    v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
    v54 = v50 & ((v53 >> 31) ^ v53);
    v55 = *(_QWORD *)(v49 + 16 * v54);
    if (v55 != a3)
    {
      v56 = 1;
      while (v55)
      {
        v54 = ((_DWORD)v54 + v56) & v50;
        v55 = *(_QWORD *)(v49 + 16 * v54);
        ++v56;
        if (v55 == a3)
          goto LABEL_63;
      }
      goto LABEL_5;
    }
LABEL_63:
    v6 = *(_QWORD *)(v49 + 16 * v54 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 8);
  if (*(void (***)(WebCore::RTCRtpTransceiver *__hidden))a3 != off_1E3361ED8)
  {
    __break(0xC471u);
    JUMPOUT(0x194E61C58);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCRtpTransceiver::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpTransceiver::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpTransceiver::s_info
                                                                     + ~((_QWORD)&WebCore::JSRTCRtpTransceiver::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCRtpTransceiver::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCRtpTransceiver::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCRtpTransceiverPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSRTCRtpTransceiverPrototype::create((WebCore::JSRTCRtpTransceiverPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSRTCRtpTransceiver::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSRTCRtpTransceiver::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 1352);
  if (v26)
    goto LABEL_33;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  if (!*(_QWORD *)(v29 + 1352))
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v30, &v59, v23 + 192, v23 + 1872, 32, 8, &v58);
    v32 = (uint64_t)v58;
    v58 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v59;
    v59 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v34 = *(_QWORD *)(v29 + 1352);
    *(_QWORD *)(v29 + 1352) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v25 + 1352);
  *(_QWORD *)(v25 + 1352) = v26;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528](v36, v35);
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v27);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_33:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_34:
    v26[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v57);
    v26[5] = SlowCase + (int)v57;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336748 & 1) == 0)
  {
    qword_1EE336740 = (uint64_t)&off_1E32DABF0;
    byte_1EE336748 = 1;
  }
  if (!*(_DWORD *)(v40 + 48))
  {
    if ((SlowCase & 8) != 0)
      v41 = (SlowCase - 112) | 1;
    else
      v41 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v41 & 1) != 0)
      v42 = v41 + 47;
    else
      v42 = *(_QWORD *)v41 + 32;
    Allocator = *(_QWORD **)(v42 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v42 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336740;
    Allocator[2] = v40;
    v44 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v44)
      return SlowCase;
LABEL_57:
    *(_QWORD *)(v44 + 8) = 3;
    return SlowCase;
  }
  v59 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v46 = (SlowCase - 112) | 1;
  else
    v46 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v46 & 1) != 0)
    v47 = v46 + 47;
  else
    v47 = *(_QWORD *)v46 + 32;
  v48 = *(_QWORD **)(v47 + 16);
  if (!v48)
    v48 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v47 + 16) = *v48;
  *v48 = SlowCase;
  v48[1] = &qword_1EE336740;
  v48[2] = v40;
  v58 = v48;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
  v44 = (uint64_t)v58;
  if (v58)
    goto LABEL_57;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCRtpTransceiverDirection>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_0::operator() const(void)::impl;
    unk_1EE2F4B70 = &WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_1::operator() const(void)::impl;
    qword_1EE2F4B78 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_2::operator() const(void)::impl;
    unk_1EE2F4B80 = &WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_3::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::RTCRtpTransceiverDirection>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  char **v13;
  uint64_t v14;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
    v4 = v20;
    if (v20)
      goto LABEL_7;
    return 0;
  }
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) == 0)
  {
    if (!v4)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
  if (v4)
LABEL_5:
    *(_DWORD *)v4 += 2;
LABEL_6:
  if (!v4)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  v8 = v7 != 8;
  if (v6 != "inactive" && v7 == 8)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 105 || *(_DWORD *)(v6 + 1) != 1952670062 || *((_DWORD *)v6 + 1) != 1702259060)
      {
LABEL_13:
        v9 = 8;
        goto LABEL_18;
      }
    }
    else
    {
      if (*(_WORD *)v6 != 105)
        goto LABEL_13;
      if (*(_QWORD *)(v6 + 2) != 0x7400630061006ELL || *((_QWORD *)v6 + 1) != 0x65007600690074)
        goto LABEL_13;
    }
LABEL_53:
    v13 = &WebCore::parseEnumerationFromString<WebCore::RTCRtpTransceiverDirection>(WTF::String const&)::mappings;
    goto LABEL_54;
  }
  v10 = v6 == "inactive" && v7 == 8;
  v9 = *(_DWORD *)(v4 + 4);
  if (v10)
    goto LABEL_53;
LABEL_18:
  if (v6 == "recvonly" || v7 != 8)
  {
    if (v6 != "recvonly" || v7 != 8)
      goto LABEL_27;
    goto LABEL_39;
  }
  if (!v9)
    goto LABEL_39;
  if ((v5 & 4) != 0)
  {
    if (*v6 != 114 || *(_DWORD *)(v6 + 1) != 1870029669 || *((_DWORD *)v6 + 1) != 2037149295)
      goto LABEL_27;
LABEL_39:
    v13 = &off_1E32D6E58;
    goto LABEL_54;
  }
  if (*(_WORD *)v6 == 114 && *(_QWORD *)(v6 + 2) == 0x6F007600630065 && *((_QWORD *)v6 + 1) == 0x79006C006E006FLL)
    goto LABEL_39;
LABEL_27:
  if (v6 == "sendonly" || v7 != 8)
  {
    if (v6 == "sendonly" && v7 == 8)
      goto LABEL_36;
  }
  else
  {
    if (!v9)
    {
LABEL_36:
      v13 = &off_1E32D6E70;
LABEL_54:
      v14 = *((unsigned int *)v13 + 4) | 0x100000000;
      goto LABEL_55;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 115 && *(_DWORD *)(v6 + 1) == 1868852837 && *((_DWORD *)v6 + 1) == 2037149295)
        goto LABEL_36;
    }
    else if (*(_WORD *)v6 == 115
           && *(_QWORD *)(v6 + 2) == 0x6F0064006E0065
           && *((_QWORD *)v6 + 1) == 0x79006C006E006FLL)
    {
      goto LABEL_36;
    }
  }
  if (v6 == "sendrecv")
    v8 = 1;
  if (v8)
  {
    if (v7 == 8 && v6 == "sendrecv")
      goto LABEL_77;
  }
  else
  {
    if (!v9)
    {
LABEL_77:
      v13 = &off_1E32D6E88;
      goto LABEL_54;
    }
    if ((v5 & 4) != 0)
    {
      if (*v6 == 115 && *(_DWORD *)(v6 + 1) == 1919184485 && *((_DWORD *)v6 + 1) == 1986225522)
        goto LABEL_77;
    }
    else if (*(_WORD *)v6 == 115
           && *((_QWORD *)v6 + 1) == 0x76006300650072
           && *(_QWORD *)(v6 + 2) == 0x720064006E0065)
    {
      goto LABEL_77;
    }
  }
  v14 = 0;
LABEL_55:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

uint64_t WebCore::JSRTCSctpTransport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCSctpTransportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCSctpTransportPrototype::create(WebCore::JSRTCSctpTransportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSRTCSctpTransport::s_info, &WebCore::JSRTCSctpTransportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCSctpTransport>,(WebCore::DOMConstructorID)167>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1336);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCSctpTransport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCSctpTransport::s_info + ~((_QWORD)&WebCore::JSRTCSctpTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCSctpTransport::s_info + ~((_QWORD)&WebCore::JSRTCSctpTransport::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCSctpTransport::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCSctpTransport::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCSctpTransportPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRTCSctpTransportPrototype::create((WebCore::JSRTCSctpTransportPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRTCSctpTransport::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRTCSctpTransport::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1336) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCSctpTransportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCSctpTransportPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCSctpTransport>,(WebCore::DOMConstructorID)167>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCSctpTransport_transport(int a1, uint64_t a2)
{
  return WebCore::wrap<WebCore::RTCDtlsTransport>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48));
}

uint64_t WebCore::jsRTCSctpTransport_state(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 56);
  if ((byte_1EE3366E9 & 1) == 0)
  {
    dword_1ECE798E0 += 2;
    byte_1EE3366E9 = 1;
    dword_1ECE79900 += 2;
    qword_1EE336828 = (uint64_t)&dword_1ECE798E0;
    unk_1EE336830 = &dword_1ECE79900;
    dword_1ECE79920 += 2;
    qword_1EE336838 = (uint64_t)&dword_1ECE79920;
  }
  v5 = *(_QWORD *)&_MergedGlobals_514[8 * v4 + 320];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsRTCSctpTransport_maxMessageSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 72))
    v3 = *(double *)(v2 + 64);
  else
    v3 = INFINITY;
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v3, v3 == (double)(int)v4)
    && ((_DWORD)v4 || (*(_QWORD *)&v3 & 0x8000000000000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

unint64_t WebCore::jsRTCSctpTransport_maxChannels(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) & 0xFF0000) != 0)
    return (unsigned __int16)*(_DWORD *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
  else
    return 2;
}

uint64_t WebCore::jsRTCSctpTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1984), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore *)((char *)v5 - 32));
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v9;
}

BOOL WebCore::setJSRTCSctpTransport_onstatechange(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRTCSctpTransport::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRTCSctpTransport::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1984), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::EventTarget *)((char *)v11 - 32));
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRTCSctpTransportOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSRTCSctpTransportOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::RTCSctpTransport *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::RTCSctpTransport *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::RTCSctpTransport *)(v3 - 32);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::RTCSctpTransport **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::RTCSctpTransport **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::RTCSctpTransport::~RTCSctpTransport(v4);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::wrap<WebCore::RTCSctpTransport>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3361EF8)
  {
    __break(0xC471u);
    JUMPOUT(0x194E63588);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRTCSctpTransport::s_info + ~((_QWORD)&WebCore::JSRTCSctpTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCSctpTransport::s_info + ~((_QWORD)&WebCore::JSRTCSctpTransport::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRTCSctpTransport::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRTCSctpTransport::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRTCSctpTransportPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRTCSctpTransportPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRTCSctpTransport::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRTCSctpTransport::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1360);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1360);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1360);
    *(_QWORD *)(v30 + 1360) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1360);
  *(_QWORD *)(v26 + 1360) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336758 & 1) == 0)
  {
    qword_1EE336750 = (uint64_t)&off_1E32DAC20;
    byte_1EE336758 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336750;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336750;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCSdpType>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE3366EA & 1) == 0)
  {
    dword_1ECE79940 += 2;
    byte_1EE3366EA = 1;
    dword_1ECE79960 += 2;
    qword_1EE336870 = (uint64_t)&dword_1ECE79940;
    unk_1EE336878 = &dword_1ECE79960;
    dword_1ECE79980 += 2;
    dword_1ECE799A0 += 2;
    qword_1EE336880 = (uint64_t)&dword_1ECE79980;
    unk_1EE336888 = &dword_1ECE799A0;
  }
  v3 = *(_QWORD *)&_MergedGlobals_514[8 * (int)a2 + 392];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::parseEnumeration<WebCore::RTCSdpType>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v22;
  unint64_t v23;

  v3 = a1;
  v23 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v23, a1);
  v4 = v22;
  if (!v22)
    return 0;
LABEL_7:
  v5 = *(const char **)(v4 + 8);
  v6 = *(_DWORD *)(v4 + 4);
  v7 = ((unint64_t)*(unsigned int *)(v4 + 16) >> 2) & 1;
  if (v5 != "answer" && v6 == 6)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 97 || *(_DWORD *)(v5 + 1) != 1702327150 || *(_DWORD *)(v5 + 2) != 1919252339)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v5 != 97)
        goto LABEL_16;
      v13 = *(_QWORD *)(v5 + 2);
      v14 = *(_QWORD *)(v5 + 4);
      if (v13 != 0x6500770073006ELL || v14 != 0x72006500770073)
        goto LABEL_16;
    }
    goto LABEL_41;
  }
  if (v5 == "answer" && v6 == 6)
  {
LABEL_41:
    v12 = &WebCore::parseEnumerationFromString<WebCore::RTCSdpType>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v5 != "offer" && v6 == 5)
  {
    if ((_DWORD)v7)
    {
      if (*v5 != 111 || *(_WORD *)(v5 + 1) != 26214 || *(_WORD *)(v5 + 3) != 29285)
        goto LABEL_16;
    }
    else if (*(_WORD *)v5 != 111 || *(_QWORD *)(v5 + 2) != 0x72006500660066)
    {
      goto LABEL_16;
    }
  }
  else if (v5 != "offer" || v6 != 5)
  {
    v17 = v7 << 32;
    v18 = v6 != 8;
    if (v5 == "pranswer" || v6 != 8)
    {
      v19 = *(_DWORD *)(v4 + 4);
      if (v5 != "pranswer" || v6 != 8)
        goto LABEL_65;
    }
    else
    {
      if ((_DWORD)v7)
      {
        if (*v5 != 112 || *(_DWORD *)(v5 + 1) != 1936613746 || *((_DWORD *)v5 + 1) != 1919252339)
        {
          v18 = 0;
          v19 = 8;
          v17 = 0x100000000;
          goto LABEL_65;
        }
        goto LABEL_61;
      }
      if (*(_WORD *)v5 != 112)
      {
        v18 = 0;
        v19 = 8;
        goto LABEL_65;
      }
      v18 = 0;
      v19 = 8;
      if (*(_QWORD *)(v5 + 2) != 0x73006E00610072 || *((_QWORD *)v5 + 1) != 0x72006500770073)
      {
LABEL_65:
        if (v5 == "rollback" || v18)
        {
          if (v6 == 8 && v5 == "rollback")
            goto LABEL_72;
        }
        else
        {
          if (!v19)
          {
LABEL_72:
            v12 = &off_1E32D71E8;
            goto LABEL_42;
          }
          if (v17)
          {
            if (*v5 == 114 && *(_DWORD *)(v5 + 1) == 1651272815 && *((_DWORD *)v5 + 1) == 1801675106)
              goto LABEL_72;
          }
          else if (*(_WORD *)v5 == 114
                 && *((_QWORD *)v5 + 1) == 0x6B006300610062
                 && *(_QWORD *)(v5 + 2) == 0x62006C006C006FLL)
          {
            goto LABEL_72;
          }
        }
LABEL_16:
        v9 = 0;
        goto LABEL_43;
      }
    }
LABEL_61:
    v12 = &off_1E32D71D0;
    goto LABEL_42;
  }
  v12 = &off_1E32D71B8;
LABEL_42:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCSessionDescription>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSCell *v11;
  JSC::JSCell *v12;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v14;
  JSC::JSGlobalObject *v15;
  JSC::VM *v16;
  JSC::Structure *v17;
  uint64_t FunctionRealm;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  JSC::JSObject *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  unint64_t SubclassStructure;
  bmalloc::api *v34;
  JSCell *result;
  WTF::StringImpl *v36;
  uint64_t v37;
  JSValue v38;
  bmalloc::api *v39;
  int v40;
  uint64_t v41;
  unsigned int v42;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v38);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convertDictionary<WebCore::RTCSessionDescriptionInit>(*(JSC::JSCell **)(a2 + 48), (JSC::VM **)a1, (uint64_t)&v40);
  v6 = v42;
  if (!v42)
  {
    v7 = v40;
    v8 = v41;
    v41 = 0;
    v9 = bmalloc::api::isoAllocate();
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = v8;
    v39 = (bmalloc::api *)v9;
    v11 = (JSCell *)WebCore::toJSNewlyCreated(*(_QWORD *)(v5 + 40), &v39);
    v12 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v12 & 0xFFFE000000000002) != 0
      || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v12)) == 0
      || (v15 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v16 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = JSC::getFunctionRealm(a1, Object, v14),
          *((_DWORD *)v16 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    {
LABEL_16:
      if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
        v11 = 0;
      v34 = v39;
      if (v39)
      {
        if (*(_DWORD *)v39 == 1)
        {
          v36 = (WTF::StringImpl *)*((_QWORD *)v39 + 3);
          *((_QWORD *)v39 + 3) = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v10);
            else
              *(_DWORD *)v36 -= 2;
          }
          v37 = *((_QWORD *)v34 + 1);
          if (v37)
          {
            *(_QWORD *)(v37 + 8) = 3;
            *((_QWORD *)v34 + 1) = 0;
          }
          bmalloc::api::isoDeallocate(v34, v10);
        }
        else
        {
          --*(_DWORD *)v39;
        }
      }
      goto LABEL_20;
    }
    v19 = *(_QWORD *)(FunctionRealm + 3296);
    if (v19)
    {
      v20 = *(_DWORD *)(v19 - 8);
      v21 = ((unint64_t)&WebCore::JSRTCSessionDescription::s_info
           + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCSessionDescription::s_info
                                                                           + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) >> 22);
      v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
      v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
      v24 = v20 & ((v23 >> 31) ^ v23);
      v25 = *(char ***)(v19 + 16 * v24);
      if (v25 == &WebCore::JSRTCSessionDescription::s_info)
      {
LABEL_12:
        v27 = *(JSC::JSObject **)(v19 + 16 * v24 + 8);
        if (v27)
        {
LABEL_14:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v15, v27, v17);
          if (!*((_DWORD *)v16 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) == 0)
            JSC::JSObject::setStructure(v11, v16, SubclassStructure);
          goto LABEL_16;
        }
      }
      else
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(char ***)(v19 + 16 * v24);
          ++v26;
          if (v25 == &WebCore::JSRTCSessionDescription::s_info)
            goto LABEL_12;
        }
      }
    }
    Structure = WebCore::JSRTCSessionDescriptionPrototype::createStructure((uint64_t *)v16, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSRTCSessionDescriptionPrototype::create(v16, Structure, v29, v30);
    v32 = WebCore::JSRTCSessionDescription::createStructure((uint64_t *)v16, FunctionRealm, v31);
    v27 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v32, (uint64_t)&WebCore::JSRTCSessionDescription::s_info);
    goto LABEL_14;
  }
  v11 = 0;
  result = 0;
  if (v42 != -1)
  {
LABEL_20:
    ((void (*)(bmalloc::api **, int *))off_1E32DB678[v6])(&v39, &v40);
    return v11;
  }
  return result;
}

uint64_t WebCore::JSRTCSessionDescription::destroy(uint64_t this, JSC::JSCell *a2)
{
  bmalloc::api *v2;
  WTF::StringImpl *v3;
  uint64_t v4;

  v2 = *(bmalloc::api **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      v4 = *((_QWORD *)v2 + 1);
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        *((_QWORD *)v2 + 1) = 0;
      }
      return bmalloc::api::isoDeallocate(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSRTCSessionDescription::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCSessionDescriptionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCSessionDescriptionPrototype::create(WebCore::JSRTCSessionDescriptionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSRTCSessionDescription::s_info, &WebCore::JSRTCSessionDescriptionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCSessionDescription>,(WebCore::DOMConstructorID)168>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1344);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSRTCSessionDescription>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCSessionDescription::s_info
         + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCSessionDescription::s_info
                                                                         + ~((_QWORD)&WebCore::JSRTCSessionDescription::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCSessionDescription::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCSessionDescription::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCSessionDescriptionPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCSessionDescriptionPrototype::create((WebCore::JSRTCSessionDescriptionPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCSessionDescription::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCSessionDescription::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1344) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCSessionDescriptionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCSessionDescriptionPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCSessionDescription>,(WebCore::DOMConstructorID)168>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCSessionDescription_type(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::RTCSdpType>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 16));
}

uint64_t WebCore::jsRTCSessionDescription_sdp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSRTCSessionDescriptionOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCSessionDescriptionOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  bmalloc::api *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  v4 = (*(_DWORD *)v3)++;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(bmalloc::api **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(bmalloc::api **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_17;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_17:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *(_DWORD *)v3 - 1;
  }
  else
  {
    v5 = *((_QWORD *)v3 + 1);
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 3;
      *((_QWORD *)v3 + 1) = 0;
    }
  }
  if (v4)
  {
    *(_DWORD *)v3 = v4;
  }
  else
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *((_QWORD *)v3 + 1);
    if (v7)
    {
      *(_QWORD *)(v7 + 8) = 3;
      *((_QWORD *)v3 + 1) = 0;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
}

unint64_t WebCore::wrap<WebCore::RTCSessionDescription>(uint64_t a1, uint64_t a2, bmalloc::api *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  bmalloc::api *v7;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  bmalloc::api *v17;
  int v18;
  bmalloc::api *v19;

  v3 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v3 + 48))
  {
    v11 = *(_QWORD *)(v3 + 32);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(bmalloc::api **)(v11 + 16 * v16);
      if (v17 == a3)
      {
LABEL_20:
        v4 = *(_QWORD *)(v11 + 16 * v16 + 8);
        if (v4)
          goto LABEL_3;
      }
      else
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(bmalloc::api **)(v11 + 16 * v16);
          ++v18;
          if (v17 == a3)
            goto LABEL_20;
        }
      }
    }
  }
  else
  {
    v4 = *((_QWORD *)a3 + 1);
    if (v4)
    {
LABEL_3:
      if ((*(_BYTE *)(v4 + 8) & 3) == 0)
      {
        v5 = *(_QWORD *)v4;
        if (*(_QWORD *)v4)
          return v5;
      }
    }
  }
  ++*(_DWORD *)a3;
  v19 = a3;
  v5 = WebCore::toJSNewlyCreated(a2, &v19);
  v7 = v19;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v19 + 3);
      *((_QWORD *)v19 + 3) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *((_QWORD *)v7 + 1);
      if (v10)
      {
        *(_QWORD *)(v10 + 8) = 3;
        *((_QWORD *)v7 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v7, v6);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  return v5;
}

uint64_t WebCore::convertDictionary<WebCore::RTCSessionDescriptionInit>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v5;
  JSC::Structure *v6;
  uint64_t Object;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  int v18;
  JSC::VM *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  v23 = a2[7];
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v6 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
LABEL_46:
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v9 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v21);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v8);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v23 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
    if ((_DWORD)result)
      goto LABEL_46;
  }
  if (v9 != 10)
  {
    v25 = (WTF::StringImpl *)v9;
    v11 = a2[7];
    if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, (JSC::JSGlobalObject *)a2);
      goto LABEL_20;
    }
    v12 = *(WTF::StringImpl **)(v9 + 8);
    if ((v12 & 1) != 0)
    {
      v12 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v9, (JSC::JSGlobalObject *)a2);
      if (!v12)
        goto LABEL_19;
    }
    else if (!v12)
    {
LABEL_19:
      v24 = v12;
LABEL_20:
      if (*((_DWORD *)v11 + 20))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
        v10 = v24;
        if ((_DWORD)result)
        {
          v22 = 1;
          v24 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              result = WTF::StringImpl::destroy(v10, v17);
            else
              *(_DWORD *)v10 -= 2;
          }
          v10 = 0;
          goto LABEL_29;
        }
      }
      else
      {
        v10 = v24;
      }
      v22 = 0;
      v21 = 0;
      goto LABEL_23;
    }
    *(_DWORD *)v12 += 2;
    goto LABEL_19;
  }
LABEL_10:
  v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v10 += 2;
  v22 = 0;
  v21 = 0;
  if (v5 == 2)
  {
LABEL_28:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v23, "type", 5, "RTCSessionDescriptionInit", 26, "RTCSdpType", 11);
    goto LABEL_29;
  }
LABEL_23:
  WTF::AtomStringImpl::addLiteral();
  v13 = v25;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v25);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_DWORD *)v23 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
    if ((result & 1) != 0)
      goto LABEL_29;
  }
  if (v15 == 10)
    goto LABEL_28;
  v25 = a2[7];
  v19 = v25;
  result = WebCore::parseEnumeration<WebCore::RTCSdpType>((JSC::JSGlobalObject *)a2, v15);
  v20 = result;
  if (!*((_DWORD *)v19 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v19), (result & 1) == 0))
  {
    if ((v20 & 0xFF00000000) != 0)
    {
      v18 = 0;
      *(_DWORD *)a3 = v20;
      *(_QWORD *)(a3 + 8) = v10;
      v10 = 0;
      goto LABEL_33;
    }
    result = JSC::throwTypeError();
  }
LABEL_29:
  v18 = 1;
LABEL_33:
  *(_DWORD *)(a3 + 16) = v18;
  if (v22 != -1)
    result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v22])(&v25, &v21);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return WTF::StringImpl::destroy(v10, v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RTCSignalingState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl;
    *(_QWORD *)algn_1EE2F4B98 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl;
    qword_1EE2F4BA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl;
    unk_1EE2F4BA8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl;
    qword_1EE2F4BB0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl;
    unk_1EE2F4BB8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[(int)a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSRTCStatsReport::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
        (*(void (**)(uint64_t, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSRTCStatsReport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCStatsReportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCStatsReportPrototype::create(WebCore::JSRTCStatsReportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::Structure *v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  JSC::Structure **v29;
  int *v30;
  int v31;
  int v32;
  JSC::Structure *v33;
  int v34;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v22);
    *((_QWORD *)this + 4865) = SlowCase + (int)v22;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSRTCStatsReport::s_info, (uint64_t)&WebCore::JSRTCStatsReportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 48) + 3952);
  if (((unint64_t)v11 >> 4)
    && (((unint64_t)v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x20)) == 0
    && (v12 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this)) != 0&& (v25 = v11, v13 = JSC::PropertyTable::get(v12, (uint64_t *)&v25), (_DWORD)v13 != -1))
  {
    if ((int)v13 > 63)
    {
      v23 = *(_QWORD *)(SlowCase + 8) - 8;
      v24 = 0x3F00000000 - (v13 << 32);
    }
    else
    {
      v23 = SlowCase + 16;
      v24 = v13 << 32;
    }
    v14 = *(_QWORD *)(v23 + (v24 >> 29));
  }
  else
  {
    v14 = 0;
  }
  v25 = 0;
  v26 = SlowCase;
  v27 = 0x1000000FFFFFFFFLL;
  v28 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, v14, 4, (uint64_t)&v25);
  v15 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = JSC::JSString::create((uint64_t)this, &v25);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v34 = *(_DWORD *)SlowCase;
  v33 = v19;
  v20 = JSC::Structure::outOfLineCapacity(v19);
  v31 = 0;
  v32 = v20;
  v25 = (WTF::StringImpl *)&v32;
  v26 = SlowCase;
  v27 = (uint64_t)this;
  v28 = &v34;
  v29 = &v33;
  v30 = &v31;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v19, this, v15, 6, (uint64_t)&v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v31, v17);
  *((_DWORD *)v19 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCStatsReport>,(WebCore::DOMConstructorID)169>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1352);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCStatsReport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSRTCStatsReport::s_info + ~((_QWORD)&WebCore::JSRTCStatsReport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCStatsReport::s_info + ~((_QWORD)&WebCore::JSRTCStatsReport::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSRTCStatsReport::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSRTCStatsReport::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSRTCStatsReportPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCStatsReportPrototype::create((WebCore::JSRTCStatsReportPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSRTCStatsReport::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCStatsReport::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1352) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCStatsReportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCStatsReportPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRTCStatsReport>,(WebCore::DOMConstructorID)169>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRTCStatsReport_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingMap;
  JSC::Structure *v11;
  JSC::Structure *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD v17[2];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRTCStatsReport::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRTCStatsReport::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingMap = WebCore::getBackingMap((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingMap)
  {
    v17[0] = this;
    v17[1] = v11;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*((_QWORD *)a2 + 3) + 8) + 16))(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8), v17);
  }
  v13 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v15 = JSC::JSObject::get(v12, this, (unint64_t)v13);
  if (*v13 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v14);
  else
    *v13 -= 2;
  return v15;
}

uint64_t WebCore::JSRTCStatsReportOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSRTCStatsReportOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::RTCStatsReport>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSRTCStatsReport::s_info + ~((_QWORD)&WebCore::JSRTCStatsReport::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCStatsReport::s_info + ~((_QWORD)&WebCore::JSRTCStatsReport::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSRTCStatsReport::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSRTCStatsReport::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSRTCStatsReportPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSRTCStatsReportPrototype::create((WebCore::JSRTCStatsReportPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSRTCStatsReport::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSRTCStatsReport::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1376);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1376))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1376);
    *(_QWORD *)(v36 + 1376) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1376);
  *(_QWORD *)(v32 + 1376) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336778 & 1) == 0)
  {
    qword_1EE336770 = (uint64_t)&off_1E32DAC80;
    byte_1EE336778 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336770;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCTrackEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  int v6;
  JSC::JSCell *v7;
  uint64_t Object;
  uint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  BOOL v12;
  JSC::VM *v13;
  double v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  BOOL v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  BOOL v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  JSCell *v29;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char **v47;
  BOOL v48;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  void (***v53)(WebCore::RTCTrackEvent *__hidden);
  void *v54;
  WTF::StringImpl *v55;
  WebCore::JSDOMGlobalObject *v56;
  WTF::StringImpl *v57;
  JSC::VM *v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  int v66;
  unint64_t v67;
  WebCore::JSEvent *v68;
  JSC::JSCell *v69;
  unint64_t Structure;
  JSC::Structure *v71;
  JSC::JSCell *v72;
  uint64_t v73;
  JSC::JSCell *v74;
  JSC::JSGlobalObject *v75;
  JSC::JSObject *v76;
  JSC::JSGlobalObject *v77;
  JSC::VM *v78;
  WebCore::JSDOMGlobalObject *v79;
  JSC::Structure *v80;
  JSC::VM *FunctionRealm;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  int v89;
  JSC::JSCell *v90;
  unint64_t v91;
  JSC::Structure *v92;
  JSC::JSCell *v93;
  uint64_t v94;
  unint64_t SubclassStructure;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _BOOL4 v99;
  char **v100;
  BOOL v101;
  unsigned int v103;
  JSValue v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  int *v108;
  int v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  BOOL v115;
  int v116;
  uint64_t v117;
  int *v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  JSC::VM *v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  int v134;
  __int16 v135;
  char v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  JSC::VM *v140;
  _QWORD v141[2];

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v104.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v104);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v130);
  v6 = v131;
  if (!v131)
  {
    v7 = *(JSC::JSCell **)(a2 + 56);
    v140 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v139 = 0;
      v138 = 0u;
      v137 = 0u;
      v135 = 0;
      v136 = 0;
LABEL_45:
      WebCore::throwRequiredMemberTypeError((int)a1, (int)&v140, "receiver", 9, "RTCTrackEventInit", 18, "RTCRtpReceiver", 15);
      goto LABEL_46;
    }
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v7)) == 0)
    {
      JSC::throwTypeError();
      v29 = 0;
      v28 = 1;
      v129 = 1;
      goto LABEL_47;
    }
    v9 = Object;
    v122 = v3;
    v135 = 0;
    v136 = 0;
    v137 = 0u;
    v138 = 0u;
    v139 = 0;
    WTF::AtomStringImpl::addLiteral();
    v11 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v10);
      else
        *(_DWORD *)v123 -= 2;
    }
    if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
    {
LABEL_46:
      v28 = 1;
      v129 = 1;
      WebCore::RTCTrackEvent::Init::~Init((WebCore::RTCTrackEvent::Init *)&v135, v27);
      v29 = 0;
LABEL_47:
      (*(&off_1E32DB878 + v28))((int)&v135, (WebCore::RTCTrackEvent::Init *)&v123);
      v6 = v131;
      goto LABEL_48;
    }
    if (v11 != 10)
    {
      v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
        goto LABEL_191;
      *(_QWORD *)&v14 = v11 - 0x2000000000000;
      if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v12 = v14 > 0.0 || v14 < 0.0;
        goto LABEL_17;
      }
      if ((v11 & 0xFFFE000000000002) != 0)
      {
        v12 = v11 == 7;
        goto LABEL_17;
      }
      v106 = *(unsigned __int8 *)(v11 + 5);
      if (v106 == 3)
      {
        v109 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v106 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v105 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_238;
          }
          v12 = 1;
          goto LABEL_17;
        }
        v107 = *(_QWORD *)(v11 + 8);
        if ((v107 & 1) != 0)
          v108 = (int *)(v11 + 16);
        else
          v108 = (int *)(v107 + 4);
        v109 = *v108;
      }
      v105 = v109 == 0;
      goto LABEL_238;
    }
    v12 = 0;
    while (1)
    {
      LOBYTE(v135) = v12;
      WTF::AtomStringImpl::addLiteral();
      v16 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v15);
        else
          *(_DWORD *)v123 -= 2;
      }
      if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
        goto LABEL_46;
      if (v16 == 10)
      {
        v17 = 0;
        goto LABEL_29;
      }
      v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v16 >= 0xFFFE000000000000)
        break;
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v16 & 0xFFFE000000000002) != 0)
        {
          v17 = v16 == 7;
          goto LABEL_28;
        }
        v111 = *(unsigned __int8 *)(v16 + 5);
        if (v111 == 3)
        {
          v114 = *(_DWORD *)(v16 + 8);
          goto LABEL_224;
        }
        if (v111 == 2)
        {
          v112 = *(_QWORD *)(v16 + 8);
          if ((v112 & 1) != 0)
            v113 = (int *)(v16 + 16);
          else
            v113 = (int *)(v112 + 4);
          v114 = *v113;
LABEL_224:
          v110 = v114 == 0;
        }
        else
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_229:
            v17 = 1;
            goto LABEL_28;
          }
          v110 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        }
LABEL_225:
        v17 = !v110;
        goto LABEL_28;
      }
      if (v19 > 0.0)
        goto LABEL_229;
      v17 = v19 < 0.0;
LABEL_28:
      if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
        goto LABEL_46;
LABEL_29:
      HIBYTE(v135) = v17;
      WTF::AtomStringImpl::addLiteral();
      v21 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v20);
        else
          *(_DWORD *)v123 -= 2;
      }
      if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
        goto LABEL_46;
      if (v21 == 10)
      {
        v22 = 0;
        goto LABEL_40;
      }
      v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v21 >= 0xFFFE000000000000)
      {
        v115 = (_DWORD)v21 == 0;
        goto LABEL_232;
      }
      *(_QWORD *)&v24 = v21 - 0x2000000000000;
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          v22 = v21 == 7;
          goto LABEL_39;
        }
        v116 = *(unsigned __int8 *)(v21 + 5);
        if (v116 == 3)
        {
          v119 = *(_DWORD *)(v21 + 8);
        }
        else
        {
          if (v116 != 2)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
LABEL_236:
              v22 = 1;
              goto LABEL_39;
            }
            v115 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_232;
          }
          v117 = *(_QWORD *)(v21 + 8);
          if ((v117 & 1) != 0)
            v118 = (int *)(v21 + 16);
          else
            v118 = (int *)(v117 + 4);
          v119 = *v118;
        }
        v115 = v119 == 0;
LABEL_232:
        v22 = !v115;
        goto LABEL_39;
      }
      if (v24 > 0.0)
        goto LABEL_236;
      v22 = v24 < 0.0;
LABEL_39:
      if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
        goto LABEL_46;
LABEL_40:
      v136 = v22;
      WTF::AtomStringImpl::addLiteral();
      v26 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v25);
        else
          *(_DWORD *)v123 -= 2;
      }
      if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
        goto LABEL_46;
      if (v26 == 10)
        goto LABEL_45;
      v123 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      if ((v26 & 0xFFFE000000000002) != 0)
        goto LABEL_60;
      v31 = *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C);
      v32 = *(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v31)
      {
        v33 = 16 * v31;
        if ((char **)v33 != &WebCore::JSRTCRtpReceiver::s_info)
        {
          do
          {
            v33 = *(_QWORD *)(v33 + 16);
            v32 = v33 != 0;
          }
          while ((char **)v33 != &WebCore::JSRTCRtpReceiver::s_info && v33 != 0);
        }
      }
      if (!v32 || (v35 = *(_QWORD *)(v26 + 24)) == 0)
      {
LABEL_60:
        JSC::throwTypeError();
        goto LABEL_46;
      }
      ++*(_DWORD *)(v35 + 8);
      *(_QWORD *)&v137 = v35;
      WTF::AtomStringImpl::addLiteral();
      v36 = v123;
      v11 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
          WTF::StringImpl::destroy(v123, v37);
        else
          *(_DWORD *)v123 -= 2;
      }
      if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
        goto LABEL_46;
      if (v11 == 10)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v134 = 0;
        goto LABEL_72;
      }
      v141[0] = *((_QWORD *)a1 + 7);
      if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v50 = v123;
        v123 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v41);
          else
            *(_DWORD *)v50 -= 2;
        }
        v42 = 1;
        v134 = 1;
      }
      else
      {
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::MediaStream>>>::convert(a1, v11, (uint64_t)&v132);
        v42 = v134;
        if (!v134)
        {
          v40 = (uint64_t)v132;
          v39 = v133;
          v38 = HIDWORD(v133);
LABEL_72:
          v132 = 0;
          v133 = 0;
          v121 = v40;
          *(_QWORD *)&v138 = v40;
          *((_QWORD *)&v138 + 1) = __PAIR64__(v38, v39);
          v120 = v38;
          WTF::AtomStringImpl::addLiteral();
          v36 = v123;
          v44 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
              WTF::StringImpl::destroy(v123, v43);
            else
              *(_DWORD *)v123 -= 2;
          }
          if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
            goto LABEL_90;
          if (v44 == 10)
          {
            WebCore::throwRequiredMemberTypeError((int)a1, (int)&v140, "track", 6, "RTCTrackEventInit", 18, "MediaStreamTrack", 17);
            goto LABEL_90;
          }
          v123 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
          if ((v44 & 0xFFFE000000000002) != 0)
            goto LABEL_89;
          v45 = *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C);
          v46 = *(_DWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C) != 0;
          v47 = (char **)(16 * v45);
          if ((_DWORD)v45)
            v48 = v47 == &WebCore::JSMediaStreamTrack::s_info;
          else
            v48 = 1;
          if (!v48)
          {
            do
            {
              v47 = (char **)v47[2];
              v46 = v47 != 0;
            }
            while (v47 != &WebCore::JSMediaStreamTrack::s_info && v47 != 0);
          }
          if (!v46)
          {
LABEL_89:
            JSC::throwTypeError();
            goto LABEL_90;
          }
          v97 = *(_QWORD *)(v44 + 24);
          v36 = (WTF::StringImpl *)(v97 - 32);
          ++*(_DWORD *)(v97 - 8);
          *((_QWORD *)&v137 + 1) = v97 - 32;
          WTF::AtomStringImpl::addLiteral();
          v9 = JSC::JSObject::get((JSC::Structure *)v9, a1, (unint64_t)v123);
          if (v123)
          {
            if (*(_DWORD *)v123 == 2)
              WTF::StringImpl::destroy(v123, v41);
            else
              *(_DWORD *)v123 -= 2;
          }
          if (*((_DWORD *)v140 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v140) & 1) != 0)
          {
LABEL_90:
            v28 = 1;
            v11 = v121;
          }
          else
          {
            v11 = v121;
            if (v9 == 10)
            {
              WebCore::throwRequiredMemberTypeError((int)a1, (int)&v140, "transceiver", 12, "RTCTrackEventInit", 18, "RTCRtpTransceiver", 18);
              goto LABEL_151;
            }
            v123 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
            if ((v9 & 0xFFFE000000000002) != 0)
              goto LABEL_150;
            v98 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
            v99 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
            v100 = (char **)(16 * v98);
            if ((_DWORD)v98)
              v101 = v100 == &WebCore::JSRTCRtpTransceiver::s_info;
            else
              v101 = 1;
            if (!v101)
            {
              do
              {
                v100 = (char **)v100[2];
                v99 = v100 != 0;
              }
              while (v100 != &WebCore::JSRTCRtpTransceiver::s_info && v100 != 0);
            }
            if (v99 && (v9 = *(_QWORD *)(v9 + 24)) != 0)
            {
              v103 = v39;
              v28 = 0;
              ++*(_DWORD *)(v9 + 8);
              LOWORD(v123) = v135;
              BYTE2(v123) = v136;
              v137 = 0uLL;
              v124 = v35;
              v125 = v36;
              v138 = 0uLL;
              v126 = v121;
              v127 = __PAIR64__(v120, v103);
              v139 = 0;
              v128 = v9;
            }
            else
            {
LABEL_150:
              JSC::throwTypeError();
LABEL_151:
              v28 = 1;
            }
          }
          v129 = v28;
          v42 = v134;
          goto LABEL_97;
        }
      }
      v28 = 1;
      v129 = 1;
LABEL_97:
      if (v42 != -1)
        ((void (*)(_QWORD *, _DWORD **))off_1E32DB868[v42])(v141, &v132);
      WebCore::RTCTrackEvent::Init::~Init((WebCore::RTCTrackEvent::Init *)&v135, v41);
      if (v28)
      {
        v29 = 0;
        v28 = 1;
        goto LABEL_47;
      }
      if (!v131)
      {
        v51 = v130;
        v130 = 0;
        v141[0] = v51;
        v135 = (__int16)v123;
        v136 = BYTE2(v123);
        v124 = 0;
        v125 = 0;
        *(_QWORD *)&v137 = v35;
        *((_QWORD *)&v137 + 1) = v36;
        *(_QWORD *)&v138 = v11;
        v52 = v127;
        v126 = 0;
        v127 = 0;
        *((_QWORD *)&v138 + 1) = v52;
        v128 = 0;
        v139 = v9;
        v53 = (void (***)(WebCore::RTCTrackEvent *__hidden))bmalloc::api::isoAllocate();
        v132 = (_DWORD *)WebCore::RTCTrackEvent::RTCTrackEvent((uint64_t)v53, v141, (unsigned __int8 *)&v135, 0);
        WebCore::RTCTrackEvent::Init::~Init((WebCore::RTCTrackEvent::Init *)&v135, v54);
        v57 = (WTF::StringImpl *)v141[0];
        v141[0] = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v55);
          else
            *(_DWORD *)v57 -= 2;
        }
        if (*v53 != off_1E3362018)
        {
          __break(0xC471u);
          JUMPOUT(0x194E74880);
        }
        v58 = *(JSC::VM **)(v5 + 40);
        v59 = *((_QWORD *)v58 + 412);
        if (!v59)
          goto LABEL_111;
        v60 = *(_DWORD *)(v59 - 8);
        v61 = ((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) >> 22);
        v62 = 9 * ((v61 + ~(v61 << 13)) ^ ((v61 + ~(v61 << 13)) >> 8));
        v63 = (v62 ^ (v62 >> 15)) + ~((v62 ^ (v62 >> 15)) << 27);
        v64 = v60 & ((v63 >> 31) ^ v63);
        v65 = *(char ***)(v59 + 16 * v64);
        if (v65 == &WebCore::JSRTCTrackEvent::s_info)
        {
LABEL_110:
          v67 = *(_QWORD *)(v59 + 16 * v64 + 8);
          if (!v67)
            goto LABEL_111;
        }
        else
        {
          v66 = 1;
          while (v65)
          {
            v64 = ((_DWORD)v64 + v66) & v60;
            v65 = *(char ***)(v59 + 16 * v64);
            ++v66;
            if (v65 == &WebCore::JSRTCTrackEvent::s_info)
              goto LABEL_110;
          }
LABEL_111:
          v68 = (WebCore::JSEvent *)*((_QWORD *)v58 + 7);
          v69 = (JSC::JSCell *)WebCore::JSEvent::prototype(v68, *(JSC::VM **)(v5 + 40), v56);
          Structure = WebCore::JSRTCTrackEventPrototype::createStructure((uint64_t *)v68, (uint64_t)v58, v69);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v72 = (JSC::JSCell *)WebCore::JSRTCTrackEventPrototype::create(v68, v58, Structure, v71);
          v73 = WebCore::JSRTCTrackEvent::createStructure((uint64_t *)v68, (uint64_t)v58, v72);
          v67 = WebCore::cacheDOMStructure((JSCell *)v58, v73, (uint64_t)&WebCore::JSRTCTrackEvent::s_info);
        }
        v29 = (JSCell *)WebCore::JSRTCTrackEvent::create(v67, v58, (uint64_t *)&v132);
        WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v58 + 415), (uint64_t)v53, (uint64_t)v29);
        v74 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v74 & 0xFFFE000000000002) != 0
          || (v75 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v74)) == 0
          || (v77 = v75, v75 == *(JSC::JSGlobalObject **)(a2 + 24))
          || (v78 = (JSC::VM *)*((_QWORD *)a1 + 7),
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v75, v76),
              *((_DWORD *)v78 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) != 0)
        {
LABEL_125:
          if (*((_DWORD *)v122 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v122) & 1) != 0)
            v29 = 0;
          v96 = v132;
          v132 = 0;
          if (v96)
          {
            if (v96[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
            else
              --v96[4];
          }
          goto LABEL_47;
        }
        v82 = *((_QWORD *)FunctionRealm + 412);
        if (v82)
        {
          v83 = *(_DWORD *)(v82 - 8);
          v84 = ((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) >> 22);
          v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
          v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
          v87 = v83 & ((v86 >> 31) ^ v86);
          v88 = *(char ***)(v82 + 16 * v87);
          if (v88 != &WebCore::JSRTCTrackEvent::s_info)
          {
            v89 = 1;
            while (v88)
            {
              v87 = ((_DWORD)v87 + v89) & v83;
              v88 = *(char ***)(v82 + 16 * v87);
              ++v89;
              if (v88 == &WebCore::JSRTCTrackEvent::s_info)
                goto LABEL_121;
            }
            goto LABEL_122;
          }
LABEL_121:
          v79 = *(WebCore::JSDOMGlobalObject **)(v82 + 16 * v87 + 8);
          if (!v79)
            goto LABEL_122;
        }
        else
        {
LABEL_122:
          v90 = (JSC::JSCell *)WebCore::JSEvent::prototype(v78, FunctionRealm, v79);
          v91 = WebCore::JSRTCTrackEventPrototype::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v90);
          *(_DWORD *)(v91 + 16) |= 0x80000u;
          v93 = (JSC::JSCell *)WebCore::JSRTCTrackEventPrototype::create(v78, FunctionRealm, v91, v92);
          v94 = WebCore::JSRTCTrackEvent::createStructure((uint64_t *)v78, (uint64_t)FunctionRealm, v93);
          v79 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v94, (uint64_t)&WebCore::JSRTCTrackEvent::s_info);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v77, v79, v80);
        if (!*((_DWORD *)v78 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) == 0)
          JSC::JSObject::setStructure(v29, v78, SubclassStructure);
        goto LABEL_125;
      }
      v13 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_191:
      v105 = (_DWORD)v11 == 0;
LABEL_238:
      v12 = !v105;
LABEL_17:
      if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
        goto LABEL_46;
    }
    v110 = (_DWORD)v16 == 0;
    goto LABEL_225;
  }
  v29 = 0;
LABEL_48:
  if (v6 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DB060[v6])(&v123, &v130);
  return v29;
}

uint64_t WebCore::JSRTCTrackEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCTrackEvent::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSRTCTrackEvent::visitChildren(WebCore::JSRTCTrackEvent *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSRTCTrackEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCTrackEventPrototype::create(WebCore::JSRTCTrackEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSRTCTrackEvent::s_info, &WebCore::JSRTCTrackEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCTrackEvent>,(WebCore::DOMConstructorID)170>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1360);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCTrackEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTrackEvent::s_info + ~((_QWORD)&WebCore::JSRTCTrackEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCTrackEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCTrackEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCTrackEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCTrackEventPrototype::create((WebCore::JSRTCTrackEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCTrackEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCTrackEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1360) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCTrackEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCTrackEventPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCTrackEvent>,(WebCore::DOMConstructorID)170>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCTrackEvent_receiver(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (v2)
    return WebCore::wrap<WebCore::RTCRtpReceiver>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

unint64_t WebCore::jsRTCTrackEvent_track(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
  if (v2)
    return WebCore::wrap<WebCore::MediaStreamTrack>(a1, *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::jsRTCTrackEvent_streams(JSC *a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v5;
  uint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  objc_class *v11;
  int v12;
  BOOL v13;
  JSValue v14;
  void *v15;
  JSC::VM *v16;
  JSC::JSObject *v17;
  JSC::JSGlobalObject *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v22;
  WTF *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  WTF *v27;
  _OWORD v28[4];
  uint64_t v29;
  JSC::VM *v30;

  v2 = *(_QWORD *)(a2 + 32);
  if (v2)
    return v2;
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(JSC::VM **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v30 = v5;
  v25 = 0;
  v26 = 0x800000000;
  v27 = (WTF *)((char *)v28 + 8);
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v8 = *(_DWORD *)(v6 + 100);
  if (v8 >= 9)
  {
    v25 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v26) == 1;
    v8 = *(_DWORD *)(v6 + 100);
    if (v8)
    {
LABEL_4:
      v9 = *(uint64_t **)(v6 + 88);
      v10 = 8 * v8;
      do
      {
        v11 = (objc_class *)WebCore::wrap<WebCore::MediaStream>((int)a1, v7, *v9);
        if (*((_DWORD *)v5 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
            goto LABEL_38;
        }
        v12 = v26;
        if ((_DWORD)v26 != HIDWORD(v26) && (v27 != (WTF *)((char *)v28 + 8) ? (v13 = v27 == 0) : (v13 = 1), v13))
        {
          *((_QWORD *)v27 + v26) = v11;
          LODWORD(v26) = v12 + 1;
        }
        else
        {
          v14.super.isa = v11;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v26, v14) == 1)
            v25 = 1;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  else if (v8)
  {
    goto LABEL_4;
  }
  if (v25)
  {
    JSC::throwOutOfMemoryError();
LABEL_38:
    v2 = 0;
    goto LABEL_25;
  }
  v23 = v27;
  v24 = v26;
  v16 = (JSC::VM *)*((_QWORD *)v7 + 7);
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    v18 = 0;
  else
    v18 = (JSC::JSGlobalObject *)JSC::constructArray();
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    goto LABEL_38;
  v2 = JSC::objectConstructorFreeze(a1, v18, v17);
LABEL_25:
  v19 = *(uint64_t **)&v28[0];
  if (*(_QWORD *)&v28[0])
  {
    v23 = (WTF *)&v26;
    v22 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v28[0], (uint64_t *)&v23);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v19, v22);
  }
  if (v27 != (WTF *)((char *)v28 + 8) && v27)
    WTF::fastFree(v27, v15);
  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
    return 0;
  v20 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(a2 + 32) = v2;
  if ((v2 & 0xFFFE000000000002) == 0 && v2 && *(_DWORD *)(v20 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v20 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCTrackEvent_transceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (v2)
    return WebCore::wrap<WebCore::RTCRtpTransceiver>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSRTCTrackEvent::subspaceForImpl(WebCore::JSRTCTrackEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1384);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1384))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1384);
    *(_QWORD *)(v8 + 1384) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1384);
  *(_QWORD *)(v3 + 1384) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRTCTransformEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  JSCell *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::JSDOMGlobalObject *v19;
  uint64_t v20;
  unsigned int v21;
  JSC::VM *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  int v30;
  unint64_t v31;
  WebCore::JSEvent *v32;
  JSC::JSCell *v33;
  unint64_t v34;
  JSC::Structure *v35;
  JSC::JSCell *v36;
  uint64_t v37;
  JSC::JSCell *v38;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v40;
  JSC::JSGlobalObject *v41;
  JSC::VM *v42;
  JSC::JSObject *v43;
  JSC::Structure *v44;
  JSC::VM *FunctionRealm;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char **v52;
  int v53;
  JSC::JSCell *v54;
  unint64_t Structure;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  unint64_t SubclassStructure;
  _DWORD *v60;
  JSValue v62;
  WTF::StringImpl *v63;
  int v64;
  _DWORD *v65;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((unint64_t)(*(int *)(a2 + 32) - 1) <= 1)
  {
    v62.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, a1, v62);
  }
  v5 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v63);
  v7 = v64;
  if (!v64)
  {
    v8 = *(_QWORD *)(a2 + 56);
    v65 = (_DWORD *)*((_QWORD *)a1 + 7);
    if ((v8 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
    v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
    v11 = (char **)(16 * v9);
    if ((_DWORD)v9)
      v12 = v11 == &WebCore::JSRTCRtpScriptTransformer::s_info;
    else
      v12 = 1;
    if (!v12)
    {
      do
      {
        v11 = (char **)v11[2];
        v10 = v11 != 0;
      }
      while (v11 != &WebCore::JSRTCRtpScriptTransformer::s_info && v11 != 0);
    }
    if (!v10 || (v15 = *(_QWORD *)(v8 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v65, 1, "transformer", 12, "RTCTransformEvent", 18, v6, 0, 0, "RTCRtpScriptTransformer", 24);
      v14 = 0;
LABEL_45:
      v7 = v64;
      goto LABEL_46;
    }
    v16 = v63;
    v63 = 0;
    ++*(_DWORD *)(v15 + 24);
    v17 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
    *(_QWORD *)(v17 + 8) = 0;
    v21 = *(_DWORD *)(v17 + 20) & 0xFFC00000 | (v16 != 0) | 0x168000;
    *(_DWORD *)(v17 + 16) = 1;
    *(_DWORD *)(v17 + 20) = v21;
    if (v16)
    {
      *(_DWORD *)v16 += 2;
      v21 = *(_DWORD *)(v17 + 20);
    }
    *(_QWORD *)(v17 + 24) = v16;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = v20;
    *(_DWORD *)(v17 + 20) = v21 | 0x4000;
    *(_QWORD *)v17 = off_1E33620E0;
    *(_QWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = v15;
    v65 = (_DWORD *)v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v18);
        if (*(void (***)(WebCore::RTCTransformEvent *__hidden))v17 != off_1E33620E0)
        {
          __break(0xC471u);
          JUMPOUT(0x194E75DFCLL);
        }
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    v22 = *(JSC::VM **)(v5 + 40);
    v23 = *((_QWORD *)v22 + 412);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 - 8);
      v25 = ((unint64_t)&WebCore::JSRTCTransformEvent::s_info
           + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTransformEvent::s_info
                                                                       + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = *(char ***)(v23 + 16 * v28);
      if (v29 == &WebCore::JSRTCTransformEvent::s_info)
      {
LABEL_26:
        v31 = *(_QWORD *)(v23 + 16 * v28 + 8);
        if (v31)
        {
LABEL_28:
          v14 = (JSCell *)WebCore::JSRTCTransformEvent::create(v31, v22, (uint64_t *)&v65);
          WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v22 + 415), v17, (uint64_t)v14);
          v38 = *(JSC::JSCell **)(a2 + 40);
          if (((unint64_t)v38 & 0xFFFE000000000002) != 0
            || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v38)) == 0
            || (v41 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
            || (v42 = (JSC::VM *)*((_QWORD *)a1 + 7),
                FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v40),
                *((_DWORD *)v42 + 20))
            && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
          {
LABEL_41:
            if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
              v14 = 0;
            v60 = v65;
            v65 = 0;
            if (v60)
            {
              if (v60[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
              else
                --v60[4];
            }
            goto LABEL_45;
          }
          v46 = *((_QWORD *)FunctionRealm + 412);
          if (v46)
          {
            v47 = *(_DWORD *)(v46 - 8);
            v48 = ((unint64_t)&WebCore::JSRTCTransformEvent::s_info
                 + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTransformEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) >> 22);
            v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
            v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
            v51 = v47 & ((v50 >> 31) ^ v50);
            v52 = *(char ***)(v46 + 16 * v51);
            if (v52 == &WebCore::JSRTCTransformEvent::s_info)
            {
LABEL_37:
              v43 = *(JSC::JSObject **)(v46 + 16 * v51 + 8);
              if (v43)
              {
LABEL_39:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v41, v43, v44);
                if (!*((_DWORD *)v42 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) == 0)
                  JSC::JSObject::setStructure(v14, v42, SubclassStructure);
                goto LABEL_41;
              }
            }
            else
            {
              v53 = 1;
              while (v52)
              {
                v51 = ((_DWORD)v51 + v53) & v47;
                v52 = *(char ***)(v46 + 16 * v51);
                ++v53;
                if (v52 == &WebCore::JSRTCTransformEvent::s_info)
                  goto LABEL_37;
              }
            }
          }
          v54 = (JSC::JSCell *)WebCore::JSEvent::prototype(v42, FunctionRealm, v43);
          Structure = WebCore::JSRTCTransformEventPrototype::createStructure((uint64_t *)v42, (uint64_t)FunctionRealm, v54);
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v57 = (JSC::JSCell *)WebCore::JSRTCTransformEventPrototype::create(v42, FunctionRealm, Structure, v56);
          v58 = WebCore::JSRTCTransformEvent::createStructure((uint64_t *)v42, (uint64_t)FunctionRealm, v57);
          v43 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v58, (uint64_t)&WebCore::JSRTCTransformEvent::s_info);
          goto LABEL_39;
        }
      }
      else
      {
        v30 = 1;
        while (v29)
        {
          v28 = ((_DWORD)v28 + v30) & v24;
          v29 = *(char ***)(v23 + 16 * v28);
          ++v30;
          if (v29 == &WebCore::JSRTCTransformEvent::s_info)
            goto LABEL_26;
        }
      }
    }
    v32 = (WebCore::JSEvent *)*((_QWORD *)v22 + 7);
    v33 = (JSC::JSCell *)WebCore::JSEvent::prototype(v32, v22, v19);
    v34 = WebCore::JSRTCTransformEventPrototype::createStructure((uint64_t *)v32, (uint64_t)v22, v33);
    *(_DWORD *)(v34 + 16) |= 0x80000u;
    v36 = (JSC::JSCell *)WebCore::JSRTCTransformEventPrototype::create(v32, v22, v34, v35);
    v37 = WebCore::JSRTCTransformEvent::createStructure((uint64_t *)v32, (uint64_t)v22, v36);
    v31 = WebCore::cacheDOMStructure((JSCell *)v22, v37, (uint64_t)&WebCore::JSRTCTransformEvent::s_info);
    goto LABEL_28;
  }
  v14 = 0;
LABEL_46:
  if (v7 != -1)
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E32DB060[v7])(&v65, &v63);
  return v14;
}

uint64_t WebCore::JSRTCTransformEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRTCTransformEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRTCTransformEventPrototype::create(WebCore::JSRTCTransformEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRTCTransformEvent::s_info, (uint64_t)&WebCore::JSRTCTransformEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCTransformEvent>,(WebCore::DOMConstructorID)171>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1368);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSRTCTransformEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000002, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRTCTransformEvent::s_info
         + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCTransformEvent::s_info
                                                                     + ~((_QWORD)&WebCore::JSRTCTransformEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRTCTransformEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRTCTransformEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRTCTransformEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSRTCTransformEventPrototype::create((WebCore::JSRTCTransformEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSRTCTransformEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSRTCTransformEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1368) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRTCTransformEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRTCTransformEventPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRTCTransformEvent>,(WebCore::DOMConstructorID)171>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsRTCTransformEvent_transformer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v3 = *(WTF **)(*(_QWORD *)(a2 + 24) + 72);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v3)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)v3 + 6);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v3 != &off_1E3361E18)
  {
    __break(0xC471u);
    JUMPOUT(0x194E76B4CLL);
  }
  v14 = *(_QWORD *)(v2 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info
         + ~((_QWORD)&WebCore::JSRTCRtpScriptTransformer::s_info << 32)) ^ (((unint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info
                                                                           + ~((_QWORD)&WebCore::JSRTCRtpScriptTransformer::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSRTCRtpScriptTransformer::s_info)
    {
LABEL_15:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_17;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSRTCRtpScriptTransformer::s_info)
          goto LABEL_15;
      }
    }
  }
  v23 = *(uint64_t **)(v2 + 56);
  Structure = WebCore::JSRTCRtpScriptTransformerPrototype::createStructure(v23, v2, *(JSC::JSCell **)(v2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSRTCRtpScriptTransformerPrototype::create((WebCore::JSRTCRtpScriptTransformerPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSRTCRtpScriptTransformer::createStructure(v23, v2, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v2, v28, (uint64_t)&WebCore::JSRTCRtpScriptTransformer::s_info);
LABEL_17:
  v29 = *(_QWORD *)(v2 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 1336);
  if (v32)
    goto LABEL_37;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_22:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 1336))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 40, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 1336);
    *(_QWORD *)(v35 + 1336) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 1336);
  *(_QWORD *)(v31 + 1336) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_37:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 48;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v3;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v2 + 3320);
  if ((byte_1EE336728 & 1) == 0)
  {
    qword_1EE336720 = (uint64_t)&off_1E32DAB90;
    byte_1EE336728 = 1;
  }
  v53 = v3;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336720;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSRTCTransformEvent::subspaceForImpl(WebCore::JSRTCTransformEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1392);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1392))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1392);
    *(_QWORD *)(v8 + 1392) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1392);
  *(_QWORD *)(v3 + 1392) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSRadioNodeList::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSNodeList::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSNodeList::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSNodeList::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRadioNodeListPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRadioNodeListPrototype::create(WebCore::JSRadioNodeListPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSRadioNodeList::s_info, (uint64_t)&WebCore::JSRadioNodeListPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRadioNodeList>,(WebCore::DOMConstructorID)594>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t Structure;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  int v26;
  uint64_t v27;
  JSC::JSCell *v28;
  unint64_t v29;
  WebCore::JSDOMGlobalObject *v30;
  JSC::Structure *v31;
  JSC::JSCell *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;

  v2 = *(_QWORD *)(a2 + 3312);
  v3 = *(_QWORD *)(v2 + 4752);
  if (v3)
    return v3;
  v6 = (uint64_t *)(a1 + 40136);
  v7 = *(_QWORD *)(v2 + 3752);
  if (!v7)
  {
    Structure = WebCore::JSDOMConstructorNotConstructable<WebCore::JSNodeList>::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 664));
    v7 = WebCore::JSDOMConstructorNotConstructable<WebCore::JSNodeList>::create(a1, Structure, a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3752) = v7;
    if (v7)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
    }
  }
  LODWORD(v38) = 67099;
  if ((v7 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v7);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v6;
  if (*v6 < (unint64_t)v6[1])
    goto LABEL_8;
  SlowCase = v6[2];
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ v6[3];
    v6[1] = SlowCase + HIDWORD(v36);
    v6[2] = SlowCase + (int)v36;
LABEL_8:
    *v6 = SlowCase + 128;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v38, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRadioNodeList>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v11 = (_QWORD *)v6[165];
  v3 = v11[2846];
  if (v3 < v11[2847])
    goto LABEL_12;
  v3 = v11[2848];
  if ((v3 & 1) == 0)
  {
    v37 = *(_QWORD *)(v3 + 8) ^ v11[2849];
    v11[2847] = v3 + HIDWORD(v37);
    v11[2848] = v3 + (int)v37;
LABEL_12:
    v11[2846] = v3 + 48;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  v3 = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)v3 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v6[227] + 1768);
  v38 = 0;
  v39 = v3;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v12, 0xFFFE000000000000, 6, (uint64_t)&v38);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create(a1, &v38);
  v15 = v38;
  v38 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  *(_QWORD *)(v3 + 32) = v14;
  if (v14 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v3 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v3);
  v16 = *(_QWORD *)(v6[227] + 1968);
  v38 = 0;
  v39 = v3;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v16, v14, 6, (uint64_t)&v38);
  v18 = *(_QWORD *)(v6[227] + 2160);
  v19 = *(_QWORD *)(a2 + 3296);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 8);
    v21 = ((unint64_t)&WebCore::JSRadioNodeList::s_info + ~((_QWORD)&WebCore::JSRadioNodeList::s_info << 32)) ^ (((unint64_t)&WebCore::JSRadioNodeList::s_info + ~((_QWORD)&WebCore::JSRadioNodeList::s_info << 32)) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    v25 = *(char ***)(v19 + 16 * v24);
    if (v25 == &WebCore::JSRadioNodeList::s_info)
    {
LABEL_22:
      v27 = *(_QWORD *)(v19 + 16 * v24 + 8);
      if (v27)
        goto LABEL_24;
    }
    else
    {
      v26 = 1;
      while (v25)
      {
        v24 = ((_DWORD)v24 + v26) & v20;
        v25 = *(char ***)(v19 + 16 * v24);
        ++v26;
        if (v25 == &WebCore::JSRadioNodeList::s_info)
          goto LABEL_22;
      }
    }
  }
  v28 = (JSC::JSCell *)WebCore::JSNodeList::prototype((WebCore::JSNodeList *)a1, (JSC::JSCell **)a2, v17);
  v29 = WebCore::JSRadioNodeListPrototype::createStructure((uint64_t *)a1, a2, v28);
  *(_DWORD *)(v29 + 16) |= 0x80000u;
  v32 = (JSC::JSCell *)WebCore::JSRadioNodeListPrototype::create((WebCore::JSRadioNodeListPrototype *)a1, v29, v30, v31);
  v33 = WebCore::JSRadioNodeList::createStructure((uint64_t *)a1, a2, v32);
  v27 = WebCore::cacheDOMStructure((JSCell *)a2, v33, (uint64_t)&WebCore::JSRadioNodeList::s_info);
LABEL_24:
  v34 = *(_QWORD *)(v27 + 48);
  v38 = 0;
  v39 = v3;
  v40 = -1;
  v41 = 0x1000000;
  v42 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v3, (JSC::VM *)a1, v18, v34, 14, (uint64_t)&v38);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4752) = v3;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v3;
}

unint64_t WebCore::jsRadioNodeListConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRadioNodeListPrototype::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                               + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRadioNodeList>,(WebCore::DOMConstructorID)594>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRadioNodeList_value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WebCore::RadioNodeList::value(*(unsigned int **)(a2 + 24), &v11);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (!v11 || (v5 = *((_DWORD *)v11 + 1)) == 0)
  {
    v6 = *(_QWORD *)(v3 + 41968);
LABEL_7:
    v11 = 0;
    if (!v4)
      return v6;
    goto LABEL_16;
  }
  if (v5 != 1)
    goto LABEL_4;
  v7 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  if ((*((_BYTE *)v11 + 16) & 4) != 0)
  {
    v8 = *v7;
LABEL_14:
    v6 = *(_QWORD *)(v3 + 8 * v8 + 42216);
    goto LABEL_15;
  }
  v9 = *(unsigned __int16 *)v7;
  if (v9 <= 0xFF)
  {
    v8 = v9;
    goto LABEL_14;
  }
LABEL_4:
  v6 = *(_QWORD *)(v3 + 64760);
  if (!v6 || v11 != *(WTF::StringImpl **)(v6 + 8))
  {
    v6 = JSC::jsStringWithCacheSlowCase();
    v4 = v11;
    goto LABEL_7;
  }
LABEL_15:
  v11 = 0;
LABEL_16:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, v4);
  else
    *(_DWORD *)v4 -= 2;
  return v6;
}

BOOL WebCore::setJSRadioNodeList_value(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  unsigned int *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSRadioNodeList::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSRadioNodeList::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(unsigned int **)(a2 + 24);
  v22 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0 && *((_BYTE *)this + 5) == 2)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope(this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v21 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v21;
    if (hasExceptionsAfterHandlingTraps)
    {
      v20 = 1;
      v21 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v17);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = v21;
  }
  v20 = 0;
  v19 = 0;
  v22 = v11;
  WebCore::RadioNodeList::setValue(v9, &v22);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = 0;
  v15 = 1;
LABEL_24:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v14])(&v22, &v19);
  return v15;
}

unint64_t WebCore::wrap<WebCore::RadioNodeList>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSNodeList *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  WebCore::JSHTMLCollection *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_61;
      }
      goto LABEL_5;
    }
LABEL_61:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 16);
  if (*(void (***)(WebCore::RadioNodeList *__hidden))a3 != off_1E33D7FD8)
  {
    __break(0xC471u);
    JUMPOUT(0x194E77D6CLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRadioNodeList::s_info + ~((_QWORD)&WebCore::JSRadioNodeList::s_info << 32)) ^ (((unint64_t)&WebCore::JSRadioNodeList::s_info + ~((_QWORD)&WebCore::JSRadioNodeList::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRadioNodeList::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRadioNodeList::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSNodeList *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSNodeList::prototype(v17, (JSC::JSCell **)a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRadioNodeListPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRadioNodeListPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRadioNodeList::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRadioNodeList::s_info);
LABEL_13:
  v24 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v25 = *((_QWORD *)v24 + 5182);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 4824);
  if (v27)
    goto LABEL_33;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  if (!*(_QWORD *)(v30 + 4824))
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v31, &v61, (char *)v24 + 192, (char *)v24 + 1872, 32, 8, &v60);
    v33 = (uint64_t)v60;
    v60 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v61;
    v61 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v35 = *(_QWORD *)(v30 + 4824);
    *(_QWORD *)(v30 + 4824) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v26 + 4824);
  *(_QWORD *)(v26 + 4824) = v27;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528](v37, v36);
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v28);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_32:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_33:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_34:
    v27[3] = SlowCase + 32;
    goto LABEL_35;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_34;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_35:
  *(_DWORD *)SlowCase = 0;
  v41 = (WebCore::JSHTMLCollection *)WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  WebCore::JSHTMLCollection::finishCreation(v41, v24);
  v42 = *((_QWORD *)a2 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner = (uint64_t)&off_1E33936F0;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_55:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v61 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::NodeList *)::owner;
  v50[2] = v42;
  v60 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
  v46 = (uint64_t)v60;
  if (v60)
    goto LABEL_55;
  return SlowCase;
}

uint64_t WebCore::JSRange::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::Range::visitNodesConcurrently(*(WebCore::Range **)(a1 + 24), a2);
  result = 75;
  __break(0xC471u);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSRange>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Document *v7;
  WebCore::Range *v8;
  JSCell *v9;
  JSC::JSCell *v10;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v12;
  JSC::JSGlobalObject *v13;
  WebCore::JSRange *v14;
  JSC::JSCell **FunctionRealm;
  JSC::JSObject *v16;
  JSC::Structure *v17;
  unint64_t SubclassStructure;
  WebCore::Range *v19;
  WebCore::Range *v21;
  JSC::VM *v22;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v22 = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v22, (uint64_t)"Range", 6);
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E77FB0);
  }
  v7 = (WebCore::Document *)(v6 - 192);
  v8 = (WebCore::Range *)bmalloc::api::isoAllocate();
  v21 = WebCore::Range::Range(v8, v7);
  v9 = (JSCell *)WebCore::toJSNewlyCreated((uint64_t)v21, *(_QWORD *)(v5 + 40), (uint64_t *)&v21);
  v10 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v10 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v10);
    if (Object)
    {
      v13 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v14 = (WebCore::JSRange *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::JSCell **)JSC::getFunctionRealm(a1, Object, v12);
        if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
        {
          v16 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSRange>(v14, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v13, v16, v17);
          if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
            JSC::JSObject::setStructure(v9, v14, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v9 = 0;
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore::Range *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
  return v9;
}

uint64_t WebCore::JSRange::prototype(WebCore::JSRange *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSRange>(this, a2) + 48);
}

WTF::StringImpl *WebCore::JSRangePrototype::finishCreation(WebCore::JSRangePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<36u>(a2, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<36u>(JSC::VM *result, JSC::JSObject *this)
{
  JSC::VM *v3;
  uint64_t i;
  char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 180; i += 5)
  {
    v5 = (&WebCore::JSRangePrototypeTableValues)[i + 1];
    if (v5)
    {
      if (v5 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v3 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v6 = v8;
      result = (JSC::VM *)JSC::reifyStaticProperty(v3, (uint64_t)&WebCore::JSRange::s_info, (unint64_t *)&v8, (uint64_t)&(&WebCore::JSRangePrototypeTableValues)[i], (unsigned __int8 *)this);
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v6, v7);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSRange::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAbstractRange::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRange::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSRange::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

uint64_t WebCore::JSRange::visitChildren(WebCore::Range **this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::Range::visitNodesConcurrently(this[3], a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSRange::JSRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v8;

  v5 = *a4;
  *a4 = 0;
  v8 = (_DWORD *)v5;
  WebCore::JSAbstractRange::JSAbstractRange(a1, a2, a3, (uint64_t *)&v8);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  return a1;
}

uint64_t WebCore::JSRange::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 8);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSRange::createPrototype(WebCore::JSRange *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSAbstractRange::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSRangePrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRange>,(WebCore::DOMConstructorID)477>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3816);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAbstractRange>,(WebCore::DOMConstructorID)413>(a1, a2);
  v7 = v6;
  LODWORD(v21) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v21, &WebCore::JSDOMConstructor<WebCore::JSRange>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v20);
    v10[2848] = v2 + (int)v20;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v21);
  v14 = v21;
  v21 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v21);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSRange>((WebCore::JSRange *)a1, (JSC::JSCell **)a2) + 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v17, 14, (uint64_t)&v21);
  JSC::reifyStaticProperties<8u>((JSC::VM *)a1, (uint64_t)&WebCore::JSRange::s_info, (uint64_t)&WebCore::JSRangeConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 3816) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRangeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRangePrototype::s_info != (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSRange>,(WebCore::DOMConstructorID)477>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRange_commonAncestorContainer(WebCore::DOMWrapperWorld **a1, uint64_t a2, uint64_t a3, WebCore::Document *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  WebCore::Node *v29;
  unint64_t Wrapper;
  WebCore::Node *v31;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v4 + 56);
  if (v5 == v6)
    goto LABEL_17;
  v7 = 0;
  v8 = v5;
  do
  {
    v8 = *(_QWORD *)(v8 + 32);
    ++v7;
  }
  while (v8);
  v9 = 0;
  v10 = v7 - 1;
  v11 = v6;
  do
  {
    v11 = *(_QWORD *)(v11 + 32);
    ++v9;
  }
  while (v11);
  v12 = v9 - 1;
  v13 = v9 - v7;
  v14 = v7 - v9;
  if (v10 >= v12)
    v15 = v5;
  else
    v15 = v6;
  if (v10 < v12)
  {
    v16 = v13;
  }
  else
  {
    v5 = v6;
    v16 = v14;
  }
  for (; v16; --v16)
    v15 = *(_QWORD *)(v15 + 32);
  if (v15 == v5)
  {
LABEL_17:
    v15 = v5;
    if (!v5)
      return 2;
  }
  else
  {
    do
    {
      v15 = *(_QWORD *)(v15 + 32);
      v5 = *(_QWORD *)(v5 + 32);
    }
    while (v15 != v5);
    if (!v15)
      return 2;
  }
  v18 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (*(_BYTE *)(v18 + 3328))
  {
    v19 = *(_BYTE **)(v15 + 8);
    if (!v19)
      goto LABEL_31;
    goto LABEL_20;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v18 + 3320) + 32);
  if (v20)
  {
    v21 = *(_DWORD *)(v20 - 8);
    v22 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = *(_QWORD *)(v20 + 16 * v25);
    if (v26 != v15)
    {
      v27 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v27) & v21;
        v26 = *(_QWORD *)(v20 + 16 * v25);
        ++v27;
        if (v26 == v15)
          goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_30:
    v19 = *(_BYTE **)(v20 + 16 * v25 + 8);
    if (v19)
    {
LABEL_20:
      if ((v19[8] & 3) == 0 && *(_QWORD *)v19)
        return *(_QWORD *)v19;
    }
  }
LABEL_31:
  *(_DWORD *)(v15 + 24) += 2;
  v31 = (WebCore::Node *)v15;
  Wrapper = WebCore::createWrapper(a1, (JSC::VM *)v18, (WebCore::JSDOMGlobalObject *)&v31, a4);
  v29 = v31;
  v31 = 0;
  if (v29)
  {
    if (*((_DWORD *)v29 + 6) == 2)
    {
      if ((*((_WORD *)v29 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v29, v28);
    }
    else
    {
      *((_DWORD *)v29 + 6) -= 2;
    }
  }
  return Wrapper;
}

uint64_t WebCore::JSRangeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, JSC::AbstractSlotVisitor *a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  void *v9;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (!*(_BYTE *)(v5 + 80))
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 696);
  if (!v7)
    return 0;
  if (a5)
  {
    *a5 = "Reachable from Window";
    a5[1] = 22;
  }
  v9 = (void *)JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v7);
  return JSC::AbstractSlotVisitor::containsOpaqueRoot(a4, v9);
}

uint64_t WebCore::createWrapper<WebCore::Range,WebCore::Range>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = WebCore::getDOMStructure<WebCore::JSRange>(*(WebCore::JSRange **)(a1 + 56), (JSC::JSCell **)a1);
  v6 = WebCore::JSRange::create(v5, a1, a2);
  WebCore::cacheWrapper<WebCore::Range,WebCore::JSRange>(*(_QWORD *)(a1 + 3320), v4, v6);
  return v6;
}

uint64_t WebCore::wrap<WebCore::Range>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)(a3 + 8);
  v15 = (_DWORD *)a3;
  v12 = WebCore::toJSNewlyCreated(a1, a2, (uint64_t *)&v15);
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  return v12;
}

unint64_t WebCore::JSRange::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSRange *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSRange *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSRange::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSRange::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSReadableByteStreamControllerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableByteStreamControllerPrototype::create(WebCore::JSReadableByteStreamControllerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSReadableByteStreamController::s_info, &WebCore::JSReadableByteStreamControllerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsReadableByteStreamControllerConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableByteStreamControllerPrototype::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1720);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableByteStreamController>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1720) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSReadableStream>::construct(JSC *a1, uint64_t a2)
{
  int v2;
  JSC::VM *v5;
  uint64_t v6;
  int v7;
  uint64_t (**v8)();
  int v9;
  int v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t (**v12)();
  JSC::HandleSet *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  int v17;
  JSC::HandleSet *v18;
  _QWORD *v19;
  unint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  JSCell *v32;
  JSC::JSCell *v33;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v35;
  JSC::JSGlobalObject *v36;
  JSC::VM *v37;
  JSC::Structure *v38;
  uint64_t FunctionRealm;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  int v47;
  JSC::JSObject *v48;
  unint64_t Structure;
  JSC::Structure *v50;
  JSC::JSCell *v51;
  uint64_t v52;
  unint64_t SubclassStructure;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  WebCore::JSDOMGlobalObject *v59;
  char *v60;
  int v61;
  int v62;
  JSC::VM *v63;
  char **v64;
  char v65[8];
  _QWORD *v66;
  unsigned __int8 v67;
  int v68;
  char v69[8];
  _QWORD *v70;
  unsigned __int8 v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v63 = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = off_1E32DC240;
  if (v7 == 1 || *(_QWORD *)(a2 + 48) == 10)
  {
    LOBYTE(v70) = 0;
    v71 = 0;
    v72 = 0;
  }
  else
  {
    WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, *(_QWORD *)(a2 + 48), (uint64_t)v65);
    v60 = v65;
    WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v60, (uint64_t)v69);
    if ((_DWORD)v66 != -1)
      ((void (*)(char **, char *))off_1E32DCDD8[v66])(&v60, v65);
    v9 = v72;
    if (v72)
    {
      v32 = 0;
      goto LABEL_70;
    }
    v7 = *(_DWORD *)(a2 + 32);
  }
  if ((unint64_t)(v7 - 3) >= 0xFFFFFFFFFFFFFFFELL || *(_QWORD *)(a2 + 56) == 10)
  {
    LOBYTE(v66) = 0;
    v67 = 0;
    v68 = 0;
LABEL_15:
    v11 = *(WebCore::JSDOMGlobalObject **)(v6 + 40);
    v2 = v71;
    if (!v71 || !v70)
      goto LABEL_24;
    v12 = off_1E32DC240;
    v13 = *(JSC::HandleSet **)(((unint64_t)(v70 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    if (!v14)
    {
      v8 = *(uint64_t (***)())(v6 + 40);
      JSC::HandleSet::grow(v13);
      v11 = (WebCore::JSDOMGlobalObject *)v8;
      v14 = (_QWORD *)*((_QWORD *)v13 + 5);
    }
    *((_QWORD *)v13 + 5) = *v14;
    v14[2] = 0;
    v15 = v14 + 2;
    *v14 = 0;
    v14[1] = 0;
    v16 = v70;
    if (v70)
    {
      v16 = (_QWORD *)*v70;
      if (*v70)
      {
        v55 = *(_QWORD **)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v56 = v55[3];
        v55 += 3;
        *(v15 - 2) = v56;
        *(v15 - 1) = (uint64_t)v55;
        *v55 = v15 - 2;
        *(_QWORD *)(v56 + 8) = v15 - 2;
      }
    }
    *v15 = (uint64_t)v16;
    if (!v68)
    {
LABEL_25:
      v17 = v67;
      if (v67 && v66)
      {
        v18 = *(JSC::HandleSet **)(((unint64_t)(v66 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v19 = (_QWORD *)*((_QWORD *)v18 + 5);
        if (!v19)
        {
          v59 = v11;
          JSC::HandleSet::grow(v18);
          v11 = v59;
          v19 = (_QWORD *)*((_QWORD *)v18 + 5);
        }
        *((_QWORD *)v18 + 5) = *v19;
        v19[2] = 0;
        v20 = v19 + 2;
        *v19 = 0;
        v19[1] = 0;
        v21 = v66;
        if (v66)
        {
          v21 = (_QWORD *)*v66;
          if (*v66)
          {
            v57 = *(_QWORD **)(((unint64_t)(v20 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
            v58 = v57[3];
            v57 += 3;
            *(v20 - 2) = v58;
            *(v20 - 1) = (unint64_t)v57;
            *v57 = v20 - 2;
            *(_QWORD *)(v58 + 8) = v20 - 2;
          }
        }
        *v20 = (unint64_t)v21;
        if (v2)
        {
LABEL_33:
          if (v15)
          {
            v22 = *v15;
            if (v17)
            {
LABEL_35:
              if (v20)
              {
                WebCore::ReadableStream::createFromJSValues(v11, v22, *v20, (uint64_t)&v60);
                v23 = v20 - 2;
                v24 = *(_QWORD *)(((unint64_t)(v20 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                v25 = (unint64_t *)*(v20 - 1);
                if (v25)
                {
                  v26 = *v23;
                  *v25 = *v23;
                  *(_QWORD *)(v26 + 8) = v25;
                  *v23 = 0;
                  *(v20 - 1) = 0;
                }
                *v23 = *(_QWORD *)(v24 + 40);
                *(_QWORD *)(v24 + 40) = v23;
                if (!v2)
                {
LABEL_48:
                  if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                  {
                    v32 = 0;
                    v8 = v12;
LABEL_64:
                    if (v62 != -1)
                      ((void (*)(char ***, char **))off_1E32DC230[v62])(&v64, &v60);
                    v10 = v68;
                    goto LABEL_67;
                  }
                  v32 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::ReadableStream>,WebCore::ExceptionOr<WTF::Ref<WebCore::ReadableStream,WTF::RawPtrTraits<WebCore::ReadableStream>,WTF::DefaultRefDerefTraits<WebCore::ReadableStream>>>>(a1, *(_QWORD *)(v6 + 40), &v63, (unsigned __int8 *)&v60);
                  v8 = v12;
                  if (*((_DWORD *)v63 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
                  {
                    v32 = 0;
                    goto LABEL_64;
                  }
                  v33 = *(JSC::JSCell **)(a2 + 40);
                  if (((unint64_t)v33 & 0xFFFE000000000002) != 0
                    || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v33)) == 0
                    || (v36 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
                    || (v37 = (JSC::VM *)*((_QWORD *)a1 + 7),
                        FunctionRealm = JSC::getFunctionRealm(a1, Object, v35),
                        *((_DWORD *)v37 + 20))
                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) != 0)
                  {
LABEL_63:
                    if (*((_DWORD *)v63 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v63) & 1) != 0)
                      v32 = 0;
                    goto LABEL_64;
                  }
                  v40 = *(_QWORD *)(FunctionRealm + 3296);
                  if (v40)
                  {
                    v41 = *(_DWORD *)(v40 - 8);
                    v42 = ((unint64_t)&WebCore::JSReadableStream::s_info
                         + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStream::s_info
                                                                                  + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) >> 22);
                    v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
                    v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
                    v45 = v41 & ((v44 >> 31) ^ v44);
                    v46 = *(char ***)(v40 + 16 * v45);
                    if (v46 == &WebCore::JSReadableStream::s_info)
                    {
LABEL_59:
                      v48 = *(JSC::JSObject **)(v40 + 16 * v45 + 8);
                      if (v48)
                      {
LABEL_61:
                        SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v36, v48, v38);
                        if (!*((_DWORD *)v37 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) == 0)
                          JSC::JSObject::setStructure(v32, v37, SubclassStructure);
                        goto LABEL_63;
                      }
                    }
                    else
                    {
                      v47 = 1;
                      while (v46)
                      {
                        v45 = ((_DWORD)v45 + v47) & v41;
                        v46 = *(char ***)(v40 + 16 * v45);
                        ++v47;
                        if (v46 == &WebCore::JSReadableStream::s_info)
                          goto LABEL_59;
                      }
                    }
                  }
                  Structure = WebCore::JSReadableStreamPrototype::createStructure((uint64_t *)v37, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
                  *(_DWORD *)(Structure + 16) |= 0x80000u;
                  v51 = (JSC::JSCell *)WebCore::JSReadableStreamPrototype::create(v37, (JSC::VM *)FunctionRealm, Structure, v50);
                  v52 = WebCore::JSReadableStream::createStructure((uint64_t *)v37, FunctionRealm, v51);
                  v48 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v52, (uint64_t)&WebCore::JSReadableStream::s_info);
                  goto LABEL_61;
                }
LABEL_44:
                if (v15)
                {
                  v28 = v15 - 2;
                  v29 = *(_QWORD *)(((unint64_t)(v15 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v30 = (uint64_t *)*(v15 - 1);
                  if (v30)
                  {
                    v31 = *v28;
                    *v30 = *v28;
                    *(_QWORD *)(v31 + 8) = v30;
                    *v28 = 0;
                    *(v15 - 1) = 0;
                  }
                  *v28 = *(_QWORD *)(v29 + 40);
                  *(_QWORD *)(v29 + 40) = v28;
                }
                goto LABEL_48;
              }
              v27 = 0;
LABEL_43:
              WebCore::ReadableStream::createFromJSValues(v11, v22, v27, (uint64_t)&v60);
              if (!v2)
                goto LABEL_48;
              goto LABEL_44;
            }
          }
          else
          {
            v22 = 0;
            if (v17)
              goto LABEL_35;
          }
LABEL_42:
          v27 = 10;
          goto LABEL_43;
        }
      }
      else
      {
        v20 = 0;
        if (v2)
          goto LABEL_33;
      }
      v22 = 10;
      if (v17)
        goto LABEL_35;
      goto LABEL_42;
    }
LABEL_23:
    v11 = (WebCore::JSDOMGlobalObject *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
    v12 = v8;
    v15 = 0;
    goto LABEL_25;
  }
  WebCore::Converter<WebCore::IDLObject>::convert<WebCore::DefaultExceptionThrower>((uint64_t)a1, *(_QWORD *)(a2 + 56), (uint64_t)&v60);
  v64 = &v60;
  WebCore::Detail::ConversionResultStorage<std::optional<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>>::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>>(WebCore::Detail::ConversionResultStorage<JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>> &&)::{lambda(void)#1}::operator()((uint64_t)&v64, (uint64_t)v65);
  if (v61 != -1)
    ((void (*)(char ***, char **))off_1E32DCDD8[v61])(&v64, &v60);
  v10 = v68;
  if (!v68)
  {
    if (v72)
      goto LABEL_23;
    goto LABEL_15;
  }
  v32 = 0;
LABEL_67:
  if (v10 != -1)
    ((void (*)(char **, _QWORD **))v8[v10])(&v60, &v66);
  v9 = v72;
LABEL_70:
  if (v9 != -1)
    ((void (*)(char *, _QWORD **))v8[v9])(v65, &v70);
  return v32;
}

uint64_t WebCore::JSReadableStream::prototype(WebCore::JSReadableStream *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSReadableStream::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSReadableStream::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSReadableStreamPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSReadableStreamPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSReadableStream::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSReadableStream::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSReadableStream::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[4] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 16))(v3, a2);
        else
          --v3[4];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSReadableStream::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReadableStream::JSReadableStream(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSReadableStream::createPrototype(WebCore::JSReadableStream *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  JSC::Structure *v6;

  Structure = WebCore::JSReadableStreamPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSReadableStreamPrototype::create(this, (JSC::VM *)a2, Structure, v6);
}

uint64_t WebCore::JSReadableStreamPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableStreamPrototype::create(WebCore::JSReadableStreamPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSReadableStream::s_info, &WebCore::JSReadableStreamPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1728);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructor<WebCore::JSReadableStream>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSReadableStream::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSReadableStream::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSReadableStreamPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSReadableStreamPrototype::create((WebCore::JSReadableStreamPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSReadableStream::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSReadableStream::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1728) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsReadableStreamConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableStreamPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReadableStream>,(WebCore::DOMConstructorID)216>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsReadableStream_locked(uint64_t a1, uint64_t a2)
{
  if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(*(_QWORD *)(a2 + 24) + 8)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::JSReadableStream::subspaceForImpl(WebCore::JSReadableStream *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1752);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1752))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1752);
    *(_QWORD *)(v8 + 1752) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1752);
  *(_QWORD *)(v3 + 1752) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSReadableStreamOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSReadableStreamOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
      else
        --v24[4];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::ReadableStream,WebCore::ReadableStream>(uint64_t a1, JSC::VM *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  WebCore::JSReadableStream *v19;
  _QWORD *v20;
  unint64_t SlowCase;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *Allocator;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStream::s_info + ~((_QWORD)&WebCore::JSReadableStream::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSReadableStream::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSReadableStream::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSReadableStreamPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v17 = (JSC::JSCell *)WebCore::JSReadableStreamPrototype::create((WebCore::JSReadableStreamPrototype *)v14, (JSC::VM *)a1, Structure, v16);
  v18 = WebCore::JSReadableStream::createStructure(v14, a1, v17);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v18, (uint64_t)&WebCore::JSReadableStream::s_info);
LABEL_8:
  v19 = *(WebCore::JSReadableStream **)(a1 + 56);
  v20 = (_QWORD *)WebCore::JSReadableStream::subspaceForImpl(v19, a2);
  SlowCase = v20[3];
  if (SlowCase < v20[4])
  {
LABEL_9:
    v20[3] = SlowCase + 32;
    goto LABEL_10;
  }
  SlowCase = v20[5];
  if ((SlowCase & 1) == 0)
  {
    v28 = *(_QWORD *)(SlowCase + 8) ^ v20[6];
    v20[4] = SlowCase + HIDWORD(v28);
    v20[5] = SlowCase + (int)v28;
    goto LABEL_9;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v22 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v22;
  if (*((_BYTE *)v19 + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336788 & 1) == 0)
  {
    qword_1EE336780 = (uint64_t)&off_1E32DACB0;
    byte_1EE336788 = 1;
  }
  v30 = v4;
  if ((SlowCase & 8) != 0)
    v24 = (SlowCase - 112) | 1;
  else
    v24 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v24 & 1) != 0)
    v25 = v24 + 47;
  else
    v25 = *(_QWORD *)v24 + 32;
  Allocator = *(_QWORD **)(v25 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v25 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336780;
  Allocator[2] = v23;
  v29 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v23 + 32), &v30, (uint64_t *)&v29);
  if (v29)
    v29[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::ReadableStream>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  _DWORD *v16;
  WTF *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v17 = a3;
  v12 = WebCore::createWrapper<WebCore::ReadableStream,WebCore::ReadableStream>(a2, (JSC::VM *)&v17);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v16)
      {
        if (v16[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[4];
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return v12;
}

unint64_t WebCore::JSReadableStream::toWrapped(uint64_t a1, unint64_t a2)
{
  unint64_t result;

  result = JSC::jsDynamicCast<WebCore::JSReadableStream *>(a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

unint64_t JSC::jsDynamicCast<WebCore::JSReadableStream *>(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  char **v3;
  BOOL v4;

  if ((result & 0xFFFE000000000002) != 0)
    return 0;
  v1 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
  v2 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
  v3 = (char **)(16 * v1);
  if ((_DWORD)v1)
    v4 = v3 == &WebCore::JSReadableStream::s_info;
  else
    v4 = 1;
  if (!v4)
  {
    do
    {
      v3 = (char **)v3[2];
      v2 = v3 != 0;
    }
    while (v3 != &WebCore::JSReadableStream::s_info && v3 != 0);
  }
  if (!v2)
    return 0;
  return result;
}

uint64_t WebCore::JSReadableStreamBYOBReaderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableStreamBYOBReaderPrototype::create(WebCore::JSReadableStreamBYOBReaderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSReadableStreamBYOBReader::s_info, &WebCore::JSReadableStreamBYOBReaderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsReadableStreamBYOBReaderConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableStreamBYOBReaderPrototype::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1736);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBReader>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1736) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSReadableStreamBYOBRequestPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableStreamBYOBRequestPrototype::create(WebCore::JSReadableStreamBYOBRequestPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSReadableStreamBYOBRequest::s_info, &WebCore::JSReadableStreamBYOBRequestPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsReadableStreamBYOBRequestConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableStreamBYOBRequestPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1744);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamBYOBRequest>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1744) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSReadableStreamDefaultControllerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableStreamDefaultControllerPrototype::create(WebCore::JSReadableStreamDefaultControllerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSReadableStreamDefaultController::s_info, &WebCore::JSReadableStreamDefaultControllerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsReadableStreamDefaultControllerConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableStreamDefaultControllerPrototype::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1752);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultController>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1752) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSReadableStreamDefaultReaderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReadableStreamDefaultReaderPrototype::create(WebCore::JSReadableStreamDefaultReaderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSReadableStreamDefaultReader::s_info, &WebCore::JSReadableStreamDefaultReaderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::jsReadableStreamDefaultReaderConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReadableStreamDefaultReaderPrototype::s_info != (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1760);
  if (!result)
  {
    Structure = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMBuiltinConstructor<WebCore::JSReadableStreamDefaultReader>::create(v2, Structure, v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 1760) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

_DWORD *WebCore::JSReadableStreamSink::destroy(WebCore::JSReadableStreamSink *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSReadableStreamSink::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReadableStreamSinkOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSReadableStreamSinkOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::ReadableStreamSink>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSReadableStreamSink::s_info
         + ~((_QWORD)&WebCore::JSReadableStreamSink::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamSink::s_info
                                                                      + ~((_QWORD)&WebCore::JSReadableStreamSink::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSReadableStreamSink::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_37;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSReadableStreamSink::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_19;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_19:
    *v25 = SlowCase + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSReadableStreamSinkPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_23;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_23:
    *v28 = v30 + 16;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_24:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>((JSC::VM *)v24, (uint64_t)&WebCore::JSReadableStreamSink::s_info, &WebCore::JSReadableStreamSinkPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_34;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_34:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSReadableStreamSink::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSReadableStreamSink::s_info);
LABEL_37:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 1792);
  if (v43)
    goto LABEL_57;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_42;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_42:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 1792))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 1792);
    *(_QWORD *)(v46 + 1792) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 1792);
  *(_QWORD *)(v42 + 1792) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_56;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_56:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_57:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_59;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_59:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336798 & 1) == 0)
  {
    qword_1EE336790 = (uint64_t)&off_1E32DACE0;
    byte_1EE336798 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336790;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

unint64_t WebCore::jsReadableStreamSourcePrototypeFunction_start(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  JSCell *v22;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E7C498);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v16 = *((_QWORD *)a2 + 5);
  if ((v16 & 0xFFFE000000000002) != 0)
  {
    v22 = 0;
  }
  else
  {
    v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
    v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
    v19 = (char **)(16 * v17);
    if ((_DWORD)v17)
      v20 = v19 == &WebCore::JSReadableStreamSource::s_info;
    else
      v20 = 1;
    if (!v20)
    {
      do
      {
        v19 = (char **)v19[2];
        v18 = v19 != 0;
      }
      while (v19 != &WebCore::JSReadableStreamSource::s_info && v19 != 0);
    }
    if (v18)
      v22 = (JSCell *)*((_QWORD *)a2 + 5);
    else
      v22 = 0;
  }
  WebCore::JSReadableStreamSource::start(v22, (uint64_t)this, (uint64_t)a2, &v27);
  if (v27)
  {
    if (*((_DWORD *)v27 + 4) == 1)
      (*(void (**)(void))(*(_QWORD *)v27 + 16))();
    else
      --*((_DWORD *)v27 + 4);
  }
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsReadableStreamSourcePrototypeFunction_pull(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  WTF *v25;
  _DWORD *v26;
  uint64_t v27;
  objc_class *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E7C6ECLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v16 = *((_QWORD *)a2 + 5);
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSReadableStreamSource::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSReadableStreamSource::s_info && v19 != 0);
  }
  if (!v18)
    v16 = 0;
  v22 = *(_QWORD **)(v16 + 24);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v23 = v14;
  v25 = (WTF *)v22[1];
  v22[1] = v23;
  if (v25)
  {
    v26 = *(_DWORD **)v25;
    *(_QWORD *)v25 = 0;
    if (v26)
    {
      if (v26[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
      else
        --v26[4];
    }
    WTF::fastFree(v25, v24);
  }
  (*(void (**)(_QWORD *))(*v22 + 32))(v22);
  (*(void (**)(_QWORD *))(*v22 + 56))(v22);
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v29, 0);
      v30 = v31;
      v31 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsReadableStreamSourcePrototypeFunction_cancel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  _QWORD *v10;
  WTF *v11;
  _DWORD *v12;
  JSC::VM *v14;
  JSValue v15;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSReadableStreamSource::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSReadableStreamSource::s_info && v7 != 0);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = (JSC::VM *)*((_QWORD *)this + 7);
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v14, this, v15);
  }
  else
  {
    if (!v6)
      v4 = 0;
    v10 = *(_QWORD **)(v4 + 24);
    v11 = (WTF *)v10[1];
    if (v11)
    {
      v10[1] = 0;
      v12 = *(_DWORD **)v11;
      *(_QWORD *)v11 = 0;
      if (v12)
      {
        if (v12[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
        else
          --v12[4];
      }
      WTF::fastFree(v11, a2);
      (*(void (**)(_QWORD *))(*v10 + 40))(v10);
    }
    (*(void (**)(_QWORD *))(*v10 + 64))(v10);
    return 10;
  }
}

uint64_t WebCore::JSReadableStreamSource::destroy(WebCore::JSReadableStreamSource *this, JSCell *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t WebCore::JSReadableStreamSource::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReadableStreamSource::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = JSC::JSObject::visitChildren();
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xFFFE000000000002) == 0 && v5 != 0)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v7 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v8;
        v7 = v9;
      }
      if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (*(_QWORD *)(a2 + 168))
      return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::JSReadableStreamSource::visitChildren(WebCore::JSReadableStreamSource *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::JSObject::visitChildren();
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::jsReadableStreamSource_controller()
{
  return 10;
}

uint64_t WebCore::JSReadableStreamSourceOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSReadableStreamSourceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v7 = *(_QWORD *)(a3 + 32);
  v6 = (uint64_t *)(a3 + 32);
  v5 = v7;
  if (v7)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(v5 + 16 * v12);
    if (v13 != v4)
    {
      v14 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v14) & v8;
        v13 = *(_QWORD *)(v5 + 16 * v12);
        ++v14;
        if (v13 == v4)
          goto LABEL_6;
      }
      v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      v15 = (_QWORD *)(v5 + 16 * v12);
      *v15 = -1;
      v18 = v15[1];
      v17 = v15 + 1;
      v16 = v18;
      if (v18)
      {
        *(_QWORD *)(v16 + 8) = 3;
        *v17 = 0;
      }
      ++*(_DWORD *)(*v6 - 16);
      v19 = *v6;
      if (*v6)
        v20 = *(_DWORD *)(v19 - 12) - 1;
      else
        v20 = -1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v6;
      if (*v6)
      {
        v22 = 6 * *(_DWORD *)(v21 - 12);
        v23 = *(_DWORD *)(v21 - 4);
        if (v22 < v23 && v23 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

unint64_t WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  JSC::JSCell *v16;
  JSC::JSObject *Object;
  uint64_t *v18;
  unint64_t SlowCase;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  void *v57;
  int v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  WTF::StringImpl *Allocator;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  WTF::StringImpl **v75;
  int *v76;
  int v77;
  int v78;
  int v79;
  WTF::StringImpl *v80;

  v2 = a2;
  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSReadableStreamSource::s_info
        + ~((_QWORD)&WebCore::JSReadableStreamSource::s_info << 32)) ^ (((unint64_t)&WebCore::JSReadableStreamSource::s_info
                                                                       + ~((_QWORD)&WebCore::JSReadableStreamSource::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSReadableStreamSource::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_40;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSReadableStreamSource::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = (unint64_t *)(v14 + 40136);
  v16 = *(JSC::JSCell **)(a1 + 656);
  LODWORD(v71) = 23;
  if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v14);
  }
  v18 = (uint64_t *)(v14 + 38904);
  SlowCase = *v15;
  if (*v15 < *(_QWORD *)(v14 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v14 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v67 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 40160);
    *(_QWORD *)(v14 + 40144) = SlowCase + HIDWORD(v67);
    *(_QWORD *)(v14 + 40152) = SlowCase + (int)v67;
LABEL_11:
    *v15 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v14, a1, v16, &v71, &WebCore::JSReadableStreamSourcePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v20 = *v18;
  if (*(_QWORD *)(v14 + 38904) < *(_QWORD *)(v14 + 38912))
    goto LABEL_15;
  v20 = *(_QWORD *)(v14 + 38920);
  if ((v20 & 1) == 0)
  {
    v68 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v14 + 38928);
    *(_QWORD *)(v14 + 38912) = v20 + HIDWORD(v68);
    *(_QWORD *)(v14 + 38920) = v20 + (int)v68;
LABEL_15:
    *v18 = v20 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v20 = JSC::LocalAllocator::allocateSlowCase();
LABEL_16:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v20 = SlowCase >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_QWORD *)(v20 + 8) = 0;
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v20, (JSC::VM *)v14);
  v22 = *(_QWORD *)(*(_QWORD *)(v14 + 41456) + 21600);
  v80 = 0;
  v23 = JSC::JSFunction::create();
  v71 = 0;
  v72 = v20;
  v73 = 0x1000000FFFFFFFFLL;
  v74 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v14, v22, v23, 6, (uint64_t)&v71);
  v25 = v80;
  v80 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v14 + 41456) + 21024);
  v80 = 0;
  v27 = JSC::JSFunction::create();
  v71 = 0;
  v72 = v20;
  v73 = 0x1000000FFFFFFFFLL;
  v74 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v14, v26, v27, 6, (uint64_t)&v71);
  v29 = v80;
  v80 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v28);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v14 + 41456) + 19296);
  v80 = 0;
  v31 = JSC::JSFunction::create();
  v71 = 0;
  v72 = v20;
  v73 = 0x1000000FFFFFFFFLL;
  v74 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v14, v30, v31, 6, (uint64_t)&v71);
  v33 = v80;
  v80 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v32);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v14, &v71);
  v37 = v71;
  v71 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (WTF::StringImpl *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE));
  v79 = *(_DWORD *)v20;
  v80 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v77 = 0;
  v78 = v39;
  v71 = (WTF::StringImpl *)&v78;
  v72 = v20;
  v73 = v14;
  v74 = &v79;
  v75 = &v80;
  v76 = &v77;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v14, v34, 6, (uint64_t)&v71);
  if ((*(_BYTE *)((16 * *(unsigned int *)v20) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v20, v14, v77, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v71) = 23;
  if ((v20 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v20);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v14);
  }
  v41 = *v15;
  if (*v15 >= *(_QWORD *)(v14 + 40144))
  {
    v41 = *(_QWORD *)(v14 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_37;
    }
    v69 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v14 + 40160);
    *(_QWORD *)(v14 + 40144) = v41 + HIDWORD(v69);
    *(_QWORD *)(v14 + 40152) = v41 + (int)v69;
  }
  *v15 = v41 + 128;
LABEL_37:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v14, a1, v20, &v71, &WebCore::JSReadableStreamSource::s_info, 0, 0, 0);
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v41, (uint64_t)&WebCore::JSReadableStreamSource::s_info);
LABEL_40:
  v42 = *(_QWORD *)(a1 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 1800);
  if (v45)
    goto LABEL_60;
  v70 = v2;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    v48 = v4;
    __clrex();
  }
  else
  {
    v48 = v4;
    if (!__stxr(1u, (unsigned __int8 *)v46))
      goto LABEL_45;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_45:
  v49 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v49 + 1800))
  {
    v50 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v71, "IsoSpace T");
    v80 = 0;
    MEMORY[0x19AEA3204](v50, &v71, v42 + 192, v42 + 1872, 40, 8, &v80);
    v52 = v80;
    v80 = 0;
    if (v52)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
    v53 = v71;
    v71 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 1)
        WTF::fastFree(v53, v51);
      else
        --*(_DWORD *)v53;
    }
    v54 = *(_QWORD *)(v49 + 1800);
    *(_QWORD *)(v49 + 1800) = v50;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v55 = *(_QWORD *)(v44 + 1800);
  *(_QWORD *)(v44 + 1800) = v45;
  if (v55)
  {
    v56 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v56, v57);
  }
  v58 = __ldxr((unsigned __int8 *)v46);
  v4 = v48;
  if (v58 != 1)
  {
    __clrex();
    v2 = v70;
    goto LABEL_59;
  }
  v2 = v70;
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_59:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_60:
  v59 = v45[3];
  if (v59 < v45[4])
  {
LABEL_61:
    v45[3] = v59 + 48;
    goto LABEL_62;
  }
  v59 = v45[5];
  if ((v59 & 1) == 0)
  {
    v66 = *(_QWORD *)(v59 + 8) ^ v45[6];
    v45[4] = v59 + HIDWORD(v66);
    v45[5] = v59 + (int)v66;
    goto LABEL_61;
  }
  JSC::sanitizeStackForVM();
  v59 = JSC::LocalAllocator::allocateSlowCase();
LABEL_62:
  *(_DWORD *)v59 = 0;
  WebCore::JSDOMObject::JSDOMObject(v59, v13);
  v60 = *v2;
  *v2 = 0;
  *(_QWORD *)(v59 + 24) = v60;
  *(_QWORD *)(v59 + 32) = 0;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v61 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3367A8 & 1) == 0)
  {
    qword_1EE3367A0 = (uint64_t)&off_1E32DAD10;
    byte_1EE3367A8 = 1;
  }
  v71 = v4;
  if ((v59 & 8) != 0)
    v62 = (v59 - 112) | 1;
  else
    v62 = v59 & 0xFFFFFFFFFFFFC000;
  if ((v62 & 1) != 0)
    v63 = v62 + 47;
  else
    v63 = *(_QWORD *)v62 + 32;
  Allocator = *(WTF::StringImpl **)(v63 + 16);
  if (!Allocator)
    Allocator = (WTF::StringImpl *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v63 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v59;
  *((_QWORD *)Allocator + 1) = &qword_1EE3367A0;
  *((_QWORD *)Allocator + 2) = v61;
  v80 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v61 + 32), (uint64_t *)&v71, (uint64_t *)&v80);
  if (v80)
    *((_QWORD *)v80 + 1) = 3;
  return v59;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::RedEyeReduction>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  {
    WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_0::operator() const(void)::impl;
    unk_1EE2F4BD0 = &WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4BD8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::$_2::operator() const(void)::impl;
  }
  v3 = WebCore::convertEnumerationToString(WebCore::RedEyeReduction)::values[a2];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

uint64_t WebCore::JSRemotePlayback::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSRemotePlayback::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  JSC::JSObject::visitChildren();
  result = WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 22) & 8) == 0)
      {
        while (1)
        {
          v7 = v6;
          if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
          {
            v9 = *(_QWORD *)(v6 + 200);
            if (!v9)
              goto LABEL_12;
            v8 = (uint64_t *)(v9 + 8);
          }
          else
          {
            v8 = (uint64_t *)(v6 + 32);
          }
          v6 = *v8;
          if (!v6)
            goto LABEL_12;
        }
      }
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8);
LABEL_12:
      if (v7 && !*(_BYTE *)(a2 + 130))
      {
        result = *(_QWORD *)(a2 + 120);
        v10 = *(_QWORD *)(result + 48);
        v11 = *(_DWORD *)(v10 + 4);
        v12 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
        v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        v15 = v11 & ((v14 >> 31) ^ v14);
        v16 = v15;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v16 + 16);
          if (!v17)
            break;
          if (v7 == v17)
            return result;
          v16 = (v16 + 1) & v11;
          if (v16 == v15)
          {
            __break(0xC471u);
            JUMPOUT(0x194E7D950);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
          ++*(_QWORD *)(a2 + 72);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::JSRemotePlayback::visitChildren(WebCore::JSRemotePlayback *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  char v22;

  v20[0] = a2;
  v20[1] = this;
  v22 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v21 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194E7DA1CLL);
  }
  *((_QWORD *)a2 + 11) = v20;
  result = WebCore::JSEventTarget::visitChildren(this, a2, a3);
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 22) & 8) == 0)
      {
        while (1)
        {
          v9 = v8;
          if ((*(_WORD *)(v8 + 28) & 0x80) != 0)
          {
            v11 = *(_QWORD *)(v8 + 200);
            if (!v11)
              goto LABEL_15;
            v10 = (uint64_t *)(v11 + 8);
          }
          else
          {
            v10 = (uint64_t *)(v8 + 32);
          }
          v8 = *v10;
          if (!v8)
            goto LABEL_15;
        }
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
LABEL_15:
      if (v9 && !*((_BYTE *)a2 + 130))
      {
        result = *((_QWORD *)a2 + 15);
        v12 = *(_QWORD *)(result + 48);
        v13 = *(_DWORD *)(v12 + 4);
        v14 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = v17;
        while (1)
        {
          v19 = *(_QWORD *)(v12 + 8 * v18 + 16);
          if (!v19)
            break;
          if (v9 == v19)
            goto LABEL_4;
          v18 = (v18 + 1) & v13;
          if (v18 == v17)
          {
            __break(0xC471u);
            JUMPOUT(0x194E7DAF8);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v9);
          ++*((_QWORD *)a2 + 9);
        }
      }
    }
  }
LABEL_4:
  *(_QWORD *)(v20[0] + 88) = v21;
  return result;
}

uint64_t WebCore::JSRemotePlaybackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSRemotePlaybackPrototype::create(WebCore::JSRemotePlaybackPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSRemotePlayback::s_info, (uint64_t)&WebCore::JSRemotePlaybackPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRemotePlayback>,(WebCore::DOMConstructorID)193>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1544);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSRemotePlayback>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSRemotePlayback::s_info + ~((_QWORD)&WebCore::JSRemotePlayback::s_info << 32)) ^ (((unint64_t)&WebCore::JSRemotePlayback::s_info + ~((_QWORD)&WebCore::JSRemotePlayback::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSRemotePlayback::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSRemotePlayback::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSRemotePlaybackPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSRemotePlaybackPrototype::create((WebCore::JSRemotePlaybackPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSRemotePlayback::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSRemotePlayback::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1544) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsRemotePlaybackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSRemotePlaybackPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSRemotePlayback>,(WebCore::DOMConstructorID)193>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsRemotePlayback_state(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(int *)(*((_QWORD *)a2 + 3) + 112);
  if ((byte_1EE3366EF & 1) == 0)
  {
    dword_1ECE79D00 += 2;
    byte_1EE3366EF = 1;
    dword_1ECE79D20 += 2;
    qword_1EE336858 = (uint64_t)&dword_1ECE79D00;
    unk_1EE336860 = &dword_1ECE79D20;
    dword_1ECE79D40 += 2;
    qword_1EE336868 = (uint64_t)&dword_1ECE79D40;
  }
  v5 = *(_QWORD *)&_MergedGlobals_514[8 * v4 + 368];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsRemotePlayback_onconnecting(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 472), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore *)((char *)v5 - 32), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSRemotePlayback_onconnecting(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRemotePlayback::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRemotePlayback::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 472), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RemotePlayback::~RemotePlayback((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRemotePlayback_onconnect(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 464), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore *)((char *)v5 - 32), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSRemotePlayback_onconnect(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRemotePlayback::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRemotePlayback::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 464), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RemotePlayback::~RemotePlayback((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsRemotePlayback_ondisconnect(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 632), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::RemotePlayback::~RemotePlayback((WebCore *)((char *)v5 - 32), v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSRemotePlayback_ondisconnect(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSRemotePlayback::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSRemotePlayback::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 632), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::RemotePlayback::~RemotePlayback((WebCore::EventTarget *)((char *)v11 - 32), v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSRemotePlaybackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF::ConcurrentPtrHashSet *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  void *v25;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(v8 - 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (*(_QWORD *)(v8 - 16)
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 32) + 64))(v8 - 32) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD *)(v7 + 24);
      }
    }
  }
  v11 = *(_QWORD *)(v8 + 40);
  if (!v11)
  {
    if (!a5)
      goto LABEL_11;
LABEL_21:
    *a5 = "Reachable from RemotePlayback ownerNode";
    a5[1] = 40;
    if (!v11)
      goto LABEL_12;
    goto LABEL_22;
  }
  v11 = *(_QWORD *)(v11 + 8);
  if (a5)
    goto LABEL_21;
LABEL_11:
  if (!v11)
  {
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
LABEL_22:
  if ((*(_BYTE *)(v11 + 22) & 8) == 0)
  {
    while (1)
    {
      v12 = (void *)v11;
      if ((*(_WORD *)(v11 + 28) & 0x80) != 0)
      {
        v24 = *(_QWORD *)(v11 + 200);
        if (!v24)
          goto LABEL_13;
        v23 = (uint64_t *)(v24 + 8);
      }
      else
      {
        v23 = (uint64_t *)(v11 + 32);
      }
      v11 = *v23;
      if (!v11)
        goto LABEL_13;
    }
  }
  v12 = *(void **)(*(_QWORD *)(v11 + 40) + 8);
LABEL_13:
  v13 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v14 = (_DWORD *)*((_QWORD *)v13 + 6);
  if ((_DWORD *)((char *)v13 + 56) == v14)
  {
    v25 = v12;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v13, v12);
    v12 = v25;
    if (!(_DWORD)result)
      return result;
LABEL_30:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v12);
    return 1;
  }
  v15 = v14[1];
  v16 = ((unint64_t)v12 + ~((_QWORD)v12 << 32)) ^ (((unint64_t)v12 + ~((_QWORD)v12 << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = v19;
  while (1)
  {
    v21 = *(void **)&v14[2 * v20 + 4];
    if (!v21)
      return 0;
    if (v21 == v12)
      goto LABEL_30;
    v20 = (v20 + 1) & v15;
    if (v20 == v19)
    {
      __break(0xC471u);
      JUMPOUT(0x194E7EB5CLL);
    }
  }
}

void WebCore::JSRemotePlaybackOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::RemotePlayback *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::RemotePlayback *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::RemotePlayback *)(v3 - 32);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::RemotePlayback **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::RemotePlayback **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::RemotePlayback::~RemotePlayback(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

unint64_t WebCore::wrap<WebCore::RemotePlayback>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3366168)
  {
    __break(0xC471u);
    JUMPOUT(0x194E7F26CLL);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSRemotePlayback::s_info + ~((_QWORD)&WebCore::JSRemotePlayback::s_info << 32)) ^ (((unint64_t)&WebCore::JSRemotePlayback::s_info + ~((_QWORD)&WebCore::JSRemotePlayback::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSRemotePlayback::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSRemotePlayback::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSRemotePlaybackPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSRemotePlaybackPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSRemotePlayback::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSRemotePlayback::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1568);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1568);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1568);
    *(_QWORD *)(v30 + 1568) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1568);
  *(_QWORD *)(v26 + 1568) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3367B8 & 1) == 0)
  {
    qword_1EE3367B0 = (uint64_t)&off_1E32DAD40;
    byte_1EE3367B8 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3367B0;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE3367B0;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

void WebCore::JSRemotePlaybackAvailabilityCallback::~JSRemotePlaybackAvailabilityCallback(WebCore::JSRemotePlaybackAvailabilityCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::JSRemotePlaybackAvailabilityCallback::handleEvent@<X0>(unsigned int *this@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Structure *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  BOOL v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  double v31;
  _BYTE v32[8];
  uint64_t v33;
  WTF *v34;
  _OWORD v35[4];
  uint64_t v36;
  _BYTE v37[8];
  uint64_t *v38;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
    goto LABEL_24;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_24;
  v6 = (int)a2;
  v7 = (uint64_t)this;
  v8 = *(unsigned __int8 *)(v5 + 178);
  if (*(_BYTE *)(v5 + 178))
  {
    if (v8 == 1 || v8 == 2)
      ++*(_DWORD *)(v5 + 216);
  }
  else
  {
    *(_DWORD *)(v5 - 264) += 2;
  }
  if (*(_BYTE *)(v5 + 179))
  {
    v9 = 0;
    if (!v8)
    {
LABEL_7:
      if (*(_DWORD *)(v5 - 264) == 2)
      {
        if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), a2);
      }
      else
      {
        *(_DWORD *)(v5 - 264) -= 2;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v9 = *(_BYTE *)(v5 + 180) == 0;
    if (!v8)
      goto LABEL_7;
  }
  if (v8 == 1)
  {
    if (*(_DWORD *)(v5 + 216) == 1)
      this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 40))(v5 - 96);
    else
      --*(_DWORD *)(v5 + 216);
  }
  else if (v8 == 2)
  {
    this = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
  }
LABEL_9:
  if (!v9)
  {
LABEL_24:
    *(_QWORD *)a3 = 0x100000002;
    return this;
  }
  ++*(_DWORD *)(v7 + 16);
  v10 = **(uint64_t ***)(v7 + 24);
  if (!v10 || (v10[1] & 3) != 0)
    v11 = 0;
  else
    v11 = *v10;
  MEMORY[0x19AEA3294](v37, *(_QWORD *)(v11 + 56));
  v32[0] = 0;
  v34 = (WTF *)((char *)v35 + 8);
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v13 = 6;
  if (v6)
    v13 = 7;
  *((_QWORD *)&v35[0] + 1) = v13;
  v33 = 0x800000001;
  v38 = 0;
  v14 = *(uint64_t **)(v7 + 24);
  v15 = *v14;
  if (*v14 && (*(_BYTE *)(v15 + 8) & 3) == 0 && *(_QWORD *)v15)
  {
    v16 = v14[2];
    if (!v16 || (*(_BYTE *)(v16 + 8) & 3) != 0)
      v17 = 0;
    else
      v17 = *(JSC::Structure **)v16;
    v18 = WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v15, v17, 10, (uint64_t)v32, 0, 0, (uint64_t *)&v38);
    v12 = v38;
    if (v38)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(v7 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v38, 0, 0, 0);
      goto LABEL_23;
    }
    v20 = v18;
    v21 = *(JSC::VM **)(v11 + 56);
    if (v20 >= 0xFFFE000000000000)
    {
      v26 = (_DWORD)v20 == 0;
      goto LABEL_35;
    }
    *(_QWORD *)&v31 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v31 <= 0.0)
      {
        v27 = v31 < 0.0;
        goto LABEL_38;
      }
      goto LABEL_46;
    }
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      v27 = v20 == 7;
      goto LABEL_38;
    }
  }
  else
  {
    v20 = 0;
    v21 = *(JSC::VM **)(v11 + 56);
  }
  v22 = *(unsigned __int8 *)(v20 + 5);
  if (v22 == 3)
  {
    v25 = *(_DWORD *)(v20 + 8);
LABEL_34:
    v26 = v25 == 0;
    goto LABEL_35;
  }
  if (v22 == 2)
  {
    v23 = *(_QWORD *)(v20 + 8);
    v24 = (int *)(v20 + 16);
    if ((v23 & 1) == 0)
      v24 = (int *)(v23 + 4);
    v25 = *v24;
    goto LABEL_34;
  }
  v29 = 16 * (*(_DWORD *)v20 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v29 + 10) & 1) == 0)
  {
LABEL_46:
    v27 = 1;
    goto LABEL_38;
  }
  v26 = *(_QWORD *)(v29 + 40) == v11;
LABEL_35:
  v27 = !v26;
LABEL_38:
  if (!*((_DWORD *)v21 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v21))
  {
    v19 = 0;
    *(_BYTE *)a3 = v27;
    goto LABEL_40;
  }
LABEL_23:
  v19 = 1;
  *(_DWORD *)a3 = 1;
LABEL_40:
  *(_DWORD *)(a3 + 4) = v19;
  v28 = *(uint64_t **)&v35[0];
  if (*(_QWORD *)&v35[0])
  {
    v38 = &v33;
    v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v35[0], (uint64_t *)&v38);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v28, v30);
  }
  if (v34 != (WTF *)((char *)v35 + 8) && v34)
    WTF::fastFree(v34, v12);
  this = (unsigned int *)MEMORY[0x19AEA32A0](v37);
  if (*(_DWORD *)(v7 + 16) == 1)
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  --*(_DWORD *)(v7 + 16);
  return this;
}

uint64_t WebCore::JSReport::destroy(uint64_t this, JSC::JSCell *a2)
{
  bmalloc::api *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = *(bmalloc::api **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      v4 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      return bmalloc::api::isoDeallocate(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSReport::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReportPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReportPrototype::create(WebCore::JSReportPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSReport::s_info, &WebCore::JSReportPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSReport>,(WebCore::DOMConstructorID)195>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1560);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSReport>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSReport::s_info + ~((_QWORD)&WebCore::JSReport::s_info << 32)) ^ (((unint64_t)&WebCore::JSReport::s_info + ~((_QWORD)&WebCore::JSReport::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSReport::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSReport::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSReportPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSReportPrototype::create((WebCore::JSReportPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSReport::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSReport::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1560) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsReportConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReportPrototype::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSReport>,(WebCore::DOMConstructorID)195>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsReport_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsReport_url(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

unint64_t WebCore::jsReport_body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (v2)
    return WebCore::wrap<WebCore::ReportBody>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::JSReportOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSReportOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  bmalloc::api *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(bmalloc::api **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(bmalloc::api **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    v25 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, a2);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, a2);
      else
        *(_DWORD *)v26 -= 2;
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

uint64_t WebCore::JSReportBody::prototype(WebCore::JSReportBody *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSReportBody::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSReportBody::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSReportBodyPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSReportBodyPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSReportBody::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSReportBody::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

_DWORD *WebCore::JSReportBody::destroy(WebCore::JSReportBody *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSReportBody::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReportBodyPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReportBodyPrototype::create(WebCore::JSReportBodyPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSReportBody::s_info, (uint64_t)&WebCore::JSReportBodyPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSReportBody>,(WebCore::DOMConstructorID)196>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1568);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v33) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v31);
    v5[2] = SlowCase + (int)v31;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v33, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSReportBody>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v32 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v32);
    v9[2848] = v2 + (int)v32;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v33);
  v13 = v33;
  v33 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v33);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportBody::s_info + ~((_QWORD)&WebCore::JSReportBody::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSReportBody::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSReportBody::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSReportBodyPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSReportBodyPrototype::create((WebCore::JSReportBodyPrototype *)a1, (JSC::VM *)a2, Structure, v26);
  v28 = WebCore::JSReportBody::createStructure((uint64_t *)a1, a2, v27);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v28, (uint64_t)&WebCore::JSReportBody::s_info);
LABEL_22:
  v29 = *(_QWORD *)(v24 + 48);
  v33 = 0;
  v34 = v2;
  v35 = -1;
  v36 = 0x1000000;
  v37 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v29, 14, (uint64_t)&v33);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1568) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsReportBodyConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReportBodyPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSReportBody>,(WebCore::DOMConstructorID)196>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSReportBody::subspaceForImpl(WebCore::JSReportBody *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 1592);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 1592))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 1592);
    *(_QWORD *)(v8 + 1592) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 1592);
  *(_QWORD *)(v3 + 1592) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSReportBodyOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSReportBodyOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t WebCore::JSReportingObserver::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 40) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40));
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReportingObserver::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40));
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSReportingObserver>::construct(JSC *this, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  unsigned int v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  _QWORD *v15;
  _QWORD *Allocator;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  JSC::JSCell *v20;
  JSC::VM *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t Object;
  JSC::Structure *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  WTF *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebCore::ContextDestructionObserver *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  JSCell *v37;
  JSC::JSCell *v38;
  JSC::JSGlobalObject *v39;
  JSC::JSObject *v40;
  JSC::JSGlobalObject *v41;
  JSC::VM *v42;
  JSC::Structure *v43;
  uint64_t FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  JSC::JSObject *v53;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v55;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  unint64_t SubclassStructure;
  uint64_t v60;
  uint64_t v61;
  int v63;
  char v64;
  bmalloc::api *v65;
  void *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF *v70;
  WTF::StringImpl *v71;
  JSValue v72;
  JSC::VM *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  int *v80;
  int v81;
  JSC::VM *v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  int v88;
  JSC::VM *v89[2];
  _DWORD *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  _QWORD v93[2];
  char v94;
  BOOL v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v89[0] = v4;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v72.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, this, v72);
  }
  v6 = *(_QWORD *)(a2 + 24);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, v89, (uint64_t)"ReportingObserver", 18);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(WebCore::JSDOMGlobalObject **)(v6 + 40);
  v83 = (WTF *)*((_QWORD *)this + 7);
  if ((v9 & 0xFFFE000000000002) != 0
    || (v11 = *(unsigned __int8 *)(v9 + 5), v11 < 0x17)
    || (v12 = (WebCore::ScriptExecutionContext *)v7, (v11 & 0xFE) != 0x1A)
    && ((*(_BYTE *)(v9 + 6) & 4) == 0
     || ((*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0x38))(&v92, v9), !(_BYTE)v92)))
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v83, 0, "callback", 9, "ReportingObserver", 18, v8, 0, 0);
    v37 = 0;
    v61 = 1;
    v88 = 1;
    goto LABEL_65;
  }
  v13 = WTF::fastMalloc((WTF *)0x20);
  v14 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
  *(_DWORD *)(v13 + 16) = 1;
  *(_QWORD *)v13 = &off_1E33A18C0;
  *(_QWORD *)(v13 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, v14);
  *(_QWORD *)v13 = &off_1E32DA060;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  Allocator = 0;
  if (v10)
  {
    v74 = v4;
    if ((v10 & 8) != 0)
      v75 = ((unint64_t)v10 - 112) | 1;
    else
      v75 = (unint64_t)v10 & 0xFFFFFFFFFFFFC000;
    if ((v75 & 1) != 0)
      v76 = v75 + 47;
    else
      v76 = *(_QWORD *)v75 + 32;
    Allocator = *(_QWORD **)(v76 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v76 + 16) = *Allocator;
    *Allocator = v10;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v4 = v74;
  }
  v15[1] = &off_1E32268A0;
  *v15 = Allocator;
  if ((v9 & 8) != 0)
    v17 = (v9 - 112) | 1;
  else
    v17 = v9 & 0xFFFFFFFFFFFFC000;
  if ((v17 & 1) != 0)
    v18 = v17 + 47;
  else
    v18 = *(_QWORD *)v17 + 32;
  v19 = *(_QWORD **)(v18 + 16);
  if (!v19)
    v19 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v18 + 16) = *v19;
  *v19 = v9;
  v19[1] = v15 + 1;
  v19[2] = v13;
  v15[2] = v19;
  *(_QWORD *)(v13 + 24) = v15;
  v87 = v13;
  v88 = 0;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v22 = v6;
    v23 = 0;
    goto LABEL_37;
  }
  v20 = *(JSC::JSCell **)(a2 + 56);
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  v89[1] = v21;
  if (((unint64_t)v20 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v22 = v6;
    v23 = 0;
LABEL_37:
    LOBYTE(v93[0]) = 0;
    v94 = 0;
    v95 = v23;
    v96 = 0;
    v87 = 0;
    v90 = (_DWORD *)v13;
    LOBYTE(v83) = 0;
    LOBYTE(v85) = 0;
    goto LABEL_38;
  }
  v82 = v4;
  if (((unint64_t)v20 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v20)) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_93;
  }
  v25 = (JSC::Structure *)Object;
  v22 = v6;
  WTF::AtomStringImpl::addLiteral();
  v27 = JSC::JSObject::get(v25, this, (unint64_t)v83);
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v26);
    else
      *(_DWORD *)v83 -= 2;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_93;
  if (v27 == 10)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v27 >= 0xFFFE000000000000)
  {
    v77 = (_DWORD)v27 == 0;
    goto LABEL_136;
  }
  *(_QWORD *)&v29 = v27 - 0x2000000000000;
  if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v29 <= 0.0)
    {
      v23 = v29 < 0.0;
      goto LABEL_30;
    }
    goto LABEL_134;
  }
  if ((v27 & 0xFFFE000000000002) != 0)
  {
    v23 = v27 == 7;
    goto LABEL_30;
  }
  v78 = *(unsigned __int8 *)(v27 + 5);
  if (v78 == 3)
  {
    v81 = *(_DWORD *)(v27 + 8);
LABEL_132:
    v77 = v81 == 0;
    goto LABEL_136;
  }
  if (v78 == 2)
  {
    v79 = *(_QWORD *)(v27 + 8);
    if ((v79 & 1) != 0)
      v80 = (int *)(v27 + 16);
    else
      v80 = (int *)(v79 + 4);
    v81 = *v80;
    goto LABEL_132;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_134:
    v23 = 1;
    goto LABEL_30;
  }
  v77 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_136:
  v23 = !v77;
LABEL_30:
  if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
    goto LABEL_93;
LABEL_31:
  WTF::AtomStringImpl::addLiteral();
  v30 = v83;
  v32 = JSC::JSObject::get(v25, this, (unint64_t)v83);
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, v31);
    else
      *(_DWORD *)v83 -= 2;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    goto LABEL_93;
  if ((v32 | 8) == 0xA)
  {
    v4 = v82;
    goto LABEL_37;
  }
  v90 = (_DWORD *)*((_QWORD *)this + 7);
  if ((v32 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v32 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v68 = v91;
    v91 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v67);
      else
        *(_DWORD *)v68 -= 2;
    }
    v64 = 0;
    v63 = 1;
    v85 = 1;
  }
  else
  {
    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>>::convert(this, v32, (uint64_t)&v83);
    v63 = v85;
    if (v85 == -1)
      goto LABEL_93;
    if (v85)
    {
      v64 = 0;
    }
    else
    {
      v30 = v83;
      v2 = v84;
      v64 = 1;
      v83 = 0;
      v84 = 0;
    }
  }
  ((void (*)(WTF::StringImpl **, WTF **))off_1E32DCE18[v63])(&v91, &v83);
  if ((v64 & 1) != 0)
  {
    v93[1] = 0;
    v94 = 1;
    v95 = v23;
    v96 = 0;
    v87 = 0;
    v90 = (_DWORD *)v13;
    v93[0] = 0;
    v83 = v30;
    v84 = v2;
    LOBYTE(v85) = 1;
    v4 = v82;
LABEL_38:
    v86 = v23;
    v33 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
    v91 = WebCore::ReportingObserver::ReportingObserver(v33, v12, (uint64_t *)&v90, (uint64_t *)&v83);
    WebCore::ActiveDOMObject::suspendIfNeeded(v91);
    if ((_BYTE)v85)
    {
      v35 = v83;
      if (HIDWORD(v84))
      {
        v69 = 8 * HIDWORD(v84);
        v70 = v83;
        do
        {
          v71 = *(WTF::StringImpl **)v70;
          *(_QWORD *)v70 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
              WTF::StringImpl::destroy(v71, v34);
            else
              *(_DWORD *)v71 -= 2;
          }
          v70 = (WTF *)((char *)v70 + 8);
          v69 -= 8;
        }
        while (v69);
      }
      if (v35)
        WTF::fastFree(v35, v34);
    }
    if (v90)
    {
      if (v90[4] == 1)
        (*(void (**)(void))(*(_QWORD *)v90 + 16))();
      else
        --v90[4];
    }
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v33 != &off_1E3366288)
    {
      __break(0xC471u);
      JUMPOUT(0x194E817F0);
    }
    v37 = (JSCell *)WebCore::createWrapper<WebCore::ReportingObserver,WebCore::ReportingObserver>(*(_QWORD *)(v22 + 40), &v91);
    v38 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v38 & 0xFFFE000000000002) != 0)
      goto LABEL_59;
    v39 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v38);
    if (!v39)
      goto LABEL_59;
    v41 = v39;
    if (v39 == *(JSC::JSGlobalObject **)(a2 + 24))
      goto LABEL_59;
    v42 = (JSC::VM *)*((_QWORD *)this + 7);
    FunctionRealm = JSC::getFunctionRealm(this, v39, v40);
    if (*((_DWORD *)v42 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
        goto LABEL_59;
    }
    v45 = *(_QWORD *)(FunctionRealm + 3296);
    if (v45)
    {
      v46 = *(_DWORD *)(v45 - 8);
      v47 = ((unint64_t)&WebCore::JSReportingObserver::s_info
           + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportingObserver::s_info
                                                                       + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) >> 22);
      v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
      v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
      v50 = v46 & ((v49 >> 31) ^ v49);
      v51 = *(char ***)(v45 + 16 * v50);
      if (v51 == &WebCore::JSReportingObserver::s_info)
      {
LABEL_55:
        v53 = *(JSC::JSObject **)(v45 + 16 * v50 + 8);
        if (v53)
        {
LABEL_57:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v41, v53, v43);
          if (!*((_DWORD *)v42 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) == 0)
            JSC::JSObject::setStructure(v37, v42, SubclassStructure);
LABEL_59:
          if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
            v37 = 0;
          if (v91)
          {
            if (*((_DWORD *)v91 + 6) == 1)
            {
              WebCore::ReportingObserver::~ReportingObserver(v91, v36);
              bmalloc::api::isoDeallocate(v65, v66);
            }
            else
            {
              --*((_DWORD *)v91 + 6);
            }
          }
          v60 = 0;
          goto LABEL_64;
        }
      }
      else
      {
        v52 = 1;
        while (v51)
        {
          v50 = ((_DWORD)v50 + v52) & v46;
          v51 = *(char ***)(v45 + 16 * v50);
          ++v52;
          if (v51 == &WebCore::JSReportingObserver::s_info)
            goto LABEL_55;
        }
      }
    }
    Structure = WebCore::JSReportingObserverPrototype::createStructure((uint64_t *)v42, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v57 = (JSC::JSCell *)WebCore::JSReportingObserverPrototype::create(v42, Structure, v55, v56);
    v58 = WebCore::JSReportingObserver::createStructure((uint64_t *)v42, FunctionRealm, v57);
    v53 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v58, (uint64_t)&WebCore::JSReportingObserver::s_info);
    goto LABEL_57;
  }
LABEL_93:
  v37 = 0;
  v60 = 1;
  v96 = 1;
LABEL_64:
  ((void (*)(WTF **, _QWORD *))off_1E32DC950[v60])(&v83, v93);
  v61 = 0;
LABEL_65:
  ((void (*)(uint64_t *, uint64_t *))off_1E32DC960[v61])(&v92, &v87);
  return v37;
}

WebCore::ReportingObserver *WebCore::JSReportingObserver::destroy(WebCore::JSReportingObserver *this, JSC::JSCell *a2)
{
  WebCore::ReportingObserver *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::ReportingObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::ReportingObserver::~ReportingObserver(result, a2);
      return (WebCore::ReportingObserver *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

uint64_t WebCore::JSReportingObserver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSReportingObserver::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 40) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), a2);
}

uint64_t WebCore::JSReportingObserver::visitChildren(WebCore::JSReportingObserver *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 40) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 40), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSReportingObserverPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSReportingObserverPrototype::create(WebCore::JSReportingObserverPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSReportingObserver::s_info, &WebCore::JSReportingObserverPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReportingObserver>,(WebCore::DOMConstructorID)197>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1576);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSReportingObserver>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSReportingObserver::s_info
         + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportingObserver::s_info
                                                                     + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSReportingObserver::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSReportingObserver::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSReportingObserverPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSReportingObserverPrototype::create((WebCore::JSReportingObserverPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSReportingObserver::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSReportingObserver::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1576) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsReportingObserverConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSReportingObserverPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSReportingObserver>,(WebCore::DOMConstructorID)197>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSReportingObserverOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSReportingObserverOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::ReportingObserver *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::ReportingObserver *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::ReportingObserver **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 6);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::ReportingObserver **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::ReportingObserver **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 6) == 1)
  {
    WebCore::ReportingObserver::~ReportingObserver(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 6);
  }
}

unint64_t WebCore::createWrapper<WebCore::ReportingObserver,WebCore::ReportingObserver>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  int v37;
  unint64_t SlowCase;
  WTF *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *Allocator;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  WTF *v48;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSReportingObserver::s_info
        + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) ^ (((unint64_t)&WebCore::JSReportingObserver::s_info
                                                                    + ~((_QWORD)&WebCore::JSReportingObserver::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSReportingObserver::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSReportingObserver::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSReportingObserverPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSReportingObserverPrototype::create((WebCore::JSReportingObserverPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSReportingObserver::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSReportingObserver::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 1600);
  if (v23)
    goto LABEL_31;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  v46 = *(_QWORD *)(v26 + 1600);
  if (!v46)
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v48, "IsoSpace T");
    v47 = 0;
    MEMORY[0x19AEA3204](v27, &v48, v20 + 192, v20 + 1872, 32, 8, &v47);
    v29 = (uint64_t)v47;
    v47 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v48;
    v48 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v46 = v27;
    v31 = *(_QWORD *)(v26 + 1600);
    *(_QWORD *)(v26 + 1600) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = *(unsigned int *)(v24 + 2844);
    if ((_DWORD)v32 == *(_DWORD *)(v24 + 2840))
    {
      v33 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 2832, v32 + 1, (unint64_t)&v46);
      v32 = *(unsigned int *)(v24 + 2844);
      *(_QWORD *)(*(_QWORD *)(v24 + 2832) + 8 * v32) = *v33;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v24 + 2832) + 8 * v32) = v27;
    }
    *(_DWORD *)(v24 + 2844) = v32 + 1;
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v34 = *(_QWORD *)(v22 + 1600);
  *(_QWORD *)(v22 + 1600) = v23;
  if (v34)
  {
    v35 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v35, v36);
  }
  v37 = __ldxr((unsigned __int8 *)v24);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_31:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_32:
    v23[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v45 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v45);
    v23[5] = SlowCase + (int)v45;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v39 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v39;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v40 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3367D8 & 1) == 0)
  {
    qword_1EE3367D0 = (uint64_t)&off_1E32DADA0;
    byte_1EE3367D8 = 1;
  }
  v48 = v4;
  if ((SlowCase & 8) != 0)
    v41 = (SlowCase - 112) | 1;
  else
    v41 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v41 & 1) != 0)
    v42 = v41 + 47;
  else
    v42 = *(_QWORD *)v41 + 32;
  Allocator = *(_QWORD **)(v42 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v42 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3367D0;
  Allocator[2] = v40;
  v47 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v40 + 32), (uint64_t *)&v48, (uint64_t *)&v47);
  if (v47)
    v47[1] = 3;
  return SlowCase;
}

void WebCore::JSReportingObserverCallback::~JSReportingObserverCallback(WebCore::JSReportingObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSReportingObserverCallback::handleEvent(uint64_t a1, void *a2, WTF *a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  objc_class *v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Structure *v23;
  uint64_t v24;
  uint64_t *v25;
  bmalloc::api *v27;
  void *v28;
  JSValue v29;
  _QWORD *v30;
  char v31[8];
  uint64_t v32;
  WTF *v33;
  _OWORD v34[4];
  uint64_t v35;
  char v36[8];
  WTF *v37;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 24);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)v6;
  MEMORY[0x19AEA3294](v36, *(_QWORD *)(v7 + 56));
  v31[0] = 0;
  v33 = (WTF *)((char *)v34 + 8);
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v8 = (WTF::StringImpl *)WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::Report>>>::convert<WTF::Ref<WebCore::Report,WTF::RawPtrTraits<WebCore::Report>,WTF::DefaultRefDerefTraits<WebCore::Report>>,0ul>(v7, v7, (uint64_t)a2);
  *((_QWORD *)&v34[0] + 1) = v8;
  v32 = 0x800000001;
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 3320) + 32);
  if (!v9)
    goto LABEL_13;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(WTF **)(v9 + 16 * v14);
  if (v15 != a3)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(WTF **)(v9 + 16 * v14);
      ++v16;
      if (v15 == a3)
        goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_10:
  v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
  if (!v17 || (*(_BYTE *)(v17 + 8) & 3) != 0 || (v18 = *(objc_class **)v17) == 0)
  {
LABEL_13:
    ++*((_DWORD *)a3 + 6);
    v37 = a3;
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3366288)
    {
      __break(0xC471u);
      JUMPOUT(0x194E82CC8);
    }
    v18 = (objc_class *)WebCore::createWrapper<WebCore::ReportingObserver,WebCore::ReportingObserver>(v7, &v37);
    if (v37)
    {
      if (*((_DWORD *)v37 + 6) == 1)
      {
        WebCore::ReportingObserver::~ReportingObserver(v37, v8);
        bmalloc::api::isoDeallocate(v27, v28);
      }
      else
      {
        --*((_DWORD *)v37 + 6);
      }
    }
  }
  v19 = v32;
  if ((_DWORD)v32 == HIDWORD(v32) || v33 != (WTF *)((char *)v34 + 8) && v33)
  {
    v29.super.isa = v18;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v32, v29) == 1)
      v31[0] = 1;
  }
  else
  {
    *((_QWORD *)v33 + v32) = v18;
    LODWORD(v32) = v19 + 1;
  }
  v37 = 0;
  v20 = *(uint64_t **)(a1 + 24);
  v21 = *v20;
  if (*v20
    && (*(_BYTE *)(v21 + 8) & 3) == 0
    && *(_QWORD *)v21
    && ((v22 = v20[2]) == 0 || (*(_BYTE *)(v22 + 8) & 3) != 0 ? (v23 = 0) : (v23 = *(JSC::Structure **)v22),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v21, v23, 10, (uint64_t)v31, 0, 0, (uint64_t *)&v37), (v8 = v37) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v37, 0, 0, 0);
    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(uint64_t **)&v34[0];
  if (*(_QWORD *)&v34[0])
  {
    v37 = (WTF *)&v32;
    v30 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v34[0], (uint64_t *)&v37);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v25, v30);
  }
  if (v33 != (WTF *)((char *)v34 + 8) && v33)
    WTF::fastFree(v33, v8);
  MEMORY[0x19AEA32A0](v36);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v24;
}

uint64_t WebCore::JSReportingObserverCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

WebCore::JSRequestAnimationFrameCallback *WebCore::JSRequestAnimationFrameCallback::JSRequestAnimationFrameCallback(WebCore::JSRequestAnimationFrameCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E32DA0A8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 4) = v7;
  return this;
}

void WebCore::JSRequestAnimationFrameCallback::~JSRequestAnimationFrameCallback(WebCore::JSRequestAnimationFrameCallback *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;

  v3 = *((_QWORD *)this + 1);
  if (v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = v4 - 96, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 88))(v4 - 96)))
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3226900;
    v10[1] = v9;
    v12 = v10;
    v13 = 1;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v5 + 336))(v5, &v12);
    v11 = v12;
    v12 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  }
  else
  {
    v6 = (WTF *)*((_QWORD *)this + 4);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 2);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 3;
        *((_QWORD *)v6 + 2) = 0;
      }
      JSC::WeakHandleOwner::~WeakHandleOwner((WTF *)((char *)v6 + 8));
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      WTF::fastFree(v6, v8);
    }
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::JSRequestAnimationFrameCallback::~JSRequestAnimationFrameCallback(this, a2);
  WTF::fastFree(v2, v3);
}

JSC::JSGlobalObject *WebCore::convertDictionary<WebCore::RequestCookieConsentOptions>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *result@<X0>, uint64_t a3@<X8>)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t Object;
  JSC::Structure *v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  JSC::VM *v14;
  char v15;

  v4 = (JSC::VM *)*((_QWORD *)result + 7);
  v14 = v4;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  v5 = result;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (JSC::JSGlobalObject *)JSC::throwTypeError();
LABEL_16:
    *(_DWORD *)(a3 + 8) = 1;
    return result;
  }
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  result = (JSC::JSGlobalObject *)JSC::JSObject::get(v7, v5, (unint64_t)v12);
  v9 = (unint64_t)result;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      result = (JSC::JSGlobalObject *)WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*((_DWORD *)v4 + 20))
  {
    result = (JSC::JSGlobalObject *)JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((_DWORD)result)
      goto LABEL_16;
  }
  if (v9 == 10)
  {
LABEL_9:
    v10 = 0;
LABEL_12:
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }
  result = (JSC::JSGlobalObject *)WebCore::Converter<WebCore::IDLNullable<WebCore::IDLCallbackFunction<WebCore::JSVoidCallback>>>::convert((uint64_t)v5, v9, v5, (uint64_t)&v12);
  v11 = v13;
  if (!v13)
  {
    v10 = v12;
    goto LABEL_12;
  }
  *(_DWORD *)(a3 + 8) = 1;
  if ((_DWORD)v11 != -1)
    return (JSC::JSGlobalObject *)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore14JSVoidCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v11])(&v15, &v12);
  return result;
}

uint64_t WebCore::parseEnumerationFromString<WebCore::RequestPriority>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  BOOL v5;
  char **v6;
  int v7;
  int v8;
  BOOL v10;
  int v11;

  v1 = *a1;
  if (!*a1)
    goto LABEL_45;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  v5 = v4 != 4;
  if (v3 == "auto" || v4 != 4)
  {
    v10 = v3 == "auto" && v4 == 4;
    v11 = v4;
    if (v10)
      goto LABEL_8;
LABEL_22:
    if (v3 == "high")
      v5 = 1;
    if (v5)
    {
      if (v3 == "high" && v4 == 4)
        goto LABEL_30;
    }
    else
    {
      if (!v11)
      {
LABEL_30:
        v6 = &off_1E32DA0F8;
        goto LABEL_9;
      }
      if ((v2 & 4) != 0)
      {
        if (*v3 == 104 && *(_WORD *)(v3 + 1) == 26473 && *((_WORD *)v3 + 1) == 26727)
          goto LABEL_30;
      }
      else if (*(_WORD *)v3 == 104 && *(_DWORD *)(v3 + 2) == 6750313 && *((_DWORD *)v3 + 1) == 6815847)
      {
        goto LABEL_30;
      }
    }
    if (v3 == "low" || v11 != 3)
    {
      if (v11 == 3 && v3 == "low")
        goto LABEL_40;
    }
    else if ((v2 & 4) != 0)
    {
      if (*v3 == 108 && *(_WORD *)(v3 + 1) == 30575)
      {
LABEL_40:
        v6 = &off_1E32DA110;
        goto LABEL_9;
      }
    }
    else if (*(_WORD *)v3 == 108 && *(_DWORD *)(v3 + 2) == 7798895)
    {
      goto LABEL_40;
    }
LABEL_45:
    v8 = 0;
    v7 = 0;
    return v7 | (v8 << 8);
  }
  if ((v2 & 4) == 0)
  {
    if (*(_WORD *)v3 == 97 && *(_DWORD *)(v3 + 2) == 7602293 && *((_DWORD *)v3 + 1) == 7274612)
      goto LABEL_8;
    goto LABEL_21;
  }
  if (*v3 != 97 || *(_WORD *)(v3 + 1) != 29813 || *((_WORD *)v3 + 1) != 28532)
  {
LABEL_21:
    v11 = 4;
    goto LABEL_22;
  }
LABEL_8:
  v6 = &WebCore::parseEnumerationFromString<WebCore::RequestPriority>(WTF::String const&)::mappings;
LABEL_9:
  v7 = *((unsigned __int8 *)v6 + 16);
  v8 = 1;
  return v7 | (v8 << 8);
}

uint64_t WebCore::parseEnumeration<WebCore::RequestPriority>(JSC::JSGlobalObject *a1, unint64_t this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;

  v7 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v2 = *(WTF::StringImpl **)(this + 8);
    if ((v2 & 1) != 0)
    {
      v2 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v2)
        goto LABEL_6;
    }
    else if (!v2)
    {
LABEL_6:
      v6 = v2;
      goto LABEL_7;
    }
    *(_DWORD *)v2 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v7, a1);
  v2 = v6;
LABEL_7:
  v4 = WebCore::parseEnumerationFromString<WebCore::RequestPriority>((uint64_t *)&v6);
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v3);
    else
      *(_DWORD *)v2 -= 2;
  }
  return v4;
}

uint64_t WebCore::parseEnumeration<WebCore::ResidentKeyRequirement>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  int v10;
  char **v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v17;
  uint64_t v20;
  unint64_t v21;

  v3 = a1;
  v21 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
LABEL_34:
        v10 = 0;
        v9 = 0;
        return v10 | (v9 << 8);
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v21, a1);
  v4 = v20;
  if (!v20)
    goto LABEL_34;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "discouraged" && v7 == 11)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_QWORD *)(v6 + 1) != 0x676172756F637369 || *(_QWORD *)(v6 + 3) != 0x6465676172756F63)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0DD0);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968C0DE0);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        goto LABEL_16;
    }
    goto LABEL_38;
  }
  if (v6 == "discouraged" && v7 == 11)
  {
LABEL_38:
    v13 = &WebCore::parseEnumerationFromString<WebCore::ResidentKeyRequirement>(WTF::String const&)::mappings;
    goto LABEL_39;
  }
  if (v6 != "preferred" && v7 == 9)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 112 || *(_DWORD *)(v6 + 1) != 1701209458 || *(_DWORD *)(v6 + 5) != 1684370034)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 112)
        goto LABEL_16;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0DF0);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_16;
    }
  }
  else if (v6 != "preferred" || v7 != 9)
  {
    if (v6 == "required" || v7 != 8)
    {
      if (v7 == 8 && v6 == "required")
        goto LABEL_55;
    }
    else if ((v5 & 4) != 0)
    {
      if (*v6 == 114 && *(_DWORD *)(v6 + 1) == 1769304421 && *((_DWORD *)v6 + 1) == 1684370025)
      {
LABEL_55:
        v13 = &off_1E32DA158;
        goto LABEL_39;
      }
    }
    else if (*(_WORD *)v6 == 114
           && *((_QWORD *)v6 + 1) == 0x64006500720069
           && *(_QWORD *)(v6 + 2) == 0x69007500710065)
    {
      goto LABEL_55;
    }
LABEL_16:
    v9 = 0;
    v10 = 0;
    goto LABEL_40;
  }
  v13 = &off_1E32DA140;
LABEL_39:
  v10 = *((unsigned __int8 *)v13 + 16);
  v9 = 1;
LABEL_40:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v10 | (v9 << 8);
}

uint64_t WebCore::JSResizeObserver::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char *v9;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194E83710);
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned int *)(v4 + 32);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSResizeObserver::visitOutputConstraints<JSC::SlotVisitor>(v7);
  }
  else
  {
    v9 = &v8;
    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14ResizeObserver20callbackConcurrentlyEvE3__0JZNS9_20callbackConcurrentlyEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_22ResizeObserverCallbackENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSH_ISO_EENSJ_ISO_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERS9_EEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, v4 + 24);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  }
  return result;
}

JSCell *WebCore::JSResizeObserver::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  JSCell *result;
  JSC *v6;
  uint64_t v7;
  char v8;
  char *v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v3 == -1)
  {
    v6 = (JSC *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::construct(v6, v7);
  }
  else
  {
    v9 = &v8;
    result = (JSCell *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14ResizeObserver20callbackConcurrentlyEvE3__0JZNS9_20callbackConcurrentlyEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_22ResizeObserverCallbackENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSH_ISO_EENSJ_ISO_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERS9_EEEEEEEDcOT_DpOT0____fmatrix[v3])(&v9, v2 + 24);
    if (result)
      return (JSCell *)(*(uint64_t (**)(JSCell *, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  }
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  unsigned int v11;
  JSC::VM *v12;
  uint64_t v13;
  WebCore::ScriptExecutionContext *v14;
  _QWORD *v15;
  _QWORD *Allocator;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  WebCore::JSDOMGlobalObject *v23;
  JSC::VM *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  JSCell *v28;
  JSC::JSCell *v29;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v31;
  JSC::JSGlobalObject *v32;
  uint64_t v33;
  void *v35;
  WebCore::JSResizeObserver *v36;
  WebCore::JSDOMGlobalObject *v37;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v39;
  JSC::Structure *v40;
  unint64_t SubclassStructure;
  JSValue v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  JSC::InternalFunction *v47;
  uint64_t v48;
  int v49;
  JSC::VM *v50;
  WebCore::ResizeObserver *v51;
  uint64_t v52;
  unsigned int v53;
  char v54;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v50 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v42);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v50, (uint64_t)"ResizeObserver", 15);
  v8 = v6;
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E83B1CLL);
  }
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(WebCore::JSDOMGlobalObject **)(v5 + 40);
  v51 = (WebCore::ResizeObserver *)*((_QWORD *)this + 7);
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    v11 = *(unsigned __int8 *)(v9 + 5);
    if (v11 >= 0x17)
    {
      if ((v11 & 0xFE) == 0x1A
        || (*(_BYTE *)(v9 + 6) & 4) != 0
        && ((*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                     + 0x4C)
                                                                   + 0x38))(&v52, v9), (_BYTE)v52))
      {
        v47 = this;
        v12 = v3;
        v13 = WTF::fastMalloc((WTF *)0x20);
        v14 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v10);
        *(_DWORD *)(v13 + 16) = 1;
        *(_QWORD *)v13 = &off_1E33A18C0;
        *(_QWORD *)(v13 + 8) = 0;
        WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, v14);
        *(_QWORD *)v13 = &off_1E32DA4B0;
        v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        Allocator = 0;
        if (v10)
        {
          v44 = v5;
          if ((v10 & 8) != 0)
            v45 = ((unint64_t)v10 - 112) | 1;
          else
            v45 = (unint64_t)v10 & 0xFFFFFFFFFFFFC000;
          if ((v45 & 1) != 0)
            v46 = v45 + 47;
          else
            v46 = *(_QWORD *)v45 + 32;
          Allocator = *(_QWORD **)(v46 + 16);
          if (!Allocator)
            Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
          *(_QWORD *)(v46 + 16) = *Allocator;
          *Allocator = v10;
          Allocator[1] = 0;
          Allocator[2] = 0;
          v5 = v44;
        }
        v17 = v8 - 192;
        v15[1] = &off_1E32268A0;
        *v15 = Allocator;
        if ((v9 & 8) != 0)
          v18 = (v9 - 112) | 1;
        else
          v18 = v9 & 0xFFFFFFFFFFFFC000;
        if ((v18 & 1) != 0)
          v19 = v18 + 47;
        else
          v19 = *(_QWORD *)v18 + 32;
        v20 = *(_QWORD **)(v19 + 16);
        if (!v20)
          v20 = (_QWORD *)JSC::WeakSet::findAllocator();
        *(_QWORD *)(v19 + 16) = *v20;
        *v20 = v9;
        v20[1] = v15 + 1;
        v20[2] = v13;
        v15[2] = v20;
        *(_QWORD *)(v13 + 24) = v15;
        v49 = 0;
        v48 = 0;
        v21 = bmalloc::api::isoAllocate();
        v52 = v13;
        v53 = 0;
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = 0;
        v22 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v17);
        if (v22)
        {
          v24 = v12;
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 + 1, v22));
          v26 = v53;
          *(_BYTE *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 16) = v22;
          *(_DWORD *)(v21 + 32) = -1;
          if (v26 == -1)
          {
            *(_BYTE *)(v21 + 104) = 0;
            *(_OWORD *)(v21 + 88) = 0u;
            *(_OWORD *)(v21 + 72) = 0u;
            *(_OWORD *)(v21 + 56) = 0u;
            *(_OWORD *)(v21 + 40) = 0u;
            v51 = (WebCore::ResizeObserver *)v21;
LABEL_21:
            v28 = (JSCell *)WebCore::toJSNewlyCreated(*(WebCore::JSResizeObserver ***)(v5 + 40), (uint64_t *)&v51, v23);
            v29 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v29 & 0xFFFE000000000002) == 0)
            {
              Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v29);
              if (Object)
              {
                v32 = Object;
                if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
                {
                  v36 = (WebCore::JSResizeObserver *)*((_QWORD *)v47 + 7);
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(v47, Object, v31);
                  if (!*((_DWORD *)v36 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) == 0)
                  {
                    v39 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSResizeObserver>(v36, FunctionRealm, v37);
                    SubclassStructure = JSC::InternalFunction::createSubclassStructure(v47, v32, v39, v40);
                    if (!*((_DWORD *)v36 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v36) & 1) == 0)
                      JSC::JSObject::setStructure(v28, v36, SubclassStructure);
                  }
                }
              }
            }
            if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
              v28 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 1)
              {
                WebCore::ResizeObserver::~ResizeObserver(v51);
                WebCore::MediaQueryList::operator delete(v35);
              }
              else
              {
                --*(_DWORD *)v51;
              }
            }
            v33 = 0;
            goto LABEL_29;
          }
        }
        else
        {
          v26 = 0;
          *(_BYTE *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_DWORD *)(v21 + 32) = -1;
          v24 = v12;
        }
        ((void (*)(WebCore::ResizeObserver **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JS10_SZ_EEEDcmS12_DpOT0____fdiagonal[v26])(&v51);
        *(_DWORD *)(v21 + 32) = v26;
        v27 = v53;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_OWORD *)(v21 + 56) = 0u;
        *(_OWORD *)(v21 + 72) = 0u;
        *(_OWORD *)(v21 + 88) = 0u;
        *(_BYTE *)(v21 + 104) = 0;
        v51 = (WebCore::ResizeObserver *)v21;
        if ((_DWORD)v27 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore22ResizeObserverCallbackENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSA_ISH_EENSC_ISH_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERNS8_14ResizeObserverEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSW_EEEDcOSX_DpOT0____fmatrix[v27])(&v54, &v52);
        goto LABEL_21;
      }
    }
  }
  WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v51, 0, "callback", 9, "ResizeObserver", 15, v7, 0, 0);
  v28 = 0;
  v33 = 1;
  v49 = 1;
LABEL_29:
  ((void (*)(uint64_t *, uint64_t *))off_1E32DCA20[v33])(&v52, &v48);
  return v28;
}

BOOL WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000001, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v12 = WebCore::getDOMStructure<WebCore::JSResizeObserver>((WebCore::JSResizeObserver *)a2, a3, v11);
  return JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v12 + 48), 14);
}

WTF::StringImpl *WebCore::JSResizeObserverPrototype::finishCreation(WebCore::JSResizeObserverPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(a2, (uint64_t)&WebCore::JSResizeObserver::s_info, &WebCore::JSResizeObserverPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::JSResizeObserver::destroy(WebCore::JSResizeObserver *this, JSC::JSCell *a2)
{
  WebCore::ResizeObserver *v3;
  void *v4;

  v3 = (WebCore::ResizeObserver *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ResizeObserver::~ResizeObserver(v3);
      WebCore::MediaQueryList::operator delete(v4);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
}

uint64_t WebCore::JSResizeObserver::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSResizeObserver::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSResizeObserver::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
}

unint64_t WebCore::JSResizeObserver::visitChildren(WebCore::JSResizeObserver *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  WebCore::JSResizeObserver *v9;
  JSC::JSCell **v10;
  WebCore::JSDOMGlobalObject *v11;
  _QWORD v12[2];
  uint64_t v13;
  char v14;
  char v15;
  char *v16;

  v12[0] = a2;
  v12[1] = this;
  v14 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v13 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x194E8409CLL);
  }
  *((_QWORD *)a2 + 11) = v12;
  JSC::JSObject::visitChildren();
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned int *)(v6 + 32);
  if ((_DWORD)v7 == -1)
  {
    v9 = (WebCore::JSResizeObserver *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::JSResizeObserver::createPrototype(v9, v10, v11);
  }
  else
  {
    v16 = &v15;
    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14ResizeObserver20callbackConcurrentlyEvE3__0JZNS9_20callbackConcurrentlyEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_22ResizeObserverCallbackENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEEPFvRKNS6_6VectorINS6_3RefINS8_19ResizeObserverEntryENSH_ISO_EENSJ_ISO_EEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEERS9_EEEEEEEDcOT_DpOT0____fmatrix[v7])(&v16, v6 + 24);
    if (result)
      result = (*(uint64_t (**)(unint64_t, JSC::JSCell *))(*(_QWORD *)result + 24))(result, a2);
    *(_QWORD *)(v12[0] + 88) = v13;
  }
  return result;
}

unint64_t WebCore::JSResizeObserver::createPrototype(WebCore::JSResizeObserver *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSResizeObserverPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSResizeObserverPrototype::create(WebCore::JSResizeObserverPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSResizeObserverPrototype::finishCreation((WebCore::JSResizeObserverPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::jsResizeObserverConstructor(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t Structure;
  JSC::Heap *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSResizeObserverPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  result = *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 5912);
  if (!result)
  {
    Structure = WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::createStructure((uint64_t *)v2, v3, *(JSC::JSCell **)(v3 + 664));
    result = WebCore::JSDOMConstructor<WebCore::JSResizeObserver>::create(v2, Structure, (JSC::VM *)v3);
    *(_QWORD *)(*(_QWORD *)(v3 + 3312) + 5912) = result;
    if (result)
    {
      if (*(_DWORD *)(v2 + 760) >= *(unsigned __int8 *)(v3 + 7))
      {
        v6 = (JSC::Heap *)(v2 + 192);
        v7 = result;
        JSC::Heap::writeBarrierSlowPath(v6, (const JSCell *)v3);
        return v7;
      }
    }
  }
  return result;
}

void WebCore::JSResizeObserverOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::ResizeObserver *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::ResizeObserver *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  void *v24;

  v3 = *(WebCore::ResizeObserver **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::ResizeObserver **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::ResizeObserver **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::ResizeObserver::~ResizeObserver(v3);
    WebCore::MediaQueryList::operator delete(v24);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::toJSNewlyCreated(WebCore::JSResizeObserver **a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unint64_t v6;
  WebCore::JSResizeObserver *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t SlowCase;
  uint64_t v12;
  WebCore::JSResizeObserver *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *Allocator;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v5 = *a2;
  v6 = WebCore::getDOMStructure<WebCore::JSResizeObserver>(a1[7], (JSC::VM *)a1, a3);
  v7 = a1[7];
  v8 = *((_QWORD *)v7 + 5182);
  v9 = *(_QWORD *)(v8 + 23536);
  v10 = *(_QWORD **)(v9 + 5992);
  if (!v10)
  {
    v18 = *(_QWORD *)(v8 + 22648);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_21:
      v20 = *(_QWORD *)(v18 + 2824);
      v28 = *(_QWORD **)(v20 + 5992);
      if (!v28)
      {
        v26 = 32;
        std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)v7 + 192, (uint64_t)v7 + 1872, &v26, JSC::JSCell::numberOfLowerTierCells, (uint64_t *)&v27);
        v22 = (uint64_t)v27;
        v28 = v27;
        v23 = *(_QWORD *)(v20 + 5992);
        *(_QWORD *)(v20 + 5992) = v27;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v24 = *(unsigned int *)(v18 + 2844);
        if ((_DWORD)v24 == *(_DWORD *)(v18 + 2840))
        {
          WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v18 + 2832, (unint64_t)&v28);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v18 + 2832) + 8 * v24) = v22;
          *(_DWORD *)(v18 + 2844) = v24 + 1;
        }
      }
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      v27 = (_QWORD *)JSC::GCClient::IsoSubspace::IsoSubspace();
      WebCore::JSResizeObserver::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v9, (uint64_t *)&v27);
      std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100]((uint64_t *)&v27);
      v21 = __ldxr((unsigned __int8 *)v18);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
          goto LABEL_2;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_2;
    }
    MEMORY[0x19AEA534C](v18);
    goto LABEL_21;
  }
LABEL_2:
  SlowCase = v10[3];
  if (SlowCase < v10[4])
  {
LABEL_3:
    v10[3] = SlowCase + 32;
    goto LABEL_4;
  }
  SlowCase = v10[5];
  if ((SlowCase & 1) == 0)
  {
    v25 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v25);
    v10[5] = SlowCase + (int)v25;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v6);
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v12;
  if (*((_BYTE *)v7 + 755))
    __dmb(0xAu);
  v13 = a1[415];
  if ((byte_1EE3367E8 & 1) == 0)
  {
    qword_1EE3367E0 = (uint64_t)&off_1E3393720;
    byte_1EE3367E8 = 1;
  }
  v28 = (_QWORD *)v5;
  if ((SlowCase & 8) != 0)
    v14 = (SlowCase - 112) | 1;
  else
    v14 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v14 & 1) != 0)
    v15 = v14 + 47;
  else
    v15 = *(_QWORD *)v14 + 32;
  Allocator = *(_QWORD **)(v15 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v15 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3367E0;
  Allocator[2] = v13;
  v27 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)v13 + 4, (uint64_t *)&v28, (uint64_t *)&v27);
  if (v27)
    v27[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::ResizeObserver>(uint64_t a1, WebCore::ResizeObserver *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::ResizeObserver *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v14;
  WebCore::ResizeObserver *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::ResizeObserver **)(v3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::ResizeObserver **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v15 = a2;
  v12 = WebCore::toJSNewlyCreated((WebCore::JSResizeObserver **)a1, (uint64_t *)&v15, a3);
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::ResizeObserver::~ResizeObserver(v15);
      WebCore::MediaQueryList::operator delete(v14);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  return v12;
}

uint64_t WebCore::parseEnumeration<WebCore::ResizeObserverBoxOptions>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v9;
  __int32 v10;
  char **v13;
  uint64_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v21;
  unint64_t v22;

  v3 = a1;
  v22 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v22, a1);
  v4 = v21;
  if (!v21)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "border-box" && v7 == 10)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 98 || *(_QWORD *)(v6 + 1) != 0x6F622D726564726FLL || *(_QWORD *)(v6 + 2) != 0x786F622D72656472)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 98)
        goto LABEL_16;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0E00);
      v15.i16[0] = vminvq_u16(v15);
      v10 = v15.i32[0];
      if (!v15.i32[0])
        goto LABEL_49;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 4), (int16x8_t)xmmword_1968C0E10);
      v16.i16[0] = vminvq_u16(v16);
      v9 = v16.i32[0];
      if (!v16.i32[0])
        goto LABEL_17;
    }
LABEL_39:
    v13 = &WebCore::parseEnumerationFromString<WebCore::ResizeObserverBoxOptions>(WTF::String const&)::mappings;
    goto LABEL_40;
  }
  if (v6 == "border-box" && v7 == 10)
    goto LABEL_39;
  if (v6 == "content-box" || v7 != 11)
  {
    if (v7 != 11 || v6 != "content-box")
      goto LABEL_16;
    goto LABEL_31;
  }
  if ((v5 & 4) != 0)
  {
    if (*v6 == 99 && *(_QWORD *)(v6 + 1) == 0x622D746E65746E6FLL && *(_QWORD *)(v6 + 3) == 0x786F622D746E6574)
    {
LABEL_31:
      v13 = &off_1E32DA488;
LABEL_40:
      v10 = *((unsigned __int8 *)v13 + 16);
      v9 = 1;
      goto LABEL_41;
    }
LABEL_16:
    v9 = 0;
LABEL_17:
    v10 = 0;
    goto LABEL_41;
  }
  if (*(_WORD *)v6 != 99)
    goto LABEL_16;
  v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 2), (int16x8_t)xmmword_1968C0E20);
  v18.i16[0] = vminvq_u16(v18);
  v10 = v18.i32[0];
  if (v18.i32[0])
  {
    v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v6 + 6), (int16x8_t)xmmword_1968C0E30);
    v19.i16[0] = vminvq_u16(v19);
    v9 = v19.i32[0];
    if (!v19.i32[0])
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_49:
  v9 = 0;
LABEL_41:
  v14 = v10 | (v9 << 8);
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v14;
}

void WebCore::JSResizeObserverCallback::~JSResizeObserverCallback(WebCore::JSResizeObserverCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSIntersectionObserverCallback::~JSIntersectionObserverCallback(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSResizeObserverCallback::handleEvent(uint64_t a1, void *a2, uint64_t a3, WebCore::ResizeObserver *a4)
{
  uint64_t v8;
  uint64_t v9;
  WebCore::JSDOMGlobalObject *v10;
  WebCore::JSDOMGlobalObject *v11;
  uint64_t *v12;
  unsigned int v13;
  JSC::VM *v14;
  void *v15;
  objc_class *v16;
  uint64_t *v17;
  int v18;
  objc_class *v19;
  JSValue v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  JSC::Structure *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t SlowCase;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  JSC::VM *v47;
  _QWORD *Allocator;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  JSValue v62;
  JSValue v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  WebCore::ResizeObserver *v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  char v71[8];
  uint64_t v72;
  WTF *v73;
  _OWORD v74[4];
  uint64_t v75;
  _BYTE v76[8];
  WTF *v77;
  int v78;
  objc_class *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t *v82[10];
  uint64_t v83;
  uint64_t v84[2];

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v8 = **(_QWORD **)(a1 + 24);
  if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8;
  MEMORY[0x19AEA3294](v76, *(_QWORD *)(v9 + 56));
  v70 = WebCore::wrap<WebCore::ResizeObserver>(v9, (WebCore::ResizeObserver *)a2, v10);
  v71[0] = 0;
  v72 = 0x800000000;
  v73 = (WTF *)((char *)v74 + 8);
  v75 = 0;
  memset(v74, 0, sizeof(v74));
  v12 = *(uint64_t **)(v9 + 56);
  v82[9] = v12;
  LOBYTE(v79) = 0;
  v80 = 0x800000000;
  memset(v82, 0, 72);
  v81 = (WTF *)&v82[1];
  v13 = *(_DWORD *)(a3 + 12);
  if (v13 >= 9)
  {
    LOBYTE(v79) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v80) == 1;
    v13 = *(_DWORD *)(a3 + 12);
  }
  if (v13)
  {
    v27 = *(uint64_t **)a3;
    v68 = *(_QWORD *)a3 + 8 * v13;
    v67 = a4;
    v69 = v12;
    while (1)
    {
      v28 = *v27;
      v29 = *(_QWORD *)(*(_QWORD *)(v9 + 3320) + 32);
      if (!v29)
        goto LABEL_37;
      v30 = *(_DWORD *)(v29 - 8);
      v31 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
      v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
      v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
      v34 = v30 & ((v33 >> 31) ^ v33);
      v35 = *(_QWORD *)(v29 + 16 * v34);
      if (v35 != v28)
        break;
LABEL_34:
      v37 = *(_QWORD *)(v29 + 16 * v34 + 8);
      if (!v37)
        goto LABEL_37;
      if ((*(_BYTE *)(v37 + 8) & 3) != 0)
        goto LABEL_37;
      SlowCase = *(_QWORD *)v37;
      if (!*(_QWORD *)v37)
        goto LABEL_37;
      v47 = (JSC::VM *)v69;
LABEL_53:
      if (*((_DWORD *)v47 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) != 0)
        goto LABEL_103;
      v49 = v80;
      if ((_DWORD)v80 == HIDWORD(v80) || v81 != (WTF *)&v82[1] && v81)
      {
        v63.super.isa = (Class)SlowCase;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v80, v63) == 1)
          LOBYTE(v79) = 1;
      }
      else
      {
        *((_QWORD *)v81 + v80) = SlowCase;
        LODWORD(v80) = v49 + 1;
      }
      if (++v27 == (uint64_t *)v68)
        goto LABEL_8;
    }
    v36 = 1;
    while (v35)
    {
      v34 = ((_DWORD)v34 + v36) & v30;
      v35 = *(_QWORD *)(v29 + 16 * v34);
      ++v36;
      if (v35 == v28)
        goto LABEL_34;
    }
LABEL_37:
    ++*(_DWORD *)v28;
    v39 = WebCore::getDOMStructure<WebCore::JSResizeObserverEntry>(*(WebCore::JSResizeObserverEntry **)(v9 + 56), (JSC::VM *)v9, v11);
    v40 = *(_QWORD *)(v9 + 56);
    v41 = *(_QWORD *)(v40 + 41456);
    v42 = *(_QWORD *)(v41 + 23536);
    v43 = *(_QWORD **)(v42 + 6000);
    if (v43)
    {
LABEL_38:
      SlowCase = v43[3];
      if (SlowCase >= v43[4])
      {
        SlowCase = v43[5];
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM();
          SlowCase = JSC::LocalAllocator::allocateSlowCase();
          goto LABEL_40;
        }
        v64 = *(_QWORD *)(SlowCase + 8) ^ v43[6];
        v43[4] = SlowCase + HIDWORD(v64);
        v43[5] = SlowCase + (int)v64;
      }
      v43[3] = SlowCase + 32;
LABEL_40:
      *(_DWORD *)SlowCase = 0;
      WebCore::JSDOMObject::JSDOMObject(SlowCase, v39);
      *(_QWORD *)(SlowCase + 24) = v28;
      if (*(_BYTE *)(v40 + 755))
        __dmb(0xAu);
      v44 = *(_QWORD *)(v9 + 3320);
      a4 = v67;
      if ((byte_1EE3367F8 & 1) == 0)
      {
        qword_1EE3367F0 = (uint64_t)&off_1E32DADD0;
        byte_1EE3367F8 = 1;
      }
      v77 = (WTF *)v28;
      if ((SlowCase & 8) != 0)
        v45 = (SlowCase - 112) | 1;
      else
        v45 = SlowCase & 0xFFFFFFFFFFFFC000;
      if ((v45 & 1) != 0)
        v46 = v45 + 47;
      else
        v46 = *(_QWORD *)v45 + 32;
      v47 = (JSC::VM *)v69;
      Allocator = *(_QWORD **)(v46 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v46 + 16) = *Allocator;
      *Allocator = SlowCase;
      Allocator[1] = &qword_1EE3367F0;
      Allocator[2] = v44;
      v84[0] = (uint64_t)Allocator;
      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v44 + 32), (uint64_t *)&v77, v84);
      if (v84[0])
        *(_QWORD *)(v84[0] + 8) = 3;
      goto LABEL_53;
    }
    v50 = *(_QWORD *)(v41 + 22648);
    if (__ldaxr((unsigned __int8 *)v50))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v50))
    {
LABEL_62:
      v52 = *(_QWORD *)(v50 + 2824);
      v77 = *(WTF **)(v52 + 6000);
      if (!v77)
      {
        v83 = 32;
        std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", v40 + 192, v40 + 1872, &v83, JSC::JSCell::numberOfLowerTierCells, v84);
        v57 = v84[0];
        v77 = (WTF *)v84[0];
        v58 = *(_QWORD *)(v52 + 6000);
        *(_QWORD *)(v52 + 6000) = v84[0];
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
        v59 = *(unsigned int *)(v50 + 2844);
        if ((_DWORD)v59 == *(_DWORD *)(v50 + 2840))
        {
          WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v50 + 2832, (unint64_t)&v77);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v50 + 2832) + 8 * v59) = v57;
          *(_DWORD *)(v50 + 2844) = v59 + 1;
        }
      }
      v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
      JSC::GCClient::IsoSubspace::IsoSubspace();
      v53 = *(_QWORD *)(v42 + 6000);
      *(_QWORD *)(v42 + 6000) = v43;
      if (v53)
      {
        v54 = (WTF *)MEMORY[0x19AEA3528]();
        WTF::fastFree(v54, v55);
      }
      v56 = __ldxr((unsigned __int8 *)v50);
      if (v56 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v50))
          goto LABEL_38;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v50);
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v50);
    goto LABEL_62;
  }
LABEL_8:
  if ((_BYTE)v79)
  {
    JSC::throwOutOfMemoryError();
LABEL_103:
    v16 = 0;
    goto LABEL_11;
  }
  v77 = v81;
  v78 = v80;
  v14 = *(JSC::VM **)(v9 + 56);
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    goto LABEL_103;
  v16 = (objc_class *)JSC::constructArray();
LABEL_11:
  v17 = v82[0];
  if (v82[0])
  {
    v77 = (WTF *)&v80;
    v65 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v82[0], (uint64_t *)&v77);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v65);
  }
  if (v81 != (WTF *)&v82[1] && v81)
    WTF::fastFree(v81, v15);
  v18 = v72;
  if ((_DWORD)v72 == HIDWORD(v72) || v73 != (WTF *)((char *)v74 + 8) && v73)
  {
    v62.super.isa = v16;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v72, v62) == 1)
      v71[0] = 1;
  }
  else
  {
    *((_QWORD *)v73 + v72) = v16;
    LODWORD(v72) = v18 + 1;
  }
  v19 = (objc_class *)WebCore::wrap<WebCore::ResizeObserver>(v9, a4, v11);
  v20.super.isa = v19;
  v21 = v72;
  if ((_DWORD)v72 == HIDWORD(v72) || v73 != (WTF *)((char *)v74 + 8) && v73)
  {
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v72, v20) == 1)
      v71[0] = 1;
  }
  else
  {
    *((_QWORD *)v73 + v72) = v19;
    LODWORD(v72) = v21 + 1;
  }
  v79 = 0;
  v22 = *(uint64_t **)(a1 + 24);
  v23 = *v22;
  if (*v22 && (*(_BYTE *)(v23 + 8) & 3) == 0 && *(_QWORD *)v23)
  {
    v24 = v22[2];
    if (!v24 || (*(_BYTE *)(v24 + 8) & 3) != 0)
      v25 = 0;
    else
      v25 = *(JSC::Structure **)v24;
    WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v23, v25, v70, (uint64_t)v71, 0, 0, (uint64_t *)&v79);
    v26 = 0;
    v20.super.isa = v79;
    if (v79)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v79, 0, 0, 0);
      v26 = 1;
    }
  }
  else
  {
    v26 = 0;
  }
  v60 = *(uint64_t **)&v74[0];
  if (*(_QWORD *)&v74[0])
  {
    v79 = (objc_class *)&v72;
    v66 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v74[0], (uint64_t *)&v79);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v60, v66);
  }
  if (v73 != (WTF *)((char *)v74 + 8) && v73)
    WTF::fastFree(v73, v20.super.isa);
  MEMORY[0x19AEA32A0](v76);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v26;
}

uint64_t WebCore::JSResizeObserverCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSResizeObserverEntry::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSResizeObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::JSResizeObserverEntryPrototype::finishCreation(WebCore::JSResizeObserverEntryPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(a2, (uint64_t)&WebCore::JSResizeObserverEntry::s_info, &WebCore::JSResizeObserverEntryPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::ResizeObserverEntry *WebCore::JSResizeObserverEntry::destroy(WebCore::JSResizeObserverEntry *this, JSC::JSCell *a2)
{
  WebCore::ResizeObserverEntry *result;
  WTF *v4;
  void *v5;

  result = (WebCore::ResizeObserverEntry *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::ResizeObserverEntry::~ResizeObserverEntry(result, a2);
      return (WebCore::ResizeObserverEntry *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSResizeObserverEntry::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSResizeObserverEntry::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSResizeObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSResizeObserverEntry::visitChildren(WebCore::JSResizeObserverEntry *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSResizeObserverEntry::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, (uint64_t)a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t WebCore::JSResizeObserverEntry::createPrototype(WebCore::JSResizeObserverEntry *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t v4;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  v4 = JSC::Structure::create((uint64_t *)this, (int)a2, a2[82]);
  *(_DWORD *)(v4 + 16) |= 0x80000u;
  return WebCore::JSResizeObserverEntryPrototype::create(this, v4, v5, v6);
}

unint64_t WebCore::JSResizeObserverEntryPrototype::create(WebCore::JSResizeObserverEntryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSResizeObserverEntryPrototype::finishCreation((WebCore::JSResizeObserverEntryPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverEntry>,(WebCore::DOMConstructorID)740>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5920);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v21) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v19);
    v5[2] = SlowCase + (int)v19;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v21, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverEntry>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v20);
    v9[2848] = v2 + (int)v20;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v21);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v21);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v21);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v17 = *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSResizeObserverEntry>((WebCore::JSResizeObserverEntry *)a1, (JSC::VM *)a2, v16)+ 48);
  v21 = 0;
  v22 = v2;
  v23 = -1;
  v24 = 0x1000000;
  v25 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v17, 14, (uint64_t)&v21);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5920) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsResizeObserverEntryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSResizeObserverEntryPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverEntry>,(WebCore::DOMConstructorID)740>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsResizeObserverEntry_target(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::Element *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 8);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsResizeObserverEntry_contentRect(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMRectReadOnly *a4)
{
  WebCore::JSDOMGlobalObject *v4;

  v4 = *(WebCore::JSDOMGlobalObject **)(*(_QWORD *)(a2 + 24) + 16);
  if (v4)
    return WebCore::toJS(a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v4, a4);
  else
    return 2;
}

uint64_t WebCore::jsResizeObserverEntry_borderBoxSize(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::ResizeObserverSize>>>::convert<WTF::Ref<WebCore::ResizeObserverSize,WTF::RawPtrTraits<WebCore::ResizeObserverSize>,WTF::DefaultRefDerefTraits<WebCore::ResizeObserverSize>>,0ul>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 24);
}

uint64_t WebCore::jsResizeObserverEntry_contentBoxSize(JSC *a1, uint64_t a2)
{
  return WebCore::JSConverter<WebCore::IDLFrozenArray<WebCore::IDLInterface<WebCore::ResizeObserverSize>>>::convert<WTF::Ref<WebCore::ResizeObserverSize,WTF::RawPtrTraits<WebCore::ResizeObserverSize>,WTF::DefaultRefDerefTraits<WebCore::ResizeObserverSize>>,0ul>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), *(_QWORD *)(a2 + 24) + 40);
}

uint64_t WebCore::JSResizeObserverEntryOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSResizeObserverEntryOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::ResizeObserverEntry *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::ResizeObserverEntry *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::ResizeObserverEntry **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::ResizeObserverEntry **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::ResizeObserverEntry **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::ResizeObserverEntry::~ResizeObserverEntry(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

_DWORD *WebCore::JSResizeObserverSize::destroy(WebCore::JSResizeObserverSize *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSResizeObserverSize::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSResizeObserverSizePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSResizeObserverSizePrototype::create(WebCore::JSResizeObserverSizePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSResizeObserverSize::s_info, &WebCore::JSResizeObserverSizePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverSize>,(WebCore::DOMConstructorID)741>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5928);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverSize>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSResizeObserverSize::s_info
         + ~((_QWORD)&WebCore::JSResizeObserverSize::s_info << 32)) ^ (((unint64_t)&WebCore::JSResizeObserverSize::s_info
                                                                      + ~((_QWORD)&WebCore::JSResizeObserverSize::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSResizeObserverSize::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSResizeObserverSize::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSResizeObserverSizePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSResizeObserverSizePrototype::create((WebCore::JSResizeObserverSizePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSResizeObserverSize::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSResizeObserverSize::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5928) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsResizeObserverSizeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSResizeObserverSizePrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSResizeObserverSize>,(WebCore::DOMConstructorID)741>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsResizeObserverSize_inlineSize(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 16);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

unint64_t WebCore::jsResizeObserverSize_blockSize(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 24);
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

uint64_t WebCore::JSResizeObserverSizeOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSResizeObserverSizeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaHashedImportParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  int v26;
  void (**v27)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  JSC::VM *v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v27 = off_1E32DCC20;
    v28 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 48) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v27 = off_1E32DCC20;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v35);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v7);
    else
      *(_DWORD *)v35 -= 2;
  }
  if (*((_DWORD *)v33 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v33))
    goto LABEL_11;
  if (v8 != 10)
  {
    v35 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v35, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v23;
        if (hasExceptionsAfterHandlingTraps)
        {
          v16 = 1;
          v26 = 1;
          v23 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 48) = 1;
          goto LABEL_45;
        }
      }
      else
      {
        v11 = v23;
      }
      v26 = 0;
      v25 = 0;
      v12 = v28;
      v28 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v35;
      v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v35);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (!*((_DWORD *)v33 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v33))
      {
        if (v15 != 10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)a2, v15, (uint64_t)&v35);
          v17 = v38;
          if (v38)
          {
            *(_DWORD *)(a3 + 48) = 1;
          }
          else
          {
            LOBYTE(v23) = 0;
            v24 = -1;
            v18 = v37;
            if (v37 == -1)
            {
              if (v31 != -1)
              {
                ((void (*)(uint64_t **, uint64_t *))off_1E32DCC38[v31])(&v34, &v30);
                v31 = -1;
              }
            }
            else
            {
              ((void (*)(uint64_t **, WTF::StringImpl **, uint64_t *))off_1E32DCC48[v37])(&v34, &v23, &v36);
              v24 = v18;
              v34 = &v30;
              ((void (*)(uint64_t **, uint64_t *, WTF::StringImpl **))off_1E32DCC58[v18])(&v34, &v30, &v23);
            }
            if (v24 != -1)
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1E32DCC38[v24])(&v34, &v23);
            v19 = v28;
            if (v28)
              *(_DWORD *)v28 += 2;
            *(_BYTE *)(a3 + 16) = v29;
            *(_QWORD *)a3 = off_1E32DCC20;
            *(_QWORD *)(a3 + 8) = v19;
            *(_BYTE *)(a3 + 24) = 0;
            *(_DWORD *)(a3 + 32) = -1;
            v20 = v31;
            if (v31 != -1)
            {
              ((void (*)(WTF::StringImpl **, uint64_t, uint64_t *))off_1E32DCC48[v31])(&v23, a3 + 24, &v30);
              *(_DWORD *)(a3 + 32) = v20;
            }
            *(_BYTE *)(a3 + 40) = v32;
            *(_DWORD *)(a3 + 48) = 0;
            v17 = v38;
          }
          if (v17 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DCC68[v17])(&v23, &v36);
          v16 = 0;
          goto LABEL_45;
        }
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v33, "hash", 5, "RsaHashedImportParams", 22, "(object or DOMString)", 22);
      }
      v16 = 0;
      *(_DWORD *)(a3 + 48) = 1;
LABEL_45:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v16])(&v35, &v25);
      goto LABEL_46;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v23 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v33, "name", 5, "RsaHashedImportParams", 22, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 48) = 1;
LABEL_46:
  if (v31 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DCC38[v31])(&v35, &v30);
  v31 = -1;
  result = v28;
  v27 = off_1E3226840;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmRsaHashedImportParams::~CryptoAlgorithmRsaHashedImportParams(WebCore::CryptoAlgorithmRsaHashedImportParams *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32DCC38[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  char v5;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32DCC38[v3])(&v5, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaHashedKeyGenParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  int v35;
  WTF *v36;
  WTF *v37;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  _BYTE v40[8];
  int v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  int v45;
  void (**v46)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v47;
  char v48;
  WTF::StringImpl *v49;
  WTF *v50[2];
  uint64_t v51;
  uint64_t v52;
  int v53;
  char v54;
  JSC::VM *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v55 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    v52 = 0;
    v46 = off_1E32DCC88;
    v47 = 0;
    v53 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 80) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  v52 = 0;
  v46 = off_1E32DCC88;
  v47 = 0;
  v53 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v57);
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v57, v7);
    else
      *(_DWORD *)v57 -= 2;
  }
  if (*((_DWORD *)v55 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v55))
    goto LABEL_11;
  if (v8 != 10)
  {
    v57 = v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v57, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v42;
        if (hasExceptionsAfterHandlingTraps)
        {
          v24 = 1;
          v45 = 1;
          v42 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          *(_DWORD *)(a3 + 80) = 1;
          goto LABEL_72;
        }
      }
      else
      {
        v11 = v42;
      }
      v45 = 0;
      v44 = 0;
      v12 = v47;
      v47 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = (WTF::StringImpl *)v57;
      v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v57);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v55 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v55))
        goto LABEL_37;
      if (v15 == 10)
      {
        v16 = "modulusLength";
        v17 = "unsigned long";
        v18 = (int)a2;
        v19 = 14;
        v20 = 14;
LABEL_36:
        WebCore::throwRequiredMemberTypeError(v18, (int)&v55, v16, v19, "RsaHashedKeyGenParams", 22, v17, v20);
LABEL_37:
        v24 = 0;
        *(_DWORD *)(a3 + 80) = 1;
LABEL_72:
        ((void (*)(unint64_t *, uint64_t *))off_1E32DAE20[v24])(&v57, &v44);
        goto LABEL_73;
      }
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v15, &v57);
      if (HIDWORD(v57))
        goto LABEL_37;
      v49 = (WTF::StringImpl *)v57;
      WTF::AtomStringImpl::addLiteral();
      v21 = (WTF::StringImpl *)v57;
      v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v57);
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v22);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (*((_DWORD *)v55 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v55))
        goto LABEL_37;
      if (v23 == 10)
      {
        v16 = "publicExponent";
        v17 = "Uint8Array";
        v18 = (int)a2;
        v19 = 15;
        v20 = 11;
        goto LABEL_36;
      }
      WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>(v23, (uint64_t)&v42);
      v25 = v43;
      if (v43)
      {
        *(_DWORD *)(a3 + 80) = 1;
        goto LABEL_69;
      }
      v26 = v42;
      v42 = 0;
      v27 = v50[0];
      v50[0] = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v27;
      }
      WTF::AtomStringImpl::addLiteral();
      v28 = (WTF::StringImpl *)v57;
      v30 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v57);
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v29);
        else
          *(_DWORD *)v28 -= 2;
      }
      if (!*((_DWORD *)v55 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v55))
      {
        if (v30 != 10)
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLObject,WebCore::IDLDOMString>>::convert((uint64_t *)a2, v30, (uint64_t)&v57);
          v31 = v60;
          if (v60)
          {
            *(_DWORD *)(a3 + 80) = 1;
          }
          else
          {
            v40[0] = 0;
            v41 = -1;
            v32 = v59;
            if (v59 == -1)
            {
              if (v53 != -1)
              {
                ((void (*)(uint64_t **, uint64_t *))off_1E32DCC38[v53])(&v56, &v52);
                v53 = -1;
              }
            }
            else
            {
              ((void (*)(uint64_t **, _BYTE *, uint64_t *))off_1E32DCC48[v59])(&v56, v40, &v58);
              v41 = v32;
              v56 = &v52;
              ((void (*)(uint64_t **, uint64_t *, _BYTE *))off_1E32DCC58[v32])(&v56, &v52, v40);
            }
            if (v41 != -1)
              ((void (*)(uint64_t **, _BYTE *))off_1E32DCC38[v41])(&v56, v40);
            v33 = v47;
            if (v47)
              *(_DWORD *)v47 += 2;
            *(_BYTE *)(a3 + 16) = v48;
            *(_QWORD *)(a3 + 24) = v49;
            v34 = *(_OWORD *)v50;
            v50[0] = 0;
            v50[1] = 0;
            *(_OWORD *)(a3 + 32) = v34;
            *(_QWORD *)&v34 = v51;
            v51 = 0;
            *(_QWORD *)(a3 + 48) = v34;
            *(_QWORD *)a3 = off_1E32DCC88;
            *(_QWORD *)(a3 + 8) = v33;
            *(_BYTE *)(a3 + 56) = 0;
            *(_DWORD *)(a3 + 64) = -1;
            v35 = v53;
            if (v53 != -1)
            {
              ((void (*)(_BYTE *, uint64_t, uint64_t *))off_1E32DCC48[v53])(v40, a3 + 56, &v52);
              *(_DWORD *)(a3 + 64) = v35;
            }
            *(_BYTE *)(a3 + 72) = v54;
            *(_DWORD *)(a3 + 80) = 0;
            v31 = v60;
          }
          if (v31 != -1)
            ((void (*)(_BYTE *, uint64_t *))off_1E32DCC68[v31])(v40, &v58);
          goto LABEL_68;
        }
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v55, "hash", 5, "RsaHashedKeyGenParams", 22, "(object or DOMString)", 22);
      }
      *(_DWORD *)(a3 + 80) = 1;
LABEL_68:
      v25 = v43;
LABEL_69:
      if (v25 != -1)
        ((void (*)(unint64_t *, WTF::StringImpl **))off_1E32DCCC8[v25])(&v57, &v42);
      v24 = 0;
      goto LABEL_72;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v42 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v55, "name", 5, "RsaHashedKeyGenParams", 22, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 80) = 1;
LABEL_73:
  if (v53 != -1)
    ((void (*)(unint64_t *, uint64_t *))off_1E32DCC38[v53])(&v57, &v52);
  v53 = -1;
  v46 = off_1E32DCCB0;
  v36 = v50[1];
  if (v50[1])
  {
    v50[1] = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v36, v7);
  }
  v37 = v50[0];
  v50[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v37;
  }
  result = v47;
  v46 = off_1E3226840;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmRsaHashedKeyGenParams::~CryptoAlgorithmRsaHashedKeyGenParams(WebCore::CryptoAlgorithmRsaHashedKeyGenParams *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  char v7;

  v3 = *((unsigned int *)this + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32DCC38[v3])(&v7, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  *(_QWORD *)this = off_1E32DCCB0;
  v4 = (WTF *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*v5 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v5;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  char v7;

  v3 = *((unsigned int *)this + 16);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E32DCC38[v3])(&v7, (char *)this + 56);
  *((_DWORD *)this + 16) = -1;
  *(_QWORD *)this = off_1E32DCCB0;
  v4 = (WTF *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (*v5 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v5;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaKeyGenParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v30;
  unint64_t v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  int v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;

  v35 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v33);
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v7);
    else
      *(_DWORD *)v33 -= 2;
  }
  if (*((_DWORD *)v35 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v35, "name", 5, "RsaKeyGenParams", 16, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 56) = 1;
    return result;
  }
  v31 = v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v36 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
    v12 = v36;
    if (hasExceptionsAfterHandlingTraps)
    {
      v25 = 1;
      v34 = 1;
      v36 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v30);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      *(_DWORD *)(a3 + 56) = 1;
      goto LABEL_40;
    }
  }
  else
  {
    v12 = v36;
  }
  v34 = 0;
  v33 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = (WTF::StringImpl *)v31;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v31);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35))
    goto LABEL_33;
  if (v15 == 10)
  {
    v16 = "modulusLength";
    v17 = "unsigned long";
    v18 = (int)a2;
    v19 = 14;
    v20 = 14;
LABEL_32:
    WebCore::throwRequiredMemberTypeError(v18, (int)&v35, v16, v19, "RsaKeyGenParams", 16, v17, v20);
LABEL_33:
    v25 = 0;
    *(_DWORD *)(a3 + 56) = 1;
    goto LABEL_40;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v15, &v31);
  v21 = v31;
  if (HIDWORD(v31))
    goto LABEL_33;
  WTF::AtomStringImpl::addLiteral();
  v22 = (WTF::StringImpl *)v31;
  v24 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v31);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35))
    goto LABEL_33;
  if (v24 == 10)
  {
    v16 = "publicExponent";
    v17 = "Uint8Array";
    v18 = (int)a2;
    v19 = 15;
    v20 = 11;
    goto LABEL_32;
  }
  WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>(v24, (uint64_t)&v31);
  v26 = v32;
  if (v32)
  {
    *(_DWORD *)(a3 + 56) = 1;
    if ((_DWORD)v26 == -1)
      goto LABEL_39;
  }
  else
  {
    v27 = v31;
    v31 = 0;
    if (v12)
      *(_DWORD *)v12 += 2;
    *(_QWORD *)a3 = off_1E32DCCB0;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 24) = v21;
    *(_QWORD *)(a3 + 32) = v27;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_DWORD *)(a3 + 56) = 0;
  }
  ((void (*)(WTF::StringImpl **, unint64_t *))off_1E32DCCC8[v26])(&v36, &v31);
LABEL_39:
  v25 = 0;
LABEL_40:
  result = ((uint64_t (*)(unint64_t *, WTF::StringImpl **))off_1E32DAE20[v25])(&v31, &v33);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v28);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmRsaKeyGenParams::~CryptoAlgorithmRsaKeyGenParams(WebCore::CryptoAlgorithmRsaKeyGenParams *this, void *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E32DCCB0;
  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v4;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = off_1E32DCCB0;
  v3 = (WTF *)*((_QWORD *)this + 5);
  if (v3)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v4;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaOaepParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSArrayBufferView *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  uint64_t (*v19)();
  int v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v29;
  int v30;
  void (**v31)(WebCore::CryptoAlgorithmParameters *__hidden);
  WTF::StringImpl *v32;
  char v33;
  _BYTE v34[8];
  int v35;
  char v36;
  WTF *v37;
  uint64_t v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v39 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v31 = off_1E32DCCE8;
    v32 = 0;
    v34[0] = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a3 + 64) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v31 = off_1E32DCCE8;
  v32 = 0;
  v34[0] = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v44);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v7);
    else
      *(_DWORD *)v44 -= 2;
  }
  if (*((_DWORD *)v39 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v39))
    goto LABEL_11;
  if (v8 != 10)
  {
    v44 = (WTF::StringImpl *)v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v44, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v40;
        if (hasExceptionsAfterHandlingTraps)
        {
          v30 = 1;
          v40 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          v23 = 1;
          v24 = 1;
          goto LABEL_61;
        }
      }
      else
      {
        v11 = v40;
      }
      v30 = 0;
      v29 = 0;
      v12 = v32;
      v32 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = v44;
      v15 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v44);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v39 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
      {
        v24 = 0;
        v23 = 1;
LABEL_61:
        *(_DWORD *)(a3 + 64) = v23;
LABEL_63:
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v24])(&v44, &v29);
        goto LABEL_64;
      }
      if (v15 == (JSC::JSArrayBufferView *)10)
      {
LABEL_54:
        v21 = v32;
        if (v32)
          *(_DWORD *)v32 += 2;
        *(_BYTE *)(a3 + 16) = v33;
        *(_QWORD *)a3 = off_1E32DCCE8;
        *(_QWORD *)(a3 + 8) = v21;
        *(_BYTE *)(a3 + 24) = 0;
        *(_BYTE *)(a3 + 40) = 0;
        if (v36)
        {
          *(_DWORD *)(a3 + 32) = -1;
          v22 = v35;
          if (v35 != -1)
          {
            ((void (*)(WTF::StringImpl **, uint64_t, _BYTE *))off_1E32DCD10[v35])(&v44, a3 + 24, v34);
            *(_DWORD *)(a3 + 32) = v22;
          }
          *(_BYTE *)(a3 + 40) = 1;
        }
        v23 = 0;
        v24 = 0;
        *(_QWORD *)(a3 + 48) = v37;
        v25 = v38;
        v37 = 0;
        v38 = 0;
        *(_QWORD *)(a3 + 56) = v25;
        goto LABEL_61;
      }
      v43 = a2[7];
      v16 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped((uint64_t)v43, (uint64_t)v15);
      if (v16)
      {
        *(_DWORD *)v16 += 2;
        v41 = 1;
        v40 = 0;
        v45 = v16;
        v46 = 1;
        v47 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v42);
        v17 = v47;
        if (!v47)
        {
          v18 = v46;
          LOBYTE(v40) = 0;
          v41 = -1;
          if (v46 == -1)
          {
            if (v36)
            {
              if (v35 == -1)
              {
LABEL_50:
                v20 = 1;
                v17 = v47;
LABEL_51:
                if (v17 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DCD30[v17])(&v40, &v45);
                if (!v20)
                {
                  v24 = 0;
                  goto LABEL_63;
                }
                goto LABEL_54;
              }
              ((void (*)(JSC::VM **, _BYTE *))off_1E32DCD00[v35])(&v43, v34);
              v35 = -1;
LABEL_48:
              if (v41 != -1)
                ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E32DCD00[v41])(&v43, &v40);
              goto LABEL_50;
            }
            v34[0] = 0;
            v35 = -1;
LABEL_47:
            v36 = 1;
            goto LABEL_48;
          }
LABEL_36:
          v19 = off_1E32DCD10[v18];
          ((void (*)(JSC::VM **, WTF::StringImpl **, WTF::StringImpl **))v19)(&v43, &v40, &v45);
          v41 = v18;
          if (v36)
          {
            v43 = (JSC::VM *)v34;
            ((void (*)(JSC::VM **, _BYTE *, WTF::StringImpl **))off_1E32DCD20[v18])(&v43, v34, &v40);
            goto LABEL_48;
          }
          v34[0] = 0;
          v35 = -1;
          ((void (*)(JSC::VM **, _BYTE *, WTF::StringImpl **))v19)(&v43, v34, &v40);
          v35 = v18;
          goto LABEL_47;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v15, &v40);
        if (v40)
        {
          v18 = 0;
          v45 = v40;
          v46 = 0;
          v47 = 0;
          LOBYTE(v40) = 0;
          v41 = -1;
          goto LABEL_36;
        }
        JSC::throwTypeError();
        v17 = 1;
        v47 = 1;
      }
      v20 = 0;
      *(_DWORD *)(a3 + 64) = 1;
      goto LABEL_51;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v40 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v39, "name", 5, "RsaOaepParams", 14, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a3 + 64) = 1;
LABEL_64:
  v26 = v37;
  if (v37)
  {
    v37 = 0;
    LODWORD(v38) = 0;
    WTF::fastFree(v26, v7);
  }
  if (v36)
  {
    if (v35 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E32DCD00[v35])(&v44, v34);
    v35 = -1;
  }
  result = v32;
  v31 = off_1E3226840;
  v32 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmRsaOaepParams::~CryptoAlgorithmRsaOaepParams(WebCore::CryptoAlgorithmRsaOaepParams *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E32DCD00[v4])(&v6, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  char v6;

  v3 = (WTF *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v3, a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v4 = *((unsigned int *)this + 8);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, char *))off_1E32DCD00[v4])(&v6, (char *)this + 24);
    *((_DWORD *)this + 8) = -1;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::convertDictionary<WebCore::RsaOtherPrimesInfo>@<X0>(JSC::JSCell *this@<X1>, JSC::JSGlobalObject *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t Object;
  JSC::Structure *v7;
  JSC::SmallStrings *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t result;
  JSC::VM *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  int v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;

  v5 = *((_QWORD *)a2 + 7);
  v43 = (JSC::VM *)v5;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v7 = (JSC::Structure *)Object;
  v8 = (JSC::SmallStrings *)(v5 + 41968);
  JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v5 + 41968));
  v10 = JSC::JSObject::get(v7, a2, (unint64_t)v41);
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v9);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (*((_DWORD *)v43 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v10 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v43, "d", 2, "RsaOtherPrimesInfo", 19, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 24) = 1;
    return result;
  }
  v39 = (WTF::StringImpl *)v10;
  v12 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v10 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v10, a2);
      if (!v13)
        goto LABEL_16;
    }
    else if (!v13)
    {
LABEL_16:
      v37 = v13;
      goto LABEL_17;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v39, a2);
LABEL_17:
  if (!*((_DWORD *)v12 + 20))
  {
    v14 = v37;
    goto LABEL_19;
  }
  v14 = v37;
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v12))
  {
LABEL_19:
    v42 = 0;
    v41 = 0;
    JSC::SmallStrings::singleCharacterStringRep(v8);
    v15 = v39;
    v17 = JSC::JSObject::get(v7, a2, (unint64_t)v39);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
      goto LABEL_25;
    if (v17 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v43, "r", 2, "RsaOtherPrimesInfo", 19, "DOMString", 10);
LABEL_25:
      v18 = 0;
      v19 = 0;
      *(_DWORD *)(a3 + 24) = 1;
      goto LABEL_52;
    }
    v37 = (WTF::StringImpl *)v17;
    v20 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v37, a2);
LABEL_32:
      if (*((_DWORD *)v20 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
        v19 = v45;
        if (hasExceptionsAfterHandlingTraps)
        {
          v25 = 1;
          v40 = 1;
          v45 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v34);
            else
              *(_DWORD *)v19 -= 2;
          }
          v19 = 0;
          *(_DWORD *)(a3 + 24) = 1;
          goto LABEL_51;
        }
      }
      else
      {
        v19 = v45;
      }
      v40 = 0;
      v39 = 0;
      JSC::SmallStrings::singleCharacterStringRep(v8);
      v22 = v37;
      v24 = JSC::JSObject::get(v7, a2, (unint64_t)v37);
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v23);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
        goto LABEL_40;
      if (v24 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v43, "t", 2, "RsaOtherPrimesInfo", 19, "DOMString", 10);
LABEL_40:
        v25 = 0;
        *(_DWORD *)(a3 + 24) = 1;
LABEL_51:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v25])(&v37, &v39);
        v18 = 0;
        goto LABEL_52;
      }
      v45 = (WTF::StringImpl *)v24;
      v26 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v24 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v24 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, a2);
LABEL_47:
        if (*((_DWORD *)v26 + 20))
        {
          v36 = JSC::VM::hasExceptionsAfterHandlingTraps(v26);
          v28 = v44;
          if (v36)
          {
            v38 = 1;
            v44 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                WTF::StringImpl::destroy(v28, v35);
              else
                *(_DWORD *)v28 -= 2;
            }
            v29 = 1;
            v30 = 1;
            goto LABEL_50;
          }
        }
        else
        {
          v28 = v44;
        }
        v29 = 0;
        v30 = 0;
        v38 = 0;
        v37 = 0;
        *(_QWORD *)a3 = v19;
        *(_QWORD *)(a3 + 8) = v14;
        *(_QWORD *)(a3 + 16) = v28;
        v14 = 0;
        v19 = 0;
LABEL_50:
        *(_DWORD *)(a3 + 24) = v30;
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v29])(&v45, &v37);
        v25 = 0;
        goto LABEL_51;
      }
      v27 = *(WTF::StringImpl **)(v24 + 8);
      if ((v27 & 1) != 0)
      {
        v27 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v24, a2);
        if (!v27)
          goto LABEL_46;
      }
      else if (!v27)
      {
LABEL_46:
        v44 = v27;
        goto LABEL_47;
      }
      *(_DWORD *)v27 += 2;
      goto LABEL_46;
    }
    v21 = *(WTF::StringImpl **)(v17 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v17, a2);
      if (!v21)
        goto LABEL_31;
    }
    else if (!v21)
    {
LABEL_31:
      v45 = v21;
      goto LABEL_32;
    }
    *(_DWORD *)v21 += 2;
    goto LABEL_31;
  }
  v18 = 1;
  v42 = 1;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v32);
    else
      *(_DWORD *)v14 -= 2;
  }
  v14 = 0;
  v19 = 0;
  *(_DWORD *)(a3 + 24) = 1;
LABEL_52:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v18])(&v39, &v41);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      result = WTF::StringImpl::destroy(v14, v31);
      if (!v19)
        return result;
      goto LABEL_56;
    }
    *(_DWORD *)v14 -= 2;
  }
  if (!v19)
    return result;
LABEL_56:
  if (*(_DWORD *)v19 == 2)
    return WTF::StringImpl::destroy(v19, v31);
  *(_DWORD *)v19 -= 2;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::CryptoAlgorithmRsaPssParams>@<X0>(JSC::JSCell *this@<X1>, JSC::VM **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t result;
  JSC::VM *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  JSC::VM *v23;
  WTF::StringImpl *v24;
  unint64_t v25;

  v23 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_9;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_10;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, (unint64_t)v21);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v7);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v23 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  if (v8 == 10)
  {
LABEL_9:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v23, "name", 5, "RsaPssParams", 13, "DOMString", 10);
LABEL_10:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  v25 = v8;
  v10 = a2[7];
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v11 = *(WTF::StringImpl **)(v8 + 8);
    if ((v11 & 1) != 0)
    {
      v11 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v11)
        goto LABEL_16;
    }
    else if (!v11)
    {
LABEL_16:
      v24 = v11;
      goto LABEL_17;
    }
    *(_DWORD *)v11 += 2;
    goto LABEL_16;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v25, (JSC::JSGlobalObject *)a2);
LABEL_17:
  if (*((_DWORD *)v10 + 20))
  {
    v12 = v24;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    {
      v22 = 1;
      v24 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v20);
        else
          *(_DWORD *)v12 -= 2;
      }
      v12 = 0;
      v17 = 1;
      v16 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v12 = v24;
  }
  v22 = 0;
  v21 = 0;
  WTF::AtomStringImpl::addLiteral();
  v13 = (WTF::StringImpl *)v25;
  v15 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v25);
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v14);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!*((_DWORD *)v23 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) == 0)
  {
    if (v15 == 10)
    {
      WebCore::throwRequiredMemberTypeError((int)a2, (int)&v23, "saltLength", 11, "RsaPssParams", 13, "unsigned long", 14);
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v15, &v25);
      v18 = v25;
      if (!HIDWORD(v25))
      {
        if (v12)
          *(_DWORD *)v12 += 2;
        v17 = 0;
        v16 = 0;
        *(_QWORD *)a3 = off_1E32DCD50;
        *(_QWORD *)(a3 + 8) = v12;
        *(_QWORD *)(a3 + 24) = v18;
        goto LABEL_30;
      }
    }
  }
  v16 = 0;
  v17 = 1;
LABEL_30:
  *(_DWORD *)(a3 + 32) = v17;
  result = ((uint64_t (*)(unint64_t *, WTF::StringImpl **))off_1E32DAE20[v16])(&v25, &v21);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      return WTF::StringImpl::destroy(v12, v19);
    else
      *(_DWORD *)v12 -= 2;
  }
  return result;
}

void WebCore::CryptoAlgorithmRsaPssParams::~CryptoAlgorithmRsaPssParams(WebCore::CryptoAlgorithmRsaPssParams *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3226840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::JSRTCRtpReceiverOwner::~JSRTCRtpReceiverOwner(WebCore::JSRTCRtpReceiverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCRtpSFrameTransformOwner::~JSRTCRtpSFrameTransformOwner(WebCore::JSRTCRtpSFrameTransformOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCRtpScriptTransformOwner::~JSRTCRtpScriptTransformOwner(WebCore::JSRTCRtpScriptTransformOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCRtpScriptTransformerOwner::~JSRTCRtpScriptTransformerOwner(WebCore::JSRTCRtpScriptTransformerOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCRtpSenderOwner::~JSRTCRtpSenderOwner(WebCore::JSRTCRtpSenderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCRtpTransceiverOwner::~JSRTCRtpTransceiverOwner(WebCore::JSRTCRtpTransceiverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCSctpTransportOwner::~JSRTCSctpTransportOwner(WebCore::JSRTCSctpTransportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCSessionDescriptionOwner::~JSRTCSessionDescriptionOwner(WebCore::JSRTCSessionDescriptionOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRTCStatsReportOwner::~JSRTCStatsReportOwner(WebCore::JSRTCStatsReportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRangeOwner::~JSRangeOwner(WebCore::JSRangeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSReadableStreamOwner::~JSReadableStreamOwner(WebCore::JSReadableStreamOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSReadableStreamSinkOwner::~JSReadableStreamSinkOwner(WebCore::JSReadableStreamSinkOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSReadableStreamSourceOwner::~JSReadableStreamSourceOwner(WebCore::JSReadableStreamSourceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSRemotePlaybackOwner::~JSRemotePlaybackOwner(WebCore::JSRemotePlaybackOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSRemotePlaybackAvailabilityCallback::hasCallback(WebCore::JSRemotePlaybackAvailabilityCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSReportOwner::~JSReportOwner(WebCore::JSReportOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSReportBodyOwner::~JSReportBodyOwner(WebCore::JSReportBodyOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSReportingObserverOwner::~JSReportingObserverOwner(WebCore::JSReportingObserverOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSReportingObserverCallback::hasCallback(WebCore::JSReportingObserverCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSRequestAnimationFrameCallback::hasCallback(WebCore::JSRequestAnimationFrameCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSResizeObserverCallback::hasCallback(WebCore::JSResizeObserverCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSResizeObserverEntryOwner::~JSResizeObserverEntryOwner(WebCore::JSResizeObserverEntryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSResizeObserverSizeOwner::~JSResizeObserverSizeOwner(WebCore::JSResizeObserverSizeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::jsRTCRtpReceiverConstructorFunction_getCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::RTCRtpCapabilities *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v22;
  JSValue v23;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v25;
  uint64_t v26[4];
  char v27;
  uint64_t v28;
  int v29;
  _QWORD v30[4];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v22, this, v23);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 6);
  v26[0] = v8;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v10 = *(_DWORD **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      v30[0] = v10;
      goto LABEL_9;
    }
    *v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v26, this);
LABEL_9:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v11 = (WTF::StringImpl *)v30[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v29 = 1;
      v30[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v17 = 0;
      v20 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v11 = (WTF::StringImpl *)v30[0];
  }
  v29 = 0;
  v28 = 0;
  v25 = v11;
  if (*(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E89214);
  }
  v12 = *(_QWORD *)(v7 + 336);
  if (v12
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (v14 = *(_QWORD *)(v13 + 24)) != 0
    && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v15 + 296) + 32))(v26, *(_QWORD *)(v15 + 296), &v25);
    if (v27)
    {
      WebCore::IDLType<WebCore::RTCRtpCapabilities>::extractValueFromNullable((uint64_t)v30, v26);
      v17 = (uint64_t)WebCore::convertDictionaryToJS(this, this, (WebCore::JSDOMGlobalObject *)v30, v16);
      WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v30, v18);
      if (v27)
        WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v26, v6);
      goto LABEL_21;
    }
  }
  else
  {
    LOBYTE(v26[0]) = 0;
    v27 = 0;
  }
  v17 = 2;
LABEL_21:
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = 0;
LABEL_25:
  ((void (*)(uint64_t *, uint64_t *))off_1E32DAE20[v20])(v26, &v28);
  return v17;
}

uint64_t WebCore::IDLType<WebCore::RTCRtpCapabilities>::extractValueFromNullable(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;

  if (!*((_BYTE *)a2 + 32))
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_20;
  }
  v3 = result;
  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 27)
      goto LABEL_20;
    result = WTF::fastMalloc((WTF *)(32 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = result;
    v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v6 = *a2;
      v7 = *a2 + 32 * v5;
      do
      {
        v8 = *(_DWORD **)v6;
        if (*(_QWORD *)v6)
          *v8 += 2;
        *(_QWORD *)result = v8;
        v9 = *(_QWORD *)(v6 + 8);
        *(_DWORD *)(result + 15) = *(_DWORD *)(v6 + 15);
        *(_QWORD *)(result + 8) = v9;
        v10 = *(_DWORD **)(v6 + 24);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(result + 24) = v10;
        v6 += 32;
        result += 32;
      }
      while (v6 != v7);
    }
  }
  v11 = *((unsigned int *)a2 + 7);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 28) = v11;
  if (!(_DWORD)v11)
    return result;
  if (v11 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x194E8933CLL);
  }
  result = WTF::fastMalloc((WTF *)(8 * v11));
  *(_DWORD *)(v3 + 24) = v11;
  *(_QWORD *)(v3 + 16) = result;
  v12 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v12)
  {
    v13 = (_DWORD **)a2[2];
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      if (*v13)
        *v15 += 2;
      *(_QWORD *)result = v15;
      result += 8;
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  return result;
}

void WebCore::RTCRtpCapabilities::~RTCRtpCapabilities(WebCore::RTCRtpCapabilities *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 3);
  if ((_DWORD)v8)
  {
    v9 = *(WTF::StringImpl ***)this;
    v10 = 32 * v8;
    do
    {
      v11 = v9[3];
      v9[3] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *v9;
      *v9 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
  }
  v13 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v13, a2);
  }
}

_BYTE *WebCore::jsRTCRtpReceiverPrototypeFunction_getParameters(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v27 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "RTCRtpReceiver", "getParameters");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpReceiver::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpReceiver::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v27, "RTCRtpReceiver", "getParameters");
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  if (v11)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v11 + 16))(&v28);
    v5 = *((_QWORD *)this + 7);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
  }
  v13 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v14 = 8 * *(unsigned __int8 *)(v13 + 14);
  v15 = JSC::allocateCell<JSC::JSFinalObject>(v5, v14 + 16);
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v15 = v13 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  bzero((void *)(v15 + 16), v14);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>>::convert<WebCore::RTCRtpCodecParameters,0ul>((uint64_t)this, v12, (uint64_t)&v30);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_40;
  WTF::AtomStringImpl::addLiteral();
  v18 = v31;
  v31 = 0;
  v32 = v15;
  v33 = -1;
  v34 = 0x1000000;
  v35 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v18, v17, 0, (uint64_t)&v31);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>>::convert<WebCore::RTCRtpHeaderExtensionParameters,0ul>((uint64_t)this, v12, (unsigned int *)&v28);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_40;
  }
  WTF::AtomStringImpl::addLiteral();
  v21 = v31;
  v31 = 0;
  v32 = v15;
  v33 = -1;
  v34 = 0x1000000;
  v35 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v31);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = WebCore::convertDictionaryToJS((uint64_t)this, *(_QWORD *)(v12 + 656), (uint64_t *)&v29);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
  {
LABEL_40:
    v15 = 0;
  }
  else
  {
    WTF::AtomStringImpl::addLiteral();
    v24 = v31;
    v31 = 0;
    v32 = v15;
    v33 = -1;
    v34 = 0x1000000;
    v35 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v24, v23, 0, (uint64_t)&v31);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v28, v25);
  return (_BYTE *)v15;
}

_BYTE *WebCore::jsRTCRtpReceiverPrototypeFunction_getContributingSources(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  int v39;
  JSValue v40;
  void *v41;
  JSC::VM *v42;
  uint64_t v43;
  uint64_t *v44;
  WTF *v45;
  _QWORD *v47;
  JSC::VM *v48;
  WTF *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  WTF *v53;
  _OWORD v54[4];
  uint64_t v55;
  JSC::VM *v56;
  WTF *v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "RTCRtpReceiver", "getContributingSources");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpReceiver::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpReceiver::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "RTCRtpReceiver", "getContributingSources");
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  if (v11)
  {
    (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v11 + 24))(&v49);
    v5 = (JSC::VM *)*((_QWORD *)this + 7);
    v13 = HIDWORD(v50);
  }
  else
  {
    v13 = 0;
    v49 = 0;
    v50 = 0;
  }
  v56 = v5;
  v51 = 0;
  v52 = 0x800000000;
  v53 = (WTF *)((char *)v54 + 8);
  memset(v54, 0, sizeof(v54));
  v55 = 0;
  if (v13 >= 9)
  {
    v51 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v52) == 1;
    v13 = HIDWORD(v50);
    if (HIDWORD(v50))
      goto LABEL_17;
  }
  else if (v13)
  {
LABEL_17:
    v14 = 40 * v13;
    v15 = (double *)((char *)v49 + 16);
    do
    {
      v16 = v12;
      v17 = *((_QWORD *)this + 7);
      v18 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v19 = 8 * *(unsigned __int8 *)(v18 + 14);
      v20 = JSC::allocateCell<JSC::JSFinalObject>(v17, v19 + 16);
      v21 = *(_DWORD *)(v18 + 8);
      *(_DWORD *)v20 = v18 >> 4;
      *(_DWORD *)(v20 + 4) = v21;
      *(_QWORD *)(v20 + 8) = 0;
      bzero((void *)(v20 + 16), v19);
      if (*(_BYTE *)(v17 + 755))
        __dmb(0xAu);
      if (*((_BYTE *)v15 + 16))
      {
        v22 = v15[1];
        if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v23 = (int)v22, v22 == (double)(int)v23)
          && ((_DWORD)v23 || (*(_QWORD *)&v22 & 0x8000000000000000) == 0))
        {
          v24 = v23 | 0xFFFE000000000000;
        }
        else
        {
          v24 = *(_QWORD *)&v22 + 0x2000000000000;
        }
        if (*(_DWORD *)(v17 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) != 0)
          goto LABEL_77;
        WTF::AtomStringImpl::addLiteral();
        v25 = v57;
        v57 = 0;
        v58 = v20;
        v59 = -1;
        v60 = 0x1000000;
        v61 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v25, v24, 0, (uint64_t)&v57);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v26);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      v27 = *((_QWORD *)v15 - 1);
      if ((int)v27 < 0)
        v28 = COERCE__INT64((double)v27) + 0x2000000000000;
      else
        v28 = *((_QWORD *)v15 - 1) | 0xFFFE000000000000;
      if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v29 = v57;
        v57 = 0;
        v58 = v20;
        v59 = -1;
        v60 = 0x1000000;
        v61 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v29, v28, 0, (uint64_t)&v57);
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v30);
          else
            *(_DWORD *)v29 -= 2;
        }
        v31 = (int)*(_QWORD *)v15 < 0
            ? COERCE__INT64((double)*(_QWORD *)v15) + 0x2000000000000
            : *(_QWORD *)v15 | 0xFFFE000000000000;
        if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v32 = v57;
          v57 = 0;
          v58 = v20;
          v59 = -1;
          v60 = 0x1000000;
          v61 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v32, v31, 0, (uint64_t)&v57);
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v33);
            else
              *(_DWORD *)v32 -= 2;
          }
          v34 = *(v15 - 2);
          if ((*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v35 = (int)v34, v34 == (double)(int)v35)
            && ((_DWORD)v35 || (*(_QWORD *)&v34 & 0x8000000000000000) == 0))
          {
            v36 = v35 | 0xFFFE000000000000;
          }
          else
          {
            v36 = *(_QWORD *)&v34 + 0x2000000000000;
          }
          if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v37 = v57;
            v57 = 0;
            v58 = v20;
            v59 = -1;
            v60 = 0x1000000;
            v61 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v37, v36, 0, (uint64_t)&v57);
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v38);
              else
                *(_DWORD *)v37 -= 2;
            }
            goto LABEL_55;
          }
        }
      }
LABEL_77:
      v20 = 0;
LABEL_55:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_93;
      v39 = v52;
      if ((_DWORD)v52 == HIDWORD(v52) || v53 != (WTF *)((char *)v54 + 8) && v53)
      {
        v40.super.isa = (Class)v20;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v52, v40) == 1)
          v51 = 1;
      }
      else
      {
        *((_QWORD *)v53 + v52) = v20;
        LODWORD(v52) = v39 + 1;
      }
      v15 += 5;
      v14 -= 40;
      v12 = v16;
    }
    while (v14);
  }
  if (v51)
  {
    JSC::throwOutOfMemoryError();
LABEL_93:
    v43 = 0;
    goto LABEL_82;
  }
  v57 = v53;
  LODWORD(v58) = v52;
  v42 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
    goto LABEL_93;
  v43 = JSC::constructArray();
LABEL_82:
  v44 = *(uint64_t **)&v54[0];
  if (*(_QWORD *)&v54[0])
  {
    v57 = (WTF *)&v52;
    v47 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v54[0], (uint64_t *)&v57);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v44, v47);
  }
  if (v53 != (WTF *)((char *)v54 + 8) && v53)
    WTF::fastFree(v53, v41);
  v45 = v49;
  if (v49)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v45, v41);
  }
  return (_BYTE *)v43;
}

_BYTE *WebCore::jsRTCRtpReceiverPrototypeFunction_getSynchronizationSources(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  JSValue v44;
  void *v45;
  JSC::VM *v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  _QWORD *v51;
  JSC::VM *v52;
  WTF *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  WTF *v57;
  _OWORD v58[4];
  uint64_t v59;
  JSC::VM *v60;
  WTF *v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v52 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v52, "RTCRtpReceiver", "getSynchronizationSources");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpReceiver::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpReceiver::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v52, "RTCRtpReceiver", "getSynchronizationSources");
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
  v12 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  if (v11)
  {
    (*(void (**)(WTF **__return_ptr))(*(_QWORD *)v11 + 32))(&v53);
    v5 = (JSC::VM *)*((_QWORD *)this + 7);
    v13 = HIDWORD(v54);
  }
  else
  {
    v13 = 0;
    v53 = 0;
    v54 = 0;
  }
  v60 = v5;
  v55 = 0;
  v56 = 0x800000000;
  v57 = (WTF *)((char *)v58 + 8);
  memset(v58, 0, sizeof(v58));
  v59 = 0;
  if (v13 >= 9)
  {
    v55 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v56) == 1;
    v13 = HIDWORD(v54);
    if (HIDWORD(v54))
      goto LABEL_17;
  }
  else if (v13)
  {
LABEL_17:
    v14 = 48 * v13;
    v15 = (char *)v53 + 41;
    do
    {
      v16 = v12;
      v17 = *((_QWORD *)this + 7);
      v18 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v19 = 8 * *(unsigned __int8 *)(v18 + 14);
      v20 = JSC::allocateCell<JSC::JSFinalObject>(v17, v19 + 16);
      v21 = *(_DWORD *)(v18 + 8);
      *(_DWORD *)v20 = v18 >> 4;
      *(_DWORD *)(v20 + 4) = v21;
      *(_QWORD *)(v20 + 8) = 0;
      bzero((void *)(v20 + 16), v19);
      if (*(_BYTE *)(v17 + 755))
        __dmb(0xAu);
      if (*(v15 - 9))
      {
        v22 = *(double *)(v15 - 17);
        if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v23 = (int)v22, v22 == (double)(int)v23)
          && ((_DWORD)v23 || (*(_QWORD *)&v22 & 0x8000000000000000) == 0))
        {
          v24 = v23 | 0xFFFE000000000000;
        }
        else
        {
          v24 = *(_QWORD *)&v22 + 0x2000000000000;
        }
        if (*(_DWORD *)(v17 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) != 0)
          goto LABEL_88;
        WTF::AtomStringImpl::addLiteral();
        v25 = v61;
        v61 = 0;
        v62 = v20;
        v63 = -1;
        v64 = 0x1000000;
        v65 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v25, v24, 0, (uint64_t)&v61);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v26);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      v27 = *(_QWORD *)(v15 - 33);
      if ((int)v27 < 0)
        v28 = COERCE__INT64((double)v27) + 0x2000000000000;
      else
        v28 = *(_QWORD *)(v15 - 33) | 0xFFFE000000000000;
      if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v29 = v61;
        v61 = 0;
        v62 = v20;
        v63 = -1;
        v64 = 0x1000000;
        v65 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v29, v28, 0, (uint64_t)&v61);
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v30);
          else
            *(_DWORD *)v29 -= 2;
        }
        v31 = *(_QWORD *)(v15 - 25);
        v32 = (int)v31 < 0
            ? COERCE__INT64((double)v31) + 0x2000000000000
            : *(_QWORD *)(v15 - 25) | 0xFFFE000000000000;
        if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v33 = v61;
          v61 = 0;
          v62 = v20;
          v63 = -1;
          v64 = 0x1000000;
          v65 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v33, v32, 0, (uint64_t)&v61);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v34);
            else
              *(_DWORD *)v33 -= 2;
          }
          v35 = *(double *)(v15 - 41);
          if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v36 = (int)v35, v35 == (double)(int)v36)
            && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
          {
            v37 = v36 | 0xFFFE000000000000;
          }
          else
          {
            v37 = *(_QWORD *)&v35 + 0x2000000000000;
          }
          if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v38 = v61;
            v61 = 0;
            v62 = v20;
            v63 = -1;
            v64 = 0x1000000;
            v65 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v38, v37, 0, (uint64_t)&v61);
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v39);
              else
                *(_DWORD *)v38 -= 2;
            }
            if (!*v15)
              goto LABEL_63;
            v40 = *(v15 - 1) ? 7 : 6;
            if (!*(_DWORD *)(v17 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17) & 1) == 0)
            {
              WTF::AtomStringImpl::addLiteral();
              v41 = v61;
              v61 = 0;
              v62 = v20;
              v63 = -1;
              v64 = 0x1000000;
              v65 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v20, (JSC::VM *)v17, (unint64_t)v41, v40, 0, (uint64_t)&v61);
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v42);
                else
                  *(_DWORD *)v41 -= 2;
              }
              goto LABEL_63;
            }
          }
        }
      }
LABEL_88:
      v20 = 0;
LABEL_63:
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        goto LABEL_104;
      v43 = v56;
      if ((_DWORD)v56 == HIDWORD(v56) || v57 != (WTF *)((char *)v58 + 8) && v57)
      {
        v44.super.isa = (Class)v20;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v56, v44) == 1)
          v55 = 1;
      }
      else
      {
        *((_QWORD *)v57 + v56) = v20;
        LODWORD(v56) = v43 + 1;
      }
      v15 += 48;
      v14 -= 48;
      v12 = v16;
    }
    while (v14);
  }
  if (v55)
  {
    JSC::throwOutOfMemoryError();
LABEL_104:
    v47 = 0;
    goto LABEL_93;
  }
  v61 = v57;
  LODWORD(v62) = v56;
  v46 = *(JSC::VM **)(v12 + 56);
  if (*((_DWORD *)v46 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v46) & 1) != 0)
    goto LABEL_104;
  v47 = JSC::constructArray();
LABEL_93:
  v48 = *(uint64_t **)&v58[0];
  if (*(_QWORD *)&v58[0])
  {
    v61 = (WTF *)&v56;
    v51 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v58[0], (uint64_t *)&v61);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v48, v51);
  }
  if (v57 != (WTF *)((char *)v58 + 8) && v57)
    WTF::fastFree(v57, v45);
  v49 = v53;
  if (v53)
  {
    v53 = 0;
    LODWORD(v54) = 0;
    WTF::fastFree(v49, v45);
  }
  return (_BYTE *)v47;
}

unint64_t WebCore::jsRTCRtpReceiverPrototypeFunction_getStats(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  objc_class *v29;
  WTF::StringImpl *v30;
  WebCore::DOMGuardedObject *v31;
  WTF::StringImpl *v32;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8A714);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v31 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCRtpReceiver::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCRtpReceiver::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_39:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpReceiver", "getStats", v16);
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 48);
    if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24);
      v14 = v31;
      if (!v31)
        goto LABEL_34;
    }
    else
    {
      v32 = 0;
      WebCore::DeferredPromise::reject((uint64_t)v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v32, 0);
      v26 = v32;
      v32 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_34:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v32);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v32, v29, 0);
      v30 = v32;
      v32 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void WebCore::RTCRtpParameters::~RTCRtpParameters(WebCore::RTCRtpParameters *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 4) + 32);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 3);
      *(v5 - 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *((unsigned int *)this + 3);
  if ((_DWORD)v10)
  {
    v11 = *(WTF::StringImpl ***)this;
    v12 = 16 * v10;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  v14 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2);
  }
}

unint64_t WebCore::jsRTCRtpSFrameTransformPrototypeFunction_setEncryptionKey(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char **v24;
  BOOL v25;
  uint64_t v27;
  objc_class *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8AA88);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v31 = v15;
  v21 = *((_QWORD *)a2 + 5);
  if ((v21 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v22 = *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C);
  v23 = *(_DWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C) != 0;
  v24 = (char **)(16 * v22);
  if ((_DWORD)v22)
    v25 = v24 == &WebCore::JSRTCRtpSFrameTransform::s_info;
  else
    v25 = 1;
  if (!v25)
  {
    do
    {
      v24 = (char **)v24[2];
      v23 = v24 != 0;
    }
    while (v24 != &WebCore::JSRTCRtpSFrameTransform::s_info && v24 != 0);
  }
  if (!v23)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"SFrameTransform", "setEncryptionKey", v16);
    v31 = 0;
  }
  else
  {
    WebCore::JSRTCRtpSFrameTransform::setEncryptionKey(v21, this, (uint64_t)a2, &v31, v17, v18, v19, v20);
    v14 = v31;
    v31 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v29, 0);
      v30 = v31;
      v31 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21RTCRtpScriptTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E32DD4B0;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21RTCRtpScriptTransformENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WebCore::jsRTCRtpScriptTransformerPrototypeFunction_generateKeyFrame(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8AD7CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCRtpScriptTransformer::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCRtpScriptTransformer::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpScriptTransformer", "generateKeyFrame", v16);
    v27 = 0;
  }
  else
  {
    WebCore::RTCRtpScriptTransformer::generateKeyFrame(*(_QWORD **)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCRtpScriptTransformerPrototypeFunction_sendKeyFrameRequest(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8AFBCLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCRtpScriptTransformer::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCRtpScriptTransformer::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpScriptTransformer", "sendKeyFrameRequest", v16);
  }
  else
  {
    WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(*(_QWORD *)(v17 + 24), (uint64_t *)&v27);
    v14 = v27;
    if (!v27)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17RTCRtcpParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore31RTCRtpHeaderExtensionParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 16 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore21RTCRtpCodecParametersELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a2 + 32);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 3);
      *(v5 - 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::jsRTCRtpSenderConstructorFunction_getCapabilities(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::VM *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WebCore::RTCRtpCapabilities *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v22;
  JSValue v23;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v25;
  uint64_t v26[4];
  char v27;
  uint64_t v28;
  int v29;
  _QWORD v30[4];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v22, this, v23);
  }
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v5)
    return 10;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 6);
  v26[0] = v8;
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v8 + 5) == 2)
  {
    v10 = *(_DWORD **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
      if (!v10)
        goto LABEL_8;
    }
    else if (!v10)
    {
LABEL_8:
      v30[0] = v10;
      goto LABEL_9;
    }
    *v10 += 2;
    goto LABEL_8;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v26, this);
LABEL_9:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v11 = (WTF::StringImpl *)v30[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v29 = 1;
      v30[0] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v6);
        else
          *(_DWORD *)v11 -= 2;
      }
      v17 = 0;
      v20 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v11 = (WTF::StringImpl *)v30[0];
  }
  v29 = 0;
  v28 = 0;
  v25 = v11;
  if (*(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194E8B3ECLL);
  }
  v12 = *(_QWORD *)(v7 + 336);
  if (v12
    && (v13 = *(_QWORD *)(v12 + 8)) != 0
    && (v14 = *(_QWORD *)(v13 + 24)) != 0
    && (v15 = *(_QWORD *)(v14 + 8)) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(v15 + 296) + 40))(v26, *(_QWORD *)(v15 + 296), &v25);
    if (v27)
    {
      WebCore::IDLType<WebCore::RTCRtpCapabilities>::extractValueFromNullable((uint64_t)v30, v26);
      v17 = (uint64_t)WebCore::convertDictionaryToJS(this, this, (WebCore::JSDOMGlobalObject *)v30, v16);
      WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v30, v18);
      if (v27)
        WebCore::RTCRtpCapabilities::~RTCRtpCapabilities((WebCore::RTCRtpCapabilities *)v26, v6);
      goto LABEL_21;
    }
  }
  else
  {
    LOBYTE(v26[0]) = 0;
    v27 = 0;
  }
  v17 = 2;
LABEL_21:
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v6);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = 0;
LABEL_25:
  ((void (*)(uint64_t *, uint64_t *))off_1E32DAE20[v20])(v26, &v28);
  return v17;
}

unsigned __int8 *WebCore::jsRTCRtpSenderPrototypeFunction_getParameters(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  char *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  char *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  size_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  double v87;
  uint64_t v88;
  unint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  int v96;
  unsigned __int8 *v97;
  unsigned int v98;
  unsigned int v99;
  JSValue v100;
  void *v101;
  JSC::VM *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl **v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF *v116;
  WTF::StringImpl *v117;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD *v122;
  JSC::VM *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  JSC::VM *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  WTF::StringImpl *v132[2];
  unint64_t v133[2];
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF *v136;
  uint64_t *v137[10];
  WTF *v138;
  unint64_t v139;
  int v140;
  int v141;
  uint64_t v142;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v128 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v128, "RTCRtpSender", "getParameters");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpSender::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpSender::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v128, "RTCRtpSender", "getParameters");
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 64);
  if (v12)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v12 + 24))(&v129);
    v5 = *((_QWORD *)this + 7);
  }
  else
  {
    *(_OWORD *)v132 = 0u;
    *(_OWORD *)v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
  }
  v13 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v14 = 8 * *(unsigned __int8 *)(v13 + 14);
  v15 = JSC::allocateCell<JSC::JSFinalObject>(v5, v14 + 16);
  v16 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v15 = v13 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 8) = 0;
  bzero((void *)(v15 + 16), v14);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>>::convert<WebCore::RTCRtpCodecParameters,0ul>((uint64_t)this, v11, (uint64_t)&v131);
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    goto LABEL_249;
  WTF::AtomStringImpl::addLiteral();
  v18 = v134;
  v134 = 0;
  v135 = v15;
  v136 = (WTF *)0x1000000FFFFFFFFLL;
  v137[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v18, v17, 0, (uint64_t)&v134);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  v20 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>>::convert<WebCore::RTCRtpHeaderExtensionParameters,0ul>((uint64_t)this, v11, (unsigned int *)&v129);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_249;
  }
  WTF::AtomStringImpl::addLiteral();
  v21 = v134;
  v134 = 0;
  v135 = v15;
  v136 = (WTF *)0x1000000FFFFFFFFLL;
  v137[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v21, v20, 0, (uint64_t)&v134);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  v23 = WebCore::convertDictionaryToJS((uint64_t)this, *(_QWORD *)(v11 + 656), (uint64_t *)&v130);
  if (*(_DWORD *)(v5 + 80))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_249;
  }
  WTF::AtomStringImpl::addLiteral();
  v24 = v134;
  v134 = 0;
  v135 = v15;
  v136 = (WTF *)0x1000000FFFFFFFFLL;
  v137[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v24, v23, 0, (uint64_t)&v134);
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v25);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (BYTE4(v133[1]))
  {
    v26 = WebCore::convertEnumerationToJS<WebCore::RTCDegradationPreference>(*((_QWORD *)this + 7), (WTF::StringImpl *)LODWORD(v133[1]));
    if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
      goto LABEL_249;
    WTF::AtomStringImpl::addLiteral();
    v27 = v134;
    v134 = 0;
    v135 = v15;
    v136 = (WTF *)0x1000000FFFFFFFFLL;
    v137[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v15, (JSC::VM *)v5, (unint64_t)v27, v26, 0, (uint64_t)&v134);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  v126 = (JSC::VM *)*((_QWORD *)this + 7);
  v137[9] = (uint64_t *)v126;
  LOBYTE(v134) = 0;
  v135 = 0x800000000;
  memset(v137, 0, 72);
  v136 = (WTF *)&v137[1];
  v29 = HIDWORD(v133[0]);
  if (HIDWORD(v133[0]) >= 9)
  {
    LOBYTE(v134) = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v135) == 1;
    v29 = HIDWORD(v133[0]);
  }
  v123 = (JSC::VM *)v5;
  v124 = (unsigned __int8 *)v15;
  if (v29)
  {
    v30 = 0;
    v125 = 72 * v29;
    v31 = v132[1];
    v127 = v11;
    do
    {
      v32 = *((_QWORD *)this + 7);
      v33 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v34 = 8 * *(unsigned __int8 *)(v33 + 14);
      v35 = JSC::allocateCell<JSC::JSFinalObject>(v32, v34 + 16);
      v36 = *(_DWORD *)(v33 + 8);
      *(_DWORD *)v35 = v33 >> 4;
      *(_DWORD *)(v35 + 4) = v36;
      *(_QWORD *)(v35 + 8) = 0;
      bzero((void *)(v35 + 16), v34);
      if (*(_BYTE *)(v32 + 755))
        __dmb(0xAu);
      v37 = *(_QWORD *)((char *)v31 + v30);
      if (!v37)
        goto LABEL_50;
      v38 = *((_QWORD *)this + 7);
      v39 = *(_DWORD *)(v37 + 4);
      if (v39)
      {
        if (v39 != 1)
          goto LABEL_43;
        v97 = *(unsigned __int8 **)(v37 + 8);
        if ((*(_BYTE *)(v37 + 16) & 4) != 0)
        {
          v98 = *v97;
        }
        else
        {
          v99 = *(unsigned __int16 *)v97;
          if (v99 > 0xFF)
          {
LABEL_43:
            v40 = *(_QWORD *)(v38 + 64760);
            if (!v40 || v37 != *(_QWORD *)(v40 + 8))
              v40 = JSC::jsStringWithCacheSlowCase();
            goto LABEL_46;
          }
          v98 = v99;
        }
        v40 = *(_QWORD *)(v38 + 8 * v98 + 42216);
      }
      else
      {
        v40 = *(_QWORD *)(v38 + 41968);
      }
LABEL_46:
      if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
        goto LABEL_180;
      WTF::AtomStringImpl::addLiteral();
      v41 = v138;
      v138 = 0;
      v139 = v35;
      v140 = -1;
      v141 = 0x1000000;
      v142 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v41, v40, 0, (uint64_t)&v138);
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v42);
        else
          *(_DWORD *)v41 -= 2;
      }
LABEL_50:
      if (*((_BYTE *)v31 + v30 + 40))
        v43 = 7;
      else
        v43 = 6;
      if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
        goto LABEL_180;
      WTF::AtomStringImpl::addLiteral();
      v44 = v138;
      v138 = 0;
      v139 = v35;
      v140 = -1;
      v141 = 0x1000000;
      v142 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v44, v43, 0, (uint64_t)&v138);
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v45);
        else
          *(_DWORD *)v44 -= 2;
      }
      v46 = (char *)v31 + v30;
      if (*((_BYTE *)v31 + v30 + 36))
      {
        v47 = WebCore::convertEnumerationToJS<WebCore::RTCDtxStatus>(*((_QWORD *)this + 7), (WTF::StringImpl *)*((unsigned int *)v46 + 8));
        if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
          goto LABEL_180;
        WTF::AtomStringImpl::addLiteral();
        v48 = v138;
        v138 = 0;
        v139 = v35;
        v140 = -1;
        v141 = 0x1000000;
        v142 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v48, v47, 0, (uint64_t)&v138);
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v49);
          else
            *(_DWORD *)v48 -= 2;
        }
      }
      v50 = *((unsigned int *)v46 + 6);
      v51 = *((_QWORD *)this + 7);
      v52 = JSC::StructureCache::emptyObjectStructureForPrototype();
      v53 = 8 * *(unsigned __int8 *)(v52 + 14);
      v54 = JSC::allocateCell<JSC::JSFinalObject>(v51, v53 + 16);
      v55 = *(_DWORD *)(v52 + 8);
      *(_DWORD *)v54 = v52 >> 4;
      *(_DWORD *)(v54 + 4) = v55;
      *(_QWORD *)(v54 + 8) = 0;
      bzero((void *)(v54 + 16), v53);
      if (*(_BYTE *)(v51 + 755))
      {
        __dmb(0xAu);
        if ((v50 & 0x80000000) == 0)
        {
LABEL_64:
          v56 = v50 | 0xFFFE000000000000;
          goto LABEL_65;
        }
      }
      else if ((v50 & 0x80000000) == 0)
      {
        goto LABEL_64;
      }
      v56 = COERCE__INT64((double)v50) + 0x2000000000000;
LABEL_65:
      if (*(_DWORD *)(v51 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v51) & 1) != 0)
      {
        v54 = 0;
      }
      else
      {
        WTF::AtomStringImpl::addLiteral();
        v57 = v138;
        v138 = 0;
        v139 = v54;
        v140 = -1;
        v141 = 0x1000000;
        v142 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v54, (JSC::VM *)v51, (unint64_t)v57, v56, 0, (uint64_t)&v138);
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v58);
          else
            *(_DWORD *)v57 -= 2;
        }
      }
      if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
      {
LABEL_170:
        v35 = 0;
        v11 = v127;
        goto LABEL_121;
      }
      WTF::AtomStringImpl::addLiteral();
      v59 = v138;
      v138 = 0;
      v139 = v35;
      v140 = -1;
      v141 = 0x1000000;
      v142 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v59, v54, 0, (uint64_t)&v138);
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v60);
        else
          *(_DWORD *)v59 -= 2;
      }
      v61 = *(_QWORD *)((char *)v31 + v30 + 48);
      if ((v61 & 0x80000000) != 0)
        v62 = COERCE__INT64((double)v61) + 0x2000000000000;
      else
        v62 = *(_QWORD *)((char *)v31 + v30 + 48) | 0xFFFE000000000000;
      v11 = v127;
      if (!*(_DWORD *)(v32 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v63 = v138;
        v138 = 0;
        v139 = v35;
        v140 = -1;
        v141 = 0x1000000;
        v142 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v63, v62, 0, (uint64_t)&v138);
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v64);
          else
            *(_DWORD *)v63 -= 2;
        }
        v65 = *(_QWORD *)((char *)v31 + v30 + 56);
        v66 = (v65 & 0x80000000) != 0
            ? COERCE__INT64((double)v65) + 0x2000000000000
            : *(_QWORD *)((char *)v31 + v30 + 56) | 0xFFFE000000000000;
        if (!*(_DWORD *)(v32 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) == 0)
        {
          WTF::AtomStringImpl::addLiteral();
          v67 = v138;
          v138 = 0;
          v139 = v35;
          v140 = -1;
          v141 = 0x1000000;
          v142 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v67, v66, 0, (uint64_t)&v138);
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
              WTF::StringImpl::destroy(v67, v68);
            else
              *(_DWORD *)v67 -= 2;
          }
          v69 = (char *)v31 + v30;
          if (*((_BYTE *)v31 + v30 + 43))
          {
            v70 = WebCore::convertEnumerationToJS<WebCore::RTCPriorityType>(*((_QWORD *)this + 7), (WTF::StringImpl *)v69[42]);
            if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
              goto LABEL_180;
            WTF::AtomStringImpl::addLiteral();
            v71 = v138;
            v138 = 0;
            v139 = v35;
            v140 = -1;
            v141 = 0x1000000;
            v142 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v71, v70, 0, (uint64_t)&v138);
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v72);
              else
                *(_DWORD *)v71 -= 2;
            }
          }
          v73 = WebCore::convertEnumerationToJS<WebCore::RTCPriorityType>(*((_QWORD *)this + 7), (WTF::StringImpl *)v69[41]);
          if (!*(_DWORD *)(v32 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) == 0)
          {
            WTF::AtomStringImpl::addLiteral();
            v74 = v138;
            v138 = 0;
            v139 = v35;
            v140 = -1;
            v141 = 0x1000000;
            v142 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v74, v73, 0, (uint64_t)&v138);
            if (v74)
            {
              if (*(_DWORD *)v74 == 2)
                WTF::StringImpl::destroy(v74, v75);
              else
                *(_DWORD *)v74 -= 2;
            }
            v76 = *(unsigned int *)((char *)v31 + v30 + 16);
            v77 = *((_QWORD *)this + 7);
            v78 = JSC::StructureCache::emptyObjectStructureForPrototype();
            v79 = 8 * *(unsigned __int8 *)(v78 + 14);
            v80 = JSC::allocateCell<JSC::JSFinalObject>(v77, v79 + 16);
            v81 = *(_DWORD *)(v78 + 8);
            *(_DWORD *)v80 = v78 >> 4;
            *(_DWORD *)(v80 + 4) = v81;
            *(_QWORD *)(v80 + 8) = 0;
            bzero((void *)(v80 + 16), v79);
            if (*(_BYTE *)(v77 + 755))
            {
              __dmb(0xAu);
              if ((v76 & 0x80000000) != 0)
                goto LABEL_166;
LABEL_96:
              v82 = v76 | 0xFFFE000000000000;
            }
            else
            {
              if ((v76 & 0x80000000) == 0)
                goto LABEL_96;
LABEL_166:
              v82 = COERCE__INT64((double)v76) + 0x2000000000000;
            }
            if (*(_DWORD *)(v77 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v77) & 1) != 0)
            {
              v80 = 0;
            }
            else
            {
              WTF::AtomStringImpl::addLiteral();
              v83 = v138;
              v138 = 0;
              v139 = v80;
              v140 = -1;
              v141 = 0x1000000;
              v142 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v80, (JSC::VM *)v77, (unint64_t)v83, v82, 0, (uint64_t)&v138);
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v84);
                else
                  *(_DWORD *)v83 -= 2;
              }
            }
            if (*(_DWORD *)(v32 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) != 0)
              goto LABEL_170;
            WTF::AtomStringImpl::addLiteral();
            v85 = v138;
            v138 = 0;
            v139 = v35;
            v140 = -1;
            v141 = 0x1000000;
            v142 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v85, v80, 0, (uint64_t)&v138);
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
                WTF::StringImpl::destroy(v85, v86);
              else
                *(_DWORD *)v85 -= 2;
            }
            v87 = *(double *)((char *)v31 + v30 + 64);
            if ((*(_QWORD *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v88 = (int)v87, v87 == (double)(int)v88)
              && ((_DWORD)v88 || (*(_QWORD *)&v87 & 0x8000000000000000) == 0))
            {
              v89 = v88 | 0xFFFE000000000000;
            }
            else
            {
              v89 = *(_QWORD *)&v87 + 0x2000000000000;
            }
            v11 = v127;
            if (!*(_DWORD *)(v32 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) == 0)
            {
              WTF::AtomStringImpl::addLiteral();
              v90 = v138;
              v138 = 0;
              v139 = v35;
              v140 = -1;
              v141 = 0x1000000;
              v142 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v90, v89, 0, (uint64_t)&v138);
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                  WTF::StringImpl::destroy(v90, v91);
                else
                  *(_DWORD *)v90 -= 2;
              }
              v92 = *(_QWORD *)((char *)v31 + v30 + 8);
              v93 = (v92 & 0x80000000) != 0
                  ? COERCE__INT64((double)v92) + 0x2000000000000
                  : *(_QWORD *)((char *)v31 + v30 + 8) | 0xFFFE000000000000;
              if (!*(_DWORD *)(v32 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32) & 1) == 0)
              {
                WTF::AtomStringImpl::addLiteral();
                v94 = v138;
                v138 = 0;
                v139 = v35;
                v140 = -1;
                v141 = 0x1000000;
                v142 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v35, (JSC::VM *)v32, (unint64_t)v94, v93, 0, (uint64_t)&v138);
                if (v94)
                {
                  if (*(_DWORD *)v94 == 2)
                    WTF::StringImpl::destroy(v94, v95);
                  else
                    *(_DWORD *)v94 -= 2;
                }
                goto LABEL_121;
              }
            }
          }
        }
      }
LABEL_180:
      v35 = 0;
LABEL_121:
      if (*((_DWORD *)v126 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v126) & 1) != 0)
        goto LABEL_243;
      v96 = v135;
      if ((_DWORD)v135 == HIDWORD(v135) || v136 != (WTF *)&v137[1] && v136)
      {
        v100.super.isa = (Class)v35;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v135, v100) == 1)
          LOBYTE(v134) = 1;
      }
      else
      {
        *((_QWORD *)v136 + v135) = v35;
        LODWORD(v135) = v96 + 1;
      }
      v30 += 72;
    }
    while (v125 != v30);
  }
  if ((_BYTE)v134)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v138 = v136;
    LODWORD(v139) = v135;
    v102 = *(JSC::VM **)(v11 + 56);
    if (!*((_DWORD *)v102 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v102) & 1) == 0)
    {
      v103 = JSC::constructArray();
      goto LABEL_187;
    }
  }
LABEL_243:
  v103 = 0;
LABEL_187:
  v104 = v124;
  v105 = v137[0];
  if (v137[0])
  {
    v138 = (WTF *)&v135;
    v122 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(v137[0], (uint64_t *)&v138);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v105, v122);
  }
  if (v136 != (WTF *)&v137[1] && v136)
    WTF::fastFree(v136, v101);
  if (*((_DWORD *)v123 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v123) & 1) != 0)
    goto LABEL_249;
  WTF::AtomStringImpl::addLiteral();
  v106 = v134;
  v134 = 0;
  v135 = (uint64_t)v124;
  v136 = (WTF *)0x1000000FFFFFFFFLL;
  v137[0] = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v124, v123, (unint64_t)v106, v103, 0, (uint64_t)&v134);
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, v107);
    else
      *(_DWORD *)v106 -= 2;
  }
  v108 = *((_QWORD *)this + 7);
  if (!v132[0] || (v109 = *((_DWORD *)v132[0] + 1)) == 0)
  {
    v110 = *(_QWORD *)(v108 + 41968);
    goto LABEL_200;
  }
  if (v109 == 1)
  {
    v119 = (unsigned __int8 *)*((_QWORD *)v132[0] + 1);
    if ((*((_BYTE *)v132[0] + 16) & 4) != 0)
    {
      v120 = *v119;
    }
    else
    {
      v121 = *(unsigned __int16 *)v119;
      if (v121 > 0xFF)
        goto LABEL_197;
      v120 = v121;
    }
    v110 = *(_QWORD *)(v108 + 8 * v120 + 42216);
    goto LABEL_200;
  }
LABEL_197:
  v110 = *(_QWORD *)(v108 + 64760);
  if (!v110 || v132[0] != *(WTF::StringImpl **)(v110 + 8))
    v110 = JSC::jsStringWithCacheSlowCase();
LABEL_200:
  if (!*((_DWORD *)v123 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v123) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v111 = v134;
    v134 = 0;
    v135 = (uint64_t)v124;
    v136 = (WTF *)0x1000000FFFFFFFFLL;
    v137[0] = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v124, v123, (unint64_t)v111, v110, 0, (uint64_t)&v134);
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v112);
      else
        *(_DWORD *)v111 -= 2;
    }
    goto LABEL_204;
  }
LABEL_249:
  v104 = 0;
LABEL_204:
  if (HIDWORD(v133[0]))
  {
    v113 = (WTF::StringImpl **)v132[1];
    v114 = 72 * HIDWORD(v133[0]);
    do
    {
      v115 = *v113;
      *v113 = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, v112);
        else
          *(_DWORD *)v115 -= 2;
      }
      v113 += 9;
      v114 -= 72;
    }
    while (v114);
  }
  v116 = v132[1];
  if (v132[1])
  {
    v132[1] = 0;
    LODWORD(v133[0]) = 0;
    WTF::fastFree(v116, v112);
  }
  v117 = v132[0];
  v132[0] = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, v112);
    else
      *(_DWORD *)v117 -= 2;
  }
  WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v129, v112);
  return v104;
}

unint64_t WebCore::jsRTCRtpSenderPrototypeFunction_setParameters(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  JSC::JSCell *v25;
  uint64_t Object;
  JSC::Structure *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v49;
  JSValue v50;
  int i;
  unsigned int v52;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  int v56;
  uint64_t v57;
  JSC::JSCell *v59;
  uint64_t v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  JSValue v70;
  int j;
  unsigned int v72;
  JSC::JSCell *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  JSC::JSCell *v79;
  objc_class *v80;
  WTF::StringImpl *v81;
  JSC::VM *v82;
  JSValue v83;
  uint64_t v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  JSC::VM *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  JSC::Structure *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  JSC::VM *v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  __int16 v102;
  JSC::VM *v103;
  double v104;
  __int16 v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  int v115;
  WTF::StringImpl *v116;
  int v117;
  WTF *v118;
  uint64_t v119;
  WTF::StringImpl **v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  unsigned int v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  JSC::VM *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v137;
  WTF::StringImpl **v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  int v145;
  WTF::StringImpl *v146;
  char v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  int *v151;
  int v152;
  unsigned int v153;
  WTF::StringImpl *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  __int16 v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  WTF::StringImpl *v168;
  int v169;
  WTF::StringImpl *v170;
  uint64_t v171;
  int v172;
  WTF::StringImpl *v173;
  __int16 v174;
  int v175;
  _QWORD v176[2];
  int v177;
  _QWORD v178[2];
  int v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  __int16 v183;
  __int128 v184;
  _BYTE v185[32];
  JSC::VM *v186;
  WTF::StringImpl *v187;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8CFD8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_105;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSRTCRtpSender::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSRTCRtpSender::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_105:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpSender", "setParameters", v17);
  }
  else
  {
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v24 = *(_QWORD *)(v18 + 24);
      v25 = (JSC::JSCell *)*((_QWORD *)a2 + 6);
      v186 = (JSC::VM *)*((_QWORD *)this + 7);
      v157 = v24;
      if (((unint64_t)v25 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v180 = 0;
        v181 = 0;
        v183 = 0;
        v182 = 0;
        v185[28] = 0;
        v184 = 0u;
        memset(v185, 0, 25);
        goto LABEL_35;
      }
      if (((unint64_t)v25 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v25)) == 0)
      {
        JSC::throwTypeError();
        v31 = 1;
        v167 = 1;
        goto LABEL_62;
      }
      v27 = (JSC::Structure *)Object;
      v156 = v13;
      v180 = 0;
      v181 = 0;
      v183 = 0;
      v182 = 0;
      v185[28] = 0;
      v184 = 0u;
      memset(v185, 0, 25);
      WTF::AtomStringImpl::addLiteral();
      v29 = JSC::JSObject::get(v27, this, (unint64_t)v158);
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
          WTF::StringImpl::destroy(v158, v28);
        else
          *(_DWORD *)v158 -= 2;
      }
      if (*((_DWORD *)v186 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v186))
      {
        v31 = 1;
        v167 = 1;
        goto LABEL_36;
      }
      if (v29 == 10)
      {
LABEL_35:
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v186, "codecs", 7, "RTCRtpSendParameters", 21, "sequence", 9);
        v31 = 1;
        v167 = 1;
LABEL_36:
        v32 = *(WTF::StringImpl **)v185;
        *(_QWORD *)v185 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v180, v30);
        if (!v31)
        {
          v33 = v158;
          v158 = 0;
          v180 = v33;
          v34 = v159;
          v159 = 0;
          v181 = v34;
          v182 = v160;
          v183 = v161;
          v35 = v162;
          v160 = 0;
          v162 = 0;
          *(_QWORD *)&v184 = v35;
          v36 = v163;
          v163 = 0;
          *((_QWORD *)&v184 + 1) = v36;
          v37 = v164;
          v164 = 0uLL;
          *(_OWORD *)v185 = v37;
          *(_QWORD *)&v37 = v165;
          v165 = 0;
          *(_QWORD *)&v185[16] = v37;
          *(_QWORD *)&v185[24] = v166;
          v176[0] = v14;
          v38 = *(_QWORD *)(v157 + 64);
          if (v38)
          {
            (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD *))(*(_QWORD *)v38 + 32))(v38, &v180, v176);
          }
          else
          {
            v178[0] = 0;
            WebCore::DeferredPromise::reject((uint64_t)v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v178, 0);
            v40 = (WTF::StringImpl *)v178[0];
            v178[0] = 0;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
                WTF::StringImpl::destroy(v40, v39);
              else
                *(_DWORD *)v40 -= 2;
            }
          }
          v41 = (_DWORD *)v176[0];
          v176[0] = 0;
          if (v41)
          {
            if (v41[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 16))(v41);
            else
              --v41[4];
          }
          if (*(_DWORD *)&v185[20])
          {
            v42 = *(WTF::StringImpl ***)&v185[8];
            v43 = 72 * *(unsigned int *)&v185[20];
            do
            {
              v44 = *v42;
              *v42 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v39);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v42 += 9;
              v43 -= 72;
            }
            while (v43);
          }
          v45 = *(WTF **)&v185[8];
          if (*(_QWORD *)&v185[8])
          {
            *(_QWORD *)&v185[8] = 0;
            *(_DWORD *)&v185[16] = 0;
            WTF::fastFree(v45, v39);
          }
          v46 = *(WTF::StringImpl **)v185;
          *(_QWORD *)v185 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v39);
            else
              *(_DWORD *)v46 -= 2;
          }
          WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v180, v39);
          v14 = 0;
        }
LABEL_62:
        (*(&off_1E32DB3F0 + v31))((int)&v180, (WebCore::RTCRtpParameters *)&v158);
        if (!v14)
          goto LABEL_65;
        goto LABEL_63;
      }
      v49 = *((_QWORD *)this + 7);
      v176[0] = v49;
      if ((v29 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v29 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v55 = v158;
        v158 = 0;
        v13 = v156;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, v54);
          else
            *(_DWORD *)v55 -= 2;
        }
        v56 = 1;
        v179 = 1;
        goto LABEL_120;
      }
      v158 = 0;
      v159 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (i = 1; ; ++i)
        {
          v52 = (*(_BYTE *)(v29 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v29 + 8) - 8) : 0;
          if (i - 1 >= v52)
            break;
          IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v29, i - 1, 0);
          if (!IndexQuickly)
            IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v29, this, (i - 1));
          if (*(_DWORD *)(v49 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49) & 1) != 0)
            break;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>::convert((uint64_t)this, IndexQuickly, (uint64_t)&v158);
          if (*(_QWORD *)(v49 + 16))
          {
            v60 = JSC::JSArrayIterator::create();
            v61 = i | 0xFFFE000000000000;
            if (i < 0)
              v61 = COERCE__INT64((double)i) + 0x2000000000000;
            *(_QWORD *)(v60 + 16) = v61;
            goto LABEL_109;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v29, v50);
        if (!*(_DWORD *)(v49 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49) & 1) == 0)
        {
          while (1)
          {
            v57 = JSC::iteratorStep();
            if (*(_QWORD *)(v49 + 16) || v57 == 6)
              break;
            v59 = (JSC::JSCell *)JSC::iteratorValue();
            if (*(_DWORD *)(v49 + 80))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecParameters>>::convert((uint64_t)this, v59, (uint64_t)&v158);
            if (*(_QWORD *)(v49 + 16))
            {
LABEL_109:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (*(_DWORD *)(v49 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v49);
        v62 = v158;
        if (hasExceptionsAfterHandlingTraps)
        {
          v179 = 1;
          if (HIDWORD(v159))
          {
            v137 = 40 * HIDWORD(v159);
            v138 = (WTF::StringImpl **)((char *)v158 + 32);
            do
            {
              v139 = *v138;
              *v138 = 0;
              if (v139)
              {
                if (*(_DWORD *)v139 == 2)
                  WTF::StringImpl::destroy(v139, v135);
                else
                  *(_DWORD *)v139 -= 2;
              }
              v140 = *(v138 - 3);
              *(v138 - 3) = 0;
              if (v140)
              {
                if (*(_DWORD *)v140 == 2)
                  WTF::StringImpl::destroy(v140, v135);
                else
                  *(_DWORD *)v140 -= 2;
              }
              v138 += 5;
              v137 -= 40;
            }
            while (v137);
            v62 = v158;
          }
          if (v62)
          {
            v158 = 0;
            LODWORD(v159) = 0;
            WTF::fastFree(v62, v135);
          }
          v56 = 1;
          goto LABEL_119;
        }
      }
      else
      {
        v62 = v158;
      }
      v179 = 0;
      v178[0] = 0;
      v178[1] = 0;
      *(_QWORD *)&v184 = v62;
      *((_QWORD *)&v184 + 1) = v159;
      WTF::AtomStringImpl::addLiteral();
      v63 = v158;
      v65 = JSC::JSObject::get(v27, this, (unint64_t)v158);
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v64);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (*((_DWORD *)v186 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186) & 1) != 0)
      {
LABEL_118:
        v56 = 0;
LABEL_119:
        v13 = v156;
LABEL_120:
        v31 = 1;
        v167 = 1;
LABEL_121:
        ((void (*)(_QWORD *, _QWORD *))off_1E32DB228[v56])(v176, v178);
LABEL_122:
        v66 = *(WTF **)&v185[8];
        if (*(_DWORD *)&v185[20])
        {
          v67 = 72 * *(unsigned int *)&v185[20];
          do
          {
            v68 = *(WTF::StringImpl **)v66;
            *(_QWORD *)v66 = 0;
            if (v68)
            {
              if (*(_DWORD *)v68 == 2)
                WTF::StringImpl::destroy(v68, v30);
              else
                *(_DWORD *)v68 -= 2;
            }
            v66 = (WTF *)((char *)v66 + 72);
            v67 -= 72;
          }
          while (v67);
          v66 = *(WTF **)&v185[8];
        }
        if (v66)
        {
          *(_QWORD *)&v185[8] = 0;
          *(_DWORD *)&v185[16] = 0;
          WTF::fastFree(v66, v30);
        }
        goto LABEL_36;
      }
      if (v65 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v186, "headerExtensions", 17, "RTCRtpSendParameters", 21, "sequence", 9);
        goto LABEL_118;
      }
      v69 = *((_QWORD *)this + 7);
      v173 = (WTF::StringImpl *)v69;
      if ((v65 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v65 + 5) <= 0x16u)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        JSC::throwTypeError();
        v75 = v158;
        v158 = 0;
        v13 = v156;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v74);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = 1;
        v177 = 1;
        goto LABEL_187;
      }
      v158 = 0;
      v159 = 0;
      if (JSC::getIterationMode() == 2)
      {
        for (j = 1; ; ++j)
        {
          v72 = (*(_BYTE *)(v65 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v65 + 8) - 8) : 0;
          if (j - 1 >= v72)
            break;
          v73 = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v65, j - 1, 0);
          if (!v73)
            v73 = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v65, this, (j - 1));
          if (*(_DWORD *)(v69 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v69) & 1) != 0)
            break;
          WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>::convert(this, v73, (uint64_t)&v158);
          if (*(_QWORD *)(v69 + 16))
          {
            v84 = JSC::JSArrayIterator::create();
            v85 = j | 0xFFFE000000000000;
            if (j < 0)
              v85 = COERCE__INT64((double)j) + 0x2000000000000;
            *(_QWORD *)(v84 + 16) = v85;
            goto LABEL_176;
          }
        }
      }
      else
      {
        JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v65, v70);
        if (!*(_DWORD *)(v69 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v69) & 1) == 0)
        {
          while (1)
          {
            v77 = JSC::iteratorStep();
            if (*(_QWORD *)(v69 + 16) || v77 == 6)
              break;
            v79 = (JSC::JSCell *)JSC::iteratorValue();
            if (*(_DWORD *)(v69 + 80))
            {
              if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v69) & 1) != 0)
                break;
            }
            WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpHeaderExtensionParameters>>::convert(this, v79, (uint64_t)&v158);
            if (*(_QWORD *)(v69 + 16))
            {
LABEL_176:
              JSC::iteratorClose();
              break;
            }
          }
        }
      }
      if (*(_DWORD *)(v69 + 80))
      {
        v141 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v69);
        v86 = v158;
        if (v141)
        {
          v177 = 1;
          if (HIDWORD(v159))
          {
            v143 = 16 * HIDWORD(v159);
            do
            {
              v144 = *(WTF::StringImpl **)v86;
              *(_QWORD *)v86 = 0;
              if (v144)
              {
                if (*(_DWORD *)v144 == 2)
                  WTF::StringImpl::destroy(v144, v142);
                else
                  *(_DWORD *)v144 -= 2;
              }
              v86 = (WTF::StringImpl *)((char *)v86 + 16);
              v143 -= 16;
            }
            while (v143);
            v86 = v158;
          }
          if (v86)
          {
            v158 = 0;
            LODWORD(v159) = 0;
            WTF::fastFree(v86, v142);
          }
          v76 = 1;
          goto LABEL_186;
        }
      }
      else
      {
        v86 = v158;
      }
      v177 = 0;
      v176[0] = 0;
      v176[1] = 0;
      v180 = v86;
      v181 = v159;
      WTF::AtomStringImpl::addLiteral();
      v87 = v158;
      v88 = JSC::JSObject::get(v27, this, (unint64_t)v158);
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
          WTF::StringImpl::destroy(v87, v30);
        else
          *(_DWORD *)v87 -= 2;
      }
      if (*((_DWORD *)v186 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186) & 1) != 0)
      {
LABEL_185:
        v76 = 0;
LABEL_186:
        v13 = v156;
LABEL_187:
        v31 = 1;
        v167 = 1;
        goto LABEL_188;
      }
      if (v88 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v186, "rtcp", 5, "RTCRtpSendParameters", 21, "RTCRtcpParameters", 18);
        goto LABEL_185;
      }
      v89 = (JSC::VM *)*((_QWORD *)this + 7);
      v168 = v89;
      if ((v88 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v90 = 0;
LABEL_216:
        v102 = 0;
LABEL_223:
        v174 = v102;
        v175 = 0;
        goto LABEL_224;
      }
      if ((v88 & 0xFFFE000000000002) != 0 || (v91 = JSC::JSCell::getObject((JSC::JSCell *)v88)) == 0)
      {
        JSC::throwTypeError();
LABEL_319:
        v175 = 1;
        goto LABEL_361;
      }
      v92 = (JSC::Structure *)v91;
      WTF::AtomStringImpl::addLiteral();
      v93 = v158;
      v95 = JSC::JSObject::get(v92, this, (unint64_t)v158);
      if (v93)
      {
        if (*(_DWORD *)v93 == 2)
          WTF::StringImpl::destroy(v93, v94);
        else
          *(_DWORD *)v93 -= 2;
      }
      if (*((_DWORD *)v89 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v89))
        goto LABEL_319;
      if (v95 == 10)
      {
        v90 = 0;
        goto LABEL_211;
      }
      v173 = (WTF::StringImpl *)v95;
      v96 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v95 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v95 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v173, this);
LABEL_207:
        if (*((_DWORD *)v96 + 20))
        {
          v145 = JSC::VM::hasExceptionsAfterHandlingTraps(v96);
          v90 = v170;
          if (v145)
          {
            LODWORD(v159) = 1;
            v170 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, v146);
              else
                *(_DWORD *)v90 -= 2;
            }
            v99 = 0;
            v90 = 0;
            v98 = 1;
            v175 = 1;
LABEL_210:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v98])(&v170, &v158);
            if (!v99)
              goto LABEL_358;
LABEL_211:
            WTF::AtomStringImpl::addLiteral();
            v100 = v158;
            v101 = JSC::JSObject::get(v92, this, (unint64_t)v158);
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v30);
              else
                *(_DWORD *)v100 -= 2;
            }
            if (*((_DWORD *)v89 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) != 0)
            {
LABEL_357:
              v175 = 1;
LABEL_358:
              if (v90)
              {
                if (*(_DWORD *)v90 == 2)
                {
                  WTF::StringImpl::destroy(v90, v30);
                  v115 = v175;
                  if (v175)
                  {
                    v31 = 1;
                    v167 = 1;
                    v13 = v156;
                    if (v175 == -1)
                    {
LABEL_364:
                      v76 = v177;
                      if (v177 == -1)
                      {
LABEL_189:
                        v56 = v179;
                        if (v179 == -1)
                          goto LABEL_122;
                        goto LABEL_121;
                      }
LABEL_188:
                      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32DB218[v76])(&v173, v176);
                      goto LABEL_189;
                    }
LABEL_363:
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DB208[v115])(&v170, &v173);
                    goto LABEL_364;
                  }
                  v90 = v173;
                  v102 = v174;
LABEL_224:
                  v173 = 0;
                  v106 = v182;
                  v182 = v90;
                  if (v106)
                  {
                    if (*(_DWORD *)v106 == 2)
                      WTF::StringImpl::destroy(v106, v30);
                    else
                      *(_DWORD *)v106 -= 2;
                  }
                  v183 = v102;
                  WTF::AtomStringImpl::addLiteral();
                  v107 = v158;
                  v109 = JSC::JSObject::get(v27, this, (unint64_t)v158);
                  if (v107)
                  {
                    if (*(_DWORD *)v107 == 2)
                      WTF::StringImpl::destroy(v107, v108);
                    else
                      *(_DWORD *)v107 -= 2;
                  }
                  if (*((_DWORD *)v186 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186) & 1) != 0)
                    goto LABEL_241;
                  if (v109 != 10)
                  {
                    v158 = (WTF::StringImpl *)*((_QWORD *)this + 7);
                    v110 = v158;
                    v111 = WebCore::parseEnumeration<WebCore::RTCDegradationPreference>(this, v109);
                    if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
                      goto LABEL_241;
                    if ((v111 & 0xFF00000000) == 0)
                    {
                      JSC::throwTypeError();
                      goto LABEL_241;
                    }
                    *(_DWORD *)&v185[24] = v111;
                    v185[28] = 1;
                  }
                  WTF::AtomStringImpl::addLiteral();
                  v112 = v158;
                  v114 = JSC::JSObject::get(v27, this, (unint64_t)v158);
                  if (v112)
                  {
                    if (*(_DWORD *)v112 == 2)
                      WTF::StringImpl::destroy(v112, v113);
                    else
                      *(_DWORD *)v112 -= 2;
                  }
                  if (*((_DWORD *)v186 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v186) & 1) != 0)
                    goto LABEL_241;
                  if (v114 == 10)
                  {
                    WebCore::throwRequiredMemberTypeError((int)this, (int)&v186, "encodings", 10, "RTCRtpSendParameters", 21, "sequence", 9);
LABEL_241:
                    v115 = 0;
                    v31 = 1;
                    v167 = 1;
LABEL_362:
                    v13 = v156;
                    goto LABEL_363;
                  }
                  v168 = (WTF::StringImpl *)*((_QWORD *)this + 7);
                  if ((v114 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v114 + 5) <= 0x16u)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    JSC::throwTypeError();
                    v123 = v158;
                    v158 = 0;
                    v13 = v156;
                    if (v123)
                    {
                      if (*(_DWORD *)v123 == 2)
                        WTF::StringImpl::destroy(v123, v122);
                      else
                        *(_DWORD *)v123 -= 2;
                    }
                    v117 = 1;
                    v172 = 1;
                  }
                  else
                  {
                    WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::RTCRtpEncodingParameters>>>::convert(this, v114, (uint64_t)&v170);
                    v117 = v172;
                    if (!v172)
                    {
                      v154 = v170;
                      v155 = HIDWORD(v171);
                      v153 = v171;
                      v170 = 0;
                      v171 = 0;
                      v118 = *(WTF **)&v185[8];
                      if (*(_DWORD *)&v185[20])
                      {
                        v119 = 72 * *(unsigned int *)&v185[20];
                        v120 = *(WTF::StringImpl ***)&v185[8];
                        do
                        {
                          v121 = *v120;
                          *v120 = 0;
                          if (v121)
                          {
                            if (*(_DWORD *)v121 == 2)
                              WTF::StringImpl::destroy(v121, v116);
                            else
                              *(_DWORD *)v121 -= 2;
                          }
                          v120 += 9;
                          v119 -= 72;
                        }
                        while (v119);
                      }
                      if (v118)
                        WTF::fastFree(v118, v116);
                      v124 = v154;
                      *(_QWORD *)&v185[8] = v154;
                      v125 = v153;
                      *(_DWORD *)&v185[16] = v153;
                      *(_DWORD *)&v185[20] = v155;
                      WTF::AtomStringImpl::addLiteral();
                      v126 = v158;
                      v128 = JSC::JSObject::get(v27, this, (unint64_t)v158);
                      if (v126)
                      {
                        if (*(_DWORD *)v126 == 2)
                          WTF::StringImpl::destroy(v126, v127);
                        else
                          *(_DWORD *)v126 -= 2;
                      }
                      if (*((_DWORD *)v186 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v186))
                        goto LABEL_266;
                      if (v128 == 10)
                      {
                        WebCore::throwRequiredMemberTypeError((int)this, (int)&v186, "transactionId", 14, "RTCRtpSendParameters", 21, "DOMString", 10);
LABEL_266:
                        v31 = 1;
                        v167 = 1;
                        v13 = v156;
LABEL_283:
                        v117 = v172;
                        goto LABEL_284;
                      }
                      v158 = (WTF::StringImpl *)v128;
                      v129 = (JSC::VM *)*((_QWORD *)this + 7);
                      if ((v128 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v128 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v158, this);
LABEL_274:
                        if (*((_DWORD *)v129 + 20))
                        {
                          v147 = JSC::VM::hasExceptionsAfterHandlingTraps(v129);
                          v131 = v187;
                          if ((v147 & 1) != 0)
                          {
                            v31 = 1;
                            v169 = 1;
                            v187 = 0;
                            if (v131)
                            {
                              if (*(_DWORD *)v131 == 2)
                              {
                                WTF::StringImpl::destroy(v131, v127);
                                v132 = v169;
                                if (v169)
                                  goto LABEL_281;
                                v131 = v168;
                                v124 = v154;
                                v125 = v153;
LABEL_277:
                                v168 = 0;
                                if (*(_QWORD *)v185)
                                {
                                  if (**(_DWORD **)v185 == 2)
                                  {
                                    WTF::StringImpl::destroy(*(WTF::StringImpl **)v185, v127);
                                    v132 = v169;
                                  }
                                  else
                                  {
                                    v132 = 0;
                                    **(_DWORD **)v185 -= 2;
                                  }
                                }
                                else
                                {
                                  v132 = 0;
                                }
                                v31 = 0;
                                v158 = v180;
                                v180 = 0;
                                v133 = v181;
                                v181 = 0;
                                v159 = v133;
                                v160 = v90;
                                v161 = v102;
                                v182 = 0;
                                v134 = *((_QWORD *)&v184 + 1);
                                v162 = v184;
                                v184 = 0uLL;
                                v163 = v134;
                                memset(v185, 0, 24);
                                *(_QWORD *)&v164 = v131;
                                *((_QWORD *)&v164 + 1) = v124;
                                v165 = __PAIR64__(v155, v125);
                                v166 = *(_QWORD *)&v185[24];
LABEL_281:
                                v167 = v31;
                                v13 = v156;
                                if (v132 == -1)
                                  goto LABEL_283;
LABEL_282:
                                ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v132])(&v187, &v168);
                                goto LABEL_283;
                              }
                              *(_DWORD *)v131 -= 2;
                            }
                            v167 = 1;
                            v132 = 1;
                            v13 = v156;
                            goto LABEL_282;
                          }
                          v124 = v154;
                          v125 = v153;
                        }
                        else
                        {
                          v131 = v187;
                        }
                        v169 = 0;
                        goto LABEL_277;
                      }
                      v130 = *(WTF::StringImpl **)(v128 + 8);
                      if ((v130 & 1) != 0)
                      {
                        v130 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v128, this);
                        if (!v130)
                          goto LABEL_273;
                      }
                      else if (!v130)
                      {
LABEL_273:
                        v187 = v130;
                        goto LABEL_274;
                      }
                      *(_DWORD *)v130 += 2;
                      goto LABEL_273;
                    }
                    v13 = v156;
                  }
                  v31 = 1;
                  v167 = 1;
LABEL_284:
                  if (v117 != -1)
                    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DB1F8[v117])(&v168, &v170);
                  v115 = 0;
                  goto LABEL_363;
                }
                *(_DWORD *)v90 -= 2;
              }
LABEL_361:
              v31 = 1;
              v167 = 1;
              v115 = 1;
              goto LABEL_362;
            }
            if (v101 == 10)
              goto LABEL_216;
            v103 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v101 >= 0xFFFE000000000000)
            {
              v148 = (_DWORD)v101 == 0;
              goto LABEL_394;
            }
            *(_QWORD *)&v104 = v101 - 0x2000000000000;
            if (v101 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v104 <= 0.0)
              {
                v105 = v104 < 0.0;
                goto LABEL_221;
              }
            }
            else
            {
              if ((v101 & 0xFFFE000000000002) != 0)
              {
                v105 = v101 == 7;
                goto LABEL_221;
              }
              v149 = *(unsigned __int8 *)(v101 + 5);
              if (v149 == 3)
              {
                v152 = *(_DWORD *)(v101 + 8);
LABEL_390:
                v148 = v152 == 0;
                goto LABEL_394;
              }
              if (v149 == 2)
              {
                v150 = *(_QWORD *)(v101 + 8);
                if ((v150 & 1) != 0)
                  v151 = (int *)(v101 + 16);
                else
                  v151 = (int *)(v150 + 4);
                v152 = *v151;
                goto LABEL_390;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v148 = *(_QWORD *)(16 * (*(_DWORD *)v101 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_394:
                v105 = !v148;
LABEL_221:
                if (!*((_DWORD *)v103 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v103) & 1) == 0)
                {
                  v102 = v105 | 0x100;
                  goto LABEL_223;
                }
                goto LABEL_357;
              }
            }
            v105 = 1;
            goto LABEL_221;
          }
        }
        else
        {
          v90 = v170;
        }
        v98 = 0;
        LODWORD(v159) = 0;
        v158 = 0;
        v99 = 1;
        goto LABEL_210;
      }
      v97 = *(WTF::StringImpl **)(v95 + 8);
      if ((v97 & 1) != 0)
      {
        v97 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v95, this);
        if (!v97)
          goto LABEL_206;
      }
      else if (!v97)
      {
LABEL_206:
        v170 = v97;
        goto LABEL_207;
      }
      *(_DWORD *)v97 += 2;
      goto LABEL_206;
    }
    v82 = (JSC::VM *)*((_QWORD *)this + 7);
    v83.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v82, this, v83);
  }
LABEL_63:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_65:
  v47 = *(_QWORD *)(v10 + 16);
  if (v47)
  {
    if (*(_QWORD *)(v10 + 24) != v47)
    {
      v80 = *(objc_class **)(v47 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v158);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v158, v80, 0);
      v81 = v158;
      v158 = 0;
      if (v81)
      {
        if (*((_DWORD *)v81 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v81 + 16))(v81);
        else
          --*((_DWORD *)v81 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRTCRtpSenderPrototypeFunction_replaceTrack(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::ActiveDOMCallback *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::DOMGuardedObject *v28;
  uint64_t v29;
  BOOL v30;
  char **v31;
  BOOL v32;
  uint64_t v34;
  WebCore::DOMGuardedObject *v35;
  uint64_t v36;
  JSValue v38;
  objc_class *v39;
  WebCore::DOMGuardedObject *v40;
  WebCore::ActiveDOMCallback *v41;
  WebCore::DOMGuardedObject *v42;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8DEECLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v41 = v15;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSRTCRtpSender::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSRTCRtpSender::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpSender", "replaceTrack", v17);
  }
  else
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    if (*((_DWORD *)a2 + 8) != 1)
    {
      v26 = *(_QWORD *)(v19 + 24);
      v27 = *((_QWORD *)a2 + 6);
      if ((v27 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v28 = 0;
      }
      else
      {
        v42 = (WebCore::DOMGuardedObject *)*((_QWORD *)this + 7);
        if ((v27 & 0xFFFE000000000002) != 0)
          goto LABEL_39;
        v29 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
        v30 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
        v31 = (char **)(16 * v29);
        if ((_DWORD)v29)
          v32 = v31 == &WebCore::JSMediaStreamTrack::s_info;
        else
          v32 = 1;
        if (!v32)
        {
          do
          {
            v31 = (char **)v31[2];
            v30 = v31 != 0;
          }
          while (v31 != &WebCore::JSMediaStreamTrack::s_info && v31 != 0);
        }
        if (!v30)
        {
LABEL_39:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 0, "withTrack", 10, "RTCRtpSender", 13, v18, "replaceTrack", 13, "MediaStreamTrack", 17);
          goto LABEL_44;
        }
        v34 = *(_QWORD *)(v27 + 24);
        v28 = (WebCore::DOMGuardedObject *)(v34 - 32);
        ++*(_DWORD *)(v34 - 8);
      }
      v42 = v28;
      WebCore::RTCRtpSender::replaceTrack(v26, (uint64_t *)&v42, &v41);
      v35 = v42;
      v42 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 6);
      }
LABEL_44:
      v14 = v41;
      v41 = 0;
      if (!v14)
        goto LABEL_47;
      goto LABEL_45;
    }
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v38);
  }
  v41 = 0;
LABEL_45:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_47:
  v36 = *(_QWORD *)(v10 + 16);
  if (v36)
  {
    if (*(_QWORD *)(v10 + 24) != v36)
    {
      v39 = *(objc_class **)(v36 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v39, 0);
      v40 = v42;
      v42 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v40 + 16))(v40);
        else
          --*((_DWORD *)v40 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

_BYTE *WebCore::jsRTCRtpSenderPrototypeFunction_setStreams(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF *v20;
  char v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;

  v4 = *((_QWORD *)this + 7);
  v19 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "RTCRtpSender", "setStreams");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpSender::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpSender::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v19, "RTCRtpSender", "setStreams");
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertVariadicArguments<WebCore::IDLInterface<WebCore::MediaStream>>((uint64_t)this, (uint64_t)a2, 0, &v20);
  if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
  {
    WebCore::RTCRtpSender::setStreams(v11, (unsigned int **)&v20, &v23);
    if (!v25)
    {
      v13 = 10;
      goto LABEL_15;
    }
    v12 = (WTF::StringImpl *)v23;
    v21 = v23;
    v16 = v24;
    v24 = 0;
    v22 = v16;
    if (!*(_QWORD *)(v4 + 16))
    {
      v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v23, (JSC::JSGlobalObject *)&v22);
      JSC::VM::throwException((JSC::VM *)v4, this, v17);
      v16 = v22;
    }
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (v25)
    {
      v18 = v24;
      v24 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 != 2)
        {
          v13 = 0;
          *(_DWORD *)v18 -= 2;
          goto LABEL_15;
        }
        WTF::StringImpl::destroy(v18, v12);
      }
    }
  }
  v13 = 0;
LABEL_15:
  v14 = v20;
  v20 = 0;
  if (v14)
    WTF::fastFree(v14, v12);
  return (_BYTE *)v13;
}

unint64_t WebCore::jsRTCRtpSenderPrototypeFunction_getStats(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  objc_class *v29;
  WTF::StringImpl *v30;
  WebCore::DOMGuardedObject *v31;
  WTF::StringImpl *v32;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E8E35CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v31 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRTCRtpSender::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRTCRtpSender::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_39:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RTCRtpSender", "getStats", v16);
  }
  else
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 72);
    if (v23 && (v24 = *(_QWORD *)(v23 + 8)) != 0)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v24 + 120) + 96))(*(_QWORD *)(v24 + 120));
      v14 = v31;
      if (!v31)
        goto LABEL_34;
    }
    else
    {
      v32 = 0;
      WebCore::DeferredPromise::reject((uint64_t)v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v32, 0);
      v26 = v32;
      v32 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v25);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_34:
  v27 = *(_QWORD *)(v10 + 16);
  if (v27)
  {
    if (*(_QWORD *)(v10 + 24) != v27)
    {
      v29 = *(objc_class **)(v27 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v32);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v32, v29, 0);
      v30 = v32;
      v32 = 0;
      if (v30)
      {
        if (*((_DWORD *)v30 + 4) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v30 + 16))(v30);
        else
          --*((_DWORD *)v30 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20RTCRtpSendParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::RTCRtpParameters *this)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3)
  {
    v4 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v5 = 72 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, this);
        else
          *(_DWORD *)v6 -= 2;
      }
      v4 += 9;
      v5 -= 72;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v7, this);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, this);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::RTCRtpParameters::~RTCRtpParameters(this, this);
}

uint64_t WebCore::jsRTCRtpTransceiverPrototypeFunction_stop(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSValue v16;
  WTF::StringImpl *v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSC::VM *v21;
  char v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  char v26;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "RTCRtpTransceiver", "stop");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpTransceiver::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpTransceiver::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "RTCRtpTransceiver", "stop");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v11 + 72);
  if (v12 && (v13 = *(_QWORD *)(v12 + 8)) != 0 && *(_DWORD *)(v13 + 80) != 5)
  {
    if (!*(_BYTE *)(v11 + 56))
    {
      *(_BYTE *)(v11 + 56) = 1;
      WebCore::RTCRtpReceiver::stop(*(WebCore::RTCRtpReceiver **)(v11 + 48));
      WebCore::RTCRtpSender::stop(*(WebCore::RTCRtpSender **)(v11 + 40), v19);
      v20 = *(_QWORD *)(v11 + 64);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
    }
    return 10;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = 8;
    v26 = 1;
    v22 = 8;
    v15 = v25;
    v25 = 0;
    v23 = v15;
    if (!*((_QWORD *)v5 + 2))
    {
      v16.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v23);
      JSC::VM::throwException(v5, this, v16);
      v15 = v23;
    }
    v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v26)
    {
      v17 = v25;
      v25 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 != 2)
        {
          result = 0;
          *(_DWORD *)v17 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v17, v14);
      }
    }
    return 0;
  }
}

_BYTE *WebCore::jsRTCRtpTransceiverPrototypeFunction_setCodecPreferences(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSC::JSCell *v13;
  JSValue v14;
  int i;
  unsigned int v16;
  JSC::JSCell *IndexQuickly;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::JSCell *v24;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  JSValue v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  JSValue v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  WTF::StringImpl *v53;

  v4 = *((_QWORD *)this + 7);
  v46 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "RTCRtpTransceiver", "setCodecPreferences");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCRtpTransceiver::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCRtpTransceiver::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v46, "RTCRtpTransceiver", "setCodecPreferences");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v36);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v52 = (WTF *)v4;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v19 = v49;
    v49 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = 0;
    v21 = 1;
    v48 = 1;
    goto LABEL_69;
  }
  v49 = 0;
  v50 = 0;
  if (JSC::getIterationMode() == 2)
  {
    for (i = 1; ; ++i)
    {
      v16 = (*(_BYTE *)(v12 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v12 + 8) - 8) : 0;
      if (i - 1 >= v16)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v12, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v12, this, (i - 1));
      if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
        break;
      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecCapability>>::convert((JSC::VM **)this, IndexQuickly, (unsigned int *)&v49);
      if (*(_QWORD *)(v4 + 16))
      {
        v26 = JSC::JSArrayIterator::create();
        v27 = i | 0xFFFE000000000000;
        if (i < 0)
          v27 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v26 + 16) = v27;
        goto LABEL_46;
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(this, (JSC::JSGlobalObject *)v12, v14);
    if (!*(_DWORD *)(v4 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) == 0)
    {
      while (1)
      {
        v22 = JSC::iteratorStep();
        if (*(_QWORD *)(v4 + 16) || v22 == 6)
          break;
        v13 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v4 + 80))
        {
          v24 = v13;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
          v13 = v24;
          if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            break;
        }
        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecCapability>>::convert((JSC::VM **)this, v13, (unsigned int *)&v49);
        if (*(_QWORD *)(v4 + 16))
        {
LABEL_46:
          JSC::iteratorClose();
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v4 + 80))
  {
    v37 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v28 = v49;
    if (v37)
    {
      v48 = 1;
      if (HIDWORD(v50))
      {
        v38 = 32 * HIDWORD(v50);
        v39 = v49;
        do
        {
          v40 = (WTF::StringImpl *)*((_QWORD *)v39 + 3);
          *((_QWORD *)v39 + 3) = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v13);
            else
              *(_DWORD *)v40 -= 2;
          }
          v41 = *(WTF::StringImpl **)v39;
          *(_QWORD *)v39 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v13);
            else
              *(_DWORD *)v41 -= 2;
          }
          v39 = (WTF::StringImpl *)((char *)v39 + 32);
          v38 -= 32;
        }
        while (v38);
      }
      if (v28)
        WTF::fastFree(v28, v13);
      v20 = 0;
      v21 = 1;
      goto LABEL_69;
    }
  }
  else
  {
    v28 = v49;
  }
  v29 = HIDWORD(v50);
  v48 = 0;
  v47[0] = 0;
  v47[1] = 0;
  v52 = v28;
  v53 = v50;
  v30 = *(_QWORD *)(v11 + 64);
  if (v30)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v30 + 64))(&v49, v30, &v52);
    v29 = HIDWORD(v53);
    v28 = v52;
    if (!HIDWORD(v53))
      goto LABEL_64;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    if (!v29)
      goto LABEL_64;
  }
  v31 = 32 * v29;
  do
  {
    v32 = (WTF::StringImpl *)*((_QWORD *)v28 + 3);
    *((_QWORD *)v28 + 3) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v13);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = *(WTF::StringImpl **)v28;
    *(_QWORD *)v28 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v13);
      else
        *(_DWORD *)v33 -= 2;
    }
    v28 = (WTF::StringImpl *)((char *)v28 + 32);
    v31 -= 32;
  }
  while (v31);
  v28 = v52;
LABEL_64:
  if (v28)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    WTF::fastFree(v28, v13);
  }
  if ((_BYTE)v51)
  {
    v42 = (WTF::StringImpl *)v49;
    LOBYTE(v52) = (_BYTE)v49;
    v43 = v50;
    v50 = 0;
    v53 = v43;
    if (!*(_QWORD *)(v4 + 16))
    {
      v44.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v49, (JSC::JSGlobalObject *)&v53);
      JSC::VM::throwException((JSC::VM *)v4, this, v44);
      v43 = v53;
    }
    v53 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v42);
      else
        *(_DWORD *)v43 -= 2;
    }
    if ((_BYTE)v51)
    {
      v45 = v50;
      v50 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 != 2)
        {
          v20 = 0;
          *(_DWORD *)v45 -= 2;
          goto LABEL_68;
        }
        WTF::StringImpl::destroy(v45, v42);
      }
    }
    v20 = 0;
    goto LABEL_68;
  }
  v20 = 10;
LABEL_68:
  v21 = 0;
LABEL_69:
  ((void (*)(WTF::StringImpl **, _QWORD *))off_1E32DB578[v21])(&v49, v47);
  return (_BYTE *)v20;
}

uint64_t WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::RTCRtpCodecCapability>>::convert(JSC::VM **a1, JSC::JSCell *this, unsigned int *a3)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  char v9;
  JSC::VM *v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  JSC::VM *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  double v56;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  _QWORD v62[2];
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  _BYTE v65[11];
  WTF::StringImpl *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  int v69;
  _DWORD v70[2];
  JSC::VM *v71;
  WTF::StringImpl *v72;

  v71 = a1[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_30;
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = JSC::throwTypeError();
    goto LABEL_32;
  }
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v64);
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v7);
    else
      *(_DWORD *)v64 -= 2;
  }
  if (*((_DWORD *)v71 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v71);
    if ((_DWORD)result)
      goto LABEL_32;
  }
  if (v8 == 10)
  {
    v9 = 0;
    LOWORD(v8) = 0;
  }
  else
  {
    v64 = (WTF::StringImpl *)v8;
    v10 = a1[7];
    if (v8 < 0xFFFE000000000000 || (v8 & 0x80000000) != 0)
    {
      if (v8 >= 0xFFFE000000000000)
      {
        v11 = (double)(int)v8;
      }
      else if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v64, (JSC::JSGlobalObject *)a1);
      }
      else
      {
        *(_QWORD *)&v11 = v8 - 0x2000000000000;
      }
      if (*((_DWORD *)v10 + 20))
      {
        v56 = v11;
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
        v11 = v56;
        if ((result & 1) != 0)
          goto LABEL_32;
      }
      LOWORD(v8) = 0;
      if (fabs(v11) != INFINITY && v11 != 0.0)
      {
        v12 = -floor(-v11);
        v13 = floor(v11);
        if (v11 >= 0.0)
          v14 = v13;
        else
          v14 = v12;
        v15 = fmod(v14, 65536.0);
        if (v15 < 0.0)
          v15 = v15 + 65536.0;
        LODWORD(v8) = (int)v15;
      }
    }
    v9 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v16 = v64;
  v18 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v64);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v71 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v71);
    if ((_DWORD)result)
      goto LABEL_32;
  }
  if (v18 == 10)
  {
LABEL_30:
    v19 = "clockRate";
    v20 = "unsigned long";
    v21 = (int)a1;
    v22 = 10;
    v23 = 14;
LABEL_31:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError(v21, (int)&v71, v19, v22, "RTCRtpCodecCapability", 22, v20, v23);
LABEL_32:
    v67 = 1;
    goto LABEL_33;
  }
  result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)a1, v18, v70);
  if (v70[1])
    goto LABEL_32;
  v39 = v70[0];
  WTF::AtomStringImpl::addLiteral();
  v40 = v64;
  v42 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v64);
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v41);
    else
      *(_DWORD *)v40 -= 2;
  }
  if (*((_DWORD *)v71 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v71);
    if ((result & 1) != 0)
      goto LABEL_32;
  }
  if (v42 == 10)
  {
    v19 = "mimeType";
    v20 = "DOMString";
    v21 = (int)a1;
    v22 = 9;
    v23 = 10;
    goto LABEL_31;
  }
  v64 = (WTF::StringImpl *)v42;
  v43 = a1[7];
  if ((v42 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v42 + 5) == 2)
  {
    v44 = *(WTF::StringImpl **)(v42 + 8);
    if ((v44 & 1) != 0)
    {
      v44 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v42, (JSC::JSGlobalObject *)a1);
      if (!v44)
        goto LABEL_56;
    }
    else if (!v44)
    {
LABEL_56:
      v68 = v44;
      goto LABEL_57;
    }
    *(_DWORD *)v44 += 2;
    goto LABEL_56;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, (JSC::JSGlobalObject *)a1);
LABEL_57:
  if (*((_DWORD *)v43 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v43);
    v45 = v68;
    if (hasExceptionsAfterHandlingTraps)
    {
      LODWORD(v62[0]) = 1;
      v68 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v58);
        else
          *(_DWORD *)v45 -= 2;
      }
      v45 = 0;
      v54 = 1;
      v55 = 1;
      goto LABEL_77;
    }
  }
  else
  {
    v45 = v68;
  }
  LODWORD(v62[0]) = 0;
  v61 = 0;
  WTF::AtomStringImpl::addLiteral();
  v46 = v64;
  v48 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a1, (unint64_t)v64);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v47);
    else
      *(_DWORD *)v46 -= 2;
  }
  if (*((_DWORD *)v71 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v71) & 1) != 0)
  {
    v55 = 0;
    v54 = 1;
    goto LABEL_77;
  }
  if (v48 == 10)
  {
    v49 = 0;
LABEL_76:
    v54 = 0;
    v55 = 0;
    v64 = v45;
    *(_QWORD *)v65 = v39;
    *(_WORD *)&v65[8] = v8;
    v65[10] = v9;
    v66 = v49;
    v45 = 0;
LABEL_77:
    v49 = 0;
    v67 = v54;
    goto LABEL_82;
  }
  v64 = (WTF::StringImpl *)v48;
  v50 = a1[7];
  if ((v48 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v48 + 5) == 2)
  {
    v51 = *(WTF::StringImpl **)(v48 + 8);
    if ((v51 & 1) != 0)
    {
      v51 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v48, (JSC::JSGlobalObject *)a1);
      if (!v51)
        goto LABEL_71;
    }
    else if (!v51)
    {
LABEL_71:
      v72 = v51;
      goto LABEL_72;
    }
    *(_DWORD *)v51 += 2;
    goto LABEL_71;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, (JSC::JSGlobalObject *)a1);
LABEL_72:
  if (!*((_DWORD *)v50 + 20))
  {
    v49 = v72;
LABEL_74:
    v52 = 0;
    v69 = 0;
    v68 = 0;
    v53 = 1;
    goto LABEL_75;
  }
  v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v50);
  v49 = v72;
  if (!v59)
    goto LABEL_74;
  v52 = 1;
  v69 = 1;
  v72 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v60);
    else
      *(_DWORD *)v49 -= 2;
  }
  v53 = 0;
  v49 = 0;
  v67 = 1;
LABEL_75:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v52])(&v72, &v68);
  if (v53)
    goto LABEL_76;
  v55 = 0;
LABEL_82:
  result = ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DAE20[v55])(&v68, &v61);
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      result = WTF::StringImpl::destroy(v49, v25);
      if (!v45)
        goto LABEL_33;
      goto LABEL_86;
    }
    *(_DWORD *)v49 -= 2;
  }
  if (!v45)
    goto LABEL_33;
LABEL_86:
  if (*(_DWORD *)v45 == 2)
    result = WTF::StringImpl::destroy(v45, v25);
  else
    *(_DWORD *)v45 -= 2;
LABEL_33:
  v26 = v67;
  if (!v67)
  {
    v27 = v64;
    v61 = v64;
    v62[0] = *(_QWORD *)v65;
    *(_DWORD *)((char *)v62 + 7) = *(_DWORD *)&v65[7];
    v28 = v66;
    v63 = v66;
    v64 = 0;
    v66 = 0;
    v29 = a3[3];
    if ((_DWORD)v29 == a3[2])
    {
      v30 = WTF::Vector<WebCore::RTCRtpCodecCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v29 + 1, (unint64_t)&v61);
      v31 = *(_QWORD *)a3 + 32 * a3[3];
      v32 = *(_QWORD *)v30;
      *(_QWORD *)v30 = 0;
      *(_QWORD *)v31 = v32;
      v33 = *(_QWORD *)(v30 + 8);
      *(_DWORD *)(v31 + 15) = *(_DWORD *)(v30 + 15);
      *(_QWORD *)(v31 + 8) = v33;
      v34 = *(_QWORD *)(v30 + 24);
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v31 + 24) = v34;
      v35 = v63;
      ++a3[3];
      v63 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v25);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    else
    {
      v36 = *(_QWORD *)a3 + 32 * v29;
      v61 = 0;
      *(_QWORD *)v36 = v27;
      v37 = v62[0];
      *(_DWORD *)(v36 + 15) = *(_DWORD *)((char *)v62 + 7);
      *(_QWORD *)(v36 + 8) = v37;
      *(_QWORD *)(v36 + 24) = v28;
      ++a3[3];
      v63 = 0;
    }
    v38 = v61;
    v61 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v25);
      else
        *(_DWORD *)v38 -= 2;
    }
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DB568[v26])(&v61, &v64);
  }
  if (v67 != -1)
    return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E32DB568[v26])(&v61, &v64);
  return result;
}

unint64_t WTF::Vector<WebCore::RTCRtpCodecCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RTCRtpCodecCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::RTCRtpCodecCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::RTCRtpCodecCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(32 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (WTF *)((char *)v4 + 32 * v5);
        v9 = v4;
        do
        {
          v10 = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 1);
          *(unsigned int *)((char *)v7 + 15) = *(_DWORD *)((char *)v9 + 15);
          *((_QWORD *)v7 + 1) = v11;
          v12 = *((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          *((_QWORD *)v7 + 3) = v12;
          v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 3);
          *((_QWORD *)v9 + 3) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          result = *(unsigned int **)v9;
          *(_QWORD *)v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 32);
          v7 += 8;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21RTCRtpCodecCapabilityENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore21RTCRtpCodecCapabilityELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::StringImpl ***)a2;
    v5 = 32 * v3;
    do
    {
      v6 = v4[3];
      v4[3] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *v4;
      *v4 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

_BYTE *WebCore::jsRTCSessionDescriptionPrototypeFunction_toJSON(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t SlowCase;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)this + 7);
  v30 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "RTCSessionDescription", "toJSON");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCSessionDescription::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCSessionDescription::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v30, "RTCSessionDescription", "toJSON");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_QWORD *)(v5 + 15056);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 60);
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 < *(_QWORD *)(v12 + 32))
    {
LABEL_14:
      *(_QWORD *)(v12 + 24) = v14 + v13;
      goto LABEL_15;
    }
    v14 = *(_QWORD *)(v12 + 40);
    if ((v14 & 1) == 0)
    {
      v28 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 32) = v14 + HIDWORD(v28);
      *(_QWORD *)(v12 + 40) = v14 + (int)v28;
      goto LABEL_14;
    }
    JSC::sanitizeStackForVM();
    SlowCase = JSC::LocalAllocator::allocateSlowCase();
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow();
  }
  v14 = SlowCase;
LABEL_15:
  *(_DWORD *)v14 = 0;
  *(_DWORD *)v14 = *((_DWORD *)this + 212);
  *(_DWORD *)(v14 + 4) = 16783360;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_QWORD *)(v14 + 56) = 0;
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v15 = WebCore::convertEnumerationToJS<WebCore::RTCSdpType>(*((_QWORD *)this + 7), (WTF::StringImpl *)*(unsigned int *)(v11 + 16));
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v16 = v31;
  v31 = 0;
  v32 = v14;
  v33 = -1;
  v34 = 0x1000000;
  v35 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v16, v15, 0, (uint64_t)&v31);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  v18 = *((_QWORD *)this + 7);
  v19 = *(_QWORD *)(v11 + 24);
  if (v19 && (v20 = *(_DWORD *)(v19 + 4)) != 0)
  {
    if (v20 != 1)
    {
LABEL_24:
      v21 = *(_QWORD *)(v18 + 64760);
      if (!v21 || v19 != *(_QWORD *)(v21 + 8))
        v21 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_27;
    }
    v25 = *(unsigned __int8 **)(v19 + 8);
    if ((*(_BYTE *)(v19 + 16) & 4) != 0)
    {
      v26 = *v25;
    }
    else
    {
      v27 = *(unsigned __int16 *)v25;
      if (v27 > 0xFF)
        goto LABEL_24;
      v26 = v27;
    }
    v21 = *(_QWORD *)(v18 + 8 * v26 + 42216);
  }
  else
  {
    v21 = *(_QWORD *)(v18 + 41968);
  }
LABEL_27:
  if (*(_DWORD *)(v5 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v22 = v31;
  v31 = 0;
  v32 = v14;
  v33 = -1;
  v34 = 0x1000000;
  v35 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, (JSC::VM *)v5, (unint64_t)v22, v21, 0, (uint64_t)&v31);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_get(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "RTCStatsReport", "get");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCStatsReport::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRTCStatsReport::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "RTCStatsReport", "get");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v12 = *((_QWORD *)a2 + 6);
  v33[0] = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v32 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v32;
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v32 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v28);
        else
          *(_DWORD *)v14 -= 2;
      }
      v21 = 0;
      v23 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v14 = v32;
  }
  v31 = 0;
  v30 = 0;
  BackingMap = WebCore::getBackingMap((unint64_t)this, v5, a3);
  v18 = v16;
  if (BackingMap)
  {
    v33[0] = this;
    v33[1] = v16;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v5 + 3) + 8) + 16))(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8), v33);
  }
  v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEBA8];
  *MEMORY[0x1E0CBEBA8] += 2;
  v33[0] = v19;
  v21 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v33, v17);
  v22 = v33[0];
  v33[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (!v14)
        goto LABEL_36;
      goto LABEL_27;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v14)
  {
LABEL_36:
    v23 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v20);
    goto LABEL_36;
  }
  v23 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_29:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v23])(v33, &v30);
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char BackingMap;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "RTCStatsReport", "has");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCStatsReport::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRTCStatsReport::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "RTCStatsReport", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v12 = *((_QWORD *)a2 + 6);
  v33[0] = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v32 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v32;
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v32 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v28);
        else
          *(_DWORD *)v14 -= 2;
      }
      v21 = 0;
      v23 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v14 = v32;
  }
  v31 = 0;
  v30 = 0;
  BackingMap = WebCore::getBackingMap((unint64_t)this, v5, a3);
  v18 = v16;
  if (BackingMap)
  {
    v33[0] = this;
    v33[1] = v16;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*((_QWORD *)v5 + 3) + 8) + 16))(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8), v33);
  }
  v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB0];
  *MEMORY[0x1E0CBEBB0] += 2;
  v33[0] = v19;
  v21 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v33, v17);
  v22 = v33[0];
  v33[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (!v14)
        goto LABEL_36;
      goto LABEL_27;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v14)
  {
LABEL_36:
    v23 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v20);
    goto LABEL_36;
  }
  v23 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_29:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v23])(v33, &v30);
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "entries");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCStatsReport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCStatsReport::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "entries");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v21[0] = this;
    v21[1] = v12;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF8];
  *MEMORY[0x1E0CBEBF8] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "keys");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCStatsReport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCStatsReport::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "keys");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v21[0] = this;
    v21[1] = v12;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBC0];
  *MEMORY[0x1E0CBEBC0] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingMap;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "values");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRTCStatsReport::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRTCStatsReport::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "RTCStatsReport", "values");
  BackingMap = WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingMap)
  {
    v21[0] = this;
    v21[1] = v12;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(*(_QWORD *)(v4 + 24) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingMap((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsRTCStatsReportPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSC::JSObject *v13;
  JSValue v15;
  JSC::VM *v16;
  _QWORD v17[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "RTCStatsReport", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCStatsReport::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRTCStatsReport::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "RTCStatsReport", "forEach");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    if (WebCore::getBackingMap((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3))
    {
      v17[0] = this;
      v17[1] = v12;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(v5 + 24) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 8), v17);
    }
    return (_BYTE *)WebCore::forwardForEachCallToBackingMap(this, a2, (JSC::CallFrame *)v5, v13);
  }
}

void WebCore::RTCTrackEvent::Init::~Init(WebCore::RTCTrackEvent::Init *this, void *a2)
{
  WebCore::RTCRtpTransceiver *v3;
  uint64_t v4;
  WebCore::MediaStream **v5;
  uint64_t v6;
  WebCore::MediaStream *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  WebCore::RTCRtpReceiver *v12;
  bmalloc::api *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  v3 = (WebCore::RTCRtpTransceiver *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v3, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = *((unsigned int *)this + 9);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::MediaStream **)*((_QWORD *)this + 3);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v7);
          bmalloc::api::isoDeallocate(v8, v9);
        }
        else
        {
          --*((_DWORD *)v7 + 22);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v10 = (WTF *)*((_QWORD *)this + 3);
  if (v10)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (v11[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[6];
  }
  v12 = (WebCore::RTCRtpReceiver *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
    {
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(v12, a2);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*((_DWORD *)v12 + 2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13RTCTrackEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, WebCore::RTCTrackEvent::Init *this)
{
  WebCore::RTCTrackEvent::Init::~Init(this, this);
}

uint64_t WebCore::jsRangePrototypeFunction_setStart(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t result;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  unsigned int v26[2];
  JSC::VM *v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "Range", "setStart");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "Range", "setStart");
  v15 = *(_QWORD *)(v10 + 24);
  v27 = v9;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v22);
  }
  v16 = *((_QWORD *)a2 + 6);
  v30 = v9;
  if ((v16 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v16 + 5) < 0xF0u
    || (v17 = *(WebCore::Node **)(v16 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v30, 0, "node", 5, "Range", 6, a8, "setStart", 9, "Node", 5);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v26);
  if (!v26[1])
  {
    *((_DWORD *)v17 + 6) += 2;
    v28 = v17;
    WebCore::Range::setStart(v15, (uint64_t *)&v28, v26[0], (uint64_t)&v30);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    if (!v32)
      return 10;
    LOBYTE(v28) = (_BYTE)v30;
    v23 = v31;
    v31 = 0;
    v29 = v23;
    if (!*((_QWORD *)v9 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v27, (unsigned __int8 *)&v28);
      v23 = v29;
    }
    v29 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v32)
    {
      v24 = v31;
      v31 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 != 2)
        {
          result = 0;
          *(_DWORD *)v24 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v18);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsRangePrototypeFunction_setEnd(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  void *v18;
  WebCore::Node *v19;
  uint64_t result;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  unsigned int v26[2];
  JSC::VM *v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WTF::StringImpl *v31;
  char v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "Range", "setEnd");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "Range", "setEnd");
  v15 = *(_QWORD *)(v10 + 24);
  v27 = v9;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v22);
  }
  v16 = *((_QWORD *)a2 + 6);
  v30 = v9;
  if ((v16 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v16 + 5) < 0xF0u
    || (v17 = *(WebCore::Node **)(v16 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v30, 0, "node", 5, "Range", 6, a8, "setEnd", 7, "Node", 5);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v26);
  if (!v26[1])
  {
    *((_DWORD *)v17 + 6) += 2;
    v28 = v17;
    WebCore::Range::setEnd(v15, (uint64_t *)&v28, v26[0], (uint64_t)&v30);
    v19 = v28;
    v28 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    if (!v32)
      return 10;
    LOBYTE(v28) = (_BYTE)v30;
    v23 = v31;
    v31 = 0;
    v29 = v23;
    if (!*((_QWORD *)v9 + 2))
    {
      WebCore::propagateExceptionSlowPath(this, &v27, (unsigned __int8 *)&v28);
      v23 = v29;
    }
    v29 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v18);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v32)
    {
      v24 = v31;
      v31 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 != 2)
        {
          result = 0;
          *(_DWORD *)v24 -= 2;
          return result;
        }
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v18);
      }
    }
  }
  return 0;
}

uint64_t WebCore::jsRangePrototypeFunction_setStartBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  void *v23;
  uint64_t result;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setStartBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setStartBefore");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || (v18 = *(_QWORD *)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "node", 5, "Range", 6, a8, "setStartBefore", 15, "Node", 5);
    return 0;
  }
  v19 = *(WebCore::Node **)(v18 + 32);
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    v31 = v19;
    v20 = *(_QWORD *)(v18 + 48);
    for (i = 0; ; ++i)
    {
      v22 = v20 & 0xFFFFFFFFFFFFLL;
      if (!v22)
        break;
      v20 = *(_QWORD *)(v22 + 48);
    }
    WebCore::Range::setStart(v16, (uint64_t *)&v31, i, (uint64_t)&v33);
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v23);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (!v35)
      return 10;
  }
  else
  {
    LOBYTE(v33) = 20;
    v34 = 0;
    v35 = 1;
  }
  v26 = (WTF::StringImpl *)v33;
  LOBYTE(v31) = (_BYTE)v33;
  v27 = v34;
  v34 = 0;
  v32 = v27;
  if (!*((_QWORD *)v9 + 2))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v9, this, v28);
    v27 = v32;
  }
  v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v35)
    return 0;
  v29 = v34;
  v34 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

uint64_t WebCore::jsRangePrototypeFunction_setStartAfter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  void *v23;
  uint64_t result;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setStartAfter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setStartAfter");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || (v18 = *(_QWORD *)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "node", 5, "Range", 6, a8, "setStartAfter", 14, "Node", 5);
    return 0;
  }
  v19 = *(WebCore::Node **)(v18 + 32);
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    v31 = v19;
    v20 = *(_QWORD *)(v18 + 48);
    for (i = 1; ; ++i)
    {
      v22 = v20 & 0xFFFFFFFFFFFFLL;
      if (!v22)
        break;
      v20 = *(_QWORD *)(v22 + 48);
    }
    WebCore::Range::setStart(v16, (uint64_t *)&v31, i, (uint64_t)&v33);
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v23);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (!v35)
      return 10;
  }
  else
  {
    LOBYTE(v33) = 20;
    v34 = 0;
    v35 = 1;
  }
  v26 = (WTF::StringImpl *)v33;
  LOBYTE(v31) = (_BYTE)v33;
  v27 = v34;
  v34 = 0;
  v32 = v27;
  if (!*((_QWORD *)v9 + 2))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v9, this, v28);
    v27 = v32;
  }
  v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v35)
    return 0;
  v29 = v34;
  v34 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

uint64_t WebCore::jsRangePrototypeFunction_setEndBefore(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  void *v23;
  uint64_t result;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setEndBefore");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setEndBefore");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || (v18 = *(_QWORD *)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "node", 5, "Range", 6, a8, "setEndBefore", 13, "Node", 5);
    return 0;
  }
  v19 = *(WebCore::Node **)(v18 + 32);
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    v31 = v19;
    v20 = *(_QWORD *)(v18 + 48);
    for (i = 0; ; ++i)
    {
      v22 = v20 & 0xFFFFFFFFFFFFLL;
      if (!v22)
        break;
      v20 = *(_QWORD *)(v22 + 48);
    }
    WebCore::Range::setEnd(v16, (uint64_t *)&v31, i, (uint64_t)&v33);
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v23);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (!v35)
      return 10;
  }
  else
  {
    LOBYTE(v33) = 20;
    v34 = 0;
    v35 = 1;
  }
  v26 = (WTF::StringImpl *)v33;
  LOBYTE(v31) = (_BYTE)v33;
  v27 = v34;
  v34 = 0;
  v32 = v27;
  if (!*((_QWORD *)v9 + 2))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v9, this, v28);
    v27 = v32;
  }
  v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v35)
    return 0;
  v29 = v34;
  v34 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

uint64_t WebCore::jsRangePrototypeFunction_setEndAfter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  unsigned int i;
  uint64_t v22;
  void *v23;
  uint64_t result;
  JSValue v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;
  WTF::StringImpl *v34;
  char v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v30 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setEndAfter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "setEndAfter");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v33 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || (v18 = *(_QWORD *)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v33, 0, "node", 5, "Range", 6, a8, "setEndAfter", 12, "Node", 5);
    return 0;
  }
  v19 = *(WebCore::Node **)(v18 + 32);
  if (v19)
  {
    *((_DWORD *)v19 + 6) += 2;
    v31 = v19;
    v20 = *(_QWORD *)(v18 + 48);
    for (i = 1; ; ++i)
    {
      v22 = v20 & 0xFFFFFFFFFFFFLL;
      if (!v22)
        break;
      v20 = *(_QWORD *)(v22 + 48);
    }
    WebCore::Range::setEnd(v16, (uint64_t *)&v31, i, (uint64_t)&v33);
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v23);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    if (!v35)
      return 10;
  }
  else
  {
    LOBYTE(v33) = 20;
    v34 = 0;
    v35 = 1;
  }
  v26 = (WTF::StringImpl *)v33;
  LOBYTE(v31) = (_BYTE)v33;
  v27 = v34;
  v34 = 0;
  v32 = v27;
  if (!*((_QWORD *)v9 + 2))
  {
    v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v32);
    JSC::VM::throwException(v9, this, v28);
    v27 = v32;
  }
  v32 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (!v35)
    return 0;
  v29 = v34;
  v34 = 0;
  if (!v29)
    return 0;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v26);
    return 0;
  }
  result = 0;
  *(_DWORD *)v29 -= 2;
  return result;
}

uint64_t WebCore::jsRangePrototypeFunction_collapse(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  _BOOL8 v17;
  WebCore::Range *v18;
  BOOL v20;
  JSC::VM *v21;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "Range", "collapse");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRange::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRange::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "Range", "collapse");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_23;
  }
  v11 = *((_QWORD *)a2 + 6);
  if (v11 >= 0xFFFE000000000000)
  {
    v20 = (_DWORD)v11 == 0;
    goto LABEL_38;
  }
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v13 = *(unsigned __int8 *)(v11 + 5);
      if (v13 == 3)
      {
        v16 = *(_DWORD *)(v11 + 8);
      }
      else
      {
        if (v13 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
            v17 = 1;
            goto LABEL_24;
          }
          v20 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
          goto LABEL_38;
        }
        v14 = *(_QWORD *)(v11 + 8);
        if ((v14 & 1) != 0)
          v15 = (int *)(v11 + 16);
        else
          v15 = (int *)(v14 + 4);
        v16 = *v15;
      }
      v20 = v16 == 0;
LABEL_38:
      v17 = !v20;
      goto LABEL_24;
    }
LABEL_23:
    v17 = v11 == 7;
    goto LABEL_24;
  }
  v17 = v12 > 0.0 || v12 < 0.0;
LABEL_24:
  v18 = *(WebCore::Range **)(v5 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  WebCore::Range::collapse(v18, (void *)v17);
  return 10;
}

uint64_t WebCore::jsRangePrototypeFunction_selectNodeContents(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::Node *v18;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  JSC::VM *v24;
  char v25;
  WTF::StringImpl *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "Range", "selectNodeContents");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "Range", "selectNodeContents");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "node", 5, "Range", 6, a8, "selectNodeContents", 19, "Node", 5);
    }
    else
    {
      WebCore::Range::selectNodeContents(v16, v18, (uint64_t)&v27);
      if (!v29)
        return 10;
      v21 = (WTF::StringImpl *)v27;
      v25 = (char)v27;
      v22 = v28;
      v26 = v28;
      if (!*((_QWORD *)v9 + 2))
      {
        v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v26);
        JSC::VM::throwException(v9, this, v23);
        v22 = v26;
      }
      v26 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    return 0;
  }
}

_BYTE *WebCore::jsRangePrototypeFunction_compareBoundaryPoints(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  _DWORD *v12;
  unint64_t v13;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  const WebCore::Range *v23;
  int v24;
  unint64_t v25;
  _BYTE *result;
  JSValue v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  JSValue v30;
  double v31;
  WebCore *v32;
  JSC::JSGlobalObject *v33;
  JSC::CallFrame *v34;
  uint64_t v35;
  int v36[2];
  WTF::StringImpl *v37;
  int v38;
  _BYTE v39[8];
  WTF::StringImpl *v40;

  v4 = *((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "Range", "compareBoundaryPoints");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRange::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSRange::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "Range", "compareBoundaryPoints");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v4, this, v27);
  }
  v12 = *(_DWORD **)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v36 = v13;
  if (v13 >= 0xFFFE000000000000 && (v13 & 0x80000000) == 0)
  {
    LOWORD(v16) = v13;
  }
  else
  {
    if (v13 >= 0xFFFE000000000000)
    {
      v15 = (double)(int)v13;
    }
    else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v36, this);
      v15 = v31;
    }
    else
    {
      *(_QWORD *)&v15 = v13 - 0x2000000000000;
    }
    if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
      return 0;
    LOWORD(v16) = 0;
    if (fabs(v15) != INFINITY && v15 != 0.0)
    {
      v17 = -floor(-v15);
      v18 = floor(v15);
      if (v15 >= 0.0)
        v17 = v18;
      v19 = fmod(v17, 65536.0);
      if (v19 < 0.0)
        v19 = v19 + 65536.0;
      v16 = (int)v19;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v36 = *((_QWORD *)this + 7);
  v21 = JSC::jsDynamicCast<WebCore::JSRange *>(v20);
  if (!v21 || (v23 = *(const WebCore::Range **)(v21 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v36, 1, "sourceRange", 12, "Range", 6, v22, "compareBoundaryPoints", 22, "Range", 6);
    return 0;
  }
  WebCore::Range::compareBoundaryPoints(v12, v23, (unsigned __int16)v16, (uint64_t)v36);
  v24 = v38;
  if (!v38)
  {
    v25 = SLOWORD(v36[0]) & 0xFFFFFFFFLL | 0xFFFE000000000000;
LABEL_33:
    ((void (*)(_BYTE *, int *))off_1E32DC0D0[v24])(v39, v36);
    return (_BYTE *)v25;
  }
  if (v38 == 1)
  {
    v28 = (WTF::StringImpl *)LOBYTE(v36[0]);
    v39[0] = v36[0];
    v29 = v37;
    v37 = 0;
    v40 = v29;
    if (!*(_QWORD *)(v4 + 16))
    {
      v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v36[0]), (JSC::JSGlobalObject *)&v40);
      JSC::VM::throwException((JSC::VM *)v4, this, v30);
      v29 = v40;
    }
    v40 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v25 = 0;
    result = 0;
    v24 = v38;
    if (v38 != -1)
      goto LABEL_33;
  }
  else
  {
    v32 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_BYTE *)WebCore::jsRangePrototypeFunction_deleteContents(v32, v33, v34);
  }
  return result;
}

_BYTE *WebCore::jsRangePrototypeFunction_deleteContents(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  uint64_t *v23;
  uint64_t v24;
  _BYTE v25[40];
  uint64_t v26;
  JSC::JSGlobalObject *v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  int v30;
  char v31;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "Range", "deleteContents");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRange::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRange::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "Range", "deleteContents");
  v11 = *(_QWORD *)(v4 + 24);
  v23 = (uint64_t *)v25;
  v24 = 4;
  v25[32] = 0;
  v26 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v27 = (JSC::JSGlobalObject *)v3;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v23;
  WebCore::Range::processContents(v11, 0, (uint64_t)v28);
  if (v30 == 1)
  {
    v13 = (JSC::JSGlobalObject *)v28[0];
    v14 = v29;
    v29 = 0;
    ((void (*)(char *, _BYTE *))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_)(&v31, v28);
    v28[0] = (_BYTE)v13;
    v29 = v14;
    if (!*((_QWORD *)v5 + 2))
    {
      v15.super.isa = (Class)WebCore::createDOMException((JSC *)v3, v13, (JSC::JSGlobalObject *)&v29);
      JSC::VM::throwException(v5, (JSC::JSGlobalObject *)v3, v15);
      v14 = v29;
    }
    v29 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v3 = 0;
  }
  else
  {
    if (v30)
    {
      v16 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v16, v12);
      return (_BYTE *)v3;
    }
    ((void (*)(char *, _BYTE *))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_)(&v31, v28);
    v3 = 10;
  }
  if (HIDWORD(v24))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v23, v27);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
    if (HIDWORD(v24))
    {
      v19 = v23;
      v20 = 8 * HIDWORD(v24);
      do
      {
        v21 = *v19;
        *v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21, v12);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v26;
  }
  v16 = (WTF *)v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
    goto LABEL_41;
  return (_BYTE *)v3;
}

JSC::JSGlobalObject *WebCore::jsRangePrototypeFunction_extractContents(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WTF::StringImpl *v3;
  JSC::JSGlobalObject *v4;
  uint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  JSC::VM *v14;
  int v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  int v21;
  void *v22;
  WTF *v23;
  JSValue v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE v36[40];
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  WebCore::Node *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;

  v4 = (JSC::JSGlobalObject *)this;
  v5 = *((_QWORD *)a2 + 5);
  v6 = this[7];
  v30 = v6;
  if ((v5 & 0xFFFE000000000002) != 0)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "extractContents");
  v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v8 = *(unsigned int *)(v7 + 0x4C);
  v9 = *(_DWORD *)(v7 + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSRange::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSRange::s_info && v10 != 0);
  }
  if (!v9)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "extractContents");
  v13 = *(_QWORD *)(v5 + 24);
  v34 = (uint64_t *)v36;
  v35 = 4;
  v36[32] = 0;
  v37 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v38 = v4;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v34;
  v14 = *(JSC::VM **)(v7 + 40);
  WebCore::Range::processContents(v13, (WebCore::Node *)1, (uint64_t)&v39);
  v15 = v41;
  if (v41)
  {
    if (v41 != 1)
    {
      v23 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_49:
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree(v23, v22);
      return v4;
    }
    LOBYTE(v16) = (_BYTE)v39;
    v3 = v40;
    v40 = 0;
    LOBYTE(v31) = (_BYTE)v39;
    v32 = v3;
  }
  else
  {
    v16 = v39;
    v39 = 0;
    v31 = v16;
  }
  v33 = v41;
  ((void (*)(char *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v41])(&v42, &v39);
  if (v15)
  {
    LOBYTE(v39) = (_BYTE)v16;
    v32 = 0;
    v40 = v3;
    if (!*((_QWORD *)v6 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(v4, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v40);
      JSC::VM::throwException(v6, v4, v26);
      v3 = v40;
    }
    v40 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, v17);
        v4 = 0;
        v21 = v33;
        goto LABEL_21;
      }
      *(_DWORD *)v3 -= 2;
    }
    v4 = 0;
    v21 = 1;
    goto LABEL_21;
  }
  v18 = v31;
  v31 = 0;
  v39 = v18;
  v4 = (JSC::JSGlobalObject *)WebCore::toJSNewlyCreated((int)v4, v14, &v39);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v19);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  v21 = 0;
LABEL_21:
  ((void (*)(WebCore::Node **, WebCore::Node **))off_1E32DC0E0[v21])(&v39, &v31);
  if (HIDWORD(v35))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v34, v38);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v37;
    if (HIDWORD(v35))
    {
      v27 = v34;
      v28 = 8 * HIDWORD(v35);
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, v22);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v37;
  }
  v23 = (WTF *)v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
    goto LABEL_49;
  return v4;
}

JSC::JSGlobalObject *WebCore::jsRangePrototypeFunction_cloneContents(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WTF::StringImpl *v3;
  JSC::JSGlobalObject *v4;
  uint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  JSC::VM *v14;
  int v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;
  WebCore::Node *v18;
  void *v19;
  WebCore::Node *v20;
  int v21;
  void *v22;
  WTF *v23;
  JSValue v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  WebCore::Node *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  _BYTE v36[40];
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  WebCore::Node *v39;
  WTF::StringImpl *v40;
  int v41;
  char v42;

  v4 = (JSC::JSGlobalObject *)this;
  v5 = *((_QWORD *)a2 + 5);
  v6 = this[7];
  v30 = v6;
  if ((v5 & 0xFFFE000000000002) != 0)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "cloneContents");
  v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
  v8 = *(unsigned int *)(v7 + 0x4C);
  v9 = *(_DWORD *)(v7 + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSRange::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSRange::s_info && v10 != 0);
  }
  if (!v9)
    return (JSC::JSGlobalObject *)WebCore::throwThisTypeError((int)this, (int)&v30, "Range", "cloneContents");
  v13 = *(_QWORD *)(v5 + 24);
  v34 = (uint64_t *)v36;
  v35 = 4;
  v36[32] = 0;
  v37 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v38 = v4;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v34;
  v14 = *(JSC::VM **)(v7 + 40);
  WebCore::Range::processContents(v13, (WebCore::Node *)2, (uint64_t)&v39);
  v15 = v41;
  if (v41)
  {
    if (v41 != 1)
    {
      v23 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_49:
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree(v23, v22);
      return v4;
    }
    LOBYTE(v16) = (_BYTE)v39;
    v3 = v40;
    v40 = 0;
    LOBYTE(v31) = (_BYTE)v39;
    v32 = v3;
  }
  else
  {
    v16 = v39;
    v39 = 0;
    v31 = v16;
  }
  v33 = v41;
  ((void (*)(char *, WebCore::Node **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16DocumentFragmentENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v41])(&v42, &v39);
  if (v15)
  {
    LOBYTE(v39) = (_BYTE)v16;
    v32 = 0;
    v40 = v3;
    if (!*((_QWORD *)v6 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(v4, (JSC::JSGlobalObject *)v16, (JSC::JSGlobalObject *)&v40);
      JSC::VM::throwException(v6, v4, v26);
      v3 = v40;
    }
    v40 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
      {
        WTF::StringImpl::destroy(v3, v17);
        v4 = 0;
        v21 = v33;
        goto LABEL_21;
      }
      *(_DWORD *)v3 -= 2;
    }
    v4 = 0;
    v21 = 1;
    goto LABEL_21;
  }
  v18 = v31;
  v31 = 0;
  v39 = v18;
  v4 = (JSC::JSGlobalObject *)WebCore::toJSNewlyCreated((int)v4, v14, &v39);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*((_DWORD *)v20 + 6) == 2)
    {
      if ((*((_WORD *)v20 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v20, v19);
    }
    else
    {
      *((_DWORD *)v20 + 6) -= 2;
    }
  }
  v21 = 0;
LABEL_21:
  ((void (*)(WebCore::Node **, WebCore::Node **))off_1E32DC0E0[v21])(&v39, &v31);
  if (HIDWORD(v35))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v34, v38);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v37;
    if (HIDWORD(v35))
    {
      v27 = v34;
      v28 = 8 * HIDWORD(v35);
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          if (*(_DWORD *)(v29 + 24) == 2)
          {
            if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v29, v22);
          }
          else
          {
            *(_DWORD *)(v29 + 24) -= 2;
          }
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v37;
  }
  v23 = (WTF *)v34;
  if (v36 != (_BYTE *)v34 && v34 != 0)
    goto LABEL_49;
  return v4;
}

_BYTE *WebCore::jsRangePrototypeFunction_insertNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  JSValue v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  JSValue v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF *v33;
  uint64_t v34;
  _BYTE v35[40];
  uint64_t v36;
  JSC::JSGlobalObject *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  char v42;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "Range", "insertNode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v32, "Range", "insertNode");
  v16 = *(unsigned int **)(v10 + 24);
  v33 = (WTF *)v35;
  v34 = 4;
  v35[32] = 0;
  v36 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v37 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v33;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v21 = JSC::VM::throwException(v9, this, v25);
    goto LABEL_21;
  }
  v17 = *((_QWORD *)a2 + 6);
  v40 = v9;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0xF0u || (v18 = *(_QWORD *)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v40, 0, "node", 5, "Range", 6, a8, "insertNode", 11, "Node", 5);
LABEL_33:
    v21 = 0;
    goto LABEL_21;
  }
  *(_DWORD *)(v18 + 24) += 2;
  v38 = v18;
  WebCore::Range::insertNode(v16, (WebCore::Node *)&v38, (uint64_t)&v40);
  v20 = v38;
  v38 = 0;
  if (v20)
  {
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, (void *)v19);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
  }
  if (v42)
  {
    v19 = v40;
    LOBYTE(v38) = (_BYTE)v40;
    v29 = v41;
    v41 = 0;
    v39 = v29;
    if (!*((_QWORD *)v9 + 2))
    {
      v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v40, (JSC::JSGlobalObject *)&v39);
      JSC::VM::throwException(v9, this, v30);
      v29 = v39;
    }
    v39 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (v42)
    {
      v31 = v41;
      v41 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 != 2)
        {
          v21 = 0;
          *(_DWORD *)v31 -= 2;
          goto LABEL_21;
        }
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v19);
      }
    }
    goto LABEL_33;
  }
  v21 = 10;
LABEL_21:
  if (HIDWORD(v34))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v33, v37);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v36;
    if (HIDWORD(v34))
    {
      v26 = v33;
      v27 = 8 * HIDWORD(v34);
      do
      {
        v28 = *(_QWORD *)v26;
        *(_QWORD *)v26 = 0;
        if (v28)
        {
          if (*(_DWORD *)(v28 + 24) == 2)
          {
            if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v28, (void *)v19);
          }
          else
          {
            *(_DWORD *)(v28 + 24) -= 2;
          }
        }
        v26 = (WTF *)((char *)v26 + 8);
        v27 -= 8;
      }
      while (v27);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v36;
  }
  v22 = v33;
  if (v35 != (_BYTE *)v33 && v33 != 0)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    WTF::fastFree(v22, (void *)v19);
  }
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsRangePrototypeFunction_surroundContents(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::Range *v16;
  uint64_t v17;
  WebCore::Node *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  JSValue v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  WTF *v32;
  uint64_t v33;
  _BYTE v34[40];
  uint64_t v35;
  JSC::JSGlobalObject *v36;
  char v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  char v41;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "Range", "surroundContents");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v31, "Range", "surroundContents");
  v16 = *(WebCore::Range **)(v10 + 24);
  v32 = (WTF *)v34;
  v33 = 4;
  v34[32] = 0;
  v35 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v36 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v32;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    v20 = JSC::VM::throwException(v9, this, v24);
    goto LABEL_18;
  }
  v17 = *((_QWORD *)a2 + 6);
  v39 = v9;
  if ((v17 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v17 + 5) < 0xF0u
    || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
  {
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v39, 0, "newParent", 10, "Range", 6, a8, "surroundContents", 17, "Node", 5);
LABEL_28:
    v20 = 0;
    goto LABEL_18;
  }
  WebCore::Range::surroundContents(v16, v18, (uint64_t)&v39);
  if (v41)
  {
    v19 = (WTF::StringImpl *)v39;
    v37 = (char)v39;
    v28 = v40;
    v40 = 0;
    v38 = v28;
    if (!*((_QWORD *)v9 + 2))
    {
      v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v39, (JSC::JSGlobalObject *)&v38);
      JSC::VM::throwException(v9, this, v29);
      v28 = v38;
    }
    v38 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v19);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (v41)
    {
      v30 = v40;
      v40 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 != 2)
        {
          v20 = 0;
          *(_DWORD *)v30 -= 2;
          goto LABEL_18;
        }
        WTF::StringImpl::destroy(v30, v19);
      }
    }
    goto LABEL_28;
  }
  v20 = 10;
LABEL_18:
  if (HIDWORD(v33))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v32, v36);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v35;
    if (HIDWORD(v33))
    {
      v25 = v32;
      v26 = 8 * HIDWORD(v33);
      do
      {
        v27 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v27)
        {
          if (*(_DWORD *)(v27 + 24) == 2)
          {
            if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v27, v19);
          }
          else
          {
            *(_DWORD *)(v27 + 24) -= 2;
          }
        }
        v25 = (WTF *)((char *)v25 + 8);
        v26 -= 8;
      }
      while (v26);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v35;
  }
  v21 = v32;
  if (v34 != (_BYTE *)v32 && v32 != 0)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v21, v19);
  }
  return (_BYTE *)v20;
}

_BYTE *WebCore::jsRangePrototypeFunction_cloneRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  WebCore::Range *v8;
  uint64_t v10;
  WebCore::Range *v11;

  v3 = (int)this;
  v10 = *((_QWORD *)this + 7);
  v4 = JSC::jsDynamicCast<WebCore::JSRange *>(*((_QWORD *)a2 + 5));
  if (!v4)
    return WebCore::throwThisTypeError(v3, (int)&v10, "Range", "cloneRange");
  v5 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v6 = WebCore::Range::cloneRange(*(WebCore::Range **)(v4 + 24), &v11);
  v7 = WebCore::toJSNewlyCreated((uint64_t)v6, v5, (uint64_t *)&v11);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
      (*(void (**)(WebCore::Range *))(*(_QWORD *)v8 + 8))(v8);
    else
      --*((_DWORD *)v8 + 2);
  }
  return (_BYTE *)v7;
}

uint64_t WebCore::jsRangePrototypeFunction_detach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "Range", "detach");
  v4 = 16 * (*(_DWORD *)v3 & 0xFFFFFFFE);
  v5 = *(unsigned int *)(v4 + 76);
  v6 = *(_DWORD *)(v4 + 76) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRange::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRange::s_info && v7 != 0);
  }
  if (!v6)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "Range", "detach");
  else
    return 10;
}

_BYTE *WebCore::jsRangePrototypeFunction_isPointInRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::Range *v16;
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  uint64_t v20;
  _BYTE *result;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WebCore *v26;
  JSC::JSGlobalObject *v27;
  JSC::CallFrame *v28;
  JSC::VM *v29;
  int v30[2];
  WTF::StringImpl *v31;
  int v32;
  _DWORD v33[2];
  _BYTE v34[8];
  WTF::StringImpl *v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "isPointInRange");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "isPointInRange");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  else
  {
    v16 = *(WebCore::Range **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v30 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v30, 0, "node", 5, "Range", 6, a8, "isPointInRange", 15, "Node", 5);
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v33);
      if (v33[1])
      {
        return 0;
      }
      else
      {
        WebCore::Range::isPointInRange(v16, v18, (WebCore::Node *)v33[0], (uint64_t)v30);
        v19 = v32;
        if (!v32)
        {
          if (LOBYTE(v30[0]))
            v20 = 7;
          else
            v20 = 6;
LABEL_21:
          off_1E32DC0F0[v19](v34, v30);
          return (_BYTE *)v20;
        }
        if (v32 == 1)
        {
          v23 = (WTF::StringImpl *)LOBYTE(v30[0]);
          v34[0] = v30[0];
          v24 = v31;
          v31 = 0;
          v35 = v24;
          if (!*((_QWORD *)v9 + 2))
          {
            v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v35);
            JSC::VM::throwException(v9, this, v25);
            v24 = v35;
          }
          v35 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v20 = 0;
          result = 0;
          v19 = v32;
          if (v32 != -1)
            goto LABEL_21;
        }
        else
        {
          v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
          return (_BYTE *)WebCore::jsRangePrototypeFunction_comparePoint(v26, v27, v28);
        }
      }
    }
  }
  return result;
}

_BYTE *WebCore::jsRangePrototypeFunction_comparePoint(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::Range *v16;
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  unint64_t v20;
  _BYTE *result;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WebCore *v26;
  JSC::JSGlobalObject *v27;
  JSC::CallFrame *v28;
  JSC::VM *v29;
  int v30[2];
  WTF::StringImpl *v31;
  int v32;
  _DWORD v33[2];
  _BYTE v34[8];
  WTF::StringImpl *v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "comparePoint");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "comparePoint");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  else
  {
    v16 = *(WebCore::Range **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v30 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v30, 0, "node", 5, "Range", 6, a8, "comparePoint", 13, "Node", 5);
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v33);
      if (v33[1])
      {
        return 0;
      }
      else
      {
        WebCore::Range::comparePoint(v16, v18, (WebCore::Node *)v33[0], (uint64_t)v30);
        v19 = v32;
        if (!v32)
        {
          v20 = SLOWORD(v30[0]) & 0xFFFFFFFFLL | 0xFFFE000000000000;
LABEL_19:
          ((void (*)(_BYTE *, int *))off_1E32DC0D0[v19])(v34, v30);
          return (_BYTE *)v20;
        }
        if (v32 == 1)
        {
          v23 = (WTF::StringImpl *)LOBYTE(v30[0]);
          v34[0] = v30[0];
          v24 = v31;
          v31 = 0;
          v35 = v24;
          if (!*((_QWORD *)v9 + 2))
          {
            v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v35);
            JSC::VM::throwException(v9, this, v25);
            v24 = v35;
          }
          v35 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v23);
            else
              *(_DWORD *)v24 -= 2;
          }
          v20 = 0;
          result = 0;
          v19 = v32;
          if (v32 != -1)
            goto LABEL_19;
        }
        else
        {
          v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
          return (_BYTE *)WebCore::jsRangePrototypeFunction_intersectsNode(v26, v27, v28);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::jsRangePrototypeFunction_intersectsNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WebCore::Range *v16;
  uint64_t v17;
  WebCore::Node *v18;
  JSValue v20;
  JSC::VM *v21;
  JSC::VM *v22;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "Range", "intersectsNode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "Range", "intersectsNode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v16 = *(WebCore::Range **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v22 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v22, 0, "node", 5, "Range", 6, a8, "intersectsNode", 15, "Node", 5);
      return 0;
    }
    else if (WebCore::Range::intersectsNode(v16, v18))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

_BYTE *WebCore::jsRangePrototypeFunction_expand(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::Range *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31[2];
  WTF::StringImpl *v32;
  char v33;

  v4 = *((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Range", "expand");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSRange::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSRange::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "Range", "expand");
  v11 = *(WebCore::Range **)(v5 + 24);
  if (*((_DWORD *)a2 + 8) == 1 || (v12 = *((_QWORD *)a2 + 6), v12 == 10))
  {
    v13 = 0;
    v28 = 0;
    goto LABEL_24;
  }
  *(_QWORD *)v31 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v31, this);
    goto LABEL_21;
  }
  v14 = *(WTF::StringImpl **)(v12 + 8);
  if ((v14 & 1) != 0)
  {
    v14 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v14)
LABEL_19:
    *(_DWORD *)v14 += 2;
LABEL_20:
  v29 = v14;
LABEL_21:
  if (*(_DWORD *)(v4 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4);
    v13 = v29;
    if (hasExceptionsAfterHandlingTraps)
    {
      v28 = 1;
      v29 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v24);
        else
          *(_DWORD *)v13 -= 2;
      }
      v17 = 0;
      v18 = 1;
      goto LABEL_30;
    }
  }
  else
  {
    v13 = v29;
  }
  v28 = 0;
LABEL_24:
  v27 = 0;
  v29 = v13;
  WebCore::Range::expand(v11, (const WTF::String *)&v29, v31);
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v33)
  {
    v20 = (WTF::StringImpl *)LOBYTE(v31[0]);
    LOBYTE(v29) = v31[0];
    v21 = v32;
    v32 = 0;
    v30 = v21;
    if (!*(_QWORD *)(v4 + 16))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v31[0]), (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException((JSC::VM *)v4, this, v22);
      v21 = v30;
    }
    v30 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v33)
    {
      v23 = v32;
      v32 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 != 2)
        {
          v17 = 0;
          *(_DWORD *)v23 -= 2;
          goto LABEL_29;
        }
        WTF::StringImpl::destroy(v23, v20);
      }
    }
    v17 = 0;
    goto LABEL_29;
  }
  v17 = 10;
LABEL_29:
  v18 = 0;
LABEL_30:
  ((void (*)(int *, uint64_t *))off_1E32DAE20[v18])(v31, &v27);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsRangePrototypeFunction_compareNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unsigned int *v16;
  uint64_t v17;
  WebCore::Node *v18;
  int v19;
  unint64_t v20;
  _BYTE *result;
  JSValue v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  JSValue v25;
  WebCore *v26;
  JSC::JSGlobalObject *v27;
  JSC::CallFrame *v28;
  JSC::VM *v29;
  int v30[2];
  WTF::StringImpl *v31;
  int v32;
  _BYTE v33[8];
  WTF::StringImpl *v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "compareNode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Range", "compareNode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  else
  {
    v16 = *(unsigned int **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    *(_QWORD *)v30 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v30, 0, "node", 5, "Range", 6, a8, "compareNode", 12, "Node", 5);
      return 0;
    }
    else
    {
      WebCore::Range::compareNode(v16, v18, (uint64_t)v30);
      v19 = v32;
      if (!v32)
      {
        v20 = LOBYTE(v30[0]) | 0xFFFE000000000000;
LABEL_18:
        ((void (*)(_BYTE *, int *))off_1E32DC100[v19])(v33, v30);
        return (_BYTE *)v20;
      }
      if (v32 == 1)
      {
        v23 = (WTF::StringImpl *)LOBYTE(v30[0]);
        v33[0] = v30[0];
        v24 = v31;
        v31 = 0;
        v34 = v24;
        if (!*((_QWORD *)v9 + 2))
        {
          v25.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v34);
          JSC::VM::throwException(v9, this, v25);
          v24 = v34;
        }
        v34 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        v20 = 0;
        result = 0;
        v19 = v32;
        if (v32 != -1)
          goto LABEL_18;
      }
      else
      {
        v26 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsRangePrototypeFunction_getClientRects(v26, v27, v28);
      }
    }
  }
  return result;
}

_BYTE *WebCore::jsRangePrototypeFunction_getClientRects(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::JSGlobalObject *v9;
  WebCore::JSDOMGlobalObject *v10;
  WebCore::DOMRectList *v11;
  void *v12;
  unint64_t v13;
  WTF *v16;
  void *v17;
  uint64_t v18;
  WebCore::JSDOMGlobalObject *v19;

  v4 = *((_QWORD *)a2 + 5);
  v18 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Range", "getClientRects");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRange::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRange::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Range", "getClientRects");
  v9 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::Range::getClientRects(*(WebCore::Range **)(v4 + 24), (unsigned int **)&v19);
  v10 = v19;
  v13 = WebCore::toJS(this, v9, v19, v11);
  if (*(_DWORD *)v10 == 1)
  {
    WebCore::DOMRectList::~DOMRectList(v10, v12);
    WTF::fastFree(v16, v17);
  }
  else
  {
    --*(_DWORD *)v10;
  }
  return (_BYTE *)v13;
}

_BYTE *WebCore::jsRangePrototypeFunction_getBoundingClientRect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  JSC::VM *v10;
  void *v11;
  uint64_t v12;
  bmalloc::api *v13;
  uint64_t v15;
  bmalloc::api *v16;

  v4 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "Range", "getBoundingClientRect");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRange::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRange::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v15, "Range", "getBoundingClientRect");
  v10 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::Range::getBoundingClientRect(*(WebCore::Range **)(v4 + 24), (uint64_t *)&v16);
  v12 = WebCore::toJSNewlyCreated((uint64_t)this, v10, (uint64_t *)&v16);
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*((_DWORD *)v13 + 2) == 1)
    {
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)(*(_QWORD *)v13 + 8) = 3;
        *(_QWORD *)v13 = 0;
      }
      bmalloc::api::isoDeallocate(v13, v11);
    }
    else
    {
      --*((_DWORD *)v13 + 2);
    }
  }
  return (_BYTE *)v12;
}

_BYTE *WebCore::jsRangePrototypeFunction_toString(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  v4 = *((_QWORD *)a2 + 5);
  v18 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Range", "toString");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSRange::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSRange::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Range", "toString");
  WebCore::Range::toString(*(WebCore::Range **)(v4 + 24), &v19);
  v10 = *((_QWORD *)this + 7);
  v11 = v19;
  if (!v19 || (v12 = *((_DWORD *)v19 + 1)) == 0)
  {
    v13 = *(_QWORD *)(v10 + 41968);
LABEL_18:
    v19 = 0;
    if (!v11)
      return (_BYTE *)v13;
    goto LABEL_25;
  }
  if (v12 != 1)
    goto LABEL_15;
  v14 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
  if ((*((_BYTE *)v19 + 16) & 4) != 0)
  {
    v15 = *v14;
LABEL_23:
    v13 = *(_QWORD *)(v10 + 8 * v15 + 42216);
    goto LABEL_24;
  }
  v17 = *(unsigned __int16 *)v14;
  if (v17 <= 0xFF)
  {
    v15 = v17;
    goto LABEL_23;
  }
LABEL_15:
  v13 = *(_QWORD *)(v10 + 64760);
  if (!v13 || v19 != *(WTF::StringImpl **)(v13 + 8))
  {
    v13 = JSC::jsStringWithCacheSlowCase();
    v11 = v19;
    goto LABEL_18;
  }
LABEL_24:
  v19 = 0;
LABEL_25:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy(v11, v11);
  else
    *(_DWORD *)v11 -= 2;
  return (_BYTE *)v13;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore16DocumentFragmentENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5Range14CompareResultsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN3JSC6StrongINS9_8JSObjectELNS9_30ShouldStrongDestructorGrabLockE0EEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSE_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (*((_BYTE *)a2 + 8))
  {
    v2 = *a2;
    if (*a2)
    {
      v3 = (uint64_t *)(v2 - 16);
      v4 = *(_QWORD *)(((v2 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v5 = *(uint64_t **)(v2 - 8);
      if (v5)
      {
        v6 = *v3;
        *v5 = *v3;
        *(_QWORD *)(v6 + 8) = v5;
        *v3 = 0;
        v3[1] = 0;
      }
      *v3 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(v4 + 40) = v3;
      *a2 = 0;
    }
  }
}

_BYTE *WebCore::jsReadableStreamPrototypeFunction_cancel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"ReadableStream", "cancel", v6);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
  if (*((_DWORD *)a2 + 8) == 1)
    v8 = 10;
  else
    v8 = *((_QWORD *)a2 + 6);
  return (_BYTE *)WebCore::InternalReadableStream::cancel(v7, this, v8, 0);
}

_BYTE *WebCore::jsReadableStreamPrototypeFunction_getReader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(*((_QWORD *)a2 + 5));
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v9, "ReadableStream", "getReader");
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
  if (*((_DWORD *)a2 + 8) == 1)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 6);
  return (_BYTE *)WebCore::InternalReadableStream::getReader(v6, this, v7);
}

_BYTE *WebCore::jsReadableStreamPrototypeFunction_pipeTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(*((_QWORD *)a2 + 5));
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    if (*((_DWORD *)a2 + 8) == 1)
    {
      v8 = 10;
    }
    else
    {
      v8 = *((_QWORD *)a2 + 6);
      if (*((_DWORD *)a2 + 8) != 2)
      {
        v9 = *((_QWORD *)a2 + 7);
        return (_BYTE *)WebCore::InternalReadableStream::pipeTo(v7, this, v8, v9);
      }
    }
    v9 = 10;
    return (_BYTE *)WebCore::InternalReadableStream::pipeTo(v7, this, v8, v9);
  }
  return WebCore::rejectPromiseWithThisTypeError(this, (JSC::JSGlobalObject *)"ReadableStream", "pipeTo", v6);
}

_BYTE *WebCore::jsReadableStreamPrototypeFunction_pipeThrough(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(*((_QWORD *)a2 + 5));
  if (v5)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8);
    if (*((_DWORD *)a2 + 8) == 1)
    {
      v7 = 10;
    }
    else
    {
      v7 = *((_QWORD *)a2 + 6);
      if (*((_DWORD *)a2 + 8) != 2)
      {
        v8 = *((_QWORD *)a2 + 7);
        return (_BYTE *)WebCore::InternalReadableStream::pipeThrough(v6, this, v7, v8);
      }
    }
    v8 = 10;
    return (_BYTE *)WebCore::InternalReadableStream::pipeThrough(v6, this, v7, v8);
  }
  return WebCore::throwThisTypeError((int)this, (int)&v10, "ReadableStream", "pipeThrough");
}

_BYTE *WebCore::jsReadableStreamPrototypeFunction_tee(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  unint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  JSC::VM *v10;
  WTF *v11;
  WTF **v12;
  objc_class *v13;
  int v14;
  BOOL v15;
  JSValue v16;
  void *v17;
  char v18;
  WTF *v19;
  int v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v25;
  WTF *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  JSValue v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34[2];
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl **v37;
  int v38;
  char v39[8];
  WTF::StringImpl *v40;
  WTF *v41;
  _OWORD v42[4];
  uint64_t v43;
  JSC::VM *v44;

  v4 = *((_QWORD *)a2 + 5);
  v33 = *((_QWORD *)this + 7);
  v5 = JSC::jsDynamicCast<WebCore::JSReadableStream *>(v4);
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v33, "ReadableStream", "tee");
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v7 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::ReadableStream::tee(*(WTF::StringImpl ***)(v5 + 24), 0, (uint64_t)v34);
  if (!v36)
  {
    v8 = *(WTF **)v34;
    v9 = HIDWORD(v35);
    *(_QWORD *)v34 = 0;
    v35 = 0;
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    v44 = v10;
    v39[0] = 0;
    v40 = (WTF::StringImpl *)0x800000000;
    v41 = (WTF *)((char *)v42 + 8);
    memset(v42, 0, sizeof(v42));
    v43 = 0;
    if (v9 >= 9)
    {
      v39[0] = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v40) == 1;
      v11 = (WTF *)((char *)v8 + 8 * v9);
    }
    else
    {
      v11 = (WTF *)((char *)v8 + 8 * v9);
      if (!(_DWORD)v9)
      {
        v20 = 0;
        v18 = 1;
        v19 = (WTF *)((char *)v42 + 8);
LABEL_23:
        v37 = (WTF::StringImpl **)v19;
        v38 = v20;
        v21 = *(JSC::VM **)(v7 + 56);
        if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
        {
          v22 = JSC::constructArray();
LABEL_25:
          v23 = *(uint64_t **)&v42[0];
          if (*(_QWORD *)&v42[0])
          {
            v37 = &v40;
            v31 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v42[0], (uint64_t *)&v37);
            WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v23, v31);
          }
          if (v41 != (WTF *)((char *)v42 + 8) && v41)
            WTF::fastFree(v41, v17);
          if ((v18 & 1) == 0)
          {
            v25 = v8;
            do
            {
              v26 = *(WTF **)v25;
              *(_QWORD *)v25 = 0;
              if (v26)
              {
                if (*(_DWORD *)v26 == 1)
                {
                  v27 = (_DWORD *)*((_QWORD *)v26 + 1);
                  *((_QWORD *)v26 + 1) = 0;
                  if (v27)
                  {
                    if (v27[4] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 16))(v27);
                    else
                      --v27[4];
                  }
                  WTF::fastFree(v26, v17);
                }
                else
                {
                  --*(_DWORD *)v26;
                }
              }
              v25 = (WTF *)((char *)v25 + 8);
            }
            while (v25 != v11);
          }
          if (v8)
            WTF::fastFree(v8, v17);
LABEL_31:
          if (v36 != -1)
            ((void (*)(char *, int *))off_1E32DC368[v36])(v39, v34);
          return (_BYTE *)v22;
        }
LABEL_59:
        v22 = 0;
        goto LABEL_25;
      }
    }
    v12 = (WTF **)v8;
    while (1)
    {
      v13 = (objc_class *)WebCore::wrap<WebCore::ReadableStream>((uint64_t)this, v7, *v12);
      if (*((_DWORD *)v10 + 20))
      {
        if ((JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
          break;
      }
      v14 = (int)v40;
      if ((_DWORD)v40 != HIDWORD(v40) && (v41 != (WTF *)((char *)v42 + 8) ? (v15 = v41 == 0) : (v15 = 1), v15))
      {
        *((_QWORD *)v41 + v40) = v13;
        LODWORD(v40) = v14 + 1;
      }
      else
      {
        v16.super.isa = v13;
        if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v40, v16) == 1)
          v39[0] = 1;
      }
      if (++v12 == (WTF **)v11)
      {
        if (!v39[0])
        {
          v18 = 0;
          v19 = v41;
          v20 = (int)v40;
          goto LABEL_23;
        }
        JSC::throwOutOfMemoryError();
        break;
      }
    }
    v18 = 0;
    goto LABEL_59;
  }
  if (v36 == 1)
  {
    v28 = (WTF::StringImpl *)LOBYTE(v34[0]);
    v39[0] = v34[0];
    v29 = v35;
    v35 = 0;
    v40 = v29;
    if (!*((_QWORD *)v6 + 2))
    {
      v30.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v34[0]), (JSC::JSGlobalObject *)&v40);
      JSC::VM::throwException(v6, this, v30);
      v29 = v40;
    }
    v40 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v22 = 0;
    goto LABEL_31;
  }
  v32 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(v32);
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  WTF *result;

  v3 = a2[3];
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)a2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v7 = (_DWORD *)*((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 1) = 0;
          if (v7)
          {
            if (v7[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
            else
              --v7[4];
          }
          WTF::fastFree(v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_3RefIN7WebCore14ReadableStreamENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJSK_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsReadableStreamSinkPrototypeFunction_enqueue(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v26;
  JSValue v28;
  JSC::VM *v29;
  uint64_t v30;
  int v31;
  JSC::VM *v32;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "ReadableStreamSink", "enqueue");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSReadableStreamSink::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSReadableStreamSink::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "ReadableStreamSink", "enqueue");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v28);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v32 = v9;
  if ((v17 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v17 + 5) == 40)
  {
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::possiblySharedTypedImpl(v17, &v30);
    v18 = (JSC::VM *)v30;
    if (v30)
    {
      v19 = *(_QWORD *)(v30 + 32);
      if (v19
        && (v20 = *(_QWORD *)(v19 + 16)) != 0
        && ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v20 & 0x3FFFFFFFFLL) + v21)
        && (*(_QWORD *)(v19 + 32)
          ? (v22 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v22 = 0),
            v22))
      {
        v30 = 0;
      }
      else if ((*(_BYTE *)(v30 + 6) & 3) == 0)
      {
        v31 = 0;
        v30 = 0;
        v32 = v18;
        (*(void (**)(uint64_t, JSC::VM **))(*(_QWORD *)v16 + 16))(v16, &v32);
        v26 = v32;
        v32 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*(_DWORD *)v26;
        }
        v24 = 0;
        v23 = 10;
        goto LABEL_30;
      }
      if (*(_DWORD *)v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v18;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v32, 0, "chunk", 6, "ReadableStreamSink", 19, a8, "enqueue", 8, "Uint8Array", 11);
  v23 = 0;
  v24 = 1;
  v31 = 1;
LABEL_30:
  ((void (*)(JSC::VM **, uint64_t *))off_1E32DCCC8[v24])(&v32, &v30);
  return (_BYTE *)v23;
}

uint64_t WebCore::jsReadableStreamSinkPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "ReadableStreamSink", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSReadableStreamSink::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSReadableStreamSink::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "ReadableStreamSink", "close");
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 24))(*(_QWORD *)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsReadableStreamSinkPrototypeFunction_error(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "ReadableStreamSink", "error");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSReadableStreamSink::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSReadableStreamSink::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "ReadableStreamSink", "error");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v28 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v27 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v27;
    if (hasExceptionsAfterHandlingTraps)
    {
      v26 = 1;
      v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v22);
        else
          *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v17 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v14 = v27;
  }
  v26 = 0;
  v25 = 0;
  v28 = v14;
  (*(void (**)(uint64_t, WTF::StringImpl **, JSC::CallFrame *))(*(_QWORD *)v11 + 32))(v11, &v28, a3);
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = 0;
  v18 = 10;
LABEL_25:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E32DAE20[v17])(&v28, &v25);
  return (_BYTE *)v18;
}

unint64_t WebCore::jsRemotePlaybackPrototypeFunction_watchAvailability(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::JSDOMGlobalObject *v28;
  unsigned int v29;
  uint64_t v30;
  WebCore::ScriptExecutionContext *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *Allocator;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v42;
  WebCore::DOMGuardedObject *v43;
  JSValue v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  WebCore::DOMGuardedObject *v48;
  WebCore::DOMGuardedObject *v49;
  int v50;
  _DWORD *v51;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E946D4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v48 = v15;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) != 0)
    goto LABEL_50;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSRemotePlayback::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSRemotePlayback::s_info && v22 != 0);
  }
  if (!v21)
  {
LABEL_50:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RemotePlayback", "watchAvailability", v17);
LABEL_59:
    v48 = 0;
LABEL_42:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_44;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v44);
    goto LABEL_59;
  }
  v26 = *(_QWORD *)(v19 + 24);
  v27 = *((_QWORD *)a2 + 6);
  v28 = *(WebCore::JSDOMGlobalObject **)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28);
  v51 = (_DWORD *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) == 0
    && (v29 = *(unsigned __int8 *)(v27 + 5), v29 >= 0x17)
    && ((v29 & 0xFE) == 0x1A
     || (*(_BYTE *)(v27 + 6) & 4) != 0
     && ((*(void (**)(WebCore::DOMGuardedObject **__return_ptr, uint64_t))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0x38))(&v49, v27), (_BYTE)v49)))
  {
    v30 = WTF::fastMalloc((WTF *)0x20);
    v31 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(v28);
    *(_DWORD *)(v30 + 16) = 1;
    *(_QWORD *)v30 = &off_1E33A18C0;
    *(_QWORD *)(v30 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v30, v31);
    *(_QWORD *)v30 = &off_1E32D9810;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v33 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v28);
    Allocator = 0;
    if (v28)
    {
      v45 = v26;
      if ((v28 & 8) != 0)
        v46 = ((unint64_t)v28 - 112) | 1;
      else
        v46 = (unint64_t)v28 & 0xFFFFFFFFFFFFC000;
      if ((v46 & 1) != 0)
        v47 = v46 + 47;
      else
        v47 = *(_QWORD *)v46 + 32;
      Allocator = *(_QWORD **)(v47 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v47 + 16) = *Allocator;
      *Allocator = v28;
      Allocator[1] = 0;
      Allocator[2] = 0;
      v26 = v45;
    }
    v35 = v26 - 32;
    v32[1] = &off_1E32268A0;
    *v32 = Allocator;
    if ((v27 & 8) != 0)
      v36 = (v27 - 112) | 1;
    else
      v36 = v27 & 0xFFFFFFFFFFFFC000;
    if ((v36 & 1) != 0)
      v37 = v36 + 47;
    else
      v37 = *(_QWORD *)v36 + 32;
    v38 = *(_QWORD **)(v37 + 16);
    if (!v38)
      v38 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v37 + 16) = *v38;
    *v38 = v27;
    v38[1] = v32 + 1;
    v38[2] = v33;
    v32[2] = v38;
    *(_QWORD *)(v30 + 24) = v32;
    v50 = 0;
    v49 = 0;
    v51 = (_DWORD *)v30;
    WebCore::RemotePlayback::watchAvailability(v35, (uint64_t *)&v51, (uint64_t *)&v48);
    if (v51)
    {
      if (v51[4] == 1)
        (*(void (**)(void))(*(_QWORD *)v51 + 16))();
      else
        --v51[4];
    }
    v39 = 0;
    v14 = v48;
  }
  else
  {
    WebCore::throwArgumentMustBeFunctionError((uint64_t)this, (uint64_t)&v51, 0, "callback", 9, "RemotePlayback", 15, v18, "watchAvailability", 18);
    v39 = 1;
    v50 = 1;
  }
  ((void (*)(_DWORD **, WebCore::DOMGuardedObject **))off_1E32DC828[v39])(&v51, &v49);
  v48 = 0;
  if (v14)
    goto LABEL_42;
LABEL_44:
  v40 = *(_QWORD *)(v10 + 16);
  if (v40)
  {
    if (*(_QWORD *)(v10 + 24) != v40)
    {
      v42 = *(objc_class **)(v40 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v49);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v49, v42, 0);
      v43 = v49;
      v49 = 0;
      if (v43)
      {
        if (*((_DWORD *)v43 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v43 + 16))(v43);
        else
          --*((_DWORD *)v43 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsRemotePlaybackPrototypeFunction_cancelWatchAvailability(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  objc_class *v34;
  WebCore::DOMGuardedObject *v35;
  JSC::VM *v36;
  unsigned int v37;
  char hasExceptionsAfterHandlingTraps;
  unint64_t v39;
  WebCore::DOMGuardedObject *v40;
  WebCore::DOMGuardedObject *v41;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x194E94AE0);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v40 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSRemotePlayback::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSRemotePlayback::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_52:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"RemotePlayback", "cancelWatchAvailability", v16);
    goto LABEL_34;
  }
  v23 = *(_QWORD *)(v17 + 24);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = 0;
    goto LABEL_33;
  }
  v24 = *((_QWORD *)a2 + 6);
  if (v24 == 10)
  {
    v25 = 0;
    goto LABEL_33;
  }
  v41 = (WebCore::DOMGuardedObject *)*((_QWORD *)a2 + 6);
  v26 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 < 0xFFFE000000000000)
  {
    v30 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v41, this);
      v30 = v39;
    }
    v31 = (v30 >> 52) & 0x7FF;
    if ((v31 - 1023) <= 0x53)
    {
      v32 = v30 >> (51 - (v30 >> 52));
      if (v31 > 0x433)
        LODWORD(v32) = v30 << ((v30 >> 52) - 51);
      if (v31 >= 0x41F)
        v33 = v32;
      else
        v33 = (((1 << ((v30 >> 52) + 1)) - 1) & v32) + (1 << ((v30 >> 52) + 1));
      if ((v30 & 0x8000000000000000) == 0)
        v27 = v33;
      else
        v27 = -v33;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = v24;
  }
  if (!*((_DWORD *)v26 + 20)
    || (v36 = v26,
        v37 = v27,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v36),
        v27 = v37,
        (hasExceptionsAfterHandlingTraps & 1) == 0))
  {
    v25 = v27 | 0x100000000;
LABEL_33:
    WebCore::RemotePlayback::cancelWatchAvailability(v23 - 32, v25, (uint64_t *)&v40);
    v14 = v40;
    if (!v40)
      goto LABEL_36;
  }
LABEL_34:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_36:
  v28 = *(_QWORD *)(v10 + 16);
  if (v28)
  {
    if (*(_QWORD *)(v10 + 24) != v28)
    {
      v34 = *(objc_class **)(v28 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v41);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v41, v34, 0);
      v35 = v41;
      v41 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
        else
          --*((_DWORD *)v35 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

